-module('Idris.Idris2.TTImp.ProcessBuiltin').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in processIntegerToNat-16799'/20,
  'case--case block in case block in case block in processIntegerToNat-16753'/17,
  'case--case block in processIntegerToNat-16656'/10,
  'case--case block in case block in case block in processNatToInteger-16057'/18,
  'case--case block in case block in processNatToInteger-16013'/15,
  'case--case block in processNatToInteger-15956'/10,
  'case--case block in processBuiltinNatural-15756'/10,
  'case--case block in checkNatCons,checkCon-15104'/11,
  'nested--6919-14084--in--un--isInteger'/6,
  'nested--6919-14085--in--un--go'/7,
  'nested--7732-14832--in--un--checkTyS'/6,
  'nested--7732-14833--in--un--checkCon'/7,
  'un--termConMatch'/2,
  'un--showDefType'/1,
  'un--processNatToInteger'/5,
  'un--processIntegerToNat'/5,
  'un--processBuiltinNatural'/5,
  'un--processBuiltin'/7,
  'un--isStrict'/1,
  'un--getTypeCons'/2,
  'un--getTypeArgs'/2,
  'un--getReturnType'/2,
  'un--getNatBuiltin'/3,
  'un--getNEIntegerIndex'/2,
  'un--getNEIndex'/2,
  'un--getNEArgs'/2,
  'un--getFirstNEType'/2,
  'un--getConsGDef'/4,
  'un--checkNatCons'/5,
  'un--addNatToInteger'/4,
  'un--addIntegerToNat'/4,
  'un--addBuiltinNat'/4
]).
'case--case block in case block in case block in case block in processIntegerToNat-16799'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> begin (V21 = ('un--getNatBuiltin'(V0, V20, V19))), case V21 of {'Idris.Prelude.Types.Left', E1} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V23) -> case V23 of {'Idris.Prelude.Types.Just', E3} -> (fun (V24) -> ('un--addIntegerToNat'(V0, V5, {'Idris.Core.Context.MkIntToNat', V14, V15}, V19)) end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, <<"Return type is not a \x{27}Nat\x{27}-like type"/utf8>>}, V19)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No type constructor found for return type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V19)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processIntegerToNat-16753'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> case V17 of {'Idris.Builtin.DPair.MkDPair', E1, E2} -> (fun (V18, V19) -> fun (V20) -> ('case--case block in case block in case block in case block in processIntegerToNat-16799'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V19, ('un--getTypeCons'(V18, V19)), V20)) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V8))))}, V21)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processIntegerToNat-16656'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> begin (V15 = ('Idris.Idris2.Prelude.Types.List':'un--length'(('un--getTypeArgs'([], V8))))), fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"builtin.IntegerToNatural"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end, V8, V16))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> case ('un--getNEIntegerIndex'(V15, V8)) of {'Idris.Prelude.Types.Just', E7} -> (fun (V20) -> case V20 of [E8 | E9] -> (fun (V21, V22) -> case V22 of [] -> (('case--case block in case block in case block in processIntegerToNat-16753'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, V12, V14, V13, V15, V21, ('un--getReturnType'([], V8))))(V16)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than one unrestricted arguments of type `Integer` found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V16)) end end(E8, E9)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No unrestricted arguments of type `Integer` found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V16)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than one unrestricted arguments of type `Integer` found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V16)) end end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected arity while processing %builtin IntegerToNatural "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<" (getNEIntegerIndex returned Nothing)"/utf8>>))))}, V16)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3, E4)); _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected function definition, found "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showDefType'(V9)), <<"."/utf8>>))))}, V23)) end end.
'case--case block in case block in case block in processNatToInteger-16057'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V16 of {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> begin (V19 = ('un--getNatBuiltin'(V0, V18, V17))), case V19 of {'Idris.Prelude.Types.Left', E1} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V21) -> case V21 of {'Idris.Prelude.Types.Just', E3} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Prelude.Types.List':'un--length'(('un--getTypeArgs'([], V13))))), case ('un--getNEIndex'(V23, V13)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V24) -> ('un--addNatToInteger'(V0, V5, {'Idris.Core.Context.MkNatToInt', V23, V24}, V17)) end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Couldn\x{27}t find non-erased argument."/utf8>>}, V17)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, <<"Non-erased argument is not a \x{27}Nat\x{27}-like type."/utf8>>}, V17)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No type constructor found for non-erased arguement of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V17)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processNatToInteger-16013'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [E0 | E1] -> (fun (V15, V16) -> case V15 of {'Idris.Builtin.DPair.MkDPair', E2, E3} -> (fun (V17, V18) -> case V16 of [] -> fun (V19) -> ('case--case block in case block in case block in processNatToInteger-16057'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17, V18, ('un--getTypeCons'(V17, V18)), V19)) end; _ -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than 1 non-erased arguments found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V20)) end end end(E2, E3)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than 1 non-erased arguments found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V21)) end end end(E0, E1)); [] -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No arguments found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V22)) end; _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"More than 1 non-erased arguments found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), <<"."/utf8>>))))}, V23)) end end.
'case--case block in processNatToInteger-15956'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V15, V16, V17)) end end end, fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V18, V19, V20)) end end end}, case V6 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V23 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V42 of {'Idris.Prelude.Types.Left', E26} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V44) -> begin (V45 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"builtin.NaturalToInteger"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end, V44, V9))), case V45 of {'Idris.Prelude.Types.Left', E28} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V47) -> (('case--case block in case block in processNatToInteger-16013'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V11, V12, V14, V13, V44, ('un--getNEArgs'([], V44))))(V9)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected function definition, found "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showDefType'(V8)), <<"."/utf8>>))))}, V9)) end.
'case--case block in processBuiltinNatural-15756'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Context.TCon', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V46 = ('un--getConsGDef'(case V3 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V18 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V16, V9))), case V46 of {'Idris.Prelude.Types.Left', E36} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V48) -> begin (V77 = ('un--checkNatCons'(case V3 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V49 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V48, V5, V2, V9))), case V77 of {'Idris.Prelude.Types.Left', E66} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V79) -> begin (V82 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, case V79 of {'Idris.Core.Context.MkNatBuiltin', E68, E69} -> (fun (V80, V81) -> V80 end(E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V82 of {'Idris.Prelude.Types.Left', E70} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V84) -> begin (V87 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, case V79 of {'Idris.Core.Context.MkNatBuiltin', E72, E73} -> (fun (V85, V86) -> V86 end(E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V87 of {'Idris.Prelude.Types.Left', E74} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V89) -> ('un--addBuiltinNat'(V0, V5, {'Idris.Core.Context.MkNatBuiltin', V84, V89}, V9)) end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected a type constructor, found "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showDefType'(V8)), <<"."/utf8>>))))}, V9)) end.
'case--case block in checkNatCons,checkCon-15104'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Context.DCon', E0, E1, E2} -> (fun (V11, V12, V13) -> case ('Idris.Idris2.Prelude.Types':'un--minus'(V12, ('Idris.Idris2.Prelude.Types.List':'un--length'(case V5 of {'Idris.Core.Context.MkGlobalDef', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V17 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 0 -> fun (V35) -> case V7 of {'Idris.Prelude.Types.Just', E27} -> (fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Multiple \x{27}Z\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>))))}, V35)) end(E27)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, V8}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V58 = (('Idris.Idris2.Prelude.Types':'un--minus'(V12, ('Idris.Idris2.Prelude.Types.List':'un--length'(case V5 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V40 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) - 1)), fun (V59) -> case V58 of 0 -> case V8 of {'Idris.Prelude.Types.Just', E24} -> (fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Multiple \x{27}S\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>))))}, V59)) end(E24)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V61 = (('nested--7732-14832--in--un--checkTyS'(V0, V1, V2, V3, V4, V5))(V59))), case V61 of {'Idris.Prelude.Types.Left', E25} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, {'Idris.Prelude.Types.Just', V4}}} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)), <<" doesn\x{27}t match any pattern for Natural."/utf8>>))))}, V59)) end end end end end(E0, E1, E2)); _ -> fun (V64) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Expected data constructor, found:"/utf8>>, ('un--showDefType'(V10))))}, V64)) end end.
'nested--6919-14084--in--un--isInteger'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.PrimVal', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Core.TT.IntegerType'} -> (fun () -> 1 end()); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--6919-14085--in--un--go'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of 0 -> {'Idris.Prelude.Types.Just', []}; _ -> begin (V7 = (V5 - 1)), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V10, V11)) end end end end, fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> {'Idris.Data.Fin.FS', V13} end, V12)) end, ('un--getNEIntegerIndex'(V7, V6)))) end end.
'nested--7732-14832--in--un--checkTyS'(V0, V1, V2, V3, V4, V5) -> begin (V27 = case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('un--getFirstNEType'([], V27)) of {'Idris.Prelude.Types.Just', E21} -> (fun (V28) -> case V28 of {'Idris.Builtin.DPair.MkDPair', E22, E23} -> (fun (V29, V30) -> fun (V31) -> case ('un--getReturnType'([], V27)) of {'Idris.Prelude.Types.Just', E24} -> (fun (V32) -> case V32 of {'Idris.Builtin.DPair.MkDPair', E25, E26} -> (fun (V33, V34) -> begin (V35 = case ('un--termConMatch'(V30, V34)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Incorrect type for \x{27}S\x{27}-like constructor for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>))))}, V31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V35 of {'Idris.Prelude.Types.Left', E27} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V37) -> begin (V38 = case ('un--isStrict'(V30)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, <<"Natural builtin does not support lazy types."/utf8>>}, V31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V38 of {'Idris.Prelude.Types.Left', E29} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V40) -> {'Idris.Prelude.Types.Right', 0} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V27))))}, V31)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Expected a non-erased argument, found none."/utf8>>}, V41)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--7732-14833--in--un--checkCon'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> begin (V9 = (V5(V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> begin (V14 = {'Idris.Builtin.MkPair', V12, V13}), (('case--case block in checkNatCons,checkCon-15104'(V0, V1, V2, V3, V7, V8, V5, V12, V13, V14, case V8 of {'Idris.Core.Context.MkGlobalDef', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V32 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--termConMatch'(V0, V1) -> case V0 of {'Idris.Core.TT.Local', E40, E41, E42} -> (fun (V2, V3, V4) -> case V1 of {'Idris.Core.TT.Local', E83, E84, E85} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V4, V7)) end(E83, E84, E85)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E80, E81, E82} -> (fun (V8, V9, V10) -> ('un--termConMatch'(V0, V10)) end(E80, E81, E82)); _ -> case V0 of {'Idris.Core.TT.TDelay', E56, E57, E58, E59} -> (fun (V11, V12, V13, V14) -> case V1 of {'Idris.Core.TT.TDelay', E73, E74, E75, E76} -> (fun (V15, V16, V17, V18) -> case ('un--termConMatch'(V13, V17)) of 1 -> ('un--termConMatch'(V14, V18)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73, E74, E75, E76)); _ -> case V1 of {'Idris.Core.TT.TForce', E70, E71, E72} -> (fun (V19, V20, V21) -> ('un--termConMatch'(V0, V21)) end(E70, E71, E72)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E60, E61} -> (fun (V22, V23) -> case V1 of {'Idris.Core.TT.PrimVal', E62, E63} -> (fun (V24, V25) -> 1 end(E62, E63)); _ -> 0 end end(E60, E61)); {'Idris.Core.TT.Erased', E64, E65} -> (fun (V26, V27) -> case V1 of {'Idris.Core.TT.Erased', E66, E67} -> (fun (V28, V29) -> 1 end(E66, E67)); _ -> 0 end end(E64, E65)); {'Idris.Core.TT.TType', E68} -> (fun (V30) -> case V1 of {'Idris.Core.TT.TType', E69} -> (fun (V31) -> 1 end(E69)); _ -> 0 end end(E68)); _ -> 0 end end end end(E56, E57, E58, E59)); {'Idris.Core.TT.TForce', E77, E78, E79} -> (fun (V32, V33, V34) -> ('un--termConMatch'(V34, V1)) end(E77, E78, E79)); _ -> case V1 of {'Idris.Core.TT.TForce', E53, E54, E55} -> (fun (V35, V36, V37) -> ('un--termConMatch'(V0, V37)) end(E53, E54, E55)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E43, E44} -> (fun (V38, V39) -> case V1 of {'Idris.Core.TT.PrimVal', E45, E46} -> (fun (V40, V41) -> 1 end(E45, E46)); _ -> 0 end end(E43, E44)); {'Idris.Core.TT.Erased', E47, E48} -> (fun (V42, V43) -> case V1 of {'Idris.Core.TT.Erased', E49, E50} -> (fun (V44, V45) -> 1 end(E49, E50)); _ -> 0 end end(E47, E48)); {'Idris.Core.TT.TType', E51} -> (fun (V46) -> case V1 of {'Idris.Core.TT.TType', E52} -> (fun (V47) -> 1 end(E52)); _ -> 0 end end(E51)); _ -> 0 end end end end end end(E40, E41, E42)); {'Idris.Core.TT.Ref', E86, E87, E88} -> (fun (V48, V49, V50) -> case V1 of {'Idris.Core.TT.Ref', E129, E130, E131} -> (fun (V51, V52, V53) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V50, V53)) end(E129, E130, E131)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E126, E127, E128} -> (fun (V54, V55, V56) -> ('un--termConMatch'(V0, V56)) end(E126, E127, E128)); _ -> case V0 of {'Idris.Core.TT.TDelay', E102, E103, E104, E105} -> (fun (V57, V58, V59, V60) -> case V1 of {'Idris.Core.TT.TDelay', E119, E120, E121, E122} -> (fun (V61, V62, V63, V64) -> case ('un--termConMatch'(V59, V63)) of 1 -> ('un--termConMatch'(V60, V64)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E119, E120, E121, E122)); _ -> case V1 of {'Idris.Core.TT.TForce', E116, E117, E118} -> (fun (V65, V66, V67) -> ('un--termConMatch'(V0, V67)) end(E116, E117, E118)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E106, E107} -> (fun (V68, V69) -> case V1 of {'Idris.Core.TT.PrimVal', E108, E109} -> (fun (V70, V71) -> 1 end(E108, E109)); _ -> 0 end end(E106, E107)); {'Idris.Core.TT.Erased', E110, E111} -> (fun (V72, V73) -> case V1 of {'Idris.Core.TT.Erased', E112, E113} -> (fun (V74, V75) -> 1 end(E112, E113)); _ -> 0 end end(E110, E111)); {'Idris.Core.TT.TType', E114} -> (fun (V76) -> case V1 of {'Idris.Core.TT.TType', E115} -> (fun (V77) -> 1 end(E115)); _ -> 0 end end(E114)); _ -> 0 end end end end(E102, E103, E104, E105)); {'Idris.Core.TT.TForce', E123, E124, E125} -> (fun (V78, V79, V80) -> ('un--termConMatch'(V80, V1)) end(E123, E124, E125)); _ -> case V1 of {'Idris.Core.TT.TForce', E99, E100, E101} -> (fun (V81, V82, V83) -> ('un--termConMatch'(V0, V83)) end(E99, E100, E101)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E89, E90} -> (fun (V84, V85) -> case V1 of {'Idris.Core.TT.PrimVal', E91, E92} -> (fun (V86, V87) -> 1 end(E91, E92)); _ -> 0 end end(E89, E90)); {'Idris.Core.TT.Erased', E93, E94} -> (fun (V88, V89) -> case V1 of {'Idris.Core.TT.Erased', E95, E96} -> (fun (V90, V91) -> 1 end(E95, E96)); _ -> 0 end end(E93, E94)); {'Idris.Core.TT.TType', E97} -> (fun (V92) -> case V1 of {'Idris.Core.TT.TType', E98} -> (fun (V93) -> 1 end(E98)); _ -> 0 end end(E97)); _ -> 0 end end end end end end(E86, E87, E88)); {'Idris.Core.TT.Meta', E132, E133, E134, E135} -> (fun (V94, V95, V96, V97) -> case V1 of {'Idris.Core.TT.Meta', E176, E177, E178, E179} -> (fun (V98, V99, V100, V101) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V96, V100)) of 1 -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V109, V110, V111)) end end end end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V113)) end end, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V117, V118, V119, V120)) end end end end end end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V122)) end end, fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V125, V126, V127)) end end end end end}, fun (V128) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V129) -> fun (V130) -> ('un--termConMatch'(V129, V130)) end end, V128)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V97, V101)))); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E176, E177, E178, E179)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E173, E174, E175} -> (fun (V131, V132, V133) -> ('un--termConMatch'(V0, V133)) end(E173, E174, E175)); _ -> case V0 of {'Idris.Core.TT.TDelay', E149, E150, E151, E152} -> (fun (V134, V135, V136, V137) -> case V1 of {'Idris.Core.TT.TDelay', E166, E167, E168, E169} -> (fun (V138, V139, V140, V141) -> case ('un--termConMatch'(V136, V140)) of 1 -> ('un--termConMatch'(V137, V141)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E166, E167, E168, E169)); _ -> case V1 of {'Idris.Core.TT.TForce', E163, E164, E165} -> (fun (V142, V143, V144) -> ('un--termConMatch'(V0, V144)) end(E163, E164, E165)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E153, E154} -> (fun (V145, V146) -> case V1 of {'Idris.Core.TT.PrimVal', E155, E156} -> (fun (V147, V148) -> 1 end(E155, E156)); _ -> 0 end end(E153, E154)); {'Idris.Core.TT.Erased', E157, E158} -> (fun (V149, V150) -> case V1 of {'Idris.Core.TT.Erased', E159, E160} -> (fun (V151, V152) -> 1 end(E159, E160)); _ -> 0 end end(E157, E158)); {'Idris.Core.TT.TType', E161} -> (fun (V153) -> case V1 of {'Idris.Core.TT.TType', E162} -> (fun (V154) -> 1 end(E162)); _ -> 0 end end(E161)); _ -> 0 end end end end(E149, E150, E151, E152)); {'Idris.Core.TT.TForce', E170, E171, E172} -> (fun (V155, V156, V157) -> ('un--termConMatch'(V157, V1)) end(E170, E171, E172)); _ -> case V1 of {'Idris.Core.TT.TForce', E146, E147, E148} -> (fun (V158, V159, V160) -> ('un--termConMatch'(V0, V160)) end(E146, E147, E148)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E136, E137} -> (fun (V161, V162) -> case V1 of {'Idris.Core.TT.PrimVal', E138, E139} -> (fun (V163, V164) -> 1 end(E138, E139)); _ -> 0 end end(E136, E137)); {'Idris.Core.TT.Erased', E140, E141} -> (fun (V165, V166) -> case V1 of {'Idris.Core.TT.Erased', E142, E143} -> (fun (V167, V168) -> 1 end(E142, E143)); _ -> 0 end end(E140, E141)); {'Idris.Core.TT.TType', E144} -> (fun (V169) -> case V1 of {'Idris.Core.TT.TType', E145} -> (fun (V170) -> 1 end(E145)); _ -> 0 end end(E144)); _ -> 0 end end end end end end(E132, E133, E134, E135)); {'Idris.Core.TT.Bind', E180, E181, E182, E183} -> (fun (V171, V172, V173, V174) -> case V1 of {'Idris.Core.TT.Bind', E224, E225, E226, E227} -> (fun (V175, V176, V177, V178) -> case ('Idris.Idris2.Core.TT':'un--eqBinderBy'(fun (V179) -> fun (V180) -> ('un--termConMatch'(V179, V180)) end end, V173, V177)) of 1 -> ('un--termConMatch'(V174, V178)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E224, E225, E226, E227)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E221, E222, E223} -> (fun (V181, V182, V183) -> ('un--termConMatch'(V0, V183)) end(E221, E222, E223)); _ -> case V0 of {'Idris.Core.TT.TDelay', E197, E198, E199, E200} -> (fun (V184, V185, V186, V187) -> case V1 of {'Idris.Core.TT.TDelay', E214, E215, E216, E217} -> (fun (V188, V189, V190, V191) -> case ('un--termConMatch'(V186, V190)) of 1 -> ('un--termConMatch'(V187, V191)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E214, E215, E216, E217)); _ -> case V1 of {'Idris.Core.TT.TForce', E211, E212, E213} -> (fun (V192, V193, V194) -> ('un--termConMatch'(V0, V194)) end(E211, E212, E213)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E201, E202} -> (fun (V195, V196) -> case V1 of {'Idris.Core.TT.PrimVal', E203, E204} -> (fun (V197, V198) -> 1 end(E203, E204)); _ -> 0 end end(E201, E202)); {'Idris.Core.TT.Erased', E205, E206} -> (fun (V199, V200) -> case V1 of {'Idris.Core.TT.Erased', E207, E208} -> (fun (V201, V202) -> 1 end(E207, E208)); _ -> 0 end end(E205, E206)); {'Idris.Core.TT.TType', E209} -> (fun (V203) -> case V1 of {'Idris.Core.TT.TType', E210} -> (fun (V204) -> 1 end(E210)); _ -> 0 end end(E209)); _ -> 0 end end end end(E197, E198, E199, E200)); {'Idris.Core.TT.TForce', E218, E219, E220} -> (fun (V205, V206, V207) -> ('un--termConMatch'(V207, V1)) end(E218, E219, E220)); _ -> case V1 of {'Idris.Core.TT.TForce', E194, E195, E196} -> (fun (V208, V209, V210) -> ('un--termConMatch'(V0, V210)) end(E194, E195, E196)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E184, E185} -> (fun (V211, V212) -> case V1 of {'Idris.Core.TT.PrimVal', E186, E187} -> (fun (V213, V214) -> 1 end(E186, E187)); _ -> 0 end end(E184, E185)); {'Idris.Core.TT.Erased', E188, E189} -> (fun (V215, V216) -> case V1 of {'Idris.Core.TT.Erased', E190, E191} -> (fun (V217, V218) -> 1 end(E190, E191)); _ -> 0 end end(E188, E189)); {'Idris.Core.TT.TType', E192} -> (fun (V219) -> case V1 of {'Idris.Core.TT.TType', E193} -> (fun (V220) -> 1 end(E193)); _ -> 0 end end(E192)); _ -> 0 end end end end end end(E180, E181, E182, E183)); {'Idris.Core.TT.App', E228, E229, E230} -> (fun (V221, V222, V223) -> case V1 of {'Idris.Core.TT.App', E271, E272, E273} -> (fun (V224, V225, V226) -> ('un--termConMatch'(V222, V225)) end(E271, E272, E273)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E268, E269, E270} -> (fun (V227, V228, V229) -> ('un--termConMatch'(V0, V229)) end(E268, E269, E270)); _ -> case V0 of {'Idris.Core.TT.TDelay', E244, E245, E246, E247} -> (fun (V230, V231, V232, V233) -> case V1 of {'Idris.Core.TT.TDelay', E261, E262, E263, E264} -> (fun (V234, V235, V236, V237) -> case ('un--termConMatch'(V232, V236)) of 1 -> ('un--termConMatch'(V233, V237)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E261, E262, E263, E264)); _ -> case V1 of {'Idris.Core.TT.TForce', E258, E259, E260} -> (fun (V238, V239, V240) -> ('un--termConMatch'(V0, V240)) end(E258, E259, E260)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E248, E249} -> (fun (V241, V242) -> case V1 of {'Idris.Core.TT.PrimVal', E250, E251} -> (fun (V243, V244) -> 1 end(E250, E251)); _ -> 0 end end(E248, E249)); {'Idris.Core.TT.Erased', E252, E253} -> (fun (V245, V246) -> case V1 of {'Idris.Core.TT.Erased', E254, E255} -> (fun (V247, V248) -> 1 end(E254, E255)); _ -> 0 end end(E252, E253)); {'Idris.Core.TT.TType', E256} -> (fun (V249) -> case V1 of {'Idris.Core.TT.TType', E257} -> (fun (V250) -> 1 end(E257)); _ -> 0 end end(E256)); _ -> 0 end end end end(E244, E245, E246, E247)); {'Idris.Core.TT.TForce', E265, E266, E267} -> (fun (V251, V252, V253) -> ('un--termConMatch'(V253, V1)) end(E265, E266, E267)); _ -> case V1 of {'Idris.Core.TT.TForce', E241, E242, E243} -> (fun (V254, V255, V256) -> ('un--termConMatch'(V0, V256)) end(E241, E242, E243)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E231, E232} -> (fun (V257, V258) -> case V1 of {'Idris.Core.TT.PrimVal', E233, E234} -> (fun (V259, V260) -> 1 end(E233, E234)); _ -> 0 end end(E231, E232)); {'Idris.Core.TT.Erased', E235, E236} -> (fun (V261, V262) -> case V1 of {'Idris.Core.TT.Erased', E237, E238} -> (fun (V263, V264) -> 1 end(E237, E238)); _ -> 0 end end(E235, E236)); {'Idris.Core.TT.TType', E239} -> (fun (V265) -> case V1 of {'Idris.Core.TT.TType', E240} -> (fun (V266) -> 1 end(E240)); _ -> 0 end end(E239)); _ -> 0 end end end end end end(E228, E229, E230)); {'Idris.Core.TT.As', E274, E275, E276, E277} -> (fun (V267, V268, V269, V270) -> case V1 of {'Idris.Core.TT.As', E318, E319, E320, E321} -> (fun (V271, V272, V273, V274) -> case ('un--termConMatch'(V269, V273)) of 1 -> ('un--termConMatch'(V270, V274)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E318, E319, E320, E321)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E315, E316, E317} -> (fun (V275, V276, V277) -> ('un--termConMatch'(V0, V277)) end(E315, E316, E317)); _ -> case V0 of {'Idris.Core.TT.TDelay', E291, E292, E293, E294} -> (fun (V278, V279, V280, V281) -> case V1 of {'Idris.Core.TT.TDelay', E308, E309, E310, E311} -> (fun (V282, V283, V284, V285) -> case ('un--termConMatch'(V280, V284)) of 1 -> ('un--termConMatch'(V281, V285)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E308, E309, E310, E311)); _ -> case V1 of {'Idris.Core.TT.TForce', E305, E306, E307} -> (fun (V286, V287, V288) -> ('un--termConMatch'(V0, V288)) end(E305, E306, E307)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E295, E296} -> (fun (V289, V290) -> case V1 of {'Idris.Core.TT.PrimVal', E297, E298} -> (fun (V291, V292) -> 1 end(E297, E298)); _ -> 0 end end(E295, E296)); {'Idris.Core.TT.Erased', E299, E300} -> (fun (V293, V294) -> case V1 of {'Idris.Core.TT.Erased', E301, E302} -> (fun (V295, V296) -> 1 end(E301, E302)); _ -> 0 end end(E299, E300)); {'Idris.Core.TT.TType', E303} -> (fun (V297) -> case V1 of {'Idris.Core.TT.TType', E304} -> (fun (V298) -> 1 end(E304)); _ -> 0 end end(E303)); _ -> 0 end end end end(E291, E292, E293, E294)); {'Idris.Core.TT.TForce', E312, E313, E314} -> (fun (V299, V300, V301) -> ('un--termConMatch'(V301, V1)) end(E312, E313, E314)); _ -> case V1 of {'Idris.Core.TT.TForce', E288, E289, E290} -> (fun (V302, V303, V304) -> ('un--termConMatch'(V0, V304)) end(E288, E289, E290)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E278, E279} -> (fun (V305, V306) -> case V1 of {'Idris.Core.TT.PrimVal', E280, E281} -> (fun (V307, V308) -> 1 end(E280, E281)); _ -> 0 end end(E278, E279)); {'Idris.Core.TT.Erased', E282, E283} -> (fun (V309, V310) -> case V1 of {'Idris.Core.TT.Erased', E284, E285} -> (fun (V311, V312) -> 1 end(E284, E285)); _ -> 0 end end(E282, E283)); {'Idris.Core.TT.TType', E286} -> (fun (V313) -> case V1 of {'Idris.Core.TT.TType', E287} -> (fun (V314) -> 1 end(E287)); _ -> 0 end end(E286)); _ -> 0 end end end end end end(E274, E275, E276, E277)); {'Idris.Core.TT.TDelayed', E322, E323, E324} -> (fun (V315, V316, V317) -> ('un--termConMatch'(V317, V1)) end(E322, E323, E324)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E37, E38, E39} -> (fun (V318, V319, V320) -> ('un--termConMatch'(V0, V320)) end(E37, E38, E39)); _ -> case V0 of {'Idris.Core.TT.TDelay', E13, E14, E15, E16} -> (fun (V321, V322, V323, V324) -> case V1 of {'Idris.Core.TT.TDelay', E30, E31, E32, E33} -> (fun (V325, V326, V327, V328) -> case ('un--termConMatch'(V323, V327)) of 1 -> ('un--termConMatch'(V324, V328)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33)); _ -> case V1 of {'Idris.Core.TT.TForce', E27, E28, E29} -> (fun (V329, V330, V331) -> ('un--termConMatch'(V0, V331)) end(E27, E28, E29)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E17, E18} -> (fun (V332, V333) -> case V1 of {'Idris.Core.TT.PrimVal', E19, E20} -> (fun (V334, V335) -> 1 end(E19, E20)); _ -> 0 end end(E17, E18)); {'Idris.Core.TT.Erased', E21, E22} -> (fun (V336, V337) -> case V1 of {'Idris.Core.TT.Erased', E23, E24} -> (fun (V338, V339) -> 1 end(E23, E24)); _ -> 0 end end(E21, E22)); {'Idris.Core.TT.TType', E25} -> (fun (V340) -> case V1 of {'Idris.Core.TT.TType', E26} -> (fun (V341) -> 1 end(E26)); _ -> 0 end end(E25)); _ -> 0 end end end end(E13, E14, E15, E16)); {'Idris.Core.TT.TForce', E34, E35, E36} -> (fun (V342, V343, V344) -> ('un--termConMatch'(V344, V1)) end(E34, E35, E36)); _ -> case V1 of {'Idris.Core.TT.TForce', E10, E11, E12} -> (fun (V345, V346, V347) -> ('un--termConMatch'(V0, V347)) end(E10, E11, E12)); _ -> case V0 of {'Idris.Core.TT.PrimVal', E0, E1} -> (fun (V348, V349) -> case V1 of {'Idris.Core.TT.PrimVal', E2, E3} -> (fun (V350, V351) -> 1 end(E2, E3)); _ -> 0 end end(E0, E1)); {'Idris.Core.TT.Erased', E4, E5} -> (fun (V352, V353) -> case V1 of {'Idris.Core.TT.Erased', E6, E7} -> (fun (V354, V355) -> 1 end(E6, E7)); _ -> 0 end end(E4, E5)); {'Idris.Core.TT.TType', E8} -> (fun (V356) -> case V1 of {'Idris.Core.TT.TType', E9} -> (fun (V357) -> 1 end(E9)); _ -> 0 end end(E8)); _ -> 0 end end end end end.
'un--showDefType'(V0) -> case V0 of {'Idris.Core.Context.None'} -> (fun () -> <<"undefined"/utf8>> end()); {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> <<"function"/utf8>> end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.ExternDef', E5} -> (fun (V6) -> <<"external function"/utf8>> end(E5)); {'Idris.Core.Context.ForeignDef', E6, E7} -> (fun (V7, V8) -> <<"foreign function"/utf8>> end(E6, E7)); {'Idris.Core.Context.Builtin', E8, E9} -> (fun (V9, V10) -> <<"builtin function"/utf8>> end(E8, E9)); {'Idris.Core.Context.DCon', E10, E11, E12} -> (fun (V11, V12, V13) -> <<"data constructor"/utf8>> end(E10, E11, E12)); {'Idris.Core.Context.TCon', E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21) -> <<"type constructor"/utf8>> end(E13, E14, E15, E16, E17, E18, E19, E20)); {'Idris.Core.Context.Hole', E21, E22} -> (fun (V22, V23) -> <<"hole"/utf8>> end(E21, E22)); {'Idris.Core.Context.BySearch', E23, E24, E25} -> (fun (V24, V25, V26) -> <<"search"/utf8>> end(E23, E24, E25)); {'Idris.Core.Context.Guess', E26, E27, E28} -> (fun (V27, V28, V29) -> <<"guess"/utf8>> end(E26, E27, E28)); {'Idris.Core.Context.ImpBind'} -> (fun () -> <<"bound name"/utf8>> end()); {'Idris.Core.Context.Delayed'} -> (fun () -> <<"delayed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processNatToInteger'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.NaturalToInteger"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing %builtin NaturalToInteger "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), <<"."/utf8>>)))) end, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V3, case V1 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of [E36 | E37] -> (fun (V39, V40) -> case V39 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V43, V44) -> case V40 of [] -> begin (V45 = [{'Idris.Builtin.MkPair', V41, {'Idris.Builtin.MkPair', V43, V44}} | []]), ('case--case block in processNatToInteger-15956'(V0, V3, V2, V1, V43, V41, V44, V45, case V44 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V63 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V69, V70)) end end end end, fun (V71) -> case V71 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V72, V73) -> case V73 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V74, V75) -> V72 end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E48, E49)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V78, V79)) end end end end, fun (V80) -> case V80 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V81, V82) -> case V82 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V83, V84) -> V81 end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E42, E43)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V87, V88)) end end end end, fun (V89) -> case V89 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V90, V91) -> case V91 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V92, V93) -> V90 end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E36, E37)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V2, V3, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V96, V97)) end end end end, fun (V98) -> case V98 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V99, V100) -> case V100 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V101, V102) -> V99 end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processIntegerToNat'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.IntegerToNatural"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing %builtin IntegerToNatural "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), <<"."/utf8>>)))) end, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V3, case V1 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of [E36 | E37] -> (fun (V39, V40) -> case V39 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V43, V44) -> case V40 of [] -> begin (V72 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V45, V46, V47)) end end end, fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V48, V49, V50)) end end end}, case V44 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V53 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V72 of {'Idris.Prelude.Types.Left', E75} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V74) -> begin (V75 = [{'Idris.Builtin.MkPair', V41, {'Idris.Builtin.MkPair', V43, V44}} | []]), (('case--case block in processIntegerToNat-16656'(V0, V3, V2, V1, V43, V41, V44, V75, V74, case V44 of {'Idris.Core.Context.MkGlobalDef', E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96) -> V93 end(E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V99, V100)) end end end end, fun (V101) -> case V101 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V102, V103) -> case V103 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V104, V105) -> V102 end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E48, E49)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V108, V109)) end end end end, fun (V110) -> case V110 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V111, V112) -> case V112 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V113, V114) -> V111 end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E42, E43)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V117, V118)) end end end end, fun (V119) -> case V119 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V120, V121) -> case V121 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V122, V123) -> V120 end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E36, E37)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V2, V3, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V126, V127)) end end end end, fun (V128) -> case V128 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V129, V130) -> case V130 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V131, V132) -> V129 end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processBuiltinNatural'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.Natural"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing %builtin Natural "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), <<"."/utf8>>)))) end, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V3, case V1 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of [E36 | E37] -> (fun (V39, V40) -> case V39 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V43, V44) -> case V40 of [] -> begin (V45 = [{'Idris.Builtin.MkPair', V41, {'Idris.Builtin.MkPair', V43, V44}} | []]), ('case--case block in processBuiltinNatural-15756'(V0, V3, V2, V1, V43, V41, V44, V45, case V44 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V63 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V69, V70)) end end end end, fun (V71) -> case V71 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V72, V73) -> case V73 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V74, V75) -> V72 end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E48, E49)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V78, V79)) end end end end, fun (V80) -> case V80 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V81, V82) -> case V82 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V83, V84) -> V81 end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E42, E43)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V87, V88)) end end end end, fun (V89) -> case V89 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V90, V91) -> case V91 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V92, V93) -> V90 end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E36, E37)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V2, V3, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V96, V97)) end end end end, fun (V98) -> case V98 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V99, V100) -> case V100 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V101, V102) -> V99 end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V38))}, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processBuiltin'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V4 of 0 -> ('un--processBuiltinNatural'(V0, V10, V3, V5, V6)); 1 -> ('un--processNatToInteger'(V0, V10, V3, V5, V6)); 2 -> ('un--processIntegerToNat'(V0, V10, V3, V5, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isStrict'(V0) -> case V0 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V1, V2, V3) -> 1 end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V4, V5, V6) -> 1 end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V26, V27, V28, V29)) end end end end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V34, V35, V36)) end end end end end}, fun (V37) -> ('un--isStrict'(V37)) end, V10)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V38, V39, V40, V41) -> case ('un--isStrict'(('Idris.Idris2.Core.TT':'un--binderType'(V40)))) of 1 -> ('un--isStrict'(V41)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V42, V43, V44) -> case ('un--isStrict'(V43)) of 1 -> ('un--isStrict'(V44)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V45, V46, V47, V48) -> case ('un--isStrict'(V47)) of 1 -> ('un--isStrict'(V48)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V49, V50, V51) -> 0 end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V52, V53, V54, V55) -> case ('un--isStrict'(V54)) of 1 -> ('un--isStrict'(V55)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V56, V57, V58) -> ('un--isStrict'(V58)) end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V59, V60) -> 1 end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V61, V62) -> 1 end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V63) -> 1 end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getTypeCons'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V4))} end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V5, V6, V7) -> {'Idris.Prelude.Types.Just', V7} end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> {'Idris.Prelude.Types.Nothing'} end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V12, V13, V14, V15) -> case V14 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V16, V17, V18, V19) -> ('un--getTypeCons'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V18, V15)))) end(E14, E15, E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E18, E19, E20} -> (fun (V20, V21, V22) -> ('un--getTypeCons'(V0, V21)) end(E18, E19, E20)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getTypeArgs'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--getTypeArgs'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> [{'Idris.Builtin.DPair.MkDPair', V0, V13} | ('un--getTypeArgs'([V3 | V0], V5))] end(E8, E9, E10, E11)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'un--getReturnType'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--getReturnType'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> ('un--getReturnType'([V3 | V0], V5)) end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V0, V1}} end.
'un--getNatBuiltin'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V5, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V24 of {'Idris.Core.Context.MkBuiltinTransforms', E32, E33, E34, E35, E36} -> (fun (V37, V38, V39, V40, V41) -> V37 end(E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> begin (V43 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V43} end end, V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNEIntegerIndex'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--getNEIntegerIndex'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> begin (V14 = {'Idris.Core.TT.Pi', V10, V11, V12, V13}), case case ('Idris.Idris2.Algebra.Semiring':'un--isRigOther'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V21, V22)) end end}}, V11)) of 1 -> ('nested--6919-14084--in--un--isInteger'(V2, V3, V5, V14, V0, V13)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('Idris.Idris2.Data.Fin':'un--natToFin'(0, V0)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V24) -> [V23 | V24] end, ('nested--6919-14085--in--un--go'(V2, V3, V5, V14, V0, V0, V5)))) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> ('nested--6919-14085--in--un--go'(V2, V3, V5, V14, V0, V0, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Just', []} end.
'un--getNEIndex'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--getNEIndex'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V11)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--getNEIndex'(V0, V5)), fun (V22) -> ('Idris.Idris2.Libraries.Data.Fin':'un--strengthen'(V0, {'Idris.Data.Fin.FS', V22})) end)); 0 -> ('Idris.Idris2.Data.Fin':'un--natToFin'(0, V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getNEArgs'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--getNEArgs'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, V11)) of 1 -> ('un--getNEArgs'([V3 | V0], V5)); 0 -> [{'Idris.Builtin.DPair.MkDPair', V0, V13} | ('un--getNEArgs'([V3 | V0], V5))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9, E10, E11)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'un--getFirstNEType'(V0, V1) -> case ('un--getNEArgs'(V0, V1)) of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> {'Idris.Prelude.Types.Just', V2} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getConsGDef'(V0, V1, V2, V3) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> begin (V6 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V4, V0))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of [E6 | E7] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V13, V14) -> case V10 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, V14}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V17, V18)) end end end end, fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V22, V23) -> V20 end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V8))}, V5)) end end(E18, E19)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V26, V27)) end end end end, fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V29, V30) -> case V30 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V31, V32) -> V29 end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V8))}, V5)) end end(E12, E13)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V35, V36)) end end end end, fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V38, V39) -> case V39 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V40, V41) -> V38 end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V8))}, V5)) end end(E6, E7)); [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.UndefinedName', V1, V4}, V5)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V44, V45)) end end end end, fun (V46) -> case V46 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V47, V48) -> case V48 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V49, V50) -> V47 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V8))}, V5)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V2, [], V3)).
'un--checkNatCons'(V0, V1, V2, V3, V4) -> begin (V9 = (('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V5) -> fun (V6) -> fun (V7) -> ('nested--7732-14833--in--un--checkCon'(V3, V2, V1, V0, V5, V6, V7)) end end end, fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}}} end, V1))(V4))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Types.Just', E4} -> (fun (V14) -> case V13 of {'Idris.Prelude.Types.Just', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkNatBuiltin', V14, V15}} end(E5)); _ -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No \x{27}S\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<"."/utf8>>))))}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No \x{27}Z\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<"."/utf8>>))))}, V4)) end()); _ -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No \x{27}S\x{27}-like constructors for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<"."/utf8>>))))}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addNatToInteger'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.NaturalToInteger.addTransforms"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Add %builtin NaturalToInteger transform for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>)))) end, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V44 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V26 of {'Idris.Core.Context.MkBuiltinTransforms', E32, E33, E34, E35, E36} -> (fun (V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, {'Idris.Core.Context.MkBuiltinTransforms', V39, V40, V41, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V1, V2, V42)), V43}, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addIntegerToNat'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.IntegerToNatural.addTransforms"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Add %builtin IntegerToNatural transform for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>)))) end, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V44 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V26 of {'Idris.Core.Context.MkBuiltinTransforms', E32, E33, E34, E35, E36} -> (fun (V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, {'Idris.Core.Context.MkBuiltinTransforms', V39, V40, V41, V42, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V1, V2, V43))}, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addBuiltinNat'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"builtin.Natural.addTransform"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Add %builtin Natural transform for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<"."/utf8>>)))) end, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V48 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V26 of {'Idris.Core.Context.MkBuiltinTransforms', E32, E33, E34, E35, E36} -> (fun (V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, {'Idris.Core.Context.MkBuiltinTransforms', ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V1, V2, V39)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(case V2 of {'Idris.Core.Context.MkNatBuiltin', E37, E38} -> (fun (V44, V45) -> V44 end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, V40)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(case V2 of {'Idris.Core.Context.MkNatBuiltin', E39, E40} -> (fun (V46, V47) -> V47 end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, V41)), V42, V43}, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
