-module('Idris.Idris2.Idris.Doc.String').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in summarise-3398'/10,
  'case--case block in summarise-3369'/8,
  'case--case block in getDocsForName-3026'/14,
  'case--getDocsForName-2985'/10,
  'case--case block in getDocsForName,getExtra-2333'/9,
  'case--getDocsForName,getFieldsDoc-2105'/7,
  'case--getDocsForName,getIFaceDoc-1847'/8,
  'case--getDocsForName,getIFaceDoc-1699'/12,
  'case--getDocsForName,getIFaceDoc-1554'/15,
  'case--getDocsForName,getFixityDoc-1326'/9,
  'nested--12298-3527--in--un--visible'/6,
  'nested--9143-619--in--un--showTotal'/7,
  'nested--9143-632--in--un--showDoc'/7,
  'nested--9143-631--in--un--showCategory'/6,
  'nested--9143-618--in--un--reflowDoc'/6,
  'nested--9143-620--in--un--prettyName'/6,
  'nested--12298-3528--in--un--inNS'/4,
  'nested--9143-625--in--un--getPrefixDoc'/7,
  'nested--9143-623--in--un--getMethDoc'/7,
  'nested--9143-624--in--un--getInfixDoc'/7,
  'nested--9143-622--in--un--getImplDoc'/7,
  'nested--9143-627--in--un--getIFaceDoc'/6,
  'nested--9143-626--in--un--getFixityDoc'/7,
  'nested--9143-629--in--un--getFieldsDoc'/6,
  'nested--9143-628--in--un--getFieldDoc'/7,
  'nested--9143-630--in--un--getExtra'/8,
  'nested--9143-621--in--un--getDConDoc'/7,
  'un--tCon'/2,
  'un--summarise'/4,
  'un--styleAnn'/1,
  'un--prettyTerm'/1,
  'un--header'/1,
  'un--getDocsForPrimitive'/4,
  'un--getDocsForPTerm'/4,
  'un--getDocsForName'/6,
  'un--getContents'/4,
  'un--fun'/2,
  'un--dCon'/1,
  'un--addDocStringNS'/6,
  'un--addDocString'/5
]).
'case--case block in case block in summarise-3398'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V10, V11) -> case V10 of <<""/utf8>> -> {'Idris.Prelude.Types.Nothing'}; _ -> {'Idris.Prelude.Types.Just', V10} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in summarise-3369'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V9 of [] -> ('case--case block in case block in summarise-3398'(V0, V1, V2, V3, V4, V5, V6, V10, V11, ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V11)))); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in getDocsForName-3026'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of [E0 | E1] -> (fun (V14, V15) -> begin (V18 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> fun (V17) -> ('nested--9143-632--in--un--showDoc'(V0, V1, V2, V3, V4, V16, V17)) end end, V12, [], V13))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--punctuate'({'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'}, V20))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No documentation for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))))))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsForName-2985'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> begin (V12 = [V10 | V11]), fun (V13) -> ('case--case block in getDocsForName-3026'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V10, V12, ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V29, V30, V31, V32)) end end end end end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V34)) end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V37, V38, V39)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V40, V41)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V42) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V42, case V5 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V47 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V12)), V13)) end end end(E0, E1)); _ -> fun (V52) -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V3, V1, V0, V52)) end end.
'case--case block in getDocsForName,getExtra-2333'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', [('nested--9143-619--in--un--showTotal'(V0, V1, V2, V3, V4, V6, case V5 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V25 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | []]} end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43) -> begin (V65 = [('nested--9143-619--in--un--showTotal'(V0, V1, V2, V3, V4, V6, case V5 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V54 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) | []]), fun (V66) -> begin (V86 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), case V73 of {'Idris.Prelude.Types.Left', E55} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V75) -> ((V71(V75))(V72)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V68, (V67(V69)))) end end end, fun (V76) -> fun (V77) -> ('nested--9143-621--in--un--getDConDoc'(V0, V1, V2, V3, V4, V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V80, V81, V82)) end end end, fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V83, V84, V85)) end end end}, V78, V79)) end end)), V42, [], V66))), case V86 of {'Idris.Prelude.Types.Left', E57} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V88) -> begin (V99 = case V88 of [] -> {'Idris.Prelude.Types.Right', []}; [E59 | E60] -> (fun (V89, V90) -> case V90 of [] -> begin (V91 = (('nested--9143-629--in--un--getFieldsDoc'(V0, V1, V2, V3, V4, V6))(V66))), case V91 of {'Idris.Prelude.Types.Left', E61} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V93) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V94) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V94)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constructor"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constructor"/utf8>>)); 0 -> <<"Constructor"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, V89)))) | V93]} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V95) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V95)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constructors"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constructors"/utf8>>)); 0 -> <<"Constructors"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V96) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V96)) end, V88)))))) | []]])) | []]} end end(E59, E60)); _ -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V97) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V97)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constructors"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constructors"/utf8>>)); 0 -> <<"Constructors"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V98) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V98)) end, V88)))))) | []]])) | []]} end), case V99 of {'Idris.Prelude.Types.Left', E63} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V101) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V65, V101))} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E26, E27, E28, E29, E30, E31, E32, E33)); _ -> fun (V102) -> {'Idris.Prelude.Types.Right', []} end end.
'case--getDocsForName,getFieldsDoc-2105'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V7 of {'Idris.Prelude.Types.Just', E2} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V8))))), fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> begin (V44 = ('Idris.Idris2.Core.Context':'un--getFieldNames'(case V15 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V16 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), begin (V46 = begin (V45 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E33} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V48) -> case V44 of [] -> {'Idris.Prelude.Types.Right', []}; [E37 | E38] -> (fun (V49, V50) -> case V50 of [] -> begin (V51 = ('nested--9143-628--in--un--getFieldDoc'(V0, V1, V2, V3, V4, V49, V11))), case V51 of {'Idris.Prelude.Types.Left', E41} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V53) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V54) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V54)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Projection"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Projection"/utf8>>)); 0 -> <<"Projection"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, V53)))) | []]} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V57 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V55) -> fun (V56) -> ('nested--9143-628--in--un--getFieldDoc'(V0, V1, V2, V3, V4, V55, V56)) end end, V44, [], V11))), case V57 of {'Idris.Prelude.Types.Left', E39} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V59) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V60) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V60)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Projections"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Projections"/utf8>>)); 0 -> <<"Projections"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V61) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V61)) end, V59)))))) | []]])) | []]} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37, E38)); _ -> begin (V64 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V62) -> fun (V63) -> ('nested--9143-628--in--un--getFieldDoc'(V0, V1, V2, V3, V4, V62, V63)) end end, V44, [], V11))), case V64 of {'Idris.Prelude.Types.Left', E35} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V66) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V67) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V67)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Projections"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Projections"/utf8>>)); 0 -> <<"Projections"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V68) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V68)) end, V66)))))) | []]])) | []]} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2)); _ -> fun (V69) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1)); _ -> fun (V70) -> {'Idris.Prelude.Types.Right', []} end end.
'case--getDocsForName,getIFaceDoc-1847'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V8)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Parameters"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Parameters"/utf8>>)); 0 -> <<"Parameters"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--punctuate'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))) end, V7))))])) | []] end.
'case--getDocsForName,getIFaceDoc-1699'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> []; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V12)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Methods"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Methods"/utf8>>)); 0 -> <<"Methods"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V13)) end, V11)))))) | []]])) | []] end.
'case--getDocsForName,getIFaceDoc-1554'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> []; [E0 | E1] -> (fun (V15, V16) -> case V16 of [] -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V17)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Implementation"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Implementation"/utf8>>)); 0 -> <<"Implementation"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, V15)))) | []]; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V18)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Implementations"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Implementations"/utf8>>)); 0 -> <<"Implementations"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V19)) end, V14)))))) | []]])) | []] end end(E0, E1)); _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V20)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Implementations"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Implementations"/utf8>>)); 0 -> <<"Implementations"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V21)) end, V14)))))) | []]])) | []] end.
'case--getDocsForName,getFixityDoc-1326'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> []; [E0 | E1] -> (fun (V9, V10) -> case V10 of [] -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V11)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Fixity Declaration"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Fixity Declaration"/utf8>>)); 0 -> <<"Fixity Declaration"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), V9)) | []]; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V12)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Fixity Declarations"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Fixity Declarations"/utf8>>)); 0 -> <<"Fixity Declarations"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(V8)))))) | []] end end(E0, E1)); _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V13)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Fixity Declarations"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Fixity Declarations"/utf8>>)); 0 -> <<"Fixity Declarations"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Line'})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(V8)))))) | []] end.
'nested--12298-3527--in--un--visible'(V0, V1, V2, V3, V4, V5) -> begin (V34 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V37 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V47 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0))} end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9143-619--in--un--showTotal'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V7, V8) -> case V7 of {'Idris.Core.TT.Unchecked'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V9)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<""/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<""/utf8>>)); 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end()); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V10)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Totality"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Totality"/utf8>>)); 0 -> <<"Totality"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))), ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_Totality'(V6)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9143-632--in--un--showDoc'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V12 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V13 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V41 of {'Idris.Prelude.Types.Left', E32} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E34} -> (fun (V44) -> begin (V75 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), case V48 of {'Idris.Prelude.Types.Left', E35} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V50) -> ((V46(V50))(V47)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V51, V52)) end end, fun (V53) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V12, {'Idris.Core.Env.Nil'}, case V44 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V56 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V53)) end))(V6))), case V75 of {'Idris.Prelude.Types.Left', E58} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V77) -> begin (V78 = ('nested--9143-631--in--un--showCategory'(V0, V1, V2, V3, V4, V44))), begin (V79 = ('Idris.Idris2.Core.Context':'un--aliasName'(V3, V7, V6))), case V79 of {'Idris.Prelude.Types.Left', E60} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', V7}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([(V78(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V81)))))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()) | [('un--prettyTerm'(V77)) | []]]]))))), begin (V83 = ('nested--9143-618--in--un--reflowDoc'(V0, V1, V2, V3, V4, V8))), begin (V84 = ('nested--9143-630--in--un--getExtra'(V0, V1, V2, V3, V4, V7, V44, V6))), case V84 of {'Idris.Prelude.Types.Left', E62} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V86) -> begin (V87 = ('nested--9143-626--in--un--getFixityDoc'(V0, V1, V2, V3, V4, V7, V6))), case V87 of {'Idris.Prelude.Types.Left', E64} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V89) -> begin (V91 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--++'(V83, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V90) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, V90)) end, ('Idris.Idris2.Prelude.Types.List':'un--++'(V86, V89))))))))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V82 | [V91 | []]]))} end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V3, V1, V7, V6)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9143-631--in--un--showCategory'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> fun (V27) -> case V23 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35) -> ('un--tCon'(case V5 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V37 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V27)) end(E21, E22, E23, E24, E25, E26, E27, E28)); {'Idris.Core.Context.DCon', E50, E51, E52} -> (fun (V57, V58, V59) -> ('un--dCon'(V27)) end(E50, E51, E52)); {'Idris.Core.Context.PMDef', E53, E54, E55, E56, E57} -> (fun (V60, V61, V62, V63, V64) -> ('un--fun'(case V5 of {'Idris.Core.Context.MkGlobalDef', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V66 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V27)) end(E53, E54, E55, E56, E57)); {'Idris.Core.Context.ForeignDef', E79, E80} -> (fun (V86, V87) -> ('un--fun'(case V5 of {'Idris.Core.Context.MkGlobalDef', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> V89 end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V27)) end(E79, E80)); {'Idris.Core.Context.Builtin', E102, E103} -> (fun (V109, V110) -> ('un--fun'(case V5 of {'Idris.Core.Context.MkGlobalDef', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131) -> V112 end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V27)) end(E102, E103)); _ -> V27 end end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9143-618--in--un--reflowDoc'(V0, V1, V2, V3, V4, V5) -> case V5 of <<""/utf8>> -> []; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(V6)))) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V5)))))) end.
'nested--9143-620--in--un--prettyName'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V5))), case ('Idris.Idris2.Parser.Lexer.Source':'un--isOpName'(V5)) of 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V6)))); 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--12298-3528--in--un--inNS'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V0, V4)) end(E2)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--9143-625--in--un--getPrefixDoc'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookupName'(V5, case V10 of {'Idris.Idris.Syntax.MkSyntax', E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V12 end(E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"prefix operator, level"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V20)))))) | []]} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9143-623--in--un--getMethDoc'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(case V5 of {'Idris.Idris.Syntax.MkMethod', E28, E29, E30, E31} -> (fun (V11, V12, V13, V14) -> V11 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V10 of {'Idris.Idris.Syntax.MkSyntax', E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V19 end(E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of [E2 | E3] -> (fun (V24, V25) -> case V24 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V26, V27) -> case V25 of [] -> begin (V32 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V3, V2, case V5 of {'Idris.Idris.Syntax.MkMethod', E6, E7, E8, E9} -> (fun (V28, V29, V30, V31) -> V31 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V32 of {'Idris.Prelude.Types.Left', E10} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V34) -> begin (V39 = ('nested--9143-620--in--un--prettyName'(V0, V1, V2, V3, V4, case V5 of {'Idris.Idris.Syntax.MkMethod', E12, E13, E14, E15} -> (fun (V35, V36, V37, V38) -> V35 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', case V5 of {'Idris.Idris.Syntax.MkMethod', E16, E17, E18, E19} -> (fun (V40, V41, V42, V43) -> V40 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--fun'(case V5 of {'Idris.Idris.Syntax.MkMethod', E20, E21, E22, E23} -> (fun (V44, V45, V46, V47) -> V44 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V39)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()) | [('un--prettyTerm'(V34)) | []]]])))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V50, V51)) end end end end, fun (V52) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V52)))))) end, case V5 of {'Idris.Idris.Syntax.MkMethod', E24, E25, E26, E27} -> (fun (V53, V54, V55, V56) -> V55 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), ('nested--9143-618--in--un--reflowDoc'(V0, V1, V2, V3, V4, V27)))))))) | []]]))))} end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', []} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Right', []} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9143-624--in--un--getInfixDoc'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookupName'(V5, case V10 of {'Idris.Idris.Syntax.MkSyntax', E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V11 end(E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V21, V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_Fixity'(V21)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"operator,"/utf8>>)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'(<<"level"/utf8>>)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V22)))) | []]]]]))))} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9143-622--in--un--getImplDoc'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V39 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V10 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V11 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V39 of {'Idris.Prelude.Types.Left', E30} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E32} -> (fun (V42) -> begin (V73 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), case V46 of {'Idris.Prelude.Types.Left', E33} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V48) -> ((V44(V48))(V45)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V49, V50)) end end, fun (V51) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V10, {'Idris.Core.Env.Nil'}, case V42 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V54 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V51)) end))(V6))), case V73 of {'Idris.Prelude.Types.Left', E56} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V75) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', V5}, ('un--prettyTerm'(V75)))) | []]} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9143-627--in--un--getIFaceDoc'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> begin (V14 = ('case--getDocsForName,getIFaceDoc-1847'(V0, V1, V2, V3, V4, V6, V7, case V7 of {'Idris.Idris.Syntax.MkIFaceInfo', E2, E3, E4, E5, E6, E7} -> (fun (V8, V9, V10, V11, V12, V13) -> V10 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V15) -> begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> fun (V17) -> ('Idris.Idris2.Idris.Resugar':'un--pterm'(V3, V2, V16, V17)) end end, case V7 of {'Idris.Idris.Syntax.MkIFaceInfo', E8, E9, E10, E11, E12, E13} -> (fun (V18, V19, V20, V21, V22, V23) -> V21 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V15))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> begin (V29 = case V26 of [] -> []; _ -> [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--header'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'(V27)) end, ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Constraints"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--dropLast'((1 + 0), <<"Constraints"/utf8>>)); 0 -> <<"Constraints"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) | ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--punctuate'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'()), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V28) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V28)))) end, V26))))])) | []] end), begin (V38 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V30) -> fun (V31) -> ('nested--9143-623--in--un--getMethDoc'(V0, V1, V2, V3, V4, V30, V31)) end end, case V7 of {'Idris.Idris.Syntax.MkIFaceInfo', E16, E17, E18, E19, E20, E21} -> (fun (V32, V33, V34, V35, V36, V37) -> V36 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V15))), case V38 of {'Idris.Prelude.Types.Left', E22} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V40) -> begin (V69 = ('case--getDocsForName,getIFaceDoc-1699'(V0, V1, V2, V3, V4, V6, V7, V14, V26, V29, V40, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V52)) end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V56, V57, V58, V59)) end end end end end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V61)) end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V64, V65, V66)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V67, V68)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V40))))), begin (V70 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V3, V1, 0, V6, V15))), case V70 of {'Idris.Prelude.Types.Left', E24} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V72) -> begin (V81 = case V72 of {'Idris.Core.Context.MkSearchData', E26, E27} -> (fun (V73, V74) -> case V74 of [] -> {'Idris.Prelude.Types.Right', []}; [E28 | E29] -> (fun (V75, V76) -> case V75 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V77, V78) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V79) -> fun (V80) -> ('nested--9143-622--in--un--getImplDoc'(V0, V1, V2, V3, V4, V79, V80)) end end, V78, [], V15)) end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V81 of {'Idris.Prelude.Types.Left', E32} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V83) -> begin (V112 = ('case--getDocsForName,getIFaceDoc-1554'(V0, V1, V2, V3, V4, V6, V7, V14, V26, V29, V40, V69, V72, V83, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V91, V92, V93)) end end end end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V95)) end end, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V99, V100, V101, V102)) end end end end end end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V104)) end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V107, V108, V109)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V110, V111)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V83))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('Idris.Idris2.Prelude.Types.List':'un--++'(V14, ('Idris.Idris2.Prelude.Types.List':'un--++'(V29, ('Idris.Idris2.Prelude.Types.List':'un--++'(V69, V112))))))))} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9143-626--in--un--getFixityDoc'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('nested--9143-624--in--un--getInfixDoc'(V0, V1, V2, V3, V4, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('nested--9143-625--in--un--getPrefixDoc'(V0, V1, V2, V3, V4, V5, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('case--getDocsForName,getFixityDoc-1326'(V0, V1, V2, V3, V4, V5, V9, V12, ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V9)), ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V12))))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9143-629--in--un--getFieldsDoc'(V0, V1, V2, V3, V4, V5) -> ('case--getDocsForName,getFieldsDoc-2105'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.Name':'un--displayName'(V5)))).
'nested--9143-628--in--un--getFieldDoc'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V43 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V14 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V15 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V43 of {'Idris.Prelude.Types.Left', E32} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V45) -> case V45 of {'Idris.Prelude.Types.Just', E34} -> (fun (V46) -> begin (V77 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), case V50 of {'Idris.Prelude.Types.Left', E35} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V52) -> ((V48(V52))(V49)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V53, V54)) end end, fun (V55) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V14, {'Idris.Core.Env.Nil'}, case V46 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V58 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V55)) end))(V6))), case V77 of {'Idris.Prelude.Types.Left', E58} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Name':'un--nameRoot'(V5))))), begin (V81 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--fun'(V5, V80)) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()) | [('un--prettyTerm'(V79)) | []]]]))), case ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V5, case V10 of {'Idris.Idris.Syntax.MkSyntax', E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V86 end(E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of [E60 | E61] -> (fun (V91, V92) -> case V91 of {'Idris.Builtin.MkPair', E62, E63} -> (fun (V93, V94) -> case V92 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', V5}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V81 | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('nested--9143-618--in--un--reflowDoc'(V0, V1, V2, V3, V4, V94)))))) | []]]))))}; _ -> {'Idris.Prelude.Types.Right', V81} end end(E62, E63)); _ -> {'Idris.Prelude.Types.Right', V81} end end(E60, E61)); _ -> {'Idris.Prelude.Types.Right', V81} end end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Empty'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9143-630--in--un--getExtra'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V5, case V11 of {'Idris.Idris.Syntax.MkSyntax', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V14 end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of [] -> (('case--case block in getDocsForName,getExtra-2333'(V0, V1, V2, V3, V4, V6, V5, V11, case V6 of {'Idris.Core.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V38 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7)); [E23 | E24] -> (fun (V42, V43) -> case V43 of [] -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V44) -> case V44 of {'Idris.Prelude.Types.Left', E25} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V46) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V46))} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--9143-627--in--un--getIFaceDoc'(V0, V1, V2, V3, V4, V42)), V7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E23, E24)); _ -> {'Idris.Prelude.Types.Right', []} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9143-621--in--un--getDConDoc'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V39 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V10 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V11 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V39 of {'Idris.Prelude.Types.Left', E30} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E32} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E33} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V46) -> begin (V77 = (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), case V50 of {'Idris.Prelude.Types.Left', E35} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V52) -> ((V48(V52))(V49)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V53, V54)) end end, fun (V55) -> ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V10, {'Idris.Core.Env.Nil'}, case V42 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V58 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V55)) end))(V6))), case V77 of {'Idris.Prelude.Types.Left', E58} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Decl', V5}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'([('un--dCon'(('nested--9143-620--in--un--prettyName'(V0, V1, V2, V3, V4, V5)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()) | [('un--prettyTerm'(V79)) | []]]]))))), case ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V5, case V46 of {'Idris.Idris.Syntax.MkSyntax', E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V85 end(E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of [E60 | E61] -> (fun (V90, V91) -> case V90 of {'Idris.Builtin.MkPair', E62, E63} -> (fun (V92, V93) -> case V91 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'([V80 | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DocStringBody'}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(('nested--9143-618--in--un--reflowDoc'(V0, V1, V2, V3, V4, V93)))))) | []]]))}; _ -> {'Idris.Prelude.Types.Right', V80} end end(E62, E63)); _ -> {'Idris.Prelude.Types.Right', V80} end end(E60, E61)); _ -> {'Idris.Prelude.Types.Right', V80} end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Empty'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tCon'(V0, V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.TCon', V0}, V1)).
'un--summarise'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E34} -> (fun (V43) -> begin (V54 = begin (V44 = {'Idris.Prelude.Types.Just', V43}), ('case--case block in summarise-3369'(V2, V1, V0, V7, V11, V43, V44, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'(V2, case V7 of {'Idris.Idris.Syntax.MkSyntax', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V49 end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), begin (V76 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V11, {'Idris.Core.Env.Nil'}, case V43 of {'Idris.Core.Context.MkGlobalDef', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V57 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V76 of {'Idris.Prelude.Types.Left', E65} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V78, V3))), case V79 of {'Idris.Prelude.Types.Left', E67} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V81) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V81)), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V82) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, V82)) end end, V54))))))))} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34)); _ -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--styleAnn'(V0) -> case V0 of {'Idris.Idris.Doc.String.TCon', E0} -> (fun (V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Render.Terminal':'un--color'(12)) end(E0)); {'Idris.Idris.Doc.String.DCon'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Render.Terminal':'un--color'(9)) end()); {'Idris.Idris.Doc.String.Fun', E1} -> (fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Render.Terminal':'un--color'(10)) end(E1)); {'Idris.Idris.Doc.String.Header'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Render.Terminal':'un--underline'()) end()); _ -> [] end.
'un--prettyTerm'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--reAnnotate'(fun (V1) -> {'Idris.Idris.Doc.String.Syntax', V1} end, ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V0)))).
'un--header'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Header'}, V0)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))).
'un--getDocsForPrimitive'(V0, V1, V2, V3) -> case ('Idris.Idris2.TTImp.Elab.Prim':'un--checkPrim'({'Idris.Core.FC.EmptyFC'}, V2)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V5, V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V8))))))), {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<"\x{a}\x{9}Primitive"/utf8>>)) | []]} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getDocsForPTerm'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('un--getDocsForName'(V0, V1, V2, V4, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V11 = ('Idris.Idris2.Idris.Pretty.Render':'un--render'(V0, fun (V10) -> ('un--styleAnn'(V10)) end, V9, V6))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', [V13 | []]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Idris.Syntax.PPrimVal', E6, E7} -> (fun (V14, V15) -> fun (V16) -> ('un--getDocsForPrimitive'(V1, V2, V15, V16)) end end(E6, E7)); {'Idris.Idris.Syntax.PType', E8} -> (fun (V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', [<<"Type : Type\x{a}\x{9}The type of all types is Type. The type of Type is Type."/utf8>> | []]} end end(E8)); {'Idris.Idris.Syntax.PString', E9, E10} -> (fun (V19, V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', [<<"String Literal\x{a}\x{9}Desugars to a fromString call"/utf8>> | []]} end end(E9, E10)); {'Idris.Idris.Syntax.PList', E11, E12, E13} -> (fun (V22, V23, V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', [<<"List Literal\x{a}\x{9}Desugars to (::) and Nil"/utf8>> | []]} end end(E11, E12, E13)); {'Idris.Idris.Syntax.PSnocList', E14, E15, E16} -> (fun (V26, V27, V28) -> fun (V29) -> {'Idris.Prelude.Types.Right', [<<"SnocList Literal\x{a}\x{9}Desugars to (:<) and Empty"/utf8>> | []]} end end(E14, E15, E16)); {'Idris.Idris.Syntax.PPair', E17, E18, E19} -> (fun (V30, V31, V32) -> fun (V33) -> {'Idris.Prelude.Types.Right', [<<"Pair Literal\x{a}\x{9}Desugars to MkPair or Pair"/utf8>> | []]} end end(E17, E18, E19)); {'Idris.Idris.Syntax.PDPair', E20, E21, E22, E23, E24} -> (fun (V34, V35, V36, V37, V38) -> fun (V39) -> {'Idris.Prelude.Types.Right', [<<"Dependant Pair Literal\x{a}\x{9}Desugars to MkDPair or DPair"/utf8>> | []]} end end(E20, E21, E22, E23, E24)); {'Idris.Idris.Syntax.PUnit', E25} -> (fun (V40) -> fun (V41) -> {'Idris.Prelude.Types.Right', [<<"Unit Literal\x{a}\x{9}Desugars to MkUnit or Unit"/utf8>> | []]} end end(E25)); _ -> fun (V42) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Docs not implemented for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V3)), <<" yet"/utf8>>)))) | []]} end end.
'un--getDocsForName'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = case ('Idris.Idris2.Core.Name':'un--nameRoot'(V4)) of <<"-"/utf8>> -> [{'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--numNS'()), {'Idris.Core.Name.UN', <<"negate"/utf8>>}} | []]; _ -> [] end), begin (V43 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V4, case V13 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V15 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V43 of {'Idris.Prelude.Types.Left', E32} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V45) -> (('case--getDocsForName-2985'(V4, V3, V2, V1, V0, V9, V13, V14, V45, ('Idris.Idris2.Prelude.Types.List':'un--++'(V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'(V46)) end, V45))))))(V5)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getContents'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--allNames'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> begin (V40 = ('Idris.Idris2.Data.List':'un--filter'(fun (V39) -> ('nested--12298-3528--in--un--inNS'(V2, V1, V0, V39)) end, V38))), begin (V43 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V41) -> fun (V42) -> ('nested--12298-3527--in--un--visible'(V2, V1, V0, V7, V41, V42)) end end, V40, V3))), case V43 of {'Idris.Prelude.Types.Left', E32} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V45) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V46) -> fun (V47) -> ('un--summarise'(V0, V1, V46, V47)) end end, ('Idris.Idris2.Data.List':'un--sort'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V50, V51)) end end}, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V60, V61)) end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V64, V65)) end end}, V45)), [], V3)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fun'(V0, V1) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Fun', V0}, V1)).
'un--dCon'(V0) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.DCon'}, V0)).
'un--addDocStringNS'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V3, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V11 = case V8 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V9, V10) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, V2)), V10} end(E2, E3)); _ -> {'Idris.Core.Name.NS', V2, V8} end), begin (V13 = begin (V12 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V25 = ('erlang':'put'(V1, case V15 of {'Idris.Idris.Syntax.MkSyntax', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24) -> {'Idris.Idris.Syntax.MkSyntax', V16, V17, V18, V19, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V11, V4, V20)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, 0, V21)), V22, V23, V24} end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V25} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDocString'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V2, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"doc.record"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding doc for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (aka "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)), <<" in current NS)"/utf8>>)))))))) end, V4))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V24 = ('erlang':'put'(V1, case V14 of {'Idris.Idris.Syntax.MkSyntax', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23) -> {'Idris.Idris.Syntax.MkSyntax', V15, V16, V17, V18, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'(V7, V3, V19)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V7, 0, V20)), V21, V22, V23} end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V24} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
