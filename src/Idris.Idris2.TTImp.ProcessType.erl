-module('Idris.Idris2.TTImp.ProcessType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in processType-6877'/29,
  'case--case block in processType-6628'/23,
  'case--processType-6535'/19,
  'case--case block in findInferrable,findInf-6266'/9,
  'case--findInferrable,findInf-6225'/8,
  'case--getFnString-6063'/10,
  'case--case block in processFnOpt-5966'/12,
  'case--processFnOpt-5895'/7,
  'case--processFnOpt,collectSpec-5698'/19,
  'case--processFnOpt,getDeps-5582'/15,
  'case--processFnOpt,getDeps-5491'/14,
  'case--case block in processFnOpt,getDeps,splitPs-5381'/19,
  'case--processFnOpt,getDeps,splitPs-5338'/17,
  'case--processFnOpt,collectDDeps-5046'/16,
  'case--case block in processFnOpt,insertDeps-4957'/11,
  'case--processFnOpt,insertDeps-4910'/10,
  'case--processFnOpt-4782'/6,
  'nested--10705-5312--in--un--splitPs'/15,
  'nested--12585-6706--in--un--isNested'/30,
  'nested--10554-4889--in--un--insertDeps'/8,
  'nested--10554-4894--in--un--getNamePos'/7,
  'nested--10554-4891--in--un--getDepsArgs'/8,
  'nested--10554-4892--in--un--getDeps'/8,
  'nested--12121-6199--in--un--findInfs'/6,
  'nested--12121-6198--in--un--findInf'/6,
  'nested--12121-6200--in--un--fi'/8,
  'nested--10554-4893--in--un--collectSpec'/9,
  'nested--10554-4890--in--un--collectDDeps'/6,
  'un--processType'/12,
  'un--processFnOpt'/5,
  'un--initDef'/8,
  'un--getRetTy'/2,
  'un--getFnString'/4,
  'un--findInferrable'/3
]).
'case--case block in case block in processType-6877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkGlobalDef', V29, V30, V31, V22, V23, V34, V27, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processType-6628'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V14))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V29, V25))), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> begin (V36 = begin (V33 = (('Idris.Idris2.Core.Normalise':'un--nf'(V14, [], V29, {'Idris.Core.Env.Nil'}, V21))(V25))), case V33 of {'Idris.Prelude.Types.Left', E6} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V35) -> (('un--findInferrable'(V14, V32, V35))(V25)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V36 of {'Idris.Prelude.Types.Left', E8} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V38) -> begin (V44 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E10} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('Idris.Idris2.Core.Context':'un--addDef'(V14, {'Idris.Core.Name.Resolved', V16}, begin (V43 = {'Idris.Builtin.MkPair', V23, V24}), ('case--case block in case block in processType-6877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V23, V24, V43, V29, V32, V38, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V15, V6, V8, V21, V5, V20)))) end, V42)) end, V25))), case V44 of {'Idris.Prelude.Types.Left', E12} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V46) -> begin (V51 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V49, V50)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V11)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V14, V16, 0, V25)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V51 of {'Idris.Prelude.Types.Left', E14} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V53) -> begin (V57 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"declare.type"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Setting options for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V54) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_FnOpt'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_FnOpt'(V55, V56)) end end}, V4)))))))) end))(V25))), case V57 of {'Idris.Prelude.Types.Left', E16} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V59) -> begin (V60 = {'Idris.Core.Name.Resolved', V16}), begin (V62 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V61) -> ('un--processFnOpt'(V14, V7, ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--12585-6706--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V23, V24, V22, V29, V32, V38, V60, V15)))), V60, V61)) end, V4))(V25))), case V62 of {'Idris.Prelude.Types.Left', E18} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V64) -> begin (V81 = begin (V65 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V14, V25))), case V65 of {'Idris.Prelude.Types.Left', E20} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V67) -> case ('Idris.Idris2.Prelude.Basics':'un--not'((('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V79)) end end}, fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V80)) end))(V4)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V14, V7, V60, {'Idris.Core.Context.SetTotal', V67}, V25)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V81 of {'Idris.Prelude.Types.Left', E22} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V83) -> begin (V84 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V8, V14, V13, V7, {'Idris.Core.Name.Resolved', V16}, V9, V19, V25))), case V84 of {'Idris.Prelude.Types.Left', E24} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V86) -> begin (V87 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"processType is adding \x{2193}"/utf8>> end))(V25))), case V87 of {'Idris.Prelude.Types.Left', E26} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V89) -> begin (V90 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V8, V14, V13, V2, {'Idris.Core.Name.Resolved', V16}, V9, V19, V25))), case V90 of {'Idris.Prelude.Types.Left', E28} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V92) -> begin (V95 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V14, V93, V94)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V19))))))(V25))), case V95 of {'Idris.Prelude.Types.Left', E30} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V97) -> begin (V98 = ('Idris.Idris2.Core.Context':'un--addToSave'(V14, V15, V25))), case V98 of {'Idris.Prelude.Types.Left', E32} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V100) -> begin (V104 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V102, V103)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V19)))))))))))) end))(V25))), case V104 of {'Idris.Prelude.Types.Left', E34} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V106) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(V5, {'Idris.Core.TT.Private'})) of 0 -> begin (V114 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V14, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V107) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V107)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V108, V109)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V112, V113)) end end}, V15, V25))), case V114 of {'Idris.Prelude.Types.Left', E36} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V116) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V14, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V117) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V118, V119)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V122, V123)) end end}, V19, V25)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processType-6535'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> begin (V26 = ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V11, fun (V25) -> {'Idris.Core.Core.InType', V7, V15, V25} end))(fun (V20) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V8, V14, V13, V12, V16, {'Idris.TTImp.Elab.Check.InType'}, [{'Idris.TTImp.Elab.Check.HolesOkay'} | V11], V10, V9, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V0}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V7)), V20)) end))(V19))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> begin (V29 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V14, <<"declare.type"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)))) end, {'Idris.Core.Env.Nil'}, ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V8, V3, V9, V28))))(V19))), case V29 of {'Idris.Prelude.Types.Left', E2} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V31) -> begin (V32 = (('un--initDef'(V8, V14, V13, V12, V15, V9, V28, V4))(V19))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V8, V3, V9, V28))), begin (V36 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V14, V35, V19))), case V36 of {'Idris.Prelude.Types.Left', E6} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Nothing'}), case V38 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V40, V41) -> begin (V43 = begin (V42 = ('erlang':'get'(V14))), {'Idris.Prelude.Types.Right', V42} end), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V45, V19))), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> begin (V52 = begin (V49 = (('Idris.Idris2.Core.Normalise':'un--nf'(V14, [], V45, {'Idris.Core.Env.Nil'}, V35))(V19))), case V49 of {'Idris.Prelude.Types.Left', E14} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V51) -> (('un--findInferrable'(V14, V48, V51))(V19)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V52 of {'Idris.Prelude.Types.Left', E16} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V54) -> begin (V60 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V55) -> case V55 of {'Idris.Prelude.Types.Left', E18} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V58) -> ('Idris.Idris2.Core.Context':'un--addDef'(V14, {'Idris.Core.Name.Resolved', V16}, begin (V59 = {'Idris.Builtin.MkPair', V40, V41}), ('case--case block in case block in processType-6877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V39, V28, V34, V35, V40, V41, V59, V45, V48, V54, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V15, V6, V8, V35, V5, V34)))) end, V58)) end, V19))), case V60 of {'Idris.Prelude.Types.Left', E20} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V62) -> begin (V67 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V65, V66)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V11)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V14, V16, 0, V19)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V67 of {'Idris.Prelude.Types.Left', E22} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V69) -> begin (V73 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"declare.type"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Setting options for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_FnOpt'(V70)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_FnOpt'(V71, V72)) end end}, V4)))))))) end))(V19))), case V73 of {'Idris.Prelude.Types.Left', E24} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V75) -> begin (V76 = {'Idris.Core.Name.Resolved', V16}), begin (V78 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V77) -> ('un--processFnOpt'(V14, V7, ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--12585-6706--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V39, V28, V34, V35, V40, V41, V38, V45, V48, V54, V76, V15)))), V76, V77)) end, V4))(V19))), case V78 of {'Idris.Prelude.Types.Left', E26} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V80) -> begin (V97 = begin (V81 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V14, V19))), case V81 of {'Idris.Prelude.Types.Left', E28} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V83) -> case ('Idris.Idris2.Prelude.Basics':'un--not'((('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V91, V92, V93)) end end end end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V95)) end end}, fun (V96) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V96)) end))(V4)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V14, V7, V76, {'Idris.Core.Context.SetTotal', V83}, V19)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V97 of {'Idris.Prelude.Types.Left', E30} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V99) -> begin (V100 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V8, V14, V13, V7, {'Idris.Core.Name.Resolved', V16}, V9, V28, V19))), case V100 of {'Idris.Prelude.Types.Left', E32} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V102) -> begin (V103 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"processType is adding \x{2193}"/utf8>> end))(V19))), case V103 of {'Idris.Prelude.Types.Left', E34} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V105) -> begin (V106 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V8, V14, V13, V2, {'Idris.Core.Name.Resolved', V16}, V9, V28, V19))), case V106 of {'Idris.Prelude.Types.Left', E36} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V108) -> begin (V111 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V14, V109, V110)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V28))))))(V19))), case V111 of {'Idris.Prelude.Types.Left', E38} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V113) -> begin (V114 = ('Idris.Idris2.Core.Context':'un--addToSave'(V14, V15, V19))), case V114 of {'Idris.Prelude.Types.Left', E40} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V116) -> begin (V120 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V118, V119)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V28)))))))))))) end))(V19))), case V120 of {'Idris.Prelude.Types.Left', E42} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V122) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(V5, {'Idris.Core.TT.Private'})) of 0 -> begin (V130 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V14, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V123) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V123)) end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V124, V125)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V128, V129)) end end}, V15, V19))), case V130 of {'Idris.Prelude.Types.Left', E44} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V132) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V14, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V133) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V133)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V134, V135)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V138, V139)) end end}, V28, V19)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E46} -> (fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V7, V15}, V141)) end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findInferrable,findInf-6266'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> {'Idris.Prelude.Types.Right', V6} end; 1 -> fun (V10) -> {'Idris.Prelude.Types.Right', [V7 | V6]} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findInferrable,findInf-6225'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', V6} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> ('case--case block in findInferrable,findInf-6266'(V0, V1, V2, V3, V4, V5, V6, V9, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V12, V13)) end end}, V9, V6)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getFnString-6063'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Value.NPrimVal', E0, E1} -> (fun (V10, V11) -> case V11 of {'Idris.Core.TT.Str', E2} -> (fun (V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', V12} end end(E2)); _ -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V5, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V14)) end end end(E0, E1)); _ -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V5, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V15)) end end.
'case--case block in processFnOpt-5966'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V6 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkGlobalDef', V12, V13, V14, V15, V16, V11, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt-5895'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V30 = (('Idris.Idris2.Core.Normalise':'un--nf'(V4, [], V5, {'Idris.Core.Env.Nil'}, case V7 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V11 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V30 of {'Idris.Prelude.Types.Left', E22} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V32) -> begin (V33 = (('nested--10554-4894--in--un--getNamePos'(V0, V1, V2, V3, V4, 0, V32))(V8))), case V33 of {'Idris.Prelude.Types.Left', E24} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V35) -> begin (V36 = (('nested--10554-4890--in--un--collectDDeps'(V0, V1, V2, V3, V4, V32))(V8))), case V36 of {'Idris.Prelude.Types.Left', E26} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V38) -> begin (V39 = (('nested--10554-4893--in--un--collectSpec'(V0, V1, V2, V3, V4, [], V38, V35, V32))(V8))), case V39 of {'Idris.Prelude.Types.Left', E28} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E30} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V45) -> ('Idris.Idris2.Core.Context':'un--addDef'(V4, V2, case V7 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.MkGlobalDef', V46, V47, V48, V49, V50, V41, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V45)) end, V8)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V67) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V4, V3, V2, V67)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,collectSpec-5698'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> fun (V19) -> begin (V20 = (('nested--10554-4892--in--un--getDeps'(V0, V1, V2, V3, V4, 0, V8, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased'))))(V19))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> begin (V28 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V23) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V23)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V26, V27)) end end}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V23)), V13)))) end)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', V22))))), begin (V30 = ('nested--10554-4889--in--un--insertDeps'(V0, V1, V2, V3, V4, V14, V12, [V10 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V29) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V29)) end, V28))]))), (('nested--10554-4893--in--un--collectSpec'(V0, V1, V2, V3, V4, V30, V13, V12, V17))(V19)) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('nested--10554-4893--in--un--collectSpec'(V0, V1, V2, V3, V4, V14, V13, V12, V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,getDeps-5582'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> fun (V17) -> begin (V22 = begin (V19 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V4, [], V12, V18)) end, V15, []))(V17))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> (('nested--10554-4891--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V21, V10))(V17)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V25) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V4, [], V12, V25)) end, V16, []))(V17))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> (('nested--10554-4891--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 1, V28, V24))(V17)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,getDeps-5491'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> case V14 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', V17} end end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', []} end end end(E0)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', []} end end.
'case--case block in processFnOpt,getDeps,splitPs-5381'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> {'Idris.Builtin.MkPair', [V12 | V16], V17}; 1 -> {'Idris.Builtin.MkPair', V16, [V12 | V17]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,getDeps,splitPs-5338'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> ('case--case block in processFnOpt,getDeps,splitPs-5381'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V21, V22)) end end}, V15, V14)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,collectDDeps-5046'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> ('nested--10554-4890--in--un--collectDDeps'(V0, V1, V2, V3, V4, V14)); 1 -> fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V4, [], V13, {'Idris.Core.Env.Nil'}, V8, V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getRefs'('erased', {'Idris.Core.Name.UN', <<"_"/utf8>>}, V19))))), begin (V21 = (('nested--10554-4890--in--un--collectDDeps'(V0, V1, V2, V3, V4, V14))(V16))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V23, V20))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processFnOpt,insertDeps-4957'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> ('nested--10554-4889--in--un--insertDeps'(V0, V1, V2, V3, V4, V8, V7, V6)); 1 -> ('nested--10554-4889--in--un--insertDeps'(V0, V1, V2, V3, V4, [V9 | V8], V7, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,insertDeps-4910'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10554-4889--in--un--insertDeps'(V0, V1, V2, V3, V4, V8, V7, V6)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> ('case--case block in processFnOpt,insertDeps-4957'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V13, V14)) end end}, V10, V8)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt-4782'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V11 = begin (V8 = (('Idris.Idris2.Core.Normalise':'un--nf'(V3, [], V4, {'Idris.Core.Env.Nil'}, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> (('un--getRetTy'(V4, V10))(V7)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V3, V2, V13, V1, V0, 1, V7)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V3, V2, V1, V14)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10705-5312--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> {'Idris.Builtin.MkPair', [], []}; [E0 | E1] -> (fun (V15, V16) -> ('case--processFnOpt,getDeps,splitPs-5338'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V15, V16, V13, V12, ('nested--10705-5312--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V12)), V13, V16)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12585-6706--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Core.Name.Nested', E0, E1} -> (fun (V30, V31) -> 0 end(E0, E1)); {'Idris.Core.Name.NS', E2, E3} -> (fun (V32, V33) -> ('nested--12585-6706--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V33)) end(E2, E3)); _ -> 1 end.
'nested--10554-4889--in--un--insertDeps'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V5; [E0 | E1] -> (fun (V8, V9) -> ('case--processFnOpt,insertDeps-4910'(V0, V1, V2, V3, V4, V8, V9, V6, V5, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V8, V6)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10554-4894--in--un--getNamePos'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V23 = begin (V20 = (((V10(V19))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V7, 1}))))(V15))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> (('nested--10554-4894--in--un--getNamePos'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V5)), V22))(V15)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V8, V5} | V25]} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1, E2, E3)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', []} end end.
'nested--10554-4891--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', V7} end; [E0 | E1] -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('nested--10554-4892--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V9, V7))(V11))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> (('nested--10554-4891--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V10, V14))(V11)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10554-4892--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E10, E11, E12, E13} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V17 = (('nested--10554-4892--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V15, V7))(V16))), case V17 of {'Idris.Prelude.Types.Left', E14} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E16} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V23) -> begin (V24 = (((V11(V23))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 1}))))(V16))), case V24 of {'Idris.Prelude.Types.Left', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V26) -> (('nested--10554-4892--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V26, V19))(V16)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11, E12, E13)); _ -> fun (V27) -> begin (V28 = (('nested--10554-4892--in--un--getDeps'(V0, V1, V2, V3, V4, 1, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V10)), V7))(V27))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> begin (V32 = begin (V31 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V34) -> begin (V35 = (((V11(V34))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 1}))))(V27))), case V35 of {'Idris.Prelude.Types.Left', E8} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V37) -> (('nested--10554-4892--in--un--getDeps'(V0, V1, V2, V3, V4, 1, V37, V7))(V27)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E20, E21, E22} -> (fun (V38, V39, V40) -> case V39 of {'Idris.Core.Value.NRef', E23, E24} -> (fun (V41, V42) -> case V41 of {'Idris.Core.TT.Bound'} -> (fun () -> fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E25} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V47) -> begin (V52 = begin (V49 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V4, [], V47, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V48)))) end, V40, []))(V43))), case V49 of {'Idris.Prelude.Types.Left', E27} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V51) -> (('nested--10554-4891--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 1, V51, V7))(V43)) end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V52 of {'Idris.Prelude.Types.Left', E29} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V54) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V42, V5, V54))} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V55) -> {'Idris.Prelude.Types.Right', V7} end end end(E23, E24)); _ -> fun (V56) -> {'Idris.Prelude.Types.Right', V7} end end end(E20, E21, E22)); {'Idris.Core.Value.NDCon', E31, E32, E33, E34, E35} -> (fun (V57, V58, V59, V60, V61) -> fun (V62) -> begin (V64 = begin (V63 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E36} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V66) -> begin (V68 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V67) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V4, [], V66, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V67)))) end, V61, []))(V62))), case V68 of {'Idris.Prelude.Types.Left', E38} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V70) -> (('nested--10554-4891--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 1, V70, V7))(V62)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31, E32, E33, E34, E35)); {'Idris.Core.Value.NTCon', E40, E41, E42, E43, E44} -> (fun (V71, V72, V73, V74, V75) -> fun (V76) -> begin (V78 = begin (V77 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V77} end), case V78 of {'Idris.Prelude.Types.Left', E45} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V80) -> begin (V120 = begin (V108 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V72, case V80 of {'Idris.Core.Context.MkDefs', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V81 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V76))), case V108 of {'Idris.Prelude.Types.Left', E74} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V110) -> case V110 of {'Idris.Prelude.Types.Just', E76} -> (fun (V111) -> case V111 of {'Idris.Core.Context.TCon', E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119) -> {'Idris.Prelude.Types.Right', V114} end(E77, E78, E79, E80, E81, E82, E83, E84)); _ -> {'Idris.Prelude.Types.Right', []} end end(E76)); _ -> {'Idris.Prelude.Types.Right', []} end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V120 of {'Idris.Prelude.Types.Left', E85} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V122) -> (('case--processFnOpt,getDeps-5582'(V0, V1, V2, V3, V4, V71, V75, V74, V73, V72, V7, V5, V80, V122, ('nested--10705-5312--in--un--splitPs'(V0, V1, V2, V3, V4, V71, V75, V74, V73, V72, V7, V5, 0, V122, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V123) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V123)) end, V75))))))(V76)) end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42, E43, E44)); {'Idris.Core.Value.NDelayed', E87, E88, E89} -> (fun (V124, V125, V126) -> ('nested--10554-4892--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V126, V7)) end(E87, E88, E89)); _ -> fun (V127) -> {'Idris.Prelude.Types.Right', V7} end end.
'nested--12121-6199--in--un--findInfs'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V7, V8) -> fun (V9) -> begin (V10 = (('nested--12121-6199--in--un--findInfs'(V0, V1, V2, V3, V4, V8))(V9))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> (('nested--12121-6198--in--un--findInf'(V0, V1, V2, V12, V4, V7))(V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12121-6198--in--un--findInf'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.Value.NRef', E3, E4} -> (fun (V9, V10) -> case V9 of {'Idris.Core.TT.Bound'} -> (fun () -> case V8 of [] -> ('case--findInferrable,findInf-6225'(V0, V1, V2, V6, V10, V4, V3, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V10, V4)))); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', V3} end end end()); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V3} end end end(E3, E4)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', V3} end end end(E0, E1, E2)); {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V18, V19, V20, V21, V22) -> fun (V23) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V1, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V24)))) end, V22, []))(V23))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> (('nested--12121-6199--in--un--findInfs'(V0, V1, V2, V3, V4, V27))(V23)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NTCon', E12, E13, E14, E15, E16} -> (fun (V28, V29, V30, V31, V32) -> fun (V33) -> begin (V35 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V34) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V1, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V34)))) end, V32, []))(V33))), case V35 of {'Idris.Prelude.Types.Left', E17} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V37) -> (('nested--12121-6199--in--un--findInfs'(V0, V1, V2, V3, V4, V37))(V33)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16)); {'Idris.Core.Value.NDelayed', E19, E20, E21} -> (fun (V38, V39, V40) -> ('nested--12121-6198--in--un--findInf'(V0, V1, V2, V3, V4, V40)) end(E19, E20, E21)); _ -> fun (V41) -> {'Idris.Prelude.Types.Right', V3} end end.
'nested--12121-6200--in--un--fi'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> begin (V16 = {'Idris.Core.Name.MN', <<"inf"/utf8>>, V4}), fun (V17) -> begin (V18 = (((V11(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Bound'}, V16}))))(V17))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = (('nested--12121-6198--in--un--findInf'(V0, V1, V2, V6, V5, V15))(V17))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = (('nested--12121-6200--in--un--fi'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V3)), ((1 + V4) rem 9223372036854775808), [{'Idris.Builtin.MkPair', V16, V3} | V5], V23, V20))(V17))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Right', V26} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> ('nested--12121-6198--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end end(E0, E1, E2, E3)); _ -> ('nested--12121-6198--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end.
'nested--10554-4893--in--un--collectSpec'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V13, V14, V15, V16) -> fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V21, V17))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = (((V12(V21))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V9, {'Idris.Core.TT.Bound'}, V10}))))(V17))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> (('case--processFnOpt,collectSpec-5698'(V0, V1, V2, V3, V4, V13, V14, V15, V16, V12, V10, V9, V7, V6, V5, V21, V24, V27, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V31)) end end}, V10, V1))))(V17)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', V5} end end end(E0, E1, E2, E3)); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', V5} end end.
'nested--10554-4890--in--un--collectDDeps'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V18, V14))), case V19 of {'Idris.Prelude.Types.Left', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V21) -> begin (V22 = (((V9(V18))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Bound'}, V7}))))(V14))), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> (('case--processFnOpt,collectDDeps-5046'(V0, V1, V2, V3, V4, V10, V11, V12, V13, V9, V7, V6, V18, V21, V24, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, V7, V1))))(V14)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1, E2, E3)); _ -> fun (V30) -> {'Idris.Prelude.Types.Right', []} end end.
'un--processType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V17 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V14))(V16))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)))) end))(V16))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking type decl "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V15)))))))) end))(V16))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V19))(V16))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V30 = begin (V29 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V60 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V28}, case V32 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V33 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V60 of {'Idris.Prelude.Types.Left', E41} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V62) -> case V62 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V69 = ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V4, fun (V68) -> {'Idris.Core.Core.InType', V7, V19, V68} end))(fun (V63) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V28, {'Idris.TTImp.Elab.Check.InType'}, [{'Idris.TTImp.Elab.Check.HolesOkay'} | V4], V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V64) -> fun (V65) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V64, V65)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V66) -> fun (V67) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V66, V67)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V15}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V7)), V63)) end))(V16))), case V69 of {'Idris.Prelude.Types.Left', E43} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V71) -> begin (V72 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)))) end, {'Idris.Core.Env.Nil'}, ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V12, V6, V71))))(V16))), case V72 of {'Idris.Prelude.Types.Left', E45} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V74) -> begin (V75 = (('un--initDef'(V0, V1, V2, V3, V19, V6, V71, V10))(V16))), case V75 of {'Idris.Prelude.Types.Left', E47} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V77) -> begin (V78 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V12, V6, V71))), begin (V79 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V1, V78, V16))), case V79 of {'Idris.Prelude.Types.Left', E49} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V81) -> begin (V82 = {'Idris.Prelude.Types.Nothing'}), case V81 of {'Idris.Builtin.MkPair', E51, E52} -> (fun (V83, V84) -> begin (V86 = begin (V85 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E53} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V88) -> begin (V89 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V88, V16))), case V89 of {'Idris.Prelude.Types.Left', E55} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V91) -> begin (V95 = begin (V92 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, [], V88, {'Idris.Core.Env.Nil'}, V78))(V16))), case V92 of {'Idris.Prelude.Types.Left', E57} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V94) -> (('un--findInferrable'(V1, V91, V94))(V16)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V95 of {'Idris.Prelude.Types.Left', E59} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V97) -> begin (V103 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V98) -> case V98 of {'Idris.Prelude.Types.Left', E61} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V101) -> ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Idris.Core.Name.Resolved', V28}, begin (V102 = {'Idris.Builtin.MkPair', V83, V84}), ('case--case block in case block in processType-6877'(V15, V14, V13, V12, V10, V9, V8, V7, V0, V6, V5, V4, V3, V2, V1, V19, V28, V32, V82, V71, V77, V78, V83, V84, V102, V88, V91, V97, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V19, V8, V0, V78, V9, V77)))) end, V101)) end, V16))), case V103 of {'Idris.Prelude.Types.Left', E63} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V105) -> begin (V110 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V106) -> fun (V107) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V108, V109)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V4)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V1, V28, 0, V16)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V110 of {'Idris.Prelude.Types.Left', E65} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V112) -> begin (V116 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Setting options for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V113) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_FnOpt'(V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_FnOpt'(V114, V115)) end end}, V10)))))))) end))(V16))), case V116 of {'Idris.Prelude.Types.Left', E67} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V118) -> begin (V119 = {'Idris.Core.Name.Resolved', V28}), begin (V121 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V120) -> ('un--processFnOpt'(V1, V7, ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--12585-6706--in--un--isNested'(V15, V14, V13, V12, V10, V9, V8, V7, V0, V6, V5, V4, V3, V2, V1, V19, V28, V32, V82, V71, V77, V78, V83, V84, V81, V88, V91, V97, V119, V19)))), V119, V120)) end, V10))(V16))), case V121 of {'Idris.Prelude.Types.Left', E69} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V123) -> begin (V140 = begin (V124 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1, V16))), case V124 of {'Idris.Prelude.Types.Left', E71} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V126) -> case ('Idris.Idris2.Prelude.Basics':'un--not'((('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V129, V130, V131)) end end end end end, fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V134, V135, V136)) end end end end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V138)) end end}, fun (V139) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V139)) end))(V10)))) of 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, V119, {'Idris.Core.Context.SetTotal', V126}, V16)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V140 of {'Idris.Prelude.Types.Left', E73} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V142) -> begin (V143 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V0, V1, V2, V7, {'Idris.Core.Name.Resolved', V28}, V6, V71, V16))), case V143 of {'Idris.Prelude.Types.Left', E75} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V145) -> begin (V146 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"processType is adding \x{2193}"/utf8>> end))(V16))), case V146 of {'Idris.Prelude.Types.Left', E77} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V148) -> begin (V149 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V1, V2, V13, {'Idris.Core.Name.Resolved', V28}, V6, V71, V16))), case V149 of {'Idris.Prelude.Types.Left', E79} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V151) -> begin (V154 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V152, V153)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V71))))))(V16))), case V154 of {'Idris.Prelude.Types.Left', E81} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V156) -> begin (V157 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V19, V16))), case V157 of {'Idris.Prelude.Types.Left', E83} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V159) -> begin (V163 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V160) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V160)) end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V161, V162)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V71)))))))))))) end))(V16))), case V163 of {'Idris.Prelude.Types.Left', E85} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V165) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(V9, {'Idris.Core.TT.Private'})) of 0 -> begin (V173 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V166) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V166)) end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V167, V168)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V169, V170)) end end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V171, V172)) end end}, V19, V16))), case V173 of {'Idris.Prelude.Types.Left', E87} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V175) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V176) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V176)) end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V177, V178)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V179, V180)) end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V181, V182)) end end}, V71, V16)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E89} -> (fun (V183) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V7, V19}, V16)) end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processFnOpt'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.TTImp.Inline'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V5)) end end()); {'Idris.TTImp.TTImp.TCInline'} -> (fun () -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.TCInline'}, V6)) end end()); _ -> case V2 of 0 -> case V4 of {'Idris.TTImp.TTImp.Hint', E364} -> (fun (V7) -> fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E365} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E365)); {'Idris.Prelude.Types.Right', E366} -> (fun (V12) -> begin (V40 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V12 of {'Idris.Core.Context.MkDefs', E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V13 end(E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V40 of {'Idris.Prelude.Types.Left', E394} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E394)); {'Idris.Prelude.Types.Right', E395} -> (fun (V42) -> case V42 of {'Idris.Prelude.Types.Just', E396} -> (fun (V43) -> begin (V47 = begin (V44 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V12, {'Idris.Core.Env.Nil'}, V43))(V8))), case V44 of {'Idris.Prelude.Types.Left', E397} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E397)); {'Idris.Prelude.Types.Right', E398} -> (fun (V46) -> (('un--getRetTy'(V12, V46))(V8)) end(E398)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V47 of {'Idris.Prelude.Types.Left', E399} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E399)); {'Idris.Prelude.Types.Right', E400} -> (fun (V49) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V0, V1, V49, V3, V7, 1, V8)) end(E400)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E396)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V3, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E395)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E366)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E364)); _ -> case V4 of {'Idris.TTImp.TTImp.Hint', E359} -> (fun (V50) -> fun (V51) -> begin (V59 = begin (V56 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V54, V55)) end end}, V3, V51))), case V56 of {'Idris.Prelude.Types.Left', E360} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E360)); {'Idris.Prelude.Types.Right', E361} -> (fun (V58) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding local hint "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V58)))) end))(V51)) end(E361)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V59 of {'Idris.Prelude.Types.Left', E362} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E362)); {'Idris.Prelude.Types.Right', E363} -> (fun (V61) -> ('Idris.Idris2.Core.Context':'un--addLocalHint'(V0, V3, V51)) end(E363)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E359)); _ -> case V2 of 0 -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E358} -> (fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V3, V62, V63)) end end(E358)); _ -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E270} -> (fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V65)) end end(E270)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V66) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V66)) end end()); {'Idris.TTImp.TTImp.ForeignFn', E271} -> (fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V68)) end end(E271)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> fun (V69) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Invertible'}, V69)) end end()); {'Idris.TTImp.TTImp.Totality', E272} -> (fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.SetTotal', V70}, V71)) end end(E272)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> fun (V72) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Macro'}, V72)) end end()); {'Idris.TTImp.TTImp.SpecArgs', E273} -> (fun (V73) -> fun (V74) -> begin (V76 = begin (V75 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E274} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E274)); {'Idris.Prelude.Types.Right', E275} -> (fun (V78) -> begin (V106 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V78 of {'Idris.Core.Context.MkDefs', E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105) -> V79 end(E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V74))), case V106 of {'Idris.Prelude.Types.Left', E303} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E303)); {'Idris.Prelude.Types.Right', E304} -> (fun (V108) -> case V108 of {'Idris.Prelude.Types.Just', E305} -> (fun (V109) -> begin (V131 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V78, {'Idris.Core.Env.Nil'}, case V109 of {'Idris.Core.Context.MkGlobalDef', E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130) -> V112 end(E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V74))), case V131 of {'Idris.Prelude.Types.Left', E327} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E327)); {'Idris.Prelude.Types.Right', E328} -> (fun (V133) -> begin (V134 = (('nested--10554-4894--in--un--getNamePos'(V2, V73, V3, V1, V0, 0, V133))(V74))), case V134 of {'Idris.Prelude.Types.Left', E329} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E329)); {'Idris.Prelude.Types.Right', E330} -> (fun (V136) -> begin (V137 = (('nested--10554-4890--in--un--collectDDeps'(V2, V73, V3, V1, V0, V133))(V74))), case V137 of {'Idris.Prelude.Types.Left', E331} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E331)); {'Idris.Prelude.Types.Right', E332} -> (fun (V139) -> begin (V140 = (('nested--10554-4893--in--un--collectSpec'(V2, V73, V3, V1, V0, [], V139, V136, V133))(V74))), case V140 of {'Idris.Prelude.Types.Left', E333} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E333)); {'Idris.Prelude.Types.Right', E334} -> (fun (V142) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V143) -> case V143 of {'Idris.Prelude.Types.Left', E335} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E335)); {'Idris.Prelude.Types.Right', E336} -> (fun (V145) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E336)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V146) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V109 of {'Idris.Core.Context.MkGlobalDef', E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357} -> (fun (V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167) -> {'Idris.Core.Context.MkGlobalDef', V147, V148, V149, V150, V151, V142, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167} end(E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V146)) end, V74)) end(E334)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E330)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E328)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E305)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V3, V74)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E304)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E182} -> (fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V169)) end end(E182)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V170) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V170)) end end()); {'Idris.TTImp.TTImp.ForeignFn', E183} -> (fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V172)) end end(E183)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> fun (V173) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Invertible'}, V173)) end end()); {'Idris.TTImp.TTImp.Totality', E184} -> (fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.SetTotal', V174}, V175)) end end(E184)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> fun (V176) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Macro'}, V176)) end end()); {'Idris.TTImp.TTImp.SpecArgs', E185} -> (fun (V177) -> fun (V178) -> begin (V180 = begin (V179 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V179} end), case V180 of {'Idris.Prelude.Types.Left', E186} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V182) -> begin (V210 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V182 of {'Idris.Core.Context.MkDefs', E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214} -> (fun (V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209) -> V183 end(E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V178))), case V210 of {'Idris.Prelude.Types.Left', E215} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V212) -> case V212 of {'Idris.Prelude.Types.Just', E217} -> (fun (V213) -> begin (V235 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V182, {'Idris.Core.Env.Nil'}, case V213 of {'Idris.Core.Context.MkGlobalDef', E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238} -> (fun (V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234) -> V216 end(E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V178))), case V235 of {'Idris.Prelude.Types.Left', E239} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E239)); {'Idris.Prelude.Types.Right', E240} -> (fun (V237) -> begin (V238 = (('nested--10554-4894--in--un--getNamePos'(V2, V177, V3, V1, V0, 0, V237))(V178))), case V238 of {'Idris.Prelude.Types.Left', E241} -> (fun (V239) -> {'Idris.Prelude.Types.Left', V239} end(E241)); {'Idris.Prelude.Types.Right', E242} -> (fun (V240) -> begin (V241 = (('nested--10554-4890--in--un--collectDDeps'(V2, V177, V3, V1, V0, V237))(V178))), case V241 of {'Idris.Prelude.Types.Left', E243} -> (fun (V242) -> {'Idris.Prelude.Types.Left', V242} end(E243)); {'Idris.Prelude.Types.Right', E244} -> (fun (V243) -> begin (V244 = (('nested--10554-4893--in--un--collectSpec'(V2, V177, V3, V1, V0, [], V243, V240, V237))(V178))), case V244 of {'Idris.Prelude.Types.Left', E245} -> (fun (V245) -> {'Idris.Prelude.Types.Left', V245} end(E245)); {'Idris.Prelude.Types.Right', E246} -> (fun (V246) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V247) -> case V247 of {'Idris.Prelude.Types.Left', E247} -> (fun (V248) -> {'Idris.Prelude.Types.Left', V248} end(E247)); {'Idris.Prelude.Types.Right', E248} -> (fun (V249) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E248)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V250) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V213 of {'Idris.Core.Context.MkGlobalDef', E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269} -> (fun (V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271) -> {'Idris.Core.Context.MkGlobalDef', V251, V252, V253, V254, V255, V246, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271} end(E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V250)) end, V178)) end(E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E217)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V3, V178)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V4 of {'Idris.TTImp.TTImp.Hint', E177} -> (fun (V272) -> fun (V273) -> begin (V281 = begin (V278 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V274) -> fun (V275) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V274, V275)) end end, fun (V276) -> fun (V277) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V276, V277)) end end}, V3, V273))), case V278 of {'Idris.Prelude.Types.Left', E178} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V280) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding local hint "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V280)))) end))(V273)) end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V281 of {'Idris.Prelude.Types.Left', E180} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E180)); {'Idris.Prelude.Types.Right', E181} -> (fun (V283) -> ('Idris.Idris2.Core.Context':'un--addLocalHint'(V0, V3, V273)) end(E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E177)); _ -> case V2 of 0 -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E176} -> (fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V3, V284, V285)) end end(E176)); _ -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E88} -> (fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V287)) end end(E88)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V288) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V288)) end end()); {'Idris.TTImp.TTImp.ForeignFn', E89} -> (fun (V289) -> fun (V290) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V290)) end end(E89)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> fun (V291) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Invertible'}, V291)) end end()); {'Idris.TTImp.TTImp.Totality', E90} -> (fun (V292) -> fun (V293) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.SetTotal', V292}, V293)) end end(E90)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> fun (V294) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Macro'}, V294)) end end()); {'Idris.TTImp.TTImp.SpecArgs', E91} -> (fun (V295) -> fun (V296) -> begin (V298 = begin (V297 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V297} end), case V298 of {'Idris.Prelude.Types.Left', E92} -> (fun (V299) -> {'Idris.Prelude.Types.Left', V299} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V300) -> begin (V328 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V300 of {'Idris.Core.Context.MkDefs', E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120} -> (fun (V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327) -> V301 end(E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V296))), case V328 of {'Idris.Prelude.Types.Left', E121} -> (fun (V329) -> {'Idris.Prelude.Types.Left', V329} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V330) -> case V330 of {'Idris.Prelude.Types.Just', E123} -> (fun (V331) -> begin (V353 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V300, {'Idris.Core.Env.Nil'}, case V331 of {'Idris.Core.Context.MkGlobalDef', E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144} -> (fun (V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352) -> V334 end(E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V296))), case V353 of {'Idris.Prelude.Types.Left', E145} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V355) -> begin (V356 = (('nested--10554-4894--in--un--getNamePos'(V2, V295, V3, V1, V0, 0, V355))(V296))), case V356 of {'Idris.Prelude.Types.Left', E147} -> (fun (V357) -> {'Idris.Prelude.Types.Left', V357} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V358) -> begin (V359 = (('nested--10554-4890--in--un--collectDDeps'(V2, V295, V3, V1, V0, V355))(V296))), case V359 of {'Idris.Prelude.Types.Left', E149} -> (fun (V360) -> {'Idris.Prelude.Types.Left', V360} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V361) -> begin (V362 = (('nested--10554-4893--in--un--collectSpec'(V2, V295, V3, V1, V0, [], V361, V358, V355))(V296))), case V362 of {'Idris.Prelude.Types.Left', E151} -> (fun (V363) -> {'Idris.Prelude.Types.Left', V363} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V364) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V365) -> case V365 of {'Idris.Prelude.Types.Left', E153} -> (fun (V366) -> {'Idris.Prelude.Types.Left', V366} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V367) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V368) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V331 of {'Idris.Core.Context.MkGlobalDef', E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175} -> (fun (V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389) -> {'Idris.Core.Context.MkGlobalDef', V369, V370, V371, V372, V373, V364, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389} end(E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V368)) end, V296)) end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V3, V296)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E0} -> (fun (V390) -> fun (V391) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V391)) end end(E0)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V392) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V392)) end end()); {'Idris.TTImp.TTImp.ForeignFn', E1} -> (fun (V393) -> fun (V394) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V394)) end end(E1)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> fun (V395) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Invertible'}, V395)) end end()); {'Idris.TTImp.TTImp.Totality', E2} -> (fun (V396) -> fun (V397) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.SetTotal', V396}, V397)) end end(E2)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> fun (V398) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Macro'}, V398)) end end()); {'Idris.TTImp.TTImp.SpecArgs', E3} -> (fun (V399) -> fun (V400) -> begin (V402 = begin (V401 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V401} end), case V402 of {'Idris.Prelude.Types.Left', E4} -> (fun (V403) -> {'Idris.Prelude.Types.Left', V403} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V404) -> begin (V432 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V404 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431) -> V405 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V400))), case V432 of {'Idris.Prelude.Types.Left', E33} -> (fun (V433) -> {'Idris.Prelude.Types.Left', V433} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V434) -> case V434 of {'Idris.Prelude.Types.Just', E35} -> (fun (V435) -> begin (V457 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V404, {'Idris.Core.Env.Nil'}, case V435 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456) -> V438 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V400))), case V457 of {'Idris.Prelude.Types.Left', E57} -> (fun (V458) -> {'Idris.Prelude.Types.Left', V458} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V459) -> begin (V460 = (('nested--10554-4894--in--un--getNamePos'(V2, V399, V3, V1, V0, 0, V459))(V400))), case V460 of {'Idris.Prelude.Types.Left', E59} -> (fun (V461) -> {'Idris.Prelude.Types.Left', V461} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V462) -> begin (V463 = (('nested--10554-4890--in--un--collectDDeps'(V2, V399, V3, V1, V0, V459))(V400))), case V463 of {'Idris.Prelude.Types.Left', E61} -> (fun (V464) -> {'Idris.Prelude.Types.Left', V464} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V465) -> begin (V466 = (('nested--10554-4893--in--un--collectSpec'(V2, V399, V3, V1, V0, [], V465, V462, V459))(V400))), case V466 of {'Idris.Prelude.Types.Left', E63} -> (fun (V467) -> {'Idris.Prelude.Types.Left', V467} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V468) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V469) -> case V469 of {'Idris.Prelude.Types.Left', E65} -> (fun (V470) -> {'Idris.Prelude.Types.Left', V470} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V471) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V472) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V435 of {'Idris.Core.Context.MkGlobalDef', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493) -> {'Idris.Core.Context.MkGlobalDef', V473, V474, V475, V476, V477, V468, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493} end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V472)) end, V400)) end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V3, V400)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--initDef'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, V4, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.None'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E2 | E3] -> (fun (V12, V13) -> case V12 of {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V18, V5, V6, V14))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.ExternDef', V21}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.TTImp.TTImp.ForeignFn', E8} -> (fun (V22) -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V27, V5, V6, V23))), case V28 of {'Idris.Prelude.Types.Left', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V30) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V31) -> ('un--getFnString'(V1, V2, V3, V31)) end, V22, []))(V23))), case V32 of {'Idris.Prelude.Types.Left', E13} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.ForeignDef', V30, V34}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('un--initDef'(V0, V1, V2, V3, V4, V5, V6, V13)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getRetTy'(V0, V1) -> case V1 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> fun (V10) -> begin (V11 = (((V5(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V2, 1}))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> (('un--getRetTy'(V0, V13))(V10)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'('erased', V1)), <<"Can only add hints for concrete return types"/utf8>>}, V14)) end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V15, V16, V17, V18, V19) -> fun (V20) -> {'Idris.Prelude.Types.Right', V16} end end(E10, E11, E12, E13, E14)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'('erased', V1)), <<"Can only add hints for concrete return types"/utf8>>}, V21)) end end.
'un--getFnString'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IPrimVal', E11, E12} -> (fun (V4, V5) -> case V5 of {'Idris.Core.TT.Str', E24} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', V6} end end(E24)); _ -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[foreign]"/utf8>>}))(V8))), case V9 of {'Idris.Prelude.Types.Left', E13} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3))), begin (V13 = ('Idris.Idris2.Core.Normalise':'un--gnf'([], {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.PrimVal', V12, {'Idris.Core.TT.StringType'}}))), begin (V14 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V11, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V3, V13, V8))), case V14 of {'Idris.Prelude.Types.Left', E15} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E17} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V20, {'Idris.Core.Env.Nil'}, V16))(V8))), case V21 of {'Idris.Prelude.Types.Left', E19} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V23) -> case V23 of {'Idris.Core.Value.NPrimVal', E21, E22} -> (fun (V24, V25) -> case V25 of {'Idris.Core.TT.Str', E23} -> (fun (V26) -> {'Idris.Prelude.Types.Right', V26} end(E23)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V12, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V8)) end end(E21, E22)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V12, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V8)) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E11, E12)); _ -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[foreign]"/utf8>>}))(V27))), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3))), begin (V32 = ('Idris.Idris2.Core.Normalise':'un--gnf'([], {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.PrimVal', V31, {'Idris.Core.TT.StringType'}}))), begin (V33 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V30, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V3, V32, V27))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> begin (V37 = begin (V36 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E4} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V39) -> begin (V40 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V39, {'Idris.Core.Env.Nil'}, V35))(V27))), case V40 of {'Idris.Prelude.Types.Left', E6} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V42) -> case V42 of {'Idris.Core.Value.NPrimVal', E8, E9} -> (fun (V43, V44) -> case V44 of {'Idris.Core.TT.Str', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Right', V45} end(E10)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V31, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V27)) end end(E8, E9)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V31, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V27)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--findInferrable'(V0, V1, V2) -> ('nested--12121-6200--in--un--fi'(V2, V1, V0, 0, 0, [], [], V2)).
