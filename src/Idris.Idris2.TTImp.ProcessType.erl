-module('Idris.Idris2.TTImp.ProcessType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--findInferrable,findInf-7503'/9,
  'case--processFnOpt,insertDeps-6195'/10,
  'nested--7621-6584--in--un--splitPs'/15,
  'nested--9569-8011--in--un--isNested'/30,
  'nested--7463-6173--in--un--insertDeps'/8,
  'nested--7463-6178--in--un--getNamePos'/8,
  'nested--7463-6175--in--un--getDepsArgs'/9,
  'nested--7463-6176--in--un--getDeps'/8,
  'nested--9061-7473--in--un--findInfs'/7,
  'nested--9061-7472--in--un--findInf'/6,
  'nested--9061-7474--in--un--fi'/8,
  'nested--7463-6177--in--un--collectSpec'/10,
  'nested--7463-6174--in--un--collectDDeps'/7,
  'un--processType'/13,
  'un--processFnOpt'/5,
  'un--initDef'/8,
  'un--getRetTy'/3,
  'un--getFnString'/5,
  'un--findInferrable'/3
]).
'case--findInferrable,findInf-7503'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V6} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V12, V13)) end end}, V9, V6)) of 1 -> {'Idris.Prelude.Types.Right', V6}; 0 -> {'Idris.Prelude.Types.Right', [V9 | V6]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processFnOpt,insertDeps-6195'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--7463-6173--in--un--insertDeps'(V0, V1, V2, V3, V4, V8, V7, V6)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V13, V14)) end end}, V10, V8)) of 1 -> ('nested--7463-6173--in--un--insertDeps'(V0, V1, V2, V3, V4, V8, V7, V6)); 0 -> ('nested--7463-6173--in--un--insertDeps'(V0, V1, V2, V3, V4, [V10 | V8], V7, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7621-6584--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> {'Idris.Builtin.MkPair', [], []}; [E0 | E1] -> (fun (V15, V16) -> case ('nested--7621-6584--in--un--splitPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V12)), V13, V16)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V21, V22)) end end}, V12, V13)) of 1 -> {'Idris.Builtin.MkPair', [V15 | V17], V18}; 0 -> {'Idris.Builtin.MkPair', V17, [V15 | V18]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9569-8011--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Core.Name.Nested', E0, E1} -> (fun (V30, V31) -> 1 end(E0, E1)); {'Idris.Core.Name.NS', E2, E3} -> (fun (V32, V33) -> ('nested--9569-8011--in--un--isNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V33)) end(E2, E3)); _ -> 0 end.
'nested--7463-6173--in--un--insertDeps'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V5; [E0 | E1] -> (fun (V8, V9) -> ('case--processFnOpt,insertDeps-6195'(V0, V1, V2, V3, V4, V8, V9, V6, V5, ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V8, V6)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7463-6178--in--un--getNamePos'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V23 = begin (V20 = (((V11(V19))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V8, 0}))))(V7))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> ('nested--7463-6178--in--un--getNamePos'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V5)), V22, V7)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V9, V5} | V25]} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end.
'nested--7463-6175--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of [] -> {'Idris.Prelude.Types.Right', V7}; [E0 | E1] -> (fun (V9, V10) -> begin (V11 = (('nested--7463-6176--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V9, V7))(V8))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> ('nested--7463-6175--in--un--getDepsArgs'(V0, V1, V2, V3, V4, V5, V10, V13, V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7463-6176--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> fun (V12) -> case V10 of {'Idris.Core.TT.Pi', E10, E11, E12, E13} -> (fun (V13, V14, V15, V16) -> begin (V17 = (('nested--7463-6176--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V16, V7))(V12))), case V17 of {'Idris.Prelude.Types.Left', E14} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E16} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V23) -> begin (V24 = (((V11(V23))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 0}))))(V12))), case V24 of {'Idris.Prelude.Types.Left', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V26) -> (('nested--7463-6176--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V26, V19))(V12)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13)); _ -> begin (V27 = (('nested--7463-6176--in--un--getDeps'(V0, V1, V2, V3, V4, 0, ('Idris.Idris2.Core.TT':'un--binderType'(V10)), V7))(V12))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> begin (V34 = (((V11(V33))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 0}))))(V12))), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> (('nested--7463-6176--in--un--getDeps'(V0, V1, V2, V3, V4, 0, V36, V7))(V12)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E20, E21, E22} -> (fun (V37, V38, V39) -> fun (V40) -> case V38 of {'Idris.Core.Value.NRef', E23, E24} -> (fun (V41, V42) -> case V41 of {'Idris.Core.TT.Bound'} -> (fun () -> begin (V44 = begin (V43 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E25} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V46) -> begin (V51 = begin (V48 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V4, [], V46, ('Idris.Idris2.Builtin':'un--snd'(V47)))) end, V39, [], V40))), case V48 of {'Idris.Prelude.Types.Left', E27} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V50) -> ('nested--7463-6175--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V50, V7, V40)) end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V51 of {'Idris.Prelude.Types.Left', E29} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V42, V5, V53))} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', V7} end end(E23, E24)); _ -> {'Idris.Prelude.Types.Right', V7} end end end(E20, E21, E22)); {'Idris.Core.Value.NDCon', E31, E32, E33, E34, E35} -> (fun (V54, V55, V56, V57, V58) -> fun (V59) -> begin (V61 = begin (V60 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E36} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V63) -> begin (V65 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V64) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V4, [], V63, ('Idris.Idris2.Builtin':'un--snd'(V64)))) end, V58, [], V59))), case V65 of {'Idris.Prelude.Types.Left', E38} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V67) -> ('nested--7463-6175--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V67, V7, V59)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31, E32, E33, E34, E35)); {'Idris.Core.Value.NTCon', E40, E41, E42, E43, E44} -> (fun (V68, V69, V70, V71, V72) -> fun (V73) -> begin (V75 = begin (V74 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V74} end), case V75 of {'Idris.Prelude.Types.Left', E45} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V77) -> begin (V118 = begin (V106 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V69, case V77 of {'Idris.Core.Context.MkDefs', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105) -> V78 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V73))), case V106 of {'Idris.Prelude.Types.Left', E75} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V108) -> case V108 of {'Idris.Prelude.Types.Just', E77} -> (fun (V109) -> case V109 of {'Idris.Core.Context.TCon', E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117) -> {'Idris.Prelude.Types.Right', V112} end(E78, E79, E80, E81, E82, E83, E84, E85)); _ -> {'Idris.Prelude.Types.Right', []} end end(E77)); _ -> {'Idris.Prelude.Types.Right', []} end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V118 of {'Idris.Prelude.Types.Left', E86} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V120) -> case ('nested--7621-6584--in--un--splitPs'(V0, V1, V2, V3, V4, V68, V72, V71, V70, V69, V7, V5, 0, V120, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V121) -> ('Idris.Idris2.Builtin':'un--snd'(V121)) end, V72)))) of {'Idris.Builtin.MkPair', E88, E89} -> (fun (V122, V123) -> begin (V128 = begin (V125 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V124) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V4, [], V77, V124)) end, V122, [], V73))), case V125 of {'Idris.Prelude.Types.Left', E90} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V127) -> ('nested--7463-6175--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 1, V127, V7, V73)) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V128 of {'Idris.Prelude.Types.Left', E92} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V130) -> begin (V132 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V131) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V4, [], V77, V131)) end, V123, [], V73))), case V132 of {'Idris.Prelude.Types.Left', E94} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V134) -> ('nested--7463-6175--in--un--getDepsArgs'(V0, V1, V2, V3, V4, 0, V134, V130, V73)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42, E43, E44)); {'Idris.Core.Value.NDelayed', E96, E97, E98} -> (fun (V135, V136, V137) -> ('nested--7463-6176--in--un--getDeps'(V0, V1, V2, V3, V4, V5, V137, V7)) end(E96, E97, E98)); _ -> fun (V138) -> {'Idris.Prelude.Types.Right', V7} end end.
'nested--9061-7473--in--un--findInfs'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Idris.Prelude.Types.Right', V3}; [E0 | E1] -> (fun (V7, V8) -> begin (V9 = ('nested--9061-7473--in--un--findInfs'(V0, V1, V2, V3, V4, V8, V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> (('nested--9061-7472--in--un--findInf'(V0, V1, V2, V11, V4, V7))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9061-7472--in--un--findInf'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Core.Value.NRef', E3, E4} -> (fun (V9, V10) -> case V9 of {'Idris.Core.TT.Bound'} -> (fun () -> case V8 of [] -> fun (V11) -> ('case--findInferrable,findInf-7503'(V0, V1, V2, V6, V10, V4, V3, ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V10, V4)), V11)) end; _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V3} end end end()); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', V3} end end end(E3, E4)); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', V3} end end end(E0, E1, E2)); {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V19, V20, V21, V22, V23) -> fun (V24) -> begin (V26 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V25)))) end, V23, [], V24))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> ('nested--9061-7473--in--un--findInfs'(V0, V1, V2, V3, V4, V28, V24)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NTCon', E12, E13, E14, E15, E16} -> (fun (V29, V30, V31, V32, V33) -> fun (V34) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V35)))) end, V33, [], V34))), case V36 of {'Idris.Prelude.Types.Left', E17} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V38) -> ('nested--9061-7473--in--un--findInfs'(V0, V1, V2, V3, V4, V38, V34)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16)); {'Idris.Core.Value.NDelayed', E19, E20, E21} -> (fun (V39, V40, V41) -> ('nested--9061-7472--in--un--findInf'(V0, V1, V2, V3, V4, V41)) end(E19, E20, E21)); _ -> fun (V42) -> {'Idris.Prelude.Types.Right', V3} end end.
'nested--9061-7474--in--un--fi'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> begin (V16 = {'Idris.Core.Name.MN', <<"inf"/utf8>>, V4}), fun (V17) -> begin (V18 = (((V11(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Bound'}, V16}))))(V17))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = (('nested--9061-7472--in--un--findInf'(V0, V1, V2, V6, V5, V15))(V17))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = (('nested--9061-7474--in--un--fi'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V3)), ((1 + V4) rem 9223372036854775808), [{'Idris.Builtin.MkPair', V16, V3} | V5], V23, V20))(V17))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Right', V26} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> ('nested--9061-7472--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end end(E0, E1, E2, E3)); _ -> ('nested--9061-7472--in--un--findInf'(V0, V1, V2, V6, V5, V7)) end.
'nested--7463-6177--in--un--collectSpec'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> case V12 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V14, V15, V16, V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V21, V9))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = (((V13(V21))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V11}))))(V9))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V31)) end end}, V11, V1)) of 1 -> begin (V32 = (('nested--7463-6176--in--un--getDeps'(V0, V1, V2, V3, V4, 1, V17, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'())))(V9))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> begin (V40 = ('Idris.Idris2.Data.List':'un--filter'(fun (V35) -> case ('Idris.Idris2.Builtin':'un--snd'(V35)) of 1 -> 1; 0 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V38, V39)) end end}, ('Idris.Idris2.Builtin':'un--fst'(V35)), V6)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V34))))), begin (V42 = ('nested--7463-6173--in--un--insertDeps'(V0, V1, V2, V3, V4, V5, V7, [V11 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V41) -> ('Idris.Idris2.Builtin':'un--fst'(V41)) end, V40))]))), ('nested--7463-6177--in--un--collectSpec'(V0, V1, V2, V3, V4, V42, V6, V7, V27, V9)) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('nested--7463-6177--in--un--collectSpec'(V0, V1, V2, V3, V4, V5, V6, V7, V27, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', V5} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', V5} end.
'nested--7463-6174--in--un--collectDDeps'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V18, V6))), case V19 of {'Idris.Prelude.Types.Left', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V21) -> begin (V22 = (((V10(V18))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V7, {'Idris.Core.TT.Bound'}, V8}))))(V6))), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, V8, V1)) of 1 -> ('nested--7463-6174--in--un--collectDDeps'(V0, V1, V2, V3, V4, V24, V6)); 0 -> begin (V29 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V4, [], V21, {'Idris.Core.Env.Nil'}, V14, V6))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getRefs'({'Idris.Core.Name.UN', <<"_"/utf8>>}, V31))))), begin (V33 = ('nested--7463-6174--in--un--collectDDeps'(V0, V1, V2, V3, V4, V24, V6))), case V33 of {'Idris.Prelude.Types.Left', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V35) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V35, V32))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end.
'un--processType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V13, V14, V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V15, V12))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Metadata':'un--addNameLoc'(V2, V1, V14, V19, V12))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)))) end, V12))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Data.String':'un--unwords'([<<"Checking type decl:"/utf8>> | [('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V8)) | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)) | [<<":"/utf8>> | [('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V16)) | []]]]]])) end, V12))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V19, V12))), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V64 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V31}, case V35 of {'Idris.Core.Context.MkDefs', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V36 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12))), case V64 of {'Idris.Prelude.Types.Left', E44} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V66) -> case V66 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V73 = (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V4, fun (V67) -> {'Idris.Core.Core.InType', V7, V19, V67} end, fun (V68) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V31, {'Idris.TTImp.Elab.Check.InType'}, [0 | V4], V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V69) -> fun (V70) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V69, V70)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V71) -> fun (V72) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V71, V72)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V16}, ('Idris.Idris2.Core.Normalise':'un--gType'(V7)), V68)) end))(V12))), case V73 of {'Idris.Prelude.Types.Left', E46} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)))) end, {'Idris.Core.Env.Nil'}, ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V13, V6, V75)), V12))), case V76 of {'Idris.Prelude.Types.Left', E48} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V78) -> begin (V79 = (('un--initDef'(V0, V1, V2, V3, V19, V6, V75, V10))(V12))), case V79 of {'Idris.Prelude.Types.Left', E50} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V13, V6, V75))), begin (V83 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V1, V82, V12))), case V83 of {'Idris.Prelude.Types.Left', E52} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V85) -> begin (V86 = {'Idris.Prelude.Types.Nothing'}), case V85 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V87, V88) -> begin (V90 = begin (V89 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E56} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V92) -> begin (V93 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V92, V12))), case V93 of {'Idris.Prelude.Types.Left', E58} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V95) -> begin (V99 = begin (V96 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, [], V92, {'Idris.Core.Env.Nil'}, V82))(V12))), case V96 of {'Idris.Prelude.Types.Left', E60} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V98) -> (('un--findInferrable'(V1, V95, V98))(V12)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V99 of {'Idris.Prelude.Types.Left', E62} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V101) -> begin (V127 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V102) -> case V102 of {'Idris.Prelude.Types.Left', E64} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V104) -> {'Idris.Prelude.Types.Right', 0} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V105) -> ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Idris.Core.Name.Resolved', V31}, case ('Idris.Idris2.Core.Context':'un--newDef'(V7, V19, V8, V0, V82, V9, V81)) of {'Idris.Core.Context.MkGlobalDef', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126) -> {'Idris.Core.Context.MkGlobalDef', V106, V107, V108, V87, V88, V111, V101, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126} end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V105)) end, V12))), case V127 of {'Idris.Prelude.Types.Left', E87} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V129) -> begin (V134 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V130) -> fun (V131) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V130, V131)) end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V132, V133)) end end}, 1, V4)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context':'un--setLinearCheck'(V1, V31, 1, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V134 of {'Idris.Prelude.Types.Left', E89} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V136) -> begin (V140 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Setting options for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V137) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_FnOpt'(V137)) end, fun (V138) -> fun (V139) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_FnOpt'(V138, V139)) end end}, V10)))))))) end, V12))), case V140 of {'Idris.Prelude.Types.Left', E91} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V142) -> begin (V143 = {'Idris.Core.Name.Resolved', V31}), begin (V145 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V144) -> ('un--processFnOpt'(V1, V7, case ('nested--9569-8011--in--un--isNested'(V16, V15, V14, V13, V10, V9, V8, V7, V0, V6, V5, V4, V3, V2, V1, V19, V31, V35, V86, V75, V81, V82, V87, V88, V85, V92, V95, V101, V143, V19)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V143, V144)) end, V10, V12))), case V145 of {'Idris.Prelude.Types.Left', E93} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V147) -> begin (V178 = begin (V148 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1, V12))), case V148 of {'Idris.Prelude.Types.Left', E95} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V150) -> case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V153, V154, V155)) end end end end end, fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V158, V159, V160)) end end end end end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V162)) end end, fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V166, V167, V168, V169)) end end end end end end end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V171)) end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V174, V175, V176)) end end end end end}, fun (V177) -> ('Idris.Idris2.TTImp.TTImp':'un--isTotalityReq'(V177)) end, V10)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, V143, {'Idris.Core.Context.SetTotal', V150}, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V178 of {'Idris.Prelude.Types.Left', E97} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V180) -> begin (V181 = ('Idris.Idris2.Core.Metadata':'un--addTyDecl'(V0, V1, V2, V7, {'Idris.Core.Name.Resolved', V31}, V6, V75, V12))), case V181 of {'Idris.Prelude.Types.Left', E99} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V183) -> begin (V184 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"processType is adding \x{2193}"/utf8>> end, V12))), case V184 of {'Idris.Prelude.Types.Left', E101} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V186) -> begin (V187 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V1, V2, V14, {'Idris.Core.Name.Resolved', V31}, V6, V75, V12))), case V187 of {'Idris.Prelude.Types.Left', E103} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V189) -> begin (V192 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V190, V191)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V75)))), V12))), case V192 of {'Idris.Prelude.Types.Left', E105} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V194) -> begin (V195 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V19, V12))), case V195 of {'Idris.Prelude.Types.Left', E107} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V197) -> begin (V201 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.type"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V198) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V198)) end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V199, V200)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V75)))))))))))) end, V12))), case V201 of {'Idris.Prelude.Types.Left', E109} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V203) -> case ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(V9, 0)) of 1 -> begin (V213 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V204) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V204)) end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V205, V206)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V207) -> fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V207, V208, V209)) end end end, fun (V210) -> fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V210, V211, V212)) end end end}, V19, V12))), case V213 of {'Idris.Prelude.Types.Left', E111} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V215) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V216) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V216)) end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V217, V218)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V219) -> fun (V220) -> fun (V221) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V219, V220, V221)) end end end, fun (V222) -> fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V222, V223, V224)) end end end}, V75, V12)) end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E113} -> (fun (V225) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V19}, V12)) end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processFnOpt'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.TTImp.Inline'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V5)) end end()); {'Idris.TTImp.TTImp.TCInline'} -> (fun () -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.TCInline'}, V6)) end end()); _ -> case V2 of 1 -> case V4 of {'Idris.TTImp.TTImp.Hint', E368} -> (fun (V7) -> fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E369} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E369)); {'Idris.Prelude.Types.Right', E370} -> (fun (V12) -> begin (V41 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V12 of {'Idris.Core.Context.MkDefs', E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V13 end(E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V41 of {'Idris.Prelude.Types.Left', E399} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E399)); {'Idris.Prelude.Types.Right', E400} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E401} -> (fun (V44) -> begin (V48 = begin (V45 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V12, {'Idris.Core.Env.Nil'}, V44))(V8))), case V45 of {'Idris.Prelude.Types.Left', E402} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E402)); {'Idris.Prelude.Types.Right', E403} -> (fun (V47) -> ('un--getRetTy'(V12, V47, V8)) end(E403)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V48 of {'Idris.Prelude.Types.Left', E404} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E404)); {'Idris.Prelude.Types.Right', E405} -> (fun (V50) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V0, V1, V50, V3, V7, 0, V8)) end(E405)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E401)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E400)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E370)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E368)); _ -> case V4 of {'Idris.TTImp.TTImp.Hint', E363} -> (fun (V51) -> fun (V52) -> begin (V62 = begin (V59 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V53, V54, V55)) end end end, fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V56, V57, V58)) end end end}, V3, V52))), case V59 of {'Idris.Prelude.Types.Left', E364} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E364)); {'Idris.Prelude.Types.Right', E365} -> (fun (V61) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding local hint "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V61)))) end, V52)) end(E365)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V62 of {'Idris.Prelude.Types.Left', E366} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E366)); {'Idris.Prelude.Types.Right', E367} -> (fun (V64) -> ('Idris.Idris2.Core.Context':'un--addLocalHint'(V0, V3, V52)) end(E367)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E363)); _ -> case V2 of 1 -> fun (V65) -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E362} -> (fun (V66) -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V3, V66, V65)) end(E362)); _ -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E273} -> (fun (V67) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V65)) end(E273)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V65)) end()); {'Idris.TTImp.TTImp.ForeignFn', E274} -> (fun (V68) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V65)) end(E274)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Invertible'}, V65)) end()); {'Idris.TTImp.TTImp.Totality', E275} -> (fun (V69) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.SetTotal', V69}, V65)) end(E275)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Macro'}, V65)) end()); {'Idris.TTImp.TTImp.SpecArgs', E276} -> (fun (V70) -> begin (V72 = begin (V71 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V71} end), case V72 of {'Idris.Prelude.Types.Left', E277} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E277)); {'Idris.Prelude.Types.Right', E278} -> (fun (V74) -> begin (V103 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V74 of {'Idris.Core.Context.MkDefs', E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> V75 end(E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V65))), case V103 of {'Idris.Prelude.Types.Left', E307} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E307)); {'Idris.Prelude.Types.Right', E308} -> (fun (V105) -> case V105 of {'Idris.Prelude.Types.Just', E309} -> (fun (V106) -> begin (V128 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V74, {'Idris.Core.Env.Nil'}, case V106 of {'Idris.Core.Context.MkGlobalDef', E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V109 end(E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V65))), case V128 of {'Idris.Prelude.Types.Left', E331} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E331)); {'Idris.Prelude.Types.Right', E332} -> (fun (V130) -> begin (V131 = ('nested--7463-6178--in--un--getNamePos'(V2, V70, V3, V1, V0, 0, V130, V65))), case V131 of {'Idris.Prelude.Types.Left', E333} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E333)); {'Idris.Prelude.Types.Right', E334} -> (fun (V133) -> begin (V134 = ('nested--7463-6174--in--un--collectDDeps'(V2, V70, V3, V1, V0, V130, V65))), case V134 of {'Idris.Prelude.Types.Left', E335} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E335)); {'Idris.Prelude.Types.Right', E336} -> (fun (V136) -> begin (V137 = ('nested--7463-6177--in--un--collectSpec'(V2, V70, V3, V1, V0, [], V136, V133, V130, V65))), case V137 of {'Idris.Prelude.Types.Left', E337} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E337)); {'Idris.Prelude.Types.Right', E338} -> (fun (V139) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V140) -> case V140 of {'Idris.Prelude.Types.Left', E339} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E339)); {'Idris.Prelude.Types.Right', E340} -> (fun (V142) -> {'Idris.Prelude.Types.Right', 0} end(E340)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V143) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V106 of {'Idris.Core.Context.MkGlobalDef', E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361} -> (fun (V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164) -> {'Idris.Core.Context.MkGlobalDef', V144, V145, V146, V147, V148, V139, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164} end(E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V143)) end, V65)) end(E338)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E336)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E334)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E309)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V65)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E308)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V165) -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E184} -> (fun (V166) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V165)) end(E184)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V165)) end()); {'Idris.TTImp.TTImp.ForeignFn', E185} -> (fun (V167) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V165)) end(E185)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Invertible'}, V165)) end()); {'Idris.TTImp.TTImp.Totality', E186} -> (fun (V168) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.SetTotal', V168}, V165)) end(E186)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Macro'}, V165)) end()); {'Idris.TTImp.TTImp.SpecArgs', E187} -> (fun (V169) -> begin (V171 = begin (V170 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V170} end), case V171 of {'Idris.Prelude.Types.Left', E188} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V173) -> begin (V202 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V173 of {'Idris.Core.Context.MkDefs', E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217} -> (fun (V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201) -> V174 end(E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V165))), case V202 of {'Idris.Prelude.Types.Left', E218} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V204) -> case V204 of {'Idris.Prelude.Types.Just', E220} -> (fun (V205) -> begin (V227 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V173, {'Idris.Core.Env.Nil'}, case V205 of {'Idris.Core.Context.MkGlobalDef', E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241} -> (fun (V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226) -> V208 end(E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V165))), case V227 of {'Idris.Prelude.Types.Left', E242} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E242)); {'Idris.Prelude.Types.Right', E243} -> (fun (V229) -> begin (V230 = ('nested--7463-6178--in--un--getNamePos'(V2, V169, V3, V1, V0, 0, V229, V165))), case V230 of {'Idris.Prelude.Types.Left', E244} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E244)); {'Idris.Prelude.Types.Right', E245} -> (fun (V232) -> begin (V233 = ('nested--7463-6174--in--un--collectDDeps'(V2, V169, V3, V1, V0, V229, V165))), case V233 of {'Idris.Prelude.Types.Left', E246} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E246)); {'Idris.Prelude.Types.Right', E247} -> (fun (V235) -> begin (V236 = ('nested--7463-6177--in--un--collectSpec'(V2, V169, V3, V1, V0, [], V235, V232, V229, V165))), case V236 of {'Idris.Prelude.Types.Left', E248} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V238) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V239) -> case V239 of {'Idris.Prelude.Types.Left', E250} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E250)); {'Idris.Prelude.Types.Right', E251} -> (fun (V241) -> {'Idris.Prelude.Types.Right', 0} end(E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V242) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V205 of {'Idris.Core.Context.MkGlobalDef', E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272} -> (fun (V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263) -> {'Idris.Core.Context.MkGlobalDef', V243, V244, V245, V246, V247, V238, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263} end(E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V242)) end, V165)) end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V165)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V4 of {'Idris.TTImp.TTImp.Hint', E179} -> (fun (V264) -> fun (V265) -> begin (V275 = begin (V272 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V266) -> fun (V267) -> fun (V268) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V266, V267, V268)) end end end, fun (V269) -> fun (V270) -> fun (V271) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V269, V270, V271)) end end end}, V3, V265))), case V272 of {'Idris.Prelude.Types.Left', E180} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E180)); {'Idris.Prelude.Types.Right', E181} -> (fun (V274) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding local hint "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V274)))) end, V265)) end(E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V275 of {'Idris.Prelude.Types.Left', E182} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V277) -> ('Idris.Idris2.Core.Context':'un--addLocalHint'(V0, V3, V265)) end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E179)); _ -> case V2 of 1 -> fun (V278) -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E178} -> (fun (V279) -> ('Idris.Idris2.Core.Context':'un--addGlobalHint'(V0, V3, V279, V278)) end(E178)); _ -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E89} -> (fun (V280) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V278)) end(E89)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V278)) end()); {'Idris.TTImp.TTImp.ForeignFn', E90} -> (fun (V281) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V278)) end(E90)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Invertible'}, V278)) end()); {'Idris.TTImp.TTImp.Totality', E91} -> (fun (V282) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.SetTotal', V282}, V278)) end(E91)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Macro'}, V278)) end()); {'Idris.TTImp.TTImp.SpecArgs', E92} -> (fun (V283) -> begin (V285 = begin (V284 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V284} end), case V285 of {'Idris.Prelude.Types.Left', E93} -> (fun (V286) -> {'Idris.Prelude.Types.Left', V286} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V287) -> begin (V316 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V287 of {'Idris.Core.Context.MkDefs', E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122} -> (fun (V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315) -> V288 end(E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V278))), case V316 of {'Idris.Prelude.Types.Left', E123} -> (fun (V317) -> {'Idris.Prelude.Types.Left', V317} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V318) -> case V318 of {'Idris.Prelude.Types.Just', E125} -> (fun (V319) -> begin (V341 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V287, {'Idris.Core.Env.Nil'}, case V319 of {'Idris.Core.Context.MkGlobalDef', E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146} -> (fun (V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340) -> V322 end(E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V278))), case V341 of {'Idris.Prelude.Types.Left', E147} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V343) -> begin (V344 = ('nested--7463-6178--in--un--getNamePos'(V2, V283, V3, V1, V0, 0, V343, V278))), case V344 of {'Idris.Prelude.Types.Left', E149} -> (fun (V345) -> {'Idris.Prelude.Types.Left', V345} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V346) -> begin (V347 = ('nested--7463-6174--in--un--collectDDeps'(V2, V283, V3, V1, V0, V343, V278))), case V347 of {'Idris.Prelude.Types.Left', E151} -> (fun (V348) -> {'Idris.Prelude.Types.Left', V348} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V349) -> begin (V350 = ('nested--7463-6177--in--un--collectSpec'(V2, V283, V3, V1, V0, [], V349, V346, V343, V278))), case V350 of {'Idris.Prelude.Types.Left', E153} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V352) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V353) -> case V353 of {'Idris.Prelude.Types.Left', E155} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V355) -> {'Idris.Prelude.Types.Right', 0} end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V356) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V319 of {'Idris.Core.Context.MkGlobalDef', E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177} -> (fun (V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377) -> {'Idris.Core.Context.MkGlobalDef', V357, V358, V359, V360, V361, V352, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377} end(E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V356)) end, V278)) end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V278)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V378) -> case V4 of {'Idris.TTImp.TTImp.GlobalHint', E0} -> (fun (V379) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"%globalhint is not valid in local definitions"/utf8>>}, V378)) end(E0)); {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V378)) end()); {'Idris.TTImp.TTImp.ForeignFn', E1} -> (fun (V380) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Inline'}, V378)) end(E1)); {'Idris.TTImp.TTImp.Invertible'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Invertible'}, V378)) end()); {'Idris.TTImp.TTImp.Totality', E2} -> (fun (V381) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.SetTotal', V381}, V378)) end(E2)); {'Idris.TTImp.TTImp.Macro'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V3, {'Idris.Core.Context.Macro'}, V378)) end()); {'Idris.TTImp.TTImp.SpecArgs', E3} -> (fun (V382) -> begin (V384 = begin (V383 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V383} end), case V384 of {'Idris.Prelude.Types.Left', E4} -> (fun (V385) -> {'Idris.Prelude.Types.Left', V385} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V386) -> begin (V415 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V386 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414) -> V387 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V378))), case V415 of {'Idris.Prelude.Types.Left', E34} -> (fun (V416) -> {'Idris.Prelude.Types.Left', V416} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V417) -> case V417 of {'Idris.Prelude.Types.Just', E36} -> (fun (V418) -> begin (V440 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V386, {'Idris.Core.Env.Nil'}, case V418 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439) -> V421 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V378))), case V440 of {'Idris.Prelude.Types.Left', E58} -> (fun (V441) -> {'Idris.Prelude.Types.Left', V441} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V442) -> begin (V443 = ('nested--7463-6178--in--un--getNamePos'(V2, V382, V3, V1, V0, 0, V442, V378))), case V443 of {'Idris.Prelude.Types.Left', E60} -> (fun (V444) -> {'Idris.Prelude.Types.Left', V444} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V445) -> begin (V446 = ('nested--7463-6174--in--un--collectDDeps'(V2, V382, V3, V1, V0, V442, V378))), case V446 of {'Idris.Prelude.Types.Left', E62} -> (fun (V447) -> {'Idris.Prelude.Types.Left', V447} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V448) -> begin (V449 = ('nested--7463-6177--in--un--collectSpec'(V2, V382, V3, V1, V0, [], V448, V445, V442, V378))), case V449 of {'Idris.Prelude.Types.Left', E64} -> (fun (V450) -> {'Idris.Prelude.Types.Left', V450} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V451) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V452) -> case V452 of {'Idris.Prelude.Types.Left', E66} -> (fun (V453) -> {'Idris.Prelude.Types.Left', V453} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V454) -> {'Idris.Prelude.Types.Right', 0} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V455) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V3, case V418 of {'Idris.Core.Context.MkGlobalDef', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476) -> {'Idris.Core.Context.MkGlobalDef', V456, V457, V458, V459, V460, V451, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476} end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V455)) end, V378)) end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V378)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--initDef'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, V4, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.None'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E2 | E3] -> (fun (V12, V13) -> case V12 of {'Idris.TTImp.TTImp.ExternFn'} -> (fun () -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V18, V5, V6, V14))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.ExternDef', V21}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.TTImp.TTImp.ForeignFn', E8} -> (fun (V22) -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, V0, V27, V5, V6, V23))), case V28 of {'Idris.Prelude.Types.Left', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V30) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V31) -> fun (V32) -> ('un--getFnString'(V1, V2, V3, V31, V32)) end end, V22, [], V23))), case V33 of {'Idris.Prelude.Types.Left', E13} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.ForeignDef', V30, V35}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('un--initDef'(V0, V1, V2, V3, V4, V5, V6, V13)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getRetTy'(V0, V1, V2) -> case V1 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> begin (V11 = (((V6(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 0}))))(V2))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> ('un--getRetTy'(V0, V13, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'(V1)), <<"Can only add hints for concrete return types"/utf8>>}, V2)) end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V14, V15, V16, V17, V18) -> {'Idris.Prelude.Types.Right', V15} end(E10, E11, E12, E13, E14)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'(V1)), <<"Can only add hints for concrete return types"/utf8>>}, V2)) end.
'un--getFnString'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.TTImp.TTImp.IPrimVal', E11, E12} -> (fun (V5, V6) -> case V6 of {'Idris.Core.TT.Str', E24} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E24)); _ -> begin (V8 = ('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[foreign]"/utf8>>}, V4))), case V8 of {'Idris.Prelude.Types.Left', E13} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3))), begin (V12 = ('Idris.Idris2.Core.Normalise':'un--gnf'([], {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.PrimVal', V11, {'Idris.Core.TT.StringType'}}))), begin (V13 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V10, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V3, V12, V4))), case V13 of {'Idris.Prelude.Types.Left', E15} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E17} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V19, {'Idris.Core.Env.Nil'}, V15))(V4))), case V20 of {'Idris.Prelude.Types.Left', E19} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V22) -> case V22 of {'Idris.Core.Value.NPrimVal', E21, E22} -> (fun (V23, V24) -> case V24 of {'Idris.Core.TT.Str', E23} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V25} end(E23)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V11, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V4)) end end(E21, E22)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V11, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V4)) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12)); _ -> begin (V26 = ('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[foreign]"/utf8>>}, V4))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V3))), begin (V30 = ('Idris.Idris2.Core.Normalise':'un--gnf'([], {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.PrimVal', V29, {'Idris.Core.TT.StringType'}}))), begin (V31 = ('Idris.Idris2.TTImp.Elab':'un--checkTerm'([], V0, V1, V2, V28, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V3, V30, V4))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> begin (V35 = begin (V34 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> begin (V38 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V37, {'Idris.Core.Env.Nil'}, V33))(V4))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> case V40 of {'Idris.Core.Value.NPrimVal', E8, E9} -> (fun (V41, V42) -> case V42 of {'Idris.Core.TT.Str', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Right', V43} end(E10)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V29, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V4)) end end(E8, E9)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V29, <<"%foreign calling convention must evaluate to a String"/utf8>>}, V4)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--findInferrable'(V0, V1, V2) -> ('nested--9061-7474--in--un--fi'(V2, V1, V0, 0, 0, [], [], V2)).
