-module('Idris.Idris2.Idris.ModTree').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--filterUsedByMods-1873'/4,
  'case--buildDeps-1678'/8,
  'case--buildMods-1605'/9,
  'case--case block in buildMod-1495'/15,
  'case--case block in case block in buildMod-1316'/20,
  'case--case block in buildMod-1230'/18,
  'case--buildMod-1130'/11,
  'case--fnameModified-1065'/2,
  'case--getBuildMods-962'/9,
  'case--mkBuildMods-845'/6,
  'case--case block in mkModTree-712'/9,
  'case--case block in mkModTree-631'/8,
  'case--mkModTree-581'/8,
  'nested--18746-1810--in--un--getMods'/7,
  'nested--18746-1811--in--un--dropLater'/5,
  'dn--un--show_Show_BuildMod'/1,
  'dn--un--showPrec_Show_BuildMod'/2,
  'dn--un--__Impl_Show_BuildMod'/0,
  'un--mkModTree'/7,
  'un--mkBuildMods'/3,
  'un--loadModules'/7,
  'un--getBuildMods'/6,
  'un--getAllBuildMods'/5,
  'un--fnameModified'/2,
  'un--filterUsedByMods'/2,
  'un--buildMods'/7,
  'un--buildMod'/8,
  'un--buildDeps'/7,
  'un--buildAll'/4
]).
'case--filterUsedByMods-1873'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('un--filterUsedByMods'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V6) -> case V6 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V4)))), V5)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--buildDeps-1678'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V5, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V5))(V8))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V16 = begin (V15 = ('erlang':'put'(V3, ('Idris.Idris2.Core.Metadata':'un--initMetadata'())))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V5, V0, <<"ttc"/utf8>>, V8))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" from "/utf8>>, V0)))))) end))(V8))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Idris.ProcessIdr':'un--readAsMain'(V5, V2, V4, V21, V8))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V5, V0, <<"ttm"/utf8>>, V8))), case V28 of {'Idris.Prelude.Types.Left', E12} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Context.Log':'un--log'(V5, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V30)))) end))(V8))), case V31 of {'Idris.Prelude.Types.Left', E14} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Metadata':'un--readFromTTM'(V3, V30, V8))), case V34 of {'Idris.Prelude.Types.Left', E16} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V36) -> {'Idris.Prelude.Types.Right', []} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V37) -> {'Idris.Prelude.Types.Right', V7} end end.
'case--buildMods-1605'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> ('un--buildMods'(V7, V6, V5, V4, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V3)), V2, V1)); _ -> fun (V9) -> {'Idris.Prelude.Types.Right', V8} end end.
'case--case block in buildMod-1495'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V28)) end end}, fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V29, V15)) end))([V13 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V16)) end, V14))])) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in buildMod-1316'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of [] -> fun (V20) -> begin (V21 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V20))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V24) -> fun (V25) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V24, V25)) end end, V10))(V20))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> {'Idris.Prelude.Types.Right', V10} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V29) -> begin (V30 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V29))), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> begin (V35 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V33) -> fun (V34) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V33, V34)) end end, V19))(V29))), case V35 of {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V10, V19))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in buildMod-1230'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V15 of 0 -> begin (V21 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'('erased', V2)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--slash'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'('erased', V1)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"Building"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_ModuleIdent'('erased', case V0 of {'Idris.Idris.ModTree.MkBuildMod', E0, E1, E2} -> (fun (V18, V19, V20) -> V19 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V7))))))))))), fun (V22) -> begin (V23 = ('Idris.Idris2.Idris.ProcessIdr':'un--process'(V6, V17, V16, V5, V4, V21, V7, V22))), case V23 of {'Idris.Prelude.Types.Left', E3} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V25) -> case V25 of [] -> begin (V26 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V22))), case V26 of {'Idris.Prelude.Types.Left', E9} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V28) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V29) -> fun (V30) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V29, V30)) end end, V10))(V22))), case V31 of {'Idris.Prelude.Types.Left', E11} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V10} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V34 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V22))), case V34 of {'Idris.Prelude.Types.Left', E5} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V36) -> begin (V39 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V37) -> fun (V38) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V37, V38)) end end, V25))(V22))), case V39 of {'Idris.Prelude.Types.Left', E7} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V10, V25))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; 1 -> fun (V42) -> begin (V43 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V42))), case V43 of {'Idris.Prelude.Types.Left', E13} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V45) -> begin (V48 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V46) -> fun (V47) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V46, V47)) end end, V10))(V42))), case V48 of {'Idris.Prelude.Types.Left', E15} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V50) -> {'Idris.Prelude.Types.Right', V10} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--buildMod-1130'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> begin (V20 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V14) -> begin (V15 = ('un--fnameModified'(V8, V14))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V17}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, V13))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('un--fnameModified'(V7, V13))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V26) -> fun (V27) -> begin (V28 = ('un--fnameModified'(V26, V27))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V26, V30}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Core.Directory':'un--toLocalFile'(V31)) end, V12)), []))(V13))), case V32 of {'Idris.Prelude.Types.Left', E10} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V34) -> begin (V50 = case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V35) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V48)) end end}, fun (V49) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V49, V35)) end))([V25 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V36) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V36)) end, V34))])) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V51 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V13))), case V51 of {'Idris.Prelude.Types.Left', E13} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V13))), case V54 of {'Idris.Prelude.Types.Left', E15} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V56) -> begin (V58 = begin (V57 = ('erlang':'put'(V5, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'())))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E17} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V60) -> case V50 of 0 -> begin (V64 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'('erased', V2)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--slash'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'('erased', V1)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"Building"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_ModuleIdent'('erased', case V0 of {'Idris.Idris.ModTree.MkBuildMod', E19, E20, E21} -> (fun (V61, V62, V63) -> V62 end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V7))))))))))), begin (V65 = ('Idris.Idris2.Idris.ProcessIdr':'un--process'(V6, V56, V53, V5, V4, V64, V7, V13))), case V65 of {'Idris.Prelude.Types.Left', E22} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V67) -> case V67 of [] -> begin (V68 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V13))), case V68 of {'Idris.Prelude.Types.Left', E28} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V70) -> begin (V73 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V71) -> fun (V72) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V71, V72)) end end, V11))(V13))), case V73 of {'Idris.Prelude.Types.Left', E30} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V75) -> {'Idris.Prelude.Types.Right', V11} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V76 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V13))), case V76 of {'Idris.Prelude.Types.Left', E24} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V78) -> begin (V81 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V79) -> fun (V80) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V79, V80)) end end, V67))(V13))), case V81 of {'Idris.Prelude.Types.Left', E26} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V83) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V11, V67))} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> begin (V84 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarnings'(V6, V4, V5, V13))), case V84 of {'Idris.Prelude.Types.Left', E32} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V86) -> begin (V89 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V87) -> fun (V88) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V4, V5, V87, V88)) end end, V11))(V13))), case V89 of {'Idris.Prelude.Types.Left', E34} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V91) -> {'Idris.Prelude.Types.Right', V11} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--fnameModified-1065'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V2))} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V4}, V5)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getBuildMods-962'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> {'Idris.Prelude.Types.Right', []} end; 1 -> fun (V10) -> begin (V11 = (('un--mkModTree'(V4, V3, V5, V2, [], {'Idris.Prelude.Types.Just', V0}, V7))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.ModTree.DoneMod'}, ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'('erased')), V10))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.ModTree.BuildOrder'}, [], V10))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = (('un--mkBuildMods'(V16, V19, V13))(V10))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V24 = begin (V23 = ('erlang':'get'(V19))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'('erased', V26))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkBuildMods-845'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V9) -> ('un--mkBuildMods'(V2, V1, V9)) end, case V0 of {'Idris.Idris.ModTree.MkModTree', E1, E2, E3} -> (fun (V10, V11, V12) -> V12 end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V31 = begin (V30 = ('erlang':'put'(V1, [{'Idris.Idris.ModTree.MkBuildMod', V3, case V0 of {'Idris.Idris.ModTree.MkModTree', E8, E9, E10} -> (fun (V20, V21, V22) -> V20 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V23) -> case V23 of {'Idris.Idris.ModTree.MkModTree', E11, E12, E13} -> (fun (V24, V25, V26) -> V24 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V0 of {'Idris.Idris.ModTree.MkModTree', E14, E15, E16} -> (fun (V27, V28, V29) -> V29 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} | V19]))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E17} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V33) -> begin (V35 = begin (V34 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E19} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V37) -> begin (V38 = ('erlang':'put'(V2, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V37))))), {'Idris.Prelude.Types.Right', V38} end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mkModTree-712'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> begin (V13 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V10) -> ('Idris.Idris2.Core.Directory':'un--nsToSource'(V6, V3, V0, V10)) end end, fun () -> fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V11} end end end, V1))(V9))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Idris.ProcessIdr':'un--readHeader'(V6, V5, V15, V9))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V29 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> case V19 of {'Idris.Idris.Syntax.MkImport', E4, E5, E6, E7} -> (fun (V20, V21, V22, V23) -> V22 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V18 of {'Idris.Idris.Syntax.MkModule', E8, E9, E10, E11, E12} -> (fun (V24, V25, V26, V27, V28) -> V26 end(E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V30) -> ('un--mkModTree'(V6, V5, V4, V3, [V0 | V2], {'Idris.Prelude.Types.Nothing'}, V30)) end, V29, []))(V9))), case V31 of {'Idris.Prelude.Types.Left', E13} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V33) -> begin (V34 = {'Idris.Idris.ModTree.MkModTree', V0, {'Idris.Prelude.Types.Just', V15}, V33}), begin (V36 = begin (V35 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E15} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'put'(V4, [{'Idris.Builtin.MkPair', V0, V34} | V38]))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E17} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Right', V34} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E19} -> (fun (V43) -> fun (V44) -> {'Idris.Prelude.Types.Right', V43} end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mkModTree-631'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Core.CyclicImports', E0} -> (fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V7, V9)) end end(E0)); {'Idris.Core.Core.ParseFail', E1, E2} -> (fun (V10, V11) -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V7, V12)) end end(E1, E2)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.ModTree.MkModTree', V0, {'Idris.Prelude.Types.Nothing'}, []}} end end.
'case--mkModTree-581'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.CyclicImports', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V2, [V0 | []]))}, V8)) end; 1 -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> (('case--case block in mkModTree-712'(V0, V1, V2, V3, V4, V5, V6, V14, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V17, V18)) end end}, V0, V14))))(V10)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V19) -> case V19 of {'Idris.Core.Core.CyclicImports', E2} -> (fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V19, V21)) end end(E2)); {'Idris.Core.Core.ParseFail', E3, E4} -> (fun (V22, V23) -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V19, V24)) end end(E3, E4)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.ModTree.MkModTree', V0, {'Idris.Prelude.Types.Nothing'}, []}} end end end, V9)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18746-1810--in--un--getMods'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', V5} end; [E0 | E1] -> (fun (V8, V9) -> fun (V10) -> begin (V11 = ('un--getBuildMods'(V3, V1, V4, V5, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> (('nested--18746-1810--in--un--getMods'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V13, V5)), V9))(V10)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18746-1811--in--un--dropLater'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> [V5 | ('nested--18746-1811--in--un--dropLater'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(case V7 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V8, V9, V10) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.Idris.ModTree.MkBuildMod', E5, E6, E7} -> (fun (V11, V12, V13) -> V11 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V6))))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_BuildMod'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.ModTree.MkBuildMod', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V4)) end, case V0 of {'Idris.Idris.ModTree.MkBuildMod', E3, E4, E5} -> (fun (V5, V6, V7) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), <<"]"/utf8>>)))))).
'dn--un--showPrec_Show_BuildMod'(V0, V1) -> ('dn--un--show_Show_BuildMod'(V1)).
'dn--un--__Impl_Show_BuildMod'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_BuildMod'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_BuildMod'(V1, V2)) end end}.
'un--mkModTree'(V0, V1, V2, V3, V4, V5, V6) -> ('case--mkModTree-581'(V6, V5, V4, V3, V2, V1, V0, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V9, V10)) end end}, V6, V4)))).
'un--mkBuildMods'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V4) -> fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('case--mkBuildMods-845'(V2, V1, V0, V4, V9, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', V4, V9))))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V2 of {'Idris.Idris.ModTree.MkModTree', E2, E3, E4} -> (fun (V10, V11, V12) -> V11 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--loadModules'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))(V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'put'(V2, ('Idris.Idris2.Core.Metadata':'un--initMetadata'())))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V17) -> fun (V18) -> ('Idris.Idris2.Idris.ProcessIdr':'un--readModule'(V0, V3, V1, 0, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0, V17, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V17)), V18)) end end, V5))(V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getBuildMods'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.ModTree.AllMods'}, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V32 = (('Idris.Idris2.Core.Directory':'un--pathToNS'(case V11 of {'Idris.Core.Options.MkDirs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V11 of {'Idris.Core.Options.MkDirs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V23 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))(V5))), case V32 of {'Idris.Prelude.Types.Left', E24} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V34) -> (('case--getBuildMods-962'(V4, V3, V2, V1, V0, V8, V11, V34, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V37, V38)) end end}, V34, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Idris.ModTree.MkBuildMod', E26, E27, E28} -> (fun (V40, V41, V42) -> V41 end(E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3))))))(V5)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAllBuildMods'(V0, V1, V2, V3, V4) -> begin (V5 = (('nested--18746-1810--in--un--getMods'(V3, V2, V1, V0, ('Idris.Idris2.Core.FC':'un--toplevelFC'()), [], V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('nested--18746-1811--in--un--dropLater'(V3, V2, V1, V0, V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fnameModified'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fileModifiedTime'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Right', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V33))} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V34}, V1)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--filterUsedByMods'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> ('case--filterUsedByMods-1873'(V2, V3, V1, ('Idris.Idris2.Data.List':'un--partition'('erased', fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V7, V8)) end end}, V2, case V4 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V9, V10, V11) -> V11 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--buildMods'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V8, V9) -> fun (V10) -> begin (V11 = ('un--buildMod'(V0, V1, V2, V3, V4, V5, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V13 of [] -> (('un--buildMods'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V4)), V5, V9))(V10)); _ -> {'Idris.Prelude.Types.Right', V13} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--buildMod'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--lazyActive'(V0, 0, V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V0, 0, V7))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V23 = case V6 of {'Idris.Idris.ModTree.MkBuildMod', E8, E9, E10} -> (fun (V20, V21, V22) -> V20 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V24 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V23, <<"ttc"/utf8>>, V7))), case V24 of {'Idris.Prelude.Types.Left', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V26) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Directory':'un--nsToPath'(V0, V3, V27, V28)) end end, case V6 of {'Idris.Idris.ModTree.MkBuildMod', E13, E14, E15} -> (fun (V29, V30, V31) -> V31 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V7))), case V32 of {'Idris.Prelude.Types.Left', E16} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V34) -> (('case--buildMod-1130'(V6, V5, V4, V3, V2, V1, V0, V23, V26, V34, ('Idris.Idris2.Libraries.Utils.Either':'un--partitionEithers'('erased', 'erased', V34))))(V7)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildDeps'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--getBuildMods'(V0, V4, ('Idris.Idris2.Core.FC':'un--toplevelFC'()), [], V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = (('un--buildMods'(V0, V1, V4, ('Idris.Idris2.Core.FC':'un--toplevelFC'()), (1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V9)), V9))(V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> case V12 of [] -> begin (V13 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))(V6))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V20 = begin (V19 = ('erlang':'put'(V2, ('Idris.Idris2.Core.Metadata':'un--initMetadata'())))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttc"/utf8>>, V6))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" from "/utf8>>, V5)))))) end))(V6))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Idris.ProcessIdr':'un--readAsMain'(V0, V3, V1, V25, V6))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttm"/utf8>>, V6))), case V32 of {'Idris.Prelude.Types.Left', E16} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V34) -> begin (V35 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V34)))) end))(V6))), case V35 of {'Idris.Prelude.Types.Left', E18} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Metadata':'un--readFromTTM'(V2, V34, V6))), case V38 of {'Idris.Prelude.Types.Left', E20} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V40) -> {'Idris.Prelude.Types.Right', []} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V12} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildAll'(V0, V1, V2, V3) -> ('un--buildMods'(V0, V1, V2, ('Idris.Idris2.Core.FC':'un--toplevelFC'()), (1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V3)), V3)).
