-module('Idris.Idris2.Idris.ModTree').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--filterUsedByMods-5382'/4,
  'case--buildMod-4508'/13,
  'nested--12881-5320--in--un--getMods'/8,
  'nested--12881-5321--in--un--dropLater'/5,
  'dn--un--show_Show_BuildMod'/1,
  'dn--un--showPrec_Show_BuildMod'/2,
  'dn--un--__Impl_Show_BuildMod'/0,
  'un--mkModTree'/8,
  'un--mkBuildMods'/3,
  'un--loadModules'/8,
  'un--getBuildMods'/6,
  'un--getAllBuildMods'/5,
  'un--fnameModified'/2,
  'un--filterUsedByMods'/2,
  'un--buildMods'/8,
  'un--buildMod'/8,
  'un--buildDeps'/7,
  'un--buildAll'/5
]).
'case--filterUsedByMods-5382'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(V4, ('un--filterUsedByMods'(('Idris.Idris2.Prelude.Types.List':'un--++'(V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V6) -> case V6 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V4)))), V5)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--buildMod-4508'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> begin (V16 = (('Idris.Idris2.Core.Core':'dn--un--breakpoint_Catchable_Core_Error'(fun (V15) -> ('un--fnameModified'(V9, V15)) end))(V12))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = ('un--fnameModified'(V7, V12))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V22) -> fun (V23) -> begin (V24 = ('un--fnameModified'(V22, V23))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V22, V26}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V27) -> ('Idris.Idris2.Core.Directory':'un--toLocalFile'(V27)) end, V14)), [], V12))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> begin (V61 = case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V31) -> 1 end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V32) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V44)) end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V48, V49, V50, V51)) end end end end end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V53)) end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V56, V57, V58)) end end end end end}, fun (V59) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Integer'(V59, V32)) end, [V21 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V60) -> ('Idris.Idris2.Builtin':'un--snd'(V60)) end, V30))])) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V62 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V12))), case V62 of {'Idris.Prelude.Types.Left', E12} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalIdrSrc', V8})), V12))), case V65 of {'Idris.Prelude.Types.Left', E14} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V67) -> begin (V69 = begin (V68 = ('erlang':'put'(V5, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'())))), {'Idris.Prelude.Types.Right', V68} end), case V69 of {'Idris.Prelude.Types.Left', E16} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V71) -> begin (V77 = case V61 of 1 -> begin (V72 = ('Idris.Idris2.Prelude.Types':'un--minus'(('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V1)))), ('Idris.Idris2.Prelude.Types.String':'un--length'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2))))))), begin (V76 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Libraries.Data.String.Extra':'un--replicate'(V72, $ )))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'(V2)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--slash'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'(V1)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(<<"Building"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name.Namespace':'dn--un--pretty_Pretty_ModuleIdent'(case V0 of {'Idris.Idris.ModTree.MkBuildMod', E18, E19, E20} -> (fun (V73, V74, V75) -> V74 end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--parens'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V7))))))))))), ('Idris.Idris2.Idris.ProcessIdr':'un--process'(V6, V67, V64, V5, V4, V76, V7, V8, V12)) end end; 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V77 of {'Idris.Prelude.Types.Left', E21} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V79) -> begin (V81 = begin (V80 = ('erlang':'get'(V6))), {'Idris.Prelude.Types.Right', V80} end), case V81 of {'Idris.Prelude.Types.Left', E23} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V83) -> begin (V84 = ('Idris.Idris2.Idris.REPL.Common':'un--emitWarningsAndErrors'(V6, V4, V5, case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V79))()) of 1 -> V13; 0 -> V79; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12))), case V84 of {'Idris.Prelude.Types.Left', E25} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V86) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V86, case (('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V79))()) of 1 -> V13; 0 -> ('Idris.Idris2.Prelude.Types.List':'un--++'(V13, V79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12881-5320--in--un--getMods'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', V5}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--getBuildMods'(V3, V1, V4, V5, V8, V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> ('nested--12881-5320--in--un--getMods'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types.List':'un--++'(V12, V5)), V9, V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12881-5321--in--un--dropLater'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> [V5 | ('nested--12881-5321--in--un--dropLater'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--filter'(fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(case V7 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V8, V9, V10) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V5 of {'Idris.Idris.ModTree.MkBuildMod', E5, E6, E7} -> (fun (V11, V12, V13) -> V11 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V6))))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_BuildMod'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.ModTree.MkBuildMod', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V4)) end, case V0 of {'Idris.Idris.ModTree.MkBuildMod', E3, E4, E5} -> (fun (V5, V6, V7) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), <<"]"/utf8>>)))))).
'dn--un--showPrec_Show_BuildMod'(V0, V1) -> ('dn--un--show_Show_BuildMod'(V1)).
'dn--un--__Impl_Show_BuildMod'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_BuildMod'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_BuildMod'(V1, V2)) end end}.
'un--mkModTree'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V10, V11)) end end}, V6, V4)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CyclicImports', ('Idris.Idris2.Prelude.Types.List':'un--++'(V4, [V6 | []]))}, V7)); 0 -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V19, V20)) end end}, V6, V16)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V24 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V21) -> ('Idris.Idris2.Core.Directory':'un--nsToSource'(V0, V3, V6, V21)) end end, fun () -> fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', V22} end end end, V5))(V12))), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Idris.ProcessIdr':'un--readHeader'(V0, V1, V26, V6, V12))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V40 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V30) -> case V30 of {'Idris.Idris.Syntax.MkImport', E6, E7, E8, E9} -> (fun (V31, V32, V33, V34) -> V33 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V29 of {'Idris.Idris.Syntax.MkModule', E10, E11, E12, E13, E14} -> (fun (V35, V36, V37, V38, V39) -> V37 end(E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V43 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V41) -> fun (V42) -> ('un--mkModTree'(V0, V1, V2, V3, [V6 | V4], {'Idris.Prelude.Types.Nothing'}, V41, V42)) end end, V40, [], V12))), case V43 of {'Idris.Prelude.Types.Left', E15} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V45) -> begin (V46 = {'Idris.Idris.ModTree.MkModTree', V6, {'Idris.Prelude.Types.Just', V26}, V45}), begin (V48 = begin (V47 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E17} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V50) -> begin (V52 = begin (V51 = ('erlang':'put'(V2, [{'Idris.Builtin.MkPair', V6, V46} | V50]))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E19} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V54) -> {'Idris.Prelude.Types.Right', V46} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E21} -> (fun (V55) -> {'Idris.Prelude.Types.Right', V55} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V56) -> fun (V57) -> case V56 of {'Idris.Core.Core.CyclicImports', E22} -> (fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V56, V57)) end(E22)); {'Idris.Core.Core.ParseFail', E23, E24} -> (fun (V59, V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V56, V57)) end(E23, E24)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.ModTree.MkModTree', V6, {'Idris.Prelude.Types.Nothing'}, []}} end end end, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkBuildMods'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end end, fun () -> fun (V4) -> fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V4, V9)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Right', 0} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V11) -> ('un--mkBuildMods'(V0, V1, V11)) end, case V2 of {'Idris.Idris.ModTree.MkModTree', E3, E4, E5} -> (fun (V12, V13, V14) -> V14 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V33 = begin (V32 = ('erlang':'put'(V1, [{'Idris.Idris.ModTree.MkBuildMod', V4, case V2 of {'Idris.Idris.ModTree.MkModTree', E10, E11, E12} -> (fun (V22, V23, V24) -> V22 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V25) -> case V25 of {'Idris.Idris.ModTree.MkModTree', E13, E14, E15} -> (fun (V26, V27, V28) -> V26 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V2 of {'Idris.Idris.ModTree.MkModTree', E16, E17, E18} -> (fun (V29, V30, V31) -> V31 end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} | V21]))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E19} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V35) -> begin (V37 = begin (V36 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E21} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V39) -> begin (V40 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V4, 0, V39))))), {'Idris.Prelude.Types.Right', V40} end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V2 of {'Idris.Idris.ModTree.MkModTree', E23, E24, E25} -> (fun (V41, V42, V43) -> V42 end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--loadModules'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0, V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'put'(V2, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalPkgSrc', V5}))))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Idris.ProcessIdr':'un--readModule'(V0, V3, V1, 1, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 1, V18, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V18)), V19)) end end, V6, V7)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getBuildMods'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.ModTree.AllMods'}, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V4, V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V14, V15)) end end}, V11, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> case V16 of {'Idris.Idris.ModTree.MkBuildMod', E14, E15, E16} -> (fun (V17, V18, V19) -> V18 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)))) of 1 -> {'Idris.Prelude.Types.Right', []}; 0 -> begin (V20 = ('un--mkModTree'(V0, V1, V8, V2, [], {'Idris.Prelude.Types.Just', V4}, V11, V5))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.ModTree.DoneMod'}, ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()), V5))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.ModTree.BuildOrder'}, [], V5))), case V26 of {'Idris.Prelude.Types.Left', E8} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V28) -> begin (V29 = (('un--mkBuildMods'(V25, V28, V22))(V5))), case V29 of {'Idris.Prelude.Types.Left', E10} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V28))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E12} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V35) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'(V35))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAllBuildMods'(V0, V1, V2, V3, V4) -> begin (V5 = ('nested--12881-5320--in--un--getMods'(V3, V2, V1, V0, {'Idris.Core.FC.EmptyFC'}, [], V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('nested--12881-5321--in--un--dropLater'(V3, V2, V1, V0, V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fnameModified'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fileModifiedTime'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Right', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V33))} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V34}, V1)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--filterUsedByMods'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> ('case--filterUsedByMods-5382'(V2, V3, V1, ('Idris.Idris2.Data.List':'un--partition'(fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V7, V8)) end end}, V2, case V4 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V9, V10, V11) -> V11 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--buildMods'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = ('un--buildMod'(V0, V1, V2, V3, V4, V5, V8, V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> case V12 of [] -> ('un--buildMods'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V4)), V5, V9, V7)); _ -> {'Idris.Prelude.Types.Right', V12} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--buildMod'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0, V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--lazyActive'(V0, 1, V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V0, 1, V7))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V23 = case V6 of {'Idris.Idris.ModTree.MkBuildMod', E8, E9, E10} -> (fun (V20, V21, V22) -> V20 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V27 = case V6 of {'Idris.Idris.ModTree.MkBuildMod', E11, E12, E13} -> (fun (V24, V25, V26) -> V25 end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V28 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V23, <<"ttc"/utf8>>, V7))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Directory':'un--nsToPath'(V0, V3, V31, V32)) end end, case V6 of {'Idris.Idris.ModTree.MkBuildMod', E16, E17, E18} -> (fun (V33, V34, V35) -> V35 end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V7))), case V36 of {'Idris.Prelude.Types.Left', E19} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V38) -> ('case--buildMod-4508'(V6, V5, V4, V3, V2, V1, V0, V23, V27, V30, V38, ('Idris.Idris2.Data.Either':'un--partitionEithers'(V38)), V7)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildDeps'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--getBuildMods'(V0, V4, {'Idris.Core.FC.EmptyFC'}, [], V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('un--buildMods'(V0, V1, V4, {'Idris.Core.FC.EmptyFC'}, (1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V9)), V9, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> case V12 of [] -> begin (V13 = ('Idris.Idris2.Core.Context':'un--clearCtxt'(V0, V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0, V6))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V5, V6))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V23 = begin (V22 = ('erlang':'put'(V2, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalIdrSrc', V21}))))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttc"/utf8>>, V6))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V28)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" from "/utf8>>, V5)))))) end, V6))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Idris.ProcessIdr':'un--readAsMain'(V0, V3, V1, V28, V6))), case V32 of {'Idris.Prelude.Types.Left', E16} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V0, V5, <<"ttm"/utf8>>, V6))), case V35 of {'Idris.Prelude.Types.Left', E18} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"import"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Reloading "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V37)))) end, V6))), case V38 of {'Idris.Prelude.Types.Left', E20} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Metadata':'un--readFromTTM'(V2, V37, V6))), case V41 of {'Idris.Prelude.Types.Left', E22} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V43) -> {'Idris.Prelude.Types.Right', []} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V12} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--buildAll'(V0, V1, V2, V3, V4) -> ('un--buildMods'(V0, V1, V2, {'Idris.Core.FC.EmptyFC'}, (1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V3)), V3, V4)).
