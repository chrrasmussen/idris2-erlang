-module('Idris.Idris2.TTImp.Utils').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--uniqueName-1256'/4,
  'case--uniqueName,next-1226'/5,
  'case--uniqueName,usedName-1203'/4,
  'case--case block in nameNum-1157'/4,
  'case--nameNum-1129'/2,
  'case--case block in substNames\x{27}-864'/5,
  'case--substNames\x{27}-847'/5,
  'case--case block in substNames\x{27}-809'/5,
  'case--substNames\x{27}-792'/5,
  'case--findAllNames-664'/7,
  'case--findAllNames-626'/7,
  'case--findAllNames-601'/4,
  'case--findBindableNames-509'/9,
  'case--findBindableNames-463'/9,
  'case--findBindableNames-430'/5,
  'case--getUnique-406'/3,
  'nested--7351-1191--in--un--usedName'/4,
  'nested--7351-1192--in--un--next'/4,
  'un--uniqueName'/4,
  'un--substNamesTy\x{27}'/4,
  'un--substNamesDecl\x{27}'/4,
  'un--substNamesData\x{27}'/4,
  'un--substNamesClause\x{27}'/4,
  'un--substNamesClause'/3,
  'un--substNames\x{27}'/4,
  'un--substNames'/3,
  'un--substLocTy'/2,
  'un--substLocDecl'/2,
  'un--substLocData'/2,
  'un--substLocClause'/2,
  'un--substLoc'/2,
  'un--substBindVars'/3,
  'un--nameNum'/1,
  'un--getUnique'/2,
  'un--findIBindVars'/1,
  'un--findBindableNames'/4,
  'un--findAllNames'/2
]).
'case--uniqueName-1256'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> ('un--uniqueName'(V2, V1, ('nested--7351-1192--in--un--next'(V0, V1, V2, V0)), V4)) end; 1 -> fun (V5) -> {'Idris.Prelude.Types.Right', V0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--uniqueName,next-1226'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V6 + 1) rem 9223372036854775808))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--uniqueName,usedName-1203'(V0, V1, V2, V3) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V6, V7)) end end}, V0, V1)); _ -> 0 end.
'case--case block in nameNum-1157'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> case V4 of $_ -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--reverse'(('Idris.Idris2.Prelude.Types':'un--pack'(V5)))), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Int'(('Idris.Idris2.Prelude.Types':'un--reverse'(V1))))}; _ -> {'Idris.Builtin.MkPair', V0, 0} end end(E0, E1)); _ -> {'Idris.Builtin.MkPair', V0, 0} end.
'case--nameNum-1129'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of <<""/utf8>> -> {'Idris.Builtin.MkPair', V0, 0}; _ -> ('case--case block in nameNum-1157'(V0, V2, V3, ('Idris.Idris2.Prelude.Types':'un--unpack'(V3)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in substNames\x{27}-864'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> V5 end(E0)); _ -> {'Idris.TTImp.TTImp.IBindVar', V1, V0} end.
'case--substNames\x{27}-847'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('case--case block in substNames\x{27}-864'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V7, V8)) end end}, {'Idris.Core.Name.UN', V0}, V2)))); 1 -> {'Idris.TTImp.TTImp.IBindVar', V1, V0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in substNames\x{27}-809'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> V5 end(E0)); _ -> {'Idris.TTImp.TTImp.IVar', V1, V0} end.
'case--substNames\x{27}-792'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('case--case block in substNames\x{27}-809'(V0, V1, V2, V3, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V7, V8)) end end}, V0, V2)))); 1 -> {'Idris.TTImp.TTImp.IVar', V1, V0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findAllNames-664'(V0, V1, V2, V3, V4, V5, V6) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V6 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> [V7 | V6] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findAllNames-626'(V0, V1, V2, V3, V4, V5, V6) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V6 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> [V7 | V6] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findAllNames-601'(V0, V1, V2, V3) -> case V3 of 0 -> [V0 | []]; 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findBindableNames-509'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V7 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> [V9 | V7] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findBindableNames-463'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V7 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> [V9 | V7] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findBindableNames-430'(V0, V1, V2, V3, V4) -> case V4 of 0 -> [{'Idris.Builtin.MkPair', V0, ('un--getUnique'(V2, V0))} | []]; 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getUnique-406'(V0, V1, V2) -> case V2 of 0 -> ('un--getUnique'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<"\x{27}"/utf8>>)))); 1 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7351-1191--in--un--usedName'(V0, V1, V2, V3) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--lookupTyName'({'Idris.Core.Name.UN', V0}, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V31 of {'Idris.Prelude.Types.Left', E27} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V33) -> {'Idris.Prelude.Types.Right', case V33 of [] -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V36, V37)) end end}, V0, V1)); _ -> 0 end} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--7351-1192--in--un--next'(V0, V1, V2, V3) -> ('case--uniqueName,next-1226'(V0, V1, V2, V3, ('un--nameNum'(V3)))).
'un--uniqueName'(V0, V1, V2, V3) -> begin (V4 = ('nested--7351-1191--in--un--usedName'(V2, V1, V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of 0 -> ('un--uniqueName'(V0, V1, ('nested--7351-1192--in--un--next'(V2, V1, V0, V2)), V3)); 1 -> {'Idris.Prelude.Types.Right', V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--substNamesTy\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> {'Idris.TTImp.TTImp.MkImpTy', V4, V5, V6, ('un--substNames\x{27}'(V0, V1, V2, V7))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesDecl\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.IClaim', V4, V5, V6, V7, ('un--substNamesTy\x{27}'(V0, V1, V2, V8))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IDef', V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V12) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V12)) end, V11))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V13, V14, V15) -> {'Idris.TTImp.TTImp.IData', V13, V14, ('un--substNamesData\x{27}'(V0, V1, V2, V15))} end(E8, E9, E10)); {'Idris.TTImp.TTImp.INamespace', E11, E12, E13} -> (fun (V16, V17, V18) -> {'Idris.TTImp.TTImp.INamespace', V16, V17, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V19)) end, V18))} end(E11, E12, E13)); _ -> V3 end.
'un--substNamesData\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.MkImpData', V4, V5, ('un--substNames\x{27}'(V0, V1, V2, V6)), V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V9) -> ('un--substNamesTy\x{27}'(V0, V1, V2, V9)) end, V8))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V10, V11, V12) -> {'Idris.TTImp.TTImp.MkImpLater', V10, V11, ('un--substNames\x{27}'(V0, V1, V2, V12))} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesClause\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V4, V5, V6) -> begin (V9 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V7) -> {'Idris.Core.Name.UN', V7} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V8)) end, ('un--findBindableNames'(0, V1, [], V5)))))), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V5)), V1))))), {'Idris.TTImp.TTImp.PatClause', V4, ('un--substNames\x{27}'(V0, [], [], V5)), ('un--substNames\x{27}'(V0, V9, V2, V6))} end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14, V15) -> begin (V18 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> {'Idris.Core.Name.UN', V16} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V17)) end, ('un--findBindableNames'(0, V1, [], V11)))))), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V11)), V1))))), {'Idris.TTImp.TTImp.WithClause', V10, ('un--substNames\x{27}'(V0, [], [], V11)), ('un--substNames\x{27}'(V0, V18, V2, V12)), V13, V14, V15} end end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V19, V20) -> {'Idris.TTImp.TTImp.ImpossibleClause', V19, ('un--substNames\x{27}'(V0, V1, [], V20))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesClause'(V0, V1, V2) -> ('un--substNamesClause\x{27}'(1, V0, V1, V2)).
'un--substNames\x{27}'(V0, V1, V2, V3) -> case V0 of 1 -> case V3 of {'Idris.TTImp.TTImp.IVar', E118, E119} -> (fun (V4, V5) -> ('case--substNames\x{27}-792'(V5, V4, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V8, V9)) end end}, V5, V1)))))) end(E118, E119)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E59, E60, E61, E62, E63, E64} -> (fun (V10, V11, V12, V13, V14, V15) -> begin (V17 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V16) -> [V16 | V1] end end, V13))), {'Idris.TTImp.TTImp.IPi', V10, V11, V12, V13, ('un--substNames\x{27}'(V0, V1, V2, V14)), ('un--substNames\x{27}'(V0, V17, V2, V15))} end end(E59, E60, E61, E62, E63, E64)); {'Idris.TTImp.TTImp.ILam', E65, E66, E67, E68, E69, E70} -> (fun (V18, V19, V20, V21, V22, V23) -> begin (V25 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V24) -> [V24 | V1] end end, V21))), {'Idris.TTImp.TTImp.ILam', V18, V19, V20, V21, ('un--substNames\x{27}'(V0, V1, V2, V22)), ('un--substNames\x{27}'(V0, V25, V2, V23))} end end(E65, E66, E67, E68, E69, E70)); {'Idris.TTImp.TTImp.ILet', E71, E72, E73, E74, E75, E76, E77} -> (fun (V26, V27, V28, V29, V30, V31, V32) -> begin (V33 = [V29 | V1]), {'Idris.TTImp.TTImp.ILet', V26, V27, V28, V29, ('un--substNames\x{27}'(V0, V1, V2, V30)), ('un--substNames\x{27}'(V0, V1, V2, V31)), ('un--substNames\x{27}'(V0, V33, V2, V32))} end end(E71, E72, E73, E74, E75, E76, E77)); {'Idris.TTImp.TTImp.ICase', E78, E79, E80, E81} -> (fun (V34, V35, V36, V37) -> {'Idris.TTImp.TTImp.ICase', V34, ('un--substNames\x{27}'(V0, V1, V2, V35)), ('un--substNames\x{27}'(V0, V1, V2, V36)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V38) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V38)) end, V37))} end(E78, E79, E80, E81)); {'Idris.TTImp.TTImp.ILocal', E82, E83, E84} -> (fun (V39, V40, V41) -> begin (V42 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V40)), V1))), {'Idris.TTImp.TTImp.ILocal', V39, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V43) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V43)) end, V40)), ('un--substNames\x{27}'(V0, V42, V2, V41))} end end(E82, E83, E84)); {'Idris.TTImp.TTImp.IApp', E85, E86, E87} -> (fun (V44, V45, V46) -> {'Idris.TTImp.TTImp.IApp', V44, ('un--substNames\x{27}'(V0, V1, V2, V45)), ('un--substNames\x{27}'(V0, V1, V2, V46))} end(E85, E86, E87)); {'Idris.TTImp.TTImp.INamedApp', E88, E89, E90, E91} -> (fun (V47, V48, V49, V50) -> {'Idris.TTImp.TTImp.INamedApp', V47, ('un--substNames\x{27}'(V0, V1, V2, V48)), V49, ('un--substNames\x{27}'(V0, V1, V2, V50))} end(E88, E89, E90, E91)); {'Idris.TTImp.TTImp.IAutoApp', E92, E93, E94} -> (fun (V51, V52, V53) -> {'Idris.TTImp.TTImp.IAutoApp', V51, ('un--substNames\x{27}'(V0, V1, V2, V52)), ('un--substNames\x{27}'(V0, V1, V2, V53))} end(E92, E93, E94)); {'Idris.TTImp.TTImp.IWithApp', E95, E96, E97} -> (fun (V54, V55, V56) -> {'Idris.TTImp.TTImp.IWithApp', V54, ('un--substNames\x{27}'(V0, V1, V2, V55)), ('un--substNames\x{27}'(V0, V1, V2, V56))} end(E95, E96, E97)); {'Idris.TTImp.TTImp.IAlternative', E98, E99, E100} -> (fun (V57, V58, V59) -> {'Idris.TTImp.TTImp.IAlternative', V57, V58, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V60) -> ('un--substNames\x{27}'(V0, V1, V2, V60)) end, V59))} end(E98, E99, E100)); {'Idris.TTImp.TTImp.ICoerced', E101, E102} -> (fun (V61, V62) -> {'Idris.TTImp.TTImp.ICoerced', V61, ('un--substNames\x{27}'(V0, V1, V2, V62))} end(E101, E102)); {'Idris.TTImp.TTImp.IAs', E103, E104, E105, E106, E107} -> (fun (V63, V64, V65, V66, V67) -> {'Idris.TTImp.TTImp.IAs', V63, V64, V65, V66, ('un--substNames\x{27}'(V0, V1, V2, V67))} end(E103, E104, E105, E106, E107)); {'Idris.TTImp.TTImp.IMustUnify', E108, E109, E110} -> (fun (V68, V69, V70) -> {'Idris.TTImp.TTImp.IMustUnify', V68, V69, ('un--substNames\x{27}'(V0, V1, V2, V70))} end(E108, E109, E110)); {'Idris.TTImp.TTImp.IDelayed', E111, E112, E113} -> (fun (V71, V72, V73) -> {'Idris.TTImp.TTImp.IDelayed', V71, V72, ('un--substNames\x{27}'(V0, V1, V2, V73))} end(E111, E112, E113)); {'Idris.TTImp.TTImp.IDelay', E114, E115} -> (fun (V74, V75) -> {'Idris.TTImp.TTImp.IDelay', V74, ('un--substNames\x{27}'(V0, V1, V2, V75))} end(E114, E115)); {'Idris.TTImp.TTImp.IForce', E116, E117} -> (fun (V76, V77) -> {'Idris.TTImp.TTImp.IForce', V76, ('un--substNames\x{27}'(V0, V1, V2, V77))} end(E116, E117)); _ -> V3 end end; 0 -> case V3 of {'Idris.TTImp.TTImp.IBindVar', E179, E180} -> (fun (V78, V79) -> ('case--substNames\x{27}-847'(V79, V78, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V82, V83)) end end}, {'Idris.Core.Name.UN', V79}, V1)))))) end(E179, E180)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E120, E121, E122, E123, E124, E125} -> (fun (V84, V85, V86, V87, V88, V89) -> begin (V91 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V90) -> [V90 | V1] end end, V87))), {'Idris.TTImp.TTImp.IPi', V84, V85, V86, V87, ('un--substNames\x{27}'(V0, V1, V2, V88)), ('un--substNames\x{27}'(V0, V91, V2, V89))} end end(E120, E121, E122, E123, E124, E125)); {'Idris.TTImp.TTImp.ILam', E126, E127, E128, E129, E130, E131} -> (fun (V92, V93, V94, V95, V96, V97) -> begin (V99 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V98) -> [V98 | V1] end end, V95))), {'Idris.TTImp.TTImp.ILam', V92, V93, V94, V95, ('un--substNames\x{27}'(V0, V1, V2, V96)), ('un--substNames\x{27}'(V0, V99, V2, V97))} end end(E126, E127, E128, E129, E130, E131)); {'Idris.TTImp.TTImp.ILet', E132, E133, E134, E135, E136, E137, E138} -> (fun (V100, V101, V102, V103, V104, V105, V106) -> begin (V107 = [V103 | V1]), {'Idris.TTImp.TTImp.ILet', V100, V101, V102, V103, ('un--substNames\x{27}'(V0, V1, V2, V104)), ('un--substNames\x{27}'(V0, V1, V2, V105)), ('un--substNames\x{27}'(V0, V107, V2, V106))} end end(E132, E133, E134, E135, E136, E137, E138)); {'Idris.TTImp.TTImp.ICase', E139, E140, E141, E142} -> (fun (V108, V109, V110, V111) -> {'Idris.TTImp.TTImp.ICase', V108, ('un--substNames\x{27}'(V0, V1, V2, V109)), ('un--substNames\x{27}'(V0, V1, V2, V110)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V112) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V112)) end, V111))} end(E139, E140, E141, E142)); {'Idris.TTImp.TTImp.ILocal', E143, E144, E145} -> (fun (V113, V114, V115) -> begin (V116 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V114)), V1))), {'Idris.TTImp.TTImp.ILocal', V113, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V117) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V117)) end, V114)), ('un--substNames\x{27}'(V0, V116, V2, V115))} end end(E143, E144, E145)); {'Idris.TTImp.TTImp.IApp', E146, E147, E148} -> (fun (V118, V119, V120) -> {'Idris.TTImp.TTImp.IApp', V118, ('un--substNames\x{27}'(V0, V1, V2, V119)), ('un--substNames\x{27}'(V0, V1, V2, V120))} end(E146, E147, E148)); {'Idris.TTImp.TTImp.INamedApp', E149, E150, E151, E152} -> (fun (V121, V122, V123, V124) -> {'Idris.TTImp.TTImp.INamedApp', V121, ('un--substNames\x{27}'(V0, V1, V2, V122)), V123, ('un--substNames\x{27}'(V0, V1, V2, V124))} end(E149, E150, E151, E152)); {'Idris.TTImp.TTImp.IAutoApp', E153, E154, E155} -> (fun (V125, V126, V127) -> {'Idris.TTImp.TTImp.IAutoApp', V125, ('un--substNames\x{27}'(V0, V1, V2, V126)), ('un--substNames\x{27}'(V0, V1, V2, V127))} end(E153, E154, E155)); {'Idris.TTImp.TTImp.IWithApp', E156, E157, E158} -> (fun (V128, V129, V130) -> {'Idris.TTImp.TTImp.IWithApp', V128, ('un--substNames\x{27}'(V0, V1, V2, V129)), ('un--substNames\x{27}'(V0, V1, V2, V130))} end(E156, E157, E158)); {'Idris.TTImp.TTImp.IAlternative', E159, E160, E161} -> (fun (V131, V132, V133) -> {'Idris.TTImp.TTImp.IAlternative', V131, V132, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V134) -> ('un--substNames\x{27}'(V0, V1, V2, V134)) end, V133))} end(E159, E160, E161)); {'Idris.TTImp.TTImp.ICoerced', E162, E163} -> (fun (V135, V136) -> {'Idris.TTImp.TTImp.ICoerced', V135, ('un--substNames\x{27}'(V0, V1, V2, V136))} end(E162, E163)); {'Idris.TTImp.TTImp.IAs', E164, E165, E166, E167, E168} -> (fun (V137, V138, V139, V140, V141) -> {'Idris.TTImp.TTImp.IAs', V137, V138, V139, V140, ('un--substNames\x{27}'(V0, V1, V2, V141))} end(E164, E165, E166, E167, E168)); {'Idris.TTImp.TTImp.IMustUnify', E169, E170, E171} -> (fun (V142, V143, V144) -> {'Idris.TTImp.TTImp.IMustUnify', V142, V143, ('un--substNames\x{27}'(V0, V1, V2, V144))} end(E169, E170, E171)); {'Idris.TTImp.TTImp.IDelayed', E172, E173, E174} -> (fun (V145, V146, V147) -> {'Idris.TTImp.TTImp.IDelayed', V145, V146, ('un--substNames\x{27}'(V0, V1, V2, V147))} end(E172, E173, E174)); {'Idris.TTImp.TTImp.IDelay', E175, E176} -> (fun (V148, V149) -> {'Idris.TTImp.TTImp.IDelay', V148, ('un--substNames\x{27}'(V0, V1, V2, V149))} end(E175, E176)); {'Idris.TTImp.TTImp.IForce', E177, E178} -> (fun (V150, V151) -> {'Idris.TTImp.TTImp.IForce', V150, ('un--substNames\x{27}'(V0, V1, V2, V151))} end(E177, E178)); _ -> V3 end end; _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V152, V153, V154, V155, V156, V157) -> begin (V159 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V158) -> [V158 | V1] end end, V155))), {'Idris.TTImp.TTImp.IPi', V152, V153, V154, V155, ('un--substNames\x{27}'(V0, V1, V2, V156)), ('un--substNames\x{27}'(V0, V159, V2, V157))} end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V160, V161, V162, V163, V164, V165) -> begin (V167 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V166) -> [V166 | V1] end end, V163))), {'Idris.TTImp.TTImp.ILam', V160, V161, V162, V163, ('un--substNames\x{27}'(V0, V1, V2, V164)), ('un--substNames\x{27}'(V0, V167, V2, V165))} end end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.ILet', E12, E13, E14, E15, E16, E17, E18} -> (fun (V168, V169, V170, V171, V172, V173, V174) -> begin (V175 = [V171 | V1]), {'Idris.TTImp.TTImp.ILet', V168, V169, V170, V171, ('un--substNames\x{27}'(V0, V1, V2, V172)), ('un--substNames\x{27}'(V0, V1, V2, V173)), ('un--substNames\x{27}'(V0, V175, V2, V174))} end end(E12, E13, E14, E15, E16, E17, E18)); {'Idris.TTImp.TTImp.ICase', E19, E20, E21, E22} -> (fun (V176, V177, V178, V179) -> {'Idris.TTImp.TTImp.ICase', V176, ('un--substNames\x{27}'(V0, V1, V2, V177)), ('un--substNames\x{27}'(V0, V1, V2, V178)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V180) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V180)) end, V179))} end(E19, E20, E21, E22)); {'Idris.TTImp.TTImp.ILocal', E23, E24, E25} -> (fun (V181, V182, V183) -> begin (V184 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V182)), V1))), {'Idris.TTImp.TTImp.ILocal', V181, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V185) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V185)) end, V182)), ('un--substNames\x{27}'(V0, V184, V2, V183))} end end(E23, E24, E25)); {'Idris.TTImp.TTImp.IApp', E26, E27, E28} -> (fun (V186, V187, V188) -> {'Idris.TTImp.TTImp.IApp', V186, ('un--substNames\x{27}'(V0, V1, V2, V187)), ('un--substNames\x{27}'(V0, V1, V2, V188))} end(E26, E27, E28)); {'Idris.TTImp.TTImp.INamedApp', E29, E30, E31, E32} -> (fun (V189, V190, V191, V192) -> {'Idris.TTImp.TTImp.INamedApp', V189, ('un--substNames\x{27}'(V0, V1, V2, V190)), V191, ('un--substNames\x{27}'(V0, V1, V2, V192))} end(E29, E30, E31, E32)); {'Idris.TTImp.TTImp.IAutoApp', E33, E34, E35} -> (fun (V193, V194, V195) -> {'Idris.TTImp.TTImp.IAutoApp', V193, ('un--substNames\x{27}'(V0, V1, V2, V194)), ('un--substNames\x{27}'(V0, V1, V2, V195))} end(E33, E34, E35)); {'Idris.TTImp.TTImp.IWithApp', E36, E37, E38} -> (fun (V196, V197, V198) -> {'Idris.TTImp.TTImp.IWithApp', V196, ('un--substNames\x{27}'(V0, V1, V2, V197)), ('un--substNames\x{27}'(V0, V1, V2, V198))} end(E36, E37, E38)); {'Idris.TTImp.TTImp.IAlternative', E39, E40, E41} -> (fun (V199, V200, V201) -> {'Idris.TTImp.TTImp.IAlternative', V199, V200, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V202) -> ('un--substNames\x{27}'(V0, V1, V2, V202)) end, V201))} end(E39, E40, E41)); {'Idris.TTImp.TTImp.ICoerced', E42, E43} -> (fun (V203, V204) -> {'Idris.TTImp.TTImp.ICoerced', V203, ('un--substNames\x{27}'(V0, V1, V2, V204))} end(E42, E43)); {'Idris.TTImp.TTImp.IAs', E44, E45, E46, E47, E48} -> (fun (V205, V206, V207, V208, V209) -> {'Idris.TTImp.TTImp.IAs', V205, V206, V207, V208, ('un--substNames\x{27}'(V0, V1, V2, V209))} end(E44, E45, E46, E47, E48)); {'Idris.TTImp.TTImp.IMustUnify', E49, E50, E51} -> (fun (V210, V211, V212) -> {'Idris.TTImp.TTImp.IMustUnify', V210, V211, ('un--substNames\x{27}'(V0, V1, V2, V212))} end(E49, E50, E51)); {'Idris.TTImp.TTImp.IDelayed', E52, E53, E54} -> (fun (V213, V214, V215) -> {'Idris.TTImp.TTImp.IDelayed', V213, V214, ('un--substNames\x{27}'(V0, V1, V2, V215))} end(E52, E53, E54)); {'Idris.TTImp.TTImp.IDelay', E55, E56} -> (fun (V216, V217) -> {'Idris.TTImp.TTImp.IDelay', V216, ('un--substNames\x{27}'(V0, V1, V2, V217))} end(E55, E56)); {'Idris.TTImp.TTImp.IForce', E57, E58} -> (fun (V218, V219) -> {'Idris.TTImp.TTImp.IForce', V218, ('un--substNames\x{27}'(V0, V1, V2, V219))} end(E57, E58)); _ -> V3 end end.
'un--substNames'(V0, V1, V2) -> ('un--substNames\x{27}'(1, V0, V1, V2)).
'un--substLocTy'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.TTImp.TTImp.MkImpTy', V0, V0, V4, ('un--substLoc'(V0, V5))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLocDecl'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.TTImp.TTImp.IClaim', V0, V3, V4, V5, ('un--substLocTy'(V0, V6))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V7, V8, V9) -> {'Idris.TTImp.TTImp.IDef', V0, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> ('un--substLocClause'(V0, V10)) end, V9))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V11, V12, V13) -> {'Idris.TTImp.TTImp.IData', V0, V12, ('un--substLocData'(V0, V13))} end(E8, E9, E10)); {'Idris.TTImp.TTImp.INamespace', E11, E12, E13} -> (fun (V14, V15, V16) -> {'Idris.TTImp.TTImp.INamespace', V0, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> ('un--substLocDecl'(V0, V17)) end, V16))} end(E11, E12, E13)); _ -> V1 end.
'un--substLocData'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.TTImp.TTImp.MkImpData', V0, V3, ('un--substLoc'(V0, V4)), V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V7) -> ('un--substLocTy'(V0, V7)) end, V6))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V8, V9, V10) -> {'Idris.TTImp.TTImp.MkImpLater', V0, V9, ('un--substLoc'(V0, V10))} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLocClause'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.TTImp.TTImp.PatClause', V0, ('un--substLoc'(V0, V3)), ('un--substLoc'(V0, V4))} end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V5, V6, V7, V8, V9, V10) -> {'Idris.TTImp.TTImp.WithClause', V0, ('un--substLoc'(V0, V6)), ('un--substLoc'(V0, V7)), V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V11) -> ('un--substLocClause'(V0, V11)) end, V10))} end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V12, V13) -> {'Idris.TTImp.TTImp.ImpossibleClause', V0, ('un--substLoc'(V0, V13))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLoc'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> {'Idris.TTImp.TTImp.IVar', V0, V3} end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> {'Idris.TTImp.TTImp.IPi', V0, V5, V6, V7, ('un--substLoc'(V0, V8)), ('un--substLoc'(V0, V9))} end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E8, E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.ILam', V0, V11, V12, V13, ('un--substLoc'(V0, V14)), ('un--substLoc'(V0, V15))} end(E8, E9, E10, E11, E12, E13)); {'Idris.TTImp.TTImp.ILet', E14, E15, E16, E17, E18, E19, E20} -> (fun (V16, V17, V18, V19, V20, V21, V22) -> {'Idris.TTImp.TTImp.ILet', V0, V0, V18, V19, ('un--substLoc'(V0, V20)), ('un--substLoc'(V0, V21)), ('un--substLoc'(V0, V22))} end(E14, E15, E16, E17, E18, E19, E20)); {'Idris.TTImp.TTImp.ICase', E21, E22, E23, E24} -> (fun (V23, V24, V25, V26) -> {'Idris.TTImp.TTImp.ICase', V0, ('un--substLoc'(V0, V24)), ('un--substLoc'(V0, V25)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V27) -> ('un--substLocClause'(V0, V27)) end, V26))} end(E21, E22, E23, E24)); {'Idris.TTImp.TTImp.ILocal', E25, E26, E27} -> (fun (V28, V29, V30) -> {'Idris.TTImp.TTImp.ILocal', V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V31) -> ('un--substLocDecl'(V0, V31)) end, V29)), ('un--substLoc'(V0, V30))} end(E25, E26, E27)); {'Idris.TTImp.TTImp.IApp', E28, E29, E30} -> (fun (V32, V33, V34) -> {'Idris.TTImp.TTImp.IApp', V0, ('un--substLoc'(V0, V33)), ('un--substLoc'(V0, V34))} end(E28, E29, E30)); {'Idris.TTImp.TTImp.INamedApp', E31, E32, E33, E34} -> (fun (V35, V36, V37, V38) -> {'Idris.TTImp.TTImp.INamedApp', V0, ('un--substLoc'(V0, V36)), V37, ('un--substLoc'(V0, V38))} end(E31, E32, E33, E34)); {'Idris.TTImp.TTImp.IAutoApp', E35, E36, E37} -> (fun (V39, V40, V41) -> {'Idris.TTImp.TTImp.IAutoApp', V0, ('un--substLoc'(V0, V40)), ('un--substLoc'(V0, V41))} end(E35, E36, E37)); {'Idris.TTImp.TTImp.IWithApp', E38, E39, E40} -> (fun (V42, V43, V44) -> {'Idris.TTImp.TTImp.IWithApp', V0, ('un--substLoc'(V0, V43)), ('un--substLoc'(V0, V44))} end(E38, E39, E40)); {'Idris.TTImp.TTImp.IAlternative', E41, E42, E43} -> (fun (V45, V46, V47) -> {'Idris.TTImp.TTImp.IAlternative', V0, V46, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V48) -> ('un--substLoc'(V0, V48)) end, V47))} end(E41, E42, E43)); {'Idris.TTImp.TTImp.ICoerced', E44, E45} -> (fun (V49, V50) -> {'Idris.TTImp.TTImp.ICoerced', V0, ('un--substLoc'(V0, V50))} end(E44, E45)); {'Idris.TTImp.TTImp.IAs', E46, E47, E48, E49, E50} -> (fun (V51, V52, V53, V54, V55) -> {'Idris.TTImp.TTImp.IAs', V0, V0, V53, V54, ('un--substLoc'(V0, V55))} end(E46, E47, E48, E49, E50)); {'Idris.TTImp.TTImp.IMustUnify', E51, E52, E53} -> (fun (V56, V57, V58) -> {'Idris.TTImp.TTImp.IMustUnify', V0, V57, ('un--substLoc'(V0, V58))} end(E51, E52, E53)); {'Idris.TTImp.TTImp.IDelayed', E54, E55, E56} -> (fun (V59, V60, V61) -> {'Idris.TTImp.TTImp.IDelayed', V0, V60, ('un--substLoc'(V0, V61))} end(E54, E55, E56)); {'Idris.TTImp.TTImp.IDelay', E57, E58} -> (fun (V62, V63) -> {'Idris.TTImp.TTImp.IDelay', V0, ('un--substLoc'(V0, V63))} end(E57, E58)); {'Idris.TTImp.TTImp.IForce', E59, E60} -> (fun (V64, V65) -> {'Idris.TTImp.TTImp.IForce', V0, ('un--substLoc'(V0, V65))} end(E59, E60)); _ -> V1 end.
'un--substBindVars'(V0, V1, V2) -> ('un--substNames\x{27}'(0, V0, V1, V2)).
'un--nameNum'(V0) -> ('case--nameNum-1129'(V0, ('Idris.Idris2.Data.String':'un--span'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V1)) end, ('Idris.Idris2.Prelude.Types':'un--reverse'(V0)))))).
'un--getUnique'(V0, V1) -> ('case--getUnique-406'(V1, V0, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V4, V5)) end end}, V1, V0)))).
'un--findIBindVars'(V0) -> case V0 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V5)), ('un--findIBindVars'(V6)))) end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V7, V8, V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V11)), ('un--findIBindVars'(V12)))) end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IApp', E12, E13, E14} -> (fun (V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V14)), ('un--findIBindVars'(V15)))) end(E12, E13, E14)); {'Idris.TTImp.TTImp.INamedApp', E15, E16, E17, E18} -> (fun (V16, V17, V18, V19) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V17)), ('un--findIBindVars'(V19)))) end(E15, E16, E17, E18)); {'Idris.TTImp.TTImp.IAutoApp', E19, E20, E21} -> (fun (V20, V21, V22) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V21)), ('un--findIBindVars'(V22)))) end(E19, E20, E21)); {'Idris.TTImp.TTImp.IWithApp', E22, E23, E24} -> (fun (V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findIBindVars'(V24)), ('un--findIBindVars'(V25)))) end(E22, E23, E24)); {'Idris.TTImp.TTImp.IBindVar', E25, E26} -> (fun (V26, V27) -> [{'Idris.Core.Name.UN', V27} | []] end(E25, E26)); {'Idris.TTImp.TTImp.IDelayed', E27, E28, E29} -> (fun (V28, V29, V30) -> ('un--findIBindVars'(V30)) end(E27, E28, E29)); {'Idris.TTImp.TTImp.IDelay', E30, E31} -> (fun (V31, V32) -> ('un--findIBindVars'(V32)) end(E30, E31)); {'Idris.TTImp.TTImp.IForce', E32, E33} -> (fun (V33, V34) -> ('un--findIBindVars'(V34)) end(E32, E33)); {'Idris.TTImp.TTImp.IAlternative', E34, E35, E36} -> (fun (V35, V36, V37) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V49)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V50, V51)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V52) -> ('un--findIBindVars'(V52)) end))(V37)) end(E34, E35, E36)); _ -> [] end.
'un--findBindableNames'(V0, V1, V2, V3) -> case V0 of 0 -> case V3 of {'Idris.TTImp.TTImp.IVar', E100, E101} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E152} -> (fun (V6) -> ('case--findBindableNames-430'(V6, V4, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, {'Idris.Core.Name.UN', V6}, V1)))), fun () -> ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V6)) end)))) end(E152)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E102, E103, E104, E105, E106, E107} -> (fun (V11, V12, V13, V14, V15, V16) -> begin (V18 = case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E108} -> (fun (V17) -> [V17 | V1] end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V15)), ('un--findBindableNames'(0, V18, V2, V16)))) end end(E102, E103, E104, E105, E106, E107)); {'Idris.TTImp.TTImp.ILam', E109, E110, E111, E112, E113, E114} -> (fun (V19, V20, V21, V22, V23, V24) -> begin (V26 = case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E115} -> (fun (V25) -> [V25 | V1] end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V23)), ('un--findBindableNames'(0, V26, V2, V24)))) end end(E109, E110, E111, E112, E113, E114)); {'Idris.TTImp.TTImp.IApp', E116, E117, E118} -> (fun (V27, V28, V29) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V28)), ('un--findBindableNames'(0, V1, V2, V29)))) end(E116, E117, E118)); {'Idris.TTImp.TTImp.INamedApp', E119, E120, E121, E122} -> (fun (V30, V31, V32, V33) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V31)), ('un--findBindableNames'(0, V1, V2, V33)))) end(E119, E120, E121, E122)); {'Idris.TTImp.TTImp.IAutoApp', E123, E124, E125} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V35)), ('un--findBindableNames'(0, V1, V2, V36)))) end(E123, E124, E125)); {'Idris.TTImp.TTImp.IWithApp', E126, E127, E128} -> (fun (V37, V38, V39) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V38)), ('un--findBindableNames'(0, V1, V2, V39)))) end(E126, E127, E128)); {'Idris.TTImp.TTImp.IAs', E129, E130, E131, E132, E133} -> (fun (V40, V41, V42, V43, V44) -> case V43 of {'Idris.Core.Name.UN', E134} -> (fun (V45) -> [{'Idris.Builtin.MkPair', V45, ('un--getUnique'(V2, V45))} | ('un--findBindableNames'(V0, V1, V2, V44))] end(E134)); _ -> ('un--findBindableNames'(V0, V1, V2, V44)) end end(E129, E130, E131, E132, E133)); {'Idris.TTImp.TTImp.IMustUnify', E135, E136, E137} -> (fun (V46, V47, V48) -> ('un--findBindableNames'(V0, V1, V2, V48)) end(E135, E136, E137)); {'Idris.TTImp.TTImp.IDelayed', E138, E139, E140} -> (fun (V49, V50, V51) -> ('un--findBindableNames'(V0, V1, V2, V51)) end(E138, E139, E140)); {'Idris.TTImp.TTImp.IDelay', E141, E142} -> (fun (V52, V53) -> ('un--findBindableNames'(V0, V1, V2, V53)) end(E141, E142)); {'Idris.TTImp.TTImp.IForce', E143, E144} -> (fun (V54, V55) -> ('un--findBindableNames'(V0, V1, V2, V55)) end(E143, E144)); {'Idris.TTImp.TTImp.IQuote', E145, E146} -> (fun (V56, V57) -> ('un--findBindableNames'(V0, V1, V2, V57)) end(E145, E146)); {'Idris.TTImp.TTImp.IUnquote', E147, E148} -> (fun (V58, V59) -> ('un--findBindableNames'(V0, V1, V2, V59)) end(E147, E148)); {'Idris.TTImp.TTImp.IAlternative', E149, E150, E151} -> (fun (V60, V61, V62) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V74)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V75, V76)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V77) -> ('un--findBindableNames'(V0, V1, V2, V77)) end))(V62)) end(E149, E150, E151)); _ -> [] end end end(E100, E101)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E50, E51, E52, E53, E54, E55} -> (fun (V78, V79, V80, V81, V82, V83) -> begin (V85 = case V81 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E56} -> (fun (V84) -> [V84 | V1] end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V82)), ('un--findBindableNames'(0, V85, V2, V83)))) end end(E50, E51, E52, E53, E54, E55)); {'Idris.TTImp.TTImp.ILam', E57, E58, E59, E60, E61, E62} -> (fun (V86, V87, V88, V89, V90, V91) -> begin (V93 = case V89 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E63} -> (fun (V92) -> [V92 | V1] end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V90)), ('un--findBindableNames'(0, V93, V2, V91)))) end end(E57, E58, E59, E60, E61, E62)); {'Idris.TTImp.TTImp.IApp', E64, E65, E66} -> (fun (V94, V95, V96) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V95)), ('un--findBindableNames'(0, V1, V2, V96)))) end(E64, E65, E66)); {'Idris.TTImp.TTImp.INamedApp', E67, E68, E69, E70} -> (fun (V97, V98, V99, V100) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V98)), ('un--findBindableNames'(0, V1, V2, V100)))) end(E67, E68, E69, E70)); {'Idris.TTImp.TTImp.IAutoApp', E71, E72, E73} -> (fun (V101, V102, V103) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V102)), ('un--findBindableNames'(0, V1, V2, V103)))) end(E71, E72, E73)); {'Idris.TTImp.TTImp.IWithApp', E74, E75, E76} -> (fun (V104, V105, V106) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V105)), ('un--findBindableNames'(0, V1, V2, V106)))) end(E74, E75, E76)); {'Idris.TTImp.TTImp.IAs', E77, E78, E79, E80, E81} -> (fun (V107, V108, V109, V110, V111) -> case V110 of {'Idris.Core.Name.UN', E82} -> (fun (V112) -> [{'Idris.Builtin.MkPair', V112, ('un--getUnique'(V2, V112))} | ('un--findBindableNames'(V0, V1, V2, V111))] end(E82)); _ -> ('un--findBindableNames'(V0, V1, V2, V111)) end end(E77, E78, E79, E80, E81)); {'Idris.TTImp.TTImp.IMustUnify', E83, E84, E85} -> (fun (V113, V114, V115) -> ('un--findBindableNames'(V0, V1, V2, V115)) end(E83, E84, E85)); {'Idris.TTImp.TTImp.IDelayed', E86, E87, E88} -> (fun (V116, V117, V118) -> ('un--findBindableNames'(V0, V1, V2, V118)) end(E86, E87, E88)); {'Idris.TTImp.TTImp.IDelay', E89, E90} -> (fun (V119, V120) -> ('un--findBindableNames'(V0, V1, V2, V120)) end(E89, E90)); {'Idris.TTImp.TTImp.IForce', E91, E92} -> (fun (V121, V122) -> ('un--findBindableNames'(V0, V1, V2, V122)) end(E91, E92)); {'Idris.TTImp.TTImp.IQuote', E93, E94} -> (fun (V123, V124) -> ('un--findBindableNames'(V0, V1, V2, V124)) end(E93, E94)); {'Idris.TTImp.TTImp.IUnquote', E95, E96} -> (fun (V125, V126) -> ('un--findBindableNames'(V0, V1, V2, V126)) end(E95, E96)); {'Idris.TTImp.TTImp.IAlternative', E97, E98, E99} -> (fun (V127, V128, V129) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V132, V133, V134)) end end end end end, fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V137, V138, V139)) end end end end end, fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V141)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V142, V143)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V144) -> ('un--findBindableNames'(V0, V1, V2, V144)) end))(V129)) end(E97, E98, E99)); _ -> [] end end; _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V145, V146, V147, V148, V149, V150) -> begin (V152 = case V148 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V151) -> [V151 | V1] end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V149)), ('un--findBindableNames'(0, V152, V2, V150)))) end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E7, E8, E9, E10, E11, E12} -> (fun (V153, V154, V155, V156, V157, V158) -> begin (V160 = case V156 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E13} -> (fun (V159) -> [V159 | V1] end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(0, V1, V2, V157)), ('un--findBindableNames'(0, V160, V2, V158)))) end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.IApp', E14, E15, E16} -> (fun (V161, V162, V163) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V162)), ('un--findBindableNames'(0, V1, V2, V163)))) end(E14, E15, E16)); {'Idris.TTImp.TTImp.INamedApp', E17, E18, E19, E20} -> (fun (V164, V165, V166, V167) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V165)), ('un--findBindableNames'(0, V1, V2, V167)))) end(E17, E18, E19, E20)); {'Idris.TTImp.TTImp.IAutoApp', E21, E22, E23} -> (fun (V168, V169, V170) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V169)), ('un--findBindableNames'(0, V1, V2, V170)))) end(E21, E22, E23)); {'Idris.TTImp.TTImp.IWithApp', E24, E25, E26} -> (fun (V171, V172, V173) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findBindableNames'(1, V1, V2, V172)), ('un--findBindableNames'(0, V1, V2, V173)))) end(E24, E25, E26)); {'Idris.TTImp.TTImp.IAs', E27, E28, E29, E30, E31} -> (fun (V174, V175, V176, V177, V178) -> case V177 of {'Idris.Core.Name.UN', E32} -> (fun (V179) -> [{'Idris.Builtin.MkPair', V179, ('un--getUnique'(V2, V179))} | ('un--findBindableNames'(V0, V1, V2, V178))] end(E32)); _ -> ('un--findBindableNames'(V0, V1, V2, V178)) end end(E27, E28, E29, E30, E31)); {'Idris.TTImp.TTImp.IMustUnify', E33, E34, E35} -> (fun (V180, V181, V182) -> ('un--findBindableNames'(V0, V1, V2, V182)) end(E33, E34, E35)); {'Idris.TTImp.TTImp.IDelayed', E36, E37, E38} -> (fun (V183, V184, V185) -> ('un--findBindableNames'(V0, V1, V2, V185)) end(E36, E37, E38)); {'Idris.TTImp.TTImp.IDelay', E39, E40} -> (fun (V186, V187) -> ('un--findBindableNames'(V0, V1, V2, V187)) end(E39, E40)); {'Idris.TTImp.TTImp.IForce', E41, E42} -> (fun (V188, V189) -> ('un--findBindableNames'(V0, V1, V2, V189)) end(E41, E42)); {'Idris.TTImp.TTImp.IQuote', E43, E44} -> (fun (V190, V191) -> ('un--findBindableNames'(V0, V1, V2, V191)) end(E43, E44)); {'Idris.TTImp.TTImp.IUnquote', E45, E46} -> (fun (V192, V193) -> ('un--findBindableNames'(V0, V1, V2, V193)) end(E45, E46)); {'Idris.TTImp.TTImp.IAlternative', E47, E48, E49} -> (fun (V194, V195, V196) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V199, V200, V201)) end end end end end, fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V204, V205, V206)) end end end end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V208)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V209) -> fun (V210) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V209, V210)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V211) -> ('un--findBindableNames'(V0, V1, V2, V211)) end))(V196)) end(E47, E48, E49)); _ -> [] end end.
'un--findAllNames'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> ('case--findAllNames-601'(V3, V2, V0, ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, V3, V0)))))) end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V8, V9, V10, V11, V12, V13) -> begin (V15 = case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V14) -> [V14 | V0] end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V12)), ('un--findAllNames'(V15, V13)))) end end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E9, E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20, V21) -> begin (V23 = case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E15} -> (fun (V22) -> [V22 | V0] end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V23, V20)), ('un--findAllNames'(V23, V21)))) end end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.IApp', E16, E17, E18} -> (fun (V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V25)), ('un--findAllNames'(V0, V26)))) end(E16, E17, E18)); {'Idris.TTImp.TTImp.INamedApp', E19, E20, E21, E22} -> (fun (V27, V28, V29, V30) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V28)), ('un--findAllNames'(V0, V30)))) end(E19, E20, E21, E22)); {'Idris.TTImp.TTImp.IAutoApp', E23, E24, E25} -> (fun (V31, V32, V33) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V32)), ('un--findAllNames'(V0, V33)))) end(E23, E24, E25)); {'Idris.TTImp.TTImp.IWithApp', E26, E27, E28} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--findAllNames'(V0, V35)), ('un--findAllNames'(V0, V36)))) end(E26, E27, E28)); {'Idris.TTImp.TTImp.IAs', E29, E30, E31, E32, E33} -> (fun (V37, V38, V39, V40, V41) -> [V40 | ('un--findAllNames'(V0, V41))] end(E29, E30, E31, E32, E33)); {'Idris.TTImp.TTImp.IMustUnify', E34, E35, E36} -> (fun (V42, V43, V44) -> ('un--findAllNames'(V0, V44)) end(E34, E35, E36)); {'Idris.TTImp.TTImp.IDelayed', E37, E38, E39} -> (fun (V45, V46, V47) -> ('un--findAllNames'(V0, V47)) end(E37, E38, E39)); {'Idris.TTImp.TTImp.IDelay', E40, E41} -> (fun (V48, V49) -> ('un--findAllNames'(V0, V49)) end(E40, E41)); {'Idris.TTImp.TTImp.IForce', E42, E43} -> (fun (V50, V51) -> ('un--findAllNames'(V0, V51)) end(E42, E43)); {'Idris.TTImp.TTImp.IQuote', E44, E45} -> (fun (V52, V53) -> ('un--findAllNames'(V0, V53)) end(E44, E45)); {'Idris.TTImp.TTImp.IUnquote', E46, E47} -> (fun (V54, V55) -> ('un--findAllNames'(V0, V55)) end(E46, E47)); {'Idris.TTImp.TTImp.IAlternative', E48, E49, E50} -> (fun (V56, V57, V58) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V70)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V71, V72)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V73) -> ('un--findAllNames'(V0, V73)) end))(V58)) end(E48, E49, E50)); _ -> [] end.
