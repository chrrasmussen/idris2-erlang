-module('Idris.Idris2.TTImp.Utils').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--nameNum-1365'/2,
  'nested--6571-1427--in--un--usedName'/4,
  'nested--6571-1428--in--un--next'/4,
  'un--uniqueName'/4,
  'un--substNamesTy\x{27}'/4,
  'un--substNamesDecl\x{27}'/4,
  'un--substNamesData\x{27}'/4,
  'un--substNamesClause\x{27}'/4,
  'un--substNamesClause'/3,
  'un--substNames\x{27}'/4,
  'un--substNames'/3,
  'un--substLocTy'/2,
  'un--substLocDecl'/2,
  'un--substLocData'/2,
  'un--substLocClause'/2,
  'un--substLoc'/2,
  'un--substBindVars'/3,
  'un--nameNum'/1,
  'un--getUnique'/2,
  'un--findUniqueBindableNames'/6,
  'un--findIBindVars'/1,
  'un--findBindableNames'/4,
  'un--findAllNames'/2
]).
'case--nameNum-1365'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of <<""/utf8>> -> {'Idris.Builtin.MkPair', V0, 0}; _ -> case ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)) of [E2 | E3] -> (fun (V4, V5) -> case V4 of $_ -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'un--reverse'(('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)))), ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Int'(('Idris.Idris2.Prelude.Types':'un--reverse'(V2))))}; _ -> {'Idris.Builtin.MkPair', V0, 0} end end(E2, E3)); _ -> {'Idris.Builtin.MkPair', V0, 0} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6571-1427--in--un--usedName'(V0, V1, V2, V3) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--lookupTyName'({'Idris.Core.Name.UN', V0}, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V32 of {'Idris.Prelude.Types.Left', E28} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V34) -> {'Idris.Prelude.Types.Right', case V34 of [] -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V37, V38)) end end}, V0, V1)); _ -> 1 end} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--6571-1428--in--un--next'(V0, V1, V2, V3) -> case ('un--nameNum'(V3)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V5 + 1) rem 9223372036854775808))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--uniqueName'(V0, V1, V2, V3) -> begin (V4 = ('nested--6571-1427--in--un--usedName'(V2, V1, V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of 1 -> ('un--uniqueName'(V0, V1, ('nested--6571-1428--in--un--next'(V2, V1, V0, V2)), V3)); 0 -> {'Idris.Prelude.Types.Right', V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--substNamesTy\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> {'Idris.TTImp.TTImp.MkImpTy', V4, V5, V6, ('un--substNames\x{27}'(V0, V1, V2, V7))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesDecl\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.IClaim', V4, V5, V6, V7, ('un--substNamesTy\x{27}'(V0, V1, V2, V8))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IDef', V9, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V12)) end, V11))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V13, V14, V15) -> {'Idris.TTImp.TTImp.IData', V13, V14, ('un--substNamesData\x{27}'(V0, V1, V2, V15))} end(E8, E9, E10)); {'Idris.TTImp.TTImp.INamespace', E11, E12, E13} -> (fun (V16, V17, V18) -> {'Idris.TTImp.TTImp.INamespace', V16, V17, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V19)) end, V18))} end(E11, E12, E13)); _ -> V3 end.
'un--substNamesData\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.MkImpData', V4, V5, ('un--substNames\x{27}'(V0, V1, V2, V6)), V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('un--substNamesTy\x{27}'(V0, V1, V2, V9)) end, V8))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V10, V11, V12) -> {'Idris.TTImp.TTImp.MkImpLater', V10, V11, ('un--substNames\x{27}'(V0, V1, V2, V12))} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesClause\x{27}'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V4, V5, V6) -> begin (V9 = ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> {'Idris.Core.Name.UN', V7} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Builtin':'un--snd'(V8)) end, ('un--findBindableNames'(1, V1, [], V5)))))), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findIBindVars'(V5)), V1))))), {'Idris.TTImp.TTImp.PatClause', V4, ('un--substNames\x{27}'(V0, [], [], V5)), ('un--substNames\x{27}'(V0, V9, V2, V6))} end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14, V15) -> begin (V18 = ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> {'Idris.Core.Name.UN', V16} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('Idris.Idris2.Builtin':'un--snd'(V17)) end, ('un--findBindableNames'(1, V1, [], V11)))))), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findIBindVars'(V11)), V1))))), {'Idris.TTImp.TTImp.WithClause', V10, ('un--substNames\x{27}'(V0, [], [], V11)), ('un--substNames\x{27}'(V0, V18, V2, V12)), V13, V14, V15} end end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V19, V20) -> {'Idris.TTImp.TTImp.ImpossibleClause', V19, ('un--substNames\x{27}'(V0, V1, [], V20))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substNamesClause'(V0, V1, V2) -> ('un--substNamesClause\x{27}'(0, V0, V1, V2)).
'un--substNames\x{27}'(V0, V1, V2, V3) -> case V0 of 0 -> case V3 of {'Idris.TTImp.TTImp.IVar', E118, E119} -> (fun (V4, V5) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V8, V9)) end end}, V5, V1)) of 1 -> {'Idris.TTImp.TTImp.IVar', V4, V5}; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V5, V2)) of {'Idris.Prelude.Types.Just', E120} -> (fun (V14) -> V14 end(E120)); _ -> {'Idris.TTImp.TTImp.IVar', V4, V5} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E118, E119)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E59, E60, E61, E62, E63, E64} -> (fun (V15, V16, V17, V18, V19, V20) -> begin (V22 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V21) -> [V21 | V1] end end, V18))), {'Idris.TTImp.TTImp.IPi', V15, V16, V17, V18, ('un--substNames\x{27}'(V0, V1, V2, V19)), ('un--substNames\x{27}'(V0, V22, V2, V20))} end end(E59, E60, E61, E62, E63, E64)); {'Idris.TTImp.TTImp.ILam', E65, E66, E67, E68, E69, E70} -> (fun (V23, V24, V25, V26, V27, V28) -> begin (V30 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V29) -> [V29 | V1] end end, V26))), {'Idris.TTImp.TTImp.ILam', V23, V24, V25, V26, ('un--substNames\x{27}'(V0, V1, V2, V27)), ('un--substNames\x{27}'(V0, V30, V2, V28))} end end(E65, E66, E67, E68, E69, E70)); {'Idris.TTImp.TTImp.ILet', E71, E72, E73, E74, E75, E76, E77} -> (fun (V31, V32, V33, V34, V35, V36, V37) -> begin (V38 = [V34 | V1]), {'Idris.TTImp.TTImp.ILet', V31, V32, V33, V34, ('un--substNames\x{27}'(V0, V1, V2, V35)), ('un--substNames\x{27}'(V0, V1, V2, V36)), ('un--substNames\x{27}'(V0, V38, V2, V37))} end end(E71, E72, E73, E74, E75, E76, E77)); {'Idris.TTImp.TTImp.ICase', E78, E79, E80, E81} -> (fun (V39, V40, V41, V42) -> {'Idris.TTImp.TTImp.ICase', V39, ('un--substNames\x{27}'(V0, V1, V2, V40)), ('un--substNames\x{27}'(V0, V1, V2, V41)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V43) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V43)) end, V42))} end(E78, E79, E80, E81)); {'Idris.TTImp.TTImp.ILocal', E82, E83, E84} -> (fun (V44, V45, V46) -> begin (V47 = ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V45)), V1))), {'Idris.TTImp.TTImp.ILocal', V44, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V48)) end, V45)), ('un--substNames\x{27}'(V0, V47, V2, V46))} end end(E82, E83, E84)); {'Idris.TTImp.TTImp.IApp', E85, E86, E87} -> (fun (V49, V50, V51) -> {'Idris.TTImp.TTImp.IApp', V49, ('un--substNames\x{27}'(V0, V1, V2, V50)), ('un--substNames\x{27}'(V0, V1, V2, V51))} end(E85, E86, E87)); {'Idris.TTImp.TTImp.INamedApp', E88, E89, E90, E91} -> (fun (V52, V53, V54, V55) -> {'Idris.TTImp.TTImp.INamedApp', V52, ('un--substNames\x{27}'(V0, V1, V2, V53)), V54, ('un--substNames\x{27}'(V0, V1, V2, V55))} end(E88, E89, E90, E91)); {'Idris.TTImp.TTImp.IAutoApp', E92, E93, E94} -> (fun (V56, V57, V58) -> {'Idris.TTImp.TTImp.IAutoApp', V56, ('un--substNames\x{27}'(V0, V1, V2, V57)), ('un--substNames\x{27}'(V0, V1, V2, V58))} end(E92, E93, E94)); {'Idris.TTImp.TTImp.IWithApp', E95, E96, E97} -> (fun (V59, V60, V61) -> {'Idris.TTImp.TTImp.IWithApp', V59, ('un--substNames\x{27}'(V0, V1, V2, V60)), ('un--substNames\x{27}'(V0, V1, V2, V61))} end(E95, E96, E97)); {'Idris.TTImp.TTImp.IAlternative', E98, E99, E100} -> (fun (V62, V63, V64) -> {'Idris.TTImp.TTImp.IAlternative', V62, V63, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V65) -> ('un--substNames\x{27}'(V0, V1, V2, V65)) end, V64))} end(E98, E99, E100)); {'Idris.TTImp.TTImp.ICoerced', E101, E102} -> (fun (V66, V67) -> {'Idris.TTImp.TTImp.ICoerced', V66, ('un--substNames\x{27}'(V0, V1, V2, V67))} end(E101, E102)); {'Idris.TTImp.TTImp.IAs', E103, E104, E105, E106, E107} -> (fun (V68, V69, V70, V71, V72) -> {'Idris.TTImp.TTImp.IAs', V68, V69, V70, V71, ('un--substNames\x{27}'(V0, V1, V2, V72))} end(E103, E104, E105, E106, E107)); {'Idris.TTImp.TTImp.IMustUnify', E108, E109, E110} -> (fun (V73, V74, V75) -> {'Idris.TTImp.TTImp.IMustUnify', V73, V74, ('un--substNames\x{27}'(V0, V1, V2, V75))} end(E108, E109, E110)); {'Idris.TTImp.TTImp.IDelayed', E111, E112, E113} -> (fun (V76, V77, V78) -> {'Idris.TTImp.TTImp.IDelayed', V76, V77, ('un--substNames\x{27}'(V0, V1, V2, V78))} end(E111, E112, E113)); {'Idris.TTImp.TTImp.IDelay', E114, E115} -> (fun (V79, V80) -> {'Idris.TTImp.TTImp.IDelay', V79, ('un--substNames\x{27}'(V0, V1, V2, V80))} end(E114, E115)); {'Idris.TTImp.TTImp.IForce', E116, E117} -> (fun (V81, V82) -> {'Idris.TTImp.TTImp.IForce', V81, ('un--substNames\x{27}'(V0, V1, V2, V82))} end(E116, E117)); _ -> V3 end end; 1 -> case V3 of {'Idris.TTImp.TTImp.IBindVar', E180, E181} -> (fun (V83, V84) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V87, V88)) end end}, {'Idris.Core.Name.UN', V84}, V1)) of 1 -> {'Idris.TTImp.TTImp.IBindVar', V83, V84}; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V91, V92)) end end}, {'Idris.Core.Name.UN', V84}, V2)) of {'Idris.Prelude.Types.Just', E182} -> (fun (V93) -> V93 end(E182)); _ -> {'Idris.TTImp.TTImp.IBindVar', V83, V84} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E180, E181)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E121, E122, E123, E124, E125, E126} -> (fun (V94, V95, V96, V97, V98, V99) -> begin (V101 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V100) -> [V100 | V1] end end, V97))), {'Idris.TTImp.TTImp.IPi', V94, V95, V96, V97, ('un--substNames\x{27}'(V0, V1, V2, V98)), ('un--substNames\x{27}'(V0, V101, V2, V99))} end end(E121, E122, E123, E124, E125, E126)); {'Idris.TTImp.TTImp.ILam', E127, E128, E129, E130, E131, E132} -> (fun (V102, V103, V104, V105, V106, V107) -> begin (V109 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V108) -> [V108 | V1] end end, V105))), {'Idris.TTImp.TTImp.ILam', V102, V103, V104, V105, ('un--substNames\x{27}'(V0, V1, V2, V106)), ('un--substNames\x{27}'(V0, V109, V2, V107))} end end(E127, E128, E129, E130, E131, E132)); {'Idris.TTImp.TTImp.ILet', E133, E134, E135, E136, E137, E138, E139} -> (fun (V110, V111, V112, V113, V114, V115, V116) -> begin (V117 = [V113 | V1]), {'Idris.TTImp.TTImp.ILet', V110, V111, V112, V113, ('un--substNames\x{27}'(V0, V1, V2, V114)), ('un--substNames\x{27}'(V0, V1, V2, V115)), ('un--substNames\x{27}'(V0, V117, V2, V116))} end end(E133, E134, E135, E136, E137, E138, E139)); {'Idris.TTImp.TTImp.ICase', E140, E141, E142, E143} -> (fun (V118, V119, V120, V121) -> {'Idris.TTImp.TTImp.ICase', V118, ('un--substNames\x{27}'(V0, V1, V2, V119)), ('un--substNames\x{27}'(V0, V1, V2, V120)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V122) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V122)) end, V121))} end(E140, E141, E142, E143)); {'Idris.TTImp.TTImp.ILocal', E144, E145, E146} -> (fun (V123, V124, V125) -> begin (V126 = ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V124)), V1))), {'Idris.TTImp.TTImp.ILocal', V123, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V127) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V127)) end, V124)), ('un--substNames\x{27}'(V0, V126, V2, V125))} end end(E144, E145, E146)); {'Idris.TTImp.TTImp.IApp', E147, E148, E149} -> (fun (V128, V129, V130) -> {'Idris.TTImp.TTImp.IApp', V128, ('un--substNames\x{27}'(V0, V1, V2, V129)), ('un--substNames\x{27}'(V0, V1, V2, V130))} end(E147, E148, E149)); {'Idris.TTImp.TTImp.INamedApp', E150, E151, E152, E153} -> (fun (V131, V132, V133, V134) -> {'Idris.TTImp.TTImp.INamedApp', V131, ('un--substNames\x{27}'(V0, V1, V2, V132)), V133, ('un--substNames\x{27}'(V0, V1, V2, V134))} end(E150, E151, E152, E153)); {'Idris.TTImp.TTImp.IAutoApp', E154, E155, E156} -> (fun (V135, V136, V137) -> {'Idris.TTImp.TTImp.IAutoApp', V135, ('un--substNames\x{27}'(V0, V1, V2, V136)), ('un--substNames\x{27}'(V0, V1, V2, V137))} end(E154, E155, E156)); {'Idris.TTImp.TTImp.IWithApp', E157, E158, E159} -> (fun (V138, V139, V140) -> {'Idris.TTImp.TTImp.IWithApp', V138, ('un--substNames\x{27}'(V0, V1, V2, V139)), ('un--substNames\x{27}'(V0, V1, V2, V140))} end(E157, E158, E159)); {'Idris.TTImp.TTImp.IAlternative', E160, E161, E162} -> (fun (V141, V142, V143) -> {'Idris.TTImp.TTImp.IAlternative', V141, V142, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V144) -> ('un--substNames\x{27}'(V0, V1, V2, V144)) end, V143))} end(E160, E161, E162)); {'Idris.TTImp.TTImp.ICoerced', E163, E164} -> (fun (V145, V146) -> {'Idris.TTImp.TTImp.ICoerced', V145, ('un--substNames\x{27}'(V0, V1, V2, V146))} end(E163, E164)); {'Idris.TTImp.TTImp.IAs', E165, E166, E167, E168, E169} -> (fun (V147, V148, V149, V150, V151) -> {'Idris.TTImp.TTImp.IAs', V147, V148, V149, V150, ('un--substNames\x{27}'(V0, V1, V2, V151))} end(E165, E166, E167, E168, E169)); {'Idris.TTImp.TTImp.IMustUnify', E170, E171, E172} -> (fun (V152, V153, V154) -> {'Idris.TTImp.TTImp.IMustUnify', V152, V153, ('un--substNames\x{27}'(V0, V1, V2, V154))} end(E170, E171, E172)); {'Idris.TTImp.TTImp.IDelayed', E173, E174, E175} -> (fun (V155, V156, V157) -> {'Idris.TTImp.TTImp.IDelayed', V155, V156, ('un--substNames\x{27}'(V0, V1, V2, V157))} end(E173, E174, E175)); {'Idris.TTImp.TTImp.IDelay', E176, E177} -> (fun (V158, V159) -> {'Idris.TTImp.TTImp.IDelay', V158, ('un--substNames\x{27}'(V0, V1, V2, V159))} end(E176, E177)); {'Idris.TTImp.TTImp.IForce', E178, E179} -> (fun (V160, V161) -> {'Idris.TTImp.TTImp.IForce', V160, ('un--substNames\x{27}'(V0, V1, V2, V161))} end(E178, E179)); _ -> V3 end end; _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V162, V163, V164, V165, V166, V167) -> begin (V169 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V168) -> [V168 | V1] end end, V165))), {'Idris.TTImp.TTImp.IPi', V162, V163, V164, V165, ('un--substNames\x{27}'(V0, V1, V2, V166)), ('un--substNames\x{27}'(V0, V169, V2, V167))} end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V170, V171, V172, V173, V174, V175) -> begin (V177 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> V1 end, fun () -> fun (V176) -> [V176 | V1] end end, V173))), {'Idris.TTImp.TTImp.ILam', V170, V171, V172, V173, ('un--substNames\x{27}'(V0, V1, V2, V174)), ('un--substNames\x{27}'(V0, V177, V2, V175))} end end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.ILet', E12, E13, E14, E15, E16, E17, E18} -> (fun (V178, V179, V180, V181, V182, V183, V184) -> begin (V185 = [V181 | V1]), {'Idris.TTImp.TTImp.ILet', V178, V179, V180, V181, ('un--substNames\x{27}'(V0, V1, V2, V182)), ('un--substNames\x{27}'(V0, V1, V2, V183)), ('un--substNames\x{27}'(V0, V185, V2, V184))} end end(E12, E13, E14, E15, E16, E17, E18)); {'Idris.TTImp.TTImp.ICase', E19, E20, E21, E22} -> (fun (V186, V187, V188, V189) -> {'Idris.TTImp.TTImp.ICase', V186, ('un--substNames\x{27}'(V0, V1, V2, V187)), ('un--substNames\x{27}'(V0, V1, V2, V188)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V190) -> ('un--substNamesClause\x{27}'(V0, V1, V2, V190)) end, V189))} end(E19, E20, E21, E22)); {'Idris.TTImp.TTImp.ILocal', E23, E24, E25} -> (fun (V191, V192, V193) -> begin (V194 = ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V192)), V1))), {'Idris.TTImp.TTImp.ILocal', V191, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V195) -> ('un--substNamesDecl\x{27}'(V0, V1, V2, V195)) end, V192)), ('un--substNames\x{27}'(V0, V194, V2, V193))} end end(E23, E24, E25)); {'Idris.TTImp.TTImp.IApp', E26, E27, E28} -> (fun (V196, V197, V198) -> {'Idris.TTImp.TTImp.IApp', V196, ('un--substNames\x{27}'(V0, V1, V2, V197)), ('un--substNames\x{27}'(V0, V1, V2, V198))} end(E26, E27, E28)); {'Idris.TTImp.TTImp.INamedApp', E29, E30, E31, E32} -> (fun (V199, V200, V201, V202) -> {'Idris.TTImp.TTImp.INamedApp', V199, ('un--substNames\x{27}'(V0, V1, V2, V200)), V201, ('un--substNames\x{27}'(V0, V1, V2, V202))} end(E29, E30, E31, E32)); {'Idris.TTImp.TTImp.IAutoApp', E33, E34, E35} -> (fun (V203, V204, V205) -> {'Idris.TTImp.TTImp.IAutoApp', V203, ('un--substNames\x{27}'(V0, V1, V2, V204)), ('un--substNames\x{27}'(V0, V1, V2, V205))} end(E33, E34, E35)); {'Idris.TTImp.TTImp.IWithApp', E36, E37, E38} -> (fun (V206, V207, V208) -> {'Idris.TTImp.TTImp.IWithApp', V206, ('un--substNames\x{27}'(V0, V1, V2, V207)), ('un--substNames\x{27}'(V0, V1, V2, V208))} end(E36, E37, E38)); {'Idris.TTImp.TTImp.IAlternative', E39, E40, E41} -> (fun (V209, V210, V211) -> {'Idris.TTImp.TTImp.IAlternative', V209, V210, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V212) -> ('un--substNames\x{27}'(V0, V1, V2, V212)) end, V211))} end(E39, E40, E41)); {'Idris.TTImp.TTImp.ICoerced', E42, E43} -> (fun (V213, V214) -> {'Idris.TTImp.TTImp.ICoerced', V213, ('un--substNames\x{27}'(V0, V1, V2, V214))} end(E42, E43)); {'Idris.TTImp.TTImp.IAs', E44, E45, E46, E47, E48} -> (fun (V215, V216, V217, V218, V219) -> {'Idris.TTImp.TTImp.IAs', V215, V216, V217, V218, ('un--substNames\x{27}'(V0, V1, V2, V219))} end(E44, E45, E46, E47, E48)); {'Idris.TTImp.TTImp.IMustUnify', E49, E50, E51} -> (fun (V220, V221, V222) -> {'Idris.TTImp.TTImp.IMustUnify', V220, V221, ('un--substNames\x{27}'(V0, V1, V2, V222))} end(E49, E50, E51)); {'Idris.TTImp.TTImp.IDelayed', E52, E53, E54} -> (fun (V223, V224, V225) -> {'Idris.TTImp.TTImp.IDelayed', V223, V224, ('un--substNames\x{27}'(V0, V1, V2, V225))} end(E52, E53, E54)); {'Idris.TTImp.TTImp.IDelay', E55, E56} -> (fun (V226, V227) -> {'Idris.TTImp.TTImp.IDelay', V226, ('un--substNames\x{27}'(V0, V1, V2, V227))} end(E55, E56)); {'Idris.TTImp.TTImp.IForce', E57, E58} -> (fun (V228, V229) -> {'Idris.TTImp.TTImp.IForce', V228, ('un--substNames\x{27}'(V0, V1, V2, V229))} end(E57, E58)); _ -> V3 end end.
'un--substNames'(V0, V1, V2) -> ('un--substNames\x{27}'(0, V0, V1, V2)).
'un--substLocTy'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.TTImp.TTImp.MkImpTy', V0, V0, V4, ('un--substLoc'(V0, V5))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLocDecl'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.TTImp.TTImp.IClaim', V0, V3, V4, V5, ('un--substLocTy'(V0, V6))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V7, V8, V9) -> {'Idris.TTImp.TTImp.IDef', V0, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--substLocClause'(V0, V10)) end, V9))} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V11, V12, V13) -> {'Idris.TTImp.TTImp.IData', V0, V12, ('un--substLocData'(V0, V13))} end(E8, E9, E10)); {'Idris.TTImp.TTImp.INamespace', E11, E12, E13} -> (fun (V14, V15, V16) -> {'Idris.TTImp.TTImp.INamespace', V0, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V17) -> ('un--substLocDecl'(V0, V17)) end, V16))} end(E11, E12, E13)); _ -> V1 end.
'un--substLocData'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.TTImp.TTImp.MkImpData', V0, V3, ('un--substLoc'(V0, V4)), V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('un--substLocTy'(V0, V7)) end, V6))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V8, V9, V10) -> {'Idris.TTImp.TTImp.MkImpLater', V0, V9, ('un--substLoc'(V0, V10))} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLocClause'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.TTImp.TTImp.PatClause', V0, ('un--substLoc'(V0, V3)), ('un--substLoc'(V0, V4))} end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V5, V6, V7, V8, V9, V10) -> {'Idris.TTImp.TTImp.WithClause', V0, ('un--substLoc'(V0, V6)), ('un--substLoc'(V0, V7)), V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('un--substLocClause'(V0, V11)) end, V10))} end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V12, V13) -> {'Idris.TTImp.TTImp.ImpossibleClause', V0, ('un--substLoc'(V0, V13))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLoc'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> {'Idris.TTImp.TTImp.IVar', V0, V3} end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> {'Idris.TTImp.TTImp.IPi', V0, V5, V6, V7, ('un--substLoc'(V0, V8)), ('un--substLoc'(V0, V9))} end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E8, E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.ILam', V0, V11, V12, V13, ('un--substLoc'(V0, V14)), ('un--substLoc'(V0, V15))} end(E8, E9, E10, E11, E12, E13)); {'Idris.TTImp.TTImp.ILet', E14, E15, E16, E17, E18, E19, E20} -> (fun (V16, V17, V18, V19, V20, V21, V22) -> {'Idris.TTImp.TTImp.ILet', V0, V0, V18, V19, ('un--substLoc'(V0, V20)), ('un--substLoc'(V0, V21)), ('un--substLoc'(V0, V22))} end(E14, E15, E16, E17, E18, E19, E20)); {'Idris.TTImp.TTImp.ICase', E21, E22, E23, E24} -> (fun (V23, V24, V25, V26) -> {'Idris.TTImp.TTImp.ICase', V0, ('un--substLoc'(V0, V24)), ('un--substLoc'(V0, V25)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('un--substLocClause'(V0, V27)) end, V26))} end(E21, E22, E23, E24)); {'Idris.TTImp.TTImp.ILocal', E25, E26, E27} -> (fun (V28, V29, V30) -> {'Idris.TTImp.TTImp.ILocal', V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> ('un--substLocDecl'(V0, V31)) end, V29)), ('un--substLoc'(V0, V30))} end(E25, E26, E27)); {'Idris.TTImp.TTImp.IApp', E28, E29, E30} -> (fun (V32, V33, V34) -> {'Idris.TTImp.TTImp.IApp', V0, ('un--substLoc'(V0, V33)), ('un--substLoc'(V0, V34))} end(E28, E29, E30)); {'Idris.TTImp.TTImp.INamedApp', E31, E32, E33, E34} -> (fun (V35, V36, V37, V38) -> {'Idris.TTImp.TTImp.INamedApp', V0, ('un--substLoc'(V0, V36)), V37, ('un--substLoc'(V0, V38))} end(E31, E32, E33, E34)); {'Idris.TTImp.TTImp.IAutoApp', E35, E36, E37} -> (fun (V39, V40, V41) -> {'Idris.TTImp.TTImp.IAutoApp', V0, ('un--substLoc'(V0, V40)), ('un--substLoc'(V0, V41))} end(E35, E36, E37)); {'Idris.TTImp.TTImp.IWithApp', E38, E39, E40} -> (fun (V42, V43, V44) -> {'Idris.TTImp.TTImp.IWithApp', V0, ('un--substLoc'(V0, V43)), ('un--substLoc'(V0, V44))} end(E38, E39, E40)); {'Idris.TTImp.TTImp.IAlternative', E41, E42, E43} -> (fun (V45, V46, V47) -> {'Idris.TTImp.TTImp.IAlternative', V0, V46, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('un--substLoc'(V0, V48)) end, V47))} end(E41, E42, E43)); {'Idris.TTImp.TTImp.ICoerced', E44, E45} -> (fun (V49, V50) -> {'Idris.TTImp.TTImp.ICoerced', V0, ('un--substLoc'(V0, V50))} end(E44, E45)); {'Idris.TTImp.TTImp.IAs', E46, E47, E48, E49, E50} -> (fun (V51, V52, V53, V54, V55) -> {'Idris.TTImp.TTImp.IAs', V0, V0, V53, V54, ('un--substLoc'(V0, V55))} end(E46, E47, E48, E49, E50)); {'Idris.TTImp.TTImp.IMustUnify', E51, E52, E53} -> (fun (V56, V57, V58) -> {'Idris.TTImp.TTImp.IMustUnify', V0, V57, ('un--substLoc'(V0, V58))} end(E51, E52, E53)); {'Idris.TTImp.TTImp.IDelayed', E54, E55, E56} -> (fun (V59, V60, V61) -> {'Idris.TTImp.TTImp.IDelayed', V0, V60, ('un--substLoc'(V0, V61))} end(E54, E55, E56)); {'Idris.TTImp.TTImp.IDelay', E57, E58} -> (fun (V62, V63) -> {'Idris.TTImp.TTImp.IDelay', V0, ('un--substLoc'(V0, V63))} end(E57, E58)); {'Idris.TTImp.TTImp.IForce', E59, E60} -> (fun (V64, V65) -> {'Idris.TTImp.TTImp.IForce', V0, ('un--substLoc'(V0, V65))} end(E59, E60)); _ -> V1 end.
'un--substBindVars'(V0, V1, V2) -> ('un--substNames\x{27}'(1, V0, V1, V2)).
'un--nameNum'(V0) -> ('case--nameNum-1365'(V0, ('Idris.Idris2.Data.String':'un--span'(fun (V1) -> ('Idris.Idris2.Prelude.Types':'un--isDigit'(V1)) end, ('Idris.Idris2.Prelude.Types':'un--reverse'(V0)))))).
'un--getUnique'(V0, V1) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V4, V5)) end end}, V1, V0)) of 1 -> ('un--getUnique'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"\x{27}"/utf8>>)))); 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findUniqueBindableNames'(V0, V1, V2, V3, V4, V5) -> begin (V26 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V20, V21)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V24, V25)) end end}, V16, V17)) end end}, ('un--findBindableNames'(V2, V3, V4, V5))))), fun (V27) -> begin (V136 = begin (V28 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V27))), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> case case V30 of {'Idris.Core.Options.MkSessionOpts', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V49 end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V51 = begin (V50 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E2} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V53) -> begin (V82 = case V53 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V54 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V132 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V83) -> case V83 of {'Idris.Prelude.Types.Left', E32} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V85) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--catMaybes'(V85))} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V86, V87, [], V88)) end end end, V26, fun (V89) -> fun (V90) -> case V89 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V91, V92) -> begin (V93 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'({'Idris.Core.Name.UN', V91}, V82))(V90))), case V93 of {'Idris.Prelude.Types.Left', E36} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V95) -> begin (V126 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V96) -> fun (V97) -> ('Idris.Idris2.Data.List':'un--mapMaybe'(V96, V97)) end end, V95, fun (V98) -> case V98 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V99, V100) -> case V100 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V101, V102) -> case V102 of {'Idris.Core.Context.MkGlobalDef', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123) -> case V120 of {'Idris.Core.Context.Hole', E63, E64} -> (fun (V124, V125) -> {'Idris.Prelude.Types.Nothing'} end(E63, E64)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V99)) end end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V129, V130)) end end end end, fun (V131) -> {'Idris.Builtin.MkPair', V91, V131} end, ('Idris.Idris2.Data.List1':'un--fromList'(V126))))} end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)), V27))), case V132 of {'Idris.Prelude.Types.Left', E65} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V134) -> case ('Idris.Idris2.Data.List1':'un--fromList'(V134)) of {'Idris.Prelude.Types.Just', E67} -> (fun (V135) -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, {'Idris.Core.Core.ShadowingGlobalDefs', V1, V135}, V27)) end(E67)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V136 of {'Idris.Prelude.Types.Left', E87} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V138) -> {'Idris.Prelude.Types.Right', V26} end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--findIBindVars'(V0) -> case V0 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findIBindVars'(V5)), ('un--findIBindVars'(V6)))) end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E6, E7, E8, E9, E10, E11} -> (fun (V7, V8, V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findIBindVars'(V11)), ('un--findIBindVars'(V12)))) end(E6, E7, E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IApp', E12, E13, E14} -> (fun (V13, V14, V15) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findIBindVars'(V14)), ('un--findIBindVars'(V15)))) end(E12, E13, E14)); {'Idris.TTImp.TTImp.INamedApp', E15, E16, E17, E18} -> (fun (V16, V17, V18, V19) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findIBindVars'(V17)), ('un--findIBindVars'(V19)))) end(E15, E16, E17, E18)); {'Idris.TTImp.TTImp.IAutoApp', E19, E20, E21} -> (fun (V20, V21, V22) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findIBindVars'(V21)), ('un--findIBindVars'(V22)))) end(E19, E20, E21)); {'Idris.TTImp.TTImp.IWithApp', E22, E23, E24} -> (fun (V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findIBindVars'(V24)), ('un--findIBindVars'(V25)))) end(E22, E23, E24)); {'Idris.TTImp.TTImp.IBindVar', E25, E26} -> (fun (V26, V27) -> [{'Idris.Core.Name.UN', V27} | []] end(E25, E26)); {'Idris.TTImp.TTImp.IDelayed', E27, E28, E29} -> (fun (V28, V29, V30) -> ('un--findIBindVars'(V30)) end(E27, E28, E29)); {'Idris.TTImp.TTImp.IDelay', E30, E31} -> (fun (V31, V32) -> ('un--findIBindVars'(V32)) end(E30, E31)); {'Idris.TTImp.TTImp.IForce', E32, E33} -> (fun (V33, V34) -> ('un--findIBindVars'(V34)) end(E32, E33)); {'Idris.TTImp.TTImp.IAlternative', E34, E35, E36} -> (fun (V35, V36, V37) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V49)) end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V53, V54, V55, V56)) end end end end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V61, V62, V63)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V64, V65)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V66) -> ('un--findIBindVars'(V66)) end, V37)) end(E34, E35, E36)); _ -> [] end.
'un--findBindableNames'(V0, V1, V2, V3) -> case V0 of 1 -> case V3 of {'Idris.TTImp.TTImp.IVar', E100, E101} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E152} -> (fun (V6) -> case case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, {'Idris.Core.Name.UN', V6}, V1)) of 1 -> 0; 0 -> ('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> [{'Idris.Builtin.MkPair', V6, ('un--getUnique'(V2, V6))} | []]; 0 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E152)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E102, E103, E104, E105, E106, E107} -> (fun (V11, V12, V13, V14, V15, V16) -> begin (V18 = case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E108} -> (fun (V17) -> [V17 | V1] end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(1, V1, V2, V15)), ('un--findBindableNames'(1, V18, V2, V16)))) end end(E102, E103, E104, E105, E106, E107)); {'Idris.TTImp.TTImp.ILam', E109, E110, E111, E112, E113, E114} -> (fun (V19, V20, V21, V22, V23, V24) -> begin (V26 = case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E115} -> (fun (V25) -> [V25 | V1] end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(1, V1, V2, V23)), ('un--findBindableNames'(1, V26, V2, V24)))) end end(E109, E110, E111, E112, E113, E114)); {'Idris.TTImp.TTImp.IApp', E116, E117, E118} -> (fun (V27, V28, V29) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V28)), ('un--findBindableNames'(1, V1, V2, V29)))) end(E116, E117, E118)); {'Idris.TTImp.TTImp.INamedApp', E119, E120, E121, E122} -> (fun (V30, V31, V32, V33) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V31)), ('un--findBindableNames'(1, V1, V2, V33)))) end(E119, E120, E121, E122)); {'Idris.TTImp.TTImp.IAutoApp', E123, E124, E125} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V35)), ('un--findBindableNames'(1, V1, V2, V36)))) end(E123, E124, E125)); {'Idris.TTImp.TTImp.IWithApp', E126, E127, E128} -> (fun (V37, V38, V39) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V38)), ('un--findBindableNames'(1, V1, V2, V39)))) end(E126, E127, E128)); {'Idris.TTImp.TTImp.IAs', E129, E130, E131, E132, E133} -> (fun (V40, V41, V42, V43, V44) -> case V43 of {'Idris.Core.Name.UN', E134} -> (fun (V45) -> [{'Idris.Builtin.MkPair', V45, ('un--getUnique'(V2, V45))} | ('un--findBindableNames'(V0, V1, V2, V44))] end(E134)); _ -> ('un--findBindableNames'(V0, V1, V2, V44)) end end(E129, E130, E131, E132, E133)); {'Idris.TTImp.TTImp.IMustUnify', E135, E136, E137} -> (fun (V46, V47, V48) -> ('un--findBindableNames'(V0, V1, V2, V48)) end(E135, E136, E137)); {'Idris.TTImp.TTImp.IDelayed', E138, E139, E140} -> (fun (V49, V50, V51) -> ('un--findBindableNames'(V0, V1, V2, V51)) end(E138, E139, E140)); {'Idris.TTImp.TTImp.IDelay', E141, E142} -> (fun (V52, V53) -> ('un--findBindableNames'(V0, V1, V2, V53)) end(E141, E142)); {'Idris.TTImp.TTImp.IForce', E143, E144} -> (fun (V54, V55) -> ('un--findBindableNames'(V0, V1, V2, V55)) end(E143, E144)); {'Idris.TTImp.TTImp.IQuote', E145, E146} -> (fun (V56, V57) -> ('un--findBindableNames'(V0, V1, V2, V57)) end(E145, E146)); {'Idris.TTImp.TTImp.IUnquote', E147, E148} -> (fun (V58, V59) -> ('un--findBindableNames'(V0, V1, V2, V59)) end(E147, E148)); {'Idris.TTImp.TTImp.IAlternative', E149, E150, E151} -> (fun (V60, V61, V62) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V74)) end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V78, V79, V80, V81)) end end end end end end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V83)) end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V86, V87, V88)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V89, V90)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V91) -> ('un--findBindableNames'(V0, V1, V2, V91)) end, V62)) end(E149, E150, E151)); _ -> [] end end end(E100, E101)); _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E50, E51, E52, E53, E54, E55} -> (fun (V92, V93, V94, V95, V96, V97) -> begin (V99 = case V95 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E56} -> (fun (V98) -> [V98 | V1] end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(1, V1, V2, V96)), ('un--findBindableNames'(1, V99, V2, V97)))) end end(E50, E51, E52, E53, E54, E55)); {'Idris.TTImp.TTImp.ILam', E57, E58, E59, E60, E61, E62} -> (fun (V100, V101, V102, V103, V104, V105) -> begin (V107 = case V103 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E63} -> (fun (V106) -> [V106 | V1] end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(1, V1, V2, V104)), ('un--findBindableNames'(1, V107, V2, V105)))) end end(E57, E58, E59, E60, E61, E62)); {'Idris.TTImp.TTImp.IApp', E64, E65, E66} -> (fun (V108, V109, V110) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V109)), ('un--findBindableNames'(1, V1, V2, V110)))) end(E64, E65, E66)); {'Idris.TTImp.TTImp.INamedApp', E67, E68, E69, E70} -> (fun (V111, V112, V113, V114) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V112)), ('un--findBindableNames'(1, V1, V2, V114)))) end(E67, E68, E69, E70)); {'Idris.TTImp.TTImp.IAutoApp', E71, E72, E73} -> (fun (V115, V116, V117) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V116)), ('un--findBindableNames'(1, V1, V2, V117)))) end(E71, E72, E73)); {'Idris.TTImp.TTImp.IWithApp', E74, E75, E76} -> (fun (V118, V119, V120) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V119)), ('un--findBindableNames'(1, V1, V2, V120)))) end(E74, E75, E76)); {'Idris.TTImp.TTImp.IAs', E77, E78, E79, E80, E81} -> (fun (V121, V122, V123, V124, V125) -> case V124 of {'Idris.Core.Name.UN', E82} -> (fun (V126) -> [{'Idris.Builtin.MkPair', V126, ('un--getUnique'(V2, V126))} | ('un--findBindableNames'(V0, V1, V2, V125))] end(E82)); _ -> ('un--findBindableNames'(V0, V1, V2, V125)) end end(E77, E78, E79, E80, E81)); {'Idris.TTImp.TTImp.IMustUnify', E83, E84, E85} -> (fun (V127, V128, V129) -> ('un--findBindableNames'(V0, V1, V2, V129)) end(E83, E84, E85)); {'Idris.TTImp.TTImp.IDelayed', E86, E87, E88} -> (fun (V130, V131, V132) -> ('un--findBindableNames'(V0, V1, V2, V132)) end(E86, E87, E88)); {'Idris.TTImp.TTImp.IDelay', E89, E90} -> (fun (V133, V134) -> ('un--findBindableNames'(V0, V1, V2, V134)) end(E89, E90)); {'Idris.TTImp.TTImp.IForce', E91, E92} -> (fun (V135, V136) -> ('un--findBindableNames'(V0, V1, V2, V136)) end(E91, E92)); {'Idris.TTImp.TTImp.IQuote', E93, E94} -> (fun (V137, V138) -> ('un--findBindableNames'(V0, V1, V2, V138)) end(E93, E94)); {'Idris.TTImp.TTImp.IUnquote', E95, E96} -> (fun (V139, V140) -> ('un--findBindableNames'(V0, V1, V2, V140)) end(E95, E96)); {'Idris.TTImp.TTImp.IAlternative', E97, E98, E99} -> (fun (V141, V142, V143) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V146, V147, V148)) end end end end end, fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V151, V152, V153)) end end end end end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V155)) end end, fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V159, V160, V161, V162)) end end end end end end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V164)) end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V167, V168, V169)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V170, V171)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V172) -> ('un--findBindableNames'(V0, V1, V2, V172)) end, V143)) end(E97, E98, E99)); _ -> [] end end; _ -> case V3 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V173, V174, V175, V176, V177, V178) -> begin (V180 = case V176 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V179) -> [V179 | V1] end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(1, V1, V2, V177)), ('un--findBindableNames'(1, V180, V2, V178)))) end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E7, E8, E9, E10, E11, E12} -> (fun (V181, V182, V183, V184, V185, V186) -> begin (V188 = case V184 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E13} -> (fun (V187) -> [V187 | V1] end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(1, V1, V2, V185)), ('un--findBindableNames'(1, V188, V2, V186)))) end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.IApp', E14, E15, E16} -> (fun (V189, V190, V191) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V190)), ('un--findBindableNames'(1, V1, V2, V191)))) end(E14, E15, E16)); {'Idris.TTImp.TTImp.INamedApp', E17, E18, E19, E20} -> (fun (V192, V193, V194, V195) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V193)), ('un--findBindableNames'(1, V1, V2, V195)))) end(E17, E18, E19, E20)); {'Idris.TTImp.TTImp.IAutoApp', E21, E22, E23} -> (fun (V196, V197, V198) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V197)), ('un--findBindableNames'(1, V1, V2, V198)))) end(E21, E22, E23)); {'Idris.TTImp.TTImp.IWithApp', E24, E25, E26} -> (fun (V199, V200, V201) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findBindableNames'(0, V1, V2, V200)), ('un--findBindableNames'(1, V1, V2, V201)))) end(E24, E25, E26)); {'Idris.TTImp.TTImp.IAs', E27, E28, E29, E30, E31} -> (fun (V202, V203, V204, V205, V206) -> case V205 of {'Idris.Core.Name.UN', E32} -> (fun (V207) -> [{'Idris.Builtin.MkPair', V207, ('un--getUnique'(V2, V207))} | ('un--findBindableNames'(V0, V1, V2, V206))] end(E32)); _ -> ('un--findBindableNames'(V0, V1, V2, V206)) end end(E27, E28, E29, E30, E31)); {'Idris.TTImp.TTImp.IMustUnify', E33, E34, E35} -> (fun (V208, V209, V210) -> ('un--findBindableNames'(V0, V1, V2, V210)) end(E33, E34, E35)); {'Idris.TTImp.TTImp.IDelayed', E36, E37, E38} -> (fun (V211, V212, V213) -> ('un--findBindableNames'(V0, V1, V2, V213)) end(E36, E37, E38)); {'Idris.TTImp.TTImp.IDelay', E39, E40} -> (fun (V214, V215) -> ('un--findBindableNames'(V0, V1, V2, V215)) end(E39, E40)); {'Idris.TTImp.TTImp.IForce', E41, E42} -> (fun (V216, V217) -> ('un--findBindableNames'(V0, V1, V2, V217)) end(E41, E42)); {'Idris.TTImp.TTImp.IQuote', E43, E44} -> (fun (V218, V219) -> ('un--findBindableNames'(V0, V1, V2, V219)) end(E43, E44)); {'Idris.TTImp.TTImp.IUnquote', E45, E46} -> (fun (V220, V221) -> ('un--findBindableNames'(V0, V1, V2, V221)) end(E45, E46)); {'Idris.TTImp.TTImp.IAlternative', E47, E48, E49} -> (fun (V222, V223, V224) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V227, V228, V229)) end end end end end, fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V232, V233, V234)) end end end end end, fun (V235) -> fun (V236) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V236)) end end, fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V240, V241, V242, V243)) end end end end end end end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V245)) end end, fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V248, V249, V250)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V251) -> fun (V252) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V251, V252)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V253) -> ('un--findBindableNames'(V0, V1, V2, V253)) end, V224)) end(E47, E48, E49)); _ -> [] end end.
'un--findAllNames'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, V3, V0)) of 1 -> []; 0 -> [V3 | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E2, E3, E4, E5, E6, E7} -> (fun (V8, V9, V10, V11, V12, V13) -> begin (V15 = case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V14) -> [V14 | V0] end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findAllNames'(V0, V12)), ('un--findAllNames'(V15, V13)))) end end(E2, E3, E4, E5, E6, E7)); {'Idris.TTImp.TTImp.ILam', E9, E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20, V21) -> begin (V23 = case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E15} -> (fun (V22) -> [V22 | V0] end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findAllNames'(V23, V20)), ('un--findAllNames'(V23, V21)))) end end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.IApp', E16, E17, E18} -> (fun (V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findAllNames'(V0, V25)), ('un--findAllNames'(V0, V26)))) end(E16, E17, E18)); {'Idris.TTImp.TTImp.INamedApp', E19, E20, E21, E22} -> (fun (V27, V28, V29, V30) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findAllNames'(V0, V28)), ('un--findAllNames'(V0, V30)))) end(E19, E20, E21, E22)); {'Idris.TTImp.TTImp.IAutoApp', E23, E24, E25} -> (fun (V31, V32, V33) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findAllNames'(V0, V32)), ('un--findAllNames'(V0, V33)))) end(E23, E24, E25)); {'Idris.TTImp.TTImp.IWithApp', E26, E27, E28} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--findAllNames'(V0, V35)), ('un--findAllNames'(V0, V36)))) end(E26, E27, E28)); {'Idris.TTImp.TTImp.IAs', E29, E30, E31, E32, E33} -> (fun (V37, V38, V39, V40, V41) -> [V40 | ('un--findAllNames'(V0, V41))] end(E29, E30, E31, E32, E33)); {'Idris.TTImp.TTImp.IMustUnify', E34, E35, E36} -> (fun (V42, V43, V44) -> ('un--findAllNames'(V0, V44)) end(E34, E35, E36)); {'Idris.TTImp.TTImp.IDelayed', E37, E38, E39} -> (fun (V45, V46, V47) -> ('un--findAllNames'(V0, V47)) end(E37, E38, E39)); {'Idris.TTImp.TTImp.IDelay', E40, E41} -> (fun (V48, V49) -> ('un--findAllNames'(V0, V49)) end(E40, E41)); {'Idris.TTImp.TTImp.IForce', E42, E43} -> (fun (V50, V51) -> ('un--findAllNames'(V0, V51)) end(E42, E43)); {'Idris.TTImp.TTImp.IQuote', E44, E45} -> (fun (V52, V53) -> ('un--findAllNames'(V0, V53)) end(E44, E45)); {'Idris.TTImp.TTImp.IUnquote', E46, E47} -> (fun (V54, V55) -> ('un--findAllNames'(V0, V55)) end(E46, E47)); {'Idris.TTImp.TTImp.IAlternative', E48, E49, E50} -> (fun (V56, V57, V58) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V70)) end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V74, V75, V76, V77)) end end end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V79)) end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V82, V83, V84)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V85, V86)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V87) -> ('un--findAllNames'(V0, V87)) end, V58)) end(E48, E49, E50)); _ -> [] end.
