-module('Idris.Idris2.Idris.Driver').
-compile('no_auto_import').
-export([
  'case--mainWithCodegens-4700'/3,
  'case--case block in case block in case block in case block in case block in case block in stMain-4080'/25,
  'nested--13568-3243--in--un--renderError'/7,
  'un--updateREPLOpts'/2,
  'un--updateEnv'/2,
  'un--tryYaffle'/1,
  'un--tryTTM'/1,
  'un--stMain'/3,
  'un--showInfo'/3,
  'un--quitOpts'/1,
  'un--mainWithCodegens'/2,
  'un--ignoreMissingIpkg'/1,
  'un--getPrivDir'/1,
  'un--findInput'/1,
  'un--checkVerbose'/1,
  'un--banner'/0
]).
'case--mainWithCodegens-4700'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = (('un--quitOpts'(V3))(V4))), (('Idris.Idris2.Prelude.Interfaces':'un--when'({'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, V5, fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> V27 end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), begin (V35 = (V32(V33))), (V34(V35)) end end end end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), ((V39(V41))(V40)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V43(V44))), (V45(V44)) end end end end}, fun (V46) -> ('Idris.Idris2.Libraries.Utils.Term':'un--setupTerm'(V46)) end, fun () -> fun (V47) -> ('Idris.Idris2.Core.Core':'un--coreRun'(fun (V48) -> ('un--stMain'(V1, V3, V48)) end, fun (V49) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> V56 end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), begin (V64 = (V61(V62))), (V63(V64)) end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), ((V68(V70))(V69)) end end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V72(V73))), (V74(V73)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V77, V78, V79)) end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> V81 end end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> begin (V88 = (V85(V87))), begin (V89 = (V86(V87))), (V88(V89)) end end end end end end end}, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V92(V94))), ((V93(V95))(V94)) end end end end end end, fun (V96) -> fun (V97) -> fun (V98) -> begin (V99 = (V97(V98))), (V99(V98)) end end end end}, fun (V100) -> fun (V101) -> V101 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Uncaught error: "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V49)))))), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> V108 end end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), begin (V116 = (V113(V114))), (V115(V116)) end end end end end end end}, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), ((V120(V122))(V121)) end end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V124(V125))), (V126(V125)) end end end end}, fun (V127) -> fun (V128) -> V128 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end)) end, fun (V129) -> fun (V130) -> 0 end end, V47)) end end)) end))(V4)) end end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V131) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V134, V135, V136)) end end end end end, fun (V137) -> fun (V138) -> fun (V139) -> V138 end end end, fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> begin (V145 = (V142(V144))), begin (V146 = (V143(V144))), (V145(V146)) end end end end end end end}, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> begin (V152 = (V149(V151))), ((V150(V152))(V151)) end end end end end end, fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V154(V155))), (V156(V155)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> V163 end end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> begin (V170 = (V167(V169))), begin (V171 = (V168(V169))), (V170(V171)) end end end end end end end}, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), ((V175(V177))(V176)) end end end end end end, fun (V178) -> fun (V179) -> fun (V180) -> begin (V181 = (V179(V180))), (V181(V180)) end end end end}, fun (V182) -> fun (V183) -> V183 end end}, V131)), fun () -> ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V186, V187, V188)) end end end end end, fun (V189) -> fun (V190) -> fun (V191) -> V190 end end end, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> begin (V197 = (V194(V196))), begin (V198 = (V195(V196))), (V197(V198)) end end end end end end end}, fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> begin (V204 = (V201(V203))), ((V202(V204))(V203)) end end end end end end, fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V206(V207))), (V208(V207)) end end end end}, fun (V209) -> fun (V210) -> V210 end end}, ('Idris.Idris2.Idris.CommandLine':'un--usage'()))) end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in stMain-4080'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V25, V26) -> begin (V28 = begin (V27 = ('Idris.Idris2.Idris.IDEMode.REPL':'un--initIDESocketFile'(V25, V26, V24))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> begin (V60 = begin (V59 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, V31))(V24))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E5} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V62) -> begin (V90 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> V69 end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), begin (V77 = (V74(V75))), (V76(V77)) end end end end end end end}, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), ((V81(V83))(V82)) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V85(V86))), (V87(V86)) end end end end}, fun (V88) -> fun (V89) -> V89 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V24))), {'Idris.Prelude.Types.Right', V90} end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Right', E7} -> (fun (V91) -> begin (V92 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V12, {'Idris.Idris.REPL.Opts.IDEMode', 0, V91, V91}, V24))), case V92 of {'Idris.Prelude.Types.Left', E8} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V94) -> ('Idris.Idris2.Idris.IDEMode.REPL':'un--replIDE'(V6, V16, V7, V18, V12, V24)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13568-3243--in--un--renderError'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('Idris.Idris2.Idris.Error':'un--perror'(V2, V3, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Idris.Pretty':'un--render'(V4, V9, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.UserError', V12}, V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateREPLOpts'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"EDITOR"/utf8>>, 0))(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E4} -> (fun (V37) -> begin (V54 = ('erlang':'put'(V0, case V5 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Idris.REPL.Opts.MkREPLOpts', V38, V39, V40, V41, V42, V37, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateEnv'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"IDRIS2_PREFIX"/utf8>>, 0))(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> begin (V38 = case V36 of {'Idris.Prelude.Types.Just', E4} -> (fun (V37) -> ('Idris.Idris2.Core.Context':'un--setPrefix'(V0, V37, V1)) end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V38 of {'Idris.Prelude.Types.Left', E5} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V40) -> begin (V69 = begin (V68 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> V47 end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), begin (V55 = (V52(V53))), (V54(V55)) end end end end end end end}, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), ((V59(V61))(V60)) end end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V63(V64))), (V65(V64)) end end end end}, fun (V66) -> fun (V67) -> V67 end end}, <<"IDRIS2_PATH"/utf8>>, 0))(V1))), {'Idris.Prelude.Types.Right', V68} end), case V69 of {'Idris.Prelude.Types.Left', E7} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V71) -> begin (V77 = case V71 of {'Idris.Prelude.Types.Just', E9} -> (fun (V72) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'(fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Context':'un--addExtraDir'(V0, V73, V74)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V75) -> ('Idris.Idris2.Data.String':'un--trim'(V75)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V76) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V76, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V72))))))(V1)) end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V77 of {'Idris.Prelude.Types.Left', E10} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V79) -> begin (V108 = begin (V107 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V82, V83, V84)) end end end end end, fun (V85) -> fun (V86) -> fun (V87) -> V86 end end end, fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> begin (V93 = (V90(V92))), begin (V94 = (V91(V92))), (V93(V94)) end end end end end end end}, fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V97(V99))), ((V98(V100))(V99)) end end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V102(V103))), (V104(V103)) end end end end}, fun (V105) -> fun (V106) -> V106 end end}, <<"IDRIS2_DATA"/utf8>>, 0))(V1))), {'Idris.Prelude.Types.Right', V107} end), case V108 of {'Idris.Prelude.Types.Left', E12} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V110) -> begin (V116 = case V110 of {'Idris.Prelude.Types.Just', E14} -> (fun (V111) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'(fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Context':'un--addDataDir'(V0, V112, V113)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V114) -> ('Idris.Idris2.Data.String':'un--trim'(V114)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V115, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V111))))))(V1)) end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V116 of {'Idris.Prelude.Types.Left', E15} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V118) -> begin (V147 = begin (V146 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V121, V122, V123)) end end end end end, fun (V124) -> fun (V125) -> fun (V126) -> V125 end end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), begin (V133 = (V130(V131))), (V132(V133)) end end end end end end end}, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> begin (V139 = (V136(V138))), ((V137(V139))(V138)) end end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> begin (V143 = (V141(V142))), (V143(V142)) end end end end}, fun (V144) -> fun (V145) -> V145 end end}, <<"IDRIS2_LIBS"/utf8>>, 0))(V1))), {'Idris.Prelude.Types.Right', V146} end), case V147 of {'Idris.Prelude.Types.Left', E17} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V149) -> begin (V155 = case V149 of {'Idris.Prelude.Types.Just', E19} -> (fun (V150) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'(fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, V151, V152)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V153) -> ('Idris.Idris2.Data.String':'un--trim'(V153)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V154) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V154, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V150))))))(V1)) end(E19)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V155 of {'Idris.Prelude.Types.Left', E20} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V157) -> begin (V186 = begin (V185 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V160, V161, V162)) end end end end end, fun (V163) -> fun (V164) -> fun (V165) -> V164 end end end, fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> begin (V171 = (V168(V170))), begin (V172 = (V169(V170))), (V171(V172)) end end end end end end end}, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> begin (V178 = (V175(V177))), ((V176(V178))(V177)) end end end end end end, fun (V179) -> fun (V180) -> fun (V181) -> begin (V182 = (V180(V181))), (V182(V181)) end end end end}, fun (V183) -> fun (V184) -> V184 end end}, <<"IDRIS2_PACKAGE_PATH"/utf8>>, 0))(V1))), {'Idris.Prelude.Types.Right', V185} end), case V186 of {'Idris.Prelude.Types.Left', E22} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V188) -> begin (V194 = case V188 of {'Idris.Prelude.Types.Just', E24} -> (fun (V189) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'(fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, V190, V191)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V192) -> ('Idris.Idris2.Data.String':'un--trim'(V192)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V193, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V189))))))(V1)) end(E24)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V194 of {'Idris.Prelude.Types.Left', E25} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V196) -> begin (V225 = begin (V224 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V199, V200, V201)) end end end end end, fun (V202) -> fun (V203) -> fun (V204) -> V203 end end end, fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V207(V209))), begin (V211 = (V208(V209))), (V210(V211)) end end end end end end end}, fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> begin (V217 = (V214(V216))), ((V215(V217))(V216)) end end end end end end, fun (V218) -> fun (V219) -> fun (V220) -> begin (V221 = (V219(V220))), (V221(V220)) end end end end}, fun (V222) -> fun (V223) -> V223 end end}, <<"IDRIS2_CG"/utf8>>, 0))(V1))), {'Idris.Prelude.Types.Right', V224} end), case V225 of {'Idris.Prelude.Types.Left', E27} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V227) -> begin (V258 = case V227 of {'Idris.Prelude.Types.Just', E29} -> (fun (V228) -> case ('Idris.Idris2.Core.Options':'un--getCG'(case V5 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256) -> V233 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V228)) of {'Idris.Prelude.Types.Just', E30} -> (fun (V257) -> ('Idris.Idris2.Core.Context':'un--setCG'(V0, V257, V1)) end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown code generator "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V228))))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V258 of {'Idris.Prelude.Types.Left', E59} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V260) -> begin (V262 = begin (V261 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V261} end), case V262 of {'Idris.Prelude.Types.Left', E61} -> (fun (V263) -> {'Idris.Prelude.Types.Left', V263} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V264) -> begin (V265 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"prelude"/utf8>>, V1))), case V265 of {'Idris.Prelude.Types.Left', E63} -> (fun (V266) -> {'Idris.Prelude.Types.Left', V266} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V267) -> begin (V268 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"base"/utf8>>, V1))), case V268 of {'Idris.Prelude.Types.Left', E65} -> (fun (V269) -> {'Idris.Prelude.Types.Left', V269} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V270) -> begin (V271 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"erlang"/utf8>>, V1))), case V271 of {'Idris.Prelude.Types.Left', E67} -> (fun (V272) -> {'Idris.Prelude.Types.Left', V272} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V273) -> begin (V275 = begin (V274 = ('un--getPrivDir'(V1))), {'Idris.Prelude.Types.Right', V274} end), case V275 of {'Idris.Prelude.Types.Left', E69} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V277) -> case V277 of {'Idris.Prelude.Types.Just', E71} -> (fun (V278) -> begin (V279 = ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V278, <<"libs"/utf8>>)), V1))), case V279 of {'Idris.Prelude.Types.Left', E72} -> (fun (V280) -> {'Idris.Prelude.Types.Left', V280} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V281) -> begin (V282 = ('Idris.Idris2.Core.Context':'un--addDataDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V278, <<"support"/utf8>>)), V1))), case V282 of {'Idris.Prelude.Types.Left', E74} -> (fun (V283) -> {'Idris.Prelude.Types.Left', V283} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V284) -> begin (V285 = ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, <<"lib"/utf8>>, V1))), case V285 of {'Idris.Prelude.Types.Left', E76} -> (fun (V286) -> {'Idris.Prelude.Types.Left', V286} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V287) -> ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V278, <<"lib"/utf8>>)), V1)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V315 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> fun (V292) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V290, V291, V292)) end end end end end, fun (V293) -> fun (V294) -> fun (V295) -> V294 end end end, fun (V296) -> fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> begin (V301 = (V298(V300))), begin (V302 = (V299(V300))), (V301(V302)) end end end end end end end}, fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> begin (V308 = (V305(V307))), ((V306(V308))(V307)) end end end end end end, fun (V309) -> fun (V310) -> fun (V311) -> begin (V312 = (V310(V311))), (V312(V311)) end end end end}, fun (V313) -> fun (V314) -> V314 end end}, <<"Directory idris2/priv not found"/utf8>>))(V1))), {'Idris.Prelude.Types.Right', V315} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tryYaffle'(V0) -> case V0 of [] -> fun (V1) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Yaffle', E2} -> (fun (V4) -> fun (V5) -> begin (V6 = ('Idris.Idris2.Yaffle.Main':'un--yaffleMain'(V4, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Right', 1} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--tryYaffle'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryTTM'(V0) -> case V0 of [] -> fun (V1) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Metadata', E2} -> (fun (V4) -> fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Metadata':'un--dumpTTM'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Right', 1} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--tryTTM'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--stMain'(V0, V1, V2) -> begin (V3 = (('un--tryYaffle'(V1))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> begin (V6 = (('un--tryTTM'(V1))(V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = 0), case V8 of 0 -> begin (V10 = ('Idris.Idris2.Core.Context':'un--initDefs'(V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V45 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V13) -> fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> ('Idris.Idris2.Core.Options':'un--addCG'({'Idris.Builtin.MkPair', V15, {'Idris.Core.Options.Other', V15}}, V13)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V12 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V21 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))), begin (V74 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Context.Ctxt'}, case V12 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> {'Idris.Core.Context.MkDefs', V46, V47, V48, V49, V45, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V74 of {'Idris.Prelude.Types.Left', E64} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.Syntax.Syn'}, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'()), V2))), case V77 of {'Idris.Prelude.Types.Left', E66} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V79) -> begin (V81 = ('Idris.Idris2.Core.Context':'un--setCG'(V76, ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.Options.Chez'} end, fun () -> fun (V80) -> {'Idris.Core.Options.Other', ('Idris.Idris2.Builtin':'un--fst'(V80))} end end, ('Idris.Idris2.Data.List':'un--head\x{27}'(V0)))), V2))), case V81 of {'Idris.Prelude.Types.Left', E68} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V83) -> begin (V84 = ('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V76, V2))), case V84 of {'Idris.Prelude.Types.Left', E70} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V76, <<"."/utf8>>, V2))), case V87 of {'Idris.Prelude.Types.Left', E72} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V89) -> begin (V112 = begin (V90 = ('Idris.Idris2.Core.Context':'un--getSession'(V76, V2))), case V90 of {'Idris.Prelude.Types.Left', E74} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V92) -> case ('un--ignoreMissingIpkg'(V1)) of 1 -> ('Idris.Idris2.Core.Context':'un--setSession'(V76, case V92 of {'Idris.Core.Options.MkSessionOpts', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> {'Idris.Core.Options.MkSessionOpts', V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, 1, V104, V105, V106, V107, V108, V109, V110, V111} end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V112 of {'Idris.Prelude.Types.Left', E95} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V114) -> begin (V115 = ('un--updateEnv'(V76, V2))), case V115 of {'Idris.Prelude.Types.Left', E97} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V117) -> begin (V118 = ('Idris.Idris2.Idris.SetOptions':'un--ideMode'(V1))), begin (V119 = ('Idris.Idris2.Idris.SetOptions':'un--ideModeSocket'(V1))), begin (V120 = case V118 of 1 -> {'Idris.Idris.REPL.Opts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}; 0 -> {'Idris.Idris.REPL.Opts.REPL', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V121 = ('un--findInput'(V1))), begin (V122 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.REPL.Opts.ROpts'}, ('Idris.Idris2.Idris.REPL.Opts':'un--defaultOpts'(V121, V120, V0)), V2))), case V122 of {'Idris.Prelude.Types.Left', E99} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V124) -> begin (V125 = (('un--showInfo'(V76, V124, V1))(V2))), case V125 of {'Idris.Prelude.Types.Left', E101} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V127) -> case V127 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V128 = ('Idris.Idris2.Idris.Package':'un--processPackageOpts'(V76, V79, V124, V1, V2))), case V128 of {'Idris.Prelude.Types.Left', E103} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V130) -> case V130 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> (('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(V131, V132, V133)) end end end, fun (V134) -> fun (V135) -> ('nested--13568-3243--in--un--renderError'(V1, V0, V76, V79, V124, V134, V135)) end end, fun (V136) -> begin (V137 = (('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V76, V124, V1))(V136))), case V137 of {'Idris.Prelude.Types.Left', E105} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V139) -> begin (V140 = 0), case V139 of 1 -> begin (V141 = case ('un--checkVerbose'(V1)) of 1 -> ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V124, {'Idris.Idris.REPL.Opts.REPL', 0}, V136)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V141 of {'Idris.Prelude.Types.Left', E107} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V143) -> begin (V144 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V136))), case V144 of {'Idris.Prelude.Types.Left', E109} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V146) -> begin (V153 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V147) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.Virtual', 0}} end end, fun () -> fun (V148) -> fun (V149) -> begin (V150 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V76, V148, V149))), case V150 of {'Idris.Prelude.Types.Left', E111} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V152) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.PhysicalIdrSrc', V152}} end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V121))(V136))), case V153 of {'Idris.Prelude.Types.Left', E113} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V155) -> begin (V156 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'(V155)), V136))), case V156 of {'Idris.Prelude.Types.Left', E115} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V158) -> begin (V159 = ('un--updateREPLOpts'(V124, V136))), case V159 of {'Idris.Prelude.Types.Left', E117} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V161) -> begin (V162 = ('Idris.Idris2.Core.Context':'un--getSession'(V76, V136))), case V162 of {'Idris.Prelude.Types.Left', E119} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V164) -> begin (V192 = case case V164 of {'Idris.Core.Options.MkSessionOpts', E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141} -> (fun (V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183) -> V166 end(E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V184 = ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V76, V124, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('un--banner'()))), V136))), case V184 of {'Idris.Prelude.Types.Left', E121} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V186) -> case ('Idris.Idris2.Data.List':'un--isCons'(V0)) of 1 -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V76, V124, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"With codegen for:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V189, V190)) end end end end, fun (V191) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Builtin':'un--fst'(V191)))) end, V0)))))), V136)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V192 of {'Idris.Prelude.Types.Left', E142} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V194) -> begin (V214 = case case V164 of {'Idris.Core.Options.MkSessionOpts', E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162} -> (fun (V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213) -> V197 end(E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Idris.Package':'un--findIpkg'(V76, V124, V79, V121, V136)); 0 -> {'Idris.Prelude.Types.Right', V121}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V214 of {'Idris.Prelude.Types.Left', E163} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V216) -> begin (V217 = ('Idris.Idris2.Idris.REPL.Opts':'un--setMainFile'(V124, V216, V136))), case V217 of {'Idris.Prelude.Types.Left', E165} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V219) -> begin (V251 = case V216 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V76, fun () -> <<"+ Loading prelude"/utf8>> end, fun (V220) -> begin (V240 = case case V164 of {'Idris.Core.Options.MkSessionOpts', E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185} -> (fun (V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239) -> V221 end(E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Idris.ProcessIdr':'un--readPrelude'(V76, V146, V79, 1, V220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V240 of {'Idris.Prelude.Types.Left', E186} -> (fun (V241) -> {'Idris.Prelude.Types.Left', V241} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V242) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Common.Done'}} end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V136)) end()); {'Idris.Prelude.Types.Just', E188} -> (fun (V243) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V76, fun () -> <<"+ Loading main file"/utf8>> end, fun (V244) -> begin (V245 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V76, V146, V79, V158, V124, V243, V244))), case V245 of {'Idris.Prelude.Types.Left', E189} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E189)); {'Idris.Prelude.Types.Right', E190} -> (fun (V247) -> begin (V248 = ('Idris.Idris2.Idris.REPL':'un--displayErrors'(V76, V146, V79, V158, V124, V247, V244))), case V248 of {'Idris.Prelude.Types.Left', E191} -> (fun (V249) -> {'Idris.Prelude.Types.Left', V249} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V250) -> {'Idris.Prelude.Types.Right', V247} end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V136)) end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V251 of {'Idris.Prelude.Types.Left', E193} -> (fun (V252) -> {'Idris.Prelude.Types.Left', V252} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V253) -> begin (V258 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(('Idris.Idris2.Idris.SetOptions':'un--postOptions'(V76, V146, V79, V158, V124, V253, V1)), fun (V254) -> fun (V255) -> ('Idris.Idris2.Core.Core':'un--*>'(fun (V256) -> ('Idris.Idris2.Idris.REPL.Common':'un--emitError'(V76, V124, V79, V254, V256)) end, fun (V257) -> {'Idris.Prelude.Types.Right', 0} end, V255)) end end, V136))), case V258 of {'Idris.Prelude.Types.Left', E195} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V260) -> begin (V261 = 1), case V260 of 1 -> begin (V262 = 1), case case V118 of 1 -> 1; 0 -> V119; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case V119 of 1 -> ('case--case block in case block in case block in case block in case block in case block in stMain-4080'(V1, V0, V9, V140, V12, V45, V76, V79, V118, V119, V120, V121, V124, V127, V130, V261, V146, V155, V158, V164, V216, V253, V262, ('Idris.Idris2.Idris.CommandLine':'un--ideSocketModeAddress'(V1)), V136)); 0 -> begin (V263 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V124, {'Idris.Idris.REPL.Opts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}, V136))), case V263 of {'Idris.Prelude.Types.Left', E197} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V265) -> ('Idris.Idris2.Idris.IDEMode.REPL':'un--replIDE'(V76, V146, V79, V158, V124, V136)) end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> begin (V266 = ('Idris.Idris2.Idris.REPL':'un--repl'(V76, V146, V79, V158, V124, V136))), case V266 of {'Idris.Prelude.Types.Left', E199} -> (fun (V267) -> {'Idris.Prelude.Types.Left', V267} end(E199)); {'Idris.Prelude.Types.Right', E200} -> (fun (V268) -> ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V76, V136)) end(E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V270 = begin (V269 = ('erlang':'get'(V124))), {'Idris.Prelude.Types.Right', V269} end), case V270 of {'Idris.Prelude.Types.Left', E201} -> (fun (V271) -> {'Idris.Prelude.Types.Left', V271} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V272) -> begin (V273 = ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V76, V136))), case V273 of {'Idris.Prelude.Types.Left', E203} -> (fun (V274) -> {'Idris.Prelude.Types.Left', V274} end(E203)); {'Idris.Prelude.Types.Right', E204} -> (fun (V275) -> case V272 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220} -> (fun (V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291) -> case V282 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E221} -> (fun (V292) -> begin (V320 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V295, V296, V297)) end end end end end, fun (V298) -> fun (V299) -> fun (V300) -> V299 end end end, fun (V301) -> fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> begin (V306 = (V303(V305))), begin (V307 = (V304(V305))), (V306(V307)) end end end end end end end}, fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> begin (V313 = (V310(V312))), ((V311(V313))(V312)) end end end end end end, fun (V314) -> fun (V315) -> fun (V316) -> begin (V317 = (V315(V316))), (V317(V316)) end end end end}, fun (V318) -> fun (V319) -> V319 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V136))), {'Idris.Prelude.Types.Right', V320} end end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showInfo'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Idris.CommandLine.BlodwenPaths'} -> (fun () -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V48 = ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V0, V1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Options':'un--toString'(case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V15 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V39 end(E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V6))), case V48 of {'Idris.Prelude.Types.Left', E41} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V50) -> {'Idris.Prelude.Types.Right', 1} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('un--showInfo'(V0, V1, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quitOpts'(V0) -> case V0 of [] -> fun (V1) -> 1 end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Version'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, ('Idris.Idris2.Idris.CommandLine':'un--versionMsg'()))), fun () -> fun (V56) -> 0 end end)) end()); {'Idris.Idris.CommandLine.Help', E2} -> (fun (V57) -> case V57 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V85, V86, V87)) end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> V89 end end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> begin (V96 = (V93(V95))), begin (V97 = (V94(V95))), (V96(V97)) end end end end end end end}, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> begin (V103 = (V100(V102))), ((V101(V103))(V102)) end end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V105(V106))), (V107(V106)) end end end end}, fun (V108) -> fun (V109) -> V109 end end}, ('Idris.Idris2.Idris.CommandLine':'un--usage'()))), fun () -> fun (V110) -> 0 end end)) end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V111) -> case V111 of 0 -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V114, V115, V116)) end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> V118 end end end, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> begin (V125 = (V122(V124))), begin (V126 = (V123(V124))), (V125(V126)) end end end end end end end}, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), ((V130(V132))(V131)) end end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> begin (V136 = (V134(V135))), (V136(V135)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V139, V140, V141)) end end end end end, fun (V142) -> fun (V143) -> fun (V144) -> V143 end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V147(V149))), begin (V151 = (V148(V149))), (V150(V151)) end end end end end end end}, fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V154(V156))), ((V155(V157))(V156)) end end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V159(V160))), (V161(V160)) end end end end}, fun (V162) -> fun (V163) -> V163 end end}, ('Idris.Idris2.Core.Options.Log':'un--helpTopics'()))), fun () -> fun (V164) -> 0 end end)); _ -> ('un--quitOpts'(V3)) end end(E3)); _ -> ('un--quitOpts'(V3)) end end(E2)); {'Idris.Idris.CommandLine.ShowPrefix'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V167, V168, V169)) end end end end end, fun (V170) -> fun (V171) -> fun (V172) -> V171 end end end, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> begin (V178 = (V175(V177))), begin (V179 = (V176(V177))), (V178(V179)) end end end end end end end}, fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> begin (V185 = (V182(V184))), ((V183(V185))(V184)) end end end end end end, fun (V186) -> fun (V187) -> fun (V188) -> begin (V189 = (V187(V188))), (V189(V188)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V192, V193, V194)) end end end end end, fun (V195) -> fun (V196) -> fun (V197) -> V196 end end end, fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> begin (V203 = (V200(V202))), begin (V204 = (V201(V202))), (V203(V204)) end end end end end end end}, fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V207(V209))), ((V208(V210))(V209)) end end end end end end, fun (V211) -> fun (V212) -> fun (V213) -> begin (V214 = (V212(V213))), (V214(V213)) end end end end}, fun (V215) -> fun (V216) -> V216 end end}, ('Idris.Idris2.IdrisPaths':'un--yprefix'()))), fun () -> fun (V217) -> 0 end end)) end()); _ -> ('un--quitOpts'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mainWithCodegens'(V0, V1) -> ('case--mainWithCodegens-4700'(V1, V0, ('Idris.Idris2.Idris.CommandLine':'un--getOpts'(V1)))).
'un--ignoreMissingIpkg'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.IgnoreMissingIPKG'} -> (fun () -> 1 end()); _ -> ('un--ignoreMissingIpkg'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPrivDir'(V0) -> begin (V1 = ('erlang':'apply'('code', 'priv_dir', ['idris2' | []]))), ('Idris.Idris2.Erlang.Decode':'un--erlDecodeMay'({'Idris.Erlang.Types.ETErlTerm'}, fun (V2) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'(fun (V3) -> case V3 of E0 -> (fun (V4) -> V4 end((fun (V5) -> ('unicode':'characters_to_binary'(V5)) end(E0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V6) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V6)) end, V2)) end, V1)) end.
'un--findInput'(V0) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.InputFile', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> ('un--findInput'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkVerbose'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.Verbose'} -> (fun () -> 1 end()); _ -> ('un--checkVerbose'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--banner'() -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"     ____    __     _         ___                                           \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"    /  _/___/ /____(_)____   |__ \x{5c}                                          \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"    / // __  / ___/ / ___/   __/ /     Version "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Version':'un--showVersion'(1, ('Idris.Idris2.Idris.Version':'un--version'()))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  _/ // /_/ / /  / (__  )   / __/      https://www.idris-lang.org           \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" /___/\x{5c}__,_/_/  /_/____/   /____/      Type :? for help                     \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, <<"Welcome to Idris 2.  Enjoy yourself!"/utf8>>)))))))))))))))).
