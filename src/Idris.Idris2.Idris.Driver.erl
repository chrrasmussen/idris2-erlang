-module('Idris.Idris2.Idris.Driver').
-compile('no_auto_import').
-export([
  'case--mainWithCodegens-4572'/3,
  'case--case block in case block in stMain-4477'/6,
  'case--case block in case block in case block in case block in stMain-4298'/24,
  'case--case block in case block in case block in case block in case block in case block in case block in stMain-4067'/25,
  'case--case block in case block in case block in case block in case block in case block in stMain-4007'/23,
  'case--case block in case block in case block in case block in case block in stMain-3907'/23,
  'case--case block in case block in case block in case block in stMain-3859'/23,
  'case--case block in case block in case block in stMain-3814'/22,
  'case--case block in case block in case block in stMain-3697'/20,
  'case--case block in case block in case block in stMain-3611'/20,
  'case--case block in case block in stMain-3476'/16,
  'case--case block in case block in stMain-3458'/9,
  'case--case block in case block in stMain-3344'/10,
  'case--case block in case block in stMain-3273'/7,
  'case--case block in stMain-3251'/4,
  'case--stMain-3240'/3,
  'case--case block in updateREPLOpts-3074'/4,
  'case--updateREPLOpts-3042'/3,
  'case--updateEnv-2998'/3,
  'case--updateEnv-2962'/4,
  'case--updateEnv-2922'/5,
  'case--updateEnv-2878'/6,
  'case--updateEnv-2830'/7,
  'case--case block in updateEnv-2758'/10,
  'case--updateEnv-2737'/8,
  'case--updateEnv-2671'/10,
  'case--getPrivDir-2486'/2,
  'nested--19828-3212--in--un--renderError'/7,
  'un--updateREPLOpts'/2,
  'un--updateEnv'/2,
  'un--tryYaffle'/1,
  'un--tryTTM'/1,
  'un--stMain'/3,
  'un--showInfo'/3,
  'un--quitOpts'/1,
  'un--mainWithCodegens'/2,
  'un--ignoreMissingIpkg'/1,
  'un--getPrivDir'/1,
  'un--findInput'/1,
  'un--checkVerbose'/1,
  'un--banner'/0
]).
'case--mainWithCodegens-4572'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = (('un--quitOpts'(V3))(V4))), (('Idris.Idris2.Prelude.Interfaces':'un--when'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, V5, fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> V27 end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), begin (V35 = (V32(V33))), (V34(V35)) end end end end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), ((V39(V41))(V40)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V43(V44))), (V45(V44)) end end end end}, fun (V46) -> ('Idris.Idris2.Libraries.Utils.Term':'un--setupTerm'(V46)) end, fun () -> fun (V47) -> ('Idris.Idris2.Core.Core':'un--coreRun'('erased', 'erased', fun (V48) -> ('un--stMain'(V1, V3, V48)) end, fun (V49) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> V56 end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), begin (V64 = (V61(V62))), (V63(V64)) end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), ((V68(V70))(V69)) end end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V72(V73))), (V74(V73)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V77, V78, V79)) end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> V81 end end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> begin (V88 = (V85(V87))), begin (V89 = (V86(V87))), (V88(V89)) end end end end end end end}, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V92(V94))), ((V93(V95))(V94)) end end end end end end, fun (V96) -> fun (V97) -> fun (V98) -> begin (V99 = (V97(V98))), (V99(V98)) end end end end}, fun (V100) -> fun (V101) -> V101 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Uncaught error: "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V49)))))), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> V108 end end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), begin (V116 = (V113(V114))), (V115(V116)) end end end end end end end}, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), ((V120(V122))(V121)) end end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V124(V125))), (V126(V125)) end end end end}, fun (V127) -> fun (V128) -> V128 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end)) end, fun (V129) -> fun (V130) -> {'Idris.Builtin.MkUnit'} end end, V47)) end end)) end))(V4)) end end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V131) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V134, V135, V136)) end end end end end, fun (V137) -> fun (V138) -> fun (V139) -> V138 end end end, fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> begin (V145 = (V142(V144))), begin (V146 = (V143(V144))), (V145(V146)) end end end end end end end}, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> begin (V152 = (V149(V151))), ((V150(V152))(V151)) end end end end end end, fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V154(V155))), (V156(V155)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> V163 end end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> begin (V170 = (V167(V169))), begin (V171 = (V168(V169))), (V170(V171)) end end end end end end end}, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), ((V175(V177))(V176)) end end end end end end, fun (V178) -> fun (V179) -> fun (V180) -> begin (V181 = (V179(V180))), (V181(V180)) end end end end}, fun (V182) -> fun (V183) -> V183 end end}, V131)), fun () -> ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V186, V187, V188)) end end end end end, fun (V189) -> fun (V190) -> fun (V191) -> V190 end end end, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> begin (V197 = (V194(V196))), begin (V198 = (V195(V196))), (V197(V198)) end end end end end end end}, fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> begin (V204 = (V201(V203))), ((V202(V204))(V203)) end end end end end end, fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V206(V207))), (V208(V207)) end end end end}, fun (V209) -> fun (V210) -> V210 end end}, ('Idris.Idris2.Idris.CommandLine':'un--usage'()))) end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in stMain-4477'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V5, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in stMain-4298'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> fun (V26) -> begin (V54 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> V33 end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), begin (V41 = (V38(V39))), (V40(V41)) end end end end end end end}, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), ((V45(V47))(V46)) end end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V49(V50))), (V51(V50)) end end end end}, fun (V52) -> fun (V53) -> V53 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V26))), {'Idris.Prelude.Types.Right', V54} end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in case block in stMain-4067'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> fun (V26) -> begin (V55 = begin (V54 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> V33 end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), begin (V41 = (V38(V39))), (V40(V41)) end end end end end end end}, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), ((V45(V47))(V46)) end end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V49(V50))), (V51(V50)) end end end end}, fun (V52) -> fun (V53) -> V53 end end}, V25))(V26))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E1} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V57) -> begin (V85 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, fun (V83) -> fun (V84) -> V84 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V26))), {'Idris.Prelude.Types.Right', V85} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Right', E3} -> (fun (V86) -> fun (V87) -> begin (V88 = ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V12, {'Idris.Idris.REPLOpts.IDEMode', 0, V86, V86}, V87))), case V88 of {'Idris.Prelude.Types.Left', E4} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V90) -> ('Idris.Idris2.Idris.IDEMode.REPL':'un--replIDE'(V6, V16, V7, V17, V12, V87)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in stMain-4007'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> fun (V25) -> begin (V27 = begin (V26 = ('Idris.Idris2.Idris.IDEMode.REPL':'un--initIDESocketFile'(V23, V24, V25))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> begin (V59 = begin (V58 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, V30))(V25))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E5} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V61) -> begin (V89 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> V68 end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), begin (V76 = (V73(V74))), (V75(V76)) end end end end end end end}, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V79(V81))), ((V80(V82))(V81)) end end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V84(V85))), (V86(V85)) end end end end}, fun (V87) -> fun (V88) -> V88 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V25))), {'Idris.Prelude.Types.Right', V89} end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Right', E7} -> (fun (V90) -> begin (V91 = ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V12, {'Idris.Idris.REPLOpts.IDEMode', 0, V90, V90}, V25))), case V91 of {'Idris.Prelude.Types.Left', E8} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V93) -> ('Idris.Idris2.Idris.IDEMode.REPL':'un--replIDE'(V6, V16, V7, V17, V12, V25)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in stMain-3907'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> begin (V24 = ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V12, {'Idris.Idris.REPLOpts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}, V23))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> ('Idris.Idris2.Idris.IDEMode.REPL':'un--replIDE'(V6, V16, V7, V17, V12, V23)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('case--case block in case block in case block in case block in case block in case block in stMain-4007'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, ('Idris.Idris2.Idris.CommandLine':'un--ideSocketModeAddress'(V0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in stMain-3859'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> ('case--case block in case block in case block in case block in case block in stMain-3907'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, ('Idris.Idris2.Prelude.Basics':'un--not'(V9)))); 1 -> fun (V23) -> begin (V24 = ('Idris.Idris2.Idris.REPL':'un--repl'(V6, V16, V7, V17, V12, V23))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V6, V23)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in stMain-3814'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of 0 -> begin (V22 = 0), ('case--case block in case block in case block in case block in stMain-3859'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V22, ('Idris.Idris2.Prelude.Basics':'un--||'(V8, fun () -> V9 end)))) end; 1 -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V6, V23))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> begin (V31 = 1), (('case--case block in case block in case block in case block in stMain-4298'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V31, V27, case V27 of {'Idris.Idris.REPLOpts.MkREPLOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V38 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in stMain-3697'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V6, fun () -> <<"+ Loading prelude"/utf8>> end, fun (V21) -> begin (V37 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V18 of {'Idris.Core.Options.MkSessionOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V22 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> ('Idris.Idris2.Idris.ProcessIdr':'un--readPrelude'(V6, V16, V7, 0, V21)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V37 of {'Idris.Prelude.Types.Left', E15} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V20)) end end()); {'Idris.Prelude.Types.Just', E17} -> (fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V6, fun () -> <<"+ Loading main file"/utf8>> end, fun (V42) -> begin (V43 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V6, V16, V7, V17, V12, V40, V42))), case V43 of {'Idris.Prelude.Types.Left', E18} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V45) -> begin (V46 = (('Idris.Idris2.Idris.REPL':'un--displayErrors'(V6, V16, V7, V17, V12, V45))(V42))), case V46 of {'Idris.Prelude.Types.Left', E20} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V48) -> {'Idris.Prelude.Types.Right', V45} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V41)) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in stMain-3611'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of 0 -> fun (V20) -> ('Idris.Idris2.Idris.Package':'un--findIpkg'(V6, V12, V7, V11, V20)) end; 1 -> fun (V21) -> {'Idris.Prelude.Types.Right', V11} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in stMain-3476'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> fun (V16) -> begin (V17 = case ('un--checkVerbose'(V0)) of 0 -> ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V12, {'Idris.Idris.REPLOpts.REPL', 1}, V16)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V16))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V16))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> begin (V26 = ('un--updateREPLOpts'(V12, V16))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Context':'un--getSession'(V6, V16))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> begin (V55 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V31 of {'Idris.Core.Options.MkSessionOpts', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V33 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> begin (V47 = ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V12, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('un--banner'()))), V16))), case V47 of {'Idris.Prelude.Types.Left', E10} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V49) -> case ('Idris.Idris2.Data.List':'un--isCons'('erased', V1)) of 0 -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V12, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"With codegen for:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V52, V53)) end end end end, fun (V54) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V54)))) end, V1)))))), V16)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Left', E27} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V57) -> begin (V74 = begin (V58 = 0), (('case--case block in case block in case block in stMain-3611'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V58, V22, V25, V31, case V31 of {'Idris.Core.Options.MkSessionOpts', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V61 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16)) end), case V74 of {'Idris.Prelude.Types.Left', E44} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Idris.REPLOpts':'un--setMainFile'(V12, V76, V16))), case V77 of {'Idris.Prelude.Types.Left', E46} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V79) -> begin (V107 = case V76 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V6, fun () -> <<"+ Loading prelude"/utf8>> end, fun (V80) -> begin (V96 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V31 of {'Idris.Core.Options.MkSessionOpts', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V81 end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> ('Idris.Idris2.Idris.ProcessIdr':'un--readPrelude'(V6, V22, V7, 0, V80)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V96 of {'Idris.Prelude.Types.Left', E63} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V98) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V16)) end()); {'Idris.Prelude.Types.Just', E65} -> (fun (V99) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V6, fun () -> <<"+ Loading main file"/utf8>> end, fun (V100) -> begin (V101 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V6, V22, V7, V25, V12, V99, V100))), case V101 of {'Idris.Prelude.Types.Left', E66} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V103) -> begin (V104 = (('Idris.Idris2.Idris.REPL':'un--displayErrors'(V6, V22, V7, V25, V12, V103))(V100))), case V104 of {'Idris.Prelude.Types.Left', E68} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V106) -> {'Idris.Prelude.Types.Right', V103} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V16)) end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V107 of {'Idris.Prelude.Types.Left', E70} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V109) -> begin (V114 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', ('Idris.Idris2.Idris.SetOptions':'un--postOptions'(V6, V22, V7, V25, V12, V109, V0)), fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Core':'un--*>'('erased', 'erased', fun (V112) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V6, V12, V7, V110, V112)) end, fun (V113) -> {'Idris.Prelude.Types.Right', 1} end, V111)) end end, V16))), case V114 of {'Idris.Prelude.Types.Left', E72} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V116) -> begin (V117 = 0), case V116 of 0 -> begin (V118 = 0), (('case--case block in case block in case block in case block in stMain-3859'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V117, V22, V25, V31, V76, V109, V118, ('Idris.Idris2.Prelude.Basics':'un--||'(V8, fun () -> V9 end))))(V16)) end; 1 -> begin (V120 = begin (V119 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V119} end), case V120 of {'Idris.Prelude.Types.Left', E74} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V122) -> begin (V123 = ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V6, V16))), case V123 of {'Idris.Prelude.Types.Left', E76} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V125) -> begin (V126 = 1), (('case--case block in case block in case block in case block in stMain-4298'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V117, V22, V25, V31, V76, V109, V126, V122, case V122 of {'Idris.Idris.REPLOpts.MkREPLOpts', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142) -> V133 end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16)) end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V143) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in stMain-3458'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Options.MkSessionOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> {'Idris.Core.Options.MkSessionOpts', V9, V10, V11, V12, V13, V14, V15, V16, V17, 0, V19, V20, V21, V22, V23} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in stMain-3344'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of 0 -> {'Idris.Idris.REPLOpts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}; 1 -> {'Idris.Idris.REPLOpts.REPL', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in stMain-3273'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('Idris.Idris2.Core.Options':'un--addCG'({'Idris.Builtin.MkPair', V7, {'Idris.Core.Options.Other', V7}}, V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in stMain-3251'(V0, V1, V2, V3) -> case V3 of 1 -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--initDefs'(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V39 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V8) -> fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> ('Idris.Idris2.Core.Options':'un--addCG'({'Idris.Builtin.MkPair', V10, {'Idris.Core.Options.Other', V10}}, V8)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))), begin (V67 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Context.Ctxt'}, case V7 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.MkDefs', V40, V41, V42, V43, V39, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V67 of {'Idris.Prelude.Types.Left', E58} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V69) -> begin (V70 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Syntax.Syn'}, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'()), V4))), case V70 of {'Idris.Prelude.Types.Left', E60} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V72) -> begin (V74 = ('Idris.Idris2.Core.Context':'un--setCG'(V69, ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Core.Options.Chez'} end, fun () -> fun (V73) -> {'Idris.Core.Options.Other', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V73))} end end, ('Idris.Idris2.Data.List':'un--head\x{27}'('erased', V1)))), V4))), case V74 of {'Idris.Prelude.Types.Left', E62} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V76) -> begin (V77 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V69))(V4))), case V77 of {'Idris.Prelude.Types.Left', E64} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V69, <<"."/utf8>>, V4))), case V80 of {'Idris.Prelude.Types.Left', E66} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V82) -> begin (V101 = begin (V83 = ('Idris.Idris2.Core.Context':'un--getSession'(V69, V4))), case V83 of {'Idris.Prelude.Types.Left', E68} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V85) -> case ('un--ignoreMissingIpkg'(V0)) of 0 -> ('Idris.Idris2.Core.Context':'un--setSession'(V69, case V85 of {'Idris.Core.Options.MkSessionOpts', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> {'Idris.Core.Options.MkSessionOpts', V86, V87, V88, V89, V90, V91, V92, V93, V94, 0, V96, V97, V98, V99, V100} end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V101 of {'Idris.Prelude.Types.Left', E85} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V103) -> begin (V104 = ('un--updateEnv'(V69, V4))), case V104 of {'Idris.Prelude.Types.Left', E87} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V106) -> begin (V107 = ('Idris.Idris2.Idris.SetOptions':'un--ideMode'(V0))), begin (V108 = ('Idris.Idris2.Idris.SetOptions':'un--ideModeSocket'(V0))), begin (V109 = case V107 of 0 -> {'Idris.Idris.REPLOpts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}; 1 -> {'Idris.Idris.REPLOpts.REPL', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V110 = ('un--findInput'(V0))), begin (V111 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.REPLOpts.ROpts'}, ('Idris.Idris2.Idris.REPLOpts':'un--defaultOpts'(V110, V109, V1)), V4))), case V111 of {'Idris.Prelude.Types.Left', E89} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V113) -> begin (V114 = (('un--showInfo'(V69, V113, V0))(V4))), case V114 of {'Idris.Prelude.Types.Left', E91} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V116) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(V116)) of 0 -> begin (V117 = ('Idris.Idris2.Idris.Package':'un--processPackageOpts'(V69, V72, V113, V0, V4))), case V117 of {'Idris.Prelude.Types.Left', E93} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V119) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(V119)) of 0 -> (('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', V120, V121, V122)) end end end, fun (V123) -> fun (V124) -> ('nested--19828-3212--in--un--renderError'(V0, V1, V69, V72, V113, V123, V124)) end end, fun (V125) -> begin (V126 = (('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V69, V113, V0))(V125))), case V126 of {'Idris.Prelude.Types.Left', E95} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V128) -> begin (V129 = 1), case V128 of 0 -> begin (V130 = case ('un--checkVerbose'(V0)) of 0 -> ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V113, {'Idris.Idris.REPLOpts.REPL', 1}, V125)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V130 of {'Idris.Prelude.Types.Left', E97} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V132) -> begin (V133 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V125))), case V133 of {'Idris.Prelude.Types.Left', E99} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V135) -> begin (V136 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V125))), case V136 of {'Idris.Prelude.Types.Left', E101} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V138) -> begin (V139 = ('un--updateREPLOpts'(V113, V125))), case V139 of {'Idris.Prelude.Types.Left', E103} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V141) -> begin (V142 = ('Idris.Idris2.Core.Context':'un--getSession'(V69, V125))), case V142 of {'Idris.Prelude.Types.Left', E105} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V144) -> begin (V168 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V144 of {'Idris.Core.Options.MkSessionOpts', E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159) -> V146 end(E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> begin (V160 = ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V113, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('un--banner'()))), V125))), case V160 of {'Idris.Prelude.Types.Left', E107} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V162) -> case ('Idris.Idris2.Data.List':'un--isCons'('erased', V1)) of 0 -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V113, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"With codegen for:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V165, V166)) end end end end, fun (V167) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V167)))) end, V1)))))), V125)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V168 of {'Idris.Prelude.Types.Left', E124} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V170) -> begin (V187 = begin (V171 = 0), (('case--case block in case block in case block in stMain-3611'(V0, V1, V2, V129, V7, V39, V69, V72, V107, V108, V109, V110, V113, V116, V119, V171, V135, V138, V144, case V144 of {'Idris.Core.Options.MkSessionOpts', E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140} -> (fun (V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186) -> V174 end(E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V125)) end), case V187 of {'Idris.Prelude.Types.Left', E141} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V189) -> begin (V190 = ('Idris.Idris2.Idris.REPLOpts':'un--setMainFile'(V113, V189, V125))), case V190 of {'Idris.Prelude.Types.Left', E143} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V192) -> begin (V220 = case V189 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V69, fun () -> <<"+ Loading prelude"/utf8>> end, fun (V193) -> begin (V209 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V144 of {'Idris.Core.Options.MkSessionOpts', E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159} -> (fun (V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208) -> V194 end(E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> ('Idris.Idris2.Idris.ProcessIdr':'un--readPrelude'(V69, V135, V72, 0, V193)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V209 of {'Idris.Prelude.Types.Left', E160} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V211) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V125)) end()); {'Idris.Prelude.Types.Just', E162} -> (fun (V212) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V69, fun () -> <<"+ Loading main file"/utf8>> end, fun (V213) -> begin (V214 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V69, V135, V72, V138, V113, V212, V213))), case V214 of {'Idris.Prelude.Types.Left', E163} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V216) -> begin (V217 = (('Idris.Idris2.Idris.REPL':'un--displayErrors'(V69, V135, V72, V138, V113, V216))(V213))), case V217 of {'Idris.Prelude.Types.Left', E165} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V219) -> {'Idris.Prelude.Types.Right', V216} end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V125)) end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V220 of {'Idris.Prelude.Types.Left', E167} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V222) -> begin (V227 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', ('Idris.Idris2.Idris.SetOptions':'un--postOptions'(V69, V135, V72, V138, V113, V222, V0)), fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Core':'un--*>'('erased', 'erased', fun (V225) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V69, V113, V72, V223, V225)) end, fun (V226) -> {'Idris.Prelude.Types.Right', 1} end, V224)) end end, V125))), case V227 of {'Idris.Prelude.Types.Left', E169} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V229) -> begin (V230 = 0), case V229 of 0 -> begin (V231 = 0), (('case--case block in case block in case block in case block in stMain-3859'(V0, V1, V2, V129, V7, V39, V69, V72, V107, V108, V109, V110, V113, V116, V119, V230, V135, V138, V144, V189, V222, V231, ('Idris.Idris2.Prelude.Basics':'un--||'(V107, fun () -> V108 end))))(V125)) end; 1 -> begin (V233 = begin (V232 = ('erlang':'get'(V113))), {'Idris.Prelude.Types.Right', V232} end), case V233 of {'Idris.Prelude.Types.Left', E171} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V235) -> begin (V236 = ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V69, V125))), case V236 of {'Idris.Prelude.Types.Left', E173} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V238) -> begin (V239 = 1), (('case--case block in case block in case block in case block in stMain-4298'(V0, V1, V2, V129, V7, V39, V69, V72, V107, V108, V109, V110, V113, V116, V119, V230, V135, V138, V144, V189, V222, V239, V235, case V235 of {'Idris.Idris.REPLOpts.MkREPLOpts', E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190} -> (fun (V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255) -> V246 end(E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V125)) end end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))(V4)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V256) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--stMain-3240'(V0, V1, V2) -> case V2 of 1 -> fun (V3) -> begin (V4 = (('un--tryTTM'(V0))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = 1), case V6 of 1 -> begin (V8 = ('Idris.Idris2.Core.Context':'un--initDefs'(V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V42 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V11) -> fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> ('Idris.Idris2.Core.Options':'un--addCG'({'Idris.Builtin.MkPair', V13, {'Idris.Core.Options.Other', V13}}, V11)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V10 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V19 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))), begin (V70 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Context.Ctxt'}, case V10 of {'Idris.Core.Context.MkDefs', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> {'Idris.Core.Context.MkDefs', V43, V44, V45, V46, V42, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V70 of {'Idris.Prelude.Types.Left', E60} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V72) -> begin (V73 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Syntax.Syn'}, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'()), V3))), case V73 of {'Idris.Prelude.Types.Left', E62} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V75) -> begin (V77 = ('Idris.Idris2.Core.Context':'un--setCG'(V72, ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Core.Options.Chez'} end, fun () -> fun (V76) -> {'Idris.Core.Options.Other', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V76))} end end, ('Idris.Idris2.Data.List':'un--head\x{27}'('erased', V1)))), V3))), case V77 of {'Idris.Prelude.Types.Left', E64} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V79) -> begin (V80 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V72))(V3))), case V80 of {'Idris.Prelude.Types.Left', E66} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V82) -> begin (V83 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V72, <<"."/utf8>>, V3))), case V83 of {'Idris.Prelude.Types.Left', E68} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V85) -> begin (V104 = begin (V86 = ('Idris.Idris2.Core.Context':'un--getSession'(V72, V3))), case V86 of {'Idris.Prelude.Types.Left', E70} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V88) -> case ('un--ignoreMissingIpkg'(V0)) of 0 -> ('Idris.Idris2.Core.Context':'un--setSession'(V72, case V88 of {'Idris.Core.Options.MkSessionOpts', E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> {'Idris.Core.Options.MkSessionOpts', V89, V90, V91, V92, V93, V94, V95, V96, V97, 0, V99, V100, V101, V102, V103} end(E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V104 of {'Idris.Prelude.Types.Left', E87} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V106) -> begin (V107 = ('un--updateEnv'(V72, V3))), case V107 of {'Idris.Prelude.Types.Left', E89} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V109) -> begin (V110 = ('Idris.Idris2.Idris.SetOptions':'un--ideMode'(V0))), begin (V111 = ('Idris.Idris2.Idris.SetOptions':'un--ideModeSocket'(V0))), begin (V112 = case V110 of 0 -> {'Idris.Idris.REPLOpts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}; 1 -> {'Idris.Idris.REPLOpts.REPL', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V113 = ('un--findInput'(V0))), begin (V114 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.REPLOpts.ROpts'}, ('Idris.Idris2.Idris.REPLOpts':'un--defaultOpts'(V113, V112, V1)), V3))), case V114 of {'Idris.Prelude.Types.Left', E91} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V116) -> begin (V117 = (('un--showInfo'(V72, V116, V0))(V3))), case V117 of {'Idris.Prelude.Types.Left', E93} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V119) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(V119)) of 0 -> begin (V120 = ('Idris.Idris2.Idris.Package':'un--processPackageOpts'(V72, V75, V116, V0, V3))), case V120 of {'Idris.Prelude.Types.Left', E95} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V122) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(V122)) of 0 -> (('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', V123, V124, V125)) end end end, fun (V126) -> fun (V127) -> ('nested--19828-3212--in--un--renderError'(V0, V1, V72, V75, V116, V126, V127)) end end, fun (V128) -> begin (V129 = (('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V72, V116, V0))(V128))), case V129 of {'Idris.Prelude.Types.Left', E97} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V131) -> begin (V132 = 1), case V131 of 0 -> begin (V133 = case ('un--checkVerbose'(V0)) of 0 -> ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V116, {'Idris.Idris.REPLOpts.REPL', 1}, V128)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V133 of {'Idris.Prelude.Types.Left', E99} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V135) -> begin (V136 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V128))), case V136 of {'Idris.Prelude.Types.Left', E101} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V138) -> begin (V139 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V128))), case V139 of {'Idris.Prelude.Types.Left', E103} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V141) -> begin (V142 = ('un--updateREPLOpts'(V116, V128))), case V142 of {'Idris.Prelude.Types.Left', E105} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V144) -> begin (V145 = ('Idris.Idris2.Core.Context':'un--getSession'(V72, V128))), case V145 of {'Idris.Prelude.Types.Left', E107} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V147) -> begin (V171 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V147 of {'Idris.Core.Options.MkSessionOpts', E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125} -> (fun (V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162) -> V149 end(E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> begin (V163 = ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V116, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('un--banner'()))), V128))), case V163 of {'Idris.Prelude.Types.Left', E109} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V165) -> case ('Idris.Idris2.Data.List':'un--isCons'('erased', V1)) of 0 -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V116, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"With codegen for:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V168, V169)) end end end end, fun (V170) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V170)))) end, V1)))))), V128)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V171 of {'Idris.Prelude.Types.Left', E126} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V173) -> begin (V190 = begin (V174 = 0), (('case--case block in case block in case block in stMain-3611'(V0, V1, V7, V132, V10, V42, V72, V75, V110, V111, V112, V113, V116, V119, V122, V174, V138, V141, V147, case V147 of {'Idris.Core.Options.MkSessionOpts', E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142} -> (fun (V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189) -> V177 end(E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V128)) end), case V190 of {'Idris.Prelude.Types.Left', E143} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V192) -> begin (V193 = ('Idris.Idris2.Idris.REPLOpts':'un--setMainFile'(V116, V192, V128))), case V193 of {'Idris.Prelude.Types.Left', E145} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V195) -> begin (V223 = case V192 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V72, fun () -> <<"+ Loading prelude"/utf8>> end, fun (V196) -> begin (V212 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V147 of {'Idris.Core.Options.MkSessionOpts', E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161} -> (fun (V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211) -> V197 end(E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> ('Idris.Idris2.Idris.ProcessIdr':'un--readPrelude'(V72, V138, V75, 0, V196)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V212 of {'Idris.Prelude.Types.Left', E162} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V214) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V128)) end()); {'Idris.Prelude.Types.Just', E164} -> (fun (V215) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V72, fun () -> <<"+ Loading main file"/utf8>> end, fun (V216) -> begin (V217 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V72, V138, V75, V141, V116, V215, V216))), case V217 of {'Idris.Prelude.Types.Left', E165} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V219) -> begin (V220 = (('Idris.Idris2.Idris.REPL':'un--displayErrors'(V72, V138, V75, V141, V116, V219))(V216))), case V220 of {'Idris.Prelude.Types.Left', E167} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V222) -> {'Idris.Prelude.Types.Right', V219} end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V128)) end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V223 of {'Idris.Prelude.Types.Left', E169} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V225) -> begin (V230 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', ('Idris.Idris2.Idris.SetOptions':'un--postOptions'(V72, V138, V75, V141, V116, V225, V0)), fun (V226) -> fun (V227) -> ('Idris.Idris2.Core.Core':'un--*>'('erased', 'erased', fun (V228) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V72, V116, V75, V226, V228)) end, fun (V229) -> {'Idris.Prelude.Types.Right', 1} end, V227)) end end, V128))), case V230 of {'Idris.Prelude.Types.Left', E171} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V232) -> begin (V233 = 0), case V232 of 0 -> begin (V234 = 0), (('case--case block in case block in case block in case block in stMain-3859'(V0, V1, V7, V132, V10, V42, V72, V75, V110, V111, V112, V113, V116, V119, V122, V233, V138, V141, V147, V192, V225, V234, ('Idris.Idris2.Prelude.Basics':'un--||'(V110, fun () -> V111 end))))(V128)) end; 1 -> begin (V236 = begin (V235 = ('erlang':'get'(V116))), {'Idris.Prelude.Types.Right', V235} end), case V236 of {'Idris.Prelude.Types.Left', E173} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V238) -> begin (V239 = ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V72, V128))), case V239 of {'Idris.Prelude.Types.Left', E175} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V241) -> begin (V242 = 1), (('case--case block in case block in case block in case block in stMain-4298'(V0, V1, V7, V132, V10, V42, V72, V75, V110, V111, V112, V113, V116, V119, V122, V233, V138, V141, V147, V192, V225, V242, V238, case V238 of {'Idris.Idris.REPLOpts.MkREPLOpts', E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192} -> (fun (V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258) -> V249 end(E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V128)) end end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))(V3)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V259) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateREPLOpts-3074'(V0, V1, V2, V3) -> case V1 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V4, V5, V6, V7, V8, V2, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateREPLOpts-3042'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> begin (V21 = ('erlang':'put'(V0, case V1 of {'Idris.Idris.REPLOpts.MkREPLOpts', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V5, V6, V7, V8, V9, V3, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateEnv-2998'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Context':'un--setPrefix'(V0, V3, V4)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateEnv-2962'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('Idris.Idris2.Core.Core':'un--traverseList1_'('erased', 'erased', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--addExtraDir'(V0, V5, V6)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Data.String':'un--trim'(V7)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V8, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V4)))))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateEnv-2922'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('Idris.Idris2.Core.Core':'un--traverseList1_'('erased', 'erased', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'un--addDataDir'(V0, V6, V7)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Data.String':'un--trim'(V8)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V9, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V5)))))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateEnv-2878'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> ('Idris.Idris2.Core.Core':'un--traverseList1_'('erased', 'erased', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, V7, V8)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Data.String':'un--trim'(V9)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V10, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V6)))))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateEnv-2830'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> ('Idris.Idris2.Core.Core':'un--traverseList1_'('erased', 'erased', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, V8, V9)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'('erased', 'erased', fun (V10) -> ('Idris.Idris2.Data.String':'un--trim'(V10)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V11, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V7)))))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateEnv-2758'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'un--setCG'(V0, V10, V11)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown code generator "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V7))))}, V12)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateEnv-2737'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V9 = {'Idris.Prelude.Types.Just', V8}), ('case--case block in updateEnv-2758'(V0, V1, V2, V3, V4, V5, V6, V8, V9, ('Idris.Idris2.Core.Options':'un--getCG'(case V1 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V14 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateEnv-2671'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V10, <<"libs"/utf8>>)), V11))), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--addDataDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V10, <<"support"/utf8>>)), V11))), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, <<"lib"/utf8>>, V11))), case V18 of {'Idris.Prelude.Types.Left', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V20) -> ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V10, <<"lib"/utf8>>)), V11)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> begin (V49 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> V28 end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), begin (V36 = (V33(V34))), (V35(V36)) end end end end end end end}, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), ((V40(V42))(V41)) end end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V44(V45))), (V46(V45)) end end end end}, fun (V47) -> fun (V48) -> V48 end end}, <<"Directory idris2/priv not found"/utf8>>))(V21))), {'Idris.Prelude.Types.Right', V49} end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getPrivDir-2486'(V0, V1) -> case V1 of E0 -> (fun (V2) -> V2 end((fun (V3) -> ('unicode':'characters_to_binary'(V3)) end(E0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19828-3212--in--un--renderError'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('Idris.Idris2.Idris.Error':'un--perror'(V2, V3, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Idris.Pretty':'un--render'(V4, V9, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.UserError', V12}, V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateREPLOpts'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"EDITOR"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E4} -> (fun (V37) -> begin (V54 = ('erlang':'put'(V0, case V5 of {'Idris.Idris.REPLOpts.MkREPLOpts', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V38, V39, V40, V41, V42, V37, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53} end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateEnv'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"IDRIS2_PREFIX"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E2} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V36) -> begin (V38 = case V36 of {'Idris.Prelude.Types.Just', E4} -> (fun (V37) -> ('Idris.Idris2.Core.Context':'un--setPrefix'(V0, V37, V1)) end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V38 of {'Idris.Prelude.Types.Left', E5} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V40) -> begin (V69 = begin (V68 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> V47 end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), begin (V55 = (V52(V53))), (V54(V55)) end end end end end end end}, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), ((V59(V61))(V60)) end end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V63(V64))), (V65(V64)) end end end end}, fun (V66) -> fun (V67) -> V67 end end}, <<"IDRIS2_PATH"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), {'Idris.Prelude.Types.Right', V68} end), case V69 of {'Idris.Prelude.Types.Left', E7} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V71) -> begin (V77 = case V71 of {'Idris.Prelude.Types.Just', E9} -> (fun (V72) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'('erased', 'erased', fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Context':'un--addExtraDir'(V0, V73, V74)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'('erased', 'erased', fun (V75) -> ('Idris.Idris2.Data.String':'un--trim'(V75)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V76) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V76, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V72))))))(V1)) end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V77 of {'Idris.Prelude.Types.Left', E10} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V79) -> begin (V108 = begin (V107 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V82, V83, V84)) end end end end end, fun (V85) -> fun (V86) -> fun (V87) -> V86 end end end, fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> begin (V93 = (V90(V92))), begin (V94 = (V91(V92))), (V93(V94)) end end end end end end end}, fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V97(V99))), ((V98(V100))(V99)) end end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V102(V103))), (V104(V103)) end end end end}, fun (V105) -> fun (V106) -> V106 end end}, <<"IDRIS2_DATA"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), {'Idris.Prelude.Types.Right', V107} end), case V108 of {'Idris.Prelude.Types.Left', E12} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V110) -> begin (V116 = case V110 of {'Idris.Prelude.Types.Just', E14} -> (fun (V111) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'('erased', 'erased', fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Context':'un--addDataDir'(V0, V112, V113)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'('erased', 'erased', fun (V114) -> ('Idris.Idris2.Data.String':'un--trim'(V114)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V115) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V115, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V111))))))(V1)) end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V116 of {'Idris.Prelude.Types.Left', E15} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V118) -> begin (V147 = begin (V146 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V121, V122, V123)) end end end end end, fun (V124) -> fun (V125) -> fun (V126) -> V125 end end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), begin (V133 = (V130(V131))), (V132(V133)) end end end end end end end}, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> begin (V139 = (V136(V138))), ((V137(V139))(V138)) end end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> begin (V143 = (V141(V142))), (V143(V142)) end end end end}, fun (V144) -> fun (V145) -> V145 end end}, <<"IDRIS2_LIBS"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), {'Idris.Prelude.Types.Right', V146} end), case V147 of {'Idris.Prelude.Types.Left', E17} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V149) -> begin (V155 = case V149 of {'Idris.Prelude.Types.Just', E19} -> (fun (V150) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'('erased', 'erased', fun (V151) -> fun (V152) -> ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, V151, V152)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'('erased', 'erased', fun (V153) -> ('Idris.Idris2.Data.String':'un--trim'(V153)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V154) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V154, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V150))))))(V1)) end(E19)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V155 of {'Idris.Prelude.Types.Left', E20} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V157) -> begin (V186 = begin (V185 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V160, V161, V162)) end end end end end, fun (V163) -> fun (V164) -> fun (V165) -> V164 end end end, fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> begin (V171 = (V168(V170))), begin (V172 = (V169(V170))), (V171(V172)) end end end end end end end}, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> begin (V178 = (V175(V177))), ((V176(V178))(V177)) end end end end end end, fun (V179) -> fun (V180) -> fun (V181) -> begin (V182 = (V180(V181))), (V182(V181)) end end end end}, fun (V183) -> fun (V184) -> V184 end end}, <<"IDRIS2_PACKAGE_PATH"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), {'Idris.Prelude.Types.Right', V185} end), case V186 of {'Idris.Prelude.Types.Left', E22} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V188) -> begin (V194 = case V188 of {'Idris.Prelude.Types.Just', E24} -> (fun (V189) -> (('Idris.Idris2.Core.Core':'un--traverseList1_'('erased', 'erased', fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, V190, V191)) end end, ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'('erased', 'erased', fun (V192) -> ('Idris.Idris2.Data.String':'un--trim'(V192)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V193) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V193, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, V189))))))(V1)) end(E24)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V194 of {'Idris.Prelude.Types.Left', E25} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V196) -> begin (V225 = begin (V224 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V199, V200, V201)) end end end end end, fun (V202) -> fun (V203) -> fun (V204) -> V203 end end end, fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V207(V209))), begin (V211 = (V208(V209))), (V210(V211)) end end end end end end end}, fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> begin (V217 = (V214(V216))), ((V215(V217))(V216)) end end end end end end, fun (V218) -> fun (V219) -> fun (V220) -> begin (V221 = (V219(V220))), (V221(V220)) end end end end}, fun (V222) -> fun (V223) -> V223 end end}, <<"IDRIS2_CG"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), {'Idris.Prelude.Types.Right', V224} end), case V225 of {'Idris.Prelude.Types.Left', E27} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V227) -> begin (V257 = case V227 of {'Idris.Prelude.Types.Just', E29} -> (fun (V228) -> begin (V229 = {'Idris.Prelude.Types.Just', V228}), (('case--case block in updateEnv-2758'(V0, V5, V36, V71, V110, V149, V188, V228, V229, ('Idris.Idris2.Core.Options':'un--getCG'(case V5 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256) -> V234 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V228))))(V1)) end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V257 of {'Idris.Prelude.Types.Left', E57} -> (fun (V258) -> {'Idris.Prelude.Types.Left', V258} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V259) -> begin (V261 = begin (V260 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V260} end), case V261 of {'Idris.Prelude.Types.Left', E59} -> (fun (V262) -> {'Idris.Prelude.Types.Left', V262} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V263) -> begin (V264 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"prelude"/utf8>>, V1))), case V264 of {'Idris.Prelude.Types.Left', E61} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V266) -> begin (V267 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"base"/utf8>>, V1))), case V267 of {'Idris.Prelude.Types.Left', E63} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V269) -> begin (V270 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, <<"erlang"/utf8>>, V1))), case V270 of {'Idris.Prelude.Types.Left', E65} -> (fun (V271) -> {'Idris.Prelude.Types.Left', V271} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V272) -> begin (V274 = begin (V273 = ('un--getPrivDir'(V1))), {'Idris.Prelude.Types.Right', V273} end), case V274 of {'Idris.Prelude.Types.Left', E67} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V276) -> case V276 of {'Idris.Prelude.Types.Just', E69} -> (fun (V277) -> begin (V278 = ('Idris.Idris2.Core.Context':'un--addPackageDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V277, <<"libs"/utf8>>)), V1))), case V278 of {'Idris.Prelude.Types.Left', E70} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V280) -> begin (V281 = ('Idris.Idris2.Core.Context':'un--addDataDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V277, <<"support"/utf8>>)), V1))), case V281 of {'Idris.Prelude.Types.Left', E72} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V283) -> begin (V284 = ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, <<"lib"/utf8>>, V1))), case V284 of {'Idris.Prelude.Types.Left', E74} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V286) -> ('Idris.Idris2.Core.Context':'un--addLibDir'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V277, <<"lib"/utf8>>)), V1)) end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V314 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V289, V290, V291)) end end end end end, fun (V292) -> fun (V293) -> fun (V294) -> V293 end end end, fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> fun (V299) -> begin (V300 = (V297(V299))), begin (V301 = (V298(V299))), (V300(V301)) end end end end end end end}, fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> begin (V307 = (V304(V306))), ((V305(V307))(V306)) end end end end end end, fun (V308) -> fun (V309) -> fun (V310) -> begin (V311 = (V309(V310))), (V311(V310)) end end end end}, fun (V312) -> fun (V313) -> V313 end end}, <<"Directory idris2/priv not found"/utf8>>))(V1))), {'Idris.Prelude.Types.Right', V314} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tryYaffle'(V0) -> case V0 of [] -> fun (V1) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Yaffle', E2} -> (fun (V4) -> fun (V5) -> begin (V6 = ('Idris.Idris2.Yaffle.Main':'un--yaffleMain'(V4, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Right', 0} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--tryYaffle'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryTTM'(V0) -> case V0 of [] -> fun (V1) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Metadata', E2} -> (fun (V4) -> fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Metadata':'un--dumpTTM'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Right', 0} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--tryTTM'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--stMain'(V0, V1, V2) -> begin (V3 = (('un--tryYaffle'(V1))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 1 -> begin (V6 = (('un--tryTTM'(V1))(V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = 1), case V8 of 1 -> begin (V10 = ('Idris.Idris2.Core.Context':'un--initDefs'(V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V44 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V13) -> fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> ('Idris.Idris2.Core.Options':'un--addCG'({'Idris.Builtin.MkPair', V15, {'Idris.Core.Options.Other', V15}}, V13)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V12 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V21 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0))), begin (V72 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Context.Ctxt'}, case V12 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> {'Idris.Core.Context.MkDefs', V45, V46, V47, V48, V44, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V72 of {'Idris.Prelude.Types.Left', E62} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Syntax.Syn'}, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'()), V2))), case V75 of {'Idris.Prelude.Types.Left', E64} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V77) -> begin (V79 = ('Idris.Idris2.Core.Context':'un--setCG'(V74, ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Core.Options.Chez'} end, fun () -> fun (V78) -> {'Idris.Core.Options.Other', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V78))} end end, ('Idris.Idris2.Data.List':'un--head\x{27}'('erased', V0)))), V2))), case V79 of {'Idris.Prelude.Types.Left', E66} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V81) -> begin (V82 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V74))(V2))), case V82 of {'Idris.Prelude.Types.Left', E68} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V74, <<"."/utf8>>, V2))), case V85 of {'Idris.Prelude.Types.Left', E70} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V87) -> begin (V106 = begin (V88 = ('Idris.Idris2.Core.Context':'un--getSession'(V74, V2))), case V88 of {'Idris.Prelude.Types.Left', E72} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V90) -> case ('un--ignoreMissingIpkg'(V1)) of 0 -> ('Idris.Idris2.Core.Context':'un--setSession'(V74, case V90 of {'Idris.Core.Options.MkSessionOpts', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105) -> {'Idris.Core.Options.MkSessionOpts', V91, V92, V93, V94, V95, V96, V97, V98, V99, 0, V101, V102, V103, V104, V105} end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V106 of {'Idris.Prelude.Types.Left', E89} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V108) -> begin (V109 = ('un--updateEnv'(V74, V2))), case V109 of {'Idris.Prelude.Types.Left', E91} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V111) -> begin (V112 = ('Idris.Idris2.Idris.SetOptions':'un--ideMode'(V1))), begin (V113 = ('Idris.Idris2.Idris.SetOptions':'un--ideModeSocket'(V1))), begin (V114 = case V112 of 0 -> {'Idris.Idris.REPLOpts.IDEMode', 0, ('Idris.Idris2.Erlang.System.File':'un--stdin'()), ('Idris.Idris2.Erlang.System.File':'un--stdout'())}; 1 -> {'Idris.Idris.REPLOpts.REPL', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V115 = ('un--findInput'(V1))), begin (V116 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.REPLOpts.ROpts'}, ('Idris.Idris2.Idris.REPLOpts':'un--defaultOpts'(V115, V114, V0)), V2))), case V116 of {'Idris.Prelude.Types.Left', E93} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V118) -> begin (V119 = (('un--showInfo'(V74, V118, V1))(V2))), case V119 of {'Idris.Prelude.Types.Left', E95} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V121) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(V121)) of 0 -> begin (V122 = ('Idris.Idris2.Idris.Package':'un--processPackageOpts'(V74, V77, V118, V1, V2))), case V122 of {'Idris.Prelude.Types.Left', E97} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V124) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(V124)) of 0 -> (('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', V125, V126, V127)) end end end, fun (V128) -> fun (V129) -> ('nested--19828-3212--in--un--renderError'(V1, V0, V74, V77, V118, V128, V129)) end end, fun (V130) -> begin (V131 = (('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V74, V118, V1))(V130))), case V131 of {'Idris.Prelude.Types.Left', E99} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V133) -> begin (V134 = 1), case V133 of 0 -> begin (V135 = case ('un--checkVerbose'(V1)) of 0 -> ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V118, {'Idris.Idris.REPLOpts.REPL', 1}, V130)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V135 of {'Idris.Prelude.Types.Left', E101} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V137) -> begin (V138 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V130))), case V138 of {'Idris.Prelude.Types.Left', E103} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V140) -> begin (V141 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V130))), case V141 of {'Idris.Prelude.Types.Left', E105} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V143) -> begin (V144 = ('un--updateREPLOpts'(V118, V130))), case V144 of {'Idris.Prelude.Types.Left', E107} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V146) -> begin (V147 = ('Idris.Idris2.Core.Context':'un--getSession'(V74, V130))), case V147 of {'Idris.Prelude.Types.Left', E109} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V149) -> begin (V173 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V149 of {'Idris.Core.Options.MkSessionOpts', E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127} -> (fun (V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164) -> V151 end(E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> begin (V165 = ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V118, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('un--banner'()))), V130))), case V165 of {'Idris.Prelude.Types.Left', E111} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V167) -> case ('Idris.Idris2.Data.List':'un--isCons'('erased', V0)) of 0 -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V118, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"With codegen for:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V170, V171)) end end end end, fun (V172) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V172)))) end, V0)))))), V130)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V173 of {'Idris.Prelude.Types.Left', E128} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V175) -> begin (V192 = begin (V176 = 0), (('case--case block in case block in case block in stMain-3611'(V1, V0, V9, V134, V12, V44, V74, V77, V112, V113, V114, V115, V118, V121, V124, V176, V140, V143, V149, case V149 of {'Idris.Core.Options.MkSessionOpts', E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144} -> (fun (V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191) -> V179 end(E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V130)) end), case V192 of {'Idris.Prelude.Types.Left', E145} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V194) -> begin (V195 = ('Idris.Idris2.Idris.REPLOpts':'un--setMainFile'(V118, V194, V130))), case V195 of {'Idris.Prelude.Types.Left', E147} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V197) -> begin (V225 = case V194 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V74, fun () -> <<"+ Loading prelude"/utf8>> end, fun (V198) -> begin (V214 = case ('Idris.Idris2.Prelude.Basics':'un--not'(case V149 of {'Idris.Core.Options.MkSessionOpts', E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163} -> (fun (V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213) -> V199 end(E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> ('Idris.Idris2.Idris.ProcessIdr':'un--readPrelude'(V74, V140, V77, 0, V198)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V214 of {'Idris.Prelude.Types.Left', E164} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V216) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V130)) end()); {'Idris.Prelude.Types.Just', E166} -> (fun (V217) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V74, fun () -> <<"+ Loading main file"/utf8>> end, fun (V218) -> begin (V219 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V74, V140, V77, V143, V118, V217, V218))), case V219 of {'Idris.Prelude.Types.Left', E167} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V221) -> begin (V222 = (('Idris.Idris2.Idris.REPL':'un--displayErrors'(V74, V140, V77, V143, V118, V221))(V218))), case V222 of {'Idris.Prelude.Types.Left', E169} -> (fun (V223) -> {'Idris.Prelude.Types.Left', V223} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V224) -> {'Idris.Prelude.Types.Right', V221} end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V130)) end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V225 of {'Idris.Prelude.Types.Left', E171} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V227) -> begin (V232 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', ('Idris.Idris2.Idris.SetOptions':'un--postOptions'(V74, V140, V77, V143, V118, V227, V1)), fun (V228) -> fun (V229) -> ('Idris.Idris2.Core.Core':'un--*>'('erased', 'erased', fun (V230) -> ('Idris.Idris2.Idris.REPLCommon':'un--emitError'(V74, V118, V77, V228, V230)) end, fun (V231) -> {'Idris.Prelude.Types.Right', 1} end, V229)) end end, V130))), case V232 of {'Idris.Prelude.Types.Left', E173} -> (fun (V233) -> {'Idris.Prelude.Types.Left', V233} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V234) -> begin (V235 = 0), case V234 of 0 -> begin (V236 = 0), (('case--case block in case block in case block in case block in stMain-3859'(V1, V0, V9, V134, V12, V44, V74, V77, V112, V113, V114, V115, V118, V121, V124, V235, V140, V143, V149, V194, V227, V236, ('Idris.Idris2.Prelude.Basics':'un--||'(V112, fun () -> V113 end))))(V130)) end; 1 -> begin (V238 = begin (V237 = ('erlang':'get'(V118))), {'Idris.Prelude.Types.Right', V237} end), case V238 of {'Idris.Prelude.Types.Left', E175} -> (fun (V239) -> {'Idris.Prelude.Types.Left', V239} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V240) -> begin (V241 = ('Idris.Idris2.Core.Context.Log':'un--showTimeRecord'(V74, V130))), case V241 of {'Idris.Prelude.Types.Left', E177} -> (fun (V242) -> {'Idris.Prelude.Types.Left', V242} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V243) -> begin (V244 = 1), (('case--case block in case block in case block in case block in stMain-4298'(V1, V0, V9, V134, V12, V44, V74, V77, V112, V113, V114, V115, V118, V121, V124, V235, V140, V143, V149, V194, V227, V244, V240, case V240 of {'Idris.Idris.REPLOpts.MkREPLOpts', E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194} -> (fun (V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260) -> V251 end(E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V130)) end end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))(V2)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showInfo'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Idris.CommandLine.BlodwenPaths'} -> (fun () -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V47 = ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Core.Options':'un--toString'(case case V10 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V15 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V38 end(E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V6))), case V47 of {'Idris.Prelude.Types.Left', E40} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V49) -> {'Idris.Prelude.Types.Right', 0} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('un--showInfo'(V0, V1, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quitOpts'(V0) -> case V0 of [] -> fun (V1) -> 0 end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Idris.CommandLine.Version'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, ('Idris.Idris2.Idris.CommandLine':'un--versionMsg'()))), fun () -> fun (V56) -> 1 end end)) end()); {'Idris.Idris.CommandLine.Help'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V84, V85, V86)) end end end end end, fun (V87) -> fun (V88) -> fun (V89) -> V88 end end end, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V92(V94))), begin (V96 = (V93(V94))), (V95(V96)) end end end end end end end}, fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> begin (V102 = (V99(V101))), ((V100(V102))(V101)) end end end end end end, fun (V103) -> fun (V104) -> fun (V105) -> begin (V106 = (V104(V105))), (V106(V105)) end end end end}, fun (V107) -> fun (V108) -> V108 end end}, ('Idris.Idris2.Idris.CommandLine':'un--usage'()))), fun () -> fun (V109) -> 1 end end)) end()); {'Idris.Idris.CommandLine.ShowPrefix'} -> (fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V112, V113, V114)) end end end end end, fun (V115) -> fun (V116) -> fun (V117) -> V116 end end end, fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> begin (V123 = (V120(V122))), begin (V124 = (V121(V122))), (V123(V124)) end end end end end end end}, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> begin (V130 = (V127(V129))), ((V128(V130))(V129)) end end end end end end, fun (V131) -> fun (V132) -> fun (V133) -> begin (V134 = (V132(V133))), (V134(V133)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V137, V138, V139)) end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> V141 end end end, fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> begin (V148 = (V145(V147))), begin (V149 = (V146(V147))), (V148(V149)) end end end end end end end}, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> begin (V155 = (V152(V154))), ((V153(V155))(V154)) end end end end end end, fun (V156) -> fun (V157) -> fun (V158) -> begin (V159 = (V157(V158))), (V159(V158)) end end end end}, fun (V160) -> fun (V161) -> V161 end end}, ('Idris.Idris2.IdrisPaths':'un--yprefix'()))), fun () -> fun (V162) -> 1 end end)) end()); _ -> ('un--quitOpts'(V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mainWithCodegens'(V0, V1) -> ('case--mainWithCodegens-4572'(V1, V0, ('Idris.Idris2.Idris.CommandLine':'un--getOpts'(V1)))).
'un--ignoreMissingIpkg'(V0) -> case V0 of [] -> 1; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.IgnoreMissingIPKG'} -> (fun () -> 0 end()); _ -> ('un--ignoreMissingIpkg'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPrivDir'(V0) -> begin (V1 = ('erlang':'apply'('code', 'priv_dir', ['idris2' | []]))), ('Idris.Idris2.Erlang.Decode':'un--erlDecodeMay'('erased', 'erased', {'Idris.Erlang.Types.ETErlTerm'}, fun (V2) -> ('Idris.Idris2.Erlang.Decode':'dn--un--map_Functor_ErlDecoder'('erased', 'erased', fun (V3) -> case V3 of E0 -> (fun (V4) -> V4 end((fun (V5) -> ('unicode':'characters_to_binary'(V5)) end(E0)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V6) -> ('Idris.Idris2.Erlang.Decode':'un--charlist'(V6)) end, V2)) end, V1)) end.
'un--findInput'(V0) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.InputFile', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> ('un--findInput'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkVerbose'(V0) -> case V0 of [] -> 1; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.Verbose'} -> (fun () -> 0 end()); _ -> ('un--checkVerbose'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--banner'() -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"     ____    __     _         ___                                           \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"    /  _/___/ /____(_)____   |__ \x{5c}                                          \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"    / // __  / ___/ / ___/   __/ /     Version "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'()))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  _/ // /_/ / /  / (__  )   / __/      https://www.idris-lang.org           \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" /___/\x{5c}__,_/_/  /_/____/   /____/      Type :? for help                     \x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, <<"Welcome to Idris 2.  Enjoy yourself!"/utf8>>)))))))))))))))).
