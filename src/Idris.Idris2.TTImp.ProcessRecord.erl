-module('Idris.Idris2.TTImp.ProcessRecord').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in elabRecord-2599'/23,
  'case--case block in elabRecord-2457'/18,
  'case--elabRecord-2419'/17,
  'case--case block in elabRecord,elabGetters-2242'/35,
  'case--case block in elabRecord,elabGetters-2090'/35,
  'case--case block in elabRecord,elabGetters-1938'/36,
  'case--case block in elabRecord,elabGetters-1774'/39,
  'case--case block in elabRecord,elabGetters-1606'/39,
  'case--case block in elabRecord,elabGetters-1190'/28,
  'case--elabRecord,elabGetters-1114'/28,
  'case--elabRecord,recTy-893'/15,
  'nested--10285-772--in--un--recTy'/14,
  'nested--10285-768--in--un--paramTelescope'/14,
  'nested--10285-771--in--un--mkTy'/16,
  'nested--10304-776--in--un--jname'/15,
  'nested--10285-769--in--un--fname'/15,
  'nested--10285-770--in--un--farg'/15,
  'nested--10285-775--in--un--elabGetters'/20,
  'nested--10285-773--in--un--elabAsData'/15,
  'nested--10285-774--in--un--countExp'/16,
  'nested--10308-854--in--un--apply'/16,
  'un--projVis'/1,
  'un--processRecord'/10,
  'un--mkDataTy'/2,
  'un--elabRecord'/15
]).
'case--case block in case block in elabRecord-2599'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V23, V24, V19, [V21 | V20], V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord-2457'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10285-775--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], {'Idris.Core.Env.Nil'}, V16)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> begin (V46 = case V15 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V21 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V74 = case V15 of {'Idris.Core.Context.MkDefs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V50 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Context':'un--extendNS'(V13, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V18)), V75))), case V76 of {'Idris.Prelude.Types.Left', E55} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Core.Context':'un--getNS'(V13, V75))), case V79 of {'Idris.Prelude.Types.Left', E57} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V81) -> begin (V82 = (('nested--10285-775--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], {'Idris.Core.Env.Nil'}, V16))(V75))), case V82 of {'Idris.Prelude.Types.Left', E59} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V84) -> begin (V86 = begin (V85 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E61} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V88) -> begin (V116 = ('erlang':'put'(V13, case V88 of {'Idris.Core.Context.MkDefs', E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> {'Idris.Core.Context.MkDefs', V89, V90, V46, [V81 | V74], V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} end(E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V116} end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabRecord-2419'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10285-775--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], {'Idris.Core.Env.Nil'}, V17)) end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V18) -> begin (V46 = case V15 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V21 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V74 = case V15 of {'Idris.Core.Context.MkDefs', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V50 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Context':'un--extendNS'(V13, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V18)), V75))), case V76 of {'Idris.Prelude.Types.Left', E56} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Core.Context':'un--getNS'(V13, V75))), case V79 of {'Idris.Prelude.Types.Left', E58} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V81) -> begin (V82 = (('nested--10285-775--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [], V14, 0, [], {'Idris.Core.Env.Nil'}, V17))(V75))), case V82 of {'Idris.Prelude.Types.Left', E60} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V84) -> begin (V86 = begin (V85 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V85} end), case V86 of {'Idris.Prelude.Types.Left', E62} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V88) -> begin (V116 = ('erlang':'put'(V13, case V88 of {'Idris.Core.Context.MkDefs', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> {'Idris.Core.Context.MkDefs', V89, V90, V46, [V81 | V74], V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V116} end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V117) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), <<"failed"/utf8>>))))}, V117)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-2242'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V34 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V37, V38)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-2090'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V34 of 0 -> [{'Idris.TTImp.TTImp.IBindVar', {'Idris.Core.FC.EmptyFC'}, V27} | []]; 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-1938'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V35 of 0 -> V34; 1 -> {'Idris.TTImp.TTImp.INamedApp', V9, V34, {'Idris.Core.Name.UN', V27}, {'Idris.TTImp.TTImp.IBindVar', V9, V27}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-1774'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V38 of 0 -> (1 + V25); 1 -> V25; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-1606'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V38 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V39, V40)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V41, V42)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabRecord,elabGetters-1190'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of 0 -> (1 + V25); 1 -> V25; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabRecord,elabGetters-1114'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of 0 -> ('nested--10285-775--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V16 | V14], V26, ('case--case block in elabRecord,elabGetters-1190'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.TT':'dn--un--==_Eq_(PiInfo $t)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'('erased', V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'('erased', V30, V31)) end end}, V19, {'Idris.Core.TT.Explicit'})), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V34, V35)) end end}, V16, V6)))) end)))), V24, {'Idris.Core.Env.::', V21, V23}, V17)); 1 -> begin (V36 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V16))), fun (V37) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V13, {'Idris.Core.Name.RF', V36}))(V37))), case V38 of {'Idris.Prelude.Types.Left', E0} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V13, {'Idris.Core.Name.UN', V36}))(V37))), case V41 of {'Idris.Prelude.Types.Left', E2} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V43) -> begin (V44 = (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V14, V13, V23, V18))(V37))), case V44 of {'Idris.Prelude.Types.Left', E4} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(V6, V24, V46))), begin (V48 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record.field"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Field type: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V47)))) end))(V37))), case V48 of {'Idris.Prelude.Types.Left', E6} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V50) -> begin (V51 = {'Idris.Core.Name.MN', <<"rec"/utf8>>, 0}), begin (V54 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V13, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V52) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V52)) end, V2)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V53) -> ('nested--10285-769--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V53)) end, V0)), V6)))), ('nested--10285-771--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('nested--10285-768--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), {'Idris.TTImp.TTImp.IPi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V51}, ('nested--10285-772--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), V47})), V37))), case V54 of {'Idris.Prelude.Types.Left', E8} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V56) -> begin (V57 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record.projection"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Projection "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V56)))))))) end))(V37))), case V57 of {'Idris.Prelude.Types.Left', E10} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V59) -> begin (V68 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V13, V12, V11, [], V7, V8, {'Idris.TTImp.TTImp.IClaim', V9, ('case--case block in elabRecord,elabGetters-2242'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V36, V40, V43, V46, V47, V51, V56, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V60, V61)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V62, V63)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V66, V67)) end end}}, V20)))), ('un--projVis'(V4)), [{'Idris.TTImp.TTImp.Inline'} | []], {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V40, V56}}))(V37))), case V68 of {'Idris.Prelude.Types.Left', E12} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V70) -> begin (V75 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V9, V26}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--replicate'('erased', V25, {'Idris.TTImp.TTImp.Implicit', V9, 0})), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('case--case block in elabRecord,elabGetters-2090'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V36, V40, V43, V46, V47, V51, V56, ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(PiInfo $t)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'('erased', V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'('erased', V73, V74)) end end}, V19, {'Idris.Core.TT.Explicit'})))), ('Idris.Idris2.Data.List':'un--replicate'('erased', ('nested--10285-774--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V17)), {'Idris.TTImp.TTImp.Implicit', V9, 0}))))))))), begin (V80 = {'Idris.TTImp.TTImp.IApp', V9, {'Idris.TTImp.TTImp.IVar', V9, V40}, ('case--case block in elabRecord,elabGetters-1938'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V36, V40, V43, V46, V47, V51, V56, V75, ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(PiInfo $t)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'('erased', V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'('erased', V78, V79)) end end}, V19, {'Idris.Core.TT.Explicit'}))))}), begin (V81 = {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', V36}}), begin (V82 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record.projection"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Projection "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V80)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V81)))))))) end))(V37))), case V82 of {'Idris.Prelude.Types.Left', E14} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V84) -> begin (V85 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V13, V12, V11, [], V7, V8, {'Idris.TTImp.TTImp.IDef', V9, V40, [{'Idris.TTImp.TTImp.PatClause', V9, V80, V81} | []]}))(V37))), case V85 of {'Idris.Prelude.Types.Left', E16} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V87) -> begin (V110 = begin (V88 = ('Idris.Idris2.Core.Context':'un--isPrefixRecordProjections'(V13, V37))), case V88 of {'Idris.Prelude.Types.Left', E18} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V90) -> case V90 of 0 -> begin (V91 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record.projection.prefix"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Prefix projection "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V56)))))))) end))(V37))), case V91 of {'Idris.Prelude.Types.Left', E20} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V93) -> begin (V102 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V13, V12, V11, [], V7, V8, {'Idris.TTImp.TTImp.IClaim', V9, ('case--case block in elabRecord,elabGetters-1606'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V36, V40, V43, V46, V47, V51, V56, V75, V80, V81, V90, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V94) -> fun (V95) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V94, V95)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V96) -> fun (V97) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V96, V97)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V98) -> fun (V99) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V100, V101)) end end}}, V20)))), ('un--projVis'(V4)), [{'Idris.TTImp.TTImp.Inline'} | []], {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V43, V56}}))(V37))), case V102 of {'Idris.Prelude.Types.Left', E22} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V104) -> begin (V105 = {'Idris.TTImp.TTImp.IVar', V9, V43}), begin (V106 = {'Idris.TTImp.TTImp.IVar', V9, V40}), begin (V107 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record.projection.prefix"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Prefix projection "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V105)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V106)))))))) end))(V37))), case V107 of {'Idris.Prelude.Types.Left', E24} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V109) -> (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V13, V12, V11, [], V7, V8, {'Idris.TTImp.TTImp.IDef', V9, V43, [{'Idris.TTImp.TTImp.PatClause', V9, V105, V106} | []]}))(V37)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V110 of {'Idris.Prelude.Types.Left', E26} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V112) -> begin (V113 = [{'Idris.Builtin.MkPair', V16, {'Idris.TTImp.TTImp.IApp', V9, {'Idris.TTImp.TTImp.IVar', V9, V43}, {'Idris.TTImp.TTImp.IVar', V9, V51}}} | V24]), (('nested--10285-775--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V16 | V14], V26, ('case--case block in elabRecord,elabGetters-1774'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V36, V40, V43, V46, V47, V51, V56, V75, V80, V81, V113, ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(PiInfo $t)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'('erased', V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_(Term $vars)'('erased', V116, V117)) end end}, V19, {'Idris.Core.TT.Explicit'})))), V113, {'Idris.Core.Env.::', V21, V23}, V17))(V37)) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabRecord,recTy-893'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V19, V20) -> {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V15}, V19}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10285-772--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('nested--10308-854--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, {'Idris.TTImp.TTImp.IVar', V9, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V19, V20) -> {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V15}, V19}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)))).
'nested--10285-768--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('nested--10304-776--in--un--jname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)) end, V2)).
'nested--10285-771--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of [] -> V15; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V22, V23) -> {'Idris.TTImp.TTImp.IPi', {'Idris.Core.FC.EmptyFC'}, V20, V22, V18, V23, ('nested--10285-771--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17, V15))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10304-776--in--un--jname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V19, V20) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V15}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Implicit'}, V20}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10285-769--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V15, V16, V17, V18, V19) -> V18 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10285-770--in--un--farg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V15, V16, V17, V18, V19) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V18}, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V17, V19}}} end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10285-775--in--un--elabGetters'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V20, V21, V22, V23) -> case V22 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V24, V25, V26, V27) -> begin (V28 = {'Idris.Core.TT.Pi', V24, V25, V26, V27}), ('case--elabRecord,elabGetters-1114'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V24, V21, V23, V27, V26, V25, V28, V20, V18, V17, V16, V15, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V31, V32)) end end}, V21, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V33) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V33)) end, V2)))), fun () -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V36, V37)) end end}, V21, V6)) end)))) end end(E4, E5, E6, E7)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2, E3)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'nested--10285-773--in--un--elabAsData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V16 = ('nested--10285-771--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('nested--10285-768--in--un--paramTelescope'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13)), ('nested--10285-771--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V15) -> ('nested--10285-770--in--un--farg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15)) end, V0)), ('nested--10285-772--in--un--recTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13))))))), fun (V17) -> begin (V20 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V13, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)) end, V2)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> ('nested--10285-769--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V19)) end, V0)), V6)))), V16, V17))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> begin (V23 = {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V14, V22}), begin (V26 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V13, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V24)) end, V2)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V25) -> ('nested--10285-769--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25)) end, V0)), V6)))), ('un--mkDataTy'(V9, V2)), V17))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V29 = {'Idris.TTImp.TTImp.MkImpData', V9, V3, V28, [], [V23 | []]}), begin (V30 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.record"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Record data type "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpData'(V29)))) end))(V17))), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V13, V12, V11, [], V7, V8, {'Idris.TTImp.TTImp.IData', V9, V4, V29}))(V17)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--10285-774--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V20, V21, V22, V23) -> case V22 of {'Idris.Core.TT.Explicit'} -> (fun () -> (1 + ('nested--10285-774--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V19))) end()); _ -> ('nested--10285-774--in--un--countExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V19)) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); _ -> 0 end.
'nested--10308-854--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of [] -> V14; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V20, V21) -> case V21 of {'Idris.Core.TT.Explicit'} -> (fun () -> ('nested--10308-854--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, {'Idris.TTImp.TTImp.IApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V14)), V14, V20}, V17)) end()); _ -> ('nested--10308-854--in--un--apply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, {'Idris.TTImp.TTImp.INamedApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V14)), V14, V18, V20}, V17)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--projVis'(V0) -> case V0 of {'Idris.Core.TT.Public'} -> (fun () -> {'Idris.Core.TT.Public'} end()); _ -> {'Idris.Core.TT.Private'} end.
'un--processRecord'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.TTImp.TTImp.MkImpRecord', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> fun (V15) -> ('un--elabRecord'(V0, V1, V2, V3, V4, V10, V6, V5, V7, V8, V11, V12, V13, V14, V15)) end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkDataTy'(V0, V1) -> case V1 of [] -> {'Idris.TTImp.TTImp.IType', V0}; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V8, V9) -> {'Idris.TTImp.TTImp.IPi', V0, V6, V8, {'Idris.Prelude.Types.Just', V4}, V9, ('un--mkDataTy'(V0, V3))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--elabRecord'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V15 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V12))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = (('nested--10285-773--in--un--elabAsData'(V13, V12, V11, V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, V17))(V14))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V52 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V17, case V24 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V25 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14))), case V52 of {'Idris.Prelude.Types.Left', E33} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V54) -> case V54 of {'Idris.Prelude.Types.Just', E35} -> (fun (V55) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--10285-775--in--un--elabGetters'(V13, V12, V11, V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, [], V17, 0, [], {'Idris.Core.Env.Nil'}, V55))(V14)) end()); {'Idris.Prelude.Types.Just', E36} -> (fun (V56) -> begin (V84 = case V24 of {'Idris.Core.Context.MkDefs', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V59 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V112 = case V24 of {'Idris.Core.Context.MkDefs', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V88 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V113 = ('Idris.Idris2.Core.Context':'un--extendNS'(V1, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V56)), V14))), case V113 of {'Idris.Prelude.Types.Left', E91} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V115) -> begin (V116 = ('Idris.Idris2.Core.Context':'un--getNS'(V1, V14))), case V116 of {'Idris.Prelude.Types.Left', E93} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V118) -> begin (V119 = (('nested--10285-775--in--un--elabGetters'(V13, V12, V11, V10, V9, V8, V0, V7, V6, V5, V4, V3, V2, V1, [], V17, 0, [], {'Idris.Core.Env.Nil'}, V55))(V14))), case V119 of {'Idris.Prelude.Types.Left', E95} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V121) -> begin (V123 = begin (V122 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V122} end), case V123 of {'Idris.Prelude.Types.Left', E97} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V125) -> begin (V153 = ('erlang':'put'(V1, case V125 of {'Idris.Core.Context.MkDefs', E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125} -> (fun (V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> {'Idris.Core.Context.MkDefs', V126, V127, V84, [V118 | V112], V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152} end(E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V153} end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), <<"failed"/utf8>>))))}, V14)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
