-module('Idris.Idris2.TTImp.ProcessDecls').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--9605-6119--in--un--checkTotality'/4,
  'nested--9605-6118--in--un--checkCovering'/5,
  'nested--9967-6443--in--un--bindNames'/9,
  'nested--9967-6442--in--un--bindDataNames'/9,
  'nested--9967-6441--in--un--bindConNames'/9,
  'un--processTTImpFile'/5,
  'un--processTTImpDecls'/8,
  'un--processDecls'/8,
  'un--process'/8,
  'un--getTotalityErrors'/2,
  'un--checkTotalityOK'/3
]).
'nested--9605-6119--in--un--checkTotality'(V0, V1, V2, V3) -> begin (V9 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V7) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"+++ Checking Termination "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)))) end, fun (V8) -> ('Idris.Idris2.Core.Termination':'un--checkTotal'(V1, V2, V0, V8)) end, V7)) end, V3))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--getTotality'(V1, V2, V0, V3))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V17 = ('nested--9605-6118--in--un--checkCovering'(V0, V1, V2, case V14 of {'Idris.Core.TT.MkTotality', E6, E7} -> (fun (V15, V16) -> V16 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> (('Idris.Idris2.Prelude.Types':'un--maybe'(case V14 of {'Idris.Core.TT.MkTotality', E10, E11} -> (fun (V20, V21) -> case V20 of {'Idris.Core.TT.NotTerminating', E12} -> (fun (V22) -> fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Core.NotTotal', V2, V0, V22}}} end end end(E12)); _ -> fun () -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> fun (V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V25}} end end end, V19))(V3)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9605-6118--in--un--checkCovering'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.TT.IsCovering'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Core.NotCovering', V2, V0, V3}}} end.
'nested--9967-6443--in--un--bindNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> case V13 of {'Idris.TTImp.TTImp.MkImpTy', E5, E6, E7, E8} -> (fun (V14, V15, V16, V17) -> begin (V18 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V6, V9, [], V1, V17, V8))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IClaim', V9, V10, V11, V12, {'Idris.TTImp.TTImp.MkImpTy', V14, V15, V16, V20}}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6, E7, E8)); _ -> {'Idris.Prelude.Types.Right', V7} end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E11, E12, E13} -> (fun (V21, V22, V23) -> begin (V24 = ('nested--9967-6442--in--un--bindDataNames'(V0, V1, V2, V3, V4, V5, V6, V23, V8))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IData', V21, V22, V26}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13)); _ -> {'Idris.Prelude.Types.Right', V7} end.
'nested--9967-6442--in--un--bindDataNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> begin (V14 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V6, V9, [], V1, V11, V8))), case V14 of {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V16) -> begin (V19 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V17) -> fun (V18) -> ('nested--9967-6441--in--un--bindConNames'(V0, V1, V2, V3, V4, V5, V6, V17, V18)) end end, V13, [], V8))), case V19 of {'Idris.Prelude.Types.Left', E7} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpData', V9, V10, V16, V12, V21}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E9, E10, E11} -> (fun (V22, V23, V24) -> begin (V25 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V6, V22, [], V1, V24, V8))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpLater', V22, V23, V27}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9967-6441--in--un--bindConNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> begin (V13 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V6, V9, [], V1, V12, V8))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpTy', V9, V10, V11, V15}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processTTImpFile'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V11 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Parsing"/utf8>> end, fun (V8) -> begin (V10 = ('Idris.Idris2.Parser.Source':'un--parseFile'(V3, {'Idris.Core.FC.PhysicalIdrSrc', V7}, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.TTImp.Parser':'un--prog'({'Idris.Core.FC.PhysicalIdrSrc', V7})), fun () -> fun (V9) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 0, 0, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), {'Idris.Libraries.Text.Parser.Core.Empty', V9}} end end}, V8))), {'Idris.Prelude.Types.Right', V10} end end, V4))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V15, V16) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Elaboration"/utf8>> end, fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V18) -> begin (V23 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V19) -> case V19 of {'Idris.Prelude.Types.Left', E7} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Right', 0} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V22) -> ('un--processTTImpDecls'([], V0, V1, V2, [], {'Idris.Core.Env.Nil'}, V16, V22)) end, V18))), case V23 of {'Idris.Prelude.Types.Left', E9} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.UnifyState':'un--checkDelayedHoles'(V2, V0, V18))), case V26 of {'Idris.Prelude.Types.Left', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V28) -> case V28 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); {'Idris.Prelude.Types.Just', E13} -> (fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V29, V18)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V30) -> fun (V31) -> begin (V67 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V32) -> case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Right', 0} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V35) -> begin (V66 = (('Idris.Idris2.Prelude.IO':'un--printLn'({'Idris.Builtin.MkPair', {'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, {'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Core':'dn--un--showPrec_Show_Error'(V64, V65)) end end}}, V30))(V35))), {'Idris.Prelude.Types.Right', V66} end end, V31))), case V67 of {'Idris.Prelude.Types.Left', E16} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V69) -> {'Idris.Prelude.Types.Right', 0} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V17)) end, V4)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Left', E18} -> (fun (V70) -> begin (V99 = begin (V98 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V73, V74, V75)) end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> V77 end end end, fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V81(V83))), begin (V85 = (V82(V83))), (V84(V85)) end end end end end end end}, fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V88(V90))), ((V89(V91))(V90)) end end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V93(V94))), (V95(V94)) end end end end}, fun (V96) -> fun (V97) -> V97 end end}, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V70))))(V4))), {'Idris.Prelude.Types.Right', V98} end), case V99 of {'Idris.Prelude.Types.Left', E19} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V101) -> {'Idris.Prelude.Types.Right', 0} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processTTImpDecls'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V8) -> fun (V9) -> begin (V10 = ('nested--9967-6443--in--un--bindNames'(V6, V0, V5, V4, V3, V2, V1, V8, V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, [], V4, V5, V12))(V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6, V7))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', 1} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processDecls'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V8) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, [], V4, V5, V8)) end, V6, V7))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Right', 1} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--process'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> fun (V13) -> ('Idris.Idris2.TTImp.ProcessType':'un--processType'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V10, V11, V12, V13)) end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E5, E6, E7} -> (fun (V14, V15, V16) -> fun (V17) -> ('Idris.Idris2.TTImp.ProcessData':'un--processData'(V0, V1, V2, V3, V4, V5, V6, V14, V15, V16, V17)) end end(E5, E6, E7)); {'Idris.TTImp.TTImp.IDef', E8, E9, E10} -> (fun (V18, V19, V20) -> fun (V21) -> ('Idris.Idris2.TTImp.ProcessDef':'un--processDef'(V0, V1, V2, V3, V4, V5, V6, V18, V19, V20, V21)) end end(E8, E9, E10)); {'Idris.TTImp.TTImp.IParameters', E11, E12, E13} -> (fun (V22, V23, V24) -> ('Idris.Idris2.TTImp.ProcessParams':'un--processParams'(V0, V1, V2, V3, V5, V6, V22, V23, V24)) end(E11, E12, E13)); {'Idris.TTImp.TTImp.IRecord', E14, E15, E16, E17} -> (fun (V25, V26, V27, V28) -> fun (V29) -> ('Idris.Idris2.TTImp.ProcessRecord':'un--processRecord'(V0, V1, V2, V3, V4, V5, V6, V26, V27, V28, V29)) end end(E14, E15, E16, E17)); {'Idris.TTImp.TTImp.INamespace', E18, E19, E20} -> (fun (V30, V31, V32) -> fun (V33) -> ('Idris.Idris2.Core.Context':'un--withExtendedNS'(V1, V31, fun (V34) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V35) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, V4, V5, V6, V35)) end, V32, V34)) end, V33)) end end(E18, E19, E20)); {'Idris.TTImp.TTImp.ITransform', E21, E22, E23, E24} -> (fun (V36, V37, V38, V39) -> fun (V40) -> ('Idris.Idris2.TTImp.ProcessTransform':'un--processTransform'(V0, V1, V2, V3, V4, V5, V6, V36, V37, V38, V39, V40)) end end(E21, E22, E23, E24)); {'Idris.TTImp.TTImp.IRunElabDecl', E25, E26} -> (fun (V41, V42) -> fun (V43) -> ('Idris.Idris2.TTImp.ProcessRunElab':'un--processRunElab'(V0, V1, V2, V3, V4, V5, V6, V41, V42, V43)) end end(E25, E26)); {'Idris.TTImp.TTImp.IPragma', E27, E28} -> (fun (V44, V45) -> (((V45(V0))(V5))(V6)) end(E27, E28)); {'Idris.TTImp.TTImp.ILog', E29} -> (fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Context':'un--addLogLevel'(V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V50, V51)) end end end end, fun (V52) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Options.Log':'un--unsafeMkLogLevel'(V53, V54)) end end, V52)) end, V46)), V47)) end end(E29)); {'Idris.TTImp.TTImp.IBuiltin', E30, E31, E32} -> (fun (V55, V56, V57) -> fun (V58) -> ('Idris.Idris2.TTImp.ProcessBuiltin':'un--processBuiltin'(V1, V5, V6, V55, V56, V57, V58)) end end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getTotalityErrors'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V6) -> fun (V7) -> ('un--checkTotalityOK'(V0, V6, V7)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), [], V1))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V39) -> V39 end, V38))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkTotalityOK'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E135, E136} -> (fun (V3, V4) -> case V4 of {'Idris.Core.Name.MN', E272, E273} -> (fun (V5, V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E272, E273)); {'Idris.Core.Name.CaseBlock', E274, E275} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E274, E275)); _ -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E137} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V12) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V12 of {'Idris.Core.Context.MkDefs', E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V13 end(E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V41 of {'Idris.Prelude.Types.Left', E167} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E169} -> (fun (V44) -> begin (V66 = case V44 of {'Idris.Core.Context.MkGlobalDef', E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V45 end(E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V100 = case V44 of {'Idris.Core.Context.MkGlobalDef', E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> case V84 of {'Idris.Core.Context.TCon', E212, E213, E214, E215, E216, E217, E218, E219} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V96) -> case V96 of {'Idris.Prelude.Types.Left', E220} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V98) -> {'Idris.Prelude.Types.Right', 0} end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V99) -> ('Idris.Idris2.Core.Termination':'un--checkPositive'(V0, V66, V1, V99)) end, V2)) end(E212, E213, E214, E215, E216, E217, E218, E219)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V100 of {'Idris.Prelude.Types.Left', E222} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E222)); {'Idris.Prelude.Types.Right', E223} -> (fun (V102) -> begin (V103 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V0, V2))), case V103 of {'Idris.Prelude.Types.Left', E224} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E224)); {'Idris.Prelude.Types.Right', E225} -> (fun (V105) -> begin (V127 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V105 end, ('Idris.Idris2.Core.Context':'un--findSetTotal'(case V44 of {'Idris.Core.Context.MkGlobalDef', E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246} -> (fun (V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126) -> V117 end(E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V149 = case V44 of {'Idris.Core.Context.MkGlobalDef', E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148) -> V138 end(E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V150 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" must be: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V127)))))) end, V2))), case V150 of {'Idris.Prelude.Types.Left', E268} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V152) -> case V127 of 2 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; 1 -> ('nested--9605-6118--in--un--checkCovering'(V1, V0, V66, case V149 of {'Idris.Core.TT.MkTotality', E270, E271} -> (fun (V153, V154) -> V154 end(E270, E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)); 0 -> ('nested--9605-6119--in--un--checkTotality'(V1, V0, V66, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E169)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E135, E136)); _ -> begin (V156 = begin (V155 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V155} end), case V156 of {'Idris.Prelude.Types.Left', E0} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V158) -> begin (V187 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V158 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186) -> V159 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V187 of {'Idris.Prelude.Types.Left', E30} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V189) -> case V189 of {'Idris.Prelude.Types.Just', E32} -> (fun (V190) -> begin (V212 = case V190 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211) -> V191 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V246 = case V190 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233) -> case V230 of {'Idris.Core.Context.TCon', E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V234, V235, V236, V237, V238, V239, V240, V241) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V242) -> case V242 of {'Idris.Prelude.Types.Left', E83} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V244) -> {'Idris.Prelude.Types.Right', 0} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V245) -> ('Idris.Idris2.Core.Termination':'un--checkPositive'(V0, V212, V1, V245)) end, V2)) end(E75, E76, E77, E78, E79, E80, E81, E82)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V246 of {'Idris.Prelude.Types.Left', E85} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V248) -> begin (V249 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V0, V2))), case V249 of {'Idris.Prelude.Types.Left', E87} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V251) -> begin (V273 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V251 end, ('Idris.Idris2.Core.Context':'un--findSetTotal'(case V190 of {'Idris.Core.Context.MkGlobalDef', E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109} -> (fun (V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272) -> V263 end(E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V295 = case V190 of {'Idris.Core.Context.MkGlobalDef', E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130} -> (fun (V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294) -> V284 end(E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V296 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" must be: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V273)))))) end, V2))), case V296 of {'Idris.Prelude.Types.Left', E131} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V298) -> case V273 of 2 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; 1 -> ('nested--9605-6118--in--un--checkCovering'(V1, V0, V212, case V295 of {'Idris.Core.TT.MkTotality', E133, E134} -> (fun (V299, V300) -> V300 end(E133, E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)); 0 -> ('nested--9605-6119--in--un--checkTotality'(V1, V0, V212, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
