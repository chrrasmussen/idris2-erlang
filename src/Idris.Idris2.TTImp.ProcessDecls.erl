-module('Idris.Idris2.TTImp.ProcessDecls').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in processTTImpFile-5384'/7,
  'case--processTTImpFile-5324'/5,
  'case--case block in checkTotalityOK-5089'/9,
  'case--case block in checkTotalityOK-5040'/7,
  'case--checkTotalityOK-4997'/4,
  'case--checkTotalityOK,checkTotality-4947'/6,
  'case--process-4814'/13,
  'nested--13016-4908--in--un--checkTotality'/4,
  'nested--13016-4907--in--un--checkCovering'/4,
  'nested--13353-5213--in--un--bindNames'/8,
  'nested--13353-5212--in--un--bindDataNames'/8,
  'nested--13353-5211--in--un--bindConNames'/8,
  'un--processTTImpFile'/5,
  'un--processTTImpDecls'/8,
  'un--processDecls'/8,
  'un--process'/8,
  'un--getTotalityErrors'/2,
  'un--checkTotalityOK'/2
]).
'case--case block in processTTImpFile-5384'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', 0} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V8, V9)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processTTImpFile-5324'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V3, fun () -> <<"Elaboration"/utf8>> end, fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V8) -> begin (V13 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V12) -> ('un--processTTImpDecls'([], V3, V2, V1, [], {'Idris.Core.Env.Nil'}, V5, V12)) end, V8))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.UnifyState':'un--checkDelayedHoles'(V1, V3, V8))), case V16 of {'Idris.Prelude.Types.Left', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E7} -> (fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V19, V8)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V20) -> fun (V21) -> begin (V57 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V22) -> case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V25) -> begin (V56 = (('Idris.Idris2.Prelude.IO':'un--printLn'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> V32 end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V36(V38))), begin (V40 = (V37(V38))), (V39(V40)) end end end end end end end}, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), ((V44(V46))(V45)) end end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V48(V49))), (V50(V49)) end end end end}, fun (V51) -> fun (V52) -> V52 end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V53)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--showPrec_Show_Error'(V54, V55)) end end}}, V20))(V25))), {'Idris.Prelude.Types.Right', V56} end end, V21))), case V57 of {'Idris.Prelude.Types.Left', E10} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V59) -> {'Idris.Prelude.Types.Right', 1} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V7)) end, V6)) end end(E0)); {'Idris.Prelude.Types.Left', E12} -> (fun (V60) -> fun (V61) -> begin (V90 = begin (V89 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> V68 end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), begin (V76 = (V73(V74))), (V75(V76)) end end end end end end end}, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V79(V81))), ((V80(V82))(V81)) end end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V84(V85))), (V86(V85)) end end end end}, fun (V87) -> fun (V88) -> V88 end end}, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V60))))(V61))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E13} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V92) -> {'Idris.Prelude.Types.Right', 1} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkTotalityOK-5089'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.PartialOK'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Core.TT.CoveringOnly'} -> (fun () -> ('nested--13016-4907--in--un--checkCovering'(V0, V1, V5, case V8 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V10, V11) -> V11 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end()); {'Idris.Core.TT.Total'} -> (fun () -> fun (V12) -> ('nested--13016-4908--in--un--checkTotality'(V0, V1, V5, V12)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkTotalityOK-5040'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Context.TCon', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V16) -> case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V19) -> ('Idris.Idris2.Core.Termination':'un--checkPositive'(V1, V5, V0, V19)) end, V15)) end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--checkTotalityOK-4997'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V26 = case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V5 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V27) -> begin (V50 = begin (V28 = {'Idris.Prelude.Types.Just', V4}), (('case--case block in checkTotalityOK-5040'(V0, V1, V2, V4, V28, V26, case V4 of {'Idris.Core.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V46 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V27)) end), case V50 of {'Idris.Prelude.Types.Left', E43} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1, V27))), case V53 of {'Idris.Prelude.Types.Left', E45} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V55) -> begin (V77 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V55 end, ('Idris.Idris2.Core.Context':'un--findSetTotal'(case V4 of {'Idris.Core.Context.MkGlobalDef', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V67 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V99 = case V4 of {'Idris.Core.Context.MkGlobalDef', E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> V88 end(E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V100 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"totality"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" must be: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V77)))))) end))(V27))), case V100 of {'Idris.Prelude.Types.Left', E89} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V102) -> case V77 of {'Idris.Core.TT.PartialOK'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Core.TT.CoveringOnly'} -> (fun () -> (('nested--13016-4907--in--un--checkCovering'(V0, V1, V26, case V99 of {'Idris.Core.TT.MkTotality', E91, E92} -> (fun (V103, V104) -> V104 end(E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V27)) end()); {'Idris.Core.TT.Total'} -> (fun () -> ('nested--13016-4908--in--un--checkTotality'(V0, V1, V26, V27)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V105) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkTotalityOK,checkTotality-4947'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V6) -> fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Core.NotTotal', V2, V0, V6}}} end end end(E0)); _ -> fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end.
'case--process-4814'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', V13, V14, V11, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13016-4908--in--un--checkTotality'(V0, V1, V2, V3) -> begin (V8 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V7) -> ('Idris.Idris2.Core.Termination':'un--checkTotal'(V1, V2, V0, V7)) end, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getTotality'(V1, V2, V0, V3))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V16 = (('nested--13016-4907--in--un--checkCovering'(V0, V1, V2, case V13 of {'Idris.Core.TT.MkTotality', E6, E7} -> (fun (V14, V15) -> V15 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', ('case--checkTotalityOK,checkTotality-4947'(V0, V1, V2, V13, V18, case V13 of {'Idris.Core.TT.MkTotality', E10, E11} -> (fun (V19, V20) -> V19 end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> fun (V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V21}} end end end, V18))(V3)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--13016-4907--in--un--checkCovering'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.IsCovering'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Core.NotCovering', V2, V0, V3}}} end end.
'nested--13353-5213--in--un--bindNames'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> case V12 of {'Idris.TTImp.TTImp.MkImpTy', E5, E6, E7, E8} -> (fun (V13, V14, V15, V16) -> fun (V17) -> begin (V18 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V6, [], V1, V16, V17))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IClaim', V8, V9, V10, V11, {'Idris.TTImp.TTImp.MkImpTy', V13, V14, V15, V20}}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7, E8)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', V7} end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E11, E12, E13} -> (fun (V22, V23, V24) -> fun (V25) -> begin (V26 = (('nested--13353-5212--in--un--bindDataNames'(V0, V1, V2, V3, V4, V5, V6, V24))(V25))), case V26 of {'Idris.Prelude.Types.Left', E14} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IData', V22, V23, V28}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', V7} end end.
'nested--13353-5212--in--un--bindDataNames'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> fun (V13) -> begin (V14 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V6, [], V1, V10, V13))), case V14 of {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V16) -> begin (V18 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V17) -> ('nested--13353-5211--in--un--bindConNames'(V0, V1, V2, V3, V4, V5, V6, V17)) end, V12, []))(V13))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpData', V8, V9, V16, V11, V20}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E9, E10, E11} -> (fun (V21, V22, V23) -> fun (V24) -> begin (V25 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V6, [], V1, V23, V24))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpLater', V21, V22, V27}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13353-5211--in--un--bindConNames'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V13 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V6, [], V1, V11, V12))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpTy', V8, V9, V10, V15}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processTTImpFile'(V0, V1, V2, V3, V4) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Parsing"/utf8>> end, fun (V5) -> begin (V7 = ('Idris.Idris2.Parser.Source':'un--parseFile'('erased', V3, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.TTImp.Parser':'un--prog'(V3)), fun () -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), {'Idris.Libraries.Text.Parser.Core.Empty', V6}} end end}, V5))), {'Idris.Prelude.Types.Right', V7} end end, V4))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Elaboration"/utf8>> end, fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V13) -> begin (V18 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V17) -> ('un--processTTImpDecls'([], V0, V1, V2, [], {'Idris.Core.Env.Nil'}, V11, V17)) end, V13))), case V18 of {'Idris.Prelude.Types.Left', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.UnifyState':'un--checkDelayedHoles'(V2, V0, V13))), case V21 of {'Idris.Prelude.Types.Left', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V23) -> case V23 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E9} -> (fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V24, V13)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V25) -> fun (V26) -> begin (V62 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V27) -> case V27 of {'Idris.Prelude.Types.Left', E10} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V30) -> begin (V61 = (('Idris.Idris2.Prelude.IO':'un--printLn'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V58)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--showPrec_Show_Error'(V59, V60)) end end}}, V25))(V30))), {'Idris.Prelude.Types.Right', V61} end end, V26))), case V62 of {'Idris.Prelude.Types.Left', E12} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V64) -> {'Idris.Prelude.Types.Right', 1} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12)) end, V4)) end(E2)); {'Idris.Prelude.Types.Left', E14} -> (fun (V65) -> begin (V94 = begin (V93 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V68, V69, V70)) end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> V72 end end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V76(V78))), begin (V80 = (V77(V78))), (V79(V80)) end end end end end end end}, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V83(V85))), ((V84(V86))(V85)) end end end end end end, fun (V87) -> fun (V88) -> fun (V89) -> begin (V90 = (V88(V89))), (V90(V89)) end end end end}, fun (V91) -> fun (V92) -> V92 end end}, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V65))))(V4))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E15} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V96) -> {'Idris.Prelude.Types.Right', 1} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processTTImpDecls'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V8) -> fun (V9) -> begin (V10 = (('nested--13353-5213--in--un--bindNames'(V6, V0, V5, V4, V3, V2, V1, V8))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, [], V4, V5, V12))(V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6))(V7))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processDecls'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V8) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, [], V4, V5, V8)) end, V6))(V7))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--process'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> ('Idris.Idris2.TTImp.ProcessType':'un--processType'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V10, V11, V12)) end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E5, E6, E7} -> (fun (V13, V14, V15) -> ('Idris.Idris2.TTImp.ProcessData':'un--processData'(V0, V1, V2, V3, V4, V5, V6, V13, V14, V15)) end(E5, E6, E7)); {'Idris.TTImp.TTImp.IDef', E8, E9, E10} -> (fun (V16, V17, V18) -> fun (V19) -> ('Idris.Idris2.TTImp.ProcessDef':'un--processDef'(V0, V1, V2, V3, V4, V5, V6, V16, V17, V18, V19)) end end(E8, E9, E10)); {'Idris.TTImp.TTImp.IParameters', E11, E12, E13} -> (fun (V20, V21, V22) -> ('Idris.Idris2.TTImp.ProcessParams':'un--processParams'(V0, V1, V2, V3, V5, V6, V20, V21, V22)) end(E11, E12, E13)); {'Idris.TTImp.TTImp.IRecord', E14, E15, E16, E17} -> (fun (V23, V24, V25, V26) -> ('Idris.Idris2.TTImp.ProcessRecord':'un--processRecord'(V0, V1, V2, V3, V4, V5, V6, V24, V25, V26)) end(E14, E15, E16, E17)); {'Idris.TTImp.TTImp.INamespace', E18, E19, E20} -> (fun (V27, V28, V29) -> fun (V30) -> begin (V32 = begin (V31 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> begin (V62 = case V34 of {'Idris.Core.Context.MkDefs', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V37 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V63 = ('Idris.Idris2.Core.Context':'un--extendNS'(V1, V28, V30))), case V63 of {'Idris.Prelude.Types.Left', E50} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V65) -> begin (V67 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V66) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, V4, V5, V6, V66)) end, V29))(V30))), case V67 of {'Idris.Prelude.Types.Left', E52} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V69) -> begin (V71 = begin (V70 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V70} end), case V71 of {'Idris.Prelude.Types.Left', E54} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V73) -> begin (V101 = ('erlang':'put'(V1, case V73 of {'Idris.Core.Context.MkDefs', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> {'Idris.Core.Context.MkDefs', V74, V75, V62, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100} end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V101} end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20)); {'Idris.TTImp.TTImp.ITransform', E83, E84, E85, E86} -> (fun (V102, V103, V104, V105) -> fun (V106) -> ('Idris.Idris2.TTImp.ProcessTransform':'un--processTransform'(V0, V1, V2, V3, V4, V5, V6, V102, V103, V104, V105, V106)) end end(E83, E84, E85, E86)); {'Idris.TTImp.TTImp.IRunElabDecl', E87, E88} -> (fun (V107, V108) -> fun (V109) -> ('Idris.Idris2.TTImp.ProcessRunElab':'un--processRunElab'(V0, V1, V2, V3, V4, V5, V6, V107, V108, V109)) end end(E87, E88)); {'Idris.TTImp.TTImp.IPragma', E89, E90} -> (fun (V110, V111) -> (((V111(V0))(V5))(V6)) end(E89, E90)); {'Idris.TTImp.TTImp.ILog', E91} -> (fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Context':'un--addLogLevel'(V1, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V116, V117)) end end end end, fun (V118) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'('erased', 'erased', 'erased', fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Options.Log':'un--unsafeMkLogLevel'(V119, V120)) end end, V118)) end, V112)), V113)) end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getTotalityErrors'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V6) -> ('un--checkTotalityOK'(V0, V6)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V12 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), []))(V1))), case V34 of {'Idris.Prelude.Types.Left', E29} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V37) -> V37 end, V36))} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkTotalityOK'(V0, V1) -> case V1 of {'Idris.Core.Name.NS', E124, E125} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.MN', E250, E251} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E250, E251)); {'Idris.Core.Name.CaseBlock', E252, E253} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E252, E253)); _ -> fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E126} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V14) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V14 of {'Idris.Core.Context.MkDefs', E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V15 end(E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V42 of {'Idris.Prelude.Types.Left', E155} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V44) -> case V44 of {'Idris.Prelude.Types.Just', E157} -> (fun (V45) -> begin (V67 = case V45 of {'Idris.Core.Context.MkGlobalDef', E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V46 end(E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V90 = begin (V68 = {'Idris.Prelude.Types.Just', V45}), (('case--case block in checkTotalityOK-5040'(V1, V0, V14, V45, V68, V67, case V45 of {'Idris.Core.Context.MkGlobalDef', E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V86 end(E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10)) end), case V90 of {'Idris.Prelude.Types.Left', E200} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E200)); {'Idris.Prelude.Types.Right', E201} -> (fun (V92) -> begin (V93 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V0, V10))), case V93 of {'Idris.Prelude.Types.Left', E202} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E202)); {'Idris.Prelude.Types.Right', E203} -> (fun (V95) -> begin (V117 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V95 end, ('Idris.Idris2.Core.Context':'un--findSetTotal'(case V45 of {'Idris.Core.Context.MkGlobalDef', E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116) -> V107 end(E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V139 = case V45 of {'Idris.Core.Context.MkGlobalDef', E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245} -> (fun (V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138) -> V128 end(E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V140 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" must be: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V117)))))) end))(V10))), case V140 of {'Idris.Prelude.Types.Left', E246} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E246)); {'Idris.Prelude.Types.Right', E247} -> (fun (V142) -> case V117 of {'Idris.Core.TT.PartialOK'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Core.TT.CoveringOnly'} -> (fun () -> (('nested--13016-4907--in--un--checkCovering'(V1, V0, V67, case V139 of {'Idris.Core.TT.MkTotality', E248, E249} -> (fun (V143, V144) -> V144 end(E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10)) end()); {'Idris.Core.TT.Total'} -> (fun () -> ('nested--13016-4908--in--un--checkTotality'(V1, V0, V67, V10)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E157)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E124, E125)); _ -> fun (V145) -> begin (V147 = begin (V146 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V146} end), case V147 of {'Idris.Prelude.Types.Left', E0} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V149) -> begin (V177 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V149 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176) -> V150 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V145))), case V177 of {'Idris.Prelude.Types.Left', E29} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V179) -> case V179 of {'Idris.Prelude.Types.Just', E31} -> (fun (V180) -> begin (V202 = case V180 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201) -> V181 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V225 = begin (V203 = {'Idris.Prelude.Types.Just', V180}), (('case--case block in checkTotalityOK-5040'(V1, V0, V149, V180, V203, V202, case V180 of {'Idris.Core.Context.MkGlobalDef', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224) -> V221 end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V145)) end), case V225 of {'Idris.Prelude.Types.Left', E74} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V227) -> begin (V228 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V0, V145))), case V228 of {'Idris.Prelude.Types.Left', E76} -> (fun (V229) -> {'Idris.Prelude.Types.Left', V229} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V230) -> begin (V252 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V230 end, ('Idris.Idris2.Core.Context':'un--findSetTotal'(case V180 of {'Idris.Core.Context.MkGlobalDef', E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98} -> (fun (V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251) -> V242 end(E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V274 = case V180 of {'Idris.Core.Context.MkGlobalDef', E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119} -> (fun (V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273) -> V263 end(E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V275 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" must be: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V252)))))) end))(V145))), case V275 of {'Idris.Prelude.Types.Left', E120} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V277) -> case V252 of {'Idris.Core.TT.PartialOK'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Core.TT.CoveringOnly'} -> (fun () -> (('nested--13016-4907--in--un--checkCovering'(V1, V0, V202, case V274 of {'Idris.Core.TT.MkTotality', E122, E123} -> (fun (V278, V279) -> V279 end(E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V145)) end()); {'Idris.Core.TT.Total'} -> (fun () -> ('nested--13016-4908--in--un--checkTotality'(V1, V0, V202, V145)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
