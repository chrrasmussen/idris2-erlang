-module('Idris.Idris2.Control.Monad.Error.Either').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in <|>-2012'/9,
  'case--<|>-1983'/7,
  'case--<+>-1219'/7,
  'case--max-981'/7,
  'case--min-936'/7,
  'dn--un--traverse_Traversable_((EitherT $e) $m)'/9,
  'dn--un--show_Show_(((EitherT $e) $m) $a)'/5,
  'dn--un--showPrec_Show_(((EitherT $e) $m) $a)'/6,
  'dn--un--pure_Applicative_((EitherT $e) $m)'/5,
  'dn--un--null_Foldable_((EitherT $e) $m)'/5,
  'dn--un--min_Ord_(((EitherT $e) $m) $a)'/6,
  'dn--un--max_Ord_(((EitherT $e) $m) $a)'/6,
  'dn--un--map_Functor_((EitherT $e) $m)'/7,
  'dn--un--lift_MonadTrans_(EitherT $e)'/5,
  'dn--un--liftIO_HasIO_((EitherT $e) $m)'/5,
  'dn--un--join_Monad_((EitherT $e) $m)'/5,
  'dn--un--foldr_Foldable_((EitherT $e) $m)'/8,
  'dn--un--foldl_Foldable_((EitherT $e) $m)'/8,
  'dn--un--empty_Alternative_((EitherT $e) $m)'/4,
  'dn--un--compare_Ord_(((EitherT $e) $m) $a)'/6,
  'dn--un--__Impl_Traversable_((EitherT $e) $m)'/3,
  'dn--un--__Impl_Show_(((EitherT $e) $m) $a)'/4,
  'dn--un--__Impl_Semigroup_(((EitherT $e) $m) $a)'/6,
  'dn--un--__Impl_Ord_(((EitherT $e) $m) $a)'/4,
  'dn--un--__Impl_Monad_((EitherT $e) $m)'/3,
  'dn--un--__Impl_MonadTrans_(EitherT $e)'/5,
  'dn--un--__Impl_HasIO_((EitherT $e) $m)'/3,
  'dn--un--__Impl_Functor_((EitherT $e) $m)'/7,
  'dn--un--__Impl_Foldable_((EitherT $e) $m)'/3,
  'dn--un--__Impl_Eq_(((EitherT $e) $m) $a)'/4,
  'dn--un--__Impl_Applicative_((EitherT $e) $m)'/3,
  'dn--un--__Impl_Alternative_((EitherT $e) $m)'/3,
  'dn--un-->_Ord_(((EitherT $e) $m) $a)'/6,
  'dn--un-->>=_Monad_((EitherT $e) $m)'/7,
  'dn--un-->=_Ord_(((EitherT $e) $m) $a)'/6,
  'dn--un--==_Eq_(((EitherT $e) $m) $a)'/6,
  'dn--un--<|>_Alternative_((EitherT $e) $m)'/6,
  'dn--un--<_Ord_(((EitherT $e) $m) $a)'/6,
  'dn--un--<=_Ord_(((EitherT $e) $m) $a)'/6,
  'dn--un--<+>_Semigroup_(((EitherT $e) $m) $a)'/6,
  'dn--un--<*>_Applicative_((EitherT $e) $m)'/7,
  'dn--un--/=_Eq_(((EitherT $e) $m) $a)'/6,
  'un--throwE'/5,
  'un--swapEitherT'/5,
  'un--runEitherT'/4,
  'un--right'/5,
  'un--mapEitherT'/8,
  'un--left'/5,
  'un--eitherT'/8,
  'un--catchE'/7,
  'un--bimapEitherT'/9
]).
'case--case block in <|>-2012'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V10, V11, V12) -> V10 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E1, E2, E3} -> (fun (V13, V14, V15) -> ((V14('erased'))({'Idris.Prelude.Types.Left', case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E4, E5} -> (fun (V16, V17) -> ((V16(V6))(V9)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E13, E14, E15} -> (fun (V19, V20, V21) -> V19 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E10, E11, E12} -> (fun (V22, V23, V24) -> ((V23('erased'))({'Idris.Prelude.Types.Right', V18})) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--<|>-1983'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E1, E2, E3} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))(V5))(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E10, E11, E12} -> (fun (V13, V14, V15) -> V13 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E5, E6, E7} -> (fun (V16, V17, V18) -> ((V17('erased'))({'Idris.Prelude.Types.Left', case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E8, E9} -> (fun (V19, V20) -> ((V19(V7))(V12)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Right', E13} -> (fun (V21) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V22, V23, V24) -> V22 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V25, V26, V27) -> ((V26('erased'))({'Idris.Prelude.Types.Right', V21})) end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Right', E20} -> (fun (V28) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E24, E25, E26} -> (fun (V29, V30, V31) -> V29 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E21, E22, E23} -> (fun (V32, V33, V34) -> ((V33('erased'))({'Idris.Prelude.Types.Right', V28})) end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--<+>-1219'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Right', E0} -> (fun (V7) -> case case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E4, E5, E6} -> (fun (V8, V9, V10) -> V8 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E1, E2, E3} -> (fun (V11, V12, V13) -> ((V12('erased'))(V6)) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> V5 end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--max-981'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> V5; 1 -> V4; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-936'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> V5; 1 -> V4; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--traverse_Traversable_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', case V6 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V9, V10, V11) -> V9 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V12) -> V12 end, case V5 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E3, E4, E5} -> (fun (V13, V14, V15) -> ((((((V15('erased'))('erased'))('erased'))(V6))(fun (V16) -> ('Idris.Idris2.Prelude.Types':'un--either'('erased', 'erased', 'erased', fun () -> fun (V17) -> case V6 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E6, E7, E8} -> (fun (V18, V19, V20) -> ((V19('erased'))({'Idris.Prelude.Types.Left', V17})) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun () -> fun (V21) -> case V6 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E9, E10, E11} -> (fun (V22, V23, V24) -> ((((V22('erased'))('erased'))(fun (V25) -> {'Idris.Prelude.Types.Right', V25} end))((V7(V21)))) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V16)) end))(V8)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--show_Show_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4) -> ('dn--un--showPrec_Show_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, {'Idris.Prelude.Show.Open'}, V4)).
'dn--un--showPrec_Show_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V4, <<"MkEitherT"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', V3, V5)))).
'dn--un--pure_Applicative_((EitherT $e) $m)'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V5, V6, V7) -> ((V6('erased'))({'Idris.Prelude.Types.Right', V4})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--null_Foldable_((EitherT $e) $m)'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', E0, E1, E2} -> (fun (V5, V6, V7) -> ((V7('erased'))(V4)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('case--min-936'('erased', 'erased', 'erased', V3, V5, V4, ('dn--un--<_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)))).
'dn--un--max_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('case--max-981'('erased', 'erased', 'erased', V3, V5, V4, ('dn--un-->_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)))).
'dn--un--map_Functor_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', V4, fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', (V5(V9))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6)).
'dn--un--lift_MonadTrans_(EitherT $e)'(V0, V1, V2, V3, V4) -> case case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V5, V6, V7) -> V5 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V8, V9, V10) -> ((((V8('erased'))('erased'))(fun (V11) -> {'Idris.Prelude.Types.Right', V11} end))(V4)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--liftIO_HasIO_((EitherT $e) $m)'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E0, E1} -> (fun (V5, V6) -> ((V6('erased'))(fun (V7) -> begin (V8 = (V4(V7))), {'Idris.Prelude.Types.Right', V8} end end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--join_Monad_((EitherT $e) $m)'(V0, V1, V2, V3, V4) -> ('dn--un-->>=_Monad_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', V3, V4, fun (V5) -> V5 end)).
'dn--un--foldr_Foldable_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', E0, E1, E2} -> (fun (V8, V9, V10) -> (((((V8('erased'))('erased'))(fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'un--either'('erased', 'erased', 'erased', fun () -> fun (V13) -> V12 end end, fun () -> fun (V14) -> ((V5(V14))(V12)) end end, V11)) end end))(V6))(V7)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldl_Foldable_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5, V6, V7) -> (('dn--un--foldr_Foldable_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', V4, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V10) -> fun (V11) -> fun (V12) -> (V10((V11(V12)))) end end end, fun (V13) -> ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', V5, V8, V13)) end, V9)) end end, fun (V14) -> V14 end, V7))(V6)).
'dn--un--empty_Alternative_((EitherT $e) $m)'(V0, V1, V2, V3) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E5, E6, E7} -> (fun (V4, V5, V6) -> V4 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V7, V8, V9) -> ((V8('erased'))({'Idris.Prelude.Types.Left', case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E3, E4} -> (fun (V10, V11) -> V11 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Basics':'un--on'('erased', 'erased', 'erased', case V3 of {'Idris.Prelude.EqOrd.dn--un--__mkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13) -> fun (V14) -> fun (V15) -> ((V7(V14))(V15)) end end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V16) -> V16 end, V4, V5)).
'dn--un--__Impl_Traversable_((EitherT $e) $m)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--map_Functor_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E0, E1, E2} -> (fun (V7, V8, V9) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6)) end end end end, {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--foldr_Foldable_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E3, E4, E5} -> (fun (V15, V16, V17) -> V16 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12, V13, V14)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--foldl_Foldable_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E6, E7, E8} -> (fun (V23, V24, V25) -> V24 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V20, V21, V22)) end end end end end, fun (V26) -> fun (V27) -> ('dn--un--null_Foldable_((EitherT $e) $m)'('erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E9, E10, E11} -> (fun (V28, V29, V30) -> V29 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V27)) end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('dn--un--traverse_Traversable_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', 'erased', V2, V34, V35, V36)) end end end end end end}.
'dn--un--__Impl_Show_(((EitherT $e) $m) $a)'(V0, V1, V2, V3) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V4) -> ('dn--un--show_Show_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4)) end, fun (V5) -> fun (V6) -> ('dn--un--showPrec_Show_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V5, V6)) end end}.
'dn--un--__Impl_Semigroup_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('dn--un--<+>_Semigroup_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)).
'dn--un--__Impl_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2, V3) -> {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V4) -> fun (V5) -> ('dn--un--==_Eq_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', case V3 of {'Idris.Prelude.EqOrd.dn--un--__mkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5)) end end, fun (V14) -> fun (V15) -> ('dn--un--/=_Eq_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', case V3 of {'Idris.Prelude.EqOrd.dn--un--__mkOrd', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23) -> V16 end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14, V15)) end end}, fun (V24) -> fun (V25) -> ('dn--un--compare_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V24, V25)) end end, fun (V26) -> fun (V27) -> ('dn--un--<_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V26, V27)) end end, fun (V28) -> fun (V29) -> ('dn--un-->_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V28, V29)) end end, fun (V30) -> fun (V31) -> ('dn--un--<=_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V30, V31)) end end, fun (V32) -> fun (V33) -> ('dn--un-->=_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V32, V33)) end end, fun (V34) -> fun (V35) -> ('dn--un--max_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V34, V35)) end end, fun (V36) -> fun (V37) -> ('dn--un--min_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V36, V37)) end end}.
'dn--un--__Impl_Monad_((EitherT $e) $m)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--map_Functor_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V7, V8, V9) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V10, V11, V12) -> V10 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6)) end end end end, fun (V13) -> fun (V14) -> ('dn--un--pure_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V15, V16, V17) -> V15 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--<*>_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V22, V23, V24) -> V22 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V20, V21)) end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('dn--un-->>=_Monad_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', V2, V27, V28)) end end end end, fun (V29) -> fun (V30) -> ('dn--un--join_Monad_((EitherT $e) $m)'('erased', 'erased', 'erased', V2, V30)) end end}.
'dn--un--__Impl_MonadTrans_(EitherT $e)'(V0, V1, V2, V3, V4) -> ('dn--un--lift_MonadTrans_(EitherT $e)'('erased', 'erased', 'erased', V3, V4)).
'dn--un--__Impl_HasIO_((EitherT $e) $m)'(V0, V1, V2) -> {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--map_Functor_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E6, E7} -> (fun (V7, V8) -> V7 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V12, V13, V14) -> V12 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6)) end end end end, fun (V15) -> fun (V16) -> ('dn--un--pure_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E11, E12} -> (fun (V17, V18) -> V17 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E8, E9, E10} -> (fun (V19, V20, V21) -> V19 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--<*>_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E16, E17} -> (fun (V26, V27) -> V26 end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E13, E14, E15} -> (fun (V28, V29, V30) -> V28 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V24, V25)) end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('dn--un-->>=_Monad_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E18, E19} -> (fun (V35, V36) -> V35 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V33, V34)) end end end end, fun (V37) -> fun (V38) -> ('dn--un--join_Monad_((EitherT $e) $m)'('erased', 'erased', 'erased', case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V39, V40) -> V39 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V38)) end end}, fun (V41) -> fun (V42) -> ('dn--un--liftIO_HasIO_((EitherT $e) $m)'('erased', 'erased', 'erased', V2, V42)) end end}.
'dn--un--__Impl_Functor_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--map_Functor_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', V2, V5, V6)).
'dn--un--__Impl_Foldable_((EitherT $e) $m)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--foldr_Foldable_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', V2, V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--foldl_Foldable_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', V2, V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('dn--un--null_Foldable_((EitherT $e) $m)'('erased', 'erased', 'erased', V2, V14)) end end}.
'dn--un--__Impl_Eq_(((EitherT $e) $m) $a)'(V0, V1, V2, V3) -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V4) -> fun (V5) -> ('dn--un--==_Eq_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--/=_Eq_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V6, V7)) end end}.
'dn--un--__Impl_Applicative_((EitherT $e) $m)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--map_Functor_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V7, V8, V9) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6)) end end end end, fun (V10) -> fun (V11) -> ('dn--un--pure_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', V2, V11)) end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--<*>_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', V2, V14, V15)) end end end end}.
'dn--un--__Impl_Alternative_((EitherT $e) $m)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--map_Functor_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V7, V8, V9) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V10, V11, V12) -> V10 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6)) end end end end, fun (V13) -> fun (V14) -> ('dn--un--pure_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V15, V16, V17) -> V15 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--<*>_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V22, V23, V24) -> V22 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V20, V21)) end end end end}, fun (V25) -> ('dn--un--empty_Alternative_((EitherT $e) $m)'('erased', 'erased', 'erased', V2)) end, fun (V26) -> fun (V27) -> fun (V28) -> ('dn--un--<|>_Alternative_((EitherT $e) $m)'('erased', 'erased', 'erased', V2, V27, V28)) end end end}.
'dn--un-->_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)), 2)).
'dn--un-->>=_Monad_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(V5))(fun (V10) -> ('Idris.Idris2.Prelude.Types':'un--either'('erased', 'erased', 'erased', fun () -> fun (V11) -> case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V12, V13, V14) -> V12 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V15, V16, V17) -> ((V16('erased'))({'Idris.Prelude.Types.Left', V11})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun () -> fun (V18) -> (V6(V18)) end end, V10)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un-->=_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)), 0)).
'dn--un--==_Eq_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Basics':'un--on'('erased', 'erased', 'erased', case V3 of {'Idris.Prelude.EqOrd.dn--un--__mkEq', E0, E1} -> (fun (V6, V7) -> fun (V8) -> fun (V9) -> ((V6(V8))(V9)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V10) -> V10 end, V4, V5)).
'dn--un--<|>_Alternative_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (V5())), case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(V4))(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E4, E5, E6} -> (fun (V12, V13, V14) -> ((((V13('erased'))('erased'))(V6))(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E13, E14, E15} -> (fun (V17, V18, V19) -> V17 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E8, E9, E10} -> (fun (V20, V21, V22) -> ((V21('erased'))({'Idris.Prelude.Types.Left', case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E11, E12} -> (fun (V23, V24) -> ((V23(V11))(V16)) end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end})) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E20, E21, E22} -> (fun (V26, V27, V28) -> V26 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E17, E18, E19} -> (fun (V29, V30, V31) -> ((V30('erased'))({'Idris.Prelude.Types.Right', V25})) end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Right', E23} -> (fun (V32) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E27, E28, E29} -> (fun (V33, V34, V35) -> V33 end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E24, E25, E26} -> (fun (V36, V37, V38) -> ((V37('erased'))({'Idris.Prelude.Types.Right', V32})) end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--<_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)), 0)).
'dn--un--<=_Ord_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)), 2)).
'dn--un--<+>_Semigroup_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> case V9 of {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E7, E8, E9} -> (fun (V11, V12, V13) -> V11 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E4, E5, E6} -> (fun (V14, V15, V16) -> ((V15('erased'))(V9)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> V5 end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<*>_Applicative_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V9('erased'))('erased'))(case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V10, V11, V12) -> ((((V12('erased'))('erased'))(case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E6, E7, E8} -> (fun (V13, V14, V15) -> ((V14('erased'))(fun (V16) -> fun (V17) -> case V16 of {'Idris.Prelude.Types.Left', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V19) -> case V17 of {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Right', (V19(V20))} end(E11)); {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_(((EitherT $e) $m) $a)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_(((EitherT $e) $m) $a)'('erased', 'erased', 'erased', V3, V4, V5)))).
'un--throwE'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V5, V6, V7) -> ((V6('erased'))({'Idris.Prelude.Types.Left', V4})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--swapEitherT'(V0, V1, V2, V3, V4) -> ((((V3('erased'))('erased'))(fun (V5) -> ('Idris.Idris2.Prelude.Types':'un--either'('erased', 'erased', 'erased', fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', V6} end end, fun () -> fun (V7) -> {'Idris.Prelude.Types.Left', V7} end end, V5)) end))(V4)).
'un--runEitherT'(V0, V1, V2, V3) -> V3.
'un--right'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V5, V6, V7) -> ((V6('erased'))({'Idris.Prelude.Types.Right', V4})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mapEitherT'(V0, V1, V2, V3, V4, V5, V6, V7) -> (V6(V7)).
'un--left'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V5, V6, V7) -> ((V6('erased'))({'Idris.Prelude.Types.Left', V4})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--eitherT'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))(V7))(fun (V11) -> ('Idris.Idris2.Prelude.Types':'un--either'('erased', 'erased', 'erased', fun () -> V5 end, fun () -> V6 end, V11)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--catchE'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(V5))(fun (V10) -> ('Idris.Idris2.Prelude.Types':'un--either'('erased', 'erased', 'erased', fun () -> fun (V11) -> (V6(V11)) end end, fun () -> fun (V12) -> case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V13, V14, V15) -> V13 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V16, V17, V18) -> ((V17('erased'))({'Idris.Prelude.Types.Right', V12})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V10)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bimapEitherT'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ((((V5('erased'))('erased'))(fun (V9) -> ('Idris.Idris2.Prelude.Types':'un--either'('erased', 'erased', 'erased', fun () -> fun (V10) -> {'Idris.Prelude.Types.Left', (V6(V10))} end end, fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', (V7(V11))} end end, V9)) end))(V8)).
