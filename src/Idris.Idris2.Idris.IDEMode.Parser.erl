-module('Idris.Idris2.Idris.IDEMode.Parser').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--idelex-504'/2,
  'case--idelex,notComment-488'/3,
  'nested--5379-483--in--un--notComment'/2,
  'un--symbols'/0,
  'un--stringTokens'/0,
  'un--sexp'/0,
  'un--parseSExp'/1,
  'un--idelex'/1,
  'un--ideTokens'/0,
  'un--ideParser'/5
]).
'case--idelex-504'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V4 of {'Idris.Libraries.Text.Lexer.Tokenizer.EndInput'} -> (fun () -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V10) -> ('nested--5379-483--in--un--notComment'(V0, V10)) end, V2)), [{'Idris.Libraries.Text.Bounded.MkBounded', {'Idris.Parser.Lexer.Source.EndInput'}, 1, {'Idris.Libraries.Text.Bounded.MkBounds', V6, V8, V6, V8}} | []]))} end(E6, E7)); _ -> {'Idris.Prelude.Types.Left', V3} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Left', V3} end end()); _ -> {'Idris.Prelude.Types.Left', V3} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Left', V3} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--idelex,notComment-488'(V0, V1, V2) -> case V2 of {'Idris.Parser.Lexer.Source.Comment'} -> (fun () -> 1 end()); _ -> 0 end.
'nested--5379-483--in--un--notComment'(V0, V1) -> ('case--idelex,notComment-488'(V0, V1, case V1 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V2, V3, V4) -> V2 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--symbols'() -> [<<"("/utf8>> | [<<":"/utf8>> | [<<")"/utf8>> | []]]].
'un--stringTokens'() -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'('erased', ('Idris.Idris2.Libraries.Text.Lexer':'un--someUntil'('erased', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22})), ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--<|>'('erased', 'erased', ('Idris.Idris2.Libraries.Text.Lexer':'un--escape'(('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{5c})), ('Idris.Idris2.Libraries.Text.Lexer':'un--any'()))), ('Idris.Idris2.Libraries.Text.Lexer':'un--any'()))))), fun (V0) -> {'Idris.Parser.Lexer.Source.StringLit', 0, V0} end)).
'un--sexp'() -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) end)) end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"True"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.BoolAtom', 0}} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--exactIdent'(<<"False"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.BoolAtom', 1}} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--intLit'()), fun () -> fun (V0) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.IntegerAtom', V0}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) end)), {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--simpleStr'()), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.StringAtom', V1}} end end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<":"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--unqualifiedName'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.SymbolAtom', V2}} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<"("/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'('erased', 'erased', ('un--sexp'()))), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Source':'un--symbol'(<<")"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.IDEMode.Commands.SExpList', V3}} end} end} end} end} end} end} end} end}.
'un--parseSExp'(V0) -> ('un--ideParser'('erased', 0, <<"(interactive)"/utf8>>, V0, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--sexp'()), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), {'Idris.Libraries.Text.Parser.Core.Empty', V1}} end end})).
'un--idelex'(V0) -> ('case--idelex-504'(V0, ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--lex'('erased', ('un--ideTokens'()), V0)))).
'un--ideTokens'() -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'('erased', ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'('erased', ('Idris.Idris2.Libraries.Text.Lexer':'un--choice'('erased', 0, {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V11)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V14, V15)) end end end end, fun (V16) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--exact'(V16)) end, ('un--symbols'()))))), fun (V17) -> {'Idris.Parser.Lexer.Source.Symbol', V17} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'('erased', ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'('erased', ('Idris.Idris2.Libraries.Text.Lexer':'un--digits'()), fun (V18) -> {'Idris.Parser.Lexer.Source.IntegerLit', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_String_Integer'(V18))} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'('erased', ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--compose'('erased', 'erased', ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22})), fun (V19) -> {'Idris.Parser.Lexer.Source.StringBegin', 1} end, fun (V20) -> {'Idris.Builtin.MkUnit'} end, fun () -> fun (V21) -> ('un--stringTokens'()) end end, fun (V22) -> ('Idris.Idris2.Libraries.Text.Lexer':'un--is'($\x{22})) end, fun (V23) -> {'Idris.Parser.Lexer.Source.StringEnd'} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--<|>'('erased', ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'('erased', ('Idris.Idris2.Parser.Lexer.Common':'un--identAllowDashes'()), fun (V24) -> {'Idris.Parser.Lexer.Source.Ident', V24} end)), fun () -> ('Idris.Idris2.Libraries.Text.Lexer.Tokenizer':'un--match'('erased', ('Idris.Idris2.Libraries.Text.Lexer':'un--space'()), fun (V25) -> {'Idris.Parser.Lexer.Source.Comment'} end)) end)) end)) end)) end)).
'un--ideParser'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'('erased', 'erased', 'erased', ('Idris.Idris2.Libraries.Utils.Either':'un--mapError'('erased', 'erased', 'erased', fun (V5) -> ('Idris.Idris2.Parser.Support':'un--fromLexError'(V2, V5)) end, ('un--idelex'(V3)))), fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'('erased', 'erased', 'erased', ('Idris.Idris2.Libraries.Utils.Either':'un--mapError'('erased', 'erased', 'erased', fun (V7) -> ('Idris.Idris2.Parser.Support':'un--fromParsingError'('erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V8) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--show_Show_Token'(V8)) end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--showPrec_Show_Token'(V9, V10)) end end}, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V11) -> fun (V12) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--pretty_Pretty_Token'('erased', V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Parser.Lexer.Source':'dn--un--prettyPrec_Pretty_Token'('erased', V14, V15)) end end end}}, V2, V7)) end, ('Idris.Idris2.Libraries.Text.Parser.Core':'un--parse'('erased', 'erased', V1, V4, V6)))), fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V16))} end)) end)).
