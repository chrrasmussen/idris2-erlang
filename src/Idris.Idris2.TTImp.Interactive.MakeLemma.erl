-module('Idris.Idris2.TTImp.Interactive.MakeLemma').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6836-2213--in--un--getArg'/4,
  'un--used'/1,
  'un--mkType'/3,
  'un--mkApp'/3,
  'un--makeLemma'/7,
  'un--hiddenName'/1,
  'un--getArgs'/5,
  'un--bindableArg'/2,
  'un--bindable'/2
]).
'nested--6836-2213--in--un--getArg'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> case V8 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V9 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Just', {'Idris.TTImp.TTImp.IVar', V2, V4}} end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> {'Idris.Prelude.Types.Nothing'} end end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--used'(V0) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1, V2)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V3, V4)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V7, V8)) end end}}, V0)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkType'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V11, V12) -> {'Idris.TTImp.TTImp.IPi', V0, V11, V9, V7, V12, ('un--mkType'(V0, V4, V2))} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkApp'(V0, V1, V2) -> ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V0, V1}, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V3) -> ('nested--6836-2213--in--un--getArg'(V2, V1, V0, V3)) end, V2)))).
'un--makeLemma'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('un--getArgs'([], V1, {'Idris.Core.Env.Nil'}, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('un--mkType'(V2, V10, V11)), ('un--mkApp'(V2, V3, V10))}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--hiddenName'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> case V1 of <<"_"/utf8>> -> 1; _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--getArgs'(V0, V1, V2, V3, V4) -> case V3 of 0 -> fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E32} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V9) -> begin (V13 = begin (V10 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V9, V2, V4, V5))), case V10 of {'Idris.Prelude.Types.Left', E34} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V12) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V12))(V5)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V13 of {'Idris.Prelude.Types.Left', E36} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V15}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V16 = (V3 - 1)), fun (V17) -> case V4 of {'Idris.Core.TT.Bind', E6, E7, E8, E9} -> (fun (V18, V19, V20, V21) -> case V20 of {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V22, V23, V24, V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E20} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V29) -> begin (V33 = begin (V30 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V29, V2, V25, V17))), case V30 of {'Idris.Prelude.Types.Left', E22} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V32) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V32))(V17)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V33 of {'Idris.Prelude.Types.Left', E24} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V35) -> begin (V37 = ('Idris.Idris2.TTImp.Utils':'un--uniqueName'(V29, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V36) -> ('Idris.Idris2.Core.Name':'un--nameRoot'(V36)) end, V0)), ('Idris.Idris2.Core.Name':'un--nameRoot'(V19)), V17))), case V37 of {'Idris.Prelude.Types.Left', E26} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V39) -> begin (V40 = {'Idris.Core.Name.UN', V39}), begin (V41 = (('un--getArgs'([V40 | V0], V1, {'Idris.Core.Env.::', V20, V2}, V16, ('Idris.Idris2.Core.TT':'un--renameTop'(V40, V21))))(V17))), case V41 of {'Idris.Prelude.Types.Left', E28} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V43) -> case V43 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V44, V45) -> begin (V46 = case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V23, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V21, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}})) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Just', V40} end()); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> {'Idris.Prelude.Types.Just', V40}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V47 = case case ('un--used'(V23)) of 1 -> case ('un--bindableArg'(0, V21)) of 1 -> 0; 0 -> case ('un--hiddenName'(V19)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Core.TT.Explicit'}; 0 -> {'Idris.Core.TT.Implicit'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V19, {'Idris.Builtin.MkPair', V46, {'Idris.Builtin.MkPair', V47, {'Idris.Builtin.MkPair', V23, V35}}}} | V44], V45}} end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17, E18, E19)); _ -> begin (V49 = begin (V48 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E10} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V51) -> begin (V55 = begin (V52 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V51, V2, V4, V17))), case V52 of {'Idris.Prelude.Types.Left', E12} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V54) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V54))(V17)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V55 of {'Idris.Prelude.Types.Left', E14} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V57}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8, E9)); _ -> begin (V59 = begin (V58 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E0} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V61) -> begin (V65 = begin (V62 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V61, V2, V4, V17))), case V62 of {'Idris.Prelude.Types.Left', E2} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V64) -> (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V2, V64))(V17)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V65 of {'Idris.Prelude.Types.Left', E4} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V67}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--bindableArg'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case ('un--bindable'(V0, V9)) of 1 -> 1; 0 -> ('un--bindableArg'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V0)), V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); _ -> 0 end.
'un--bindable'(V0, V1) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V1)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V4, V5, V6) -> case V5 of {'Idris.Core.TT.TyCon', E5, E6} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V24, V25, V26, V27)) end end end end end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V29)) end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V32, V33, V34)) end end end end end}, fun (V35) -> ('un--bindable'(V0, V35)) end, V3)) end(E5, E6)); {'Idris.Core.TT.DataCon', E7, E8} -> (fun (V36, V37) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V49)) end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V53, V54, V55, V56)) end end end end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V61, V62, V63)) end end end end end}, fun (V64) -> ('un--bindable'(V0, V64)) end, V3)) end(E7, E8)); _ -> 0 end end(E2, E3, E4)); {'Idris.Core.TT.TDelayed', E9, E10, E11} -> (fun (V65, V66, V67) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V79)) end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V83, V84, V85, V86)) end end end end end end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V88)) end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V91, V92, V93)) end end end end end}, fun (V94) -> ('un--bindable'(V0, V94)) end, [V67 | V3])) end(E9, E10, E11)); {'Idris.Core.TT.TDelay', E12, E13, E14, E15} -> (fun (V95, V96, V97, V98) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V101, V102, V103)) end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V106, V107, V108)) end end end end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V110)) end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V114, V115, V116, V117)) end end end end end end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V119)) end end, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V122, V123, V124)) end end end end end}, fun (V125) -> ('un--bindable'(V0, V125)) end, [V98 | V3])) end(E12, E13, E14, E15)); {'Idris.Core.TT.TForce', E16, E17, E18} -> (fun (V126, V127, V128) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V131, V132, V133)) end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V136, V137, V138)) end end end end end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V140)) end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V144, V145, V146, V147)) end end end end end end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V149)) end end, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V152, V153, V154)) end end end end end}, fun (V155) -> ('un--bindable'(V0, V155)) end, [V128 | V3])) end(E16, E17, E18)); {'Idris.Core.TT.Local', E19, E20, E21} -> (fun (V156, V157, V158) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V158)); _ -> 0 end end(E19, E20, E21)); _ -> 0 end end(E0, E1)); _ -> 0 end.
