-module('Idris.Idris2.TTImp.ProcessDef').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--with block in nameListEq-10016'/4,
  'with--nameListEq-10009'/5,
  'with--extendEnv-4156'/20,
  'with--extendEnv-4075'/19,
  'case--case block in case block in case block in processDef-13123'/27,
  'case--case block in case block in case block in processDef-13042'/26,
  'case--case block in case block in processDef-12787'/23,
  'case--case block in case block in processDef-12671'/17,
  'case--case block in processDef-12625'/15,
  'case--processDef-12595'/13,
  'case--case block in case block in processDef,checkCoverage-12419'/25,
  'case--case block in processDef,checkCoverage-12359'/25,
  'case--case block in processDef,checkCoverage-12254'/21,
  'case--processDef,checkCoverage-12091'/17,
  'case--processDef,checkImpossible-11887'/18,
  'case--case block in case block in processDef,checkImpossible-11726'/25,
  'case--case block in processDef,checkImpossible-11653'/20,
  'case--processDef,checkImpossible-11590'/17,
  'case--compileRunTime-11331'/7,
  'case--case block in case block in case block in case block in mkRunTime-11120'/22,
  'case--case block in case block in case block in mkRunTime-11044'/23,
  'case--case block in case block in mkRunTime-10923'/19,
  'case--case block in case block in mkRunTime-10840'/17,
  'case--case block in mkRunTime-10807'/10,
  'case--mkRunTime-10780'/7,
  'case--case block in case block in case block in calcRefs-10447'/17,
  'case--case block in case block in case block in calcRefs-10411'/17,
  'case--case block in case block in case block in calcRefs-10280'/13,
  'case--case block in case block in calcRefs-10252'/13,
  'case--case block in case block in calcRefs-10204'/12,
  'case--case block in calcRefs-10186'/8,
  'case--calcRefs-10171'/6,
  'case--case block in calcRefs,dropErased-10093'/11,
  'case--calcRefs,dropErased-10066'/9,
  'case--case block in checkClause-9887'/27,
  'case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-9269'/56,
  'case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-9126'/61,
  'case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-9000'/56,
  'case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-8770'/56,
  'case--case block in case block in case block in case block in case block in case block in case block in checkClause-8409'/51,
  'case--case block in case block in case block in case block in case block in case block in case block in checkClause-8208'/48,
  'case--case block in case block in case block in case block in case block in case block in checkClause-8056'/40,
  'case--case block in case block in case block in case block in case block in checkClause-7953'/39,
  'case--case block in case block in case block in case block in checkClause-7870'/38,
  'case--case block in case block in case block in checkClause-7789'/37,
  'case--case block in case block in checkClause-7684'/35,
  'case--case block in checkClause-7563'/28,
  'case--checkClause-7477'/19,
  'case--checkClause,keepOldEnv-7309'/28,
  'case--checkClause,keepOldEnv-7219'/27,
  'case--checkClause,keepOldEnv-7129'/27,
  'case--checkClause,keepOldEnv-7041'/26,
  'case--checkClause,bindWithArgs-6742'/26,
  'case--case block in checkClause-6550'/24,
  'case--case block in checkClause-6426'/25,
  'case--checkClause-6277'/16,
  'case--case block in checkClause-6182'/18,
  'case--checkClause-6091'/16,
  'case--case block in case block in checkClause-5980'/25,
  'case--case block in checkClause-5913'/20,
  'case--checkClause-5833'/17,
  'case--case block in checkLHS-5513'/22,
  'case--case block in checkLHS-5435'/19,
  'case--case block in checkLHS-5324'/20,
  'case--checkLHS-5232'/17,
  'case--checkLHS-5173'/14,
  'case--combineLinear-5052'/5,
  'case--combineLinear,combine-4997'/7,
  'case--combineLinear,lookupAll-4930'/9,
  'case--setLinear-4833'/10,
  'case--setLinear-4763'/11,
  'case--case block in findLinear-4662'/12,
  'case--findLinear-4598'/7,
  'case--findLinear,findLinArg-4376'/24,
  'case--findLinear,accessible-4275'/7,
  'case--recoverable-3697'/14,
  'case--recoverable-3465'/14,
  'case--impossibleOK-3087'/14,
  'case--impossibleOK-2981'/14,
  'case--mismatchNF-2779'/14,
  'case--mismatchNF-2673'/14,
  'nested--26159-11386--in--un--withTotality'/14,
  'nested--20618-6810--in--un--wargs'/35,
  'nested--20528-6659--in--un--wargs'/21,
  'nested--20618-6809--in--un--wargn'/35,
  'nested--20528-6658--in--un--wargn'/21,
  'nested--25214-10554--in--un--toErased'/8,
  'nested--25214-10555--in--un--toClause'/7,
  'nested--26159-11387--in--un--simplePat'/12,
  'nested--18497-4896--in--un--notN'/5,
  'nested--25214-10549--in--un--mkCrash'/7,
  'nested--19505-6648--in--un--mkClauseWith'/23,
  'nested--25214-10550--in--un--matchAny'/7,
  'nested--25214-10551--in--un--makeErrorClause'/8,
  'nested--18497-4897--in--un--lookupAll'/6,
  'nested--19505-6647--in--un--keepOldEnv'/23,
  'nested--25214-10553--in--un--getSpec'/6,
  'nested--26159-11390--in--un--getClause'/11,
  'nested--17786-4269--in--un--findLinArg'/10,
  'nested--24608-10039--in--un--dropErased'/6,
  'nested--18497-4899--in--un--combineAll'/6,
  'nested--18497-4898--in--un--combine'/6,
  'nested--26179-11481--in--un--closeEnv'/15,
  'nested--26159-11389--in--un--checkImpossible'/14,
  'nested--26159-11391--in--un--checkCoverage'/15,
  'nested--26159-11388--in--un--catchAll'/11,
  'nested--19505-6646--in--un--bindWithArgs'/22,
  'nested--25214-10552--in--un--addErrorCase'/6,
  'nested--17786-4268--in--un--accessible'/8,
  'un--warnUnreachable'/2,
  'un--toPats'/1,
  'un--setLinear'/3,
  'un--recoverableErr'/3,
  'un--recoverable'/5,
  'un--processDef'/11,
  'un--nameListEq'/2,
  'un--mkRunTime'/6,
  'un--mismatchNF'/5,
  'un--mismatch'/4,
  'un--impossibleOK'/5,
  'un--impossibleErrOK'/3,
  'un--hasEmptyPat'/5,
  'un--findLinear'/6,
  'un--extendEnv'/7,
  'un--compileRunTime'/6,
  'un--combineLinear'/2,
  'un--checkLHS'/14,
  'un--checkClause'/13,
  'un--calcRefs'/5,
  'un--applyEnv'/5
]).
'with--with block in nameListEq-10016'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.Refl'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.Refl'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameListEq-10009'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Builtin.Refl'} -> (fun () -> ('with--with block in nameListEq-10016'(V4, V3, ('un--nameListEq'(V3, V4)), V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--extendEnv-4156'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t happen: names don\x{27}t match in pattern type"/utf8>>}, V20)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> case V21 of {'Idris.Builtin.Refl'} -> (fun () -> ('un--extendEnv'('erased', [V0 | V4], {'Idris.Core.Env.::', {'Idris.Core.TT.Let', V14, V13, V11, V12}, V19}, {'Idris.Core.TT.DropCons', V18}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'('erased', 'erased', V17)), V15, V16)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--extendEnv-4075'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t happen: names don\x{27}t match in pattern type"/utf8>>}, V19)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> case V20 of {'Idris.Builtin.Refl'} -> (fun () -> ('un--extendEnv'('erased', [V0 | V4], {'Idris.Core.Env.::', {'Idris.Core.TT.PVar', V13, V12, V11, V10}, V18}, {'Idris.Core.TT.DropCons', V17}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'('erased', 'erased', V16)), V14, V15)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processDef-13123'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, [V10 | V48], V49, V50, V51, V52, V53} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processDef-13042'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V12 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkGlobalDef', V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, {'Idris.Core.Context.PMDef', ('Idris.Idris2.Core.Context':'un--defaultPI'()), V22, V23, V23, V21}, V44, V45, V46} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processDef-12787'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V25, V26) -> fun (V27) -> begin (V29 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V28) -> ('un--warnUnreachable'(V9, V28)) end, V26))(V27))), case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V31) -> begin (V40 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V9, <<"declare.def"/utf8>>, (1 + (1 + 0)), fun (V32) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'('erased', V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V35, V36)) end end}, V25, V32))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Case tree for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V23, V39))))))))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V27))), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> begin (V68 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V43) -> case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> ('Idris.Idris2.Core.Context':'un--addDef'(V9, {'Idris.Core.Name.Resolved', V17}, case V12 of {'Idris.Core.Context.MkGlobalDef', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> {'Idris.Core.Context.MkGlobalDef', V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, {'Idris.Core.Context.PMDef', ('Idris.Idris2.Core.Context':'un--defaultPI'()), V23, V25, V25, V21}, V65, V66, V67} end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46)) end, V27))), case V68 of {'Idris.Prelude.Types.Left', E33} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V70) -> begin (V102 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V12 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V80 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Public'})) of 0 -> ((begin (V92 = ('Idris.Idris2.Core.CaseTree':'un--getMetas'('erased', V25))), fun () -> fun (V93) -> begin (V97 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V94)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V95, V96)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V92)))))))))) end))(V93))), case V97 of {'Idris.Prelude.Types.Left', E35} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V99) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V9, V100, V101)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V92))))(V93)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end())(V27)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V102 of {'Idris.Prelude.Types.Left', E58} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V104) -> begin (V150 = case ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--isUserName'(V10)), fun () -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V12 of {'Idris.Core.Context.MkGlobalDef', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V114 end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Private'})) end)) of 0 -> ((begin (V147 = ('Idris.Idris2.Core.TT':'un--getMetas'('erased', case V12 of {'Idris.Core.Context.MkGlobalDef', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146) -> V128 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun () -> ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V9, V148, V149)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V147)))) end end())(V27)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V150 of {'Idris.Prelude.Types.Left', E102} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V152) -> begin (V153 = ('Idris.Idris2.Core.Context':'un--addToSave'(V9, V10, V27))), case V153 of {'Idris.Prelude.Types.Left', E104} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V155) -> begin (V157 = begin (V156 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V156} end), case V157 of {'Idris.Prelude.Types.Left', E106} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V159) -> begin (V188 = begin (V187 = ('erlang':'put'(V9, case V159 of {'Idris.Core.Context.MkDefs', E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134} -> (fun (V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186) -> {'Idris.Core.Context.MkDefs', V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, [V10 | V181], V182, V183, V184, V185, V186} end(E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V187} end), case V188 of {'Idris.Prelude.Types.Left', E135} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V190) -> begin (V195 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V191, V192)) end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V193, V194)) end end}, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"assert_total"/utf8>>}}, V27))), case V195 of {'Idris.Prelude.Types.Left', E137} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V197) -> begin (V211 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V198) -> fun (V199) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V198, V199)) end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V200, V201)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V6)))) of 0 -> begin (V202 = ('un--calcRefs'(V9, 1, V197, {'Idris.Core.Name.Resolved', V17}, V27))), case V202 of {'Idris.Prelude.Types.Left', E139} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V204) -> begin (V205 = ('Idris.Idris2.Core.Termination':'un--calculateSizeChange'(V9, V3, V10, V27))), case V205 of {'Idris.Prelude.Types.Left', E141} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V207) -> begin (V208 = ('Idris.Idris2.Core.Context':'un--setSizeChange'(V9, V3, V10, V207, V27))), case V208 of {'Idris.Prelude.Types.Left', E143} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V210) -> ('Idris.Idris2.Core.Termination':'un--checkIfGuarded'(V9, V3, V10, V27)) end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V211 of {'Idris.Prelude.Types.Left', E145} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V213) -> begin (V215 = begin (V214 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V214} end), case V215 of {'Idris.Prelude.Types.Left', E147} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V217) -> begin (V218 = ('nested--26159-11391--in--un--checkCoverage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V17, V14, V16, V20, V27))), case V218 of {'Idris.Prelude.Types.Left', E149} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V220) -> begin (V221 = ('Idris.Idris2.Core.Context':'un--setCovering'(V9, V3, V10, V220, V27))), case V221 of {'Idris.Prelude.Types.Left', E151} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V223) -> begin (V225 = begin (V224 = ('erlang':'put'(V8, V217))), {'Idris.Prelude.Types.Right', V224} end), case V225 of {'Idris.Prelude.Types.Left', E153} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V227) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V228) -> fun (V229) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V228, V229)) end end, fun (V230) -> fun (V231) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V230, V231)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V6)))) of 0 -> ('un--compileRunTime'(V9, V8, V7, V3, V197, V27)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processDef-12671'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processDef-12625'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.Context.None'} -> (fun () -> begin (V36 = case V12 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V17 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V58 = ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V12 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V46 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Public'}))), begin (V88 = ('case--case block in case block in processDef-12671'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V36, V58, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V59) -> fun (V60) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V59, V60)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V61, V62)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V65, V66)) end end}}, case V12 of {'Idris.Core.Context.MkGlobalDef', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V74 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), fun (V89) -> begin (V90 = (('Idris.Idris2.Core.Context':'un--resolveName'(V9, V10))(V89))), case V90 of {'Idris.Prelude.Types.Left', E63} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V92) -> begin (V93 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V9, V89))), case V93 of {'Idris.Prelude.Types.Left', E65} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V95) -> begin (V117 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V95 end, ('Idris.Idris2.Core.Context':'un--findSetTotal'(case V12 of {'Idris.Core.Context.MkGlobalDef', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116) -> V107 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V140 = ('nested--26159-11386--in--un--withTotality'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', V117, fun () -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V118) -> ('un--checkClause'(V0, V9, V8, V7, V88, case V12 of {'Idris.Core.Context.MkGlobalDef', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108} -> (fun (V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139) -> V128 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V117, V58, V92, V6, V5, V4, V118)) end, V1, [])) end, V89))), case V140 of {'Idris.Prelude.Types.Left', E109} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V142) -> begin (V144 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V143) -> ('un--toPats'(V143)) end, ('Idris.Idris2.Data.Either':'un--rights'('erased', 'erased', V142))))), begin (V145 = (('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V9, V3, {'Idris.Core.CaseBuilder.CompileTime', V88}, V10, V36, ('Idris.Idris2.Data.Either':'un--rights'('erased', 'erased', V142))))(V89))), case V145 of {'Idris.Prelude.Types.Left', E111} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V147) -> case V147 of {'Idris.Builtin.DPair.MkDPair', E113, E114} -> (fun (V148, V149) -> case V149 of {'Idris.Builtin.MkPair', E115, E116} -> (fun (V150, V151) -> begin (V153 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V152) -> ('un--warnUnreachable'(V9, V152)) end, V151))(V89))), case V153 of {'Idris.Prelude.Types.Left', E117} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V155) -> begin (V164 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V9, <<"declare.def"/utf8>>, (1 + (1 + 0)), fun (V156) -> begin (V161 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V157) -> fun (V158) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'('erased', V157, V158)) end end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V159, V160)) end end}, V150, V156))), case V161 of {'Idris.Prelude.Types.Left', E119} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V163) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Case tree for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V148, V163))))))))} end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V89))), case V164 of {'Idris.Prelude.Types.Left', E121} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V166) -> begin (V192 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V167) -> case V167 of {'Idris.Prelude.Types.Left', E123} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V169) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V170) -> ('Idris.Idris2.Core.Context':'un--addDef'(V9, {'Idris.Core.Name.Resolved', V92}, case V12 of {'Idris.Core.Context.MkGlobalDef', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145} -> (fun (V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191) -> {'Idris.Core.Context.MkGlobalDef', V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, {'Idris.Core.Context.PMDef', ('Idris.Idris2.Core.Context':'un--defaultPI'()), V148, V150, V150, V144}, V189, V190, V191} end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V170)) end, V89))), case V192 of {'Idris.Prelude.Types.Left', E146} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V194) -> begin (V226 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V12 of {'Idris.Core.Context.MkGlobalDef', E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170} -> (fun (V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215) -> V204 end(E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Public'})) of 0 -> ((begin (V216 = ('Idris.Idris2.Core.CaseTree':'un--getMetas'('erased', V150))), fun () -> fun (V217) -> begin (V221 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V218) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V218)) end, fun (V219) -> fun (V220) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V219, V220)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V216)))))))))) end))(V217))), case V221 of {'Idris.Prelude.Types.Left', E148} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V223) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V224) -> fun (V225) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V9, V224, V225)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V216))))(V217)) end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end())(V89)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V226 of {'Idris.Prelude.Types.Left', E171} -> (fun (V227) -> {'Idris.Prelude.Types.Left', V227} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V228) -> begin (V274 = case ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--isUserName'(V10)), fun () -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V12 of {'Idris.Core.Context.MkGlobalDef', E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214} -> (fun (V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249) -> V238 end(E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Private'})) end)) of 0 -> ((begin (V271 = ('Idris.Idris2.Core.TT':'un--getMetas'('erased', case V12 of {'Idris.Core.Context.MkGlobalDef', E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193} -> (fun (V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270) -> V252 end(E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun () -> ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V272) -> fun (V273) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V9, V272, V273)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V271)))) end end())(V89)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V274 of {'Idris.Prelude.Types.Left', E215} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V276) -> begin (V277 = ('Idris.Idris2.Core.Context':'un--addToSave'(V9, V10, V89))), case V277 of {'Idris.Prelude.Types.Left', E217} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V279) -> begin (V281 = begin (V280 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V280} end), case V281 of {'Idris.Prelude.Types.Left', E219} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E219)); {'Idris.Prelude.Types.Right', E220} -> (fun (V283) -> begin (V312 = begin (V311 = ('erlang':'put'(V9, case V283 of {'Idris.Core.Context.MkDefs', E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247} -> (fun (V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310) -> {'Idris.Core.Context.MkDefs', V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, [V10 | V305], V306, V307, V308, V309, V310} end(E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V311} end), case V312 of {'Idris.Prelude.Types.Left', E248} -> (fun (V313) -> {'Idris.Prelude.Types.Left', V313} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V314) -> begin (V319 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V315) -> fun (V316) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V315, V316)) end end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V317, V318)) end end}, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"assert_total"/utf8>>}}, V89))), case V319 of {'Idris.Prelude.Types.Left', E250} -> (fun (V320) -> {'Idris.Prelude.Types.Left', V320} end(E250)); {'Idris.Prelude.Types.Right', E251} -> (fun (V321) -> begin (V335 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V322) -> fun (V323) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V322, V323)) end end, fun (V324) -> fun (V325) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V324, V325)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V6)))) of 0 -> begin (V326 = ('un--calcRefs'(V9, 1, V321, {'Idris.Core.Name.Resolved', V92}, V89))), case V326 of {'Idris.Prelude.Types.Left', E252} -> (fun (V327) -> {'Idris.Prelude.Types.Left', V327} end(E252)); {'Idris.Prelude.Types.Right', E253} -> (fun (V328) -> begin (V329 = ('Idris.Idris2.Core.Termination':'un--calculateSizeChange'(V9, V3, V10, V89))), case V329 of {'Idris.Prelude.Types.Left', E254} -> (fun (V330) -> {'Idris.Prelude.Types.Left', V330} end(E254)); {'Idris.Prelude.Types.Right', E255} -> (fun (V331) -> begin (V332 = ('Idris.Idris2.Core.Context':'un--setSizeChange'(V9, V3, V10, V331, V89))), case V332 of {'Idris.Prelude.Types.Left', E256} -> (fun (V333) -> {'Idris.Prelude.Types.Left', V333} end(E256)); {'Idris.Prelude.Types.Right', E257} -> (fun (V334) -> ('Idris.Idris2.Core.Termination':'un--checkIfGuarded'(V9, V3, V10, V89)) end(E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V335 of {'Idris.Prelude.Types.Left', E258} -> (fun (V336) -> {'Idris.Prelude.Types.Left', V336} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V337) -> begin (V339 = begin (V338 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V338} end), case V339 of {'Idris.Prelude.Types.Left', E260} -> (fun (V340) -> {'Idris.Prelude.Types.Left', V340} end(E260)); {'Idris.Prelude.Types.Right', E261} -> (fun (V341) -> begin (V342 = ('nested--26159-11391--in--un--checkCoverage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V92, V36, V88, V142, V89))), case V342 of {'Idris.Prelude.Types.Left', E262} -> (fun (V343) -> {'Idris.Prelude.Types.Left', V343} end(E262)); {'Idris.Prelude.Types.Right', E263} -> (fun (V344) -> begin (V345 = ('Idris.Idris2.Core.Context':'un--setCovering'(V9, V3, V10, V344, V89))), case V345 of {'Idris.Prelude.Types.Left', E264} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E264)); {'Idris.Prelude.Types.Right', E265} -> (fun (V347) -> begin (V349 = begin (V348 = ('erlang':'put'(V8, V341))), {'Idris.Prelude.Types.Right', V348} end), case V349 of {'Idris.Prelude.Types.Left', E266} -> (fun (V350) -> {'Idris.Prelude.Types.Left', V350} end(E266)); {'Idris.Prelude.Types.Right', E267} -> (fun (V351) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V352) -> fun (V353) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V352, V353)) end end, fun (V354) -> fun (V355) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V354, V355)) end end}, {'Idris.TTImp.Elab.Check.InCase'}, V6)))) of 0 -> ('un--compileRunTime'(V9, V8, V7, V3, V321, V89)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E265)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end()); _ -> fun (V356) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V3, V10}, V356)) end end.
'case--processDef-12595'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> begin (V14 = {'Idris.Prelude.Types.Just', V13}), ('case--case block in processDef-12625'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13, V14, case V13 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V32 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V36) -> ('Idris.Idris2.Core.Context':'un--noDeclaration'('erased', V9, V3, V10, V36)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processDef,checkCoverage-12419'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of [] -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end; _ -> fun (V26) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Covering'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Covering'(V29, V30)) end end}, {'Idris.Core.TT.NonCoveringCall', V24}, V26)) end end.
'case--case block in processDef,checkCoverage-12359'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Coverage':'un--getNonCoveringRefs'(V9, V3, {'Idris.Core.Name.Resolved', V13}, V25))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> case V28 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}}; _ -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Covering'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Covering'(V31, V32)) end end}, {'Idris.Core.TT.NonCoveringCall', V28}, V25)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V23}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processDef,checkCoverage-12254'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of 0 -> fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Catch all case in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)))) end))(V21))), case V22 of {'Idris.Prelude.Types.Left', E0} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V24) -> {'Idris.Prelude.Types.Right', []} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V25) -> ('Idris.Idris2.Core.Coverage':'un--getMissing'(V17, V9, V3, {'Idris.Core.Name.Resolved', V13}, V18, V25)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processDef,checkCoverage-12091'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V19, V20) -> fun (V21) -> begin (V29 = begin (V26 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'('erased', V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V24, V25)) end end}, V19, V21))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Working from "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V17, V28)))) end))(V21)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> begin (V46 = begin (V32 = {'Idris.Builtin.DPair.MkDPair', V17, {'Idris.Builtin.MkPair', V19, V20}}), (('case--case block in processDef,checkCoverage-12254'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20, V17, V19, V32, (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V44)) end end}, fun (V45) -> ('nested--26159-11388--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V45)) end))(V15))))(V21)) end), case V46 of {'Idris.Prelude.Types.Left', E8} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V48) -> begin (V63 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun (V49) -> begin (V56 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V54, V55)) end end}, V50, V51)) end end, V48, []))(V49))), case V56 of {'Idris.Prelude.Types.Left', E10} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V58) -> begin (V59 = (('Idris.Idris2.Core.Context':'un--getFullName'(V9, {'Idris.Core.Name.Resolved', V13}))(V49))), case V59 of {'Idris.Prelude.Types.Left', E12} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V61) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Initially missing in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V61)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V62) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V62)) end, V58))))))))))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V21))), case V63 of {'Idris.Prelude.Types.Left', E14} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V65) -> begin (V68 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V66) -> fun (V67) -> ('nested--26159-11389--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11, V66, V67)) end end, V48, []))(V21))), case V68 of {'Idris.Prelude.Types.Left', E16} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V70) -> begin (V74 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Coverage':'un--checkMatched'(V9, V15, V71, V72)) end end, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V73) -> V73 end, V70)), []))(V21))), case V74 of {'Idris.Prelude.Types.Left', E18} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V76) -> begin (V78 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V77) -> V77 end, V76))), begin (V79 = {'Idris.Builtin.DPair.MkDPair', V17, {'Idris.Builtin.MkPair', V19, V20}}), (('case--case block in processDef,checkCoverage-12359'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20, V17, V19, V79, V48, V70, V76, V78, ('Idris.Idris2.Data.List':'un--isNil'('erased', V78))))(V21)) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processDef,checkImpossible-11887'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; 1 -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V10}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processDef,checkImpossible-11726'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> fun (V25) -> begin (V26 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"No empty pat"/utf8>> end))(V25))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> begin (V30 = begin (V29 = ('erlang':'put'(V9, V14))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E2} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V33) -> begin (V34 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Some empty pat"/utf8>> end))(V33))), case V34 of {'Idris.Prelude.Types.Left', E4} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V33))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> begin (V43 = begin (V40 = (('Idris.Idris2.Core.Normalise':'un--nf'(V9, [], V39, {'Idris.Core.Env.Nil'}, V23))(V33))), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> (('nested--26179-11481--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V39, V42))(V33)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V47 = begin (V46 = ('erlang':'put'(V9, V14))), {'Idris.Prelude.Types.Right', V46} end), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V45}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processDef,checkImpossible-11653'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> fun (V22) -> begin (V24 = begin (V23 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V9, [], V26, {'Idris.Core.Env.Nil'}, V20, V22))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V30 = (('un--hasEmptyPat'([], V9, V26, {'Idris.Core.Env.Nil'}, V29))(V22))), case V30 of {'Idris.Prelude.Types.Left', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V32) -> case V32 of 0 -> begin (V33 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"No empty pat"/utf8>> end))(V22))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> begin (V37 = begin (V36 = ('erlang':'put'(V9, V14))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V40 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Some empty pat"/utf8>> end))(V22))), case V40 of {'Idris.Prelude.Types.Left', E12} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V22))), case V43 of {'Idris.Prelude.Types.Left', E14} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V45) -> begin (V49 = begin (V46 = (('Idris.Idris2.Core.Normalise':'un--nf'(V9, [], V45, {'Idris.Core.Env.Nil'}, V29))(V22))), case V46 of {'Idris.Prelude.Types.Left', E16} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V48) -> (('nested--26179-11481--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V45, V48))(V22)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V49 of {'Idris.Prelude.Types.Left', E18} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V51) -> begin (V53 = begin (V52 = ('erlang':'put'(V9, V14))), {'Idris.Prelude.Types.Right', V52} end), case V53 of {'Idris.Prelude.Types.Left', E20} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V51}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processDef,checkImpossible-11590'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V9, V15, V19))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V23 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V9, V8, V7, V12, {'Idris.TTImp.Elab.Check.InLHS', V11}, [], [], {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IBindHere', V3, {'Idris.TTImp.TTImp.PATTERN'}, V18}, {'Idris.Prelude.Types.Nothing'}))(V19))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V26, V27) -> begin (V29 = begin (V28 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V9, [], V31, {'Idris.Core.Env.Nil'}, V26, V19))), case V32 of {'Idris.Prelude.Types.Left', E10} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V34) -> begin (V35 = (('un--hasEmptyPat'([], V9, V31, {'Idris.Core.Env.Nil'}, V34))(V19))), case V35 of {'Idris.Prelude.Types.Left', E12} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V37) -> case V37 of 0 -> begin (V38 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"No empty pat"/utf8>> end))(V19))), case V38 of {'Idris.Prelude.Types.Left', E14} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V40) -> begin (V42 = begin (V41 = ('erlang':'put'(V9, V14))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E16} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V45 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Some empty pat"/utf8>> end))(V19))), case V45 of {'Idris.Prelude.Types.Left', E18} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V19))), case V48 of {'Idris.Prelude.Types.Left', E20} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V50) -> begin (V54 = begin (V51 = (('Idris.Idris2.Core.Normalise':'un--nf'(V9, [], V50, {'Idris.Core.Env.Nil'}, V34))(V19))), case V51 of {'Idris.Prelude.Types.Left', E22} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V53) -> (('nested--26179-11481--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V50, V53))(V19)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V54 of {'Idris.Prelude.Types.Left', E24} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V56) -> begin (V58 = begin (V57 = ('erlang':'put'(V9, V14))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E26} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V56}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--compileRunTime-11331'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, [], V29, V30, V31, V32, V33} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in mkRunTime-11120'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V6 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Core.Context.MkGlobalDef', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, {'Idris.Core.Context.PMDef', V13, V9, V12, V19, V11}, V40, V41, V42} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in mkRunTime-11044'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Prelude.Types.Just', E0} -> (fun (V23) -> case V23 of {'Idris.Builtin.Refl'} -> (fun () -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V25) -> case V25 of {'Idris.Prelude.Types.Left', E1} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V28) -> ('Idris.Idris2.Core.Context':'un--addDef'(V4, V0, case V6 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkGlobalDef', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, {'Idris.Core.Context.PMDef', V13, V9, V12, V20, V11}, V47, V48, V49} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V28)) end, V24)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V50) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"WAT"/utf8>>}, V50)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in mkRunTime-10923'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V21, V22) -> fun (V23) -> begin (V53 = begin (V28 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'('erased', V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V26, V27)) end end}, V21, V23))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> ('Idris.Idris2.Core.Context.Log':'un--logC'(V4, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Covering'(V8)), <<":"/utf8>>)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Runtime tree for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V6 of {'Idris.Core.Context.MkGlobalDef', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V33 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<":"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'('erased', 2, ('Idris.Idris2.Core.CaseTree':'dn--un--pretty_Pretty_(CaseTree $vars)'('erased', V19, V30)))))) | []]]]))} end, V23)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V53 of {'Idris.Prelude.Types.Left', E27} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V55) -> begin (V56 = (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V19, V21)) end))(V23))), case V56 of {'Idris.Prelude.Types.Left', E29} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V58) -> begin (V59 = {'Idris.Builtin.DPair.MkDPair', V19, {'Idris.Builtin.MkPair', V21, V22}}), (('case--case block in case block in case block in mkRunTime-11044'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V19, V21, V59, ('un--nameListEq'(V9, V19))))(V23)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in mkRunTime-10840'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V8 of {'Idris.Core.TT.MissingCases', E0} -> (fun (V17) -> ('nested--25214-10552--in--un--addErrorCase'(V0, V1, V2, V3, V4, V16)) end(E0)); _ -> V16 end.
'case--case block in mkRunTime-10807'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> begin (V36 = case V6 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V17 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun () -> fun (V37) -> begin (V81 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V38) -> ('nested--25214-10554--in--un--toErased'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V39 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('nested--25214-10553--in--un--getSpec'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V71 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V38)) end, V14, []))(V37))), case V81 of {'Idris.Prelude.Types.Left', E68} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V83) -> begin (V106 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V84) -> ('nested--25214-10555--in--un--toClause'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105) -> V85 end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V84)) end, V83))), begin (V108 = case V8 of {'Idris.Core.TT.MissingCases', E91} -> (fun (V107) -> ('nested--25214-10552--in--un--addErrorCase'(V0, V1, V2, V3, V4, V106)) end(E91)); _ -> V106 end), begin (V130 = (('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> V109 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.CaseBuilder.RunTime'}, V0, V36, V108))(V37))), case V130 of {'Idris.Prelude.Types.Left', E113} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V132) -> case V132 of {'Idris.Builtin.DPair.MkDPair', E115, E116} -> (fun (V133, V134) -> case V134 of {'Idris.Builtin.MkPair', E117, E118} -> (fun (V135, V136) -> begin (V166 = begin (V141 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V137) -> fun (V138) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'('erased', V137, V138)) end end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V139, V140)) end end}, V135, V37))), case V141 of {'Idris.Prelude.Types.Left', E119} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V143) -> ('Idris.Idris2.Core.Context.Log':'un--logC'(V4, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V144) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Covering'(V8)), <<":"/utf8>>)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Runtime tree for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V6 of {'Idris.Core.Context.MkGlobalDef', E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165) -> V146 end(E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<":"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'('erased', 2, ('Idris.Idris2.Core.CaseTree':'dn--un--pretty_Pretty_(CaseTree $vars)'('erased', V133, V143)))))) | []]]]))} end, V37)) end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V166 of {'Idris.Prelude.Types.Left', E142} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V168) -> begin (V169 = (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V133, V135)) end))(V37))), case V169 of {'Idris.Prelude.Types.Left', E144} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V171) -> begin (V172 = {'Idris.Builtin.DPair.MkDPair', V133, {'Idris.Builtin.MkPair', V135, V136}}), (('case--case block in case block in case block in mkRunTime-11044'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, V13, V14, V12, V10, V36, V83, V106, V108, V136, V133, V135, V172, ('un--nameListEq'(V11, V133))))(V37)) end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1, E2, E3, E4)); _ -> fun () -> fun (V173) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end.
'case--mkRunTime-10780'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V31 = case case V7 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V18 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.TT.MkTotality', E1, E2} -> (fun (V29, V30) -> V30 end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V32, V33)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V34, V35)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V38, V39)) end end}}, case V7 of {'Idris.Core.Context.MkGlobalDef', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V47 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 0 -> (begin (V61 = {'Idris.Prelude.Types.Just', V7}), ('case--case block in mkRunTime-10807'(V0, V1, V2, V3, V4, V5, V7, V61, V31, case V7 of {'Idris.Core.Context.MkGlobalDef', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V79 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end()); 1 -> fun (V83) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> fun (V84) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in case block in case block in calcRefs-10447'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkGlobalDef', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, {'Idris.Prelude.Types.Just', V16}, V31, V32, V33, V34, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in calcRefs-10411'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkGlobalDef', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, {'Idris.Prelude.Types.Just', V16}, V30, V31, V32, V33, V34, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in calcRefs-10280'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V2 of 0 -> V9; 1 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in calcRefs-10252'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V13 = case V2 of 0 -> V9; 1 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V14 = ('Idris.Idris2.Core.CaseTree':'un--getMetas'('erased', V13))), fun (V15) -> begin (V18 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V3, V16, V17)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V14))))(V15))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.CaseTree':'un--addRefs'('erased', V1, V14, V13))), begin (V23 = (('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V2, fun () -> ('nested--24608-10039--in--un--dropErased'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V21)), V21)) end, fun () -> fun (V22) -> {'Idris.Prelude.Types.Right', V21} end end))(V15))), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V73 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V26) -> case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V2, fun () -> fun (V29) -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkGlobalDef', V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, {'Idris.Prelude.Types.Just', V25}, V44, V45, V46, V47, V48, V49, V50} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29)) end end, fun () -> fun (V51) -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> {'Idris.Core.Context.MkGlobalDef', V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, {'Idris.Prelude.Types.Just', V25}, V65, V66, V67, V68, V69, V70, V71, V72} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V51)) end end)), V15))), case V73 of {'Idris.Prelude.Types.Left', E48} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V75) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V76) -> fun (V77) -> ('un--calcRefs'(V3, V2, V1, V76, V77)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V25))))(V15)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end()); {'Idris.Prelude.Types.Just', E50} -> (fun (V78) -> fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in calcRefs-10204'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V2 of 0 -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V25 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case V5 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V45 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in calcRefs-10186'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> begin (V55 = case V2 of 0 -> case V5 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V26 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case V5 of {'Idris.Core.Context.MkGlobalDef', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V46 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V56 = case V2 of 0 -> V11; 1 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V57 = ('Idris.Idris2.Core.CaseTree':'un--getMetas'('erased', V56))), fun (V58) -> begin (V61 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V3, V59, V60)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V57))))(V58))), case V61 of {'Idris.Prelude.Types.Left', E47} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.CaseTree':'un--addRefs'('erased', V1, V57, V56))), begin (V66 = (('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V2, fun () -> ('nested--24608-10039--in--un--dropErased'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V64)), V64)) end, fun () -> fun (V65) -> {'Idris.Prelude.Types.Right', V64} end end))(V58))), case V66 of {'Idris.Prelude.Types.Left', E49} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V68) -> begin (V116 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V69) -> case V69 of {'Idris.Prelude.Types.Left', E51} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V2, fun () -> fun (V72) -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> {'Idris.Core.Context.MkGlobalDef', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, {'Idris.Prelude.Types.Just', V68}, V87, V88, V89, V90, V91, V92, V93} end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V72)) end end, fun () -> fun (V94) -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> {'Idris.Core.Context.MkGlobalDef', V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, {'Idris.Prelude.Types.Just', V68}, V108, V109, V110, V111, V112, V113, V114, V115} end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V94)) end end)), V58))), case V116 of {'Idris.Prelude.Types.Left', E95} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V118) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V119) -> fun (V120) -> ('un--calcRefs'(V3, V2, V1, V119, V120)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V68))))(V58)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end()); {'Idris.Prelude.Types.Just', E97} -> (fun (V121) -> fun (V122) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> fun (V123) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--calcRefs-10171'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in calcRefs-10186'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in calcRefs,dropErased-10093'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> ('nested--24608-10039--in--un--dropErased'(V0, V1, V2, V3, V5, V6)); 1 -> ('nested--24608-10039--in--un--dropErased'(V0, V1, V2, V3, V5, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'('erased', V4, V6)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--calcRefs,dropErased-10066'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> begin (V10 = {'Idris.Prelude.Types.Just', V9}), ('case--case block in calcRefs,dropErased-10093'(V0, V1, V2, V3, V4, V5, V6, V7, V9, V10, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V9 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V18 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V32, V33)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V34, V35)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--24608-10039--in--un--dropErased'(V0, V1, V2, V3, V5, V6)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkClause-9887'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of 0 -> {'Idris.TTImp.Elab.Check.InType'}; 1 -> {'Idris.TTImp.Elab.Check.InExpr'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-9269'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.FC':'un--emptyFC'())), begin (V58 = {'Idris.TTImp.TTImp.IVar', V57, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"Refl"/utf8>>}}}), [{'Idris.Builtin.MkPair', V2, {'Idris.TTImp.TTImp.INamedApp', V57, V58, {'Idris.Core.Name.UN', <<"x"/utf8>>}, V3}} | []] end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-9126'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> [V60 | V8].
'case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-9000'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> case V55 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> {'Idris.Core.Context.MkGlobalDef', V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, [{'Idris.Core.Context.SetTotal', V12} | V67], V68, V69, V70, V71, V72, V73, V74, V75, V76} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-8770'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> case V55 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V56) -> fun (V57) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V56, V57)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V58) -> fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V58, V59)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 1 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in case block in checkClause-8409'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> case V50 of {'Idris.Prelude.Types.Just', E0} -> (fun (V51) -> case V51 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V52, V53) -> case V53 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V54, V55) -> begin (V58 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V56) -> {'Idris.Prelude.Types.Just', V56} end, V52)), [{'Idris.Prelude.Types.Nothing'} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V57) -> {'Idris.Prelude.Types.Just', V57} end, V45))]))), fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"With function type"/utf8>> end, V55, V59))), case V60 of {'Idris.Prelude.Types.Left', E5} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V62) -> begin (V120 = (('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Argument names "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V66) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V66)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V67, V68)) end end}, V65)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V71) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V72, V73)) end end}, V69, V70)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V75, V76)) end end}}, V64)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V81, V82)) end end}, V79)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V85) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V86, V87)) end end}, V83, V84)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V89, V90)) end end}}, V77, V78)) end end}, V63)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V93) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V94) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V96, V97)) end end}, V94)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V100) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V101, V102)) end end}, V98, V99)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V103) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V104, V105)) end end}}, V93)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V108) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V110, V111)) end end}, V108)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V114) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V115, V116)) end end}, V112, V113)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V118, V119)) end end}}, V106, V107)) end end}, V91, V92)) end end}, V58)))) end))(V59))), case V120 of {'Idris.Prelude.Types.Left', E7} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V122) -> begin (V133 = begin (V127 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V17, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V125, V126)) end end}, {'Idris.Core.Name.Resolved', V10}, V59))), case V127 of {'Idris.Prelude.Types.Left', E9} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V129) -> begin (V130 = (('Idris.Idris2.Core.Context':'un--prettyName'(V17, V129))(V59))), case V130 of {'Idris.Prelude.Types.Left', E11} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V132) -> ('Idris.Idris2.Core.UnifyState':'un--genWithName'(V17, V15, V132, V59)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V133 of {'Idris.Prelude.Types.Left', E13} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V135) -> begin (V144 = ('Idris.Idris2.Core.Context':'un--addDef'(V17, V135, ('case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-9000'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V52, V54, V55, V58, V135, ('Idris.Idris2.Core.Context':'un--newDef'(V5, V135, ('case--case block in case block in case block in case block in case block in case block in case block in case block in checkClause-8770'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V52, V54, V55, V58, V135, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V136) -> fun (V137) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V136, V137)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V138) -> fun (V139) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V138, V139)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V140) -> fun (V141) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V140, V141)) end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V142, V143)) end end}}, V14)))), V6, V55, V13, {'Idris.Core.Context.None'})))), V59))), case V144 of {'Idris.Prelude.Types.Left', E15} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V146) -> begin (V154 = ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', V147, V148, V149)) end end end, fun () -> fun (V150) -> [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.TTImp.TTImp.IVar', V5, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V150))}} | []] end end, fun () -> [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V3} | case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E17} -> (fun (V151) -> begin (V152 = ('Idris.Idris2.Core.FC':'un--emptyFC'())), begin (V153 = {'Idris.TTImp.TTImp.IVar', V152, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"Refl"/utf8>>}}}), [{'Idris.Builtin.MkPair', V2, {'Idris.TTImp.TTImp.INamedApp', V152, V153, {'Idris.Core.Name.UN', <<"x"/utf8>>}, V3}} | []] end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end] end))), begin (V170 = ('Idris.Idris2.TTImp.TTImp':'un--gapply'({'Idris.TTImp.TTImp.IVar', V5, V135}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V155) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.TTImp.TTImp.IVar', V5, V155}} end, V54)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V158, V159, V160)) end end end end end, fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V163, V164, V165)) end end end end end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V167)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V168, V169)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, V154))(V58))))))), begin (V171 = (('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Applying to with argument "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V170)))) end))(V59))), case V171 of {'Idris.Prelude.Types.Left', E18} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V173) -> begin (V179 = begin (V174 = (('Idris.Idris2.Core.Context':'un--getFullName'(V17, {'Idris.Core.Name.Resolved', V10}))(V59))), case V174 of {'Idris.Prelude.Types.Left', E20} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V176) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V9, fun (V178) -> {'Idris.Core.Core.InRHS', V5, V176, V178} end))(fun (V177) -> ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V6, V19, V17, V16, V15, V10, V26, V9, V22, V21, V7, V20, V170, ('Idris.Idris2.Core.Normalise':'un--gnf'(V19, V21, V24)), V177)) end))(V59)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V179 of {'Idris.Prelude.Types.Left', E22} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V181) -> begin (V183 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V182) -> ('nested--19505-6648--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, (1 + 0), V135, V58, V18, V182)) end, V0, []))(V59))), case V183 of {'Idris.Prelude.Types.Left', E24} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V185) -> begin (V189 = (('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"With clauses: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V186) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpClause'(V186)) end, fun (V187) -> fun (V188) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpClause'(V187, V188)) end end}, V185)))) end))(V59))), case V189 of {'Idris.Prelude.Types.Left', E26} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V191) -> begin (V192 = ('un--applyEnv'(V6, V17, V7, V135, V59))), case V192 of {'Idris.Prelude.Types.Left', E28} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V194) -> begin (V195 = [V194 | V8]), begin (V196 = {'Idris.TTImp.TTImp.IDef', V5, V135, V185}), begin (V197 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V17, V16, V15, [], V195, V7, V196))(V59))), case V197 of {'Idris.Prelude.Types.Left', E30} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V199) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkClause', V19, V21, V23, V181}}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V200) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #4"/utf8>>}, V200)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in case block in checkClause-8208'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> case V47 of 0 -> fun (V48) -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V31, V48)) end; 1 -> fun (V49) -> {'Idris.Prelude.Types.Right', V31} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in case block in checkClause-8056'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V39 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V40, V41) -> case V41 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V42, V43) -> case V43 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V44, V45) -> begin (V46 = ('Idris.Idris2.TTImp.Elab.Utils':'un--bindNotReq'('erased', V19, V5, 0, V21, V35, [], V24))), begin (V47 = ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V46))), begin (V48 = ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V46))), fun (V49) -> begin (V55 = begin (V50 = {'Idris.Builtin.DPair.MkDPair', V40, {'Idris.Builtin.MkPair', V42, {'Idris.Builtin.MkPair', V44, V45}}}), (('case--case block in case block in case block in case block in case block in case block in case block in checkClause-8208'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V40, V42, V44, V45, V50, V46, V47, V48, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V51) -> fun (V52) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_WithFlag'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_WithFlag'(V53, V54)) end end}, {'Idris.TTImp.TTImp.Syntactic'}, V1))))(V49)) end), case V55 of {'Idris.Prelude.Types.Left', E6} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V57) -> begin (V64 = begin (V58 = (('Idris.Idris2.Core.Normalise':'un--nf'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V40, V34)), V57, V42, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'('erased', 'erased', ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'('erased', V40)), V36))))(V49))), case V58 of {'Idris.Prelude.Types.Left', E8} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V60) -> begin (V61 = (('Idris.Idris2.Core.Normalise':'un--nf'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V40, V34)), V57, V42, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'('erased', 'erased', ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'('erased', V40)), V48))))(V49))), case V61 of {'Idris.Prelude.Types.Left', E10} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V63) -> ('Idris.Idris2.Core.Normalise':'un--replace'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V40, V34)), V57, V42, V60, V44, V63, V49)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V64 of {'Idris.Prelude.Types.Left', E12} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V66) -> begin (V67 = (V45(V66))), begin (V68 = {'Idris.Builtin.DPair.MkDPair', V40, {'Idris.Builtin.MkPair', V42, {'Idris.Builtin.MkPair', V44, V45}}}), (('case--case block in case block in case block in case block in case block in case block in case block in checkClause-8409'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V40, V42, V44, V45, V68, V46, V47, V48, V57, V66, V67, ('Idris.Idris2.TTImp.Elab.Utils':'un--bindReq'('erased', V19, V5, V21, V35, [], V67))))(V49)) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in checkClause-7953'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V38 of {'Idris.Prelude.Types.Just', E0} -> (fun (V39) -> fun (V40) -> begin (V46 = (('nested--19505-6646--in--un--bindWithArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', V37, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V43, V44)) end end end end, fun (V45) -> {'Idris.Builtin.MkPair', V45, V36} end, V2)), V39))(V40))), case V46 of {'Idris.Prelude.Types.Left', E1} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V48) -> case V48 of {'Idris.Builtin.DPair.MkDPair', E3, E4} -> (fun (V49, V50) -> case V50 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V51, V52) -> case V52 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V53, V54) -> begin (V55 = ('Idris.Idris2.TTImp.Elab.Utils':'un--bindNotReq'('erased', V19, V5, 0, V21, V35, [], V24))), begin (V56 = ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V55))), begin (V57 = ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V55))), begin (V63 = begin (V58 = {'Idris.Builtin.DPair.MkDPair', V49, {'Idris.Builtin.MkPair', V51, {'Idris.Builtin.MkPair', V53, V54}}}), (('case--case block in case block in case block in case block in case block in case block in case block in checkClause-8208'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V39, V49, V51, V53, V54, V58, V55, V56, V57, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V59) -> fun (V60) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_WithFlag'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_WithFlag'(V61, V62)) end end}, {'Idris.TTImp.TTImp.Syntactic'}, V1))))(V40)) end), case V63 of {'Idris.Prelude.Types.Left', E9} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V65) -> begin (V72 = begin (V66 = (('Idris.Idris2.Core.Normalise':'un--nf'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V49, V34)), V65, V51, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'('erased', 'erased', ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'('erased', V49)), V36))))(V40))), case V66 of {'Idris.Prelude.Types.Left', E11} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V68) -> begin (V69 = (('Idris.Idris2.Core.Normalise':'un--nf'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V49, V34)), V65, V51, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'('erased', 'erased', ('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'('erased', V49)), V57))))(V40))), case V69 of {'Idris.Prelude.Types.Left', E13} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V71) -> ('Idris.Idris2.Core.Normalise':'un--replace'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V49, V34)), V65, V51, V68, V53, V71, V40)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V72 of {'Idris.Prelude.Types.Left', E15} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V74) -> begin (V75 = (V54(V74))), begin (V76 = {'Idris.Builtin.DPair.MkDPair', V49, {'Idris.Builtin.MkPair', V51, {'Idris.Builtin.MkPair', V53, V54}}}), (('case--case block in case block in case block in case block in case block in case block in case block in checkClause-8409'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V39, V49, V51, V53, V54, V76, V55, V56, V57, V65, V74, V75, ('Idris.Idris2.TTImp.Elab.Utils':'un--bindReq'('erased', V19, V5, V21, V35, [], V75))))(V40)) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V77) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #3"/utf8>>}, V77)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in checkClause-7870'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V37 of {'Idris.Prelude.Types.Just', E0} -> (fun (V38) -> ('case--case block in case block in case block in case block in case block in checkClause-7953'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V38, ('Idris.Idris2.Core.Env':'un--shrinkEnv'('erased', 'erased', V21, V35)))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #2"/utf8>>}, V39)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkClause-7789'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V36 of {'Idris.Prelude.Types.Just', E0} -> (fun (V37) -> ('case--case block in case block in case block in case block in checkClause-7870'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V37, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V33, V35)))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #1"/utf8>>}, V38)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkClause-7684'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V34 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V35, V36) -> fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V19, V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"With value type"/utf8>> end, V33, V37))), case V38 of {'Idris.Prelude.Types.Left', E2} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V40) -> begin (V44 = (('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Using vars "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V42, V43)) end end}, V35)))) end))(V37))), case V44 of {'Idris.Prelude.Types.Left', E4} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V46) -> (('case--case block in case block in case block in checkClause-7789'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V35, V36, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V32, V36))))(V37)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkClause-7563'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V28, V29) -> fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V16, V30))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V19, V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"With value"/utf8>> end, V28, V30))), case V34 of {'Idris.Prelude.Types.Left', E4} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V19, V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Required type"/utf8>> end, V24, V30))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> begin (V40 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V29))(V30))), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V17, V19, V46, V21, V28, V30))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V17, V19, V46, V21, V42, V30))), case V50 of {'Idris.Prelude.Types.Left', E14} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V52) -> begin (V53 = {'Idris.Builtin.MkPair', V28, V29}), (('case--case block in case block in checkClause-7684'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V28, V29, V53, V42, V46, V49, V52, ('nested--19505-6647--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', 'erased', V19, V20, case ('Idris.Idris2.Core.Env':'un--findSubEnv'(V19, V21, V49)) of {'Idris.Builtin.DPair.MkDPair', E16, E17} -> (fun (V54, V55) -> V55 end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V30)) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkClause-7477'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.DPair.MkDPair', E2, E3} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V25, V26) -> case V26 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V29, V30) -> begin (V40 = begin (V31 = {'Idris.Builtin.MkPair', V19, {'Idris.Builtin.DPair.MkDPair', V21, {'Idris.Builtin.MkPair', V23, {'Idris.Builtin.MkPair', V25, {'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', V29, V30}}}}}}), ('case--case block in checkClause-9887'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V21, V23, V25, V27, V29, V30, V31, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V32) -> fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V32, V33)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V34, V35)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V38, V39)) end end}}, V14)))) end), fun (V41) -> begin (V46 = begin (V42 = (('Idris.Idris2.Core.Context':'un--getFullName'(V17, {'Idris.Core.Name.Resolved', V10}))(V41))), case V42 of {'Idris.Prelude.Types.Left', E12} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V44) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V9, fun (V45) -> {'Idris.Core.Core.InRHS', V5, V44, V45} end))(('Idris.Idris2.TTImp.Elab':'un--elabTermSub'(V6, V21, V17, V16, V15, V10, V40, V9, V27, V25, V7, V23, V3, {'Idris.Prelude.Types.Nothing'}))))(V41)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V46 of {'Idris.Prelude.Types.Left', E14} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V48) -> begin (V49 = {'Idris.Builtin.MkPair', V19, {'Idris.Builtin.DPair.MkDPair', V21, {'Idris.Builtin.MkPair', V23, {'Idris.Builtin.MkPair', V25, {'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', V29, V30}}}}}}), case V48 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V50, V51) -> begin (V52 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V16, V41))), case V52 of {'Idris.Prelude.Types.Left', E18} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V21, V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"With value"/utf8>> end, V50, V41))), case V55 of {'Idris.Prelude.Types.Left', E20} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V21, V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Required type"/utf8>> end, V30, V41))), case V58 of {'Idris.Prelude.Types.Left', E22} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V60) -> begin (V61 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V51))(V41))), case V61 of {'Idris.Prelude.Types.Left', E24} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V63) -> begin (V65 = begin (V64 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E26} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V17, V21, V67, V25, V50, V41))), case V68 of {'Idris.Prelude.Types.Left', E28} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V70) -> begin (V71 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V17, V21, V67, V25, V63, V41))), case V71 of {'Idris.Prelude.Types.Left', E30} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V73) -> begin (V74 = {'Idris.Builtin.MkPair', V50, V51}), (('case--case block in case block in checkClause-7684'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V21, V23, V25, V27, V29, V30, V49, V40, V50, V51, V74, V63, V67, V70, V73, ('nested--19505-6647--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', 'erased', V21, V23, case ('Idris.Idris2.Core.Env':'un--findSubEnv'(V21, V25, V70)) of {'Idris.Builtin.DPair.MkDPair', E32, E33} -> (fun (V75, V76) -> V76 end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V41)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkClause,keepOldEnv-7309'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V28, V29) -> {'Idris.Builtin.DPair.MkDPair', [V18 | V28], {'Idris.Core.TT.KeepCons', V29}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkClause,keepOldEnv-7219'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V27, V28) -> {'Idris.Builtin.DPair.MkDPair', [V19 | V27], {'Idris.Core.TT.KeepCons', V28}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkClause,keepOldEnv-7129'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V27, V28) -> {'Idris.Builtin.DPair.MkDPair', [V19 | V27], {'Idris.Core.TT.KeepCons', V28}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkClause,keepOldEnv-7041'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V26, V27) -> {'Idris.Builtin.DPair.MkDPair', V26, {'Idris.Core.TT.DropCons', V27}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkClause,bindWithArgs-6742'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> case V26 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34) -> begin (V35 = {'Idris.Core.TT.Ref', V5, {'Idris.Core.TT.TyCon', V27, V28}, V24}), begin (V36 = ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V22))), begin (V37 = ('Idris.Idris2.Core.TT':'un--apply'('erased', V5, V35, [V36 | [V36 | [('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V20)) | [{'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Just', 1}, 0} | []]]]]))), begin (V38 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Implicit'}, V37}, {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V22}, V21}}), begin (V39 = {'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Just', 1}, (1 + 0)}), begin (V41 = fun (V40) -> {'Idris.Core.TT.Bind', V5, ('nested--20618-6809--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', V20, V21, V22, V23, V24, V29, V30, V31, V32, V33, V34, V28, V27, V25, V35)), {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V22}, {'Idris.Core.TT.Bind', V5, V18, {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Implicit'}, V37}, V40}} end), fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', ('nested--20618-6810--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', V20, V21, V22, V23, V24, V29, V30, V31, V32, V33, V34, V28, V27, V25, V35)), {'Idris.Builtin.MkPair', V38, {'Idris.Builtin.MkPair', V39, V41}}}} end end end end end end end end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> fun (V43) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V43)) end end end(E0)); _ -> fun (V44) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V44)) end end.
'case--case block in checkClause-6550'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> {'Idris.TTImp.Elab.Check.InType'}; 1 -> {'Idris.TTImp.Elab.Check.InExpr'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkClause-6426'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Core.TT.Meta', E0, E1, E2, E3} -> (fun (V25, V26, V27, V28) -> fun (V29) -> ('Idris.Idris2.Core.Metadata':'un--addLHS'(V16, V14, V13, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V1)), ('Idris.Idris2.Core.Env':'un--length'('erased', 'erased', V4)), V18, V20, V29)) end end(E0, E1, E2, E3)); _ -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--checkClause-6277'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.DPair.MkDPair', E2, E3} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V26, V27) -> begin (V37 = begin (V28 = {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.DPair.MkDPair', V18, {'Idris.Builtin.MkPair', V20, {'Idris.Builtin.MkPair', V22, {'Idris.Builtin.MkPair', V24, {'Idris.Builtin.MkPair', V26, V27}}}}}}), ('case--case block in checkClause-6550'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V16, V18, V20, V22, V24, V26, V27, V28, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V29, V30)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V31, V32)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V35, V36)) end end}}, V11)))) end), fun (V38) -> begin (V39 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking RHS "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V0)))) end))(V38))), case V39 of {'Idris.Prelude.Types.Left', E12} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V18, V14, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V22, V38))), case V42 of {'Idris.Prelude.Types.Left', E14} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V44) -> begin (V50 = begin (V45 = (('Idris.Idris2.Core.Context':'un--getFullName'(V14, {'Idris.Core.Name.Resolved', V7}))(V38))), case V45 of {'Idris.Prelude.Types.Left', E16} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V47) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V6, fun (V49) -> {'Idris.Core.Core.InRHS', V2, V47, V49} end))(fun (V48) -> ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V3, V18, V14, V13, V12, V7, V37, V6, V24, V22, V4, V20, V0, ('Idris.Idris2.Core.Normalise':'un--gnf'(V18, V22, V27)), V48)) end))(V38)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V50 of {'Idris.Prelude.Types.Left', E18} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V13, V38))), case V53 of {'Idris.Prelude.Types.Left', E20} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V18, V14, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"RHS term"/utf8>> end, V52, V38))), case V56 of {'Idris.Prelude.Types.Left', E22} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V58) -> begin (V76 = case V8 of 0 -> begin (V66 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V14, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V59) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V60, V61)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V64, V65)) end end}, V26, V38))), case V66 of {'Idris.Prelude.Types.Left', E24} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V68) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V14, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V69) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V70, V71)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V74, V75)) end end}, V52, V38)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V76 of {'Idris.Prelude.Types.Left', E26} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V78) -> begin (V83 = case V52 of {'Idris.Core.TT.Meta', E28, E29, E30, E31} -> (fun (V79, V80, V81, V82) -> ('Idris.Idris2.Core.Metadata':'un--addLHS'(V18, V14, V13, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V1)), ('Idris.Idris2.Core.Env':'un--length'('erased', 'erased', V4)), V22, V26, V38)) end(E28, E29, E30, E31)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end), case V83 of {'Idris.Prelude.Types.Left', E32} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V85) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkClause', V18, V22, V26, V52}}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkClause-6182'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V14}} end; 1 -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.ValidCase', V0, V2, V3, {'Idris.Prelude.Types.Right', V15}}, V19)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkClause-6091'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Core.ValidCase', E4, E5, E6, E7} -> (fun (V16, V17, V18, V19) -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V15, V20)) end end(E4, E5, E6, E7)); _ -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E0} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V25) -> begin (V26 = (('un--impossibleErrOK'(V13, V25, V15))(V21))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> case V28 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V14}}; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.ValidCase', V0, V2, V3, {'Idris.Prelude.Types.Right', V15}}, V21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in checkClause-5980'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V14}} end; 1 -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.ValidCase', V0, V2, V3, {'Idris.Prelude.Types.Left', V23}}, V26)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkClause-5913'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> fun (V22) -> begin (V24 = begin (V23 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V13, V0, V26, V3, V20, V22))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V30 = (('un--hasEmptyPat'(V0, V13, V26, V3, V29))(V22))), case V30 of {'Idris.Prelude.Types.Left', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V32) -> case V32 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V14}}; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.ValidCase', V0, V2, V3, {'Idris.Prelude.Types.Left', V29}}, V22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkClause-5833'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V13, V15, V19))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V23 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.def.clause.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V18)))) end))(V19))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V13, <<"declare.def.clause.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V3, V19))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> begin (V29 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V13, V12, V11, V6, {'Idris.TTImp.Elab.Check.InLHS', V10}, V5, V4, V3, {'Idris.TTImp.TTImp.IBindHere', V2, {'Idris.TTImp.TTImp.PATTERN'}, V18}, {'Idris.Prelude.Types.Nothing'}))(V19))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> case V31 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V32, V33) -> begin (V35 = begin (V34 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E12} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V13, V0, V37, V3, V32, V19))), case V38 of {'Idris.Prelude.Types.Left', E14} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V40) -> begin (V41 = (('un--hasEmptyPat'(V0, V13, V37, V3, V40))(V19))), case V41 of {'Idris.Prelude.Types.Left', E16} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V43) -> case V43 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V14}}; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.ValidCase', V0, V2, V3, {'Idris.Prelude.Types.Left', V40}}, V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkLHS-5513'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Checked LHS term"/utf8>> end, V22, V24))), case V25 of {'Idris.Prelude.Types.Left', E2} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V23))(V24))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> begin (V32 = begin (V31 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V3))), begin (V36 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V12, V2, V34, V35, V22, V24))), case V36 of {'Idris.Prelude.Types.Left', E8} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V12, V2, V34, V3, V30, V24))), case V39 of {'Idris.Prelude.Types.Left', E10} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V41) -> begin (V46 = (('un--findLinear'(V2, V12, 0, 0, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V42) -> fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V42, V43)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V38))(V24))), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Checked LHS term after normalise"/utf8>> end, V38, V24))), case V49 of {'Idris.Prelude.Types.Left', E14} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V51) -> begin (V67 = (('Idris.Idris2.Core.Context.Log':'un--log'(V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity of names in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V54, V55)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V56) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V57, V58)) end end}}, V52)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V61)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V62, V63)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V64) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V65, V66)) end end}}, V59, V60)) end end}, V48)))))))) end))(V24))), case V67 of {'Idris.Prelude.Types.Left', E16} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V69) -> begin (V70 = (('un--combineLinear'(V1, V48))(V24))), case V70 of {'Idris.Prelude.Types.Left', E18} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V72) -> begin (V73 = ('un--setLinear'('erased', V72, V38))), begin (V74 = ('un--setLinear'('erased', V72, V41))), begin (V75 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"LHS term"/utf8>> end, V73, V24))), case V75 of {'Idris.Prelude.Types.Left', E20} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V77) -> begin (V78 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"LHS type"/utf8>> end, V74, V24))), case V78 of {'Idris.Prelude.Types.Left', E22} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V80) -> begin (V81 = ('Idris.Idris2.Core.Metadata':'un--setHoleLHS'(V11, ('Idris.Idris2.Core.Env':'un--bindEnv'(V2, V1, V3, V73)), V24))), case V81 of {'Idris.Prelude.Types.Left', E24} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V83) -> begin (V84 = (('un--extendEnv'('erased', V2, V3, {'Idris.Core.TT.SubRefl'}, V4, V73, V74))(V24))), case V84 of {'Idris.Prelude.Types.Left', E26} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V19, V86}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkLHS-5435'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V9 of 0 -> fun (V19) -> {'Idris.Prelude.Types.Right', V17} end; 1 -> ('Idris.Idris2.TTImp.TTImp':'un--implicitsAs'(V12, V6, V13, V2, V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkLHS-5324'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V9 of 0 -> {'Idris.TTImp.Elab.Check.InTransform'}; 1 -> {'Idris.TTImp.Elab.Check.InLHS', V8}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLHS-5232'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V12, V15, V19))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS with implicits bound"/utf8>> end, V18, V19))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> begin (V26 = case V9 of 0 -> {'Idris.Prelude.Types.Right', V18}; 1 -> (('Idris.Idris2.TTImp.TTImp':'un--implicitsAs'(V12, V6, V13, V2, V18))(V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> begin (V33 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V29) -> begin (V30 = (('Idris.Idris2.Core.Context':'un--getFullName'(V12, {'Idris.Core.Name.Resolved', V6}))(V29))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking LHS of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V32))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V19))), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> begin (V36 = (('Idris.Idris2.Core.Context.Log':'un--log'(V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V28)) end))(V19))), case V36 of {'Idris.Prelude.Types.Left', E12} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V3, V19))), case V39 of {'Idris.Prelude.Types.Left', E14} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V41) -> begin (V42 = case V9 of 0 -> {'Idris.TTImp.Elab.Check.InTransform'}; 1 -> {'Idris.TTImp.Elab.Check.InLHS', V8}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V47 = begin (V43 = (('Idris.Idris2.Core.Context':'un--getFullName'(V12, {'Idris.Core.Name.Resolved', V6}))(V19))), case V43 of {'Idris.Prelude.Types.Left', E16} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V45) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V5, fun (V46) -> {'Idris.Core.Core.InLHS', V1, V45, V46} end))(('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V2, V12, V11, V10, V6, V42, V5, V4, V3, {'Idris.TTImp.TTImp.IBindHere', V1, {'Idris.TTImp.TTImp.PATTERN'}, V28}, {'Idris.Prelude.Types.Nothing'}))))(V19)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V47 of {'Idris.Prelude.Types.Left', E18} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V49) -> case V49 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V50, V51) -> begin (V52 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Checked LHS term"/utf8>> end, V50, V19))), case V52 of {'Idris.Prelude.Types.Left', E22} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V54) -> begin (V55 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V51))(V19))), case V55 of {'Idris.Prelude.Types.Left', E24} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E26} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V3))), begin (V63 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V12, V2, V61, V62, V50, V19))), case V63 of {'Idris.Prelude.Types.Left', E28} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V12, V2, V61, V3, V57, V19))), case V66 of {'Idris.Prelude.Types.Left', E30} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V68) -> begin (V73 = (('un--findLinear'(V2, V12, 0, 0, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V69) -> fun (V70) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V69, V70)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V71) -> fun (V72) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V71, V72)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V65))(V19))), case V73 of {'Idris.Prelude.Types.Left', E32} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Checked LHS term after normalise"/utf8>> end, V65, V19))), case V76 of {'Idris.Prelude.Types.Left', E34} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V78) -> begin (V94 = (('Idris.Idris2.Core.Context.Log':'un--log'(V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity of names in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V81, V82)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V83) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V84, V85)) end end}}, V79)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V89, V90)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V92, V93)) end end}}, V86, V87)) end end}, V75)))))))) end))(V19))), case V94 of {'Idris.Prelude.Types.Left', E36} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V96) -> begin (V97 = (('un--combineLinear'(V1, V75))(V19))), case V97 of {'Idris.Prelude.Types.Left', E38} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V99) -> begin (V100 = ('un--setLinear'('erased', V99, V65))), begin (V101 = ('un--setLinear'('erased', V99, V68))), begin (V102 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"LHS term"/utf8>> end, V100, V19))), case V102 of {'Idris.Prelude.Types.Left', E40} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V104) -> begin (V105 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V2, V12, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"LHS type"/utf8>> end, V101, V19))), case V105 of {'Idris.Prelude.Types.Left', E42} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V107) -> begin (V108 = ('Idris.Idris2.Core.Metadata':'un--setHoleLHS'(V11, ('Idris.Idris2.Core.Env':'un--bindEnv'(V2, V1, V3, V100)), V19))), case V108 of {'Idris.Prelude.Types.Left', E44} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V110) -> begin (V111 = (('un--extendEnv'('erased', V2, V3, {'Idris.Core.TT.SubRefl'}, V4, V100, V101))(V19))), case V111 of {'Idris.Prelude.Types.Left', E46} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V113) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V28, V113}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkLHS-5173'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V9 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', V0} end; 1 -> ('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'('erased', V12, V4, V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--combineLinear-5052'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> begin (V6 = (('un--combineLinear'(V3, V2))(V5))), case V6 of {'Idris.Prelude.Types.Left', E4} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V8) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V0, V1} | V8]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V9) -> begin (V10 = (('nested--18497-4899--in--un--combineAll'(V0, V1, V2, V3, V1, V4))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V14 = (('un--combineLinear'(V3, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V13) -> ('nested--18497-4896--in--un--notN'(V0, V1, V2, V3, V13)) end, V2))))(V9))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V0, V12} | V16]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--combineLinear,combine-4997'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.LinearUsed', V3, (1 + (1 + 0)), V0}, V7)) end; 1 -> fun (V8) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.Preorder':'un--lub'('erased', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V9, V10)) end end, fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V11)) end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V12, V13, V14, V15, V16)) end end end end end}, V5, V4))} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--combineLinear,lookupAll-4930'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> [V5 | ('nested--18497-4897--in--un--lookupAll'(V0, V1, V2, V3, V7, V6))]; 1 -> ('nested--18497-4897--in--un--lookupAll'(V0, V1, V2, V3, V7, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setLinear-4833'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> {'Idris.Core.TT.Bind', V7, V4, ('Idris.Idris2.Core.TT':'un--setMultiplicity'('erased', V6, V10)), ('un--setLinear'('erased', V8, V5))} end(E0)); _ -> {'Idris.Core.TT.Bind', V7, V4, V6, ('un--setLinear'('erased', V8, V5))} end.
'case--setLinear-4763'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> {'Idris.Core.TT.Bind', V8, V5, ('Idris.Idris2.Core.TT':'un--setMultiplicity'('erased', V7, V11)), ('un--setLinear'('erased', V9, V6))} end(E0)); _ -> {'Idris.Core.TT.Bind', V8, V5, V7, ('un--setLinear'('erased', V9, V6))} end.
'case--case block in findLinear-4662'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Normalise':'un--nf'(V5, [], V10, {'Idris.Core.Env.Nil'}, V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V0, ('nested--17786-4268--in--un--accessible'(V0, V1, V2, V3, V4, V5, V8, V2)), V16, V9))(V13)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V17) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findLinear-4598'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V7 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V9, V10, V11) -> case V8 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', []} end; _ -> fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V11, case V17 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13))), case V45 of {'Idris.Prelude.Types.Left', E34} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E36} -> (fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise':'un--nf'(V5, [], V17, {'Idris.Core.Env.Nil'}, V48))(V13))), case V49 of {'Idris.Prelude.Types.Left', E37} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V51) -> (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V0, ('nested--17786-4268--in--un--accessible'(V0, V1, V2, V3, V4, V5, V10, V2)), V51, V8))(V13)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3, E4)); _ -> fun (V52) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1)); _ -> fun (V53) -> {'Idris.Prelude.Types.Right', []} end end.
'case--findLinear,findLinArg-4376'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> fun (V24) -> begin (V25 = (((V13(V21))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V18, {'Idris.Core.TT.Bound'}, V14}))))(V24))), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> begin (V28 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V20, V27, V19))(V24))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V22, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V12, V20))} | V30]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V31) -> begin (V32 = (((V13(V21))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V18, {'Idris.Core.TT.Bound'}, V14}))))(V31))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V20, V34, V19))(V31)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findLinear,accessible-4275'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> V6; 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--recoverable-3697'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 1} end; 1 -> fun (V15) -> begin (V43 = (('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V16) -> ('un--mismatch'(V12, V0, V11, V16)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'('erased', 'erased', 'erased', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Basics':'un--curry'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkBifunctor', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V26, V27) -> {'Idris.Builtin.MkPair', (V23(V26)), (V24(V27))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V33, V34) -> {'Idris.Builtin.MkPair', (V31(V33)), V34} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V40, V41) -> {'Idris.Builtin.MkPair', V40, (V38(V41))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V42) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V42)) end)), V17, V18)) end end, V7, V9))))(V15))), case V43 of {'Idris.Prelude.Types.Left', E6} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V45) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--not'(V45))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--recoverable-3465'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 1} end; 1 -> fun (V15) -> begin (V43 = (('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V16) -> ('un--mismatch'(V12, V0, V11, V16)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'('erased', 'erased', 'erased', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Basics':'un--curry'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkBifunctor', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V26, V27) -> {'Idris.Builtin.MkPair', (V23(V26)), (V24(V27))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V33, V34) -> {'Idris.Builtin.MkPair', (V31(V33)), V34} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V40, V41) -> {'Idris.Builtin.MkPair', V40, (V38(V41))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V42) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V42)) end)), V17, V18)) end end, V3, V7))))(V15))), case V43 of {'Idris.Prelude.Types.Left', E6} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V45) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--not'(V45))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--impossibleOK-3087'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V15) -> ('un--mismatch'(V12, V0, V11, V15)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'('erased', 'erased', 'erased', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Basics':'un--curry'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkBifunctor', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V25, V26) -> {'Idris.Builtin.MkPair', (V22(V25)), (V23(V26))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> case V31 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V32, V33) -> {'Idris.Builtin.MkPair', (V30(V32)), V33} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V39, V40) -> {'Idris.Builtin.MkPair', V39, (V37(V40))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V41) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V41)) end)), V16, V17)) end end, V7, V9)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--impossibleOK-2981'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V14) -> ('un--mismatch'(V12, V0, V11, V14)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'('erased', 'erased', 'erased', fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Basics':'un--curry'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkBifunctor', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V24, V25) -> {'Idris.Builtin.MkPair', (V21(V24)), (V22(V25))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> case V30 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V31, V32) -> {'Idris.Builtin.MkPair', (V29(V31)), V32} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V38, V39) -> {'Idris.Builtin.MkPair', V38, (V36(V39))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V40) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V40)) end)), V15, V16)) end end, V3, V7)))); 1 -> fun (V41) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mismatchNF-2779'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V15) -> ('un--mismatch'(V12, V0, V11, V15)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'('erased', 'erased', 'erased', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Basics':'un--curry'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkBifunctor', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V25, V26) -> {'Idris.Builtin.MkPair', (V22(V25)), (V23(V26))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> case V31 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V32, V33) -> {'Idris.Builtin.MkPair', (V30(V32)), V33} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V39, V40) -> {'Idris.Builtin.MkPair', V39, (V37(V40))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V41) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V41)) end)), V16, V17)) end end, V7, V9)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mismatchNF-2673'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V15) -> ('un--mismatch'(V12, V0, V11, V15)) end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'('erased', 'erased', 'erased', fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Basics':'un--curry'('erased', 'erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkBifunctor', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V25, V26) -> {'Idris.Builtin.MkPair', (V22(V25)), (V23(V26))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> case V31 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V32, V33) -> {'Idris.Builtin.MkPair', (V30(V32)), V33} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V39, V40) -> {'Idris.Builtin.MkPair', V39, (V37(V40))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V41) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V41)) end)), V16, V17)) end end, V5, V8)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--26159-11386--in--un--withTotality'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V9, V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V11, V13))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V25 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', (V12()), fun (V20) -> fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V16, V21))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V20, V21)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V13))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V16, V13))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> {'Idris.Prelude.Types.Right', V27} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--20618-6810--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> [V18 | [('nested--20618-6809--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34)) | []]].
'nested--20528-6659--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> [('nested--20528-6658--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', V19, V20)) | []].
'nested--20618-6809--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Name.MN', <<"warg"/utf8>>, 0}.
'nested--20528-6658--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Core.Name.MN', <<"warg"/utf8>>, 0}.
'nested--25214-10554--in--un--toErased'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> fun (V14) -> begin (V19 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V8, V4, V2, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 0, V10, V12, V14))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Transform':'un--applyTransforms'('erased', V4, V10, V13))(V14))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.TTImp.PartialEval':'un--applySpecialise'(V8, V4, V3, V2, V10, V6, V24))(V14))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V32 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V8, V4, V2, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 0, V10, V27, V14))), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V8, {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V21, V34}}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25214-10555--in--un--toClause'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Core.Context.MkClause', V7, V9, V11, V12} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--26159-11387--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V12, V13, V14) -> 0 end(E0, E1, E2)); {'Idris.Core.TT.Erased', E3, E4} -> (fun (V15, V16) -> 0 end(E3, E4)); {'Idris.Core.TT.As', E5, E6, E7, E8} -> (fun (V17, V18, V19, V20) -> ('nested--26159-11387--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', V20)) end(E5, E6, E7, E8)); _ -> 1 end.
'nested--18497-4896--in--un--notN'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V0, V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25214-10549--in--un--mkCrash'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Core.TT':'un--apply'('erased', V1, {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"idris_crash"/utf8>>}}}, [{'Idris.Core.TT.Erased', V1, 1} | [{'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Str', V6}} | []]])).
'nested--19505-6648--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V23, V24, V25) -> fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"PatClause"/utf8>> end))(V26))), case V27 of {'Idris.Prelude.Types.Left', E3} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'('erased', V17, V23, V18, V8, V19, V20, V21, V24, V26))), case V30 of {'Idris.Prelude.Types.Left', E5} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V32) -> begin (V33 = (('Idris.Idris2.TTImp.WithClause':'un--withRHS'(V17, V23, V18, V19, V20, V25, V21))(V26))), case V33 of {'Idris.Prelude.Types.Left', E7} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PatClause', V23, V32, V35}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E9, E10, E11, E12, E13, E14} -> (fun (V36, V37, V38, V39, V40, V41) -> fun (V42) -> begin (V43 = (('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"WithClause"/utf8>> end))(V42))), case V43 of {'Idris.Prelude.Types.Left', E15} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'('erased', V17, V36, V18, V8, V19, V20, V21, V37, V42))), case V46 of {'Idris.Prelude.Types.Left', E17} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V48) -> begin (V49 = (('Idris.Idris2.TTImp.WithClause':'un--withRHS'(V17, V36, V18, V19, V20, V38, V21))(V42))), case V49 of {'Idris.Prelude.Types.Left', E19} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V51) -> begin (V53 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V52) -> ('nested--19505-6648--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, (1 + V18), V19, V20, V21, V52)) end, V41, []))(V42))), case V53 of {'Idris.Prelude.Types.Left', E21} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.WithClause', V36, V48, V51, V39, V40, V55}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.ImpossibleClause', E23, E24} -> (fun (V56, V57) -> fun (V58) -> begin (V59 = (('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"ImpossibleClause"/utf8>> end))(V58))), case V59 of {'Idris.Prelude.Types.Left', E25} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'('erased', V17, V56, V18, V8, V19, V20, V21, V57, V58))), case V62 of {'Idris.Prelude.Types.Left', E27} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ImpossibleClause', V56, V64}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25214-10550--in--un--matchAny'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V7, V8, V9) -> {'Idris.Core.TT.App', V7, ('nested--25214-10550--in--un--matchAny'(V0, V1, V2, V3, V4, 'erased', V8)), {'Idris.Core.TT.Erased', V7, 1}} end(E0, E1, E2)); _ -> V6 end.
'nested--25214-10551--in--un--makeErrorClause'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Core.Context.MkClause', V5, V6, ('nested--25214-10550--in--un--matchAny'(V0, V1, V2, V3, V4, 'erased', V7)), ('nested--25214-10549--in--un--mkCrash'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unhandled input for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V1))))))))))}.
'nested--18497-4897--in--un--lookupAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> ('case--combineLinear,lookupAll-4930'(V0, V1, V2, V3, V8, V9, V7, V4, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V8)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19505-6647--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Builtin.DPair.MkDPair', V20, {'Idris.Core.TT.SubRefl'}} end()); _ -> case V22 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Builtin.DPair.MkDPair', V20, {'Idris.Core.TT.SubRefl'}} end()); _ -> case V20 of [E0 | E1] -> (fun (V23, V24) -> case V21 of {'Idris.Core.TT.DropCons', E2} -> (fun (V25) -> case V22 of {'Idris.Core.TT.DropCons', E3} -> (fun (V26) -> begin (V27 = [V23 | V24]), ('case--checkClause,keepOldEnv-7041'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', 'erased', V23, V24, V25, V26, V27, ('nested--19505-6647--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', 'erased', V24, V25, V26)))) end end(E3)); {'Idris.Core.TT.KeepCons', E4} -> (fun (V28) -> begin (V29 = [V23 | V24]), ('case--checkClause,keepOldEnv-7129'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', V23, V24, 'erased', V25, V28, V29, 'erased', ('nested--19505-6647--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', 'erased', V24, V25, V28)))) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Core.TT.KeepCons', E5} -> (fun (V30) -> case V22 of {'Idris.Core.TT.DropCons', E6} -> (fun (V31) -> begin (V32 = [V23 | V24]), ('case--checkClause,keepOldEnv-7219'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', V23, V24, 'erased', V30, V31, V32, 'erased', ('nested--19505-6647--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', 'erased', V24, V30, V31)))) end end(E6)); {'Idris.Core.TT.KeepCons', E7} -> (fun (V33) -> begin (V34 = [V23 | V24]), ('case--checkClause,keepOldEnv-7309'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V23, V24, 'erased', 'erased', V30, V33, V34, 'erased', 'erased', ('nested--19505-6647--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', 'erased', V24, V30, V33)))) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--25214-10553--in--un--getSpec'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.PartialEval', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Just', V8} end(E2)); _ -> ('nested--25214-10553--in--un--getSpec'(V0, V1, V2, V3, V4, V7)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--26159-11390--in--un--getClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V13) -> begin (V14 = ('Idris.Idris2.TTImp.Impossible':'un--getImpossibleTerm'(V0, V9, V4, V5, V11, V13))), case V14 of {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> begin (V17 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated impossible LHS: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V16)))) end))(V13))), case V17 of {'Idris.Prelude.Types.Left', E3} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Context.MkClause', [], {'Idris.Core.Env.Nil'}, V16, {'Idris.Core.TT.Erased', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V11)), 0}}}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V20) -> fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error in getClause "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V20)))) end))(V21))), case V22 of {'Idris.Prelude.Types.Left', E5} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12)) end end(E0)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V25}} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E41 | E42] -> (fun (V10, V11) -> case V10 of {'Idris.Core.TT.As', E84, E85, E86, E87} -> (fun (V12, V13, V14, V15) -> case V13 of {'Idris.Core.TT.UseLeft'} -> (fun () -> ('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V15 | V11])) end()); {'Idris.Core.TT.UseRight'} -> (fun () -> ('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V14 | V11])) end()); _ -> case V8 of {'Idris.Core.Value.NBind', E94, E95, E96, E97} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Pi', E104, E105, E106, E107} -> (fun (V20, V21, V22, V23) -> case V9 of [E114 | E115] -> (fun (V24, V25) -> case V24 of {'Idris.Core.TT.Local', E124, E125, E126} -> (fun (V26, V27, V28) -> fun (V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E127} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.TT':'un--nameAt'('erased', V6, V28, 'erased'))), (('case--findLinear,findLinArg-4376'(V0, V1, V2, V3, V4, V5, V6, V27, V16, V20, V22, V23, V21, V19, V17, V28, 'erased', 'erased', V26, V25, V7, V33, V34, ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V28, V3))))(V29)) end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E124, E125, E126)); _ -> fun (V35) -> begin (V37 = begin (V36 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E116} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V39) -> begin (V40 = (('un--findLinear'(V6, V5, 1, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V21, V7)), V24))(V35))), case V40 of {'Idris.Prelude.Types.Left', E118} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V42) -> begin (V43 = (((V19(V39))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V17}))))(V35))), case V43 of {'Idris.Prelude.Types.Left', E120} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V45) -> begin (V46 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V45, V25))(V35))), case V46 of {'Idris.Prelude.Types.Left', E122} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V48) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V42, V48))} end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E114, E115)); _ -> case V9 of [E108 | E109] -> (fun (V49, V50) -> fun (V51) -> begin (V52 = (('un--findLinear'(V6, V5, 1, V3, V7, V49))(V51))), case V52 of {'Idris.Prelude.Types.Left', E110} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V54) -> begin (V55 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V50))(V51))), case V55 of {'Idris.Prelude.Types.Left', E112} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V57) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V54, V57))} end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E108, E109)); [] -> fun (V58) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104, E105, E106, E107)); _ -> case V9 of [E98 | E99] -> (fun (V59, V60) -> fun (V61) -> begin (V62 = (('un--findLinear'(V6, V5, 1, V3, V7, V59))(V61))), case V62 of {'Idris.Prelude.Types.Left', E100} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V64) -> begin (V65 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V60))(V61))), case V65 of {'Idris.Prelude.Types.Left', E102} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V67) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V64, V67))} end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E98, E99)); [] -> fun (V68) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94, E95, E96, E97)); _ -> case V9 of [E88 | E89] -> (fun (V69, V70) -> fun (V71) -> begin (V72 = (('un--findLinear'(V6, V5, 1, V3, V7, V69))(V71))), case V72 of {'Idris.Prelude.Types.Left', E90} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V74) -> begin (V75 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V70))(V71))), case V75 of {'Idris.Prelude.Types.Left', E92} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V77) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V74, V77))} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E88, E89)); [] -> fun (V78) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E84, E85, E86, E87)); _ -> case V8 of {'Idris.Core.Value.NBind', E49, E50, E51, E52} -> (fun (V79, V80, V81, V82) -> case V81 of {'Idris.Core.TT.Pi', E59, E60, E61, E62} -> (fun (V83, V84, V85, V86) -> case V9 of [E69 | E70] -> (fun (V87, V88) -> case V87 of {'Idris.Core.TT.Local', E79, E80, E81} -> (fun (V89, V90, V91) -> fun (V92) -> begin (V94 = begin (V93 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E82} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V96) -> begin (V97 = ('Idris.Idris2.Core.TT':'un--nameAt'('erased', V6, V91, 'erased'))), (('case--findLinear,findLinArg-4376'(V0, V1, V2, V3, V4, V5, V6, V90, V79, V83, V85, V86, V84, V82, V80, V91, 'erased', 'erased', V89, V88, V7, V96, V97, ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V91, V3))))(V92)) end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E79, E80, E81)); _ -> fun (V98) -> begin (V100 = begin (V99 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V99} end), case V100 of {'Idris.Prelude.Types.Left', E71} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V102) -> begin (V103 = (('un--findLinear'(V6, V5, 1, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V84, V7)), V87))(V98))), case V103 of {'Idris.Prelude.Types.Left', E73} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V105) -> begin (V106 = (((V82(V102))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V79, {'Idris.Core.TT.Bound'}, V80}))))(V98))), case V106 of {'Idris.Prelude.Types.Left', E75} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V108) -> begin (V109 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V108, V88))(V98))), case V109 of {'Idris.Prelude.Types.Left', E77} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V111) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V105, V111))} end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E69, E70)); _ -> case V9 of [E63 | E64] -> (fun (V112, V113) -> fun (V114) -> begin (V115 = (('un--findLinear'(V6, V5, 1, V3, V7, V112))(V114))), case V115 of {'Idris.Prelude.Types.Left', E65} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V117) -> begin (V118 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V113))(V114))), case V118 of {'Idris.Prelude.Types.Left', E67} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V120) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V117, V120))} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63, E64)); [] -> fun (V121) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59, E60, E61, E62)); _ -> case V9 of [E53 | E54] -> (fun (V122, V123) -> fun (V124) -> begin (V125 = (('un--findLinear'(V6, V5, 1, V3, V7, V122))(V124))), case V125 of {'Idris.Prelude.Types.Left', E55} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V127) -> begin (V128 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V123))(V124))), case V128 of {'Idris.Prelude.Types.Left', E57} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V130) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V127, V130))} end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53, E54)); [] -> fun (V131) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50, E51, E52)); _ -> case V9 of [E43 | E44] -> (fun (V132, V133) -> fun (V134) -> begin (V135 = (('un--findLinear'(V6, V5, 1, V3, V7, V132))(V134))), case V135 of {'Idris.Prelude.Types.Left', E45} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V137) -> begin (V138 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V133))(V134))), case V138 of {'Idris.Prelude.Types.Left', E47} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V140) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V137, V140))} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43, E44)); [] -> fun (V141) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E41, E42)); _ -> case V8 of {'Idris.Core.Value.NBind', E6, E7, E8, E9} -> (fun (V142, V143, V144, V145) -> case V144 of {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V146, V147, V148, V149) -> case V9 of [E26 | E27] -> (fun (V150, V151) -> case V150 of {'Idris.Core.TT.Local', E36, E37, E38} -> (fun (V152, V153, V154) -> fun (V155) -> begin (V157 = begin (V156 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V156} end), case V157 of {'Idris.Prelude.Types.Left', E39} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V159) -> begin (V160 = ('Idris.Idris2.Core.TT':'un--nameAt'('erased', V6, V154, 'erased'))), (('case--findLinear,findLinArg-4376'(V0, V1, V2, V3, V4, V5, V6, V153, V142, V146, V148, V149, V147, V145, V143, V154, 'erased', 'erased', V152, V151, V7, V159, V160, ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V154, V3))))(V155)) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36, E37, E38)); _ -> fun (V161) -> begin (V163 = begin (V162 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V162} end), case V163 of {'Idris.Prelude.Types.Left', E28} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V165) -> begin (V166 = (('un--findLinear'(V6, V5, 1, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V147, V7)), V150))(V161))), case V166 of {'Idris.Prelude.Types.Left', E30} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V168) -> begin (V169 = (((V145(V165))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V142, {'Idris.Core.TT.Bound'}, V143}))))(V161))), case V169 of {'Idris.Prelude.Types.Left', E32} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V171) -> begin (V172 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V171, V151))(V161))), case V172 of {'Idris.Prelude.Types.Left', E34} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V174) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V168, V174))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E26, E27)); _ -> case V9 of [E20 | E21] -> (fun (V175, V176) -> fun (V177) -> begin (V178 = (('un--findLinear'(V6, V5, 1, V3, V7, V175))(V177))), case V178 of {'Idris.Prelude.Types.Left', E22} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V180) -> begin (V181 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V176))(V177))), case V181 of {'Idris.Prelude.Types.Left', E24} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V183) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V180, V183))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E20, E21)); [] -> fun (V184) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17, E18, E19)); _ -> case V9 of [E10 | E11] -> (fun (V185, V186) -> fun (V187) -> begin (V188 = (('un--findLinear'(V6, V5, 1, V3, V7, V185))(V187))), case V188 of {'Idris.Prelude.Types.Left', E12} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V190) -> begin (V191 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V186))(V187))), case V191 of {'Idris.Prelude.Types.Left', E14} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V193) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V190, V193))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11)); [] -> fun (V194) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9)); _ -> case V9 of [E0 | E1] -> (fun (V195, V196) -> fun (V197) -> begin (V198 = (('un--findLinear'(V6, V5, 1, V3, V7, V195))(V197))), case V198 of {'Idris.Prelude.Types.Left', E2} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V200) -> begin (V201 = (('nested--17786-4269--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V196))(V197))), case V201 of {'Idris.Prelude.Types.Left', E4} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V203) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V200, V203))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); [] -> fun (V204) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--24608-10039--in--un--dropErased'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', V5} end; [E0 | E1] -> (fun (V7, V8) -> fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V13 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V14 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V41 of {'Idris.Prelude.Types.Left', E31} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E33} -> (fun (V44) -> begin (V45 = {'Idris.Prelude.Types.Just', V44}), (('case--case block in calcRefs,dropErased-10093'(V0, V1, V2, V3, V7, V8, V5, V13, V44, V45, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V44 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V53 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V67) -> fun (V68) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V67, V68)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V69) -> fun (V70) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V69, V70)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))))(V9)) end end(E33)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--24608-10039--in--un--dropErased'(V0, V1, V2, V3, V8, V5))(V9)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18497-4899--in--un--combineAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', V4} end; [E0 | E1] -> (fun (V7, V8) -> fun (V9) -> begin (V10 = (('nested--18497-4898--in--un--combine'(V0, V1, V2, V3, V4, V7))(V9))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> (('nested--18497-4899--in--un--combineAll'(V0, V1, V2, V3, V12, V8))(V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18497-4898--in--un--combine'(V0, V1, V2, V3, V4, V5) -> ('case--combineLinear,combine-4997'(V0, V1, V2, V3, V5, V4, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V12, V13)) end end}}, ('Idris.Idris2.Algebra.Preorder':'un--glb'('erased', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V16)) end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V17, V18, V19, V20, V21)) end end end end end}, V4, V5)))))), fun () -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Algebra.Preorder':'un--glb'('erased', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V22, V23)) end end, fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V24)) end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V25, V26, V27, V28, V29)) end end end end end}, V4, V5)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) end)) end)))).
'nested--26179-11481--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V15, V16, V17, V18) -> case V17 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V19, V20, V21, V22) -> fun (V23) -> begin (V24 = (((V18(V13))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V3, {'Idris.Core.TT.Bound'}, V16}))))(V23))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> (('nested--26179-11481--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V26))(V23)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V27) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V9, [], V13, {'Idris.Core.Env.Nil'}, V14, V27)) end end end(E0, E1, E2, E3)); _ -> fun (V28) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V9, [], V13, {'Idris.Core.Env.Nil'}, V14, V28)) end end.
'nested--26159-11389--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'([], V9, {'Idris.Core.Env.Nil'}, V12, V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'('erased', V9, V7, fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking for impossibility: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V16)))) end))(V17))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V9, V17))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V9, 0, V17))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V9, 1, V16, V17))), case V31 of {'Idris.Prelude.Types.Left', E10} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V34, V35) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V9, V27, V17))), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V39 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V9, V8, V7, V10, {'Idris.TTImp.Elab.Check.InLHS', V11}, [], [], {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IBindHere', V3, {'Idris.TTImp.TTImp.PATTERN'}, V35}, {'Idris.Prelude.Types.Nothing'}))(V17))), case V39 of {'Idris.Prelude.Types.Left', E16} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V42, V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E20} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V9, [], V47, {'Idris.Core.Env.Nil'}, V42, V17))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> begin (V51 = (('un--hasEmptyPat'([], V9, V47, {'Idris.Core.Env.Nil'}, V50))(V17))), case V51 of {'Idris.Prelude.Types.Left', E24} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V53) -> case V53 of 0 -> begin (V54 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"No empty pat"/utf8>> end))(V17))), case V54 of {'Idris.Prelude.Types.Left', E26} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V56) -> begin (V58 = begin (V57 = ('erlang':'put'(V9, V21))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E28} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V61 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Some empty pat"/utf8>> end))(V17))), case V61 of {'Idris.Prelude.Types.Left', E30} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V21, V17))), case V64 of {'Idris.Prelude.Types.Left', E32} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V66) -> begin (V70 = begin (V67 = (('Idris.Idris2.Core.Normalise':'un--nf'(V9, [], V66, {'Idris.Core.Env.Nil'}, V50))(V17))), case V67 of {'Idris.Prelude.Types.Left', E34} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V69) -> (('nested--26179-11481--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12, V11, V10, V66, V69))(V17)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V70 of {'Idris.Prelude.Types.Left', E36} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V72) -> begin (V74 = begin (V73 = ('erlang':'put'(V9, V21))), {'Idris.Prelude.Types.Right', V73} end), case V74 of {'Idris.Prelude.Types.Left', E38} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V72}} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V77) -> fun (V78) -> begin (V80 = begin (V79 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E40} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V82) -> begin (V83 = (('un--recoverableErr'(V9, V82, V77))(V78))), case V83 of {'Idris.Prelude.Types.Left', E42} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V85) -> (('case--processDef,checkImpossible-11887'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12, V11, V10, V16, V77, V82, V85, ('Idris.Idris2.Prelude.Basics':'un--not'(V85))))(V78)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V13)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--26159-11391--in--un--checkCoverage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V16 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V15) -> ('nested--26159-11390--in--un--getClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15)) end, V13, []))(V14))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V45 = begin (V33 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V25, V26)) end end}, V21, V22)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V31, V32)) end end}, V27, V28)) end end}, V19, V20)) end end, V18, []))(V14))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Using clauses :"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V37) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Clause'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Clause'(V38, V39)) end end}, V36)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V42) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Clause'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Clause'(V43, V44)) end end}, V40, V41)) end end}, V35)))) end))(V14)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V45 of {'Idris.Prelude.Types.Left', E4} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V47) -> begin (V49 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V48) -> V48 end, V18))), begin (V50 = (('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V9, V3, {'Idris.Core.CaseBuilder.CompileTime', V12}, {'Idris.Core.Name.Resolved', V10}, V11, V49))(V14))), case V50 of {'Idris.Prelude.Types.Left', E6} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V52) -> case V52 of {'Idris.Builtin.DPair.MkDPair', E8, E9} -> (fun (V53, V54) -> case V54 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V55, V56) -> begin (V64 = begin (V61 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'('erased', V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V59, V60)) end end}, V55, V14))), case V61 of {'Idris.Prelude.Types.Left', E12} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V63) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Working from "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V53, V63)))) end))(V14)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V64 of {'Idris.Prelude.Types.Left', E14} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V66) -> begin (V81 = begin (V67 = {'Idris.Builtin.DPair.MkDPair', V53, {'Idris.Builtin.MkPair', V55, V56}}), (('case--case block in processDef,checkCoverage-12254'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V12, V11, V10, V18, V49, V56, V53, V55, V67, (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V75, V76, V77)) end end end end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V79)) end end}, fun (V80) -> ('nested--26159-11388--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V80)) end))(V49))))(V14)) end), case V81 of {'Idris.Prelude.Types.Left', E16} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V83) -> begin (V98 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun (V84) -> begin (V91 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V89, V90)) end end}, V85, V86)) end end, V83, []))(V84))), case V91 of {'Idris.Prelude.Types.Left', E18} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V93) -> begin (V94 = (('Idris.Idris2.Core.Context':'un--getFullName'(V9, {'Idris.Core.Name.Resolved', V10}))(V84))), case V94 of {'Idris.Prelude.Types.Left', E20} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V96) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Initially missing in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V96)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V97) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V97)) end, V93))))))))))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V14))), case V98 of {'Idris.Prelude.Types.Left', E22} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V100) -> begin (V103 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V101) -> fun (V102) -> ('nested--26159-11389--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V101, V102)) end end, V83, []))(V14))), case V103 of {'Idris.Prelude.Types.Left', E24} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V105) -> begin (V109 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Coverage':'un--checkMatched'(V9, V49, V106, V107)) end end, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V108) -> V108 end, V105)), []))(V14))), case V109 of {'Idris.Prelude.Types.Left', E26} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V111) -> begin (V113 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V112) -> V112 end, V111))), begin (V114 = {'Idris.Builtin.DPair.MkDPair', V53, {'Idris.Builtin.MkPair', V55, V56}}), (('case--case block in processDef,checkCoverage-12359'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V12, V11, V10, V18, V49, V56, V53, V55, V114, V83, V105, V111, V113, ('Idris.Idris2.Data.List':'un--isNil'('erased', V113))))(V14)) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--26159-11388--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V26)) end end}, fun (V27) -> ('nested--26159-11387--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', V27)) end))(('Idris.Idris2.Core.TT':'un--getArgs'('erased', V13)))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19505-6646--in--un--bindWithArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V20 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V22 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V19}, V21}), begin (V23 = {'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Just', 1}, 0}), begin (V25 = fun (V24) -> {'Idris.Core.TT.Bind', V5, ('nested--20528-6658--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', V21, V19)), {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V19}, V24} end), fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', ('nested--20528-6659--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 'erased', V21, V19)), {'Idris.Builtin.MkPair', V22, {'Idris.Builtin.MkPair', V23, V25}}}} end end end end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V28, V29) -> fun (V30) -> begin (V32 = begin (V31 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E3} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V34) -> begin (V35 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"Equal"/utf8>>}}), begin (V63 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V35, case V34 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V36 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V30))), case V63 of {'Idris.Prelude.Types.Left', E32} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V65) -> case V65 of {'Idris.Prelude.Types.Just', E34} -> (fun (V66) -> case V66 of {'Idris.Core.Context.TCon', E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74) -> begin (V75 = {'Idris.Core.TT.Ref', V5, {'Idris.Core.TT.TyCon', V67, V68}, V35}), begin (V76 = ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V19))), begin (V77 = ('Idris.Idris2.Core.TT':'un--apply'('erased', V5, V75, [V76 | [V76 | [('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V29)) | [{'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Just', 1}, 0} | []]]]]))), begin (V78 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Implicit'}, V77}, {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V19}, V21}}), begin (V79 = {'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Just', 1}, (1 + 0)}), begin (V81 = fun (V80) -> {'Idris.Core.TT.Bind', V5, ('nested--20618-6809--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V28, 'erased', V29, V21, V19, V34, V35, V69, V70, V71, V72, V73, V74, V68, V67, V65, V75)), {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V19}, {'Idris.Core.TT.Bind', V5, V28, {'Idris.Core.TT.Pi', V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Implicit'}, V77}, V80}} end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', ('nested--20618-6810--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V28, 'erased', V29, V21, V19, V34, V35, V69, V70, V71, V72, V73, V74, V68, V67, V65, V75)), {'Idris.Builtin.MkPair', V78, {'Idris.Builtin.MkPair', V79, V81}}}} end end end end end end end(E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V30)) end end(E34)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V30)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25214-10552--in--un--addErrorCase'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.MkClause', E2, E3, E4, E5} -> (fun (V8, V9, V10, V11) -> case V7 of [] -> [{'Idris.Core.Context.MkClause', V8, V9, V10, V11} | [('nested--25214-10551--in--un--makeErrorClause'(V0, V1, V2, V3, V4, V8, V9, V10)) | []]]; _ -> [V6 | ('nested--25214-10552--in--un--addErrorCase'(V0, V1, V2, V3, V4, V7))] end end(E2, E3, E4, E5)); _ -> [V6 | ('nested--25214-10552--in--un--addErrorCase'(V0, V1, V2, V3, V4, V7))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17786-4268--in--un--accessible'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Func'} -> (fun () -> case V4 of 0 -> V7; 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> V7 end.
'un--warnUnreachable'(V0, V1) -> case V1 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, {'Idris.Core.Core.UnreachableClause', V2, ('Idris.Idris2.Core.TT':'un--getLoc'('erased', V4)), V3, V4}, V6)) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPats'(V0) -> case V0 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setLinear'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> begin (V11 = {'Idris.Core.TT.PVar', V7, V8, V9, V10}), ('case--setLinear-4763'('erased', V7, V8, V9, V10, V4, V6, V11, V3, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V4, V1)))) end end(E4, E5, E6, E7)); {'Idris.Core.TT.PVTy', E8, E9, E10} -> (fun (V16, V17, V18) -> begin (V19 = {'Idris.Core.TT.PVTy', V16, V17, V18}), ('case--setLinear-4833'('erased', V16, V17, V18, V4, V6, V19, V3, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V22, V23)) end end}, V4, V1)))) end end(E8, E9, E10)); _ -> V2 end end(E0, E1, E2, E3)); _ -> V2 end.
'un--recoverableErr'(V0, V1, V2) -> case V2 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V3, V1, V5, V6))(V8))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V3, V1, V5, V7))(V8))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.recover"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"Recovering from CantConvert?"/utf8>> | [<<"Checking:"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V11)))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V14)))) | []]]]])) end))(V8))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> (('un--recoverable'(V0, V3, V1, V11, V14))(V8)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Core.CantSolveEq', E11, E12, E13, E14, E15} -> (fun (V18, V19, V20, V21, V22) -> fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V18, V1, V20, V21))(V23))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V18, V1, V20, V22))(V23))), case V27 of {'Idris.Prelude.Types.Left', E18} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V29) -> (('un--recoverable'(V0, V18, V1, V26, V29))(V23)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14, E15)); {'Idris.Core.Core.BadDotPattern', E20, E21, E22, E23, E24, E25} -> (fun (V30, V31, V32, V33, V34, V35) -> case V33 of {'Idris.Core.Core.ErasedArg'} -> (fun () -> fun (V36) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', 1} end end end(E20, E21, E22, E23, E24, E25)); {'Idris.Core.Core.CyclicMeta', E26, E27, E28, E29, E30} -> (fun (V38, V39, V40, V41, V42) -> fun (V43) -> {'Idris.Prelude.Types.Right', 0} end end(E26, E27, E28, E29, E30)); {'Idris.Core.Core.AllFailed', E31} -> (fun (V44) -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V45) -> ('un--recoverableErr'(V0, V1, V45)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V46)) end, V44)))) end(E31)); {'Idris.Core.Core.WhenUnifying', E32, E33, E34, E35, E36, E37} -> (fun (V47, V48, V49, V50, V51, V52) -> ('un--recoverableErr'(V0, V1, V52)) end(E32, E33, E34, E35, E36, E37)); _ -> fun (V53) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--recoverable'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E62, E63, E64, E65, E66} -> (fun (V5, V6, V7, V8, V9) -> case V4 of {'Idris.Core.Value.NTCon', E67, E68, E69, E70, E71} -> (fun (V10, V11, V12, V13, V14) -> ('case--recoverable-3465'(V1, V10, V5, V9, V8, V7, V6, V14, V13, V12, V11, V2, V0, ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V11)))) end(E67, E68, E69, E70, E71)); {'Idris.Core.Value.NPrimVal', E72, E73} -> (fun (V15, V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', 1} end end(E72, E73)); {'Idris.Core.Value.NType', E74} -> (fun (V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', 1} end end(E74)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', 0} end end end(E62, E63, E64, E65, E66)); {'Idris.Core.Value.NPrimVal', E75, E76} -> (fun (V21, V22) -> case V4 of {'Idris.Core.Value.NTCon', E139, E140, E141, E142, E143} -> (fun (V23, V24, V25, V26, V27) -> fun (V28) -> {'Idris.Prelude.Types.Right', 1} end end(E139, E140, E141, E142, E143)); _ -> case V4 of {'Idris.Core.Value.NTCon', E134, E135, E136, E137, E138} -> (fun (V29, V30, V31, V32, V33) -> fun (V34) -> {'Idris.Prelude.Types.Right', 0} end end(E134, E135, E136, E137, E138)); _ -> case V3 of {'Idris.Core.Value.NDCon', E96, E97, E98, E99, E100} -> (fun (V35, V36, V37, V38, V39) -> case V4 of {'Idris.Core.Value.NDCon', E101, E102, E103, E104, E105} -> (fun (V40, V41, V42, V43, V44) -> ('case--recoverable-3697'(V1, V40, V41, V43, V35, V36, V38, V39, V37, V44, V42, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V37, V42)))) end(E101, E102, E103, E104, E105)); {'Idris.Core.Value.NPrimVal', E106, E107} -> (fun (V45, V46) -> fun (V47) -> {'Idris.Prelude.Types.Right', 1} end end(E106, E107)); _ -> fun (V48) -> {'Idris.Prelude.Types.Right', 0} end end end(E96, E97, E98, E99, E100)); {'Idris.Core.Value.NPrimVal', E108, E109} -> (fun (V49, V50) -> case V4 of {'Idris.Core.Value.NDCon', E129, E130, E131, E132, E133} -> (fun (V51, V52, V53, V54, V55) -> fun (V56) -> {'Idris.Prelude.Types.Right', 1} end end(E129, E130, E131, E132, E133)); _ -> case V4 of {'Idris.Core.Value.NDCon', E124, E125, E126, E127, E128} -> (fun (V57, V58, V59, V60, V61) -> fun (V62) -> {'Idris.Prelude.Types.Right', 0} end end(E124, E125, E126, E127, E128)); _ -> case V3 of {'Idris.Core.Value.NApp', E110, E111, E112} -> (fun (V63, V64, V65) -> case V64 of {'Idris.Core.Value.NRef', E113, E114} -> (fun (V66, V67) -> case V4 of {'Idris.Core.Value.NApp', E115, E116, E117} -> (fun (V68, V69, V70) -> case V69 of {'Idris.Core.Value.NRef', E118, E119} -> (fun (V71, V72) -> fun (V73) -> {'Idris.Prelude.Types.Right', 0} end end(E118, E119)); _ -> fun (V74) -> {'Idris.Prelude.Types.Right', 1} end end end(E115, E116, E117)); _ -> fun (V75) -> {'Idris.Prelude.Types.Right', 1} end end end(E113, E114)); _ -> fun (V76) -> {'Idris.Prelude.Types.Right', 1} end end end(E110, E111, E112)); {'Idris.Core.Value.NPrimVal', E120, E121} -> (fun (V77, V78) -> case V4 of {'Idris.Core.Value.NPrimVal', E122, E123} -> (fun (V79, V80) -> fun (V81) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V78, V80))} end end(E122, E123)); _ -> fun (V82) -> {'Idris.Prelude.Types.Right', 1} end end end(E120, E121)); _ -> fun (V83) -> {'Idris.Prelude.Types.Right', 1} end end end end end(E108, E109)); _ -> case V4 of {'Idris.Core.Value.NDCon', E91, E92, E93, E94, E95} -> (fun (V84, V85, V86, V87, V88) -> fun (V89) -> {'Idris.Prelude.Types.Right', 0} end end(E91, E92, E93, E94, E95)); _ -> case V3 of {'Idris.Core.Value.NApp', E77, E78, E79} -> (fun (V90, V91, V92) -> case V91 of {'Idris.Core.Value.NRef', E80, E81} -> (fun (V93, V94) -> case V4 of {'Idris.Core.Value.NApp', E82, E83, E84} -> (fun (V95, V96, V97) -> case V96 of {'Idris.Core.Value.NRef', E85, E86} -> (fun (V98, V99) -> fun (V100) -> {'Idris.Prelude.Types.Right', 0} end end(E85, E86)); _ -> fun (V101) -> {'Idris.Prelude.Types.Right', 1} end end end(E82, E83, E84)); _ -> fun (V102) -> {'Idris.Prelude.Types.Right', 1} end end end(E80, E81)); _ -> fun (V103) -> {'Idris.Prelude.Types.Right', 1} end end end(E77, E78, E79)); {'Idris.Core.Value.NPrimVal', E87, E88} -> (fun (V104, V105) -> case V4 of {'Idris.Core.Value.NPrimVal', E89, E90} -> (fun (V106, V107) -> fun (V108) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V105, V107))} end end(E89, E90)); _ -> fun (V109) -> {'Idris.Prelude.Types.Right', 1} end end end(E87, E88)); _ -> fun (V110) -> {'Idris.Prelude.Types.Right', 1} end end end end end end end(E75, E76)); {'Idris.Core.Value.NType', E144} -> (fun (V111) -> case V4 of {'Idris.Core.Value.NTCon', E207, E208, E209, E210, E211} -> (fun (V112, V113, V114, V115, V116) -> fun (V117) -> {'Idris.Prelude.Types.Right', 1} end end(E207, E208, E209, E210, E211)); _ -> case V4 of {'Idris.Core.Value.NTCon', E202, E203, E204, E205, E206} -> (fun (V118, V119, V120, V121, V122) -> fun (V123) -> {'Idris.Prelude.Types.Right', 0} end end(E202, E203, E204, E205, E206)); _ -> case V3 of {'Idris.Core.Value.NDCon', E164, E165, E166, E167, E168} -> (fun (V124, V125, V126, V127, V128) -> case V4 of {'Idris.Core.Value.NDCon', E169, E170, E171, E172, E173} -> (fun (V129, V130, V131, V132, V133) -> ('case--recoverable-3697'(V1, V129, V130, V132, V124, V125, V127, V128, V126, V133, V131, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V126, V131)))) end(E169, E170, E171, E172, E173)); {'Idris.Core.Value.NPrimVal', E174, E175} -> (fun (V134, V135) -> fun (V136) -> {'Idris.Prelude.Types.Right', 1} end end(E174, E175)); _ -> fun (V137) -> {'Idris.Prelude.Types.Right', 0} end end end(E164, E165, E166, E167, E168)); {'Idris.Core.Value.NPrimVal', E176, E177} -> (fun (V138, V139) -> case V4 of {'Idris.Core.Value.NDCon', E197, E198, E199, E200, E201} -> (fun (V140, V141, V142, V143, V144) -> fun (V145) -> {'Idris.Prelude.Types.Right', 1} end end(E197, E198, E199, E200, E201)); _ -> case V4 of {'Idris.Core.Value.NDCon', E192, E193, E194, E195, E196} -> (fun (V146, V147, V148, V149, V150) -> fun (V151) -> {'Idris.Prelude.Types.Right', 0} end end(E192, E193, E194, E195, E196)); _ -> case V3 of {'Idris.Core.Value.NApp', E178, E179, E180} -> (fun (V152, V153, V154) -> case V153 of {'Idris.Core.Value.NRef', E181, E182} -> (fun (V155, V156) -> case V4 of {'Idris.Core.Value.NApp', E183, E184, E185} -> (fun (V157, V158, V159) -> case V158 of {'Idris.Core.Value.NRef', E186, E187} -> (fun (V160, V161) -> fun (V162) -> {'Idris.Prelude.Types.Right', 0} end end(E186, E187)); _ -> fun (V163) -> {'Idris.Prelude.Types.Right', 1} end end end(E183, E184, E185)); _ -> fun (V164) -> {'Idris.Prelude.Types.Right', 1} end end end(E181, E182)); _ -> fun (V165) -> {'Idris.Prelude.Types.Right', 1} end end end(E178, E179, E180)); {'Idris.Core.Value.NPrimVal', E188, E189} -> (fun (V166, V167) -> case V4 of {'Idris.Core.Value.NPrimVal', E190, E191} -> (fun (V168, V169) -> fun (V170) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V167, V169))} end end(E190, E191)); _ -> fun (V171) -> {'Idris.Prelude.Types.Right', 1} end end end(E188, E189)); _ -> fun (V172) -> {'Idris.Prelude.Types.Right', 1} end end end end end(E176, E177)); _ -> case V4 of {'Idris.Core.Value.NDCon', E159, E160, E161, E162, E163} -> (fun (V173, V174, V175, V176, V177) -> fun (V178) -> {'Idris.Prelude.Types.Right', 0} end end(E159, E160, E161, E162, E163)); _ -> case V3 of {'Idris.Core.Value.NApp', E145, E146, E147} -> (fun (V179, V180, V181) -> case V180 of {'Idris.Core.Value.NRef', E148, E149} -> (fun (V182, V183) -> case V4 of {'Idris.Core.Value.NApp', E150, E151, E152} -> (fun (V184, V185, V186) -> case V185 of {'Idris.Core.Value.NRef', E153, E154} -> (fun (V187, V188) -> fun (V189) -> {'Idris.Prelude.Types.Right', 0} end end(E153, E154)); _ -> fun (V190) -> {'Idris.Prelude.Types.Right', 1} end end end(E150, E151, E152)); _ -> fun (V191) -> {'Idris.Prelude.Types.Right', 1} end end end(E148, E149)); _ -> fun (V192) -> {'Idris.Prelude.Types.Right', 1} end end end(E145, E146, E147)); {'Idris.Core.Value.NPrimVal', E155, E156} -> (fun (V193, V194) -> case V4 of {'Idris.Core.Value.NPrimVal', E157, E158} -> (fun (V195, V196) -> fun (V197) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V194, V196))} end end(E157, E158)); _ -> fun (V198) -> {'Idris.Prelude.Types.Right', 1} end end end(E155, E156)); _ -> fun (V199) -> {'Idris.Prelude.Types.Right', 1} end end end end end end end(E144)); _ -> case V4 of {'Idris.Core.Value.NTCon', E57, E58, E59, E60, E61} -> (fun (V200, V201, V202, V203, V204) -> fun (V205) -> {'Idris.Prelude.Types.Right', 0} end end(E57, E58, E59, E60, E61)); _ -> case V3 of {'Idris.Core.Value.NDCon', E19, E20, E21, E22, E23} -> (fun (V206, V207, V208, V209, V210) -> case V4 of {'Idris.Core.Value.NDCon', E24, E25, E26, E27, E28} -> (fun (V211, V212, V213, V214, V215) -> ('case--recoverable-3697'(V1, V211, V212, V214, V206, V207, V209, V210, V208, V215, V213, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V208, V213)))) end(E24, E25, E26, E27, E28)); {'Idris.Core.Value.NPrimVal', E29, E30} -> (fun (V216, V217) -> fun (V218) -> {'Idris.Prelude.Types.Right', 1} end end(E29, E30)); _ -> fun (V219) -> {'Idris.Prelude.Types.Right', 0} end end end(E19, E20, E21, E22, E23)); {'Idris.Core.Value.NPrimVal', E31, E32} -> (fun (V220, V221) -> case V4 of {'Idris.Core.Value.NDCon', E52, E53, E54, E55, E56} -> (fun (V222, V223, V224, V225, V226) -> fun (V227) -> {'Idris.Prelude.Types.Right', 1} end end(E52, E53, E54, E55, E56)); _ -> case V4 of {'Idris.Core.Value.NDCon', E47, E48, E49, E50, E51} -> (fun (V228, V229, V230, V231, V232) -> fun (V233) -> {'Idris.Prelude.Types.Right', 0} end end(E47, E48, E49, E50, E51)); _ -> case V3 of {'Idris.Core.Value.NApp', E33, E34, E35} -> (fun (V234, V235, V236) -> case V235 of {'Idris.Core.Value.NRef', E36, E37} -> (fun (V237, V238) -> case V4 of {'Idris.Core.Value.NApp', E38, E39, E40} -> (fun (V239, V240, V241) -> case V240 of {'Idris.Core.Value.NRef', E41, E42} -> (fun (V242, V243) -> fun (V244) -> {'Idris.Prelude.Types.Right', 0} end end(E41, E42)); _ -> fun (V245) -> {'Idris.Prelude.Types.Right', 1} end end end(E38, E39, E40)); _ -> fun (V246) -> {'Idris.Prelude.Types.Right', 1} end end end(E36, E37)); _ -> fun (V247) -> {'Idris.Prelude.Types.Right', 1} end end end(E33, E34, E35)); {'Idris.Core.Value.NPrimVal', E43, E44} -> (fun (V248, V249) -> case V4 of {'Idris.Core.Value.NPrimVal', E45, E46} -> (fun (V250, V251) -> fun (V252) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V249, V251))} end end(E45, E46)); _ -> fun (V253) -> {'Idris.Prelude.Types.Right', 1} end end end(E43, E44)); _ -> fun (V254) -> {'Idris.Prelude.Types.Right', 1} end end end end end(E31, E32)); _ -> case V4 of {'Idris.Core.Value.NDCon', E14, E15, E16, E17, E18} -> (fun (V255, V256, V257, V258, V259) -> fun (V260) -> {'Idris.Prelude.Types.Right', 0} end end(E14, E15, E16, E17, E18)); _ -> case V3 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V261, V262, V263) -> case V262 of {'Idris.Core.Value.NRef', E3, E4} -> (fun (V264, V265) -> case V4 of {'Idris.Core.Value.NApp', E5, E6, E7} -> (fun (V266, V267, V268) -> case V267 of {'Idris.Core.Value.NRef', E8, E9} -> (fun (V269, V270) -> fun (V271) -> {'Idris.Prelude.Types.Right', 0} end end(E8, E9)); _ -> fun (V272) -> {'Idris.Prelude.Types.Right', 1} end end end(E5, E6, E7)); _ -> fun (V273) -> {'Idris.Prelude.Types.Right', 1} end end end(E3, E4)); _ -> fun (V274) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2)); {'Idris.Core.Value.NPrimVal', E10, E11} -> (fun (V275, V276) -> case V4 of {'Idris.Core.Value.NPrimVal', E12, E13} -> (fun (V277, V278) -> fun (V279) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V276, V278))} end end(E12, E13)); _ -> fun (V280) -> {'Idris.Prelude.Types.Right', 1} end end end(E10, E11)); _ -> fun (V281) -> {'Idris.Prelude.Types.Right', 1} end end end end end end.
'un--processDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V8))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V45 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V13, case V17 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V45 of {'Idris.Prelude.Types.Left', E31} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E33} -> (fun (V48) -> begin (V49 = {'Idris.Prelude.Types.Just', V48}), (('case--case block in processDef-12625'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V13, V17, V48, V49, case V48 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V67 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10)) end end(E33)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--noDeclaration'('erased', V1, V7, V13, V10)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nameListEq'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.Refl'}}; _ -> {'Idris.Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> ('with--nameListEq-10009'(V2, V4, ('Idris.Idris2.Core.Name':'un--nameEq'(V2, V4)), V3, V5)) end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--mkRunTime'(V0, V1, V2, V3, V4, V5) -> begin (V13 = begin (V10 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V8, V9)) end end}, V4, V5))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Making run time definition for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)))) end))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V47 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V19 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V20 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V47 of {'Idris.Prelude.Types.Left', E33} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V49) -> case V49 of {'Idris.Prelude.Types.Just', E35} -> (fun (V50) -> begin (V74 = case case V50 of {'Idris.Core.Context.MkGlobalDef', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V61 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.TT.MkTotality', E36, E37} -> (fun (V72, V73) -> V73 end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V75) -> fun (V76) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V75, V76)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V77) -> fun (V78) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V77, V78)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V79) -> fun (V80) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V81, V82)) end end}}, case V50 of {'Idris.Core.Context.MkGlobalDef', E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V90 end(E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 0 -> ((begin (V104 = {'Idris.Prelude.Types.Just', V50}), ('case--case block in mkRunTime-10807'(V4, V3, V2, V1, V0, V19, V50, V104, V74, case V50 of {'Idris.Core.Context.MkGlobalDef', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V122 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end())(V5)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mismatchNF'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14) -> ('case--mismatchNF-2673'(V1, V10, V13, V5, V8, V9, V7, V6, V14, V12, V11, V2, V0, ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V11)))) end(E5, E6, E7, E8, E9)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20) -> case V4 of {'Idris.Core.Value.NDCon', E15, E16, E17, E18, E19} -> (fun (V21, V22, V23, V24, V25) -> ('case--mismatchNF-2779'(V1, V21, V22, V24, V16, V17, V19, V20, V18, V25, V23, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V18, V23)))) end(E15, E16, E17, E18, E19)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', 1} end end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V27, V28) -> case V4 of {'Idris.Core.Value.NPrimVal', E22, E23} -> (fun (V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V28, V30))} end end(E22, E23)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', 1} end end end(E20, E21)); {'Idris.Core.Value.NDelayed', E24, E25, E26} -> (fun (V33, V34, V35) -> case V4 of {'Idris.Core.Value.NDelayed', E27, E28, E29} -> (fun (V36, V37, V38) -> ('un--mismatchNF'(V0, V1, V2, V35, V38)) end(E27, E28, E29)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', 1} end end end(E24, E25, E26)); {'Idris.Core.Value.NDelay', E30, E31, E32, E33} -> (fun (V40, V41, V42, V43) -> case V4 of {'Idris.Core.Value.NDelay', E34, E35, E36, E37} -> (fun (V44, V45, V46, V47) -> fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V43))(V48))), case V49 of {'Idris.Prelude.Types.Left', E38} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V51) -> begin (V52 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V47))(V48))), case V52 of {'Idris.Prelude.Types.Left', E40} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V54) -> (('un--mismatchNF'(V0, V1, V2, V51, V54))(V48)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34, E35, E36, E37)); _ -> fun (V55) -> {'Idris.Prelude.Types.Right', 1} end end end(E30, E31, E32, E33)); _ -> fun (V56) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--mismatch'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V4))(V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V5))(V6))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> (('un--mismatchNF'(V0, V1, V2, V9, V12))(V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--impossibleOK'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14) -> ('case--impossibleOK-2981'(V1, V10, V5, V9, V8, V7, V6, V14, V13, V12, V11, V2, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V11)))) end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NPrimVal', E10, E11} -> (fun (V15, V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', 0} end end(E10, E11)); {'Idris.Core.Value.NType', E12} -> (fun (V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', 0} end end(E12)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E13, E14, E15, E16, E17} -> (fun (V21, V22, V23, V24, V25) -> case V4 of {'Idris.Core.Value.NDCon', E18, E19, E20, E21, E22} -> (fun (V26, V27, V28, V29, V30) -> ('case--impossibleOK-3087'(V1, V26, V27, V29, V21, V22, V24, V25, V23, V30, V28, V2, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V23, V28)))) end(E18, E19, E20, E21, E22)); {'Idris.Core.Value.NPrimVal', E23, E24} -> (fun (V31, V32) -> fun (V33) -> {'Idris.Prelude.Types.Right', 0} end end(E23, E24)); _ -> fun (V34) -> {'Idris.Prelude.Types.Right', 1} end end end(E13, E14, E15, E16, E17)); {'Idris.Core.Value.NPrimVal', E25, E26} -> (fun (V35, V36) -> case V4 of {'Idris.Core.Value.NPrimVal', E27, E28} -> (fun (V37, V38) -> fun (V39) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V36, V38))} end end(E27, E28)); {'Idris.Core.Value.NDCon', E29, E30, E31, E32, E33} -> (fun (V40, V41, V42, V43, V44) -> fun (V45) -> {'Idris.Prelude.Types.Right', 0} end end(E29, E30, E31, E32, E33)); {'Idris.Core.Value.NTCon', E34, E35, E36, E37, E38} -> (fun (V46, V47, V48, V49, V50) -> fun (V51) -> {'Idris.Prelude.Types.Right', 0} end end(E34, E35, E36, E37, E38)); {'Idris.Core.Value.NType', E39} -> (fun (V52) -> fun (V53) -> {'Idris.Prelude.Types.Right', 0} end end(E39)); _ -> fun (V54) -> {'Idris.Prelude.Types.Right', 1} end end end(E25, E26)); {'Idris.Core.Value.NType', E40} -> (fun (V55) -> case V4 of {'Idris.Core.Value.NTCon', E41, E42, E43, E44, E45} -> (fun (V56, V57, V58, V59, V60) -> fun (V61) -> {'Idris.Prelude.Types.Right', 0} end end(E41, E42, E43, E44, E45)); {'Idris.Core.Value.NPrimVal', E46, E47} -> (fun (V62, V63) -> fun (V64) -> {'Idris.Prelude.Types.Right', 0} end end(E46, E47)); _ -> fun (V65) -> {'Idris.Prelude.Types.Right', 1} end end end(E40)); _ -> fun (V66) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--impossibleErrOK'(V0, V1, V2) -> case V2 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V3, V1, V5, V6))(V8))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V3, V1, V5, V7))(V8))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> (('un--impossibleOK'(V0, V3, V1, V11, V14))(V8)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Core.CantSolveEq', E9, E10, E11, E12, E13} -> (fun (V15, V16, V17, V18, V19) -> fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V15, V1, V17, V18))(V20))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V15, V1, V17, V19))(V20))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> (('un--impossibleOK'(V0, V15, V1, V23, V26))(V20)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11, E12, E13)); {'Idris.Core.Core.BadDotPattern', E18, E19, E20, E21, E22, E23} -> (fun (V27, V28, V29, V30, V31, V32) -> case V30 of {'Idris.Core.Core.ErasedArg'} -> (fun () -> fun (V33) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> fun (V34) -> {'Idris.Prelude.Types.Right', 1} end end end(E18, E19, E20, E21, E22, E23)); {'Idris.Core.Core.CyclicMeta', E24, E25, E26, E27, E28} -> (fun (V35, V36, V37, V38, V39) -> fun (V40) -> {'Idris.Prelude.Types.Right', 0} end end(E24, E25, E26, E27, E28)); {'Idris.Core.Core.AllFailed', E29} -> (fun (V41) -> ('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V42) -> ('un--impossibleErrOK'(V0, V1, V42)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V43) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V43)) end, V41)))) end(E29)); {'Idris.Core.Core.WhenUnifying', E30, E31, E32, E33, E34, E35} -> (fun (V44, V45, V46, V47, V48, V49) -> ('un--impossibleErrOK'(V0, V1, V49)) end(E30, E31, E32, E33, E34, E35)); _ -> fun (V50) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--hasEmptyPat'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V2, V3, V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = (('Idris.Idris2.Core.Coverage':'un--isEmpty'(V0, V1, V2, V3, V16))(V13))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> begin (V20 = (('un--hasEmptyPat'([V6 | V0], V1, V2, {'Idris.Core.Env.::', V7, V3}, V8))(V13))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--||'(V19, fun () -> V22 end))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--findLinear'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> ('un--findLinear'([V7 | V0], V1, V2, (1 + V3), V4, V9)) end(E0, E1, E2, E3)); {'Idris.Core.TT.As', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> ('un--findLinear'(V0, V1, V2, V3, V4, V13)) end(E4, E5, E6, E7)); _ -> ('case--findLinear-4598'(V0, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V5)))) end.
'un--extendEnv'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case V6 of {'Idris.Core.TT.Bind', E8, E9, E10, E11} -> (fun (V15, V16, V17, V18) -> case V17 of {'Idris.Core.TT.PVTy', E12, E13, E14} -> (fun (V19, V20, V21) -> ('with--extendEnv-4075'(V8, V16, ('Idris.Idris2.Core.Name':'un--nameEq'(V8, V16)), 'erased', V1, V15, V19, V20, V21, V7, V14, V13, V12, V11, V10, V18, V4, V3, V2)) end(E12, E13, E14)); _ -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V5, V6}}}}}} end end end(E8, E9, E10, E11)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V5, V6}}}}}} end end end(E4, E5, E6, E7)); {'Idris.Core.TT.PLet', E15, E16, E17, E18} -> (fun (V24, V25, V26, V27) -> case V6 of {'Idris.Core.TT.Bind', E19, E20, E21, E22} -> (fun (V28, V29, V30, V31) -> case V30 of {'Idris.Core.TT.PLet', E23, E24, E25, E26} -> (fun (V32, V33, V34, V35) -> ('with--extendEnv-4156'(V8, V29, ('Idris.Idris2.Core.Name':'un--nameEq'(V8, V29)), 'erased', V1, V28, V32, V33, V35, V34, V7, V26, V27, V25, V24, V10, V31, V4, V3, V2)) end(E23, E24, E25, E26)); _ -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V5, V6}}}}}} end end end(E19, E20, E21, E22)); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V5, V6}}}}}} end end end(E15, E16, E17, E18)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V5, V6}}}}}} end end end(E0, E1, E2, E3)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V5, V6}}}}}} end end.
'un--compileRunTime'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V39 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V10) -> fun (V11) -> ('un--mkRunTime'(V0, V1, V2, V3, V10, V11)) end end, case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V33 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V39 of {'Idris.Prelude.Types.Left', E29} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V41) -> begin (V71 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V42) -> fun (V43) -> ('un--calcRefs'(V0, 0, V4, V42, V43)) end end, case V9 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V65 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V71 of {'Idris.Prelude.Types.Left', E58} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V73) -> begin (V75 = begin (V74 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V74} end), case V75 of {'Idris.Prelude.Types.Left', E60} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V77) -> begin (V105 = ('erlang':'put'(V0, case V77 of {'Idris.Core.Context.MkDefs', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> {'Idris.Core.Context.MkDefs', V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, [], V100, V101, V102, V103, V104} end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V105} end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--combineLinear'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> ('case--combineLinear-5052'(V5, V6, V4, V0, ('nested--18497-4897--in--un--lookupAll'(V5, V6, V4, V0, V5, V4)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS: "/utf8>> end, V12, V13))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V21 = case V4 of 0 -> {'Idris.Prelude.Types.Right', V12}; 1 -> (('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'('erased', V1, V9, V12))(V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS in current NS: "/utf8>> end, V23, V13))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1, V13))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, 0, V13))), case V30 of {'Idris.Prelude.Types.Left', E10} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 1, V23, V13))), case V33 of {'Idris.Prelude.Types.Left', E12} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V36, V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V29, V13))), case V38 of {'Idris.Prelude.Types.Left', E16} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS with implicits bound"/utf8>> end, V37, V13))), case V41 of {'Idris.Prelude.Types.Left', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V43) -> begin (V44 = case V4 of 0 -> {'Idris.Prelude.Types.Right', V37}; 1 -> (('Idris.Idris2.TTImp.TTImp':'un--implicitsAs'(V1, V7, V17, V0, V37))(V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V44 of {'Idris.Prelude.Types.Left', E20} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V46) -> begin (V51 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V47) -> begin (V48 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V7}))(V47))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking LHS of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V50))))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V13))), case V51 of {'Idris.Prelude.Types.Left', E24} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V53) -> begin (V54 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V46)) end))(V13))), case V54 of {'Idris.Prelude.Types.Left', E26} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V10, V13))), case V57 of {'Idris.Prelude.Types.Left', E28} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V59) -> begin (V60 = case V4 of 0 -> {'Idris.TTImp.Elab.Check.InTransform'}; 1 -> {'Idris.TTImp.Elab.Check.InLHS', V5}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V65 = begin (V61 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V7}))(V13))), case V61 of {'Idris.Prelude.Types.Left', E30} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V63) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V8, fun (V64) -> {'Idris.Core.Core.InLHS', V11, V63, V64} end))(('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V7, V60, V8, V9, V10, {'Idris.TTImp.TTImp.IBindHere', V11, {'Idris.TTImp.TTImp.PATTERN'}, V46}, {'Idris.Prelude.Types.Nothing'}))))(V13)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V65 of {'Idris.Prelude.Types.Left', E32} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V68, V69) -> begin (V70 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Checked LHS term"/utf8>> end, V68, V13))), case V70 of {'Idris.Prelude.Types.Left', E36} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V72) -> begin (V73 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V69))(V13))), case V73 of {'Idris.Prelude.Types.Left', E38} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V75) -> begin (V77 = begin (V76 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E40} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V10))), begin (V81 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V79, V80, V68, V13))), case V81 of {'Idris.Prelude.Types.Left', E42} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V83) -> begin (V84 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V79, V10, V75, V13))), case V84 of {'Idris.Prelude.Types.Left', E44} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V86) -> begin (V91 = (('un--findLinear'(V0, V1, 0, 0, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V87) -> fun (V88) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V87, V88)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V89, V90)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V83))(V13))), case V91 of {'Idris.Prelude.Types.Left', E46} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V93) -> begin (V94 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Checked LHS term after normalise"/utf8>> end, V83, V13))), case V94 of {'Idris.Prelude.Types.Left', E48} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V96) -> begin (V112 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity of names in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V97) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V98)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V99, V100)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V101) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V102, V103)) end end}}, V97)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V107, V108)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V110, V111)) end end}}, V104, V105)) end end}, V93)))))))) end))(V13))), case V112 of {'Idris.Prelude.Types.Left', E50} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V114) -> begin (V115 = (('un--combineLinear'(V11, V93))(V13))), case V115 of {'Idris.Prelude.Types.Left', E52} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V117) -> begin (V118 = ('un--setLinear'('erased', V117, V83))), begin (V119 = ('un--setLinear'('erased', V117, V86))), begin (V120 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"LHS term"/utf8>> end, V118, V13))), case V120 of {'Idris.Prelude.Types.Left', E54} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V122) -> begin (V123 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"LHS type"/utf8>> end, V119, V13))), case V123 of {'Idris.Prelude.Types.Left', E56} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V125) -> begin (V126 = ('Idris.Idris2.Core.Metadata':'un--setHoleLHS'(V2, ('Idris.Idris2.Core.Env':'un--bindEnv'(V0, V11, V10, V118)), V13))), case V126 of {'Idris.Prelude.Types.Left', E58} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V128) -> begin (V129 = (('un--extendEnv'('erased', V0, V10, {'Idris.Core.TT.SubRefl'}, V9, V118, V119))(V13))), case V129 of {'Idris.Prelude.Types.Left', E60} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V46, V131}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.TTImp.TTImp.ImpossibleClause', E0, E1} -> (fun (V13, V14) -> fun (V15) -> begin (V16 = (('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'('erased', V1, V10, V14))(V15))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'('erased', V1, V3, fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1, V19))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, 0, V19))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 1, V18, V19))), case V26 of {'Idris.Prelude.Types.Left', E8} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V29, V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V22, V19))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> begin (V34 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.clause.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V30)))) end))(V19))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"declare.def.clause.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V11, V19))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> begin (V40 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V8, {'Idris.TTImp.Elab.Check.InLHS', V4}, V9, V10, V11, {'Idris.TTImp.TTImp.IBindHere', V13, {'Idris.TTImp.TTImp.PATTERN'}, V30}, {'Idris.Prelude.Types.Nothing'}))(V19))), case V40 of {'Idris.Prelude.Types.Left', E18} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V42) -> case V42 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V43, V44) -> begin (V46 = begin (V45 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E22} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V48, V11, V43, V19))), case V49 of {'Idris.Prelude.Types.Left', E24} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V51) -> begin (V52 = (('un--hasEmptyPat'(V0, V1, V48, V11, V51))(V19))), case V52 of {'Idris.Prelude.Types.Left', E26} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V54) -> case V54 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V18}}; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.ValidCase', V0, V13, V11, {'Idris.Prelude.Types.Left', V51}}, V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V55) -> case V55 of {'Idris.Core.Core.ValidCase', E32, E33, E34, E35} -> (fun (V56, V57, V58, V59) -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V55, V60)) end end(E32, E33, E34, E35)); _ -> fun (V61) -> begin (V63 = begin (V62 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E28} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V65) -> begin (V66 = (('un--impossibleErrOK'(V1, V65, V55))(V61))), case V66 of {'Idris.Prelude.Types.Left', E30} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V68) -> case V68 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V18}}; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.ValidCase', V0, V13, V11, {'Idris.Prelude.Types.Right', V55}}, V61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V15)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.PatClause', E36, E37, E38} -> (fun (V69, V70, V71) -> fun (V72) -> begin (V73 = ('un--checkLHS'(V0, V1, V2, V3, 1, V4, V7, V8, V9, V10, V11, V69, V70, V72))), case V73 of {'Idris.Prelude.Types.Left', E39} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V75) -> case V75 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V76, V77) -> case V77 of {'Idris.Builtin.DPair.MkDPair', E43, E44} -> (fun (V78, V79) -> case V79 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V80, V81) -> case V81 of {'Idris.Builtin.MkPair', E47, E48} -> (fun (V82, V83) -> case V83 of {'Idris.Builtin.MkPair', E49, E50} -> (fun (V84, V85) -> case V85 of {'Idris.Builtin.MkPair', E51, E52} -> (fun (V86, V87) -> begin (V97 = begin (V88 = {'Idris.Builtin.MkPair', V76, {'Idris.Builtin.DPair.MkDPair', V78, {'Idris.Builtin.MkPair', V80, {'Idris.Builtin.MkPair', V82, {'Idris.Builtin.MkPair', V84, {'Idris.Builtin.MkPair', V86, V87}}}}}}), ('case--case block in checkClause-6550'(V71, V70, V69, V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V76, V78, V80, V82, V84, V86, V87, V88, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V89, V90)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V91, V92)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V93, V94)) end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V95, V96)) end end}}, V4)))) end), begin (V98 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking RHS "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V71)))) end))(V72))), case V98 of {'Idris.Prelude.Types.Left', E53} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V100) -> begin (V101 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V78, V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V82, V72))), case V101 of {'Idris.Prelude.Types.Left', E55} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V103) -> begin (V109 = begin (V104 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V8}))(V72))), case V104 of {'Idris.Prelude.Types.Left', E57} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V106) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V9, fun (V108) -> {'Idris.Core.Core.InRHS', V69, V106, V108} end))(fun (V107) -> ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V0, V78, V1, V2, V3, V8, V97, V9, V84, V82, V11, V80, V71, ('Idris.Idris2.Core.Normalise':'un--gnf'(V78, V82, V87)), V107)) end))(V72)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V109 of {'Idris.Prelude.Types.Left', E59} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V111) -> begin (V112 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V2, V72))), case V112 of {'Idris.Prelude.Types.Left', E61} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V114) -> begin (V115 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V78, V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"RHS term"/utf8>> end, V111, V72))), case V115 of {'Idris.Prelude.Types.Left', E63} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V117) -> begin (V135 = case V7 of 0 -> begin (V125 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V118) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V119, V120)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V123, V124)) end end}, V86, V72))), case V125 of {'Idris.Prelude.Types.Left', E65} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V127) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V128) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V129, V130)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V131, V132)) end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V133, V134)) end end}, V111, V72)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V135 of {'Idris.Prelude.Types.Left', E67} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V137) -> begin (V142 = case V111 of {'Idris.Core.TT.Meta', E69, E70, E71, E72} -> (fun (V138, V139, V140, V141) -> ('Idris.Idris2.Core.Metadata':'un--addLHS'(V78, V1, V2, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V70)), ('Idris.Idris2.Core.Env':'un--length'('erased', 'erased', V11)), V82, V86, V72)) end(E69, E70, E71, E72)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end), case V142 of {'Idris.Prelude.Types.Left', E73} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V144) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkClause', V78, V82, V86, V111}}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36, E37, E38)); {'Idris.TTImp.TTImp.WithClause', E75, E76, E77, E78, E79, E80} -> (fun (V145, V146, V147, V148, V149, V150) -> fun (V151) -> begin (V152 = ('un--checkLHS'(V0, V1, V2, V3, 1, V4, V7, V8, V9, V10, V11, V145, V146, V151))), case V152 of {'Idris.Prelude.Types.Left', E81} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V154) -> case V154 of {'Idris.Builtin.MkPair', E83, E84} -> (fun (V155, V156) -> case V156 of {'Idris.Builtin.DPair.MkDPair', E85, E86} -> (fun (V157, V158) -> case V158 of {'Idris.Builtin.MkPair', E87, E88} -> (fun (V159, V160) -> case V160 of {'Idris.Builtin.MkPair', E89, E90} -> (fun (V161, V162) -> case V162 of {'Idris.Builtin.MkPair', E91, E92} -> (fun (V163, V164) -> case V164 of {'Idris.Builtin.MkPair', E93, E94} -> (fun (V165, V166) -> begin (V176 = begin (V167 = {'Idris.Builtin.MkPair', V155, {'Idris.Builtin.DPair.MkDPair', V157, {'Idris.Builtin.MkPair', V159, {'Idris.Builtin.MkPair', V161, {'Idris.Builtin.MkPair', V163, {'Idris.Builtin.MkPair', V165, V166}}}}}}), ('case--case block in checkClause-9887'(V150, V149, V148, V147, V146, V145, V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V155, V157, V159, V161, V163, V165, V166, V167, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V168) -> fun (V169) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V168, V169)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V170) -> fun (V171) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V170, V171)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V172) -> fun (V173) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V172, V173)) end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V174, V175)) end end}}, V4)))) end), begin (V181 = begin (V177 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V8}))(V151))), case V177 of {'Idris.Prelude.Types.Left', E95} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V179) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V9, fun (V180) -> {'Idris.Core.Core.InRHS', V145, V179, V180} end))(('Idris.Idris2.TTImp.Elab':'un--elabTermSub'(V0, V157, V1, V2, V3, V8, V176, V9, V163, V161, V11, V159, V147, {'Idris.Prelude.Types.Nothing'}))))(V151)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V181 of {'Idris.Prelude.Types.Left', E97} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V183) -> begin (V184 = {'Idris.Builtin.MkPair', V155, {'Idris.Builtin.DPair.MkDPair', V157, {'Idris.Builtin.MkPair', V159, {'Idris.Builtin.MkPair', V161, {'Idris.Builtin.MkPair', V163, {'Idris.Builtin.MkPair', V165, V166}}}}}}), case V183 of {'Idris.Builtin.MkPair', E99, E100} -> (fun (V185, V186) -> begin (V187 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V2, V151))), case V187 of {'Idris.Prelude.Types.Left', E101} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V189) -> begin (V190 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V157, V1, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"With value"/utf8>> end, V185, V151))), case V190 of {'Idris.Prelude.Types.Left', E103} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V192) -> begin (V193 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V157, V1, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Required type"/utf8>> end, V166, V151))), case V193 of {'Idris.Prelude.Types.Left', E105} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V195) -> begin (V196 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V186))(V151))), case V196 of {'Idris.Prelude.Types.Left', E107} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V198) -> begin (V200 = begin (V199 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V199} end), case V200 of {'Idris.Prelude.Types.Left', E109} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V202) -> begin (V203 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V157, V202, V161, V185, V151))), case V203 of {'Idris.Prelude.Types.Left', E111} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V205) -> begin (V206 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V157, V202, V161, V198, V151))), case V206 of {'Idris.Prelude.Types.Left', E113} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V208) -> begin (V209 = {'Idris.Builtin.MkPair', V185, V186}), (('case--case block in case block in checkClause-7684'(V150, V149, V148, V147, V146, V145, V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V155, V157, V159, V161, V163, V165, V166, V184, V176, V185, V186, V209, V198, V202, V205, V208, ('nested--19505-6647--in--un--keepOldEnv'(V150, V149, V148, V147, V146, V145, V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, 'erased', 'erased', V157, V159, case ('Idris.Idris2.Core.Env':'un--findSubEnv'(V157, V161, V205)) of {'Idris.Builtin.DPair.MkDPair', E115, E116} -> (fun (V210, V211) -> V211 end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V151)) end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--calcRefs'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V40 = {'Idris.Prelude.Types.Just', V39}), (('case--case block in calcRefs-10186'(V3, V2, V1, V0, V8, V39, V40, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E31)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--applyEnv'(V0, V1, V2, V3, V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V3}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Core.Env':'un--allVarsNoLet'(V0, V2)))), fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.UnifyState':'un--applyTo'(V0, V8, {'Idris.Core.TT.Ref', V8, V9, {'Idris.Core.Name.Resolved', V7}}, V2)) end end}}}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
