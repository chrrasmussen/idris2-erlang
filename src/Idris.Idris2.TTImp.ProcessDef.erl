-module('Idris.Idris2.TTImp.ProcessDef').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--with block in nameListEq-9895'/4,
  'with--nameListEq-9888'/5,
  'with--extendEnv-3923'/20,
  'with--extendEnv-3842'/19,
  'case--case block in mkRunTime-10731'/10,
  'case--case block in calcRefs-10067'/8,
  'case--case block in case block in case block in case block in case block in case block in case block in checkClause-8276'/51,
  'case--case block in case block in case block in case block in case block in checkClause-7826'/40,
  'case--case block in case block in checkClause-7551'/36,
  'case--combineLinear-4823'/6,
  'case--findLinear-4365'/7,
  'nested--20548-11349--in--un--withTotality'/13,
  'nested--14852-6655--in--un--wargs'/35,
  'nested--14753-6494--in--un--wargs'/20,
  'nested--14852-6654--in--un--wargn'/35,
  'nested--14753-6493--in--un--wargn'/20,
  'nested--13692-6474--in--un--vfc'/18,
  'nested--19523-10448--in--un--toErased'/8,
  'nested--19523-10449--in--un--toClause'/7,
  'nested--20548-11350--in--un--simplePat'/11,
  'nested--12633-4667--in--un--notN'/5,
  'nested--19523-10441--in--un--noInline'/6,
  'nested--19523-10443--in--un--mkCrash'/7,
  'nested--13692-6477--in--un--mkClauseWith'/24,
  'nested--19523-10444--in--un--matchAny'/6,
  'nested--19523-10445--in--un--makeErrorClause'/8,
  'nested--12633-4668--in--un--lookupAll'/6,
  'nested--13692-6476--in--un--keepOldEnv'/21,
  'nested--19523-10447--in--un--getSpec'/6,
  'nested--20548-11353--in--un--getClause'/12,
  'nested--11908-4038--in--un--findLinArg'/10,
  'nested--18904-9920--in--un--dropErased'/7,
  'nested--12633-4670--in--un--combineAll'/7,
  'nested--12633-4669--in--un--combine'/7,
  'nested--20572-11444--in--un--closeEnv'/16,
  'nested--20548-11352--in--un--checkImpossible'/14,
  'nested--20548-11354--in--un--checkCoverage'/15,
  'nested--20548-11351--in--un--catchAll'/11,
  'nested--19523-10442--in--un--caseName'/6,
  'nested--13692-6475--in--un--bindWithArgs'/21,
  'nested--19523-10446--in--un--addErrorCase'/6,
  'nested--11908-4037--in--un--accessible'/8,
  'un--warnUnreachable'/3,
  'un--toPats'/1,
  'un--setLinear'/2,
  'un--recoverableErr'/3,
  'un--recoverable'/5,
  'un--processDef'/11,
  'un--nameListEq'/2,
  'un--mkRunTime'/6,
  'un--mismatchNF'/5,
  'un--mismatch'/5,
  'un--impossibleOK'/5,
  'un--impossibleErrOK'/3,
  'un--hasEmptyPat'/6,
  'un--findLinear'/6,
  'un--extendEnv'/6,
  'un--compileRunTime'/6,
  'un--combineLinear'/2,
  'un--checkLHS'/14,
  'un--checkClause'/14,
  'un--calcRefs'/5,
  'un--applyEnv'/5
]).
'with--with block in nameListEq-9895'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--nameListEq-9888'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of 0 -> ('with--with block in nameListEq-9895'(V4, V3, ('un--nameListEq'(V3, V4)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--extendEnv-3923'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen: names don\x{27}t match in pattern type"/utf8>>}, V20)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> case V21 of 0 -> ('un--extendEnv'([V0 | V4], {'Idris.Core.Env.::', {'Idris.Core.TT.Let', V14, V13, V11, V12}, V19}, {'Idris.Core.TT.DropCons', V18}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V17)), V15, V16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'with--extendEnv-3842'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t happen: names don\x{27}t match in pattern type"/utf8>>}, V19)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> case V20 of 0 -> ('un--extendEnv'([V0 | V4], {'Idris.Core.Env.::', {'Idris.Core.TT.PVar', V13, V12, V11, V10}, V18}, {'Idris.Core.TT.DropCons', V17}, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V16)), V14, V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mkRunTime-10731'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> begin (V36 = case V6 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V17 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun () -> fun (V37) -> begin (V81 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V38) -> ('nested--19523-10448--in--un--toErased'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V39 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('nested--19523-10447--in--un--getSpec'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V71 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V38)) end, V14, [], V37))), case V81 of {'Idris.Prelude.Types.Left', E68} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V83) -> begin (V106 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V84) -> ('nested--19523-10449--in--un--toClause'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105) -> V85 end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V84)) end, V83))), begin (V108 = case V8 of {'Idris.Core.TT.MissingCases', E91} -> (fun (V107) -> ('nested--19523-10446--in--un--addErrorCase'(V0, V1, V2, V3, V4, V106)) end(E91)); _ -> V106 end), begin (V130 = ('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> V109 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.CaseBuilder.RunTime'}, V0, V36, V108, V37))), case V130 of {'Idris.Prelude.Types.Left', E113} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V132) -> case V132 of {'Idris.Builtin.DPair.MkDPair', E115, E116} -> (fun (V133, V134) -> case V134 of {'Idris.Builtin.MkPair', E117, E118} -> (fun (V135, V136) -> begin (V168 = begin (V143 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V137, V138, V139)) end end end, fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V140, V141, V142)) end end end}, V135, V37))), case V143 of {'Idris.Prelude.Types.Left', E119} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V145) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V4, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V146) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Covering'(V8)), <<":"/utf8>>)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Runtime tree for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V6 of {'Idris.Core.Context.MkGlobalDef', E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141} -> (fun (V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167) -> V148 end(E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<":"/utf8>>)))) | [('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(2, ('Idris.Idris2.Core.CaseTree':'dn--un--pretty_Pretty_(CaseTree $vars)'(V133, V145)))))) | []]]]))} end, V37)) end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V168 of {'Idris.Prelude.Types.Left', E142} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V170) -> begin (V171 = ('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V133, V135)) end, V37))), case V171 of {'Idris.Prelude.Types.Left', E144} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V173) -> case ('un--nameListEq'(V11, V133)) of {'Idris.Prelude.Types.Just', E146} -> (fun (V174) -> case V174 of 0 -> begin (V200 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V175) -> case V175 of {'Idris.Prelude.Types.Left', E147} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V177) -> {'Idris.Prelude.Types.Right', 0} end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V178) -> ('Idris.Idris2.Core.Context':'un--addDef'(V4, V0, case V6 of {'Idris.Core.Context.MkGlobalDef', E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169} -> (fun (V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199) -> {'Idris.Core.Context.MkGlobalDef', V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, {'Idris.Core.Context.PMDef', V10, V11, V12, V135, V14}, V197, V198, V199} end(E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V178)) end, V37))), case V200 of {'Idris.Prelude.Types.Left', E170} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V202) -> begin (V209 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V203) -> fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V203, V204, V205)) end end end, fun (V206) -> fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V206, V207, V208)) end end end}, V0, V37))), case V209 of {'Idris.Prelude.Types.Left', E172} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V211) -> case case ('nested--19523-10442--in--un--caseName'(V0, V1, V2, V3, V4, V211)) of 1 -> ('nested--19523-10441--in--un--noInline'(V0, V1, V2, V3, V4, case V6 of {'Idris.Core.Context.MkGlobalDef', E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196} -> (fun (V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232) -> V223 end(E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> begin (V233 = ('Idris.Idris2.TTImp.Elab.Utils':'un--canInlineCaseBlock'(V4, V0, V37))), case V233 of {'Idris.Prelude.Types.Left', E174} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V235) -> case V235 of 1 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V4, V1, V0, {'Idris.Core.Context.Inline'}, V37)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E146)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"WAT"/utf8>>}, V37)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1, E2, E3, E4)); _ -> fun () -> fun (V236) -> {'Idris.Prelude.Types.Right', 0} end end end.
'case--case block in calcRefs-10067'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> begin (V55 = case V2 of 1 -> case V5 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V26 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V5 of {'Idris.Core.Context.MkGlobalDef', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V46 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V56 = case V2 of 1 -> V11; 0 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V57 = ('Idris.Idris2.Core.CaseTree':'un--getMetas'(V56))), fun (V58) -> begin (V61 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V3, V59, V60)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V57)), V58))), case V61 of {'Idris.Prelude.Types.Left', E47} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.CaseTree':'un--addRefs'(V1, V57, V56))), begin (V65 = case V2 of 1 -> ('nested--18904-9920--in--un--dropErased'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V64)), V64, V58)); 0 -> {'Idris.Prelude.Types.Right', V64}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V65 of {'Idris.Prelude.Types.Left', E49} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V67) -> begin (V114 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V68) -> case V68 of {'Idris.Prelude.Types.Left', E51} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V70) -> {'Idris.Prelude.Types.Right', 0} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V71) -> case V2 of 1 -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> {'Idris.Core.Context.MkGlobalDef', V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, {'Idris.Prelude.Types.Just', V67}, V86, V87, V88, V89, V90, V91, V92} end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V71)); 0 -> ('Idris.Idris2.Core.Context':'un--addDef'(V3, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> {'Idris.Core.Context.MkGlobalDef', V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, {'Idris.Prelude.Types.Just', V67}, V106, V107, V108, V109, V110, V111, V112, V113} end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V58))), case V114 of {'Idris.Prelude.Types.Left', E95} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V116) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V117) -> fun (V118) -> ('un--calcRefs'(V3, V2, V1, V117, V118)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V67)), V58)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end()); {'Idris.Prelude.Types.Just', E97} -> (fun (V119) -> fun (V120) -> {'Idris.Prelude.Types.Right', 0} end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> fun (V121) -> {'Idris.Prelude.Types.Right', 0} end end.
'case--case block in case block in case block in case block in case block in case block in case block in checkClause-8276'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> case V50 of {'Idris.Prelude.Types.Just', E0} -> (fun (V51) -> case V51 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V52, V53) -> case V53 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V54, V55) -> begin (V58 = ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V56) -> {'Idris.Prelude.Types.Just', V56} end, V52)), [{'Idris.Prelude.Types.Nothing'} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V57) -> {'Idris.Prelude.Types.Just', V57} end, V45))]))), fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"With function type"/utf8>> end, V55, V59))), case V60 of {'Idris.Prelude.Types.Left', E5} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V62) -> begin (V120 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Argument names "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V66) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V66)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V67, V68)) end end}, V65)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V71) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V72, V73)) end end}, V69, V70)) end end}, {'Idris.Prelude.Show.MkShow', fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V75, V76)) end end}}, V64)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V81, V82)) end end}, V79)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V86, V87)) end end}, V83, V84)) end end}, {'Idris.Prelude.Show.MkShow', fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V89, V90)) end end}}, V77, V78)) end end}, V63)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V93) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V94) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V95) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V96, V97)) end end}, V94)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V100) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V101, V102)) end end}, V98, V99)) end end}, {'Idris.Prelude.Show.MkShow', fun (V103) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V104, V105)) end end}}, V93)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V110, V111)) end end}, V108)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V114) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V115, V116)) end end}, V112, V113)) end end}, {'Idris.Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V118, V119)) end end}}, V106, V107)) end end}, V91, V92)) end end}, V58)))) end, V59))), case V120 of {'Idris.Prelude.Types.Left', E7} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V122) -> begin (V135 = begin (V129 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V17, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V123, V124, V125)) end end end, fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V126, V127, V128)) end end end}, {'Idris.Core.Name.Resolved', V10}, V59))), case V129 of {'Idris.Prelude.Types.Left', E9} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V131) -> begin (V132 = (('Idris.Idris2.Core.Context':'un--prettyName'(V17, V131))(V59))), case V132 of {'Idris.Prelude.Types.Left', E11} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V134) -> ('Idris.Idris2.Core.UnifyState':'un--genWithName'(V17, V15, V134, V59)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V135 of {'Idris.Prelude.Types.Left', E13} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V137) -> begin (V171 = ('Idris.Idris2.Core.Context':'un--addDef'(V17, V137, case ('Idris.Idris2.Core.Context':'un--newDef'(('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V137, case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V138) -> fun (V139) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V138, V139)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V140) -> fun (V141) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V140, V141)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V142) -> fun (V143) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V142, V143)) end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V144, V145)) end end}}, V14)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V146) -> fun (V147) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V146, V147)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V148) -> fun (V149) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V148, V149)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V55, V13, {'Idris.Core.Context.None'})) of {'Idris.Core.Context.MkGlobalDef', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170) -> {'Idris.Core.Context.MkGlobalDef', V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, [{'Idris.Core.Context.SetTotal', V12} | V161], V162, V163, V164, V165, V166, V167, V168, V169, V170} end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V59))), case V171 of {'Idris.Prelude.Types.Left', E36} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V173) -> begin (V181 = ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(V174, V175, V176)) end end end, fun () -> fun (V177) -> [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.TTImp.TTImp.IVar', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Builtin':'un--snd'(V177))}} | []] end end, fun () -> [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V3} | case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); {'Idris.Prelude.Types.Just', E38} -> (fun (V178) -> begin (V179 = ('Idris.Idris2.Core.FC':'un--emptyFC'())), begin (V180 = {'Idris.TTImp.TTImp.IVar', V179, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"Refl"/utf8>>}}}), [{'Idris.Builtin.MkPair', V2, {'Idris.TTImp.TTImp.INamedApp', V179, V180, {'Idris.Core.Name.UN', <<"x"/utf8>>}, V3}} | []] end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end] end))), begin (V211 = ('Idris.Idris2.TTImp.TTImp':'un--gapply'({'Idris.TTImp.TTImp.IVar', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V137}, ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V182) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.TTImp.TTImp.IVar', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V182}} end, V54)), ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V185, V186, V187)) end end end end end, fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V190, V191, V192)) end end end end end, fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V194)) end end, fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V198, V199, V200, V201)) end end end end end end end, fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V203)) end end, fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V206, V207, V208)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V209) -> fun (V210) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V209, V210)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V181, V58))))))), begin (V212 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Applying to with argument "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V211)))) end, V59))), case V212 of {'Idris.Prelude.Types.Left', E39} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V214) -> begin (V220 = begin (V215 = ('Idris.Idris2.Core.Context':'un--getFullName'(V17, {'Idris.Core.Name.Resolved', V10}, V59))), case V215 of {'Idris.Prelude.Types.Left', E41} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V217) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V9, fun (V218) -> {'Idris.Core.Core.InRHS', V5, V217, V218} end, fun (V219) -> ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V6, V19, V17, V16, V15, V10, V26, V9, V22, V21, V7, V20, V211, ('Idris.Idris2.Core.Normalise':'un--gnf'(V19, V21, V24)), V219)) end))(V59)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V220 of {'Idris.Prelude.Types.Left', E43} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V222) -> begin (V225 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V223) -> fun (V224) -> ('nested--13692-6477--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, (1 + 0), V137, V58, V18, V223, V224)) end end, V0, [], V59))), case V225 of {'Idris.Prelude.Types.Left', E45} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V227) -> begin (V231 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"With clauses: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V228) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpClause'(V228)) end, fun (V229) -> fun (V230) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpClause'(V229, V230)) end end}, V227)))) end, V59))), case V231 of {'Idris.Prelude.Types.Left', E47} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V233) -> begin (V234 = ('un--applyEnv'(V6, V17, V7, V137, V59))), case V234 of {'Idris.Prelude.Types.Left', E49} -> (fun (V235) -> {'Idris.Prelude.Types.Left', V235} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V236) -> begin (V237 = [V236 | V8]), begin (V238 = {'Idris.TTImp.TTImp.IDef', V5, V137, V227}), begin (V239 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V17, V16, V15, [], V237, V7, V238))(V59))), case V239 of {'Idris.Prelude.Types.Left', E51} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V241) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkClause', V19, V21, V23, V222}}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V242) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #4"/utf8>>}, V242)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in checkClause-7826'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V38 of {'Idris.Prelude.Types.Just', E0} -> (fun (V40) -> begin (V46 = (('nested--13692-6475--in--un--bindWithArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V37, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V43, V44)) end end end end, fun (V45) -> {'Idris.Builtin.MkPair', V45, V36} end, V2)), V40))(V39))), case V46 of {'Idris.Prelude.Types.Left', E1} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V48) -> case V48 of {'Idris.Builtin.DPair.MkDPair', E3, E4} -> (fun (V49, V50) -> case V50 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V51, V52) -> case V52 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V53, V54) -> begin (V55 = ('Idris.Idris2.TTImp.Elab.Utils':'un--bindNotReq'(V19, ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), 0, V21, V35, [], V24))), begin (V56 = ('Idris.Idris2.Builtin':'un--fst'(V55))), begin (V57 = ('Idris.Idris2.Builtin':'un--snd'(V55))), begin (V62 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V58) -> fun (V59) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_WithFlag'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_WithFlag'(V60, V61)) end end}, 0, V1)) of 1 -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V31, V39)); 0 -> {'Idris.Prelude.Types.Right', V31}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V62 of {'Idris.Prelude.Types.Left', E9} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V64) -> begin (V71 = begin (V65 = (('Idris.Idris2.Core.Normalise':'un--nf'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'(V49, V34)), V64, V51, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V49)), V36))))(V39))), case V65 of {'Idris.Prelude.Types.Left', E11} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V67) -> begin (V68 = (('Idris.Idris2.Core.Normalise':'un--nf'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'(V49, V34)), V64, V51, ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(('Idris.Idris2.Core.TT.SizeOf':'un--mkSizeOf'(V49)), V57))))(V39))), case V68 of {'Idris.Prelude.Types.Left', E13} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V70) -> ('Idris.Idris2.Core.Normalise':'un--replace'(V17, ('Idris.Idris2.Prelude.Types.List':'un--++'(V49, V34)), V64, V51, V67, V53, V70, V39)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V71 of {'Idris.Prelude.Types.Left', E15} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V73) -> begin (V74 = (V54(V73))), begin (V75 = {'Idris.Builtin.DPair.MkDPair', V49, {'Idris.Builtin.MkPair', V51, {'Idris.Builtin.MkPair', V53, V54}}}), (('case--case block in case block in case block in case block in case block in case block in case block in checkClause-8276'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V40, V49, V51, V53, V54, V75, V55, V56, V57, V64, V73, V74, ('Idris.Idris2.TTImp.Elab.Utils':'un--bindReq'(V19, ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V21, V35, [], V74))))(V39)) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #3"/utf8>>}, V39)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkClause-7551'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V34 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V36, V37) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V19, V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"With value type"/utf8>> end, V33, V35))), case V38 of {'Idris.Prelude.Types.Left', E2} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V40) -> begin (V44 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Using vars "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V42, V43)) end end}, V36)))) end, V35))), case V44 of {'Idris.Prelude.Types.Left', E4} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V46) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V32, V37)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V47) -> case ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V33, V37)) of {'Idris.Prelude.Types.Just', E7} -> (fun (V48) -> ('case--case block in case block in case block in case block in case block in checkClause-7826'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V36, V37, V47, V48, ('Idris.Idris2.Core.Env':'un--shrinkEnv'(V21, V37)), V35)) end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #2"/utf8>>}, V35)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Impossible happened: With abstraction failure #1"/utf8>>}, V35)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--combineLinear-4823'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> begin (V6 = (('un--combineLinear'(V3, V2))(V5))), case V6 of {'Idris.Prelude.Types.Left', E4} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V8) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V0, V1} | V8]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V9 = ('nested--12633-4670--in--un--combineAll'(V0, V1, V2, V3, V1, V4, V5))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V13 = (('un--combineLinear'(V3, ('Idris.Idris2.Data.List':'un--filter'(fun (V12) -> ('nested--12633-4667--in--un--notN'(V0, V1, V2, V3, V12)) end, V2))))(V5))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V0, V11} | V15]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'case--findLinear-4365'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> fun (V9) -> case V7 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V10, V11, V12) -> case V8 of [] -> {'Idris.Prelude.Types.Right', []}; _ -> begin (V14 = begin (V13 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V16) -> begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V12, case V16 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V17 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V45 of {'Idris.Prelude.Types.Left', E35} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E37} -> (fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise':'un--nf'(V5, [], V16, {'Idris.Core.Env.Nil'}, V48))(V9))), case V49 of {'Idris.Prelude.Types.Left', E38} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V51) -> (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V0, ('nested--11908-4037--in--un--accessible'(V0, V1, V2, V3, V4, V5, V11, V2)), V51, V8))(V9)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1)); _ -> fun (V52) -> {'Idris.Prelude.Types.Right', []} end end.
'nested--20548-11349--in--un--withTotality'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V9, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V10, V12))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V24 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'((V11()), fun (V19) -> fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V15, V20))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V19, V20)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V9, V15, V12))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> {'Idris.Prelude.Types.Right', V26} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--14852-6655--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> [V18 | [('nested--14852-6654--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34)) | []]].
'nested--14753-6494--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> [('nested--14753-6493--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19)) | []].
'nested--14852-6654--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Name.MN', <<"warg"/utf8>>, 0}.
'nested--14753-6493--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.Name.MN', <<"warg"/utf8>>, 0}.
'nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> ('Idris.Idris2.Core.FC':'un--virtualiseFC'(V5)).
'nested--19523-10448--in--un--toErased'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V8, V9) -> fun (V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> begin (V19 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V8, V4, V2, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 1, V11, V13, V10))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Transform':'un--applyTransforms'(V4, V11, V14))(V10))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.TTImp.PartialEval':'un--applySpecialise'(V8, V4, V3, V2, V11, V6, V24))(V10))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V32 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'(V8, V4, V2, V5, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V28, V29)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V30, V31)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 1, V11, V27, V10))), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V8, {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V21, V34}}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19523-10449--in--un--toClause'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Core.Context.MkClause', V7, V9, V11, V12} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--20548-11350--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V11, V12, V13) -> 1 end(E0, E1, E2)); {'Idris.Core.TT.Erased', E3, E4} -> (fun (V14, V15) -> 1 end(E3, E4)); {'Idris.Core.TT.As', E5, E6, E7, E8} -> (fun (V16, V17, V18, V19) -> ('nested--20548-11350--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19)) end(E5, E6, E7, E8)); _ -> 0 end.
'nested--12633-4667--in--un--notN'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V0, V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19523-10441--in--un--noInline'(V0, V1, V2, V3, V4, V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.Inline'} -> (fun () -> 0 end()); _ -> ('nested--19523-10441--in--un--noInline'(V0, V1, V2, V3, V4, V7)) end end(E0, E1)); _ -> 1 end.
'nested--19523-10443--in--un--mkCrash'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Core.TT':'un--apply'(V1, {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"idris_crash"/utf8>>}}}, [{'Idris.Core.TT.Erased', V1, 0} | [{'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Str', V6}} | []]])).
'nested--13692-6477--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V24, V25, V26) -> begin (V27 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"PatClause"/utf8>> end, V23))), case V27 of {'Idris.Prelude.Types.Left', E3} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V29) -> begin (V30 = (('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V17, V16, V24, V18, V8, V19, V20, V21, V25))(V23))), case V30 of {'Idris.Prelude.Types.Left', E5} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V32) -> begin (V33 = (('Idris.Idris2.TTImp.WithClause':'un--withRHS'(V17, V16, V24, V18, V19, V20, V26, V21))(V23))), case V33 of {'Idris.Prelude.Types.Left', E7} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PatClause', V24, V32, V35}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E9, E10, E11, E12, E13, E14} -> (fun (V36, V37, V38, V39, V40, V41) -> begin (V42 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"WithClause"/utf8>> end, V23))), case V42 of {'Idris.Prelude.Types.Left', E15} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V44) -> begin (V45 = (('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V17, V16, V36, V18, V8, V19, V20, V21, V37))(V23))), case V45 of {'Idris.Prelude.Types.Left', E17} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V47) -> begin (V48 = (('Idris.Idris2.TTImp.WithClause':'un--withRHS'(V17, V16, V36, V18, V19, V20, V38, V21))(V23))), case V48 of {'Idris.Prelude.Types.Left', E19} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V50) -> begin (V53 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V51) -> fun (V52) -> ('nested--13692-6477--in--un--mkClauseWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, (1 + V18), V19, V20, V21, V51, V52)) end end, V41, [], V23))), case V53 of {'Idris.Prelude.Types.Left', E21} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.WithClause', V36, V47, V50, V39, V40, V55}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11, E12, E13, E14)); {'Idris.TTImp.TTImp.ImpossibleClause', E23, E24} -> (fun (V56, V57) -> begin (V58 = ('Idris.Idris2.Core.Context.Log':'un--log'(V17, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"ImpossibleClause"/utf8>> end, V23))), case V58 of {'Idris.Prelude.Types.Left', E25} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V60) -> begin (V61 = (('Idris.Idris2.TTImp.WithClause':'un--getNewLHS'(V17, V16, V56, V18, V8, V19, V20, V21, V57))(V23))), case V61 of {'Idris.Prelude.Types.Left', E27} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ImpossibleClause', V56, V63}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19523-10444--in--un--matchAny'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V6, V7, V8) -> {'Idris.Core.TT.App', V6, ('nested--19523-10444--in--un--matchAny'(V0, V1, V2, V3, V4, V7)), {'Idris.Core.TT.Erased', V6, 0}} end(E0, E1, E2)); _ -> V5 end.
'nested--19523-10445--in--un--makeErrorClause'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Core.Context.MkClause', V5, V6, ('nested--19523-10444--in--un--matchAny'(V0, V1, V2, V3, V4, V7)), ('nested--19523-10443--in--un--mkCrash'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unhandled input for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V1))))))))))}.
'nested--12633-4668--in--un--lookupAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V8)) of 1 -> [V9 | ('nested--12633-4668--in--un--lookupAll'(V0, V1, V2, V3, V4, V7))]; 0 -> ('nested--12633-4668--in--un--lookupAll'(V0, V1, V2, V3, V4, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13692-6476--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Builtin.DPair.MkDPair', V18, {'Idris.Core.TT.SubRefl'}} end()); _ -> case V20 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Builtin.DPair.MkDPair', V18, {'Idris.Core.TT.SubRefl'}} end()); _ -> case V18 of [E0 | E1] -> (fun (V21, V22) -> case V19 of {'Idris.Core.TT.DropCons', E2} -> (fun (V23) -> case V20 of {'Idris.Core.TT.DropCons', E3} -> (fun (V24) -> case ('nested--13692-6476--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V23, V24)) of {'Idris.Builtin.DPair.MkDPair', E4, E5} -> (fun (V25, V26) -> {'Idris.Builtin.DPair.MkDPair', V25, {'Idris.Core.TT.DropCons', V26}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Core.TT.KeepCons', E6} -> (fun (V27) -> case ('nested--13692-6476--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V23, V27)) of {'Idris.Builtin.DPair.MkDPair', E7, E8} -> (fun (V28, V29) -> {'Idris.Builtin.DPair.MkDPair', [V21 | V28], {'Idris.Core.TT.KeepCons', V29}} end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Core.TT.KeepCons', E9} -> (fun (V30) -> case V20 of {'Idris.Core.TT.DropCons', E10} -> (fun (V31) -> case ('nested--13692-6476--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V30, V31)) of {'Idris.Builtin.DPair.MkDPair', E11, E12} -> (fun (V32, V33) -> {'Idris.Builtin.DPair.MkDPair', [V21 | V32], {'Idris.Core.TT.KeepCons', V33}} end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Core.TT.KeepCons', E13} -> (fun (V34) -> case ('nested--13692-6476--in--un--keepOldEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V22, V30, V34)) of {'Idris.Builtin.DPair.MkDPair', E14, E15} -> (fun (V35, V36) -> {'Idris.Builtin.DPair.MkDPair', [V21 | V35], {'Idris.Core.TT.KeepCons', V36}} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--19523-10447--in--un--getSpec'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.PartialEval', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Just', V8} end(E2)); _ -> ('nested--19523-10447--in--un--getSpec'(V0, V1, V2, V3, V4, V7)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--20548-11353--in--un--getClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V13) -> begin (V14 = ('Idris.Idris2.TTImp.Impossible':'un--getImpossibleTerm'(V0, V9, V4, V5, V12, V13))), case V14 of {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated impossible LHS: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V16)))) end, V13))), case V17 of {'Idris.Prelude.Types.Left', E3} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Context.MkClause', [], {'Idris.Core.Env.Nil'}, V16, {'Idris.Core.TT.Erased', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V12)), 1}}}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V20) -> fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error in getClause "/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V20)))) end, V21))), case V22 of {'Idris.Prelude.Types.Left', E5} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V11)) end(E0)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V25}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E47 | E48] -> (fun (V10, V11) -> case V10 of {'Idris.Core.TT.As', E96, E97, E98, E99} -> (fun (V12, V13, V14, V15) -> case V13 of 0 -> ('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V15 | V11])); 1 -> ('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V14 | V11])); _ -> case V8 of {'Idris.Core.Value.NBind', E106, E107, E108, E109} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Pi', E116, E117, E118, E119} -> (fun (V20, V21, V22, V23) -> fun (V24) -> case V9 of [E126 | E127] -> (fun (V25, V26) -> case V25 of {'Idris.Core.TT.Local', E136, E137, E138} -> (fun (V27, V28, V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E139} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V29))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V29, V3)) of 1 -> begin (V35 = (((V19(V33))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V27, {'Idris.Core.TT.Bound'}, V17}))))(V24))), case V35 of {'Idris.Prelude.Types.Left', E141} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V37) -> begin (V38 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V37, V26))(V24))), case V38 of {'Idris.Prelude.Types.Left', E143} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V40) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V34, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V21, V7))} | V40]} end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V41 = (((V19(V33))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V27, {'Idris.Core.TT.Bound'}, V17}))))(V24))), case V41 of {'Idris.Prelude.Types.Left', E145} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V43) -> (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V43, V26))(V24)) end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E136, E137, E138)); _ -> begin (V45 = begin (V44 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E128} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V47) -> begin (V48 = (('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V21, V7)), V25))(V24))), case V48 of {'Idris.Prelude.Types.Left', E130} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V50) -> begin (V51 = (((V19(V47))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V17}))))(V24))), case V51 of {'Idris.Prelude.Types.Left', E132} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V53) -> begin (V54 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V53, V26))(V24))), case V54 of {'Idris.Prelude.Types.Left', E134} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V56) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V50, V56))} end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126, E127)); _ -> case V9 of [E120 | E121] -> (fun (V57, V58) -> begin (V59 = (('un--findLinear'(V6, V5, 0, V3, V7, V57))(V24))), case V59 of {'Idris.Prelude.Types.Left', E122} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V61) -> begin (V62 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V58))(V24))), case V62 of {'Idris.Prelude.Types.Left', E124} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V64) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V61, V64))} end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120, E121)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E116, E117, E118, E119)); _ -> fun (V65) -> case V9 of [E110 | E111] -> (fun (V66, V67) -> begin (V68 = (('un--findLinear'(V6, V5, 0, V3, V7, V66))(V65))), case V68 of {'Idris.Prelude.Types.Left', E112} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V70) -> begin (V71 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V67))(V65))), case V71 of {'Idris.Prelude.Types.Left', E114} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V73) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V70, V73))} end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110, E111)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E106, E107, E108, E109)); _ -> fun (V74) -> case V9 of [E100 | E101] -> (fun (V75, V76) -> begin (V77 = (('un--findLinear'(V6, V5, 0, V3, V7, V75))(V74))), case V77 of {'Idris.Prelude.Types.Left', E102} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V79) -> begin (V80 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V76))(V74))), case V80 of {'Idris.Prelude.Types.Left', E104} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V82) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V79, V82))} end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100, E101)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E96, E97, E98, E99)); _ -> case V8 of {'Idris.Core.Value.NBind', E55, E56, E57, E58} -> (fun (V83, V84, V85, V86) -> case V85 of {'Idris.Core.TT.Pi', E65, E66, E67, E68} -> (fun (V87, V88, V89, V90) -> fun (V91) -> case V9 of [E75 | E76] -> (fun (V92, V93) -> case V92 of {'Idris.Core.TT.Local', E85, E86, E87} -> (fun (V94, V95, V96) -> begin (V98 = begin (V97 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E88} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V100) -> begin (V101 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V96))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V96, V3)) of 1 -> begin (V102 = (((V86(V100))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V94, {'Idris.Core.TT.Bound'}, V84}))))(V91))), case V102 of {'Idris.Prelude.Types.Left', E90} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V104) -> begin (V105 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V104, V93))(V91))), case V105 of {'Idris.Prelude.Types.Left', E92} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V107) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V101, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V88, V7))} | V107]} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V108 = (((V86(V100))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V94, {'Idris.Core.TT.Bound'}, V84}))))(V91))), case V108 of {'Idris.Prelude.Types.Left', E94} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V110) -> (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V110, V93))(V91)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85, E86, E87)); _ -> begin (V112 = begin (V111 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V111} end), case V112 of {'Idris.Prelude.Types.Left', E77} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V114) -> begin (V115 = (('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V88, V7)), V92))(V91))), case V115 of {'Idris.Prelude.Types.Left', E79} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V117) -> begin (V118 = (((V86(V114))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V83, {'Idris.Core.TT.Bound'}, V84}))))(V91))), case V118 of {'Idris.Prelude.Types.Left', E81} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V120) -> begin (V121 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V120, V93))(V91))), case V121 of {'Idris.Prelude.Types.Left', E83} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V123) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V117, V123))} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75, E76)); _ -> case V9 of [E69 | E70] -> (fun (V124, V125) -> begin (V126 = (('un--findLinear'(V6, V5, 0, V3, V7, V124))(V91))), case V126 of {'Idris.Prelude.Types.Left', E71} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V128) -> begin (V129 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V125))(V91))), case V129 of {'Idris.Prelude.Types.Left', E73} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V131) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V128, V131))} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69, E70)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E65, E66, E67, E68)); _ -> fun (V132) -> case V9 of [E59 | E60] -> (fun (V133, V134) -> begin (V135 = (('un--findLinear'(V6, V5, 0, V3, V7, V133))(V132))), case V135 of {'Idris.Prelude.Types.Left', E61} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V137) -> begin (V138 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V134))(V132))), case V138 of {'Idris.Prelude.Types.Left', E63} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V140) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V137, V140))} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59, E60)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E55, E56, E57, E58)); _ -> fun (V141) -> case V9 of [E49 | E50] -> (fun (V142, V143) -> begin (V144 = (('un--findLinear'(V6, V5, 0, V3, V7, V142))(V141))), case V144 of {'Idris.Prelude.Types.Left', E51} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V146) -> begin (V147 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V143))(V141))), case V147 of {'Idris.Prelude.Types.Left', E53} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V149) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V146, V149))} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E47, E48)); _ -> case V8 of {'Idris.Core.Value.NBind', E6, E7, E8, E9} -> (fun (V150, V151, V152, V153) -> case V152 of {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V154, V155, V156, V157) -> fun (V158) -> case V9 of [E26 | E27] -> (fun (V159, V160) -> case V159 of {'Idris.Core.TT.Local', E36, E37, E38} -> (fun (V161, V162, V163) -> begin (V165 = begin (V164 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V164} end), case V165 of {'Idris.Prelude.Types.Left', E39} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V167) -> begin (V168 = ('Idris.Idris2.Core.TT':'un--nameAt'(V6, V163))), case ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(V163, V3)) of 1 -> begin (V169 = (((V153(V167))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V161, {'Idris.Core.TT.Bound'}, V151}))))(V158))), case V169 of {'Idris.Prelude.Types.Left', E41} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V171) -> begin (V172 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V171, V160))(V158))), case V172 of {'Idris.Prelude.Types.Left', E43} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V174) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V168, ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V155, V7))} | V174]} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V175 = (((V153(V167))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V161, {'Idris.Core.TT.Bound'}, V151}))))(V158))), case V175 of {'Idris.Prelude.Types.Left', E45} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V177) -> (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V177, V160))(V158)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38)); _ -> begin (V179 = begin (V178 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V178} end), case V179 of {'Idris.Prelude.Types.Left', E28} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V181) -> begin (V182 = (('un--findLinear'(V6, V5, 0, V3, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V155, V7)), V159))(V158))), case V182 of {'Idris.Prelude.Types.Left', E30} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V184) -> begin (V185 = (((V153(V181))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V150, {'Idris.Core.TT.Bound'}, V151}))))(V158))), case V185 of {'Idris.Prelude.Types.Left', E32} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V187) -> begin (V188 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V187, V160))(V158))), case V188 of {'Idris.Prelude.Types.Left', E34} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V190) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V184, V190))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26, E27)); _ -> case V9 of [E20 | E21] -> (fun (V191, V192) -> begin (V193 = (('un--findLinear'(V6, V5, 0, V3, V7, V191))(V158))), case V193 of {'Idris.Prelude.Types.Left', E22} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V195) -> begin (V196 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V192))(V158))), case V196 of {'Idris.Prelude.Types.Left', E24} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V198) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V195, V198))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19)); _ -> fun (V199) -> case V9 of [E10 | E11] -> (fun (V200, V201) -> begin (V202 = (('un--findLinear'(V6, V5, 0, V3, V7, V200))(V199))), case V202 of {'Idris.Prelude.Types.Left', E12} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V204) -> begin (V205 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V201))(V199))), case V205 of {'Idris.Prelude.Types.Left', E14} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V207) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V204, V207))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8, E9)); _ -> fun (V208) -> case V9 of [E0 | E1] -> (fun (V209, V210) -> begin (V211 = (('un--findLinear'(V6, V5, 0, V3, V7, V209))(V208))), case V211 of {'Idris.Prelude.Types.Left', E2} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V213) -> begin (V214 = (('nested--11908-4038--in--un--findLinArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V210))(V208))), case V214 of {'Idris.Prelude.Types.Left', E4} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V216) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V213, V216))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--18904-9920--in--un--dropErased'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> {'Idris.Prelude.Types.Right', V5}; [E0 | E1] -> (fun (V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V12 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V13 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V41 of {'Idris.Prelude.Types.Left', E32} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E34} -> (fun (V44) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V44 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V52 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V66) -> fun (V67) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V66, V67)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V68) -> fun (V69) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V68, V69)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))) of 1 -> ('nested--18904-9920--in--un--dropErased'(V0, V1, V2, V3, V8, V5, V6)); 0 -> ('nested--18904-9920--in--un--dropErased'(V0, V1, V2, V3, V8, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V7, V5)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--18904-9920--in--un--dropErased'(V0, V1, V2, V3, V8, V5, V6)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12633-4670--in--un--combineAll'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Idris.Prelude.Types.Right', V4}; [E0 | E1] -> (fun (V7, V8) -> begin (V9 = ('nested--12633-4669--in--un--combine'(V0, V1, V2, V3, V4, V7, V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> ('nested--12633-4670--in--un--combineAll'(V0, V1, V2, V3, V11, V8, V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12633-4669--in--un--combine'(V0, V1, V2, V3, V4, V5, V6) -> case case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V13, V14)) end end}}, ('Idris.Idris2.Algebra.Preorder':'un--glb'({'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V15, V16)) end end, fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V17)) end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V18, V19, V20, V21, V22)) end end end end end}, V4, V5)))) of 1 -> 0; 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Algebra.Preorder':'un--glb'({'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V23, V24)) end end, fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V25)) end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V26, V27, V28, V29, V30)) end end end end end}, V4, V5)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.LinearUsed', V3, (1 + (1 + 0)), V0}, V6)); 0 -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.Preorder':'un--lub'({'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V31, V32)) end end, fun (V33) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V33)) end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V34, V35, V36, V37, V38)) end end end end end}, V4, V5))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--20572-11444--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V20, V21, V22, V23) -> begin (V24 = (((V19(V13))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Ref', V3, {'Idris.Core.TT.Bound'}, V17}))))(V15))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> ('nested--20572-11444--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V26, V15)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V9, [], V13, {'Idris.Core.Env.Nil'}, V14, V15)) end end(E0, E1, E2, E3)); _ -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V9, [], V13, {'Idris.Core.Env.Nil'}, V14, V15)) end.
'nested--20548-11352--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'([], V9, {'Idris.Core.Env.Nil'}, V12, V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V9, V7, fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking for impossibility: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V16)))) end, V17))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V9, V17))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V9, 1, V17))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V9, 0, V16, V17))), case V31 of {'Idris.Prelude.Types.Left', E10} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V34, V35) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V9, V27, V17))), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V39 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V9, V8, V7, V10, {'Idris.TTImp.Elab.Check.InLHS', V11}, [], [], {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IBindHere', V3, {'Idris.TTImp.TTImp.PATTERN'}, V35}, {'Idris.Prelude.Types.Nothing'}))(V17))), case V39 of {'Idris.Prelude.Types.Left', E16} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V42, V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E20} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V9, [], V47, {'Idris.Core.Env.Nil'}, V42, V17))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> begin (V51 = ('un--hasEmptyPat'([], V9, V47, {'Idris.Core.Env.Nil'}, V50, V17))), case V51 of {'Idris.Prelude.Types.Left', E24} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V53) -> case V53 of 1 -> begin (V54 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"No empty pat"/utf8>> end, V17))), case V54 of {'Idris.Prelude.Types.Left', E26} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V56) -> begin (V58 = begin (V57 = ('erlang':'put'(V9, V21))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E28} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V61 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Some empty pat"/utf8>> end, V17))), case V61 of {'Idris.Prelude.Types.Left', E30} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V21, V17))), case V64 of {'Idris.Prelude.Types.Left', E32} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V66) -> begin (V70 = begin (V67 = (('Idris.Idris2.Core.Normalise':'un--nf'(V9, [], V66, {'Idris.Core.Env.Nil'}, V50))(V17))), case V67 of {'Idris.Prelude.Types.Left', E34} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V69) -> ('nested--20572-11444--in--un--closeEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12, V11, V10, V66, V69, V17)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V70 of {'Idris.Prelude.Types.Left', E36} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V72) -> begin (V74 = begin (V73 = ('erlang':'put'(V9, V21))), {'Idris.Prelude.Types.Right', V73} end), case V74 of {'Idris.Prelude.Types.Left', E38} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V72}} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V77) -> fun (V78) -> begin (V80 = begin (V79 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V79} end), case V80 of {'Idris.Prelude.Types.Left', E40} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V82) -> begin (V83 = (('un--recoverableErr'(V9, V82, V77))(V78))), case V83 of {'Idris.Prelude.Types.Left', E42} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V85) -> case V85 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V12}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V13)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--20548-11354--in--un--checkCoverage'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V17 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V15) -> fun (V16) -> ('nested--20548-11353--in--un--getClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V15, V16)) end end, V13, [], V14))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V47 = begin (V40 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V28, V29, V30)) end end end}, V22, V23, V24)) end end end, fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Clause'(V34, V35, V36)) end end end, fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Clause'(V37, V38, V39)) end end end}, V31, V32, V33)) end end end}, V20, V21)) end end, V19, [], V14))), case V40 of {'Idris.Prelude.Types.Left', E2} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V42) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"Using clauses :"/utf8>> | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V43) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V44) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Clause'(V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Clause'(V45, V46)) end end}, V43)))) end, V42))])) end, V14)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V47 of {'Idris.Prelude.Types.Left', E4} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V49) -> begin (V51 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V50) -> V50 end, V19))), begin (V52 = ('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V9, V3, {'Idris.Core.CaseBuilder.CompileTime', V12}, {'Idris.Core.Name.Resolved', V10}, V11, V51, V14))), case V52 of {'Idris.Prelude.Types.Left', E6} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V54) -> case V54 of {'Idris.Builtin.DPair.MkDPair', E8, E9} -> (fun (V55, V56) -> case V56 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V57, V58) -> begin (V68 = begin (V65 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V59, V60, V61)) end end end, fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V62, V63, V64)) end end end}, V57, V14))), case V65 of {'Idris.Prelude.Types.Left', E12} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V67) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Working from "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V55, V67)))) end, V14)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V68 of {'Idris.Prelude.Types.Left', E14} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V70) -> begin (V101 = case ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V73, V74, V75)) end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V78, V79, V80)) end end end end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V82)) end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V86, V87, V88, V89)) end end end end end end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V91)) end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V94, V95, V96)) end end end end end}, fun (V97) -> ('nested--20548-11351--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V97)) end, V51)) of 1 -> begin (V98 = ('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Catch all case in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V10)))) end, V14))), case V98 of {'Idris.Prelude.Types.Left', E16} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V100) -> {'Idris.Prelude.Types.Right', []} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Coverage':'un--getMissing'(V55, V9, V3, {'Idris.Core.Name.Resolved', V10}, V57, V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V101 of {'Idris.Prelude.Types.Left', E18} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V103) -> begin (V120 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V9, <<"declare.def"/utf8>>, (1 + (1 + (1 + 0))), fun (V104) -> begin (V113 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V107, V108, V109)) end end end, fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V110, V111, V112)) end end end}, V105, V106)) end end, V103, [], V104))), case V113 of {'Idris.Prelude.Types.Left', E20} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V115) -> begin (V116 = ('Idris.Idris2.Core.Context':'un--getFullName'(V9, {'Idris.Core.Name.Resolved', V10}, V104))), case V116 of {'Idris.Prelude.Types.Left', E22} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V118) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Initially missing in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V118)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V119) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V119)) end, V115))))))))))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V14))), case V120 of {'Idris.Prelude.Types.Left', E24} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V122) -> begin (V125 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V123) -> fun (V124) -> ('nested--20548-11352--in--un--checkImpossible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V123, V124)) end end, V103, [], V14))), case V125 of {'Idris.Prelude.Types.Left', E26} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V127) -> begin (V131 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Coverage':'un--checkMatched'(V9, V51, V128, V129)) end end, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V130) -> V130 end, V127)), [], V14))), case V131 of {'Idris.Prelude.Types.Left', E28} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V133) -> begin (V135 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V134) -> V134 end, V133))), case ('Idris.Idris2.Data.List':'un--isNil'(V135)) of 1 -> begin (V136 = ('Idris.Idris2.Core.Coverage':'un--getNonCoveringRefs'(V9, V3, {'Idris.Core.Name.Resolved', V10}, V14))), case V136 of {'Idris.Prelude.Types.Left', E30} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V138) -> case V138 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}}; _ -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Covering'(V139, V140, V141)) end end end, fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Covering'(V142, V143, V144)) end end end}, {'Idris.Core.TT.NonCoveringCall', V138}, V14)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V135}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--20548-11351--in--un--catchAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Interfaces':'un--all'({'Idris.Prelude.Interfaces.MkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V30, V31, V32, V33)) end end end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V35)) end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V38, V39, V40)) end end end end end}, fun (V41) -> ('nested--20548-11350--in--un--simplePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V41)) end, ('Idris.Idris2.Core.TT':'un--getArgs'(V13)))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19523-10442--in--un--caseName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Name.CaseBlock', E0, E1} -> (fun (V6, V7) -> 1 end(E0, E1)); {'Idris.Core.Name.NS', E2, E3} -> (fun (V8, V9) -> ('nested--19523-10442--in--un--caseName'(V0, V1, V2, V3, V4, V9)) end(E2, E3)); _ -> 0 end.
'nested--13692-6475--in--un--bindWithArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V21 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V18}, V20}), begin (V22 = {'Idris.Core.TT.Local', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), {'Idris.Prelude.Types.Just', 0}, 0}), begin (V24 = fun (V23) -> {'Idris.Core.TT.Bind', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('nested--14753-6493--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V18)), {'Idris.Core.TT.Pi', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V18}, V23} end), fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', ('nested--14753-6494--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V18)), {'Idris.Builtin.MkPair', V21, {'Idris.Builtin.MkPair', V22, V24}}}} end end end end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> fun (V27) -> case V26 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V28, V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V33) -> begin (V34 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"Equal"/utf8>>}}), begin (V63 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V34, case V33 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V35 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V27))), case V63 of {'Idris.Prelude.Types.Left', E33} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V65) -> case V65 of {'Idris.Prelude.Types.Just', E35} -> (fun (V66) -> case V66 of {'Idris.Core.Context.TCon', E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74) -> begin (V81 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V17, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V75, V76, V77)) end end end, fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V78, V79, V80)) end end end}, V34, V27))), case V81 of {'Idris.Prelude.Types.Left', E44} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V83) -> begin (V84 = {'Idris.Core.TT.Ref', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), {'Idris.Core.TT.TyCon', V67, V68}, V83}), begin (V85 = ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V18))), begin (V86 = ('Idris.Idris2.Core.TT':'un--apply'(('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V84, [V85 | [V85 | [('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V29)) | [{'Idris.Core.TT.Local', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), {'Idris.Prelude.Types.Just', 0}, 0} | []]]]]))), begin (V87 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Implicit'}, V86}, {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V18}, V20}}), begin (V88 = {'Idris.Core.TT.Local', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), {'Idris.Prelude.Types.Just', 0}, (1 + 0)}), begin (V90 = fun (V89) -> {'Idris.Core.TT.Bind', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('nested--14852-6654--in--un--wargn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V28, V29, V20, V18, V33, V34, V69, V70, V71, V72, V73, V74, V68, V67, V65, V83, V84)), {'Idris.Core.TT.Pi', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V18}, {'Idris.Core.TT.Bind', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), V28, {'Idris.Core.TT.Pi', ('nested--13692-6474--in--un--vfc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17)), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Implicit'}, V86}, V89}} end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', ('nested--14852-6655--in--un--wargs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V28, V29, V20, V18, V33, V34, V69, V70, V71, V72, V73, V74, V68, V67, V65, V83, V84)), {'Idris.Builtin.MkPair', V87, {'Idris.Builtin.MkPair', V88, V90}}}} end end end end end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V27)) end end(E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Cannot find builtin Equal"/utf8>>}, V27)) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19523-10446--in--un--addErrorCase'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> []; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.MkClause', E2, E3, E4, E5} -> (fun (V8, V9, V10, V11) -> case V7 of [] -> [{'Idris.Core.Context.MkClause', V8, V9, V10, V11} | [('nested--19523-10445--in--un--makeErrorClause'(V0, V1, V2, V3, V4, V8, V9, V10)) | []]]; _ -> [V6 | ('nested--19523-10446--in--un--addErrorCase'(V0, V1, V2, V3, V4, V7))] end end(E2, E3, E4, E5)); _ -> [V6 | ('nested--19523-10446--in--un--addErrorCase'(V0, V1, V2, V3, V4, V7))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11908-4037--in--un--accessible'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Func'} -> (fun () -> case V4 of 1 -> V7; 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> V7 end.
'un--warnUnreachable'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Core.Context':'un--recordWarning'(V0, {'Idris.Core.Core.UnreachableClause', V3, ('Idris.Idris2.Core.TT':'un--getLoc'(V5)), V4, V5}, V2)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPats'(V0) -> case V0 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Builtin.DPair.MkDPair', V1, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V3, V4}}} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setLinear'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> begin (V10 = {'Idris.Core.TT.PVar', V6, V7, V8, V9}), case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V3, V0)) of {'Idris.Prelude.Types.Just', E8} -> (fun (V15) -> {'Idris.Core.TT.Bind', V2, V3, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V10, V15)), ('un--setLinear'(V0, V5))} end(E8)); _ -> {'Idris.Core.TT.Bind', V2, V3, V10, ('un--setLinear'(V0, V5))} end end end(E4, E5, E6, E7)); {'Idris.Core.TT.PVTy', E9, E10, E11} -> (fun (V16, V17, V18) -> begin (V19 = {'Idris.Core.TT.PVTy', V16, V17, V18}), case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V22, V23)) end end}, V3, V0)) of {'Idris.Prelude.Types.Just', E12} -> (fun (V24) -> {'Idris.Core.TT.Bind', V2, V3, ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V19, V24)), ('un--setLinear'(V0, V5))} end(E12)); _ -> {'Idris.Core.TT.Bind', V2, V3, V19, ('un--setLinear'(V0, V5))} end end end(E9, E10, E11)); _ -> V1 end end(E0, E1, E2, E3)); _ -> V1 end.
'un--recoverableErr'(V0, V1, V2) -> case V2 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V3, V1, V5, V6))(V8))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V3, V1, V5, V7))(V8))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"coverage.recover"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"Recovering from CantConvert?"/utf8>> | [<<"Checking:"/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V11)))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V3, V14)))) | []]]]])) end, V8))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> (('un--recoverable'(V0, V3, V1, V11, V14))(V8)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Core.CantSolveEq', E11, E12, E13, E14, E15} -> (fun (V18, V19, V20, V21, V22) -> fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V18, V1, V20, V21))(V23))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V18, V1, V20, V22))(V23))), case V27 of {'Idris.Prelude.Types.Left', E18} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V29) -> (('un--recoverable'(V0, V18, V1, V26, V29))(V23)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14, E15)); {'Idris.Core.Core.BadDotPattern', E20, E21, E22, E23, E24, E25} -> (fun (V30, V31, V32, V33, V34, V35) -> fun (V36) -> case V33 of 3 -> {'Idris.Prelude.Types.Right', 1}; _ -> {'Idris.Prelude.Types.Right', 0} end end end(E20, E21, E22, E23, E24, E25)); {'Idris.Core.Core.CyclicMeta', E26, E27, E28, E29, E30} -> (fun (V37, V38, V39, V40, V41) -> fun (V42) -> {'Idris.Prelude.Types.Right', 1} end end(E26, E27, E28, E29, E30)); {'Idris.Core.Core.AllFailed', E31} -> (fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V45) -> ('un--recoverableErr'(V0, V1, V45)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> ('Idris.Idris2.Builtin':'un--snd'(V46)) end, V43)), V44)) end end(E31)); {'Idris.Core.Core.WhenUnifying', E32, E33, E34, E35, E36, E37} -> (fun (V47, V48, V49, V50, V51, V52) -> ('un--recoverableErr'(V0, V1, V52)) end(E32, E33, E34, E35, E36, E37)); _ -> fun (V53) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--recoverable'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E70, E71, E72, E73, E74} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NTCon', E75, E76, E77, E78, E79} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V12)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V45 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> fun (V17) -> ('un--mismatch'(V0, V1, V2, V16, V17)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E80, E81} -> (fun (V28, V29) -> {'Idris.Builtin.MkPair', (V25(V28)), (V26(V29))} end(E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E82, E83} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', (V33(V35)), V36} end(E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E84, E85} -> (fun (V42, V43) -> {'Idris.Builtin.MkPair', V42, (V40(V43))} end(E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end, V20)) end, V18, V19)) end end, V9, V15)), V10))), case V45 of {'Idris.Prelude.Types.Left', E86} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V47) -> {'Idris.Prelude.Types.Right', case V47 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E75, E76, E77, E78, E79)); {'Idris.Core.Value.NPrimVal', E88, E89} -> (fun (V48, V49) -> {'Idris.Prelude.Types.Right', 0} end(E88, E89)); {'Idris.Core.Value.NType', E90} -> (fun (V50) -> {'Idris.Prelude.Types.Right', 0} end(E90)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E70, E71, E72, E73, E74)); {'Idris.Core.Value.NPrimVal', E91, E92} -> (fun (V51, V52) -> case V4 of {'Idris.Core.Value.NTCon', E163, E164, E165, E166, E167} -> (fun (V53, V54, V55, V56, V57) -> fun (V58) -> {'Idris.Prelude.Types.Right', 0} end end(E163, E164, E165, E166, E167)); _ -> case V4 of {'Idris.Core.Value.NTCon', E158, E159, E160, E161, E162} -> (fun (V59, V60, V61, V62, V63) -> fun (V64) -> {'Idris.Prelude.Types.Right', 1} end end(E158, E159, E160, E161, E162)); _ -> case V3 of {'Idris.Core.Value.NDCon', E112, E113, E114, E115, E116} -> (fun (V65, V66, V67, V68, V69) -> fun (V70) -> case V4 of {'Idris.Core.Value.NDCon', E117, E118, E119, E120, E121} -> (fun (V71, V72, V73, V74, V75) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V67, V73)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V105 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V76) -> fun (V77) -> ('un--mismatch'(V0, V1, V2, V76, V77)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V80) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> case V87 of {'Idris.Builtin.MkPair', E122, E123} -> (fun (V88, V89) -> {'Idris.Builtin.MkPair', (V85(V88)), (V86(V89))} end(E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> case V94 of {'Idris.Builtin.MkPair', E124, E125} -> (fun (V95, V96) -> {'Idris.Builtin.MkPair', (V93(V95)), V96} end(E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> case V101 of {'Idris.Builtin.MkPair', E126, E127} -> (fun (V102, V103) -> {'Idris.Builtin.MkPair', V102, (V100(V103))} end(E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V104) -> ('Idris.Idris2.Builtin':'un--snd'(V104)) end, V80)) end, V78, V79)) end end, V69, V75)), V70))), case V105 of {'Idris.Prelude.Types.Left', E128} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V107) -> {'Idris.Prelude.Types.Right', case V107 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E117, E118, E119, E120, E121)); {'Idris.Core.Value.NPrimVal', E130, E131} -> (fun (V108, V109) -> {'Idris.Prelude.Types.Right', 0} end(E130, E131)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E112, E113, E114, E115, E116)); {'Idris.Core.Value.NPrimVal', E132, E133} -> (fun (V110, V111) -> case V4 of {'Idris.Core.Value.NDCon', E153, E154, E155, E156, E157} -> (fun (V112, V113, V114, V115, V116) -> fun (V117) -> {'Idris.Prelude.Types.Right', 0} end end(E153, E154, E155, E156, E157)); _ -> case V4 of {'Idris.Core.Value.NDCon', E148, E149, E150, E151, E152} -> (fun (V118, V119, V120, V121, V122) -> fun (V123) -> {'Idris.Prelude.Types.Right', 1} end end(E148, E149, E150, E151, E152)); _ -> case V3 of {'Idris.Core.Value.NApp', E134, E135, E136} -> (fun (V124, V125, V126) -> case V125 of {'Idris.Core.Value.NRef', E137, E138} -> (fun (V127, V128) -> fun (V129) -> case V4 of {'Idris.Core.Value.NApp', E139, E140, E141} -> (fun (V130, V131, V132) -> case V131 of {'Idris.Core.Value.NRef', E142, E143} -> (fun (V133, V134) -> {'Idris.Prelude.Types.Right', 1} end(E142, E143)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E139, E140, E141)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E137, E138)); _ -> fun (V135) -> {'Idris.Prelude.Types.Right', 0} end end end(E134, E135, E136)); {'Idris.Core.Value.NPrimVal', E144, E145} -> (fun (V136, V137) -> fun (V138) -> case V4 of {'Idris.Core.Value.NPrimVal', E146, E147} -> (fun (V139, V140) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V137, V140))} end(E146, E147)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E144, E145)); _ -> fun (V141) -> {'Idris.Prelude.Types.Right', 0} end end end end end(E132, E133)); _ -> case V4 of {'Idris.Core.Value.NDCon', E107, E108, E109, E110, E111} -> (fun (V142, V143, V144, V145, V146) -> fun (V147) -> {'Idris.Prelude.Types.Right', 1} end end(E107, E108, E109, E110, E111)); _ -> case V3 of {'Idris.Core.Value.NApp', E93, E94, E95} -> (fun (V148, V149, V150) -> case V149 of {'Idris.Core.Value.NRef', E96, E97} -> (fun (V151, V152) -> fun (V153) -> case V4 of {'Idris.Core.Value.NApp', E98, E99, E100} -> (fun (V154, V155, V156) -> case V155 of {'Idris.Core.Value.NRef', E101, E102} -> (fun (V157, V158) -> {'Idris.Prelude.Types.Right', 1} end(E101, E102)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E98, E99, E100)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E96, E97)); _ -> fun (V159) -> {'Idris.Prelude.Types.Right', 0} end end end(E93, E94, E95)); {'Idris.Core.Value.NPrimVal', E103, E104} -> (fun (V160, V161) -> fun (V162) -> case V4 of {'Idris.Core.Value.NPrimVal', E105, E106} -> (fun (V163, V164) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V161, V164))} end(E105, E106)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E103, E104)); _ -> fun (V165) -> {'Idris.Prelude.Types.Right', 0} end end end end end end end(E91, E92)); {'Idris.Core.Value.NType', E168} -> (fun (V166) -> case V4 of {'Idris.Core.Value.NTCon', E239, E240, E241, E242, E243} -> (fun (V167, V168, V169, V170, V171) -> fun (V172) -> {'Idris.Prelude.Types.Right', 0} end end(E239, E240, E241, E242, E243)); _ -> case V4 of {'Idris.Core.Value.NTCon', E234, E235, E236, E237, E238} -> (fun (V173, V174, V175, V176, V177) -> fun (V178) -> {'Idris.Prelude.Types.Right', 1} end end(E234, E235, E236, E237, E238)); _ -> case V3 of {'Idris.Core.Value.NDCon', E188, E189, E190, E191, E192} -> (fun (V179, V180, V181, V182, V183) -> fun (V184) -> case V4 of {'Idris.Core.Value.NDCon', E193, E194, E195, E196, E197} -> (fun (V185, V186, V187, V188, V189) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V181, V187)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V219 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V190) -> fun (V191) -> ('un--mismatch'(V0, V1, V2, V190, V191)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V194) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> case V201 of {'Idris.Builtin.MkPair', E198, E199} -> (fun (V202, V203) -> {'Idris.Builtin.MkPair', (V199(V202)), (V200(V203))} end(E198, E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> case V208 of {'Idris.Builtin.MkPair', E200, E201} -> (fun (V209, V210) -> {'Idris.Builtin.MkPair', (V207(V209)), V210} end(E200, E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> case V215 of {'Idris.Builtin.MkPair', E202, E203} -> (fun (V216, V217) -> {'Idris.Builtin.MkPair', V216, (V214(V217))} end(E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V218) -> ('Idris.Idris2.Builtin':'un--snd'(V218)) end, V194)) end, V192, V193)) end end, V183, V189)), V184))), case V219 of {'Idris.Prelude.Types.Left', E204} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V221) -> {'Idris.Prelude.Types.Right', case V221 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E193, E194, E195, E196, E197)); {'Idris.Core.Value.NPrimVal', E206, E207} -> (fun (V222, V223) -> {'Idris.Prelude.Types.Right', 0} end(E206, E207)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E188, E189, E190, E191, E192)); {'Idris.Core.Value.NPrimVal', E208, E209} -> (fun (V224, V225) -> case V4 of {'Idris.Core.Value.NDCon', E229, E230, E231, E232, E233} -> (fun (V226, V227, V228, V229, V230) -> fun (V231) -> {'Idris.Prelude.Types.Right', 0} end end(E229, E230, E231, E232, E233)); _ -> case V4 of {'Idris.Core.Value.NDCon', E224, E225, E226, E227, E228} -> (fun (V232, V233, V234, V235, V236) -> fun (V237) -> {'Idris.Prelude.Types.Right', 1} end end(E224, E225, E226, E227, E228)); _ -> case V3 of {'Idris.Core.Value.NApp', E210, E211, E212} -> (fun (V238, V239, V240) -> case V239 of {'Idris.Core.Value.NRef', E213, E214} -> (fun (V241, V242) -> fun (V243) -> case V4 of {'Idris.Core.Value.NApp', E215, E216, E217} -> (fun (V244, V245, V246) -> case V245 of {'Idris.Core.Value.NRef', E218, E219} -> (fun (V247, V248) -> {'Idris.Prelude.Types.Right', 1} end(E218, E219)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E215, E216, E217)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E213, E214)); _ -> fun (V249) -> {'Idris.Prelude.Types.Right', 0} end end end(E210, E211, E212)); {'Idris.Core.Value.NPrimVal', E220, E221} -> (fun (V250, V251) -> fun (V252) -> case V4 of {'Idris.Core.Value.NPrimVal', E222, E223} -> (fun (V253, V254) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V251, V254))} end(E222, E223)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E220, E221)); _ -> fun (V255) -> {'Idris.Prelude.Types.Right', 0} end end end end end(E208, E209)); _ -> case V4 of {'Idris.Core.Value.NDCon', E183, E184, E185, E186, E187} -> (fun (V256, V257, V258, V259, V260) -> fun (V261) -> {'Idris.Prelude.Types.Right', 1} end end(E183, E184, E185, E186, E187)); _ -> case V3 of {'Idris.Core.Value.NApp', E169, E170, E171} -> (fun (V262, V263, V264) -> case V263 of {'Idris.Core.Value.NRef', E172, E173} -> (fun (V265, V266) -> fun (V267) -> case V4 of {'Idris.Core.Value.NApp', E174, E175, E176} -> (fun (V268, V269, V270) -> case V269 of {'Idris.Core.Value.NRef', E177, E178} -> (fun (V271, V272) -> {'Idris.Prelude.Types.Right', 1} end(E177, E178)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E174, E175, E176)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E172, E173)); _ -> fun (V273) -> {'Idris.Prelude.Types.Right', 0} end end end(E169, E170, E171)); {'Idris.Core.Value.NPrimVal', E179, E180} -> (fun (V274, V275) -> fun (V276) -> case V4 of {'Idris.Core.Value.NPrimVal', E181, E182} -> (fun (V277, V278) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V275, V278))} end(E181, E182)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E179, E180)); _ -> fun (V279) -> {'Idris.Prelude.Types.Right', 0} end end end end end end end(E168)); _ -> case V4 of {'Idris.Core.Value.NTCon', E65, E66, E67, E68, E69} -> (fun (V280, V281, V282, V283, V284) -> fun (V285) -> {'Idris.Prelude.Types.Right', 1} end end(E65, E66, E67, E68, E69)); _ -> case V3 of {'Idris.Core.Value.NDCon', E19, E20, E21, E22, E23} -> (fun (V286, V287, V288, V289, V290) -> fun (V291) -> case V4 of {'Idris.Core.Value.NDCon', E24, E25, E26, E27, E28} -> (fun (V292, V293, V294, V295, V296) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V288, V294)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V326 = ('Idris.Idris2.Core.Core':'un--anyM'(fun (V297) -> fun (V298) -> ('un--mismatch'(V0, V1, V2, V297, V298)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V301) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> case V308 of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V309, V310) -> {'Idris.Builtin.MkPair', (V306(V309)), (V307(V310))} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V311) -> fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> case V315 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V316, V317) -> {'Idris.Builtin.MkPair', (V314(V316)), V317} end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V318) -> fun (V319) -> fun (V320) -> fun (V321) -> fun (V322) -> case V322 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V323, V324) -> {'Idris.Builtin.MkPair', V323, (V321(V324))} end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V325) -> ('Idris.Idris2.Builtin':'un--snd'(V325)) end, V301)) end, V299, V300)) end end, V290, V296)), V291))), case V326 of {'Idris.Prelude.Types.Left', E35} -> (fun (V327) -> {'Idris.Prelude.Types.Left', V327} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V328) -> {'Idris.Prelude.Types.Right', case V328 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27, E28)); {'Idris.Core.Value.NPrimVal', E37, E38} -> (fun (V329, V330) -> {'Idris.Prelude.Types.Right', 0} end(E37, E38)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E19, E20, E21, E22, E23)); {'Idris.Core.Value.NPrimVal', E39, E40} -> (fun (V331, V332) -> case V4 of {'Idris.Core.Value.NDCon', E60, E61, E62, E63, E64} -> (fun (V333, V334, V335, V336, V337) -> fun (V338) -> {'Idris.Prelude.Types.Right', 0} end end(E60, E61, E62, E63, E64)); _ -> case V4 of {'Idris.Core.Value.NDCon', E55, E56, E57, E58, E59} -> (fun (V339, V340, V341, V342, V343) -> fun (V344) -> {'Idris.Prelude.Types.Right', 1} end end(E55, E56, E57, E58, E59)); _ -> case V3 of {'Idris.Core.Value.NApp', E41, E42, E43} -> (fun (V345, V346, V347) -> case V346 of {'Idris.Core.Value.NRef', E44, E45} -> (fun (V348, V349) -> fun (V350) -> case V4 of {'Idris.Core.Value.NApp', E46, E47, E48} -> (fun (V351, V352, V353) -> case V352 of {'Idris.Core.Value.NRef', E49, E50} -> (fun (V354, V355) -> {'Idris.Prelude.Types.Right', 1} end(E49, E50)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E46, E47, E48)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E44, E45)); _ -> fun (V356) -> {'Idris.Prelude.Types.Right', 0} end end end(E41, E42, E43)); {'Idris.Core.Value.NPrimVal', E51, E52} -> (fun (V357, V358) -> fun (V359) -> case V4 of {'Idris.Core.Value.NPrimVal', E53, E54} -> (fun (V360, V361) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V358, V361))} end(E53, E54)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E51, E52)); _ -> fun (V362) -> {'Idris.Prelude.Types.Right', 0} end end end end end(E39, E40)); _ -> case V4 of {'Idris.Core.Value.NDCon', E14, E15, E16, E17, E18} -> (fun (V363, V364, V365, V366, V367) -> fun (V368) -> {'Idris.Prelude.Types.Right', 1} end end(E14, E15, E16, E17, E18)); _ -> case V3 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V369, V370, V371) -> case V370 of {'Idris.Core.Value.NRef', E3, E4} -> (fun (V372, V373) -> fun (V374) -> case V4 of {'Idris.Core.Value.NApp', E5, E6, E7} -> (fun (V375, V376, V377) -> case V376 of {'Idris.Core.Value.NRef', E8, E9} -> (fun (V378, V379) -> {'Idris.Prelude.Types.Right', 1} end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E3, E4)); _ -> fun (V380) -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2)); {'Idris.Core.Value.NPrimVal', E10, E11} -> (fun (V381, V382) -> fun (V383) -> case V4 of {'Idris.Core.Value.NPrimVal', E12, E13} -> (fun (V384, V385) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V382, V385))} end(E12, E13)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E10, E11)); _ -> fun (V386) -> {'Idris.Prelude.Types.Right', 0} end end end end end end.
'un--processDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V13, case V17 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V18 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V46 of {'Idris.Prelude.Types.Left', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E34} -> (fun (V49) -> case V49 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> case V67 of {'Idris.Core.Context.None'} -> (fun () -> begin (V92 = case V49 of {'Idris.Core.Context.MkGlobalDef', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V73 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V114 = ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V49 of {'Idris.Core.Context.MkGlobalDef', E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> V102 end(E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 2))), begin (V152 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V115) -> fun (V116) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V115, V116)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V117) -> fun (V118) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V117, V118)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V119) -> fun (V120) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V121, V122)) end end}}, case V49 of {'Idris.Core.Context.MkGlobalDef', E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118} -> (fun (V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143) -> V130 end(E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V144) -> fun (V145) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V144, V145)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V146) -> fun (V147) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V146, V147)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V148) -> fun (V149) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V148, V149)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V150) -> fun (V151) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V150, V151)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V153 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V13, V10))), case V153 of {'Idris.Prelude.Types.Left', E119} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V155) -> begin (V156 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Traversing clauses of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with mult "/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V152)))))))) end, V10))), case V156 of {'Idris.Prelude.Types.Left', E121} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V158) -> begin (V159 = ('Idris.Idris2.Core.Context':'un--getDefaultTotalityOption'(V1, V10))), case V159 of {'Idris.Prelude.Types.Left', E123} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V161) -> begin (V183 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V161 end, ('Idris.Idris2.Core.Context':'un--findSetTotal'(case V49 of {'Idris.Core.Context.MkGlobalDef', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145} -> (fun (V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182) -> V173 end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V208 = ('nested--20548-11349--in--un--withTotality'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V183, fun () -> fun (V184) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V185) -> fun (V186) -> ('un--checkClause'(V0, V1, V2, V3, V152, case V49 of {'Idris.Core.Context.MkGlobalDef', E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166} -> (fun (V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207) -> V196 end(E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V183, V114, V155, V4, V5, V6, V185, V186)) end end, V9, [], V184)) end end, V10))), case V208 of {'Idris.Prelude.Types.Left', E167} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V210) -> begin (V212 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V211) -> ('un--toPats'(V211)) end, ('Idris.Idris2.Data.Either':'un--rights'(V210))))), begin (V213 = ('Idris.Idris2.Core.CaseBuilder':'un--getPMDef'(V1, V7, {'Idris.Core.CaseBuilder.CompileTime', V152}, V13, V92, ('Idris.Idris2.Data.Either':'un--rights'(V210)), V10))), case V213 of {'Idris.Prelude.Types.Left', E169} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V215) -> case V215 of {'Idris.Builtin.DPair.MkDPair', E171, E172} -> (fun (V216, V217) -> case V217 of {'Idris.Builtin.MkPair', E173, E174} -> (fun (V218, V219) -> begin (V222 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V220) -> fun (V221) -> ('un--warnUnreachable'(V1, V220, V221)) end end, V219, V10))), case V222 of {'Idris.Prelude.Types.Left', E175} -> (fun (V223) -> {'Idris.Prelude.Types.Left', V223} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V224) -> begin (V235 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"declare.def"/utf8>>, (1 + (1 + 0)), fun (V225) -> begin (V232 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseTree $vars)'(V226, V227, V228)) end end end, fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseTree $vars)'(V229, V230, V231)) end end end}, V218, V225))), case V232 of {'Idris.Prelude.Types.Left', E177} -> (fun (V233) -> {'Idris.Prelude.Types.Left', V233} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V234) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Case tree for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V216, V234))))))))} end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V10))), case V235 of {'Idris.Prelude.Types.Left', E179} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E179)); {'Idris.Prelude.Types.Right', E180} -> (fun (V237) -> begin (V263 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V238) -> case V238 of {'Idris.Prelude.Types.Left', E181} -> (fun (V239) -> {'Idris.Prelude.Types.Left', V239} end(E181)); {'Idris.Prelude.Types.Right', E182} -> (fun (V240) -> {'Idris.Prelude.Types.Right', 0} end(E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V241) -> ('Idris.Idris2.Core.Context':'un--addDef'(V1, {'Idris.Core.Name.Resolved', V155}, case V49 of {'Idris.Core.Context.MkGlobalDef', E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203} -> (fun (V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262) -> {'Idris.Core.Context.MkGlobalDef', V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, {'Idris.Core.Context.PMDef', ('Idris.Idris2.Core.Context':'un--defaultPI'()), V216, V218, V218, V212}, V260, V261, V262} end(E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V241)) end, V10))), case V263 of {'Idris.Prelude.Types.Left', E204} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V265) -> begin (V297 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V49 of {'Idris.Core.Context.MkGlobalDef', E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228} -> (fun (V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286) -> V275 end(E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 2)) of 1 -> ((begin (V287 = ('Idris.Idris2.Core.CaseTree':'un--getMetas'(V218))), fun () -> fun (V288) -> begin (V292 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V289) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V289)) end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V290, V291)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V287)))))))))) end, V288))), case V292 of {'Idris.Prelude.Types.Left', E206} -> (fun (V293) -> {'Idris.Prelude.Types.Left', V293} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V294) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V295) -> fun (V296) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V295, V296)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V287)), V288)) end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end())(V10)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V297 of {'Idris.Prelude.Types.Left', E229} -> (fun (V298) -> {'Idris.Prelude.Types.Left', V298} end(E229)); {'Idris.Prelude.Types.Right', E230} -> (fun (V299) -> begin (V346 = case case ('Idris.Idris2.Core.Name':'un--isUserName'(V13)) of 1 -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V49 of {'Idris.Core.Context.MkGlobalDef', E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272} -> (fun (V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320) -> V309 end(E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ((begin (V342 = ('Idris.Idris2.Core.TT':'un--getMetas'(case V49 of {'Idris.Core.Context.MkGlobalDef', E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251} -> (fun (V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341) -> V323 end(E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun () -> fun (V343) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V344) -> fun (V345) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V344, V345)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V342)), V343)) end end end())(V10)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V346 of {'Idris.Prelude.Types.Left', E273} -> (fun (V347) -> {'Idris.Prelude.Types.Left', V347} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V348) -> begin (V349 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V13, V10))), case V349 of {'Idris.Prelude.Types.Left', E275} -> (fun (V350) -> {'Idris.Prelude.Types.Left', V350} end(E275)); {'Idris.Prelude.Types.Right', E276} -> (fun (V351) -> begin (V353 = begin (V352 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V352} end), case V353 of {'Idris.Prelude.Types.Left', E277} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E277)); {'Idris.Prelude.Types.Right', E278} -> (fun (V355) -> begin (V385 = begin (V384 = ('erlang':'put'(V1, case V355 of {'Idris.Core.Context.MkDefs', E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306} -> (fun (V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383) -> {'Idris.Core.Context.MkDefs', V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, [V13 | V378], V379, V380, V381, V382, V383} end(E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V384} end), case V385 of {'Idris.Prelude.Types.Left', E307} -> (fun (V386) -> {'Idris.Prelude.Types.Left', V386} end(E307)); {'Idris.Prelude.Types.Right', E308} -> (fun (V387) -> begin (V394 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V388) -> fun (V389) -> fun (V390) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V388, V389, V390)) end end end, fun (V391) -> fun (V392) -> fun (V393) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V391, V392, V393)) end end end}, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"assert_total"/utf8>>}}, V10))), case V394 of {'Idris.Prelude.Types.Left', E309} -> (fun (V395) -> {'Idris.Prelude.Types.Left', V395} end(E309)); {'Idris.Prelude.Types.Right', E310} -> (fun (V396) -> begin (V410 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V397) -> fun (V398) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V397, V398)) end end, fun (V399) -> fun (V400) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V399, V400)) end end}, 1, V4)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V401 = ('un--calcRefs'(V1, 0, V396, {'Idris.Core.Name.Resolved', V155}, V10))), case V401 of {'Idris.Prelude.Types.Left', E311} -> (fun (V402) -> {'Idris.Prelude.Types.Left', V402} end(E311)); {'Idris.Prelude.Types.Right', E312} -> (fun (V403) -> begin (V404 = ('Idris.Idris2.Core.Termination':'un--calculateSizeChange'(V1, V7, V13, V10))), case V404 of {'Idris.Prelude.Types.Left', E313} -> (fun (V405) -> {'Idris.Prelude.Types.Left', V405} end(E313)); {'Idris.Prelude.Types.Right', E314} -> (fun (V406) -> begin (V407 = ('Idris.Idris2.Core.Context':'un--setSizeChange'(V1, V7, V13, V406, V10))), case V407 of {'Idris.Prelude.Types.Left', E315} -> (fun (V408) -> {'Idris.Prelude.Types.Left', V408} end(E315)); {'Idris.Prelude.Types.Right', E316} -> (fun (V409) -> ('Idris.Idris2.Core.Termination':'un--checkIfGuarded'(V1, V7, V13, V10)) end(E316)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E314)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E312)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V410 of {'Idris.Prelude.Types.Left', E317} -> (fun (V411) -> {'Idris.Prelude.Types.Left', V411} end(E317)); {'Idris.Prelude.Types.Right', E318} -> (fun (V412) -> begin (V414 = begin (V413 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V413} end), case V414 of {'Idris.Prelude.Types.Left', E319} -> (fun (V415) -> {'Idris.Prelude.Types.Left', V415} end(E319)); {'Idris.Prelude.Types.Right', E320} -> (fun (V416) -> begin (V418 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"+++ Checking Coverage "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)))) end, fun (V417) -> ('nested--20548-11354--in--un--checkCoverage'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V155, V92, V152, V210, V417)) end, V10))), case V418 of {'Idris.Prelude.Types.Left', E321} -> (fun (V419) -> {'Idris.Prelude.Types.Left', V419} end(E321)); {'Idris.Prelude.Types.Right', E322} -> (fun (V420) -> begin (V421 = ('Idris.Idris2.Core.Context':'un--setCovering'(V1, V7, V13, V420, V10))), case V421 of {'Idris.Prelude.Types.Left', E323} -> (fun (V422) -> {'Idris.Prelude.Types.Left', V422} end(E323)); {'Idris.Prelude.Types.Right', E324} -> (fun (V423) -> begin (V425 = begin (V424 = ('erlang':'put'(V2, V416))), {'Idris.Prelude.Types.Right', V424} end), case V425 of {'Idris.Prelude.Types.Left', E325} -> (fun (V426) -> {'Idris.Prelude.Types.Left', V426} end(E325)); {'Idris.Prelude.Types.Right', E326} -> (fun (V427) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V428) -> fun (V429) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V428, V429)) end end, fun (V430) -> fun (V431) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V430, V431)) end end}, 1, V4)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('un--compileRunTime'(V1, V2, V3, V7, V396, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E326)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E324)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E322)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E320)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E318)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E310)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E308)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E180)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E171, E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end()); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V13}, V10)) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--noDeclaration'(V1, V7, V13, V10)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nameListEq'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Idris.Prelude.Types.Just', 0}; _ -> {'Idris.Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> ('with--nameListEq-9888'(V2, V4, ('Idris.Idris2.Core.Name':'un--nameEq'(V2, V4)), V3, V5)) end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--mkRunTime'(V0, V1, V2, V3, V4, V5) -> begin (V15 = begin (V12 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V6, V7, V8)) end end end, fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V9, V10, V11)) end end end}, V4, V5))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compile.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Making run time definition for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V50 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V21 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V22 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V50 of {'Idris.Prelude.Types.Left', E34} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V52) -> case V52 of {'Idris.Prelude.Types.Just', E36} -> (fun (V53) -> begin (V77 = case V53 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> case V64 of {'Idris.Core.TT.MkTotality', E58, E59} -> (fun (V75, V76) -> V76 end(E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V78) -> fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V78, V79)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V80) -> fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V80, V81)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V82) -> fun (V83) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V84, V85)) end end}}, case V53 of {'Idris.Core.Context.MkGlobalDef', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V93 end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ((begin (V107 = {'Idris.Prelude.Types.Just', V53}), ('case--case block in mkRunTime-10731'(V4, V3, V2, V1, V0, V21, V53, V107, V77, case V53 of {'Idris.Core.Context.MkGlobalDef', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128) -> V125 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end())(V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mismatchNF'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V12)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> fun (V17) -> ('un--mismatch'(V0, V1, V2, V16, V17)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> {'Idris.Builtin.MkPair', (V25(V28)), (V26(V29))} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', (V33(V35)), V36} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V42, V43) -> {'Idris.Builtin.MkPair', V42, (V40(V43))} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end, V20)) end, V18, V19)) end end, V9, V15)), V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E16, E17, E18, E19, E20} -> (fun (V45, V46, V47, V48, V49) -> fun (V50) -> case V4 of {'Idris.Core.Value.NDCon', E21, E22, E23, E24, E25} -> (fun (V51, V52, V53, V54, V55) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V47, V53)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V56) -> fun (V57) -> ('un--mismatch'(V0, V1, V2, V56, V57)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V60) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V68, V69) -> {'Idris.Builtin.MkPair', (V65(V68)), (V66(V69))} end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> case V74 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V75, V76) -> {'Idris.Builtin.MkPair', (V73(V75)), V76} end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> case V81 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V82, V83) -> {'Idris.Builtin.MkPair', V82, (V80(V83))} end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V84) -> ('Idris.Idris2.Builtin':'un--snd'(V84)) end, V60)) end, V58, V59)) end end, V49, V55)), V50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23, E24, E25)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E16, E17, E18, E19, E20)); {'Idris.Core.Value.NPrimVal', E32, E33} -> (fun (V85, V86) -> fun (V87) -> case V4 of {'Idris.Core.Value.NPrimVal', E34, E35} -> (fun (V88, V89) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V86, V89))} end(E34, E35)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E32, E33)); {'Idris.Core.Value.NDelayed', E36, E37, E38} -> (fun (V90, V91, V92) -> case V4 of {'Idris.Core.Value.NDelayed', E39, E40, E41} -> (fun (V93, V94, V95) -> ('un--mismatchNF'(V0, V1, V2, V92, V95)) end(E39, E40, E41)); _ -> fun (V96) -> {'Idris.Prelude.Types.Right', 0} end end end(E36, E37, E38)); {'Idris.Core.Value.NDelay', E42, E43, E44, E45} -> (fun (V97, V98, V99, V100) -> fun (V101) -> case V4 of {'Idris.Core.Value.NDelay', E46, E47, E48, E49} -> (fun (V102, V103, V104, V105) -> begin (V106 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V100))(V101))), case V106 of {'Idris.Prelude.Types.Left', E50} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V108) -> begin (V109 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V105))(V101))), case V109 of {'Idris.Prelude.Types.Left', E52} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V111) -> (('un--mismatchNF'(V0, V1, V2, V108, V111))(V101)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47, E48, E49)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E42, E43, E44, E45)); _ -> fun (V112) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--mismatch'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V5))(V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V6))(V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> (('un--mismatchNF'(V0, V1, V2, V9, V12))(V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--impossibleOK'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V12)) of 1 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V16) -> fun (V17) -> ('un--mismatch'(V0, V1, V2, V16, V17)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V20) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> {'Idris.Builtin.MkPair', (V25(V28)), (V26(V29))} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V35, V36) -> {'Idris.Builtin.MkPair', (V33(V35)), V36} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V42, V43) -> {'Idris.Builtin.MkPair', V42, (V40(V43))} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V44) -> ('Idris.Idris2.Builtin':'un--snd'(V44)) end, V20)) end, V18, V19)) end end, V9, V15)), V10)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NPrimVal', E16, E17} -> (fun (V45, V46) -> {'Idris.Prelude.Types.Right', 1} end(E16, E17)); {'Idris.Core.Value.NType', E18} -> (fun (V47) -> {'Idris.Prelude.Types.Right', 1} end(E18)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E19, E20, E21, E22, E23} -> (fun (V48, V49, V50, V51, V52) -> fun (V53) -> case V4 of {'Idris.Core.Value.NDCon', E24, E25, E26, E27, E28} -> (fun (V54, V55, V56, V57, V58) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V50, V56)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V59) -> fun (V60) -> ('un--mismatch'(V0, V1, V2, V59, V60)) end end, ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Basics':'un--curry'(fun (V63) -> ('Idris.Idris2.Prelude.Interfaces':'un--mapHom'({'Idris.Prelude.Interfaces.MkBifunctor', fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> case V70 of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V71, V72) -> {'Idris.Builtin.MkPair', (V68(V71)), (V69(V72))} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> case V77 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V78, V79) -> {'Idris.Builtin.MkPair', (V76(V78)), V79} end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> case V84 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V85, V86) -> {'Idris.Builtin.MkPair', V85, (V83(V86))} end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V87) -> ('Idris.Idris2.Builtin':'un--snd'(V87)) end, V63)) end, V61, V62)) end end, V52, V58)), V53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26, E27, E28)); {'Idris.Core.Value.NPrimVal', E35, E36} -> (fun (V88, V89) -> {'Idris.Prelude.Types.Right', 1} end(E35, E36)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E19, E20, E21, E22, E23)); {'Idris.Core.Value.NPrimVal', E37, E38} -> (fun (V90, V91) -> fun (V92) -> case V4 of {'Idris.Core.Value.NPrimVal', E39, E40} -> (fun (V93, V94) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V91, V94))} end(E39, E40)); {'Idris.Core.Value.NDCon', E41, E42, E43, E44, E45} -> (fun (V95, V96, V97, V98, V99) -> {'Idris.Prelude.Types.Right', 1} end(E41, E42, E43, E44, E45)); {'Idris.Core.Value.NTCon', E46, E47, E48, E49, E50} -> (fun (V100, V101, V102, V103, V104) -> {'Idris.Prelude.Types.Right', 1} end(E46, E47, E48, E49, E50)); {'Idris.Core.Value.NType', E51} -> (fun (V105) -> {'Idris.Prelude.Types.Right', 1} end(E51)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E37, E38)); {'Idris.Core.Value.NType', E52} -> (fun (V106) -> fun (V107) -> case V4 of {'Idris.Core.Value.NTCon', E53, E54, E55, E56, E57} -> (fun (V108, V109, V110, V111, V112) -> {'Idris.Prelude.Types.Right', 1} end(E53, E54, E55, E56, E57)); {'Idris.Core.Value.NPrimVal', E58, E59} -> (fun (V113, V114) -> {'Idris.Prelude.Types.Right', 1} end(E58, E59)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E52)); _ -> fun (V115) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--impossibleErrOK'(V0, V1, V2) -> case V2 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V3, V1, V5, V6))(V8))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V3, V1, V5, V7))(V8))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> (('un--impossibleOK'(V0, V3, V1, V11, V14))(V8)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Core.CantSolveEq', E9, E10, E11, E12, E13} -> (fun (V15, V16, V17, V18, V19) -> fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V15, V1, V17, V18))(V20))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V15, V1, V17, V19))(V20))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> (('un--impossibleOK'(V0, V15, V1, V23, V26))(V20)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11, E12, E13)); {'Idris.Core.Core.BadDotPattern', E18, E19, E20, E21, E22, E23} -> (fun (V27, V28, V29, V30, V31, V32) -> fun (V33) -> case V30 of 3 -> {'Idris.Prelude.Types.Right', 1}; _ -> {'Idris.Prelude.Types.Right', 0} end end end(E18, E19, E20, E21, E22, E23)); {'Idris.Core.Core.CyclicMeta', E24, E25, E26, E27, E28} -> (fun (V34, V35, V36, V37, V38) -> fun (V39) -> {'Idris.Prelude.Types.Right', 1} end end(E24, E25, E26, E27, E28)); {'Idris.Core.Core.AllFailed', E29} -> (fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Core':'un--anyM'(fun (V42) -> ('un--impossibleErrOK'(V0, V1, V42)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V43) -> ('Idris.Idris2.Builtin':'un--snd'(V43)) end, V40)), V41)) end end(E29)); {'Idris.Core.Core.WhenUnifying', E30, E31, E32, E33, E34, E35} -> (fun (V44, V45, V46, V47, V48, V49) -> ('un--impossibleErrOK'(V0, V1, V49)) end(E30, E31, E32, E33, E34, E35)); _ -> fun (V50) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--hasEmptyPat'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> begin (V10 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V2, V3, ('Idris.Idris2.Core.TT':'un--binderType'(V8))))(V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Coverage':'un--isEmpty'(V0, V1, V2, V3, V12, V5))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V16 = ('un--hasEmptyPat'([V7 | V0], V1, V2, {'Idris.Core.Env.::', V8, V3}, V9, V5))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Right', case V15 of 1 -> 1; 0 -> V18; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--findLinear'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> ('un--findLinear'([V7 | V0], V1, V2, (1 + V3), V4, V9)) end(E0, E1, E2, E3)); {'Idris.Core.TT.As', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> ('un--findLinear'(V0, V1, V2, V3, V4, V13)) end(E4, E5, E6, E7)); _ -> ('case--findLinear-4365'(V0, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)))) end.
'un--extendEnv'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> case V5 of {'Idris.Core.TT.Bind', E8, E9, E10, E11} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.PVTy', E12, E13, E14} -> (fun (V18, V19, V20) -> ('with--extendEnv-3842'(V7, V15, ('Idris.Idris2.Core.Name':'un--nameEq'(V7, V15)), 'erased', V0, V14, V18, V19, V20, V6, V13, V12, V11, V10, V9, V17, V3, V2, V1)) end(E12, E13, E14)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E8, E9, E10, E11)); _ -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E4, E5, E6, E7)); {'Idris.Core.TT.PLet', E15, E16, E17, E18} -> (fun (V23, V24, V25, V26) -> case V5 of {'Idris.Core.TT.Bind', E19, E20, E21, E22} -> (fun (V27, V28, V29, V30) -> case V29 of {'Idris.Core.TT.PLet', E23, E24, E25, E26} -> (fun (V31, V32, V33, V34) -> ('with--extendEnv-3923'(V7, V28, ('Idris.Idris2.Core.Name':'un--nameEq'(V7, V28)), 'erased', V0, V27, V31, V32, V34, V33, V6, V25, V26, V24, V23, V9, V30, V3, V2, V1)) end(E23, E24, E25, E26)); _ -> fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E19, E20, E21, E22)); _ -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E15, E16, E17, E18)); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end end(E0, E1, E2, E3)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, V5}}}}}} end end.
'un--compileRunTime'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V40 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V10) -> fun (V11) -> ('un--mkRunTime'(V0, V1, V2, V3, V10, V11)) end end, case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V34 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V40 of {'Idris.Prelude.Types.Left', E30} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V42) -> begin (V73 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V43) -> fun (V44) -> ('un--calcRefs'(V0, 1, V4, V43, V44)) end end, case V9 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V67 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V73 of {'Idris.Prelude.Types.Left', E60} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V75) -> begin (V77 = begin (V76 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E62} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V79) -> begin (V108 = ('erlang':'put'(V0, case V79 of {'Idris.Core.Context.MkDefs', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> {'Idris.Core.Context.MkDefs', V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, [], V103, V104, V105, V106, V107} end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V108} end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--combineLinear'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> ('case--combineLinear-4823'(V5, V6, V4, V0, ('nested--12633-4668--in--un--lookupAll'(V5, V6, V4, V0, V5, V4)), V7)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS: "/utf8>> end, V12, V13))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V21 = case V4 of 1 -> {'Idris.Prelude.Types.Right', V12}; 0 -> (('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'(V1, V9, V12))(V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS in current NS: "/utf8>> end, V23, V13))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1, V13))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, 1, V13))), case V30 of {'Idris.Prelude.Types.Left', E10} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V23, V13))), case V33 of {'Idris.Prelude.Types.Left', E12} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V36, V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V29, V13))), case V38 of {'Idris.Prelude.Types.Left', E16} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), fun () -> <<"Raw LHS with implicits bound"/utf8>> end, V37, V13))), case V41 of {'Idris.Prelude.Types.Left', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V43) -> begin (V44 = case V4 of 1 -> {'Idris.Prelude.Types.Right', V37}; 0 -> (('Idris.Idris2.TTImp.TTImp':'un--implicitsAs'(V1, V7, V17, V0, V37))(V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V44 of {'Idris.Prelude.Types.Left', E20} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V46) -> begin (V51 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V7}, V47))), case V48 of {'Idris.Prelude.Types.Left', E22} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V50) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking LHS of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V50))))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V13))), case V51 of {'Idris.Prelude.Types.Left', E24} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V46)) end, V13))), case V54 of {'Idris.Prelude.Types.Left', E26} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V10, V13))), case V57 of {'Idris.Prelude.Types.Left', E28} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V59) -> begin (V60 = case V4 of 1 -> {'Idris.TTImp.Elab.Check.InTransform'}; 0 -> {'Idris.TTImp.Elab.Check.InLHS', V5}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V65 = begin (V61 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V7}, V13))), case V61 of {'Idris.Prelude.Types.Left', E30} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V63) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V8, fun (V64) -> {'Idris.Core.Core.InLHS', V11, V63, V64} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V7, V60, V8, V9, V10, {'Idris.TTImp.TTImp.IBindHere', V11, {'Idris.TTImp.TTImp.PATTERN'}, V46}, {'Idris.Prelude.Types.Nothing'}))))(V13)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V65 of {'Idris.Prelude.Types.Left', E32} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V67) -> case V67 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V68, V69) -> begin (V70 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Checked LHS term"/utf8>> end, V68, V13))), case V70 of {'Idris.Prelude.Types.Left', E36} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V72) -> begin (V73 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V69))(V13))), case V73 of {'Idris.Prelude.Types.Left', E38} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V75) -> begin (V77 = begin (V76 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E40} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Core.Env':'un--letToLam'(V10))), begin (V81 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V79, V80, V68, V13))), case V81 of {'Idris.Prelude.Types.Left', E42} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V83) -> begin (V84 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V79, V10, V75, V13))), case V84 of {'Idris.Prelude.Types.Left', E44} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V86) -> begin (V91 = (('un--findLinear'(V0, V1, 1, 0, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V87) -> fun (V88) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V87, V88)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V89) -> fun (V90) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V89, V90)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V83))(V13))), case V91 of {'Idris.Prelude.Types.Left', E46} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V93) -> begin (V94 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Checked LHS term after normalise"/utf8>> end, V83, V13))), case V94 of {'Idris.Prelude.Types.Left', E48} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V96) -> begin (V112 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Linearity of names in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V97) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V98)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V99, V100)) end end}, {'Idris.Prelude.Show.MkShow', fun (V101) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V102, V103)) end end}}, V97)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V107, V108)) end end}, {'Idris.Prelude.Show.MkShow', fun (V109) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V110, V111)) end end}}, V104, V105)) end end}, V93)))))))) end, V13))), case V112 of {'Idris.Prelude.Types.Left', E50} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V114) -> begin (V115 = (('un--combineLinear'(V11, V93))(V13))), case V115 of {'Idris.Prelude.Types.Left', E52} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V117) -> begin (V118 = ('un--setLinear'(V117, V83))), begin (V119 = ('un--setLinear'(V117, V86))), begin (V120 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"LHS term"/utf8>> end, V118, V13))), case V120 of {'Idris.Prelude.Types.Left', E54} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V122) -> begin (V123 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"declare.def.lhs"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"LHS type"/utf8>> end, V119, V13))), case V123 of {'Idris.Prelude.Types.Left', E56} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V125) -> begin (V126 = ('Idris.Idris2.Core.Metadata':'un--setHoleLHS'(V2, ('Idris.Idris2.Core.Env':'un--bindEnv'(V0, V11, V10, V118)), V13))), case V126 of {'Idris.Prelude.Types.Left', E58} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V128) -> begin (V129 = (('un--extendEnv'(V0, V10, {'Idris.Core.TT.SubRefl'}, V9, V118, V119))(V13))), case V129 of {'Idris.Prelude.Types.Left', E60} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V46, V131}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.TTImp.TTImp.ImpossibleClause', E0, E1} -> (fun (V14, V15) -> begin (V16 = (('Idris.Idris2.TTImp.TTImp':'un--lhsInCurrentNS'(V1, V10, V15))(V13))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'(V1, V3, fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1, V19))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, 1, V19))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 0, V18, V19))), case V26 of {'Idris.Prelude.Types.Left', E8} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V29, V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V22, V19))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.clause.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V30)))) end, V19))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"declare.def.clause.impossible"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V11, V19))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> begin (V40 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V8, {'Idris.TTImp.Elab.Check.InLHS', V4}, V9, V10, V11, {'Idris.TTImp.TTImp.IBindHere', V14, {'Idris.TTImp.TTImp.PATTERN'}, V30}, {'Idris.Prelude.Types.Nothing'}))(V19))), case V40 of {'Idris.Prelude.Types.Left', E18} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V42) -> case V42 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V43, V44) -> begin (V46 = begin (V45 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E22} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V48, V11, V43, V19))), case V49 of {'Idris.Prelude.Types.Left', E24} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V51) -> begin (V52 = ('un--hasEmptyPat'(V0, V1, V48, V11, V51, V19))), case V52 of {'Idris.Prelude.Types.Left', E26} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V54) -> case V54 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V18}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.ValidCase', V0, V14, V11, {'Idris.Prelude.Types.Left', V51}}, V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V55) -> fun (V56) -> case V55 of {'Idris.Core.Core.ValidCase', E32, E33, E34, E35} -> (fun (V57, V58, V59, V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V55, V56)) end(E32, E33, E34, E35)); _ -> begin (V62 = begin (V61 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E28} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V64) -> begin (V65 = (('un--impossibleErrOK'(V1, V64, V55))(V56))), case V65 of {'Idris.Prelude.Types.Left', E30} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V67) -> case V67 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V18}}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.ValidCase', V0, V14, V11, {'Idris.Prelude.Types.Right', V55}}, V56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V13)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.TTImp.TTImp.PatClause', E36, E37, E38} -> (fun (V68, V69, V70) -> begin (V71 = ('un--checkLHS'(V0, V1, V2, V3, 0, V4, V7, V8, V9, V10, V11, V68, V69, V13))), case V71 of {'Idris.Prelude.Types.Left', E39} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V73) -> case V73 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V74, V75) -> case V75 of {'Idris.Builtin.DPair.MkDPair', E43, E44} -> (fun (V76, V77) -> case V77 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V78, V79) -> case V79 of {'Idris.Builtin.MkPair', E47, E48} -> (fun (V80, V81) -> case V81 of {'Idris.Builtin.MkPair', E49, E50} -> (fun (V82, V83) -> case V83 of {'Idris.Builtin.MkPair', E51, E52} -> (fun (V84, V85) -> begin (V94 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V86) -> fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V86, V87)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V88) -> fun (V89) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V88, V89)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V90) -> fun (V91) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V92, V93)) end end}}, V4)) of 1 -> {'Idris.TTImp.Elab.Check.InType'}; 0 -> {'Idris.TTImp.Elab.Check.InExpr'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V95 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking RHS "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V70)))) end, V13))), case V95 of {'Idris.Prelude.Types.Left', E53} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V97) -> begin (V98 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V76, V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), <<"In env"/utf8>>, V80, V13))), case V98 of {'Idris.Prelude.Types.Left', E55} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V100) -> begin (V106 = begin (V101 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V8}, V13))), case V101 of {'Idris.Prelude.Types.Left', E57} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V103) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V1, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"+++ Check RHS "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V68)))) end, ('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V9, fun (V104) -> {'Idris.Core.Core.InRHS', V68, V103, V104} end, fun (V105) -> ('Idris.Idris2.TTImp.Elab':'un--checkTermSub'(V0, V76, V1, V2, V3, V8, V94, V9, V82, V80, V11, V78, V70, ('Idris.Idris2.Core.Normalise':'un--gnf'(V76, V80, V85)), V105)) end)), V13)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V106 of {'Idris.Prelude.Types.Left', E59} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V108) -> begin (V109 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V2, V13))), case V109 of {'Idris.Prelude.Types.Left', E61} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V111) -> begin (V112 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V76, V1, <<"declare.def.clause"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"RHS term"/utf8>> end, V108, V13))), case V112 of {'Idris.Prelude.Types.Left', E63} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V114) -> begin (V136 = case V7 of 1 -> begin (V124 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V115) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V116, V117)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V118, V119, V120)) end end end, fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V121, V122, V123)) end end end}, V84, V13))), case V124 of {'Idris.Prelude.Types.Left', E65} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V126) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V127) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V127)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V128, V129)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V130, V131, V132)) end end end, fun (V133) -> fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V133, V134, V135)) end end end}, V108, V13)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V136 of {'Idris.Prelude.Types.Left', E67} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V138) -> begin (V143 = case V108 of {'Idris.Core.TT.Meta', E69, E70, E71, E72} -> (fun (V139, V140, V141, V142) -> ('Idris.Idris2.Core.Metadata':'un--addLHS'(V76, V1, V2, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V69)), ('Idris.Idris2.Core.Env':'un--length'(V11)), V80, V84, V13)) end(E69, E70, E71, E72)); _ -> {'Idris.Prelude.Types.Right', 0} end), case V143 of {'Idris.Prelude.Types.Left', E73} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V145) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkClause', V76, V80, V84, V108}}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38)); {'Idris.TTImp.TTImp.WithClause', E75, E76, E77, E78, E79, E80} -> (fun (V146, V147, V148, V149, V150, V151) -> begin (V152 = ('un--checkLHS'(V0, V1, V2, V3, 0, V4, V7, V8, V9, V10, V11, V146, V147, V13))), case V152 of {'Idris.Prelude.Types.Left', E81} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V154) -> case V154 of {'Idris.Builtin.MkPair', E83, E84} -> (fun (V155, V156) -> case V156 of {'Idris.Builtin.DPair.MkDPair', E85, E86} -> (fun (V157, V158) -> case V158 of {'Idris.Builtin.MkPair', E87, E88} -> (fun (V159, V160) -> case V160 of {'Idris.Builtin.MkPair', E89, E90} -> (fun (V161, V162) -> case V162 of {'Idris.Builtin.MkPair', E91, E92} -> (fun (V163, V164) -> case V164 of {'Idris.Builtin.MkPair', E93, E94} -> (fun (V165, V166) -> begin (V175 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V167) -> fun (V168) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V167, V168)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V169) -> fun (V170) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V169, V170)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V171) -> fun (V172) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V171, V172)) end end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V173, V174)) end end}}, V4)) of 1 -> {'Idris.TTImp.Elab.Check.InType'}; 0 -> {'Idris.TTImp.Elab.Check.InExpr'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V180 = begin (V176 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, {'Idris.Core.Name.Resolved', V8}, V13))), case V176 of {'Idris.Prelude.Types.Left', E95} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V178) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V9, fun (V179) -> {'Idris.Core.Core.InRHS', V146, V178, V179} end, ('Idris.Idris2.TTImp.Elab':'un--elabTermSub'(V0, V157, V1, V2, V3, V8, V175, V9, V163, V161, V11, V159, V148, {'Idris.Prelude.Types.Nothing'}))))(V13)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V180 of {'Idris.Prelude.Types.Left', E97} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V182) -> begin (V183 = {'Idris.Builtin.MkPair', V155, {'Idris.Builtin.DPair.MkDPair', V157, {'Idris.Builtin.MkPair', V159, {'Idris.Builtin.MkPair', V161, {'Idris.Builtin.MkPair', V163, {'Idris.Builtin.MkPair', V165, V166}}}}}}), case V182 of {'Idris.Builtin.MkPair', E99, E100} -> (fun (V184, V185) -> begin (V186 = ('Idris.Idris2.Core.Metadata':'un--clearHoleLHS'(V2, V13))), case V186 of {'Idris.Prelude.Types.Left', E101} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V188) -> begin (V189 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V157, V1, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"With value"/utf8>> end, V184, V13))), case V189 of {'Idris.Prelude.Types.Left', E103} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V191) -> begin (V192 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V157, V1, <<"declare.def.clause.with"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Required type"/utf8>> end, V166, V13))), case V192 of {'Idris.Prelude.Types.Left', E105} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V194) -> begin (V195 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V185))(V13))), case V195 of {'Idris.Prelude.Types.Left', E107} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V197) -> begin (V199 = begin (V198 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V198} end), case V199 of {'Idris.Prelude.Types.Left', E109} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V201) -> begin (V202 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V157, V201, V161, V184, V13))), case V202 of {'Idris.Prelude.Types.Left', E111} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V204) -> begin (V205 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V157, V201, V161, V197, V13))), case V205 of {'Idris.Prelude.Types.Left', E113} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V207) -> begin (V208 = {'Idris.Builtin.MkPair', V184, V185}), ('case--case block in case block in checkClause-7551'(V151, V150, V149, V148, V147, V146, V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V155, V157, V159, V161, V163, V165, V166, V183, V175, V184, V185, V208, V197, V201, V204, V207, ('nested--13692-6476--in--un--keepOldEnv'(V151, V150, V149, V148, V147, V146, V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V157, V159, case ('Idris.Idris2.Core.Env':'un--findSubEnv'(V157, V161, V204)) of {'Idris.Builtin.DPair.MkDPair', E115, E116} -> (fun (V209, V210) -> V210 end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V13)) end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--calcRefs'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V41 = {'Idris.Prelude.Types.Just', V40}), (('case--case block in calcRefs-10067'(V3, V2, V1, V0, V8, V40, V41, case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V59 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E32)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--applyEnv'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V3}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'(('Idris.Idris2.Core.Env':'un--allVarsNoLet'(V0, V2)))), fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.UnifyState':'un--applyTo'(V0, V8, {'Idris.Core.TT.Ref', V8, V9, {'Idris.Core.Name.Resolved', V7}}, V2)) end end}}}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
