-module('Idris.Idris2.Idris.Syntax').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--resolved-4699'/4,
  'case--full-4658'/4,
  'case--toBuf-4364'/4,
  'case--fromBuf-4215'/2,
  'case--showPrec,deGuard-3457'/11,
  'case--showPrec,dePure-3403'/10,
  'case--showPrec-2917'/7,
  'nested--12305-2752--in--un--showCase'/5,
  'nested--12305-2669--in--un--showAlt'/9,
  'nested--14568-4575--in--un--insertAll'/6,
  'nested--14567-4533--in--un--insertAll'/6,
  'nested--14828-4779--in--un--goPiInfo'/2,
  'nested--14828-4783--in--un--goPairedPTerms'/3,
  'nested--14828-4795--in--un--goPTypeDecls'/2,
  'nested--14828-4776--in--un--goPTypeDecl'/2,
  'nested--14828-4782--in--un--goPTerms'/2,
  'nested--14828-4770--in--un--goPTerm'/2,
  'nested--14828-4787--in--un--goPStrings'/2,
  'nested--14828-4786--in--un--goPStringLines'/2,
  'nested--14828-4772--in--un--goPStr'/2,
  'nested--14828-4794--in--un--goPFnOpts'/2,
  'nested--14828-4780--in--un--goPFnOpt'/2,
  'nested--14828-4793--in--un--goPFields'/2,
  'nested--14828-4792--in--un--goPFieldUpdates'/2,
  'nested--14828-4771--in--un--goPFieldUpdate'/2,
  'nested--14828-4778--in--un--goPField'/2,
  'nested--14828-4788--in--un--goPDos'/2,
  'nested--14828-4773--in--un--goPDo'/2,
  'nested--14828-4791--in--un--goPDecls'/2,
  'nested--14828-4775--in--un--goPDecl'/2,
  'nested--14828-4777--in--un--goPDataDecl'/2,
  'nested--14828-4789--in--un--goPClauses'/2,
  'nested--14828-4774--in--un--goPClause'/2,
  'nested--14828-4781--in--un--goMPTerm'/2,
  'nested--14828-4790--in--un--goMPDecls'/2,
  'nested--14828-4785--in--un--go4TupledPTerms'/4,
  'nested--14828-4784--in--un--go3TupledPTerms'/4,
  'nested--11563-1710--in--un--getName'/6,
  'nested--12305-3387--in--un--dePure'/5,
  'nested--12305-3388--in--un--deGuard'/5,
  'dn--un--toBuf_TTC_SyntaxInfo'/3,
  'dn--un--toBuf_TTC_Method'/2,
  'dn--un--toBuf_TTC_IFaceInfo'/2,
  'dn--un--toBuf_TTC_Fixity'/2,
  'dn--un--show_Show_REPLOpt'/1,
  'dn--un--show_Show_REPLEval'/1,
  'dn--un--show_Show_PTerm'/1,
  'dn--un--show_Show_PStr'/1,
  'dn--un--show_Show_Method'/1,
  'dn--un--showPrec_Show_REPLOpt'/2,
  'dn--un--showPrec_Show_REPLEval'/2,
  'dn--un--showPrec_Show_PTerm'/2,
  'dn--un--showPrec_Show_PStr'/2,
  'dn--un--showPrec_Show_Method'/2,
  'dn--un--resolved_HasNames_SyntaxInfo'/3,
  'dn--un--resolved_HasNames_IFaceInfo'/3,
  'dn--un--resolved_HasNames_(ANameMap $a)'/4,
  'dn--un--pretty_Pretty_REPLOpt'/2,
  'dn--un--pretty_Pretty_REPLEval'/2,
  'dn--un--prettyPrec_Pretty_REPLOpt'/3,
  'dn--un--prettyPrec_Pretty_REPLEval'/3,
  'dn--un--full_HasNames_SyntaxInfo'/3,
  'dn--un--full_HasNames_IFaceInfo'/3,
  'dn--un--full_HasNames_(ANameMap $a)'/4,
  'dn--un--fromBuf_TTC_SyntaxInfo'/2,
  'dn--un--fromBuf_TTC_Method'/2,
  'dn--un--fromBuf_TTC_IFaceInfo'/2,
  'dn--un--fromBuf_TTC_Fixity'/2,
  'dn--un--__Impl_TTC_SyntaxInfo'/0,
  'dn--un--__Impl_TTC_Method'/0,
  'dn--un--__Impl_TTC_IFaceInfo'/0,
  'dn--un--__Impl_TTC_Fixity'/0,
  'dn--un--__Impl_Show_REPLOpt'/0,
  'dn--un--__Impl_Show_REPLEval'/0,
  'dn--un--__Impl_Show_PTerm'/0,
  'dn--un--__Impl_Show_PStr'/0,
  'dn--un--__Impl_Show_Method'/0,
  'dn--un--__Impl_Pretty_REPLOpt'/0,
  'dn--un--__Impl_Pretty_REPLEval'/0,
  'dn--un--__Impl_HasNames_SyntaxInfo'/0,
  'dn--un--__Impl_HasNames_IFaceInfo'/0,
  'dn--un--__Impl_HasNames_(ANameMap $a)'/2,
  'dn--un--__Impl_Eq_Pass'/0,
  'dn--un--==_Eq_Pass'/2,
  'dn--un--/=_Eq_Pass'/2,
  'un--typePass'/1,
  'un--showUpdate'/1,
  'un--showDo'/1,
  'un--showAlt'/1,
  'un--papply'/3,
  'un--mapPTermM'/2,
  'un--isPDef'/1,
  'un--initSyntax'/0,
  'un--getPTypeDeclLoc'/1,
  'un--getPTermLoc'/1,
  'un--getPDeclLoc'/1,
  'un--getPDataDeclLoc'/1,
  'un--getPClauseLoc'/1,
  'un--getLoc'/1,
  'un--definedInData'/1,
  'un--definedIn'/1,
  'un--defPass'/1,
  'un--OpStr'/0
]).
'case--resolved-4699'(V0, V1, V2, V3) -> case V0 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Idris.Syntax.MkSyntax', V4, V5, V2, V7, V8, V9, V3, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-4658'(V0, V1, V2, V3) -> case V0 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Idris.Syntax.MkSyntax', V4, V5, V2, V7, V8, V9, V3, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toBuf-4364'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); _ -> 0 end.
'case--fromBuf-4215'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.InfixL'}} end; 1 -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.InfixR'}} end; 2 -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.Infix'}} end; 3 -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.Prefix'}} end; _ -> fun (V6) -> ('Idris.Idris2.Libraries.Utils.Binary':'un--corrupt'('erased', <<"Fixity"/utf8>>, V6)) end end.
'case--showPrec,deGuard-3457'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> {'Idris.Idris.Syntax.DoExp', V8, V7}; 1 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--showPrec,dePure-3403'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> V7; 1 -> V8; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--showPrec-2917'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V5, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V3)), <<"}"/utf8>>)))))); 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V5, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V2)), <<"}"/utf8>>)))))))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12305-2752--in--un--showCase'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('dn--un--show_Show_PTerm'(V7)))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8, E9} -> (fun (V9, V10, V11, V12, V13, V14) -> <<" | <<with alts not possible>>"/utf8>> end(E4, E5, E6, E7, E8, E9)); {'Idris.Idris.Syntax.MkImpossible', E10, E11} -> (fun (V15, V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V16)), <<" impossible"/utf8>>)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12305-2669--in--un--showAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V11)), <<";"/utf8>>)))))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8, E9} -> (fun (V13, V14, V15, V16, V17, V18) -> <<" | <<with alts not possible>>"/utf8>> end(E4, E5, E6, E7, E8, E9)); {'Idris.Idris.Syntax.MkImpossible', E10, E11} -> (fun (V19, V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V20)), <<" impossible;"/utf8>>)))) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14568-4575--in--un--insertAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', V4} end; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V3, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V17 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E6, E7} -> (fun (V15, V16) -> (((V16(V3))(V10))(V11)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> (('nested--14568-4575--in--un--insertAll'('erased', V1, V2, V3, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'('erased', V14, V19, V4)), V8))(V11)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14567-4533--in--un--insertAll'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', V4} end; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V3, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V17 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E6, E7} -> (fun (V15, V16) -> (((V15(V3))(V10))(V11)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> (('nested--14567-4533--in--un--insertAll'('erased', V1, V2, V3, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'('erased', V14, V19, V4)), V8))(V11)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4779--in--un--goPiInfo'(V0, V1) -> case V1 of {'Idris.Core.TT.DefImplicit', E0} -> (fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V2)), V3)) end end(E0)); _ -> fun (V7) -> {'Idris.Prelude.Types.Right', V1} end end.
'nested--14828-4783--in--un--goPairedPTerms'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', fun (V13) -> [{'Idris.Builtin.MkPair', V6, V12} | V13] end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V7)), V9)) end, ('nested--14828-4783--in--un--goPairedPTerms'(V0, 'erased', V5)), V8)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4795--in--un--goPTypeDecls'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4776--in--un--goPTypeDecl'(V0, V3)), V6)) end, ('nested--14828-4795--in--un--goPTypeDecls'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4776--in--un--goPTypeDecl'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPTy', V2, V3, V4, V5, V10}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V6)), V7)) end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4782--in--un--goPTerms'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V3)), V6)) end, ('nested--14828-4782--in--un--goPTerms'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4770--in--un--goPTerm'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> (V0(V1)) end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> fun (V10) -> begin (V21 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V11) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', fun (V17) -> fun (V18) -> fun (V19) -> {'Idris.Idris.Syntax.PPi', V4, V5, V16, V17, V18, V19} end end end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4779--in--un--goPiInfo'(V0, V6)), V13)) end, fun (V20) -> {'Idris.Prelude.Types.Right', V7} end, V12)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V8)), V11)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V9)), V10))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> ((V0(V23))(V10)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E12, E13, E14, E15, E16, E17} -> (fun (V24, V25, V26, V27, V28, V29) -> fun (V30) -> begin (V41 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V32) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V34) -> case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> {'Idris.Prelude.Types.Right', fun (V37) -> fun (V38) -> fun (V39) -> {'Idris.Idris.Syntax.PLam', V24, V25, V36, V37, V38, V39} end end end} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4779--in--un--goPiInfo'(V0, V26)), V33)) end, fun (V40) -> {'Idris.Prelude.Types.Right', V27} end, V32)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V28)), V31)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V29)), V30))), case V41 of {'Idris.Prelude.Types.Left', E20} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V43) -> ((V0(V43))(V30)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16, E17)); {'Idris.Idris.Syntax.PLet', E22, E23, E24, E25, E26, E27, E28} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> fun (V51) -> begin (V63 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V52) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V53) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V54) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V55) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V56) -> case V56 of {'Idris.Prelude.Types.Left', E29} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Right', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> {'Idris.Idris.Syntax.PLet', V44, V45, V58, V59, V60, V61, V62} end end end end} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V46)), V55)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V47)), V54)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V48)), V53)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V49)), V52)) end, ('nested--14828-4789--in--un--goPClauses'(V0, V50)), V51))), case V63 of {'Idris.Prelude.Types.Left', E31} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V65) -> ((V0(V65))(V51)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22, E23, E24, E25, E26, E27, E28)); {'Idris.Idris.Syntax.PCase', E33, E34, E35} -> (fun (V66, V67, V68) -> fun (V69) -> begin (V75 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V70) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V71) -> case V71 of {'Idris.Prelude.Types.Left', E36} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V73) -> {'Idris.Prelude.Types.Right', fun (V74) -> {'Idris.Idris.Syntax.PCase', V66, V73, V74} end} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V67)), V70)) end, ('nested--14828-4789--in--un--goPClauses'(V0, V68)), V69))), case V75 of {'Idris.Prelude.Types.Left', E38} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V77) -> ((V0(V77))(V69)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33, E34, E35)); {'Idris.Idris.Syntax.PLocal', E40, E41, E42} -> (fun (V78, V79, V80) -> fun (V81) -> begin (V87 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V82) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V83) -> case V83 of {'Idris.Prelude.Types.Left', E43} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V85) -> {'Idris.Prelude.Types.Right', fun (V86) -> {'Idris.Idris.Syntax.PLocal', V78, V85, V86} end} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4791--in--un--goPDecls'(V0, V79)), V82)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V80)), V81))), case V87 of {'Idris.Prelude.Types.Left', E45} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V89) -> ((V0(V89))(V81)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42)); {'Idris.Idris.Syntax.PUpdate', E47, E48} -> (fun (V90, V91) -> fun (V92) -> begin (V96 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V93) -> case V93 of {'Idris.Prelude.Types.Left', E49} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUpdate', V90, V95}} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4792--in--un--goPFieldUpdates'(V0, V91)), V92))), case V96 of {'Idris.Prelude.Types.Left', E51} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V98) -> ((V0(V98))(V92)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E47, E48)); {'Idris.Idris.Syntax.PApp', E53, E54, E55} -> (fun (V99, V100, V101) -> fun (V102) -> begin (V108 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V103) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V104) -> case V104 of {'Idris.Prelude.Types.Left', E56} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V106) -> {'Idris.Prelude.Types.Right', fun (V107) -> {'Idris.Idris.Syntax.PApp', V99, V106, V107} end} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V100)), V103)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V101)), V102))), case V108 of {'Idris.Prelude.Types.Left', E58} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V110) -> ((V0(V110))(V102)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53, E54, E55)); {'Idris.Idris.Syntax.PWithApp', E60, E61, E62} -> (fun (V111, V112, V113) -> fun (V114) -> begin (V120 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V115) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V116) -> case V116 of {'Idris.Prelude.Types.Left', E63} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V118) -> {'Idris.Prelude.Types.Right', fun (V119) -> {'Idris.Idris.Syntax.PWithApp', V111, V118, V119} end} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V112)), V115)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V113)), V114))), case V120 of {'Idris.Prelude.Types.Left', E65} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V122) -> ((V0(V122))(V114)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60, E61, E62)); {'Idris.Idris.Syntax.PAutoApp', E67, E68, E69} -> (fun (V123, V124, V125) -> fun (V126) -> begin (V132 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V127) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V128) -> case V128 of {'Idris.Prelude.Types.Left', E70} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V130) -> {'Idris.Prelude.Types.Right', fun (V131) -> {'Idris.Idris.Syntax.PAutoApp', V123, V130, V131} end} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V124)), V127)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V125)), V126))), case V132 of {'Idris.Prelude.Types.Left', E72} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V134) -> ((V0(V134))(V126)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67, E68, E69)); {'Idris.Idris.Syntax.PNamedApp', E74, E75, E76, E77} -> (fun (V135, V136, V137, V138) -> fun (V139) -> begin (V148 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V140) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V142) -> case V142 of {'Idris.Prelude.Types.Left', E78} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V144) -> {'Idris.Prelude.Types.Right', fun (V145) -> fun (V146) -> {'Idris.Idris.Syntax.PNamedApp', V135, V144, V145, V146} end end} end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V136)), V141)) end, fun (V147) -> {'Idris.Prelude.Types.Right', V137} end, V140)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V138)), V139))), case V148 of {'Idris.Prelude.Types.Left', E80} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V150) -> ((V0(V150))(V139)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74, E75, E76, E77)); {'Idris.Idris.Syntax.PDelayed', E82, E83, E84} -> (fun (V151, V152, V153) -> fun (V154) -> begin (V158 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V155) -> case V155 of {'Idris.Prelude.Types.Left', E85} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V157) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelayed', V151, V152, V157}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V153)), V154))), case V158 of {'Idris.Prelude.Types.Left', E87} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V160) -> ((V0(V160))(V154)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E82, E83, E84)); {'Idris.Idris.Syntax.PDelay', E89, E90} -> (fun (V161, V162) -> fun (V163) -> begin (V167 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V164) -> case V164 of {'Idris.Prelude.Types.Left', E91} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V166) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelay', V161, V166}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V162)), V163))), case V167 of {'Idris.Prelude.Types.Left', E93} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V169) -> ((V0(V169))(V163)) end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89, E90)); {'Idris.Idris.Syntax.PForce', E95, E96} -> (fun (V170, V171) -> fun (V172) -> begin (V176 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V173) -> case V173 of {'Idris.Prelude.Types.Left', E97} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V175) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForce', V170, V175}} end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V171)), V172))), case V176 of {'Idris.Prelude.Types.Left', E99} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V178) -> ((V0(V178))(V172)) end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E95, E96)); {'Idris.Idris.Syntax.PSearch', E101, E102} -> (fun (V179, V180) -> (V0(V1)) end(E101, E102)); {'Idris.Idris.Syntax.PPrimVal', E103, E104} -> (fun (V181, V182) -> (V0(V1)) end(E103, E104)); {'Idris.Idris.Syntax.PQuote', E105, E106} -> (fun (V183, V184) -> fun (V185) -> begin (V189 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V186) -> case V186 of {'Idris.Prelude.Types.Left', E107} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V188) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuote', V183, V188}} end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V184)), V185))), case V189 of {'Idris.Prelude.Types.Left', E109} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V191) -> ((V0(V191))(V185)) end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E105, E106)); {'Idris.Idris.Syntax.PQuoteName', E111, E112} -> (fun (V192, V193) -> (V0(V1)) end(E111, E112)); {'Idris.Idris.Syntax.PQuoteDecl', E113, E114} -> (fun (V194, V195) -> fun (V196) -> begin (V201 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V197) -> case V197 of {'Idris.Prelude.Types.Left', E115} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V199) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteDecl', V194, V199}} end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V200) -> ('nested--14828-4775--in--un--goPDecl'(V0, V200)) end, V195, [])), V196))), case V201 of {'Idris.Prelude.Types.Left', E117} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V203) -> ((V0(V203))(V196)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E113, E114)); {'Idris.Idris.Syntax.PUnquote', E119, E120} -> (fun (V204, V205) -> fun (V206) -> begin (V210 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V207) -> case V207 of {'Idris.Prelude.Types.Left', E121} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V209) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnquote', V204, V209}} end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V205)), V206))), case V210 of {'Idris.Prelude.Types.Left', E123} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V212) -> ((V0(V212))(V206)) end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120)); {'Idris.Idris.Syntax.PRunElab', E125, E126} -> (fun (V213, V214) -> fun (V215) -> begin (V219 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V216) -> case V216 of {'Idris.Prelude.Types.Left', E127} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V218) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElab', V213, V218}} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V214)), V215))), case V219 of {'Idris.Prelude.Types.Left', E129} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V221) -> ((V0(V221))(V215)) end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E125, E126)); {'Idris.Idris.Syntax.PHole', E131, E132, E133} -> (fun (V222, V223, V224) -> (V0(V1)) end(E131, E132, E133)); {'Idris.Idris.Syntax.PType', E134} -> (fun (V225) -> (V0(V1)) end(E134)); {'Idris.Idris.Syntax.PAs', E135, E136, E137, E138} -> (fun (V226, V227, V228, V229) -> fun (V230) -> begin (V234 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V231) -> case V231 of {'Idris.Prelude.Types.Left', E139} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V233) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PAs', V226, V227, V228, V233}} end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V229)), V230))), case V234 of {'Idris.Prelude.Types.Left', E141} -> (fun (V235) -> {'Idris.Prelude.Types.Left', V235} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V236) -> ((V0(V236))(V230)) end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E135, E136, E137, E138)); {'Idris.Idris.Syntax.PDotted', E143, E144} -> (fun (V237, V238) -> fun (V239) -> begin (V243 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V240) -> case V240 of {'Idris.Prelude.Types.Left', E145} -> (fun (V241) -> {'Idris.Prelude.Types.Left', V241} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V242) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDotted', V237, V242}} end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V238)), V239))), case V243 of {'Idris.Prelude.Types.Left', E147} -> (fun (V244) -> {'Idris.Prelude.Types.Left', V244} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V245) -> ((V0(V245))(V239)) end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E143, E144)); {'Idris.Idris.Syntax.PImplicit', E149} -> (fun (V246) -> (V0(V1)) end(E149)); {'Idris.Idris.Syntax.PInfer', E150} -> (fun (V247) -> (V0(V1)) end(E150)); {'Idris.Idris.Syntax.POp', E151, E152, E153, E154} -> (fun (V248, V249, V250, V251) -> fun (V252) -> begin (V258 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V253) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V254) -> case V254 of {'Idris.Prelude.Types.Left', E155} -> (fun (V255) -> {'Idris.Prelude.Types.Left', V255} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V256) -> {'Idris.Prelude.Types.Right', fun (V257) -> {'Idris.Idris.Syntax.POp', V248, V249, V256, V257} end} end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V250)), V253)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V251)), V252))), case V258 of {'Idris.Prelude.Types.Left', E157} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E157)); {'Idris.Prelude.Types.Right', E158} -> (fun (V260) -> ((V0(V260))(V252)) end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E151, E152, E153, E154)); {'Idris.Idris.Syntax.PPrefixOp', E159, E160, E161} -> (fun (V261, V262, V263) -> fun (V264) -> begin (V268 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V265) -> case V265 of {'Idris.Prelude.Types.Left', E162} -> (fun (V266) -> {'Idris.Prelude.Types.Left', V266} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V267) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrefixOp', V261, V262, V267}} end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V263)), V264))), case V268 of {'Idris.Prelude.Types.Left', E164} -> (fun (V269) -> {'Idris.Prelude.Types.Left', V269} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V270) -> ((V0(V270))(V264)) end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E159, E160, E161)); {'Idris.Idris.Syntax.PSectionL', E166, E167, E168} -> (fun (V271, V272, V273) -> fun (V274) -> begin (V278 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V275) -> case V275 of {'Idris.Prelude.Types.Left', E169} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V277) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionL', V271, V272, V277}} end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V273)), V274))), case V278 of {'Idris.Prelude.Types.Left', E171} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V280) -> ((V0(V280))(V274)) end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E166, E167, E168)); {'Idris.Idris.Syntax.PSectionR', E173, E174, E175} -> (fun (V281, V282, V283) -> fun (V284) -> begin (V291 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V285) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V286) -> case V286 of {'Idris.Prelude.Types.Left', E176} -> (fun (V287) -> {'Idris.Prelude.Types.Left', V287} end(E176)); {'Idris.Prelude.Types.Right', E177} -> (fun (V288) -> {'Idris.Prelude.Types.Right', fun (V289) -> {'Idris.Idris.Syntax.PSectionR', V281, V288, V289} end} end(E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V282)), V285)) end, fun (V290) -> {'Idris.Prelude.Types.Right', V283} end, V284))), case V291 of {'Idris.Prelude.Types.Left', E178} -> (fun (V292) -> {'Idris.Prelude.Types.Left', V292} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V293) -> ((V0(V293))(V284)) end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E173, E174, E175)); {'Idris.Idris.Syntax.PEq', E180, E181, E182} -> (fun (V294, V295, V296) -> fun (V297) -> begin (V303 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V298) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V299) -> case V299 of {'Idris.Prelude.Types.Left', E183} -> (fun (V300) -> {'Idris.Prelude.Types.Left', V300} end(E183)); {'Idris.Prelude.Types.Right', E184} -> (fun (V301) -> {'Idris.Prelude.Types.Right', fun (V302) -> {'Idris.Idris.Syntax.PEq', V294, V301, V302} end} end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V295)), V298)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V296)), V297))), case V303 of {'Idris.Prelude.Types.Left', E185} -> (fun (V304) -> {'Idris.Prelude.Types.Left', V304} end(E185)); {'Idris.Prelude.Types.Right', E186} -> (fun (V305) -> ((V0(V305))(V297)) end(E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E180, E181, E182)); {'Idris.Idris.Syntax.PBracketed', E187, E188} -> (fun (V306, V307) -> fun (V308) -> begin (V312 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V309) -> case V309 of {'Idris.Prelude.Types.Left', E189} -> (fun (V310) -> {'Idris.Prelude.Types.Left', V310} end(E189)); {'Idris.Prelude.Types.Right', E190} -> (fun (V311) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PBracketed', V306, V311}} end(E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V307)), V308))), case V312 of {'Idris.Prelude.Types.Left', E191} -> (fun (V313) -> {'Idris.Prelude.Types.Left', V313} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V314) -> ((V0(V314))(V308)) end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E187, E188)); {'Idris.Idris.Syntax.PString', E193, E194} -> (fun (V315, V316) -> fun (V317) -> begin (V321 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V318) -> case V318 of {'Idris.Prelude.Types.Left', E195} -> (fun (V319) -> {'Idris.Prelude.Types.Left', V319} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V320) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PString', V315, V320}} end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4787--in--un--goPStrings'(V0, V316)), V317))), case V321 of {'Idris.Prelude.Types.Left', E197} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V323) -> ((V0(V323))(V317)) end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E193, E194)); {'Idris.Idris.Syntax.PMultiline', E199, E200, E201} -> (fun (V324, V325, V326) -> fun (V327) -> begin (V331 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V328) -> case V328 of {'Idris.Prelude.Types.Left', E202} -> (fun (V329) -> {'Idris.Prelude.Types.Left', V329} end(E202)); {'Idris.Prelude.Types.Right', E203} -> (fun (V330) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PMultiline', V324, V325, V330}} end(E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4786--in--un--goPStringLines'(V0, V326)), V327))), case V331 of {'Idris.Prelude.Types.Left', E204} -> (fun (V332) -> {'Idris.Prelude.Types.Left', V332} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V333) -> ((V0(V333))(V327)) end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E199, E200, E201)); {'Idris.Idris.Syntax.PDoBlock', E206, E207, E208} -> (fun (V334, V335, V336) -> fun (V337) -> begin (V341 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V338) -> case V338 of {'Idris.Prelude.Types.Left', E209} -> (fun (V339) -> {'Idris.Prelude.Types.Left', V339} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V340) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDoBlock', V334, V335, V340}} end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4788--in--un--goPDos'(V0, V336)), V337))), case V341 of {'Idris.Prelude.Types.Left', E211} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V343) -> ((V0(V343))(V337)) end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E206, E207, E208)); {'Idris.Idris.Syntax.PBang', E213, E214} -> (fun (V344, V345) -> fun (V346) -> begin (V350 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V347) -> case V347 of {'Idris.Prelude.Types.Left', E215} -> (fun (V348) -> {'Idris.Prelude.Types.Left', V348} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V349) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PBang', V344, V349}} end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V345)), V346))), case V350 of {'Idris.Prelude.Types.Left', E217} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V352) -> ((V0(V352))(V346)) end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E213, E214)); {'Idris.Idris.Syntax.PIdiom', E219, E220} -> (fun (V353, V354) -> fun (V355) -> begin (V359 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V356) -> case V356 of {'Idris.Prelude.Types.Left', E221} -> (fun (V357) -> {'Idris.Prelude.Types.Left', V357} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V358) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PIdiom', V353, V358}} end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V354)), V355))), case V359 of {'Idris.Prelude.Types.Left', E223} -> (fun (V360) -> {'Idris.Prelude.Types.Left', V360} end(E223)); {'Idris.Prelude.Types.Right', E224} -> (fun (V361) -> ((V0(V361))(V355)) end(E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E219, E220)); {'Idris.Idris.Syntax.PList', E225, E226} -> (fun (V362, V363) -> fun (V364) -> begin (V368 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V365) -> case V365 of {'Idris.Prelude.Types.Left', E227} -> (fun (V366) -> {'Idris.Prelude.Types.Left', V366} end(E227)); {'Idris.Prelude.Types.Right', E228} -> (fun (V367) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PList', V362, V367}} end(E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4782--in--un--goPTerms'(V0, V363)), V364))), case V368 of {'Idris.Prelude.Types.Left', E229} -> (fun (V369) -> {'Idris.Prelude.Types.Left', V369} end(E229)); {'Idris.Prelude.Types.Right', E230} -> (fun (V370) -> ((V0(V370))(V364)) end(E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E225, E226)); {'Idris.Idris.Syntax.PPair', E231, E232, E233} -> (fun (V371, V372, V373) -> fun (V374) -> begin (V380 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V375) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V376) -> case V376 of {'Idris.Prelude.Types.Left', E234} -> (fun (V377) -> {'Idris.Prelude.Types.Left', V377} end(E234)); {'Idris.Prelude.Types.Right', E235} -> (fun (V378) -> {'Idris.Prelude.Types.Right', fun (V379) -> {'Idris.Idris.Syntax.PPair', V371, V378, V379} end} end(E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V372)), V375)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V373)), V374))), case V380 of {'Idris.Prelude.Types.Left', E236} -> (fun (V381) -> {'Idris.Prelude.Types.Left', V381} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V382) -> ((V0(V382))(V374)) end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E231, E232, E233)); {'Idris.Idris.Syntax.PDPair', E238, E239, E240, E241} -> (fun (V383, V384, V385, V386) -> fun (V387) -> begin (V395 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V388) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V389) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V390) -> case V390 of {'Idris.Prelude.Types.Left', E242} -> (fun (V391) -> {'Idris.Prelude.Types.Left', V391} end(E242)); {'Idris.Prelude.Types.Right', E243} -> (fun (V392) -> {'Idris.Prelude.Types.Right', fun (V393) -> fun (V394) -> {'Idris.Idris.Syntax.PDPair', V383, V392, V393, V394} end end} end(E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V384)), V389)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V385)), V388)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V386)), V387))), case V395 of {'Idris.Prelude.Types.Left', E244} -> (fun (V396) -> {'Idris.Prelude.Types.Left', V396} end(E244)); {'Idris.Prelude.Types.Right', E245} -> (fun (V397) -> ((V0(V397))(V387)) end(E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E238, E239, E240, E241)); {'Idris.Idris.Syntax.PUnit', E246} -> (fun (V398) -> (V0(V1)) end(E246)); {'Idris.Idris.Syntax.PIfThenElse', E247, E248, E249, E250} -> (fun (V399, V400, V401, V402) -> fun (V403) -> begin (V411 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V404) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V405) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V406) -> case V406 of {'Idris.Prelude.Types.Left', E251} -> (fun (V407) -> {'Idris.Prelude.Types.Left', V407} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V408) -> {'Idris.Prelude.Types.Right', fun (V409) -> fun (V410) -> {'Idris.Idris.Syntax.PIfThenElse', V399, V408, V409, V410} end end} end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V400)), V405)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V401)), V404)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V402)), V403))), case V411 of {'Idris.Prelude.Types.Left', E253} -> (fun (V412) -> {'Idris.Prelude.Types.Left', V412} end(E253)); {'Idris.Prelude.Types.Right', E254} -> (fun (V413) -> ((V0(V413))(V403)) end(E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E247, E248, E249, E250)); {'Idris.Idris.Syntax.PComprehension', E255, E256, E257} -> (fun (V414, V415, V416) -> fun (V417) -> begin (V423 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V418) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V419) -> case V419 of {'Idris.Prelude.Types.Left', E258} -> (fun (V420) -> {'Idris.Prelude.Types.Left', V420} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V421) -> {'Idris.Prelude.Types.Right', fun (V422) -> {'Idris.Idris.Syntax.PComprehension', V414, V421, V422} end} end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V415)), V418)) end, ('nested--14828-4788--in--un--goPDos'(V0, V416)), V417))), case V423 of {'Idris.Prelude.Types.Left', E260} -> (fun (V424) -> {'Idris.Prelude.Types.Left', V424} end(E260)); {'Idris.Prelude.Types.Right', E261} -> (fun (V425) -> ((V0(V425))(V417)) end(E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E255, E256, E257)); {'Idris.Idris.Syntax.PRewrite', E262, E263, E264} -> (fun (V426, V427, V428) -> fun (V429) -> begin (V435 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V430) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V431) -> case V431 of {'Idris.Prelude.Types.Left', E265} -> (fun (V432) -> {'Idris.Prelude.Types.Left', V432} end(E265)); {'Idris.Prelude.Types.Right', E266} -> (fun (V433) -> {'Idris.Prelude.Types.Right', fun (V434) -> {'Idris.Idris.Syntax.PRewrite', V426, V433, V434} end} end(E266)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V427)), V430)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V428)), V429))), case V435 of {'Idris.Prelude.Types.Left', E267} -> (fun (V436) -> {'Idris.Prelude.Types.Left', V436} end(E267)); {'Idris.Prelude.Types.Right', E268} -> (fun (V437) -> ((V0(V437))(V429)) end(E268)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E262, E263, E264)); {'Idris.Idris.Syntax.PRange', E269, E270, E271, E272} -> (fun (V438, V439, V440, V441) -> fun (V442) -> begin (V450 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V443) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V444) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V445) -> case V445 of {'Idris.Prelude.Types.Left', E273} -> (fun (V446) -> {'Idris.Prelude.Types.Left', V446} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V447) -> {'Idris.Prelude.Types.Right', fun (V448) -> fun (V449) -> {'Idris.Idris.Syntax.PRange', V438, V447, V448, V449} end end} end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V439)), V444)) end, ('nested--14828-4781--in--un--goMPTerm'(V0, V440)), V443)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V441)), V442))), case V450 of {'Idris.Prelude.Types.Left', E275} -> (fun (V451) -> {'Idris.Prelude.Types.Left', V451} end(E275)); {'Idris.Prelude.Types.Right', E276} -> (fun (V452) -> ((V0(V452))(V442)) end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E269, E270, E271, E272)); {'Idris.Idris.Syntax.PRangeStream', E277, E278, E279} -> (fun (V453, V454, V455) -> fun (V456) -> begin (V462 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V457) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V458) -> case V458 of {'Idris.Prelude.Types.Left', E280} -> (fun (V459) -> {'Idris.Prelude.Types.Left', V459} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V460) -> {'Idris.Prelude.Types.Right', fun (V461) -> {'Idris.Idris.Syntax.PRangeStream', V453, V460, V461} end} end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V454)), V457)) end, ('nested--14828-4781--in--un--goMPTerm'(V0, V455)), V456))), case V462 of {'Idris.Prelude.Types.Left', E282} -> (fun (V463) -> {'Idris.Prelude.Types.Left', V463} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V464) -> ((V0(V464))(V456)) end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E277, E278, E279)); {'Idris.Idris.Syntax.PUnifyLog', E284, E285, E286} -> (fun (V465, V466, V467) -> fun (V468) -> begin (V472 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V469) -> case V469 of {'Idris.Prelude.Types.Left', E287} -> (fun (V470) -> {'Idris.Prelude.Types.Left', V470} end(E287)); {'Idris.Prelude.Types.Right', E288} -> (fun (V471) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnifyLog', V465, V466, V471}} end(E288)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V467)), V468))), case V472 of {'Idris.Prelude.Types.Left', E289} -> (fun (V473) -> {'Idris.Prelude.Types.Left', V473} end(E289)); {'Idris.Prelude.Types.Right', E290} -> (fun (V474) -> ((V0(V474))(V468)) end(E290)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E284, E285, E286)); {'Idris.Idris.Syntax.PPostfixApp', E291, E292, E293} -> (fun (V475, V476, V477) -> fun (V478) -> begin (V485 = ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V479) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V480) -> case V480 of {'Idris.Prelude.Types.Left', E294} -> (fun (V481) -> {'Idris.Prelude.Types.Left', V481} end(E294)); {'Idris.Prelude.Types.Right', E295} -> (fun (V482) -> {'Idris.Prelude.Types.Right', fun (V483) -> {'Idris.Idris.Syntax.PPostfixApp', V475, V482, V483} end} end(E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V476)), V479)) end, fun (V484) -> {'Idris.Prelude.Types.Right', V477} end, V478))), case V485 of {'Idris.Prelude.Types.Left', E296} -> (fun (V486) -> {'Idris.Prelude.Types.Left', V486} end(E296)); {'Idris.Prelude.Types.Right', E297} -> (fun (V487) -> ((V0(V487))(V478)) end(E297)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E291, E292, E293)); {'Idris.Idris.Syntax.PPostfixAppPartial', E298, E299} -> (fun (V488, V489) -> (V0({'Idris.Idris.Syntax.PPostfixAppPartial', V488, V489})) end(E298, E299)); {'Idris.Idris.Syntax.PWithUnambigNames', E300, E301, E302} -> (fun (V490, V491, V492) -> fun (V493) -> begin (V497 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V494) -> case V494 of {'Idris.Prelude.Types.Left', E303} -> (fun (V495) -> {'Idris.Prelude.Types.Left', V495} end(E303)); {'Idris.Prelude.Types.Right', E304} -> (fun (V496) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PWithUnambigNames', V490, V491, V496}} end(E304)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V492)), V493))), case V497 of {'Idris.Prelude.Types.Left', E305} -> (fun (V498) -> {'Idris.Prelude.Types.Left', V498} end(E305)); {'Idris.Prelude.Types.Right', E306} -> (fun (V499) -> ((V0(V499))(V493)) end(E306)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E300, E301, E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4787--in--un--goPStrings'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4772--in--un--goPStr'(V0, V3)), V6)) end, ('nested--14828-4787--in--un--goPStrings'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4786--in--un--goPStringLines'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4787--in--un--goPStrings'(V0, V3)), V6)) end, ('nested--14828-4786--in--un--goPStringLines'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4772--in--un--goPStr'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.StrInterp', E0, E1} -> (fun (V2, V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.StrInterp', V2, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V3)), V4)) end end(E0, E1)); _ -> fun (V8) -> {'Idris.Prelude.Types.Right', V1} end end.
'nested--14828-4794--in--un--goPFnOpts'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4780--in--un--goPFnOpt'(V0, V3)), V6)) end, ('nested--14828-4794--in--un--goPFnOpts'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4780--in--un--goPFnOpt'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.IFnOpt', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', V1} end end(E0)); {'Idris.Idris.Syntax.PForeign', E1} -> (fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForeign', V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4782--in--un--goPTerms'(V0, V4)), V5)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4793--in--un--goPFields'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4778--in--un--goPField'(V0, V3)), V6)) end, ('nested--14828-4793--in--un--goPFields'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4792--in--un--goPFieldUpdates'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4771--in--un--goPFieldUpdate'(V0, V3)), V6)) end, ('nested--14828-4792--in--un--goPFieldUpdates'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4771--in--un--goPFieldUpdate'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PSetField', E0, E1} -> (fun (V2, V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetField', V2, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V3)), V4)) end end(E0, E1)); {'Idris.Idris.Syntax.PSetFieldApp', E4, E5} -> (fun (V8, V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetFieldApp', V8, V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V9)), V10)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4778--in--un--goPField'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkField', E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', fun (V14) -> fun (V15) -> {'Idris.Idris.Syntax.MkField', V2, V3, V4, V13, V14, V15} end end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4779--in--un--goPiInfo'(V0, V5)), V10)) end, fun (V16) -> {'Idris.Prelude.Types.Right', V6} end, V9)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V7)), V8)) end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4788--in--un--goPDos'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4773--in--un--goPDo'(V0, V3)), V6)) end, ('nested--14828-4788--in--un--goPDos'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4773--in--un--goPDo'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V2, V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoExp', V2, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V3)), V4)) end end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoBind', V8, V9, V10, V15}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V11)), V12)) end end(E4, E5, E6, E7)); {'Idris.Idris.Syntax.DoBindPat', E10, E11, E12, E13} -> (fun (V16, V17, V18, V19) -> fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V23) -> case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Right', fun (V26) -> fun (V27) -> {'Idris.Idris.Syntax.DoBindPat', V16, V25, V26, V27} end end} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V17)), V22)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V18)), V21)) end, ('nested--14828-4789--in--un--goPClauses'(V0, V19)), V20)) end end(E10, E11, E12, E13)); {'Idris.Idris.Syntax.DoLet', E16, E17, E18, E19, E20, E21} -> (fun (V28, V29, V30, V31, V32, V33) -> fun (V34) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V36) -> case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> {'Idris.Prelude.Types.Right', fun (V39) -> {'Idris.Idris.Syntax.DoLet', V28, V29, V30, V31, V38, V39} end} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V32)), V35)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V33)), V34)) end end(E16, E17, E18, E19, E20, E21)); {'Idris.Idris.Syntax.DoLetPat', E24, E25, E26, E27, E28} -> (fun (V40, V41, V42, V43, V44) -> fun (V45) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V47) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V48) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V49) -> case V49 of {'Idris.Prelude.Types.Left', E29} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V51) -> {'Idris.Prelude.Types.Right', fun (V52) -> fun (V53) -> fun (V54) -> {'Idris.Idris.Syntax.DoLetPat', V40, V51, V52, V53, V54} end end end} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V41)), V48)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V42)), V47)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V43)), V46)) end, ('nested--14828-4789--in--un--goPClauses'(V0, V44)), V45)) end end(E24, E25, E26, E27, E28)); {'Idris.Idris.Syntax.DoLetLocal', E31, E32} -> (fun (V55, V56) -> fun (V57) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V58) -> case V58 of {'Idris.Prelude.Types.Left', E33} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoLetLocal', V55, V60}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4791--in--un--goPDecls'(V0, V56)), V57)) end end(E31, E32)); {'Idris.Idris.Syntax.DoRewrite', E35, E36} -> (fun (V61, V62) -> fun (V63) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V64) -> case V64 of {'Idris.Prelude.Types.Left', E37} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.DoRewrite', V61, V66}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V62)), V63)) end end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4791--in--un--goPDecls'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4775--in--un--goPDecl'(V0, V3)), V6)) end, ('nested--14828-4791--in--un--goPDecls'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4775--in--un--goPDecl'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PClaim', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Right', fun (V12) -> {'Idris.Idris.Syntax.PClaim', V2, V3, V4, V11, V12} end} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4794--in--un--goPFnOpts'(V0, V5)), V8)) end, ('nested--14828-4776--in--un--goPTypeDecl'(V0, V6)), V7)) end end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.PDef', E7, E8} -> (fun (V13, V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V16) -> case V16 of {'Idris.Prelude.Types.Left', E9} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDef', V13, V18}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4789--in--un--goPClauses'(V0, V14)), V15)) end end(E7, E8)); {'Idris.Idris.Syntax.PData', E11, E12, E13, E14} -> (fun (V19, V20, V21, V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V24) -> case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PData', V19, V20, V21, V26}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4777--in--un--goPDataDecl'(V0, V22)), V23)) end end(E11, E12, E13, E14)); {'Idris.Idris.Syntax.PParameters', E17, E18, E19} -> (fun (V27, V28, V29) -> fun (V30) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V32) -> case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Right', fun (V35) -> {'Idris.Idris.Syntax.PParameters', V27, V34, V35} end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4783--in--un--goPairedPTerms'(V0, 'erased', V28)), V31)) end, ('nested--14828-4791--in--un--goPDecls'(V0, V29)), V30)) end end(E17, E18, E19)); {'Idris.Idris.Syntax.PUsing', E22, E23, E24} -> (fun (V36, V37, V38) -> fun (V39) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E25} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V43) -> {'Idris.Prelude.Types.Right', fun (V44) -> {'Idris.Idris.Syntax.PUsing', V36, V43, V44} end} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4783--in--un--goPairedPTerms'(V0, 'erased', V37)), V40)) end, ('nested--14828-4791--in--un--goPDecls'(V0, V38)), V39)) end end(E22, E23, E24)); {'Idris.Idris.Syntax.PReflect', E27, E28} -> (fun (V45, V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V48) -> case V48 of {'Idris.Prelude.Types.Left', E29} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PReflect', V45, V50}} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V46)), V47)) end end(E27, E28)); {'Idris.Idris.Syntax.PInterface', E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59) -> fun (V60) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V61) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V62) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V63) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V64) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V65) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V67) -> case V67 of {'Idris.Prelude.Types.Left', E40} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V69) -> {'Idris.Prelude.Types.Right', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> {'Idris.Idris.Syntax.PInterface', V51, V52, V69, V70, V71, V72, V73, V74, V75} end end end end end end} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4783--in--un--goPairedPTerms'(V0, 'erased', V53)), V66)) end, fun (V76) -> {'Idris.Prelude.Types.Right', V54} end, V65)) end, fun (V77) -> {'Idris.Prelude.Types.Right', V55} end, V64)) end, ('nested--14828-4784--in--un--go3TupledPTerms'(V0, 'erased', 'erased', V56)), V63)) end, fun (V78) -> {'Idris.Prelude.Types.Right', V57} end, V62)) end, fun (V79) -> {'Idris.Prelude.Types.Right', V58} end, V61)) end, ('nested--14828-4791--in--un--goPDecls'(V0, V59)), V60)) end end(E31, E32, E33, E34, E35, E36, E37, E38, E39)); {'Idris.Idris.Syntax.PImplementation', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> fun (V91) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V92) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V93) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V94) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V95) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V96) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V97) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V98) -> case V98 of {'Idris.Prelude.Types.Left', E53} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V100) -> {'Idris.Prelude.Types.Right', fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> {'Idris.Idris.Syntax.PImplementation', V80, V81, V82, V83, V100, V101, V102, V103, V104, V105, V106} end end end end end end} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4784--in--un--go3TupledPTerms'(V0, 'erased', 'erased', V84)), V97)) end, ('nested--14828-4783--in--un--goPairedPTerms'(V0, 'erased', V85)), V96)) end, fun (V107) -> {'Idris.Prelude.Types.Right', V86} end, V95)) end, ('nested--14828-4782--in--un--goPTerms'(V0, V87)), V94)) end, fun (V108) -> {'Idris.Prelude.Types.Right', V88} end, V93)) end, fun (V109) -> {'Idris.Prelude.Types.Right', V89} end, V92)) end, ('nested--14828-4790--in--un--goMPDecls'(V0, V90)), V91)) end end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); {'Idris.Idris.Syntax.PRecord', E55, E56, E57, E58, E59, E60, E61} -> (fun (V110, V111, V112, V113, V114, V115, V116) -> fun (V117) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V118) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V119) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V120) -> case V120 of {'Idris.Prelude.Types.Left', E62} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V122) -> {'Idris.Prelude.Types.Right', fun (V123) -> fun (V124) -> {'Idris.Idris.Syntax.PRecord', V110, V111, V112, V113, V122, V123, V124} end end} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4785--in--un--go4TupledPTerms'(V0, 'erased', 'erased', V114)), V119)) end, fun (V125) -> {'Idris.Prelude.Types.Right', V115} end, V118)) end, ('nested--14828-4793--in--un--goPFields'(V0, V116)), V117)) end end(E55, E56, E57, E58, E59, E60, E61)); {'Idris.Idris.Syntax.PMutual', E64, E65} -> (fun (V126, V127) -> fun (V128) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V129) -> case V129 of {'Idris.Prelude.Types.Left', E66} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PMutual', V126, V131}} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4791--in--un--goPDecls'(V0, V127)), V128)) end end(E64, E65)); {'Idris.Idris.Syntax.PFixity', E68, E69, E70, E71} -> (fun (V132, V133, V134, V135) -> fun (V136) -> {'Idris.Prelude.Types.Right', V1} end end(E68, E69, E70, E71)); {'Idris.Idris.Syntax.PNamespace', E72, E73, E74} -> (fun (V137, V138, V139) -> fun (V140) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V141) -> case V141 of {'Idris.Prelude.Types.Left', E75} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V143) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PNamespace', V137, V138, V143}} end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4791--in--un--goPDecls'(V0, V139)), V140)) end end(E72, E73, E74)); {'Idris.Idris.Syntax.PTransform', E77, E78, E79, E80} -> (fun (V144, V145, V146, V147) -> fun (V148) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V149) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V150) -> case V150 of {'Idris.Prelude.Types.Left', E81} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V152) -> {'Idris.Prelude.Types.Right', fun (V153) -> {'Idris.Idris.Syntax.PTransform', V144, V145, V152, V153} end} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V146)), V149)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V147)), V148)) end end(E77, E78, E79, E80)); {'Idris.Idris.Syntax.PRunElabDecl', E83, E84} -> (fun (V154, V155) -> fun (V156) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V157) -> case V157 of {'Idris.Prelude.Types.Left', E85} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V159) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElabDecl', V154, V159}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V155)), V156)) end end(E83, E84)); {'Idris.Idris.Syntax.PDirective', E87, E88} -> (fun (V160, V161) -> fun (V162) -> {'Idris.Prelude.Types.Right', V1} end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4777--in--un--goPDataDecl'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', fun (V13) -> fun (V14) -> {'Idris.Idris.Syntax.MkPData', V2, V3, V12, V13, V14} end end} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V4)), V9)) end, fun (V15) -> {'Idris.Prelude.Types.Right', V5} end, V8)) end, ('nested--14828-4795--in--un--goPTypeDecls'(V0, V6)), V7)) end end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E7, E8, E9} -> (fun (V16, V17, V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPLater', V16, V17, V22}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V18)), V19)) end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4789--in--un--goPClauses'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> [V9 | V10] end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4774--in--un--goPClause'(V0, V3)), V6)) end, ('nested--14828-4789--in--un--goPClauses'(V0, V4)), V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4774--in--un--goPClause'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', fun (V12) -> fun (V13) -> {'Idris.Idris.Syntax.MkPatClause', V2, V11, V12, V13} end end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V3)), V8)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V4)), V7)) end, ('nested--14828-4791--in--un--goPDecls'(V0, V5)), V6)) end end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E6, E7, E8, E9, E10, E11} -> (fun (V14, V15, V16, V17, V18, V19) -> fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V23) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V25) -> case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Right', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> {'Idris.Idris.Syntax.MkWithClause', V14, V27, V28, V29, V30, V31} end end end end} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V15)), V24)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V16)), V23)) end, fun (V32) -> {'Idris.Prelude.Types.Right', V17} end, V22)) end, fun (V33) -> {'Idris.Prelude.Types.Right', V18} end, V21)) end, ('nested--14828-4789--in--un--goPClauses'(V0, V19)), V20)) end end(E6, E7, E8, E9, E10, E11)); {'Idris.Idris.Syntax.MkImpossible', E14, E15} -> (fun (V34, V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V37) -> case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkImpossible', V34, V39}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V35)), V36)) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4781--in--un--goMPTerm'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V3)), V4)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4790--in--un--goMPDecls'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4791--in--un--goPDecls'(V0, V3)), V4)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4785--in--un--go4TupledPTerms'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V11, V12) -> fun (V13) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V16) -> case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Right', fun (V19) -> fun (V20) -> [{'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V18, V19}}} | V20] end end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4779--in--un--goPiInfo'(V0, V11)), V15)) end, ('nested--14828-4770--in--un--goPTerm'(V0, V12)), V14)) end, ('nested--14828-4785--in--un--go4TupledPTerms'(V0, 'erased', 'erased', V6)), V13)) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14828-4784--in--un--go3TupledPTerms'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> fun (V11) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Right', fun (V16) -> [{'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V9, V15}} | V16] end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14828-4770--in--un--goPTerm'(V0, V10)), V12)) end, ('nested--14828-4784--in--un--go3TupledPTerms'(V0, 'erased', 'erased', V6)), V11)) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11563-1710--in--un--getName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> V8 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12305-3387--in--un--dePure'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Idris.Syntax.PRef', E3, E4} -> (fun (V8, V9) -> begin (V10 = {'Idris.Idris.Syntax.PApp', V5, {'Idris.Idris.Syntax.PRef', V8, V9}, V7}), ('case--showPrec,dePure-3403'(V0, V1, V2, V3, V5, V8, V9, V7, V10, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V9)), {'Idris.Core.Name.UN', <<"pure"/utf8>>})))) end end(E3, E4)); _ -> V4 end end(E0, E1, E2)); _ -> V4 end.
'nested--12305-3388--in--un--deGuard'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Idris.Syntax.PApp', E2, E3, E4} -> (fun (V7, V8, V9) -> case V8 of {'Idris.Idris.Syntax.PRef', E5, E6} -> (fun (V10, V11) -> begin (V12 = {'Idris.Idris.Syntax.DoExp', V5, {'Idris.Idris.Syntax.PApp', V7, {'Idris.Idris.Syntax.PRef', V10, V11}, V9}}), ('case--showPrec,deGuard-3457'(V0, V1, V2, V3, V7, V10, V11, V9, V5, V12, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V11)), {'Idris.Core.Name.UN', <<"guard"/utf8>>})))) end end(E5, E6)); _ -> V4 end end(E2, E3, E4)); _ -> V4 end end(E0, E1)); _ -> V4 end.
'dn--un--toBuf_TTC_SyntaxInfo'(V0, V1, V2) -> begin (V64 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V7, V8)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V11) -> fun (V12) -> ('dn--un--toBuf_TTC_Fixity'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--fromBuf_TTC_Fixity'(V13, V14)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V17, V18)) end end}}, V9, V10)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V21) -> fun (V22) -> ('dn--un--toBuf_TTC_Fixity'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('dn--un--fromBuf_TTC_Fixity'(V23, V24)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V25) -> fun (V26) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V27, V28)) end end}}, V19, V20)) end end}}, V3, V4)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V31) -> fun (V32) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V33, V34)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V35) -> fun (V36) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V37) -> fun (V38) -> ('dn--un--toBuf_TTC_Fixity'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('dn--un--fromBuf_TTC_Fixity'(V39, V40)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V41) -> fun (V42) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V43, V44)) end end}}, V35, V36)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V47) -> fun (V48) -> ('dn--un--toBuf_TTC_Fixity'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('dn--un--fromBuf_TTC_Fixity'(V49, V50)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V51) -> fun (V52) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V53, V54)) end end}}, V45, V46)) end end}}, V29, V30)) end end}, V0, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V55 end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2))), case V64 of {'Idris.Prelude.Types.Left', E9} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V66) -> begin (V96 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V67) -> fun (V68) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V69) -> fun (V70) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V71, V72)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V73) -> fun (V74) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V75, V76)) end end}}, V67, V68)) end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V79) -> fun (V80) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V81, V82)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V83) -> fun (V84) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V85, V86)) end end}}, V77, V78)) end end}, V0, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V88 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V2))), case V96 of {'Idris.Prelude.Types.Left', E20} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V98) -> begin (V142 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V99) -> fun (V100) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V103, V104)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V105) -> fun (V106) -> ('dn--un--toBuf_TTC_IFaceInfo'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V107, V108)) end end}}, V99, V100)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V113, V114)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V115) -> fun (V116) -> ('dn--un--toBuf_TTC_IFaceInfo'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V117, V118)) end end}}, V109, V110)) end end}, V0, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V119) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V122, V123)) end end}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V119)), case V1 of {'Idris.Idris.Syntax.MkSyntax', E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V124, V125, V126, V127, V128, V129, V130, V131, V132) -> V127 end(E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141) -> V135 end(E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V2))), case V142 of {'Idris.Prelude.Types.Left', E40} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V144) -> begin (V184 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V145) -> fun (V146) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V147, V148)) end end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V149, V150)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V151) -> fun (V152) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V151, V152)) end end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V153, V154)) end end}}, V145, V146)) end end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V157) -> fun (V158) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V157, V158)) end end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V159, V160)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V161) -> fun (V162) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V161, V162)) end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V163, V164)) end end}}, V155, V156)) end end}, V0, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V165) -> ('case--toBuf-4364'(V1, V0, V165, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V165)), case V1 of {'Idris.Idris.Syntax.MkSyntax', E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V166, V167, V168, V169, V170, V171, V172, V173, V174) -> V171 end(E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end, ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V175, V176, V177, V178, V179, V180, V181, V182, V183) -> V179 end(E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V2))), case V184 of {'Idris.Prelude.Types.Left', E60} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V186) -> begin (V200 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V187) -> fun (V188) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V187, V188)) end end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V189, V190)) end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V191, V192, V193, V194, V195, V196, V197, V198, V199) -> V197 end(E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V200 of {'Idris.Prelude.Types.Left', E71} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V202) -> (('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_RawImp'(V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V203, V204, V205, V206, V207, V208, V209, V210, V211) -> V211 end(E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--toBuf_TTC_Method'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkMethod', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> begin (V7 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V2))(V6))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RigCount'(V0, V3))(V6))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V17 = (('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(Maybe $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_TotalReq'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_TotalReq'(V15, V16)) end end}, V0, V4))(V6))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> (('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_RawImp'(V0, V5))(V6)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_IFaceInfo'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.MkIFaceInfo', E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V0, V2))(V8))), case V9 of {'Idris.Prelude.Types.Left', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V11) -> begin (V16 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V14, V15)) end end}, V0, V3, V8))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V23 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V21, V22)) end end}, V0, V4, V8))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V30 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V26) -> fun (V27) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_RawImp'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_RawImp'(V28, V29)) end end}, V0, V5, V8))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V37 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V33) -> fun (V34) -> ('dn--un--toBuf_TTC_Method'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('dn--un--fromBuf_TTC_Method'(V35, V36)) end end}, V0, V6, V8))), case V37 of {'Idris.Prelude.Types.Left', E14} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V39) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V40) -> fun (V41) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V44, V45)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V49) -> fun (V50) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V51, V52)) end end}, V46, V47, V48)) end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V55) -> fun (V56) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V57, V58)) end end}, V53, V54)) end end}}, V40, V41)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V63, V64)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V68) -> fun (V69) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V70, V71)) end end}, V65, V66, V67)) end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V74) -> fun (V75) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V76, V77)) end end}, V72, V73)) end end}}, V59, V60)) end end}, V0, V7, V8)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toBuf_TTC_Fixity'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.InfixL'} -> (fun () -> fun (V2) -> ('Idris.Idris2.Libraries.Utils.Binary':'un--tag'(V0, 0, V2)) end end()); {'Idris.Idris.Syntax.InfixR'} -> (fun () -> fun (V3) -> ('Idris.Idris2.Libraries.Utils.Binary':'un--tag'(V0, 1, V3)) end end()); {'Idris.Idris.Syntax.Infix'} -> (fun () -> fun (V4) -> ('Idris.Idris2.Libraries.Utils.Binary':'un--tag'(V0, 2, V4)) end end()); {'Idris.Idris.Syntax.Prefix'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Libraries.Utils.Binary':'un--tag'(V0, 3, V5)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_REPLOpt'(V0) -> case V0 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"showimplicits = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V1)))) end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shownamespace = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V2)))) end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"showtypes = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V3)))) end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"eval = "/utf8>>, ('dn--un--show_Show_REPLEval'(V4)))) end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"editor = "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V5)))) end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"cg = "/utf8>>, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_REPLEval'(V0) -> case V0 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> <<"typecheck"/utf8>> end()); {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> <<"normalise"/utf8>> end()); {'Idris.Idris.Syntax.Execute'} -> (fun () -> <<"execute"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_PTerm'(V0) -> ('dn--un--showPrec_Show_PTerm'({'Idris.Prelude.Show.Open'}, V0)).
'dn--un--show_Show_PStr'(V0) -> case V0 of {'Idris.Idris.Syntax.StrLiteral', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V2)) end(E0, E1)); {'Idris.Idris.Syntax.StrInterp', E2, E3} -> (fun (V3, V4) -> ('dn--un--show_Show_PTerm'(V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Method'(V0) -> case V0 of {'Idris.Idris.Syntax.MkMethod', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V5) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_TotalReq'(V6, V7)) end end}, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V4)))))))))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_REPLOpt'(V0, V1) -> ('dn--un--show_Show_REPLOpt'(V1)).
'dn--un--showPrec_Show_REPLEval'(V0, V1) -> ('dn--un--show_Show_REPLEval'(V1)).
'dn--un--showPrec_Show_PTerm'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V3)) end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V4, V5, V6, V7, V8, V9) -> case V6 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V9)))))) end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") -> "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V9)))))))))))))) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_ : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V9)))))))))))) end()); {'Idris.Prelude.Types.Just', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V9)))))))))))))) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V9)))))) end()); {'Idris.Prelude.Types.Just', E10} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{auto "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V9)))))))))))))) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DefImplicit', E11} -> (fun (V13) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{default "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'({'Idris.Prelude.Show.App'}, V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_ : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V9)))))))))))))))) end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{default "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'({'Idris.Prelude.Show.App'}, V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"} -> "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V9)))))))))))))))))) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E13, E14, E15, E16, E17, E18} -> (fun (V15, V16, V17, V18, V19, V20) -> case V19 of {'Idris.Idris.Syntax.PImplicit', E19} -> (fun (V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V20)))))))))) end(E19)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V20)))))))))))))) end end(E13, E14, E15, E16, E17, E18)); {'Idris.Idris.Syntax.PLet', E20, E21, E22, E23, E24, E25, E26} -> (fun (V22, V23, V24, V25, V26, V27, V28) -> case V25 of {'Idris.Idris.Syntax.PImplicit', E27} -> (fun (V29) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V23)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V27)))))))))))))) end(E27)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(V23)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'((('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V41)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V42, V43)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V44) -> ('nested--12305-2669--in--un--showAlt'(V22, V28, V27, V26, V25, V24, V23, V0, V44)) end))(V28)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V27)))))))))))))))))))) end end(E20, E21, E22, E23, E24, E25, E26)); {'Idris.Idris.Syntax.PCase', E28, E29, E30} -> (fun (V45, V46, V47) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" ; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V48) -> ('nested--12305-2752--in--un--showCase'(V0, V45, V47, V46, V48)) end, V47)))), <<" }"/utf8>>)))))))) end(E28, E29, E30)); {'Idris.Idris.Syntax.PLocal', E31, E32, E33} -> (fun (V49, V50, V51) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let { << definitions >>  } in "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V51)))) end(E31, E32, E33)); {'Idris.Idris.Syntax.PUpdate', E34, E35} -> (fun (V52, V53) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"record { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V54) -> ('un--showUpdate'(V54)) end, V53)))), <<" }"/utf8>>)))) end(E34, E35)); {'Idris.Idris.Syntax.PApp', E36, E37, E38} -> (fun (V55, V56, V57) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'({'Idris.Prelude.Show.App'}, V56)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('dn--un--showPrec_Show_PTerm'({'Idris.Prelude.Show.App'}, V57)))))) end(E36, E37, E38)); {'Idris.Idris.Syntax.PWithApp', E39, E40, E41} -> (fun (V58, V59, V60) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V59)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V60)))))) end(E39, E40, E41)); {'Idris.Idris.Syntax.PAutoApp', E42, E43, E44} -> (fun (V61, V62, V63) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V62)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" @{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V63)), <<"}"/utf8>>)))))) end(E42, E43, E44)); {'Idris.Idris.Syntax.PDelayed', E45, E46, E47} -> (fun (V64, V65, V66) -> case V65 of {'Idris.Core.TT.LInf'} -> (fun () -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Inf"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V67) -> ('dn--un--show_Show_PTerm'(V67)) end, fun (V68) -> fun (V69) -> ('dn--un--showPrec_Show_PTerm'(V68, V69)) end end}, V66)))) end()); _ -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Lazy"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('dn--un--show_Show_PTerm'(V70)) end, fun (V71) -> fun (V72) -> ('dn--un--showPrec_Show_PTerm'(V71, V72)) end end}, V66)))) end end(E45, E46, E47)); {'Idris.Idris.Syntax.PDelay', E48, E49} -> (fun (V73, V74) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Delay"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V75) -> ('dn--un--show_Show_PTerm'(V75)) end, fun (V76) -> fun (V77) -> ('dn--un--showPrec_Show_PTerm'(V76, V77)) end end}, V74)))) end(E48, E49)); {'Idris.Idris.Syntax.PForce', E50, E51} -> (fun (V78, V79) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V0, <<"Force"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('dn--un--show_Show_PTerm'(V80)) end, fun (V81) -> fun (V82) -> ('dn--un--showPrec_Show_PTerm'(V81, V82)) end end}, V79)))) end(E50, E51)); {'Idris.Idris.Syntax.PNamedApp', E52, E53, E54, E55} -> (fun (V83, V84, V85, V86) -> case V86 of {'Idris.Idris.Syntax.PRef', E56, E57} -> (fun (V87, V88) -> ('case--showPrec-2917'(V83, V87, V88, V85, V84, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V85, V88)))) end(E56, E57)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V84)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V85)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V86)), <<"}"/utf8>>)))))))))) end end(E52, E53, E54, E55)); {'Idris.Idris.Syntax.PSearch', E58, E59} -> (fun (V89, V90) -> <<"%search"/utf8>> end(E58, E59)); {'Idris.Idris.Syntax.PQuote', E60, E61} -> (fun (V91, V92) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"`("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V92)), <<")"/utf8>>)))) end(E60, E61)); {'Idris.Idris.Syntax.PQuoteName', E62, E63} -> (fun (V93, V94) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"`{{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V94)), <<"}}"/utf8>>)))) end(E62, E63)); {'Idris.Idris.Syntax.PQuoteDecl', E64, E65} -> (fun (V95, V96) -> <<"`[ <<declaration>> ]"/utf8>> end(E64, E65)); {'Idris.Idris.Syntax.PUnquote', E66, E67} -> (fun (V97, V98) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"~("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V98)), <<")"/utf8>>)))) end(E66, E67)); {'Idris.Idris.Syntax.PRunElab', E68, E69} -> (fun (V99, V100) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%runElab "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V100)))) end(E68, E69)); {'Idris.Idris.Syntax.PPrimVal', E70, E71} -> (fun (V101, V102) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V0, V102)) end(E70, E71)); {'Idris.Idris.Syntax.PHole', E72, E73, E74} -> (fun (V103, V104, V105) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"?"/utf8>>, V105)) end(E72, E73, E74)); {'Idris.Idris.Syntax.PType', E75} -> (fun (V106) -> <<"Type"/utf8>> end(E75)); {'Idris.Idris.Syntax.PAs', E76, E77, E78, E79} -> (fun (V107, V108, V109, V110) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V109)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"@"/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V110)))))) end(E76, E77, E78, E79)); {'Idris.Idris.Syntax.PDotted', E80, E81} -> (fun (V111, V112) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V112)))) end(E80, E81)); {'Idris.Idris.Syntax.PImplicit', E82} -> (fun (V113) -> <<"_"/utf8>> end(E82)); {'Idris.Idris.Syntax.PInfer', E83} -> (fun (V114) -> <<"?"/utf8>> end(E83)); {'Idris.Idris.Syntax.POp', E84, E85, E86, E87} -> (fun (V115, V116, V117, V118) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V117)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V116)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V118)))))))))) end(E84, E85, E86, E87)); {'Idris.Idris.Syntax.PPrefixOp', E88, E89, E90} -> (fun (V119, V120, V121) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V120)), ('dn--un--showPrec_Show_PTerm'(V0, V121)))) end(E88, E89, E90)); {'Idris.Idris.Syntax.PSectionL', E91, E92, E93} -> (fun (V122, V123, V124) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V123)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V124)), <<")"/utf8>>)))))))) end(E91, E92, E93)); {'Idris.Idris.Syntax.PSectionR', E94, E95, E96} -> (fun (V125, V126, V127) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V126)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V0, V127)), <<")"/utf8>>)))))))) end(E94, E95, E96)); {'Idris.Idris.Syntax.PEq', E97, E98, E99} -> (fun (V128, V129, V130) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V129)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V130)))))) end(E97, E98, E99)); {'Idris.Idris.Syntax.PBracketed', E100, E101} -> (fun (V131, V132) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V132)), <<")"/utf8>>)))) end(E100, E101)); {'Idris.Idris.Syntax.PString', E102, E103} -> (fun (V133, V134) -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--join'('erased', <<" ++ "/utf8>>, {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V137, V138, V139)) end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V142, V143, V144)) end end end end end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V146)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V149, V150)) end end end end, fun (V151) -> ('dn--un--show_Show_PStr'(V151)) end, V134)))) end(E102, E103)); {'Idris.Idris.Syntax.PMultiline', E104, E105, E106} -> (fun (V152, V153, V154) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"multiline ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Data.String.Extra':'un--join'('erased', <<" ++ "/utf8>>, {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V157, V158, V159)) end end end end end, fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V162, V163, V164)) end end end end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V166)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V169, V170)) end end end end, fun (V171) -> ('dn--un--show_Show_PStr'(V171)) end, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V174, V175, V176)) end end end end end, fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V179, V180, V181)) end end end end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V183)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V184) -> fun (V185) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V184, V185)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V154)))))), <<")"/utf8>>)))) end(E104, E105, E106)); {'Idris.Idris.Syntax.PDoBlock', E107, E108, E109} -> (fun (V186, V187, V188) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"do "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" ; "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V189) -> ('un--showDo'(V189)) end, V188)))))) end(E107, E108, E109)); {'Idris.Idris.Syntax.PBang', E110, E111} -> (fun (V190, V191) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"!"/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V191)))) end(E110, E111)); {'Idris.Idris.Syntax.PIdiom', E112, E113} -> (fun (V192, V193) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"[|"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V193)), <<"|]"/utf8>>)))) end(E112, E113)); {'Idris.Idris.Syntax.PList', E114, E115} -> (fun (V194, V195) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V196) -> ('dn--un--showPrec_Show_PTerm'(V0, V196)) end, V195)))), <<"]"/utf8>>)))) end(E114, E115)); {'Idris.Idris.Syntax.PPair', E116, E117, E118} -> (fun (V197, V198, V199) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V198)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V199)), <<")"/utf8>>)))))))) end(E116, E117, E118)); {'Idris.Idris.Syntax.PDPair', E119, E120, E121, E122} -> (fun (V200, V201, V202, V203) -> case V202 of {'Idris.Idris.Syntax.PImplicit', E123} -> (fun (V204) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V201)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ** "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V203)), <<")"/utf8>>)))))))) end(E123)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V201)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V202)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ** "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V203)), <<")"/utf8>>)))))))))))) end end(E119, E120, E121, E122)); {'Idris.Idris.Syntax.PUnit', E124} -> (fun (V205) -> <<"()"/utf8>> end(E124)); {'Idris.Idris.Syntax.PIfThenElse', E125, E126, E127, E128} -> (fun (V206, V207, V208, V209) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"if "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V207)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" then "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V208)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" else "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V209)))))))))))) end(E125, E126, E127, E128)); {'Idris.Idris.Syntax.PComprehension', E129, E130, E131} -> (fun (V210, V211, V212) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, ('nested--12305-3387--in--un--dePure'(V210, V212, V211, V0, V211)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V213) -> ('un--showDo'(('nested--12305-3388--in--un--deGuard'(V210, V212, V211, V0, V213)))) end, V212)))), <<"]"/utf8>>)))))))) end(E129, E130, E131)); {'Idris.Idris.Syntax.PRewrite', E132, E133, E134} -> (fun (V214, V215, V216) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rewrite "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V215)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V216)))))))) end(E132, E133, E134)); {'Idris.Idris.Syntax.PRange', E135, E136, E137, E138} -> (fun (V217, V218, V219, V220) -> case V219 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V218)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" .. "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V220)), <<"]"/utf8>>)))))))) end()); {'Idris.Prelude.Types.Just', E139} -> (fun (V221) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V218)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V221)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" .. "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V220)), <<"]"/utf8>>)))))))))))) end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E135, E136, E137, E138)); {'Idris.Idris.Syntax.PRangeStream', E140, E141, E142} -> (fun (V222, V223, V224) -> case V224 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V223)), <<" .. ]"/utf8>>)))) end()); {'Idris.Prelude.Types.Just', E143} -> (fun (V225) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V223)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V225)), <<" .. ]"/utf8>>)))))))) end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140, E141, E142)); {'Idris.Idris.Syntax.PUnifyLog', E144, E145, E146} -> (fun (V226, V227, V228) -> ('dn--un--showPrec_Show_PTerm'(V0, V228)) end(E144, E145, E146)); {'Idris.Idris.Syntax.PPostfixApp', E147, E148, E149} -> (fun (V229, V230, V231) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--showPrec_Show_PTerm'(V0, V230)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V234, V235, V236)) end end end end end, fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V239, V240, V241)) end end end end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V243)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V244) -> fun (V245) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V244, V245)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V246) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V246)))) end))(V231)))) end(E147, E148, E149)); {'Idris.Idris.Syntax.PPostfixAppPartial', E150, E151} -> (fun (V247, V248) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V249) -> fun (V250) -> fun (V251) -> fun (V252) -> fun (V253) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V251, V252, V253)) end end end end end, fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V256, V257, V258)) end end end end end, fun (V259) -> fun (V260) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V260)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V261) -> fun (V262) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V261, V262)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V263) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V263)))) end))(V248)) end(E150, E151)); {'Idris.Idris.Syntax.PWithUnambigNames', E152, E153, E154} -> (fun (V264, V265, V266) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V267) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V267)) end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V268, V269)) end end}, V265)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('dn--un--showPrec_Show_PTerm'(V0, V266)))))))) end(E152, E153, E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_PStr'(V0, V1) -> ('dn--un--show_Show_PStr'(V1)).
'dn--un--showPrec_Show_Method'(V0, V1) -> ('dn--un--show_Show_Method'(V1)).
'dn--un--resolved_HasNames_SyntaxInfo'(V0, V1, V2) -> begin (V18 = (('dn--un--resolved_HasNames_(ANameMap $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--full_HasNames_IFaceInfo'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--resolved_HasNames_IFaceInfo'(V6, V7, V8)) end end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V11 end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V21)) end, case V1 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V28 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V2))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Idris.Syntax.MkSyntax', E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Idris.Syntax.MkSyntax', V34, V35, V20, V37, V38, V39, V33, V41, V42} end(E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_IFaceInfo'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', V1}.
'dn--un--resolved_HasNames_(ANameMap $a)'(V0, V1, V2, V3) -> ('nested--14568-4575--in--un--insertAll'('erased', V1, V3, V2, ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'('erased', V3)))).
'dn--un--pretty_Pretty_REPLOpt'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"showimplicits"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'('erased', V2)))))) end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"shownamespace"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'('erased', V3)))))) end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V4) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"showtypes"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'('erased', V4)))))) end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"eval"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('dn--un--pretty_Pretty_REPLEval'('erased', V5)))))) end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V6) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"editor"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V6)))))) end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V7) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"cg"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V7)))))) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--pretty_Pretty_REPLEval'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"typecheck"/utf8>>)) end()); {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"normalise"/utf8>>)) end()); {'Idris.Idris.Syntax.Execute'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"execute"/utf8>>)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_REPLOpt'(V0, V1, V2) -> ('dn--un--pretty_Pretty_REPLOpt'('erased', V2)).
'dn--un--prettyPrec_Pretty_REPLEval'(V0, V1, V2) -> ('dn--un--pretty_Pretty_REPLEval'('erased', V2)).
'dn--un--full_HasNames_SyntaxInfo'(V0, V1, V2) -> begin (V18 = (('dn--un--full_HasNames_(ANameMap $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--full_HasNames_IFaceInfo'(V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--resolved_HasNames_IFaceInfo'(V6, V7, V8)) end end end}, V0, case V1 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V11 end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V21)) end, case V1 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V28 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V2))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Idris.Syntax.MkSyntax', E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Idris.Syntax.MkSyntax', V34, V35, V20, V37, V38, V39, V33, V41, V42} end(E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames_IFaceInfo'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', V1}.
'dn--un--full_HasNames_(ANameMap $a)'(V0, V1, V2, V3) -> ('nested--14567-4533--in--un--insertAll'('erased', V1, V3, V2, ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.ANameMap':'un--toList'('erased', V3)))).
'dn--un--fromBuf_TTC_SyntaxInfo'(V0, V1) -> begin (V54 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V2) -> fun (V3) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V6, V7)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V8) -> fun (V9) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V10) -> fun (V11) -> ('dn--un--toBuf_TTC_Fixity'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un--fromBuf_TTC_Fixity'(V12, V13)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V16, V17)) end end}}, V8, V9)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V20) -> fun (V21) -> ('dn--un--toBuf_TTC_Fixity'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('dn--un--fromBuf_TTC_Fixity'(V22, V23)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V24) -> fun (V25) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V26, V27)) end end}}, V18, V19)) end end}}, V2, V3)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V30) -> fun (V31) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V32, V33)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V34) -> fun (V35) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V36) -> fun (V37) -> ('dn--un--toBuf_TTC_Fixity'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('dn--un--fromBuf_TTC_Fixity'(V38, V39)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V40) -> fun (V41) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V42, V43)) end end}}, V34, V35)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V46) -> fun (V47) -> ('dn--un--toBuf_TTC_Fixity'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--fromBuf_TTC_Fixity'(V48, V49)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V50) -> fun (V51) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V52, V53)) end end}}, V44, V45)) end end}}, V28, V29)) end end}, V0, V1))), case V54 of {'Idris.Prelude.Types.Left', E0} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V56) -> begin (V77 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V57) -> fun (V58) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V59) -> fun (V60) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V61, V62)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V63) -> fun (V64) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V65, V66)) end end}}, V57, V58)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V69) -> fun (V70) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V71, V72)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V73) -> fun (V74) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Nat'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Nat'(V75, V76)) end end}}, V67, V68)) end end}, V0, V1))), case V77 of {'Idris.Prelude.Types.Left', E2} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V79) -> begin (V100 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V80) -> fun (V81) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V82, V83)) end end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V84, V85)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V86) -> fun (V87) -> ('dn--un--toBuf_TTC_IFaceInfo'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V88, V89)) end end}}, V80, V81)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V94, V95)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V96) -> fun (V97) -> ('dn--un--toBuf_TTC_IFaceInfo'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V98, V99)) end end}}, V90, V91)) end end}, V0, V1))), case V100 of {'Idris.Prelude.Types.Left', E4} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V102) -> begin (V123 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V103) -> fun (V104) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V107, V108)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V109) -> fun (V110) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V111, V112)) end end}}, V103, V104)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V115, V116)) end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V117, V118)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V119) -> fun (V120) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V119, V120)) end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V121, V122)) end end}}, V113, V114)) end end}, V0, V1))), case V123 of {'Idris.Prelude.Types.Left', E6} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V125) -> begin (V130 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V126, V127)) end end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V128, V129)) end end}, V0, V1))), case V130 of {'Idris.Prelude.Types.Left', E8} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V132) -> begin (V133 = ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V133 of {'Idris.Prelude.Types.Left', E10} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V135) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--fromList'('erased', V56)), ('Idris.Idris2.Libraries.Data.StringMap':'un--fromList'('erased', V79)), ('Idris.Idris2.Libraries.Data.ANameMap':'un--fromList'('erased', V102)), [], ('Idris.Idris2.Libraries.Data.ANameMap':'un--fromList'('erased', V125)), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), V132, [], V135}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Method'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V0, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V12 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(Maybe $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_TotalReq'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_TotalReq'(V10, V11)) end end}, V0, V1))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_RawImp'(V0, V1))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkMethod', V4, V7, V14, V17}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_IFaceInfo'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V9 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V7, V8)) end end}, V0, V1))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V16 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V14, V15)) end end}, V0, V1))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V23 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V19) -> fun (V20) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_RawImp'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_RawImp'(V21, V22)) end end}, V0, V1))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V30 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V26) -> fun (V27) -> ('dn--un--toBuf_TTC_Method'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('dn--un--fromBuf_TTC_Method'(V28, V29)) end end}, V0, V1))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V71 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V33) -> fun (V34) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V37, V38)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V42) -> fun (V43) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V44, V45)) end end}, V39, V40, V41)) end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V48) -> fun (V49) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V50, V51)) end end}, V46, V47)) end end}}, V33, V34)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V56, V57)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V61) -> fun (V62) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V63, V64)) end end}, V58, V59, V60)) end end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V67) -> fun (V68) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--toBuf_TTC_ImpClause'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--fromBuf_TTC_ImpClause'(V69, V70)) end end}, V65, V66)) end end}}, V52, V53)) end end}, V0, V1))), case V71 of {'Idris.Prelude.Types.Left', E10} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V73) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkIFaceInfo', V4, V11, V18, V25, V32, V73}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--fromBuf_TTC_Fixity'(V0, V1) -> begin (V2 = ('Idris.Idris2.Libraries.Utils.Binary':'un--getTag'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.InfixL'}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.InfixR'}}; 2 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.Infix'}}; 3 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.Prefix'}}; _ -> ('Idris.Idris2.Libraries.Utils.Binary':'un--corrupt'('erased', <<"Fixity"/utf8>>, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_TTC_SyntaxInfo'() -> {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--toBuf_TTC_SyntaxInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> ('dn--un--fromBuf_TTC_SyntaxInfo'(V3, V4)) end end}.
'dn--un--__Impl_TTC_Method'() -> {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Method'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC_Method'(V2, V3)) end end}.
'dn--un--__Impl_TTC_IFaceInfo'() -> {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_IFaceInfo'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC_IFaceInfo'(V2, V3)) end end}.
'dn--un--__Impl_TTC_Fixity'() -> {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V0) -> fun (V1) -> ('dn--un--toBuf_TTC_Fixity'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--fromBuf_TTC_Fixity'(V2, V3)) end end}.
'dn--un--__Impl_Show_REPLOpt'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_REPLOpt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_REPLOpt'(V1, V2)) end end}.
'dn--un--__Impl_Show_REPLEval'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_REPLEval'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_REPLEval'(V1, V2)) end end}.
'dn--un--__Impl_Show_PTerm'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_PTerm'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PTerm'(V1, V2)) end end}.
'dn--un--__Impl_Show_PStr'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_PStr'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PStr'(V1, V2)) end end}.
'dn--un--__Impl_Show_Method'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_Method'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Method'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_REPLOpt'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_REPLOpt'('erased', V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_REPLOpt'('erased', V3, V4)) end end end}.
'dn--un--__Impl_Pretty_REPLEval'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_REPLEval'('erased', V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_REPLEval'('erased', V3, V4)) end end end}.
'dn--un--__Impl_HasNames_SyntaxInfo'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_SyntaxInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_SyntaxInfo'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_IFaceInfo'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_IFaceInfo'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_IFaceInfo'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_(ANameMap $a)'(V0, V1) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_(ANameMap $a)'('erased', V1, V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(ANameMap $a)'('erased', V1, V4, V5)) end end}.
'dn--un--__Impl_Eq_Pass'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_Pass'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_Pass'(V2, V3)) end end}.
'dn--un--==_Eq_Pass'(V0, V1) -> case V0 of {'Idris.Idris.Syntax.Single'} -> (fun () -> case V1 of {'Idris.Idris.Syntax.Single'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Idris.Syntax.AsType'} -> (fun () -> case V1 of {'Idris.Idris.Syntax.AsType'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Idris.Syntax.AsDef'} -> (fun () -> case V1 of {'Idris.Idris.Syntax.AsDef'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--/=_Eq_Pass'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_Pass'(V0, V1)))).
'un--typePass'(V0) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('dn--un--==_Eq_Pass'(V0, {'Idris.Idris.Syntax.Single'})), fun () -> ('dn--un--==_Eq_Pass'(V0, {'Idris.Idris.Syntax.AsType'})) end)).
'un--showUpdate'(V0) -> case V0 of {'Idris.Idris.Syntax.PSetField', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('dn--un--show_Show_PTerm'(V2)))))) end(E0, E1)); {'Idris.Idris.Syntax.PSetFieldApp', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"."/utf8>>, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" $= "/utf8>>, ('dn--un--show_Show_PTerm'(V4)))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showDo'(V0) -> case V0 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V1, V2) -> ('dn--un--show_Show_PTerm'(V2)) end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" <- "/utf8>>, ('dn--un--show_Show_PTerm'(V6)))))) end(E2, E3, E4, E5)); {'Idris.Idris.Syntax.DoBindPat', E6, E7, E8, E9} -> (fun (V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" <- "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V9)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V22)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V23, V24)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V25) -> ('un--showAlt'(V25)) end))(V10)))))))) end(E6, E7, E8, E9)); {'Idris.Idris.Syntax.DoLet', E10, E11, E12, E13, E14, E15} -> (fun (V26, V27, V28, V29, V30, V31) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V28)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('dn--un--show_Show_PTerm'(V31)))))))) end(E10, E11, E12, E13, E14, E15)); {'Idris.Idris.Syntax.DoLetPat', E16, E17, E18, E19, E20} -> (fun (V32, V33, V34, V35, V36) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V33)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V35)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V48)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V49, V50)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V51) -> ('un--showAlt'(V51)) end))(V36)))))))))) end(E16, E17, E18, E19, E20)); {'Idris.Idris.Syntax.DoLetLocal', E21, E22} -> (fun (V52, V53) -> <<"let { << definitions >>  }"/utf8>> end(E21, E22)); {'Idris.Idris.Syntax.DoRewrite', E23, E24} -> (fun (V54, V55) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rewrite "/utf8>>, ('dn--un--show_Show_PTerm'(V55)))) end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showAlt'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" => "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V3)), <<";"/utf8>>)))))))) end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8, E9} -> (fun (V5, V6, V7, V8, V9, V10) -> <<" | <<with alts not possible>>;"/utf8>> end(E4, E5, E6, E7, E8, E9)); {'Idris.Idris.Syntax.MkImpossible', E10, E11} -> (fun (V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" | "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_PTerm'(V12)), <<" impossible;"/utf8>>)))) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--papply'(V0, V1, V2) -> case V2 of [] -> V1; [E0 | E1] -> (fun (V3, V4) -> ('un--papply'(V0, {'Idris.Idris.Syntax.PApp', V0, V1, V3}, V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mapPTermM'(V0, V1) -> ('nested--14828-4770--in--un--goPTerm'(V0, V1)).
'un--isPDef'(V0) -> case V0 of {'Idris.Idris.Syntax.PDef', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V2}} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--initSyntax'() -> {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', <<"="/utf8>>, {'Idris.Builtin.MkPair', {'Idris.Idris.Syntax.Infix'}, 0}, ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'('erased')))), ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', <<"-"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'('erased')))), ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'('erased')), [], ('Idris.Idris2.Libraries.Data.ANameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), [], [], {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.MkFC', <<"(default)"/utf8>>, {'Idris.Builtin.MkPair', 0, 0}, {'Idris.Builtin.MkPair', 0, 0}}, {'Idris.Core.Name.UN', <<"main"/utf8>>}}}.
'un--getPTypeDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V1 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPTermLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V3, V4, V5, V6, V7, V8) -> V3 end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E8, E9, E10, E11, E12, E13} -> (fun (V9, V10, V11, V12, V13, V14) -> V9 end(E8, E9, E10, E11, E12, E13)); {'Idris.Idris.Syntax.PLet', E14, E15, E16, E17, E18, E19, E20} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V15 end(E14, E15, E16, E17, E18, E19, E20)); {'Idris.Idris.Syntax.PCase', E21, E22, E23} -> (fun (V22, V23, V24) -> V22 end(E21, E22, E23)); {'Idris.Idris.Syntax.PLocal', E24, E25, E26} -> (fun (V25, V26, V27) -> V25 end(E24, E25, E26)); {'Idris.Idris.Syntax.PUpdate', E27, E28} -> (fun (V28, V29) -> V28 end(E27, E28)); {'Idris.Idris.Syntax.PApp', E29, E30, E31} -> (fun (V30, V31, V32) -> V30 end(E29, E30, E31)); {'Idris.Idris.Syntax.PWithApp', E32, E33, E34} -> (fun (V33, V34, V35) -> V33 end(E32, E33, E34)); {'Idris.Idris.Syntax.PAutoApp', E35, E36, E37} -> (fun (V36, V37, V38) -> V36 end(E35, E36, E37)); {'Idris.Idris.Syntax.PNamedApp', E38, E39, E40, E41} -> (fun (V39, V40, V41, V42) -> V39 end(E38, E39, E40, E41)); {'Idris.Idris.Syntax.PDelayed', E42, E43, E44} -> (fun (V43, V44, V45) -> V43 end(E42, E43, E44)); {'Idris.Idris.Syntax.PDelay', E45, E46} -> (fun (V46, V47) -> V46 end(E45, E46)); {'Idris.Idris.Syntax.PForce', E47, E48} -> (fun (V48, V49) -> V48 end(E47, E48)); {'Idris.Idris.Syntax.PSearch', E49, E50} -> (fun (V50, V51) -> V50 end(E49, E50)); {'Idris.Idris.Syntax.PPrimVal', E51, E52} -> (fun (V52, V53) -> V52 end(E51, E52)); {'Idris.Idris.Syntax.PQuote', E53, E54} -> (fun (V54, V55) -> V54 end(E53, E54)); {'Idris.Idris.Syntax.PQuoteName', E55, E56} -> (fun (V56, V57) -> V56 end(E55, E56)); {'Idris.Idris.Syntax.PQuoteDecl', E57, E58} -> (fun (V58, V59) -> V58 end(E57, E58)); {'Idris.Idris.Syntax.PUnquote', E59, E60} -> (fun (V60, V61) -> V60 end(E59, E60)); {'Idris.Idris.Syntax.PRunElab', E61, E62} -> (fun (V62, V63) -> V62 end(E61, E62)); {'Idris.Idris.Syntax.PHole', E63, E64, E65} -> (fun (V64, V65, V66) -> V64 end(E63, E64, E65)); {'Idris.Idris.Syntax.PType', E66} -> (fun (V67) -> V67 end(E66)); {'Idris.Idris.Syntax.PAs', E67, E68, E69, E70} -> (fun (V68, V69, V70, V71) -> V68 end(E67, E68, E69, E70)); {'Idris.Idris.Syntax.PDotted', E71, E72} -> (fun (V72, V73) -> V72 end(E71, E72)); {'Idris.Idris.Syntax.PImplicit', E73} -> (fun (V74) -> V74 end(E73)); {'Idris.Idris.Syntax.PInfer', E74} -> (fun (V75) -> V75 end(E74)); {'Idris.Idris.Syntax.POp', E75, E76, E77, E78} -> (fun (V76, V77, V78, V79) -> V76 end(E75, E76, E77, E78)); {'Idris.Idris.Syntax.PPrefixOp', E79, E80, E81} -> (fun (V80, V81, V82) -> V80 end(E79, E80, E81)); {'Idris.Idris.Syntax.PSectionL', E82, E83, E84} -> (fun (V83, V84, V85) -> V83 end(E82, E83, E84)); {'Idris.Idris.Syntax.PSectionR', E85, E86, E87} -> (fun (V86, V87, V88) -> V86 end(E85, E86, E87)); {'Idris.Idris.Syntax.PEq', E88, E89, E90} -> (fun (V89, V90, V91) -> V89 end(E88, E89, E90)); {'Idris.Idris.Syntax.PBracketed', E91, E92} -> (fun (V92, V93) -> V92 end(E91, E92)); {'Idris.Idris.Syntax.PString', E93, E94} -> (fun (V94, V95) -> V94 end(E93, E94)); {'Idris.Idris.Syntax.PMultiline', E95, E96, E97} -> (fun (V96, V97, V98) -> V96 end(E95, E96, E97)); {'Idris.Idris.Syntax.PDoBlock', E98, E99, E100} -> (fun (V99, V100, V101) -> V99 end(E98, E99, E100)); {'Idris.Idris.Syntax.PBang', E101, E102} -> (fun (V102, V103) -> V102 end(E101, E102)); {'Idris.Idris.Syntax.PIdiom', E103, E104} -> (fun (V104, V105) -> V104 end(E103, E104)); {'Idris.Idris.Syntax.PList', E105, E106} -> (fun (V106, V107) -> V106 end(E105, E106)); {'Idris.Idris.Syntax.PPair', E107, E108, E109} -> (fun (V108, V109, V110) -> V108 end(E107, E108, E109)); {'Idris.Idris.Syntax.PDPair', E110, E111, E112, E113} -> (fun (V111, V112, V113, V114) -> V111 end(E110, E111, E112, E113)); {'Idris.Idris.Syntax.PUnit', E114} -> (fun (V115) -> V115 end(E114)); {'Idris.Idris.Syntax.PIfThenElse', E115, E116, E117, E118} -> (fun (V116, V117, V118, V119) -> V116 end(E115, E116, E117, E118)); {'Idris.Idris.Syntax.PComprehension', E119, E120, E121} -> (fun (V120, V121, V122) -> V120 end(E119, E120, E121)); {'Idris.Idris.Syntax.PRewrite', E122, E123, E124} -> (fun (V123, V124, V125) -> V123 end(E122, E123, E124)); {'Idris.Idris.Syntax.PRange', E125, E126, E127, E128} -> (fun (V126, V127, V128, V129) -> V126 end(E125, E126, E127, E128)); {'Idris.Idris.Syntax.PRangeStream', E129, E130, E131} -> (fun (V130, V131, V132) -> V130 end(E129, E130, E131)); {'Idris.Idris.Syntax.PPostfixApp', E132, E133, E134} -> (fun (V133, V134, V135) -> V133 end(E132, E133, E134)); {'Idris.Idris.Syntax.PPostfixAppPartial', E135, E136} -> (fun (V136, V137) -> V136 end(E135, E136)); {'Idris.Idris.Syntax.PUnifyLog', E137, E138, E139} -> (fun (V138, V139, V140) -> V138 end(E137, E138, E139)); {'Idris.Idris.Syntax.PWithUnambigNames', E140, E141, E142} -> (fun (V141, V142, V143) -> V141 end(E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.PClaim', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V1 end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.PDef', E5, E6} -> (fun (V6, V7) -> V6 end(E5, E6)); {'Idris.Idris.Syntax.PData', E7, E8, E9, E10} -> (fun (V8, V9, V10, V11) -> V8 end(E7, E8, E9, E10)); {'Idris.Idris.Syntax.PParameters', E11, E12, E13} -> (fun (V12, V13, V14) -> V12 end(E11, E12, E13)); {'Idris.Idris.Syntax.PUsing', E14, E15, E16} -> (fun (V15, V16, V17) -> V15 end(E14, E15, E16)); {'Idris.Idris.Syntax.PReflect', E17, E18} -> (fun (V18, V19) -> V18 end(E17, E18)); {'Idris.Idris.Syntax.PInterface', E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V20 end(E19, E20, E21, E22, E23, E24, E25, E26, E27)); {'Idris.Idris.Syntax.PImplementation', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V29 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); {'Idris.Idris.Syntax.PRecord', E39, E40, E41, E42, E43, E44, E45} -> (fun (V40, V41, V42, V43, V44, V45, V46) -> V40 end(E39, E40, E41, E42, E43, E44, E45)); {'Idris.Idris.Syntax.PMutual', E46, E47} -> (fun (V47, V48) -> V47 end(E46, E47)); {'Idris.Idris.Syntax.PFixity', E48, E49, E50, E51} -> (fun (V49, V50, V51, V52) -> V49 end(E48, E49, E50, E51)); {'Idris.Idris.Syntax.PNamespace', E52, E53, E54} -> (fun (V53, V54, V55) -> V53 end(E52, E53, E54)); {'Idris.Idris.Syntax.PTransform', E55, E56, E57, E58} -> (fun (V56, V57, V58, V59) -> V56 end(E55, E56, E57, E58)); {'Idris.Idris.Syntax.PRunElabDecl', E59, E60} -> (fun (V60, V61) -> V60 end(E59, E60)); {'Idris.Idris.Syntax.PDirective', E61, E62} -> (fun (V62, V63) -> V62 end(E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPDataDeclLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> V1 end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E5, E6, E7} -> (fun (V6, V7, V8) -> V6 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPClauseLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V1 end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E4, E5, E6, E7, E8, E9} -> (fun (V5, V6, V7, V8, V9, V10) -> V5 end(E4, E5, E6, E7, E8, E9)); {'Idris.Idris.Syntax.MkImpossible', E10, E11} -> (fun (V11, V12) -> V11 end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getLoc'(V0) -> case V0 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); {'Idris.Idris.Syntax.DoBind', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> V3 end(E2, E3, E4, E5)); {'Idris.Idris.Syntax.DoBindPat', E6, E7, E8, E9} -> (fun (V7, V8, V9, V10) -> V7 end(E6, E7, E8, E9)); {'Idris.Idris.Syntax.DoLet', E10, E11, E12, E13, E14, E15} -> (fun (V11, V12, V13, V14, V15, V16) -> V11 end(E10, E11, E12, E13, E14, E15)); {'Idris.Idris.Syntax.DoLetPat', E16, E17, E18, E19, E20} -> (fun (V17, V18, V19, V20, V21) -> V17 end(E16, E17, E18, E19, E20)); {'Idris.Idris.Syntax.DoLetLocal', E21, E22} -> (fun (V22, V23) -> V22 end(E21, E22)); {'Idris.Idris.Syntax.DoRewrite', E23, E24} -> (fun (V24, V25) -> V24 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--definedInData'(V0) -> case V0 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> [V2 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V6) -> ('nested--11563-1710--in--un--getName'(V1, V3, V4, V5, V2, V6)) end, V5))] end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E5, E6, E7} -> (fun (V7, V8, V9) -> [V8 | []] end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--definedIn'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.Syntax.PClaim', E2, E3, E4, E5, E6} -> (fun (V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.MkPTy', E7, E8, E9, E10, E11} -> (fun (V8, V9, V10, V11, V12) -> [V10 | ('un--definedIn'(V2))] end(E7, E8, E9, E10, E11)); _ -> ('un--definedIn'(V2)) end end(E2, E3, E4, E5, E6)); {'Idris.Idris.Syntax.PData', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--definedInData'(V16)), ('un--definedIn'(V2)))) end(E12, E13, E14, E15)); {'Idris.Idris.Syntax.PParameters', E16, E17, E18} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--definedIn'(V19)), ('un--definedIn'(V2)))) end(E16, E17, E18)); {'Idris.Idris.Syntax.PUsing', E19, E20, E21} -> (fun (V20, V21, V22) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--definedIn'(V22)), ('un--definedIn'(V2)))) end(E19, E20, E21)); {'Idris.Idris.Syntax.PNamespace', E22, E23, E24} -> (fun (V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--definedIn'(V25)), ('un--definedIn'(V2)))) end(E22, E23, E24)); _ -> ('un--definedIn'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--defPass'(V0) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('dn--un--==_Eq_Pass'(V0, {'Idris.Idris.Syntax.Single'})), fun () -> ('dn--un--==_Eq_Pass'(V0, {'Idris.Idris.Syntax.AsDef'})) end)).
'un--OpStr'() -> {'Idris.Core.Name.Name'}.
