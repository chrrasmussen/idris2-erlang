-module('Idris.Idris2.Core.Unify').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--search'/11,
  'case--checkDots-20360'/6,
  'case--case block in checkDots,checkConstraint-20274'/13,
  'case--case block in case block in checkDots,checkConstraint-20156'/17,
  'case--case block in checkDots,checkConstraint-20071'/16,
  'case--checkDots,checkConstraint-20028'/13,
  'case--case block in case block in checkDots,checkConstraint-19887'/22,
  'case--case block in checkDots,checkConstraint-19842'/21,
  'case--checkDots,checkConstraint-19749'/14,
  'case--checkDots,getHoleName-19653'/5,
  'case--case block in checkArgsSame-19567'/11,
  'case--checkArgsSame-19535'/6,
  'case--case block in checkArgsSame,anySame-19445'/14,
  'case--checkArgsSame,anySame-19399'/9,
  'case--giveUpConstraints,constraintToHole-19272'/7,
  'case--case block in case block in case block in retryGuess-19110'/17,
  'case--case block in case block in case block in retryGuess-19001'/16,
  'case--case block in case block in retryGuess-18915'/17,
  'case--case block in case block in retryGuess-18849'/13,
  'case--case block in case block in case block in retryGuess-18792'/17,
  'case--case block in case block in case block in retryGuess-18635'/17,
  'case--case block in case block in case block in retryGuess-18545'/16,
  'case--case block in case block in case block in retryGuess-18394'/16,
  'case--case block in case block in retryGuess-18326'/16,
  'case--case block in case block in retryGuess-18265'/13,
  'case--case block in case block in retryGuess-18197'/14,
  'case--case block in case block in case block in retryGuess-18107'/14,
  'case--case block in case block in retryGuess-17987'/14,
  'case--case block in retryGuess-17913'/11,
  'case--retryGuess-17873'/9,
  'case--case block in retry-17750'/12,
  'case--case block in case block in retry-17597'/13,
  'case--case block in case block in retry-17500'/15,
  'case--case block in retry-17398'/14,
  'case--retry-17340'/6,
  'case--case block in retry,definedN-17183'/12,
  'case--retry,definedN-17160'/10,
  'case--case block in setInvertible-17081'/6,
  'case--setInvertible-17043'/5,
  'case--unifyD-16942'/11,
  'case--unifyWithLazyD-16699'/11,
  'case--unifyD-16581'/11,
  'case--unifyWithLazyD-16400'/11,
  'case--case block in unifyWithLazyD-16347'/12,
  'case--unifyWithLazyD-16275'/12,
  'case--case block in unifyD-16094'/18,
  'case--unifyD-15996'/17,
  'case--case block in unifyD-15823'/18,
  'case--unifyD-15725'/17,
  'case--getEtaType-15459'/9,
  'case--getEtaType-15379'/9,
  'case--unifyNoEta-15236'/11,
  'case--unifyNoEta-14935'/19,
  'case--unifyNoEta-14771'/18,
  'case--unifyBothBinders-14434'/22,
  'case--case block in unifyBothBinders-14125'/27,
  'case--unifyBothBinders-13942'/22,
  'case--unifyBothApps-13725'/18,
  'case--unifyBothApps-13608'/18,
  'case--unifyBothApps-13528'/15,
  'case--case block in unifyBothApps-13408'/21,
  'case--unifyBothApps-13277'/18,
  'case--unifyBothApps,localsIn-13162'/20,
  'case--unifyBothApps-12969'/20,
  'case--unifyBothApps-12870'/17,
  'case--unifyApp-12797'/12,
  'case--unifyApp-12720'/12,
  'case--unifyApp-12505'/19,
  'case--unifyApp-12414'/13,
  'case--case block in case block in case block in case block in case block in unifyHole-12014'/30,
  'case--case block in case block in case block in case block in unifyHole-11877'/29,
  'case--case block in case block in case block in unifyHole-11817'/27,
  'case--case block in case block in case block in unifyHole-11705'/26,
  'case--case block in case block in unifyHole-11626'/23,
  'case--case block in unifyHole-11581'/21,
  'case--case block in case block in case block in unifyHole-11355'/22,
  'case--case block in case block in unifyHole-11309'/20,
  'case--case block in unifyHole-11270'/18,
  'case--unifyHole-11227'/17,
  'case--case block in solveHole-11046'/19,
  'case--solveHole-10960'/19,
  'case--postponePatVar-10858'/15,
  'case--case block in unifyHoleApp-10648'/21,
  'case--unifyHoleApp-10606'/19,
  'case--case block in case block in case block in unifyInvertible-10083'/25,
  'case--case block in case block in unifyInvertible-10005'/21,
  'case--case block in unifyInvertible-9956'/20,
  'case--unifyInvertible-9885'/16,
  'case--headsConvert-9762'/9,
  'case--getArgTypes-9662'/12,
  'case--case block in unifyIfEq-9576'/11,
  'case--unifyIfEq-9531'/11,
  'case--tooBig-9344'/6,
  'case--tooBig,tooBigArgs-9308'/9,
  'case--isDefInvertible-9172'/5,
  'case--case block in case block in case block in solveIfUndefined-9032'/19,
  'case--case block in case block in solveIfUndefined-8947'/18,
  'case--case block in solveIfUndefined-8876'/14,
  'case--solveIfUndefined-8838'/11,
  'case--instantiate-8763'/18,
  'case--instantiate-8672'/15,
  'case--instantiate,mkDef-8427'/20,
  'case--instantiate,mkDef-8293'/29,
  'case--instantiate,updateIVars-7722'/23,
  'case--case block in instantiate,updateIVar-7618'/26,
  'case--instantiate,updateIVar-7494'/26,
  'case--instantiate,updateIVar-7412'/23,
  'case--weakenNs-7085'/6,
  'case--case block in occursCheck-6965'/13,
  'case--occursCheck-6897'/9,
  'case--occursCheck,failOnStrongRigid-6758'/11,
  'case--occursCheck,failOnStrongRigid-6697'/14,
  'case--case block in patternEnvTm-6634'/9,
  'case--patternEnvTm-6593'/8,
  'case--patternEnvTm,updateVars-6520'/12,
  'case--getVarsTm-6422'/9,
  'case--case block in patternEnv-6363'/10,
  'case--patternEnv-6318'/9,
  'case--patternEnv,updateVars-6233'/12,
  'case--case block in toSubVars-6161'/6,
  'case--toSubVars-6145'/4,
  'case--getVars-6016'/9,
  'case--postponeS-5859'/11,
  'case--postpone-5780'/14,
  'case--postpone,undefinedN-5478'/13,
  'case--postpone,checkDefined-5384'/16,
  'case--case block in chaseMetas-5284'/7,
  'case--chaseMetas-5242'/5,
  'case--convertErrorS-5192'/8,
  'case--lower-4717'/1,
  'nested--10916-6495--in--un--updateVars'/8,
  'nested--10586-6208--in--un--updateVars'/8,
  'nested--11751-7818--in--un--updateIVarsPi'/25,
  'nested--11751-7819--in--un--updateIVarsB'/25,
  'nested--11727-7241--in--un--updateIVars'/18,
  'nested--11727-7240--in--un--updateIVar'/20,
  'nested--9664-5363--in--un--undefinedN'/12,
  'nested--13976-9275--in--un--tooBigArgs'/8,
  'nested--14193-10926--in--un--solutionHeadSame'/17,
  'nested--14206-13124--in--un--pv'/17,
  'nested--11727-7242--in--un--mkDef'/20,
  'nested--14206-13125--in--un--localsIn'/17,
  'nested--11727-7239--in--un--isSimple'/16,
  'nested--14185-10580--in--un--isPatName'/18,
  'nested--13976-9274--in--un--isFn'/7,
  'nested--14217-15323--in--un--isDelay'/9,
  'nested--10341-6002--in--un--inArgs'/10,
  'nested--25459-19628--in--un--getHoleName'/4,
  'nested--11129-6679--in--un--failOnStrongRigid'/10,
  'nested--22608-17135--in--un--definedN'/5,
  'nested--25025-19240--in--un--constraintToHole'/3,
  'nested--9664-5362--in--un--checkDefined'/12,
  'nested--25459-19629--in--un--checkConstraint'/3,
  'nested--25153-19371--in--un--anySame'/6,
  'nested--10472-6111--in--un--anyFirst'/4,
  'nested--24977-19197--in--un--afterStart'/7,
  'dn--un--weaken_Weaken_(IVars $vs)'/4,
  'dn--un--weakenNs_Weaken_(IVars $vs)'/5,
  'dn--un--unifyWithLazyD_Unify_Term'/9,
  'dn--un--unifyWithLazyD_Unify_NF'/8,
  'dn--un--unifyWithLazyD_Unify_Closure'/9,
  'dn--un--unifyD_Unify_Term'/9,
  'dn--un--unifyD_Unify_NF'/8,
  'dn--un--unifyD_Unify_Closure'/9,
  'dn--un--show_Show_UnifyMode'/1,
  'dn--un--show_Show_AddLazy'/1,
  'dn--un--showPrec_Show_AddLazy'/2,
  'dn--un--__Impl_Weaken_(IVars $vs)'/1,
  'dn--un--__Impl_Unify_Term'/0,
  'dn--un--__Impl_Unify_NF'/0,
  'dn--un--__Impl_Unify_Closure'/0,
  'dn--un--__Impl_Show_AddLazy'/0,
  'dn--un--__Impl_Eq_UnifyMode'/0,
  'dn--un--==_Eq_UnifyMode'/2,
  'dn--un--==_Eq_SolveMode'/2,
  'dn--un--/=_Eq_UnifyMode'/2,
  'un--unionAll'/1,
  'un--union'/2,
  'un--unifyWithLazyD'/3,
  'un--unifyWithLazy'/5,
  'un--unifyNoEta'/8,
  'un--unifyInvertible'/15,
  'un--unifyIfEq'/10,
  'un--unifyHoleApp'/12,
  'un--unifyHole'/14,
  'un--unifyD'/3,
  'un--unifyBothBinders'/14,
  'un--unifyBothApps'/12,
  'un--unifyArgs'/10,
  'un--unifyApp'/11,
  'un--unify'/5,
  'un--ufail'/4,
  'un--tooBig'/5,
  'un--toSubVars'/2,
  'un--success'/0,
  'un--solvedHole'/1,
  'un--solveIfUndefined'/6,
  'un--solveHole'/17,
  'un--solveConstraintsAfter'/6,
  'un--solveConstraints'/5,
  'un--setInvertible'/4,
  'un--retryGuess'/5,
  'un--retry'/5,
  'un--postponeS'/11,
  'un--postponePatVar'/12,
  'un--postpone'/11,
  'un--patternEnvTm'/6,
  'un--patternEnv'/6,
  'un--occursCheck'/8,
  'un--lower'/1,
  'un--isHoleApp'/2,
  'un--isDefInvertible'/4,
  'un--instantiate'/15,
  'un--inTerm'/0,
  'un--inSearch'/0,
  'un--inMatch'/0,
  'un--inLHS'/0,
  'un--headsConvert'/8,
  'un--giveUpConstraints'/3,
  'un--getVarsTm'/3,
  'un--getVars'/3,
  'un--getMetaNames'/3,
  'un--getIVars'/3,
  'un--getEtaType'/5,
  'un--getArgTypes'/4,
  'un--forceMeta'/4,
  'un--dumpArg'/4,
  'un--delayMeta'/5,
  'un--convertErrorS'/8,
  'un--convertError'/8,
  'un--constrain'/1,
  'un--checkDots'/3,
  'un--checkArgsSame'/3,
  'un--chaseMetas'/3
]).
'un--search'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"auto"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Initial target: "/utf8>> end, V9, V8))(V10))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"auto"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Running search with defaults "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V5)))) end))(V10))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V21 = (('Idris.Idris2.Core.AutoSearch':'un--searchType'(V0, V1, V2, V3, V4, V5, [], V6, V7, 0, ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V3, V9, V8)), V9, V8))(V10))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"auto"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Result"/utf8>> end, V9, V23))(V10))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E10} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V30) -> {'Idris.Prelude.Types.Right', V23} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--checkDots-20360'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> {'Idris.Core.UnifyState.MkUState', V6, V7, V8, V9, V10, [], V12, V13, V14, V15} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkDots,checkConstraint-20274'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Core.UnifyState.MkUState', V13, V14, V15, V16, V17, [], V19, V20, V21, V22} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkDots,checkConstraint-20156'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V11 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.UnifyState.MkUState', V17, V18, V19, V20, V21, [], V23, V24, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkDots,checkConstraint-20071'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> fun (V17) -> begin (V18 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V0, <<"unify.constraint"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Dot type"/utf8>> end, {'Idris.Core.Env.Nil'}, V16))(V17))), case V18 of {'Idris.Prelude.Types.Left', E1} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V20) -> begin (V32 = begin (V31 = ('erlang':'put'(V1, case V11 of {'Idris.Core.UnifyState.MkUState', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.UnifyState.MkUState', V21, V22, V23, V24, V25, [], V27, V28, V29, V30} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E13} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V2, V14, V7, V6, V17))), case V35 of {'Idris.Prelude.Types.Left', E15} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V2, V14, V7, V5, V17))), case V38 of {'Idris.Prelude.Types.Left', E17} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V40) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadDotPattern', V2, V10, V7, V4, V37, V40}, V17)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V41) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V10, V3, V41)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkDots,checkConstraint-20028'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Core.InternalError', E12} -> (fun (V13) -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E13} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V18) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V18 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V19 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14))), case V46 of {'Idris.Prelude.Types.Left', E42} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E44} -> (fun (V49) -> begin (V50 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V0, <<"unify.constraint"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Dot type"/utf8>> end, {'Idris.Core.Env.Nil'}, V49))(V14))), case V50 of {'Idris.Prelude.Types.Left', E45} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V52) -> begin (V64 = begin (V63 = ('erlang':'put'(V1, case V11 of {'Idris.Core.UnifyState.MkUState', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> {'Idris.Core.UnifyState.MkUState', V53, V54, V55, V56, V57, [], V59, V60, V61, V62} end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E57} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V66) -> begin (V67 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V2, V18, V7, V6, V14))), case V67 of {'Idris.Prelude.Types.Left', E59} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V69) -> begin (V70 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V2, V18, V7, V5, V14))), case V70 of {'Idris.Prelude.Types.Left', E61} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V72) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadDotPattern', V2, V10, V7, V4, V69, V72}, V14)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V10, V3, V14)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); _ -> fun (V73) -> begin (V85 = begin (V84 = ('erlang':'put'(V1, case V11 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> {'Idris.Core.UnifyState.MkUState', V74, V75, V76, V77, V78, [], V80, V81, V82, V83} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E10} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V87) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V12, V73)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in checkDots,checkConstraint-19887'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V20 of {'Idris.Core.Context.Hole', E0, E1} -> (fun (V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', 1} end end(E0, E1)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', 0} end end.
'case--case block in checkDots,checkConstraint-19842'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> case V21 of {'Idris.Core.Context.Hole', E1, E2} -> (fun (V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', 1} end end(E1, E2)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', 0} end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V26) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V10, V19, V26)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkDots,checkConstraint-19749'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = ('nested--25459-19628--in--un--getHoleName'(V0, V1, {'Idris.Core.TT.Meta', V10, V3, V14, []}, V16))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V38 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('dn--un--unifyD_Unify_Term'(V20, V21, V22, V23, V24, V25, V26, V27, V28)) end end end end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--unifyWithLazyD_Unify_Term'(V29, V30, V31, V32, V33, V34, V35, V36, V37)) end end end end end end end end end}, V2, V0, V1))(('un--inMatch'())))(V10))(V7))(V6))(V5))(V16))), case V38 of {'Idris.Prelude.Types.Left', E4} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E6} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V44) -> begin (V81 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V45) -> {'Idris.Prelude.Types.Right', 1} end end, fun () -> fun (V46) -> fun (V47) -> begin (V75 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V46, case V44 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V48 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V47))), case V75 of {'Idris.Prelude.Types.Left', E35} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V77) -> case V77 of {'Idris.Prelude.Types.Just', E37} -> (fun (V78) -> case V78 of {'Idris.Core.Context.Hole', E38, E39} -> (fun (V79, V80) -> {'Idris.Prelude.Types.Right', 1} end(E38, E39)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E37)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V10, V46, V47)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V19))(V16))), case V81 of {'Idris.Prelude.Types.Left', E40} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V83) -> begin (V88 = (('un--checkArgsSame'(V1, V0, case V40 of {'Idris.Core.Unify.MkUnifyResult', E42, E43, E44, E45} -> (fun (V84, V85, V86, V87) -> V86 end(E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V88 of {'Idris.Prelude.Types.Left', E46} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V90) -> case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Data.List':'un--isNil'('erased', case V40 of {'Idris.Core.Unify.MkUnifyResult', E48, E49, E50, E51} -> (fun (V91, V92, V93, V94) -> V91 end(E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V83, fun () -> V90 end)) end)) of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Dot pattern match fail"/utf8>>}, V16)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkDots,getHoleName-19653'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V8, V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V8}} end end(E3, E4, E5)); _ -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1, E2)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--case block in checkArgsSame-19567'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('un--checkArgsSame'(V3, V2, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkArgsSame-19535'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Core.Context.PMDef', E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11) -> case V8 of [] -> case V9 of {'Idris.Core.CaseTree.STerm', E6, E7} -> (fun (V12, V13) -> case V12 of 0 -> fun (V14) -> begin (V15 = (('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V13, V1))(V14))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> case V17 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> (('un--checkArgsSame'(V3, V2, V1))(V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('un--checkArgsSame'(V3, V2, V1)) end end(E6, E7)); _ -> ('un--checkArgsSame'(V3, V2, V1)) end; _ -> ('un--checkArgsSame'(V3, V2, V1)) end end(E1, E2, E3, E4, E5)); _ -> ('un--checkArgsSame'(V3, V2, V1)) end end(E0)); _ -> ('un--checkArgsSame'(V3, V2, V1)) end.
'case--case block in checkArgsSame,anySame-19445'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V6, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkArgsSame,anySame-19399'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Context.PMDef', E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14) -> case V11 of [] -> case V12 of {'Idris.Core.CaseTree.STerm', E6, E7} -> (fun (V15, V16) -> case V15 of 0 -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_Term'(V2, [], V7, {'Idris.Core.Env.Nil'}, V6, V16, V17))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> case V20 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> (('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V6, V5))(V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V6, V5)) end end(E6, E7)); _ -> ('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V6, V5)) end; _ -> ('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V6, V5)) end end(E1, E2, E3, E4, E5)); _ -> ('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V6, V5)) end end(E0)); _ -> ('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V6, V5)) end.
'case--giveUpConstraints,constraintToHole-19272'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Core.Context.BySearch', E1, E2, E3} -> (fun (V8, V9, V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Idris.Core.Name.Resolved', V4}, fun (V12) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', 0, ('Idris.Idris2.Core.Context':'un--holeInit'(1))}} end, V11)) end end(E1, E2, E3)); {'Idris.Core.Context.Guess', E4, E5, E6} -> (fun (V13, V14, V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Idris.Core.Name.Resolved', V4}, fun (V17) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', 0, ('Idris.Idris2.Core.Context':'un--holeInit'(1))}} end, V16)) end end(E4, E5, E6)); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0)); _ -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in case block in case block in retryGuess-19110'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V8 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkGlobalDef', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, {'Idris.Core.Context.Guess', V12, V11, V16}, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in retryGuess-19001'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V8 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkGlobalDef', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, {'Idris.Core.Context.PMDef', {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 0}, [], {'Idris.Core.CaseTree.STerm', 0, V12}, {'Idris.Core.CaseTree.STerm', 0, V12}, []}, V34, V35, V36} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in retryGuess-18915'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> begin (V38 = case V8 of {'Idris.Core.Context.MkGlobalDef', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkGlobalDef', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, {'Idris.Core.Context.PMDef', {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 0}, [], {'Idris.Core.CaseTree.STerm', 0, V12}, {'Idris.Core.CaseTree.STerm', 0, V12}, []}, V35, V36, V37} end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Resolved "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))) end, V12, V39))), case V40 of {'Idris.Prelude.Types.Left', E46} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V42) -> begin (V47 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V43) -> case V43 of {'Idris.Prelude.Types.Left', E48} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V46) -> ('Idris.Idris2.Core.Context':'un--addDef'(V6, {'Idris.Core.Name.Resolved', V0}, V38, V46)) end, V39))), case V47 of {'Idris.Prelude.Types.Left', E50} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Core.UnifyState':'un--removeGuess'(V5, V0, V39))), case V50 of {'Idris.Prelude.Types.Left', E52} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V52) -> {'Idris.Prelude.Types.Right', case V15 of {'Idris.Core.Unify.MkUnifyResult', E54, E55, E56, E57} -> (fun (V53, V54, V55, V56) -> V54 end(E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> begin (V78 = case V8 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> {'Idris.Core.Context.MkGlobalDef', V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, {'Idris.Core.Context.Guess', V12, V11, V16}, V75, V76, V77} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V79) -> begin (V84 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V80) -> case V80 of {'Idris.Prelude.Types.Left', E21} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V83) -> ('Idris.Idris2.Core.Context':'un--addDef'(V6, {'Idris.Core.Name.Resolved', V0}, V78, V83)) end, V79))), case V84 of {'Idris.Prelude.Types.Left', E23} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V86) -> {'Idris.Prelude.Types.Right', 1} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'case--case block in case block in retryGuess-18849'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V3 of {'Idris.Core.Unify.MatchArgs'} -> (fun () -> ('un--inMatch'()) end()); _ -> V4 end.
'case--case block in case block in case block in retryGuess-18792'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V8 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkGlobalDef', V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, {'Idris.Core.Context.Guess', V16, V11, V15}, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in retryGuess-18635'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> fun (V17) -> {'Idris.Prelude.Types.Right', V12} end end()); {'Idris.Core.Unify.AddForce', E0} -> (fun (V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', ('un--forceMeta'('erased', V18, V11, V12))} end end(E0)); {'Idris.Core.Unify.AddDelay', E1} -> (fun (V20) -> fun (V21) -> begin (V22 = (('Idris.Idris2.Core.GetType':'un--getType'([], V6, {'Idris.Core.Env.Nil'}, V12))(V21))), case V22 of {'Idris.Prelude.Types.Left', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Retry Delay (constrained)"/utf8>> end, V12, V21))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V24))(V21))), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> {'Idris.Prelude.Types.Right', ('un--delayMeta'([], V20, V11, V30, V12))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in retryGuess-18545'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V8 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkGlobalDef', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, {'Idris.Core.Context.PMDef', {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 0}, [], {'Idris.Core.CaseTree.STerm', 0, V15}, {'Idris.Core.CaseTree.STerm', 0, V15}, []}, V34, V35, V36} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in retryGuess-18394'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', V12} end end()); {'Idris.Core.Unify.AddForce', E0} -> (fun (V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', ('un--forceMeta'('erased', V17, V11, V12))} end end(E0)); {'Idris.Core.Unify.AddDelay', E1} -> (fun (V19) -> fun (V20) -> begin (V21 = (('Idris.Idris2.Core.GetType':'un--getType'([], V6, {'Idris.Core.Env.Nil'}, V12))(V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Retry Delay"/utf8>> end, V12, V20))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V23))(V20))), case V27 of {'Idris.Prelude.Types.Left', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Right', ('un--delayMeta'([], V19, V11, V29, V12))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in retryGuess-18326'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of [] -> fun (V16) -> begin (V21 = (('case--case block in case block in case block in retryGuess-18394'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, case V14 of {'Idris.Core.Unify.MkUnifyResult', E31, E32, E33, E34} -> (fun (V17, V18, V19, V20) -> V20 end(E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V21 of {'Idris.Prelude.Types.Left', E35} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V23) -> begin (V45 = case V8 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> {'Idris.Core.Context.MkGlobalDef', V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, {'Idris.Core.Context.PMDef', {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 0}, [], {'Idris.Core.CaseTree.STerm', 0, V23}, {'Idris.Core.CaseTree.STerm', 0, V23}, []}, V42, V43, V44} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V46 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Resolved "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))) end, V23, V16))), case V46 of {'Idris.Prelude.Types.Left', E58} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V48) -> begin (V53 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V49) -> case V49 of {'Idris.Prelude.Types.Left', E60} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V52) -> ('Idris.Idris2.Core.Context':'un--addDef'(V6, {'Idris.Core.Name.Resolved', V0}, V45, V52)) end, V16))), case V53 of {'Idris.Prelude.Types.Left', E62} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.UnifyState':'un--removeGuess'(V5, V0, V16))), case V56 of {'Idris.Prelude.Types.Left', E64} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V58) -> {'Idris.Prelude.Types.Right', case V14 of {'Idris.Core.Unify.MkUnifyResult', E66, E67, E68, E69} -> (fun (V59, V60, V61, V62) -> V60 end(E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V63) -> begin (V68 = (('case--case block in case block in case block in retryGuess-18635'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, case V14 of {'Idris.Core.Unify.MkUnifyResult', E0, E1, E2, E3} -> (fun (V64, V65, V66, V67) -> V67 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V63))), case V68 of {'Idris.Prelude.Types.Left', E4} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V70) -> begin (V92 = case V8 of {'Idris.Core.Context.MkGlobalDef', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> {'Idris.Core.Context.MkGlobalDef', V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, {'Idris.Core.Context.Guess', V70, V11, V15}, V89, V90, V91} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V97 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V93) -> case V93 of {'Idris.Prelude.Types.Left', E27} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V96) -> ('Idris.Idris2.Core.Context':'un--addDef'(V6, {'Idris.Core.Name.Resolved', V0}, V92, V96)) end, V63))), case V97 of {'Idris.Prelude.Types.Left', E29} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V99) -> {'Idris.Prelude.Types.Right', 1} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in retryGuess-18265'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V3 of {'Idris.Core.Unify.MatchArgs'} -> (fun () -> ('un--inMatch'()) end()); _ -> V4 end.
'case--case block in case block in retryGuess-18197'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V8 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkGlobalDef', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, {'Idris.Core.Context.PMDef', ('Idris.Idris2.Core.Context':'un--defaultPI'()), [], {'Idris.Core.CaseTree.STerm', 0, V13}, {'Idris.Core.CaseTree.STerm', 0, V13}, []}, V32, V33, V34} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in retryGuess-18107'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V3 of {'Idris.Core.Unify.LastChance'} -> (fun () -> fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise':'un--normaliseErr'(V6, V13))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V17, V14)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--case block in case block in retryGuess-17987'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.Core.DeterminingArg', E25, E26, E27, E28, E29, E30} -> (fun (V14, V15, V16, V17, V18, V19) -> fun (V20) -> begin (V42 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed (det "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)), <<")"/utf8>>)))))))) end, case V8 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V23 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V20))), case V42 of {'Idris.Prelude.Types.Left', E52} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V44) -> begin (V45 = ('un--setInvertible'(V6, V1, {'Idris.Core.Name.Resolved', V17}, V20))), case V45 of {'Idris.Prelude.Types.Left', E54} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V47) -> {'Idris.Prelude.Types.Right', 1} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25, E26, E27, E28, E29, E30)); _ -> fun (V48) -> begin (V70 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search failed at "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))))))) end, {'Idris.Core.Env.Nil'}, case V8 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V51 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V48))), case V70 of {'Idris.Prelude.Types.Left', E21} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V72) -> case V3 of {'Idris.Core.Unify.LastChance'} -> (fun () -> begin (V73 = (('Idris.Idris2.Core.Normalise':'un--normaliseErr'(V6, V13))(V48))), case V73 of {'Idris.Prelude.Types.Left', E23} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V75) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V75, V48)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', 1} end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in retryGuess-17913'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Context.BySearch', E0, E1, E2} -> (fun (V11, V12, V13) -> fun (V14) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'('erased', V6, V5, fun (V15) -> begin (V37 = ('un--search'([], V6, V5, V1, V11, ('dn--un--==_Eq_SolveMode'(V3, {'Idris.Core.Unify.Defaults'})), V12, V13, case V8 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V18 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Env.Nil'}, V15))), case V37 of {'Idris.Prelude.Types.Left', E24} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V39) -> begin (V61 = case V8 of {'Idris.Core.Context.MkGlobalDef', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> {'Idris.Core.Context.MkGlobalDef', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, {'Idris.Core.Context.PMDef', ('Idris.Idris2.Core.Context':'un--defaultPI'()), [], {'Idris.Core.CaseTree.STerm', 0, V39}, {'Idris.Core.CaseTree.STerm', 0, V39}, []}, V58, V59, V60} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V62 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Solved "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))) end, {'Idris.Core.Env.Nil'}, V39))(V15))), case V62 of {'Idris.Prelude.Types.Left', E47} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V64) -> begin (V69 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V65) -> case V65 of {'Idris.Prelude.Types.Left', E49} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V68) -> ('Idris.Idris2.Core.Context':'un--addDef'(V6, {'Idris.Core.Name.Resolved', V0}, V61, V68)) end, V15))), case V69 of {'Idris.Prelude.Types.Left', E51} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.UnifyState':'un--removeGuess'(V5, V0, V15))), case V72 of {'Idris.Prelude.Types.Left', E53} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V74) -> {'Idris.Prelude.Types.Right', 0} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V75) -> case V75 of {'Idris.Core.Core.DeterminingArg', E80, E81, E82, E83, E84, E85} -> (fun (V76, V77, V78, V79, V80, V81) -> fun (V82) -> begin (V104 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed (det "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V78)), <<")"/utf8>>)))))))) end, case V8 of {'Idris.Core.Context.MkGlobalDef', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106} -> (fun (V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V85 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V82))), case V104 of {'Idris.Prelude.Types.Left', E107} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V106) -> begin (V107 = ('un--setInvertible'(V6, V1, {'Idris.Core.Name.Resolved', V79}, V82))), case V107 of {'Idris.Prelude.Types.Left', E109} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V109) -> {'Idris.Prelude.Types.Right', 1} end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E80, E81, E82, E83, E84, E85)); _ -> fun (V110) -> begin (V132 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V6, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search failed at "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))))))) end, {'Idris.Core.Env.Nil'}, case V8 of {'Idris.Core.Context.MkGlobalDef', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131) -> V113 end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V110))), case V132 of {'Idris.Prelude.Types.Left', E76} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V134) -> case V3 of {'Idris.Core.Unify.LastChance'} -> (fun () -> begin (V135 = (('Idris.Idris2.Core.Normalise':'un--normaliseErr'(V6, V75))(V110))), case V135 of {'Idris.Prelude.Types.Left', E78} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V137) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V137, V110)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', 1} end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V14)) end end(E0, E1, E2)); {'Idris.Core.Context.Guess', E111, E112, E113} -> (fun (V138, V139, V140) -> case V140 of [E120 | E121] -> (fun (V141, V142) -> case V142 of [] -> begin (V143 = case V3 of {'Idris.Core.Unify.MatchArgs'} -> (fun () -> ('un--inMatch'()) end()); _ -> V4 end), fun (V144) -> begin (V145 = ('un--retry'(V6, V5, V143, V141, V144))), case V145 of {'Idris.Prelude.Types.Left', E128} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V147) -> (('case--case block in case block in retryGuess-18326'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V141, V139, V138, V143, V147, case V147 of {'Idris.Core.Unify.MkUnifyResult', E130, E131, E132, E133} -> (fun (V148, V149, V150, V151) -> V148 end(E130, E131, E132, E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V144)) end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> begin (V152 = case V3 of {'Idris.Core.Unify.MatchArgs'} -> (fun () -> ('un--inMatch'()) end()); _ -> V4 end), fun (V153) -> begin (V156 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V154) -> fun (V155) -> ('un--retry'(V6, V5, V152, V154, V155)) end end, V140, []))(V153))), case V156 of {'Idris.Prelude.Types.Left', E122} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V158) -> begin (V159 = ('un--unionAll'(V158))), (('case--case block in case block in retryGuess-18915'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V140, V139, V138, V152, V158, V159, case V159 of {'Idris.Core.Unify.MkUnifyResult', E124, E125, E126, E127} -> (fun (V160, V161, V162, V163) -> V160 end(E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V153)) end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E120, E121)); _ -> begin (V164 = case V3 of {'Idris.Core.Unify.MatchArgs'} -> (fun () -> ('un--inMatch'()) end()); _ -> V4 end), fun (V165) -> begin (V168 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V166) -> fun (V167) -> ('un--retry'(V6, V5, V164, V166, V167)) end end, V140, []))(V165))), case V168 of {'Idris.Prelude.Types.Left', E114} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V170) -> begin (V171 = ('un--unionAll'(V170))), (('case--case block in case block in retryGuess-18915'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V140, V139, V138, V164, V170, V171, case V171 of {'Idris.Core.Unify.MkUnifyResult', E116, E117, E118, E119} -> (fun (V172, V173, V174, V175) -> V172 end(E116, E117, E118, E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V165)) end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E111, E112, E113)); _ -> fun (V176) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--retryGuess-17873'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', 1} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> begin (V11 = {'Idris.Prelude.Types.Just', V10}), ('case--case block in retryGuess-17913'(V0, V1, V2, V3, V4, V5, V6, V7, V10, V11, case V10 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V29 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in retry-17750'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> begin (V13 = ('Idris.Idris2.Core.UnifyState':'un--deleteConstraint'(V3, V1, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Right', V10} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V10} end end.
'case--case block in case block in retry-17597'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V10 of 0 -> fun () -> <<"(lazy allowed)"/utf8>> end; 1 -> fun () -> <<"(no lazy)"/utf8>> end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in retry-17500'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> fun (V15) -> begin (V20 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Success "/utf8>>, ('dn--un--show_Show_AddLazy'(case V13 of {'Idris.Core.Unify.MkUnifyResult', E6, E7, E8, E9} -> (fun (V16, V17, V18, V19) -> V19 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end))(V15))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.UnifyState':'un--deleteConstraint'(V3, V1, V15))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V13} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V26) -> begin (V31 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraints "/utf8>>, ('dn--un--show_Show_AddLazy'(case V13 of {'Idris.Core.Unify.MkUnifyResult', E0, E1, E2, E3} -> (fun (V27, V28, V29, V30) -> V30 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end))(V26))), case V31 of {'Idris.Prelude.Types.Left', E4} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V13} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in retry-17398'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V15) -> begin (V18 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V5, V0, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Retrying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('dn--un--show_Show_UnifyMode'(case V2 of {'Idris.Core.Unify.MkUnifyInfo', E0, E1} -> (fun (V16, V17) -> V17 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V8, V7))(V15))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V5, V0, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"....with"/utf8>> end, V8, V6))(V15))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), case V10 of 0 -> fun () -> <<"(lazy allowed)"/utf8>> end; 1 -> fun () -> <<"(no lazy)"/utf8>> end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V15))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V63 = (('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V10, fun () -> (((((('un--unifyWithLazy'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--unifyD_Unify_Term'(V27, V28, V29, V30, V31, V32, V33, V34, V35)) end end end end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--unifyWithLazyD_Unify_Term'(V36, V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end end}, V5, V0, V3))(V2))(V11))(V8))(V7))(V6)) end, fun () -> (((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('dn--un--unifyD_Unify_Term'(V45, V46, V47, V48, V49, V50, V51, V52, V53)) end end end end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('dn--un--unifyWithLazyD_Unify_Term'(V54, V55, V56, V57, V58, V59, V60, V61, V62)) end end end end end end end end end}, V5, V0, V3))(('un--lower'(V2))))(V11))(V8))(V7))(V6)) end))(V15))), case V63 of {'Idris.Prelude.Types.Left', E8} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V65) -> (('case--case block in case block in retry-17500'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V65, case V65 of {'Idris.Core.Unify.MkUnifyResult', E10, E11, E12, E13} -> (fun (V66, V67, V68, V69) -> V66 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V15)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.WhenUnifying', V5, V11, V8, V7, V6, V70}, V71)) end end, V14)) end; 1 -> fun (V72) -> begin (V76 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" still blocked on "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V74, V75)) end end}, V9)))))) end))(V72))), case V76 of {'Idris.Prelude.Types.Left', E14} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V78) -> begin (V79 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V5, V0, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"X"/utf8>> end, V8, V7))(V72))), case V79 of {'Idris.Prelude.Types.Left', E16} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V81) -> begin (V82 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V5, V0, <<"unify.retry"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Y"/utf8>> end, V8, V6))(V72))), case V82 of {'Idris.Prelude.Types.Left', E18} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V84) -> {'Idris.Prelude.Types.Right', ('un--constrain'(V1))} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--retry-17340'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', ('un--success'())} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Core.UnifyState.Resolved'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', ('un--success'())} end end()); {'Idris.Core.UnifyState.MkConstraint', E1, E2, E3, E4, E5, E6, E7} -> (fun (V9, V10, V11, V12, V13, V14, V15) -> fun (V16) -> begin (V18 = (('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V17) -> ('nested--22608-17135--in--un--definedN'(V0, V1, V2, V3, V17)) end, V12))(V16))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> (('case--case block in retry-17398'(V0, V1, V2, V3, V4, V9, V15, V14, V13, V12, V11, V10, V20, ('Idris.Idris2.Prelude.Basics':'un--||'(('dn--un--/=_Eq_UnifyMode'(case V2 of {'Idris.Core.Unify.MkUnifyInfo', E10, E11} -> (fun (V21, V22) -> V22 end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InTerm'})), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V20, fun () -> ('Idris.Idris2.Data.List':'un--isNil'('erased', V12)) end)) end))))(V16)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3, E4, E5, E6, E7)); {'Idris.Core.UnifyState.MkSeqConstraint', E12, E13, E14, E15, E16} -> (fun (V23, V24, V25, V26, V27) -> fun (V28) -> begin (V60 = (('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--unifyD_Unify_Term'(V29, V30, V31, V32, V33, V34, V35, V36, V37)) end end end end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('dn--un--unifyWithLazyD_Unify_Term'(V38, V39, V40, V41, V42, V43, V44, V45, V46)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Term'(V47, V48, V49, V50, V51, V52)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Term'(V53, V54, V55, V56, V57, V58, V59)) end end end end end end end}}, V23, V0, V3, V2, V24, V25, V26, V27))(V28))), case V60 of {'Idris.Prelude.Types.Left', E17} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V62) -> (('case--case block in retry-17750'(V0, V1, V2, V3, V4, V23, V27, V26, V25, V24, V62, case V62 of {'Idris.Core.Unify.MkUnifyResult', E19, E20, E21, E22} -> (fun (V63, V64, V65, V66) -> V63 end(E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V28)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in retry,definedN-17183'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Context.Hole', E0, E1} -> (fun (V12, V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', case V9 of {'Idris.Core.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V29 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0, E1)); {'Idris.Core.Context.BySearch', E23, E24, E25} -> (fun (V36, V37, V38) -> fun (V39) -> {'Idris.Prelude.Types.Right', 1} end end(E23, E24, E25)); {'Idris.Core.Context.Guess', E26, E27, E28} -> (fun (V40, V41, V42) -> fun (V43) -> {'Idris.Prelude.Types.Right', 1} end end(E26, E27, E28)); _ -> fun (V44) -> {'Idris.Prelude.Types.Right', 0} end end.
'case--retry,definedN-17160'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> begin (V11 = {'Idris.Prelude.Types.Just', V10}), ('case--case block in retry,definedN-17183'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, case V10 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V29 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--case block in setInvertible-17081'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, 0, V21, V22, V23, V24, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setInvertible-17043'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('Idris.Idris2.Core.Context':'un--addDef'(V2, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkGlobalDef', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, 0, V26, V27, V28, V29, V30, V31} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10)) end, V6)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V2, V1, V0, V32)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyD-16942'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; 1 -> fun (V12) -> begin (V13 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V0, V8, V4))(V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V0, V8, V3))(V12))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--unifyD_Unify_NF'(V19, V20, V21, V22, V23, V24, V25, V26)) end end end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('dn--un--unifyWithLazyD_Unify_NF'(V27, V28, V29, V30, V31, V32, V33, V34)) end end end end end end end end}, V0, V1, V2))(V7))(V6))(V5))(V15))(V18))(V12)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyWithLazyD-16699'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.equal"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Skipped unification (equal already): "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V3)))))))) end))(V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('un--success'())} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V8, V5, V4))(V15))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V8, V5, V3))(V15))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> ((((((('un--unifyWithLazy'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--unifyD_Unify_NF'(V22, V23, V24, V25, V26, V27, V28, V29)) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--unifyWithLazyD_Unify_NF'(V30, V31, V32, V33, V34, V35, V36, V37)) end end end end end end end end}, V0, V1, V2))(V7))(V6))(V5))(V18))(V21))(V15)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyD-16581'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.equal"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Skipped unification (equal already): "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V3)))))))) end))(V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('un--success'())} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V8, V5, V4))(V15))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V8, V5, V3))(V15))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--unifyD_Unify_NF'(V22, V23, V24, V25, V26, V27, V28, V29)) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--unifyWithLazyD_Unify_NF'(V30, V31, V32, V33, V34, V35, V36, V37)) end end end end end end end end}, V0, V1, V2))(V7))(V6))(V5))(V18))(V21))(V15)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyWithLazyD-16400'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Unify.MkUnifyResult', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> {'Idris.Core.Unify.MkUnifyResult', V11, V12, V13, {'Idris.Core.Unify.AddDelay', V5}} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unifyWithLazyD-16347'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Unify.MkUnifyResult', E0, E1, E2, E3} -> (fun (V12, V13, V14, V15) -> {'Idris.Core.Unify.MkUnifyResult', V12, V13, V14, {'Idris.Core.Unify.AddForce', V6}} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyWithLazyD-16275'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> fun (V12) -> ('un--postpone'(V0, V1, V2, 0, V9, V10, <<"Postponing in lazy"/utf8>>, V8, V7, V4, V12)) end; 1 -> fun (V13) -> begin (V30 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--unifyD_Unify_NF'(V14, V15, V16, V17, V18, V19, V20, V21)) end end end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--unifyWithLazyD_Unify_NF'(V22, V23, V24, V25, V26, V27, V28, V29)) end end end end end end end end}, V0, V1, V2))(('un--lower'(V10))))(V9))(V8))(V5))(V4))(V13))), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> {'Idris.Prelude.Types.Right', case V32 of {'Idris.Core.Unify.MkUnifyResult', E2, E3, E4, E5} -> (fun (V33, V34, V35, V36) -> {'Idris.Core.Unify.MkUnifyResult', V33, V34, V35, {'Idris.Core.Unify.AddForce', V6}} end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unifyD-16094'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> fun (V19) -> begin (V23 = begin (V20 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V16, V12, V11, V19))), case V20 of {'Idris.Prelude.Types.Left', E1} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V22) -> (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V15, V12, {'Idris.Core.TT.Bind', V9, V8, {'Idris.Core.TT.Lam', V6, V5, {'Idris.Core.TT.Explicit'}, V18}, {'Idris.Core.TT.App', V9, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V22)), {'Idris.Core.TT.Local', V9, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V19)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V23 of {'Idris.Prelude.Types.Left', E3} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expand"/utf8>> end, V12, V25, V19))), case V26 of {'Idris.Prelude.Types.Left', E5} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V28) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('dn--un--unifyD_Unify_NF'(V29, V30, V31, V32, V33, V34, V35, V36)) end end end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--unifyWithLazyD_Unify_NF'(V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end}, V0, V1, V2))(('un--lower'(V14))))(V13))(V12))(V25))(V10))(V19)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('un--unifyNoEta'(V1, V2, V0, ('un--lower'(V14)), V13, V12, V11, V10)) end.
'case--unifyD-15996'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> ('un--unifyNoEta'(V1, V2, V0, ('un--lower'(V14)), V13, V12, V11, V10)); 1 -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V15, V17))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V24 = begin (V21 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V20, V12, V10, V17))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> (('un--getEtaType'(V0, V1, V2, V12, V23))(V17)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> case V26 of {'Idris.Prelude.Types.Just', E6} -> (fun (V27) -> begin (V31 = begin (V28 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V20, V12, V11, V17))), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V15, V12, {'Idris.Core.TT.Bind', V9, V8, {'Idris.Core.TT.Lam', V6, V5, {'Idris.Core.TT.Explicit'}, V27}, {'Idris.Core.TT.App', V9, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V30)), {'Idris.Core.TT.Local', V9, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V17)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V31 of {'Idris.Prelude.Types.Left', E9} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expand"/utf8>> end, V12, V33, V17))), case V34 of {'Idris.Prelude.Types.Left', E11} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V36) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--unifyD_Unify_NF'(V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('dn--un--unifyWithLazyD_Unify_NF'(V45, V46, V47, V48, V49, V50, V51, V52)) end end end end end end end end}, V0, V1, V2))(('un--lower'(V14))))(V13))(V12))(V33))(V10))(V17)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> (('un--unifyNoEta'(V1, V2, V0, ('un--lower'(V14)), V13, V12, V11, V10))(V17)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unifyD-15823'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> fun (V19) -> begin (V23 = begin (V20 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V16, V12, V3, V19))), case V20 of {'Idris.Prelude.Types.Left', E1} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V22) -> (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V15, V12, {'Idris.Core.TT.Bind', V10, V9, {'Idris.Core.TT.Lam', V7, V6, {'Idris.Core.TT.Explicit'}, V18}, {'Idris.Core.TT.App', V10, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V22)), {'Idris.Core.TT.Local', V10, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V19)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V23 of {'Idris.Prelude.Types.Left', E3} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expand"/utf8>> end, V12, V25, V19))), case V26 of {'Idris.Prelude.Types.Left', E5} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V28) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('dn--un--unifyD_Unify_NF'(V29, V30, V31, V32, V33, V34, V35, V36)) end end end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--unifyWithLazyD_Unify_NF'(V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end}, V0, V1, V2))(V14))(V13))(V12))(V11))(V25))(V19)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('un--unifyNoEta'(V1, V2, V0, V14, V13, V12, V11, V3)) end.
'case--unifyD-15725'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> ('un--unifyNoEta'(V1, V2, V0, ('un--lower'(V14)), V13, V12, V11, V3)); 1 -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V15, V17))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V24 = begin (V21 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V20, V12, V11, V17))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> (('un--getEtaType'(V0, V1, V2, V12, V23))(V17)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> case V26 of {'Idris.Prelude.Types.Just', E6} -> (fun (V27) -> begin (V31 = begin (V28 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V20, V12, V3, V17))), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V15, V12, {'Idris.Core.TT.Bind', V10, V9, {'Idris.Core.TT.Lam', V7, V6, {'Idris.Core.TT.Explicit'}, V27}, {'Idris.Core.TT.App', V10, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V30)), {'Idris.Core.TT.Local', V10, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V17)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V31 of {'Idris.Prelude.Types.Left', E9} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expand"/utf8>> end, V12, V33, V17))), case V34 of {'Idris.Prelude.Types.Left', E11} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V36) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--unifyD_Unify_NF'(V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('dn--un--unifyWithLazyD_Unify_NF'(V45, V46, V47, V48, V49, V50, V51, V52)) end end end end end end end end}, V0, V1, V2))(V14))(V13))(V12))(V11))(V33))(V17)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> (('un--unifyNoEta'(V1, V2, V0, V14, V13, V12, V11, V3))(V17)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getEtaType-15459'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V13, V14, V15, V16) -> fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V6))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V21, V17))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V6, V0, V24, V4, V16, V17))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V27}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1, E2, E3)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--getEtaType-15379'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V9, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyNoEta-15236'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> ('un--unifyApp'(V9, V8, V0, 0, V7, V6, V5, V3, V2, V1, V4)); 1 -> fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"unify.noeta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Unify if Eq due to something with app"/utf8>> end))(V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> ('un--unifyIfEq'(V9, V8, V0, 0, V6, V7, V5, V4, {'Idris.Core.Value.NApp', V3, V2, V1}, V11)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyNoEta-14935'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> begin (V20 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V19)) end, V1))), begin (V22 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V21)) end, V6))), fun (V23) -> begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V15, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun (V24) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16))))} end, V23))), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> begin (V33 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V15, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V29) -> case V29 of {'Idris.Prelude.Types.Left', E2} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V31) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V32) -> ('un--dumpArg'(V0, V15, V11, V32)) end, V20)), V28)) end, V23))), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> begin (V41 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V15, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V37) -> case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V40) -> ('un--dumpArg'(V0, V15, V11, V40)) end, V22)), V36)) end, V23))), case V41 of {'Idris.Prelude.Types.Left', E8} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V43) -> (('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('dn--un--unifyD_Unify_Closure'(V44, V45, V46, V47, V48, V49, V50, V51, V52)) end end end end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V53, V54, V55, V56, V57, V58, V59, V60, V61)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V62, V63, V64, V65, V66, V67)) end end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Closure'(V68, V69, V70, V71, V72, V73, V74)) end end end end end end end}}, V0, V15, V14, V13, V12, V11, V20, V22))(V23)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; 1 -> fun (V75) -> ('un--convertError'('erased', V0, V15, V12, V11, {'Idris.Core.Value.NTCon', V5, V16, V3, V2, V1}, {'Idris.Core.Value.NTCon', V10, V17, V8, V7, V6}, V75)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyNoEta-14771'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V14))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> (('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('dn--un--unifyD_Unify_Closure'(V23, V24, V25, V26, V27, V28, V29, V30, V31)) end end end end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V32, V33, V34, V35, V36, V37, V38, V39, V40)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V41, V42, V43, V44, V45, V46)) end end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Closure'(V47, V48, V49, V50, V51, V52, V53)) end end end end end end end}}, V0, V15, V14, V13, V12, V11, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V54) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V54)) end, V1)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V55) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V55)) end, V6))))(V18)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V56) -> ('un--convertError'('erased', V0, V15, V12, V11, {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}, {'Idris.Core.Value.NDCon', V10, V9, V8, V7, V6}, V56)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyBothBinders-14434'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of 0 -> fun (V22) -> ('un--convertError'('erased', V0, V19, V16, V15, {'Idris.Core.Value.NBind', V14, V13, {'Idris.Core.TT.Lam', V4, V3, V2, V1}, V12}, {'Idris.Core.Value.NBind', V11, V10, {'Idris.Core.TT.Lam', V8, V7, V6, V5}, V9}, V22)) end; 1 -> fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V20, V23))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V26, V15, V1, V23))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> begin (V46 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--unifyD_Unify_NF'(V30, V31, V32, V33, V34, V35, V36, V37)) end end end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('dn--un--unifyWithLazyD_Unify_NF'(V38, V39, V40, V41, V42, V43, V44, V45)) end end end end end end end end}, V0, V19, V18))(('un--lower'(V17))))(V16))(V15))(V1))(V5))(V23))), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V19, V18, <<"x"/utf8>>, V23))), case V49 of {'Idris.Prelude.Types.Left', E6} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V51) -> begin (V52 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V4, V3, {'Idris.Core.TT.Explicit'}, V29}, V15}), begin (V53 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V26, V15, V1, V23))), case V53 of {'Idris.Prelude.Types.Left', E8} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V26, V15, V5, V23))), case V56 of {'Idris.Prelude.Types.Left', E10} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V58) -> begin (V59 = (((V12(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V15, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V51}))))(V23))), case V59 of {'Idris.Prelude.Types.Left', E12} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V61) -> begin (V62 = (((V9(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V15, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V51}))))(V23))), case V62 of {'Idris.Prelude.Types.Left', E14} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V26, V15, V61, V23))), case V65 of {'Idris.Prelude.Types.Left', E16} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V26, V15, V64, V23))), case V68 of {'Idris.Prelude.Types.Left', E18} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V70) -> begin (V89 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('dn--un--unifyD_Unify_Term'(V71, V72, V73, V74, V75, V76, V77, V78, V79)) end end end end end end end end end, fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('dn--un--unifyWithLazyD_Unify_Term'(V80, V81, V82, V83, V84, V85, V86, V87, V88)) end end end end end end end end end}, [V13 | V0], V19, V18))(('un--lower'(V17))))(V16))(V52))(('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', {'Idris.Core.TT.Bounds.Add', V13, V51, {'Idris.Core.TT.Bounds.None'}}, V67))))(('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', {'Idris.Core.TT.Bounds.Add', V13, V51, {'Idris.Core.TT.Bounds.None'}}, V70))))(V23))), case V89 of {'Idris.Prelude.Types.Left', E20} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V91) -> {'Idris.Prelude.Types.Right', ('un--union'(V48, V91))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unifyBothBinders-14125'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of [] -> fun (V27) -> begin (V28 = (((V12(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V15, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V24}))))(V27))), case V28 of {'Idris.Prelude.Types.Left', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V30) -> begin (V31 = (((V9(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V15, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V24}))))(V27))), case V31 of {'Idris.Prelude.Types.Left', E18} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V21, V15, V30, V27))), case V34 of {'Idris.Prelude.Types.Left', E20} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V21, V15, V33, V27))), case V37 of {'Idris.Prelude.Types.Left', E22} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V39) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('dn--un--unifyD_Unify_Term'(V40, V41, V42, V43, V44, V45, V46, V47, V48)) end end end end end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('dn--un--unifyWithLazyD_Unify_Term'(V49, V50, V51, V52, V53, V54, V55, V56, V57)) end end end end end end end end end}, [V13 | V0], V19, V18))(('un--lower'(V17))))(V16))(V25))(('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', {'Idris.Core.TT.Bounds.Add', V13, V24, {'Idris.Core.TT.Bounds.None'}}, V36))))(('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', {'Idris.Core.TT.Bounds.Add', V13, V24, {'Idris.Core.TT.Bounds.None'}}, V39))))(V27)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V58) -> begin (V59 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V21, V15, V1, V58))), case V59 of {'Idris.Prelude.Types.Left', E0} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V61) -> begin (V62 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V21, V15, V5, V58))), case V62 of {'Idris.Prelude.Types.Left', E2} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V64) -> begin (V69 = (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V18, V19, V16, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V65) -> fun (V66) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V65, V66)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V67) -> fun (V68) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V67, V68)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V15, {'Idris.Core.TT.Bind', V14, V13, {'Idris.Core.TT.Lam', V8, V7, {'Idris.Core.TT.Explicit'}, V61}, {'Idris.Core.TT.Local', V14, {'Idris.Prelude.Types.Nothing'}, 0}}, {'Idris.Core.TT.Bind', V14, V13, {'Idris.Core.TT.Pi', V8, V7, {'Idris.Core.TT.Explicit'}, V61}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V64))}, V26))(V58))), case V69 of {'Idris.Prelude.Types.Left', E4} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V71) -> begin (V72 = (((V12(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V15, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V24}))))(V58))), case V72 of {'Idris.Prelude.Types.Left', E6} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V74) -> begin (V75 = (((V9(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V15, {'Idris.Core.TT.App', V16, V71, {'Idris.Core.TT.Ref', V16, {'Idris.Core.TT.Bound'}, V24}}))))(V58))), case V75 of {'Idris.Prelude.Types.Left', E8} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V77) -> begin (V78 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V21, V15, V74, V58))), case V78 of {'Idris.Prelude.Types.Left', E10} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V80) -> begin (V81 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V21, V15, V77, V58))), case V81 of {'Idris.Prelude.Types.Left', E12} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V83) -> begin (V102 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('dn--un--unifyD_Unify_Term'(V84, V85, V86, V87, V88, V89, V90, V91, V92)) end end end end end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('dn--un--unifyWithLazyD_Unify_Term'(V93, V94, V95, V96, V97, V98, V99, V100, V101)) end end end end end end end end end}, [V13 | V0], V19, V18))(('un--lower'(V17))))(V16))(V25))(('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', {'Idris.Core.TT.Bounds.Add', V13, V24, {'Idris.Core.TT.Bounds.None'}}, V80))))(('Idris.Idris2.Core.TT':'un--refsToLocals'('erased', 'erased', {'Idris.Core.TT.Bounds.Add', V13, V24, {'Idris.Core.TT.Bounds.None'}}, V83))))(V58))), case V102 of {'Idris.Prelude.Types.Left', E14} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V104) -> {'Idris.Prelude.Types.Right', ('un--union'(V23, V104))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--unifyBothBinders-13942'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of 0 -> fun (V22) -> ('un--convertError'('erased', V0, V19, V16, V15, {'Idris.Core.Value.NBind', V14, V13, {'Idris.Core.TT.Pi', V4, V3, V2, V1}, V12}, {'Idris.Core.Value.NBind', V11, V10, {'Idris.Core.TT.Pi', V8, V7, V6, V5}, V9}, V22)) end; 1 -> fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V20, V23))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V26, V15, V1, V23))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> begin (V34 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V19, <<"unify.binder"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V19, V0, V26, V15, V5, V30))), case V31 of {'Idris.Prelude.Types.Left', E4} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V33) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unifying arg types "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V29)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V33))))))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V23))), case V34 of {'Idris.Prelude.Types.Left', E6} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V36) -> begin (V53 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--unifyD_Unify_NF'(V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('dn--un--unifyWithLazyD_Unify_NF'(V45, V46, V47, V48, V49, V50, V51, V52)) end end end end end end end end}, V0, V19, V18))(('un--lower'(V17))))(V16))(V15))(V1))(V5))(V23))), case V53 of {'Idris.Prelude.Types.Left', E8} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V55) -> begin (V56 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V19, V18, <<"x"/utf8>>, V23))), case V56 of {'Idris.Prelude.Types.Left', E10} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V58) -> begin (V59 = {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V8, V7, {'Idris.Core.TT.Explicit'}, V29}, V15}), (('case--case block in unifyBothBinders-14125'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V26, V29, V55, V58, V59, case V55 of {'Idris.Core.Unify.MkUnifyResult', E12, E13, E14, E15} -> (fun (V60, V61, V62, V63) -> V60 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23)) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyBothApps-13725'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> fun (V18) -> begin (V42 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V16, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V16))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> begin (V27 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V16, V0, V23, V11, V24, V25)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V26) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V26)) end, V6)), []))(V19))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> begin (V33 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V16, V0, V23, V11, V30, V31)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V32) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V32)) end, V1)), []))(V19))), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Matching args "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V36)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V37, V38)) end end}, V29)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V40, V41)) end end}, V35))))))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V18))), case V42 of {'Idris.Prelude.Types.Left', E6} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V44) -> (('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('dn--un--unifyD_Unify_Closure'(V45, V46, V47, V48, V49, V50, V51, V52, V53)) end end end end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V54, V55, V56, V57, V58, V59, V60, V61, V62)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V63, V64, V65, V66, V67, V68)) end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Closure'(V69, V70, V71, V72, V73, V74, V75)) end end end end end end end}}, V0, V16, V15, V14, V12, V11, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V76) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V76)) end, V6)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V77) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V77)) end, V1))))(V18)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('un--unifyApp'(V16, V15, V0, 1, V14, V12, V11, V10, V9, V6, {'Idris.Core.Value.NApp', V5, V4, V1})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyBothApps-13608'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> ('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--unifyD_Unify_Closure'(V18, V19, V20, V21, V22, V23, V24, V25, V26)) end end end end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V27, V28, V29, V30, V31, V32, V33, V34, V35)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V36, V37, V38, V39, V40, V41)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Closure'(V42, V43, V44, V45, V46, V47, V48)) end end end end end end end}}, V0, V16, V15, V14, V12, V11, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V49) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V49)) end, V6)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V50) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V50)) end, V1)))); 1 -> ('un--unifyApp'(V16, V15, V0, 1, V14, V12, V11, V10, V9, V6, {'Idris.Core.Value.NApp', V5, V4, V1})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyBothApps-13528'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> ('un--unifyApp'(V13, V12, V0, 0, V11, V10, V9, V8, {'Idris.Core.Value.NMeta', V3, V2, V1}, V4, {'Idris.Core.Value.NApp', V8, V7, V6})); 1 -> ('un--unifyApp'(V13, V12, V0, 1, V11, V10, V9, V8, V7, V6, {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V3, V2, V1}, V4})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unifyBothApps-13408'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of 0 -> ('un--unifyApp'(V15, V14, V0, 1, V13, V12, V11, V10, {'Idris.Core.Value.NMeta', V3, V2, V1}, V9, {'Idris.Core.Value.NApp', V8, {'Idris.Core.Value.NMeta', V6, V5, V4}, V7})); 1 -> ('un--unifyApp'(V15, V14, V0, 0, V13, V12, V11, V8, {'Idris.Core.Value.NMeta', V6, V5, V4}, V7, {'Idris.Core.Value.NApp', V10, {'Idris.Core.Value.NMeta', V3, V2, V1}, V9})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyBothApps-13277'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> ('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('dn--un--unifyD_Unify_Closure'(V18, V19, V20, V21, V22, V23, V24, V25, V26)) end end end end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V27, V28, V29, V30, V31, V32, V33, V34, V35)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V36, V37, V38, V39, V40, V41)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Closure'(V42, V43, V44, V45, V46, V47, V48)) end end end end end end end}}, V0, V15, V14, V13, V12, V11, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V49) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V49)) end, V9)))), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V50) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V50)) end, V7)))))); 1 -> fun (V51) -> begin (V52 = (('nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V1))(V51))), case V52 of {'Idris.Prelude.Types.Left', E0} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V54) -> begin (V55 = (('nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V4))(V51))), case V55 of {'Idris.Prelude.Types.Left', E2} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V54, V57)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V54, V57)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V9)), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V7)))) end)) end))), (('case--case block in unifyBothApps-13408'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V54, V57, V58, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(V58, fun () -> ('dn--un--==_Eq_UnifyMode'(case V13 of {'Idris.Core.Unify.MkUnifyInfo', E4, E5} -> (fun (V59, V60) -> V60 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--14206-13124--in--un--pv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V3)))) end))))(V51)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyBothApps,localsIn-13162'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V20, V21, V22) -> case V21 of {'Idris.Core.Value.NLocal', E3, E4} -> (fun (V23, V24) -> fun (V25) -> begin (V26 = (('nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17))(V25))), case V26 of {'Idris.Prelude.Types.Left', E5} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Right', (1 + V28)} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); _ -> ('nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17)) end end(E0, E1, E2)); _ -> ('nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17)) end.
'case--unifyBothApps-12969'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of 0 -> ('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('dn--un--unifyD_Unify_Closure'(V20, V21, V22, V23, V24, V25, V26, V27, V28)) end end end end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V29, V30, V31, V32, V33, V34, V35, V36, V37)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V38, V39, V40, V41, V42, V43)) end end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Closure'(V44, V45, V46, V47, V48, V49, V50)) end end end end end end end}}, V0, V18, V17, V16, V14, V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V51) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V51)) end, V11)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V52) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V52)) end, V9)))); 1 -> fun (V53) -> ('un--postpone'(V0, V18, V17, 0, V14, V16, <<"Postponing local app"/utf8>>, V13, {'Idris.Core.Value.NApp', V12, {'Idris.Core.Value.NLocal', V5, V3}, V11}, {'Idris.Core.Value.NApp', V10, {'Idris.Core.Value.NLocal', V8, V6}, V9}, V53)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyBothApps-12870'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> fun (V17) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; 1 -> fun (V18) -> ('un--convertError'('erased', V0, V15, V12, V11, {'Idris.Core.Value.NApp', V10, {'Idris.Core.Value.NLocal', V5, V3}, []}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V8, V6}, []}, V18)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyApp-12797'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> fun (V12) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; 1 -> ('un--postponeS'(V0, V9, V8, 0, 0, V6, V7, <<"Postponing constraint"/utf8>>, V5, {'Idris.Core.Value.NApp', V4, V3, V2}, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyApp-12720'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> fun (V12) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; 1 -> ('un--postponeS'(V0, V9, V8, 0, 1, V6, V7, <<"Postponing constraint"/utf8>>, V5, {'Idris.Core.Value.NApp', V4, V3, V2}, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyApp-12505'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> fun (V19) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; 1 -> ('un--postponeS'(V0, V16, V15, 0, V14, V12, V13, <<"Postponing var"/utf8>>, V11, {'Idris.Core.Value.NApp', V10, {'Idris.Core.Value.NLocal', V5, V3}, []}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V8, V6}, []})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyApp-12414'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> ('un--unifyIfEq'(V11, V10, V0, 0, V7, V8, V6, {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NRef', V2, V1}, V4}, V3, V13)) end; 1 -> fun (V14) -> ('un--unifyIfEq'(V11, V10, V0, 0, V7, V8, V6, V3, {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NRef', V2, V1}, V4}, V14)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in unifyHole-12014'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--postponeS'(V0, V12, V11, 0, V10, V8, V9, <<"Can\x{27}t shrink"/utf8>>, V7, {'Idris.Core.Value.NApp', V8, {'Idris.Core.Value.NMeta', V5, V4, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V30) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V30} end, V2))}, V1)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V31) -> fun (V32) -> ('un--solveHole'(V12, V11, V16, V0, V6, V9, V7, V5, V4, V3, V2, V17, V18, V26, V31, V1, V32)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in unifyHole-11877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Prelude.Types.Just', E0} -> (fun (V29) -> fun (V30) -> ('un--solveHole'(V12, V11, V16, V0, V6, V9, V7, V5, V4, V3, V2, V17, V18, V26, V29, V1, V30)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V12, V0, V13, V7, V1, V31))), case V32 of {'Idris.Prelude.Types.Left', E1} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V34) -> (('case--case block in case block in case block in case block in case block in unifyHole-12014'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V34, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V34, V18))))(V31)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in unifyHole-11817'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Prelude.Types.Just', E0} -> (fun (V27) -> begin (V28 = {'Idris.Prelude.Types.Just', V27}), ('case--case block in case block in case block in case block in unifyHole-11877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V27, V28, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V27, V18)))) end end(E0)); _ -> ('un--postponeS'(V0, V12, V11, 0, V10, V8, V9, <<"Occurs check failed"/utf8>>, V7, {'Idris.Core.Value.NApp', V8, {'Idris.Core.Value.NMeta', V5, V4, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V29) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V29} end, V2))}, V1)) end.
'case--case block in case block in case block in unifyHole-11705'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of 0 -> fun (V26) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V12, V0, V13, V7, V1, V26)) end; 1 -> fun (V27) -> {'Idris.Prelude.Types.Right', V24} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in unifyHole-11626'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Core.Context.Hole', E0, E1} -> (fun (V23, V24) -> fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V12, V0, V14, V7, V1, V25))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V72 = (('case--case block in case block in case block in unifyHole-11705'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V23, V24, V28, ('un--tooBig'('erased', 1, case case case V13 of {'Idris.Core.Context.MkDefs', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V33 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V59 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E4, E5, E6, E7, E8, E9, E10} -> (fun (V65, V66, V67, V68, V69, V70, V71) -> V70 end(E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V28))))(V25))), case V72 of {'Idris.Prelude.Types.Left', E47} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V74) -> begin (V75 = ('un--occursCheck'(V0, V12, V8, V7, V9, V5, V74, V25))), case V75 of {'Idris.Prelude.Types.Left', E49} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V77) -> case V77 of {'Idris.Prelude.Types.Just', E51} -> (fun (V78) -> begin (V79 = {'Idris.Prelude.Types.Just', V78}), (('case--case block in case block in case block in case block in unifyHole-11877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V23, V24, V28, V74, V78, V79, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V78, V18))))(V25)) end end(E51)); _ -> (('un--postponeS'(V0, V12, V11, 0, V10, V8, V9, <<"Occurs check failed"/utf8>>, V7, {'Idris.Core.Value.NApp', V8, {'Idris.Core.Value.NMeta', V5, V4, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V80) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V80} end, V2))}, V1))(V25)) end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('un--postponeS'(V0, V12, V11, 0, V10, V8, V9, <<"Delayed hole"/utf8>>, V7, {'Idris.Core.Value.NApp', V8, {'Idris.Core.Value.NMeta', V5, V4, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V81) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V81} end, V2))}, V1)) end.
'case--case block in unifyHole-11581'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> begin (V22 = {'Idris.Prelude.Types.Just', V21}), ('case--case block in case block in unifyHole-11626'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V22, case V21 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V40 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('un--postponePatVar'(V12, V11, V0, V10, V9, V8, V7, V5, V4, V3, V2, V1)) end.
'case--case block in case block in case block in unifyHole-11355'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of 0 -> ('un--unifyHoleApp'(V12, V11, V0, V10, V9, V8, V7, V5, V4, V3, V2, V1)); 1 -> ('un--postponePatVar'(V12, V11, V0, V10, V9, V8, V7, V5, V4, V3, V2, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in unifyHole-11309'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Core.Context.Hole', E0, E1} -> (fun (V20, V21) -> ('case--case block in case block in case block in unifyHole-11355'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V20, V21, case V17 of {'Idris.Core.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V36 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1)); _ -> ('un--postponePatVar'(V12, V11, V0, V10, V9, V8, V7, V5, V4, V3, V2, V1)) end.
'case--case block in unifyHole-11270'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> begin (V19 = {'Idris.Prelude.Types.Just', V18}), ('case--case block in case block in unifyHole-11309'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V18, V19, case V18 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V37 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('un--postponePatVar'(V12, V11, V0, V10, V9, V8, V7, V5, V4, V3, V2, V1)) end.
'case--unifyHole-11227'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V17) -> begin (V45 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V4}, case V13 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V17))), case V45 of {'Idris.Prelude.Types.Left', E27} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V47) -> begin (V48 = {'Idris.Prelude.Types.Nothing'}), case V47 of {'Idris.Prelude.Types.Just', E29} -> (fun (V49) -> begin (V50 = {'Idris.Prelude.Types.Just', V49}), (('case--case block in case block in unifyHole-11309'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V48, V49, V50, case V49 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V68 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V17)) end end(E29)); _ -> (('un--postponePatVar'(V12, V11, V0, V10, V9, V8, V7, V5, V4, V3, V2, V1))(V17)) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E51} -> (fun (V72) -> case V72 of {'Idris.Builtin.DPair.MkDPair', E52, E53} -> (fun (V73, V74) -> case V74 of {'Idris.Builtin.MkPair', E54, E55} -> (fun (V75, V76) -> fun (V77) -> begin (V105 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V4}, case V13 of {'Idris.Core.Context.MkDefs', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> V78 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V77))), case V105 of {'Idris.Prelude.Types.Left', E83} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V107) -> begin (V108 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V73, {'Idris.Builtin.MkPair', V75, V76}}}), case V107 of {'Idris.Prelude.Types.Just', E85} -> (fun (V109) -> begin (V110 = {'Idris.Prelude.Types.Just', V109}), (('case--case block in case block in unifyHole-11626'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V73, V75, V76, V108, V109, V110, case V109 of {'Idris.Core.Context.MkGlobalDef', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131) -> V128 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V77)) end end(E85)); _ -> (('un--postponePatVar'(V12, V11, V0, V10, V9, V8, V7, V5, V4, V3, V2, V1))(V77)) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in solveHole-11046'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> fun (V20) -> begin (V21 = ('un--instantiate'(V15, V14, V1, V0, V13, V12, V11, V10, V9, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V8)), V19, V6, V4, V3, V20))), case V21 of {'Idris.Prelude.Types.Left', E1} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('un--solvedHole'(V9))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t happen: Lost hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10))))}, V24)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--solveHole-10960'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> fun (V19) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; 1 -> fun (V20) -> begin (V48 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V9}, case V16 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V20))), case V48 of {'Idris.Prelude.Types.Left', E27} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V50) -> case V50 of {'Idris.Prelude.Types.Just', E29} -> (fun (V51) -> begin (V52 = ('un--instantiate'(V15, V14, V1, V0, V13, V12, V11, V10, V9, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V8)), V51, V6, V4, V3, V20))), case V52 of {'Idris.Prelude.Types.Left', E30} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V54) -> {'Idris.Prelude.Types.Right', ('un--solvedHole'(V9))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t happen: Lost hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10))))}, V20)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--postponePatVar-10858'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> fun (V15) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; 1 -> ('un--postponeS'(V0, V11, V10, 1, V9, V7, V8, <<"Not in pattern fragment"/utf8>>, V6, V12, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unifyHoleApp-10648'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of 0 -> fun (V21) -> ('un--unifyInvertible'(V16, V15, V0, V14, ('un--lower'(V13)), V12, V11, V10, V9, V8, V7, {'Idris.Prelude.Types.Nothing'}, fun (V22) -> {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V3, V2, V1}, V22} end, V4, V21)) end; 1 -> ('un--postponeS'(V0, V16, V15, 0, V14, V12, V13, <<"Postponing hole application"/utf8>>, V11, {'Idris.Core.Value.NApp', V12, {'Idris.Core.Value.NMeta', V10, V9, V8}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V23) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V23} end, V7))}, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyHoleApp-10606'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> begin (V41 = ('Idris.Idris2.Prelude.Basics':'un--||'(('nested--14185-10580--in--un--isPatName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V3)), fun () -> case V19 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V34 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))), case V41 of 0 -> fun (V42) -> ('un--unifyInvertible'(V16, V15, V0, V14, ('un--lower'(V13)), V12, V11, V10, V9, V8, V7, {'Idris.Prelude.Types.Nothing'}, fun (V43) -> {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V3, V2, V1}, V43} end, V4, V42)) end; 1 -> ('un--postponeS'(V0, V16, V15, 0, V14, V12, V13, <<"Postponing hole application"/utf8>>, V11, {'Idris.Core.Value.NApp', V12, {'Idris.Core.Value.NMeta', V10, V9, V8}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V44) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V44} end, V7))}, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V45) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V16, V5, V10, V45)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in unifyInvertible-10083'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> fun (V25) -> begin (V26 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"unify.invertible"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Unifying invertible"/utf8>> end))(V25))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> begin (V47 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--unifyD_Unify_Closure'(V29, V30, V31, V32, V33, V34, V35, V36, V37)) end end end end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V38, V39, V40, V41, V42, V43, V44, V45, V46)) end end end end end end end end end}, V0, V13, V12))(V10))(V9))(V8))(V20))(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V22))))(V25))), case V47 of {'Idris.Prelude.Types.Left', E2} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V49) -> begin (V57 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"unify.invertible"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraints "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V51, V52)) end end}, case V49 of {'Idris.Core.Unify.MkUnifyResult', E4, E5, E6, E7} -> (fun (V53, V54, V55, V56) -> V53 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end))(V25))), case V57 of {'Idris.Prelude.Types.Left', E8} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V59) -> begin (V77 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('dn--un--unifyD_Unify_NF'(V61, V62, V63, V64, V65, V66, V67, V68)) end end end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('dn--un--unifyWithLazyD_Unify_NF'(V69, V70, V71, V72, V73, V74, V75, V76)) end end end end end end end end}, V0, V13, V12))(V10))(V9))(V8))({'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NMeta', V7, V6, V5}, ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V60) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V60} end, V21))))}))((V2(('Idris.Idris2.Data.List':'un--reverse'('erased', V23))))))(V25))), case V77 of {'Idris.Prelude.Types.Left', E10} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V79) -> {'Idris.Prelude.Types.Right', ('un--union'(V49, V79))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V80) -> begin (V81 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"unify.invertible"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Unifying invertible"/utf8>> end))(V80))), case V81 of {'Idris.Prelude.Types.Left', E12} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V83) -> begin (V102 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('dn--un--unifyD_Unify_Closure'(V84, V85, V86, V87, V88, V89, V90, V91, V92)) end end end end end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V93, V94, V95, V96, V97, V98, V99, V100, V101)) end end end end end end end end end}, V0, V13, V12))(V10))(V9))(V8))(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V22))))(V20))(V80))), case V102 of {'Idris.Prelude.Types.Left', E14} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V104) -> begin (V112 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"unify.invertible"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraints "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V105) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V106, V107)) end end}, case V104 of {'Idris.Core.Unify.MkUnifyResult', E16, E17, E18, E19} -> (fun (V108, V109, V110, V111) -> V108 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end))(V80))), case V112 of {'Idris.Prelude.Types.Left', E20} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V114) -> begin (V132 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('dn--un--unifyD_Unify_NF'(V116, V117, V118, V119, V120, V121, V122, V123)) end end end end end end end end, fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('dn--un--unifyWithLazyD_Unify_NF'(V124, V125, V126, V127, V128, V129, V130, V131)) end end end end end end end end}, V0, V13, V12))(V10))(V9))(V8))((V2(('Idris.Idris2.Data.List':'un--reverse'('erased', V23))))))({'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NMeta', V7, V6, V5}, ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V115) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V115} end, V21))))}))(V80))), case V132 of {'Idris.Prelude.Types.Left', E22} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V134) -> {'Idris.Prelude.Types.Right', ('un--union'(V104, V134))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in unifyInvertible-10005'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> case V21 of [E2 | E3] -> (fun (V23, V24) -> case V22 of [E4 | E5] -> (fun (V25, V26) -> fun (V27) -> ('Idris.Idris2.Core.UnifyState':'un--tryUnify'('erased', V13, V12, ('case--case block in case block in case block in unifyInvertible-10083'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23, V24, V25, V26, ('Idris.Idris2.Prelude.Basics':'un--not'(V11)))), ('un--postponeS'(V0, V13, V12, 0, V11, V9, V10, <<"Postponing hole application [1]"/utf8>>, V8, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NMeta', V7, V6, V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V28) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V28} end, V4))}, (V2(V1)))), V27)) end end(E4, E5)); _ -> ('un--postponeS'(V0, V13, V12, 0, V11, V9, V10, <<"Postponing hole application [2]"/utf8>>, V8, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NMeta', V7, V6, V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V29) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V29} end, V4))}, (V2(V1)))) end end(E2, E3)); _ -> ('un--postponeS'(V0, V13, V12, 0, V11, V9, V10, <<"Postponing hole application [2]"/utf8>>, V8, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NMeta', V7, V6, V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V30) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V30} end, V4))}, (V2(V1)))) end end(E0, E1)); _ -> ('un--postponeS'(V0, V13, V12, 0, V11, V9, V10, <<"Postponing hole application [2]"/utf8>>, V8, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NMeta', V7, V6, V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V31) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V31} end, V4))}, (V2(V1)))) end.
'case--case block in unifyInvertible-9956'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of 0 -> begin (V20 = 0), ('case--case block in case block in unifyInvertible-10005'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V20, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', V4)), ('Idris.Idris2.Data.List':'un--reverse'('erased', V1))})) end; 1 -> fun (V21) -> ('un--postpone'(V0, V13, V12, 0, V9, V10, <<"Postponing hole application [3]"/utf8>>, V8, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NMeta', V7, V6, V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V22) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V22} end, V4))}, (V2(V1)), V21)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyInvertible-9885'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> fun (V17) -> begin (V21 = begin (V18 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V0, V14, V8, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V16))))(V17))), case V18 of {'Idris.Prelude.Types.Left', E1} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V20) -> (('un--getArgTypes'('erased', V14, V20, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V5, V4))))(V17)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V21 of {'Idris.Prelude.Types.Left', E3} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V23) -> begin (V31 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V25) -> fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V0, V14, V8, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V25))))(V26))), case V27 of {'Idris.Prelude.Types.Left', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V29) -> (('un--getArgTypes'('erased', V14, V29, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V30) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V30)) end, V1))))(V26)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V17))), case V31 of {'Idris.Prelude.Types.Left', E7} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V33) -> begin (V34 = (('un--headsConvert'(V0, V13, V12, V10, V9, V8, V23, V33))(V17))), case V34 of {'Idris.Prelude.Types.Left', E9} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V36) -> begin (V37 = {'Idris.Prelude.Types.Just', V16}), case V36 of 0 -> begin (V38 = 0), (('case--case block in case block in unifyInvertible-10005'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V16, V37, V23, V33, V38, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', V4)), ('Idris.Idris2.Data.List':'un--reverse'('erased', V1))}))(V17)) end; 1 -> ('un--postpone'(V0, V13, V12, 0, V9, V10, <<"Postponing hole application [3]"/utf8>>, V8, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NMeta', V7, V6, V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V39) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V39} end, V4))}, (V2(V1)), V17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V40) -> ('un--ufail'('erased', V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No such metavariable "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)))), V40)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--headsConvert-9762'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V9 of [E2 | E3] -> (fun (V11, V12) -> case V10 of [E4 | E5] -> (fun (V13, V14) -> fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V7, <<"unify.head"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Unifying head"/utf8>> end, V3, V11, V15))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V7, <<"unify.head"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<".........with"/utf8>> end, V3, V13, V15))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V38 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--unifyD_Unify_NF'(V22, V23, V24, V25, V26, V27, V28, V29)) end end end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--unifyWithLazyD_Unify_NF'(V30, V31, V32, V33, V34, V35, V36, V37)) end end end end end end end end}, V0, V7, V6))(V5))(V4))(V3))(V11))(V13))(V15))), case V38 of {'Idris.Prelude.Types.Left', E10} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V40) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--isNil'('erased', case V40 of {'Idris.Core.Unify.MkUnifyResult', E12, E13, E14, E15} -> (fun (V41, V42, V43, V44) -> V41 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', 1} end end end(E2, E3)); _ -> fun (V46) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1)); _ -> fun (V47) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--getArgTypes-9662'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', [V5 | V12]}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unifyIfEq-9576'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V6 of 0 -> fun (V11) -> ('un--postpone'(V0, V8, V7, 0, V5, V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postponing unifyIfEq "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(case V4 of {'Idris.Core.Unify.MkUnifyInfo', E0, E1} -> (fun (V12, V13) -> V12 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V3, V2, V1, V11)) end; 1 -> fun (V14) -> ('un--convertError'('erased', V0, V8, V5, V3, V2, V1, V14)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unifyIfEq-9531'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; 1 -> case V6 of 0 -> fun (V12) -> ('un--postpone'(V0, V8, V7, 0, V5, V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postponing unifyIfEq "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(case V4 of {'Idris.Core.Unify.MkUnifyInfo', E0, E1} -> (fun (V13, V14) -> V13 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V3, V2, V1, V12)) end; 1 -> fun (V15) -> ('un--convertError'('erased', V0, V8, V5, V3, V2, V1, V15)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tooBig-9344'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('nested--13976-9275--in--un--tooBigArgs'('erased', V1, V2, V3, V4, 0, V1, V3)); 1 -> ('nested--13976-9275--in--un--tooBigArgs'('erased', V1, V2, V3, V4, V4, (1 + V1), V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tooBig,tooBigArgs-9308'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> V5; 1 -> (1 + V5); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--isDefInvertible-9172'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V21 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, {'Idris.Core.Name.Resolved', V0}}, V28)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in solveIfUndefined-9032'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> fun (V20) -> begin (V21 = ('un--instantiate'(V8, V7, V0, V13, V4, ('un--inTerm'()), V6, V3, V2, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)), V19, V14, V5, V17, V20))), case V21 of {'Idris.Prelude.Types.Left', E1} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Right', 0} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t happen: no definition"/utf8>>}, V24)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in solveIfUndefined-8947'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V18) -> {'Idris.Prelude.Types.Right', 1} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> fun (V20) -> begin (V48 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, case V9 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V21 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V20))), case V48 of {'Idris.Prelude.Types.Left', E28} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V50) -> case V50 of {'Idris.Prelude.Types.Just', E30} -> (fun (V51) -> begin (V52 = ('un--instantiate'(V8, V7, V0, V13, V4, ('un--inTerm'()), V6, V3, V2, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)), V51, V14, V5, V19, V20))), case V52 of {'Idris.Prelude.Types.Left', E31} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V54) -> {'Idris.Prelude.Types.Right', 0} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t happen: no definition"/utf8>>}, V20)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in solveIfUndefined-8876'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', 1} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> case V15 of {'Idris.Builtin.DPair.MkDPair', E1, E2} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V18, V19) -> begin (V20 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V16, {'Idris.Builtin.MkPair', V18, V19}}}), ('case--case block in case block in solveIfUndefined-8947'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V18, V19, V20, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V5, V19)))) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--solveIfUndefined-8838'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> case V11 of {'Idris.Core.Context.Hole', E1, E2} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = ('un--patternEnvTm'(V8, V7, V0, V6, V1, V14))), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> begin (V18 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', V12, V13}}), case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V19) -> case V19 of {'Idris.Builtin.DPair.MkDPair', E6, E7} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V22, V23) -> begin (V24 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V20, {'Idris.Builtin.MkPair', V22, V23}}}), (('case--case block in case block in solveIfUndefined-8947'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12, V13, V18, V20, V22, V23, V24, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V5, V23))))(V14)) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', 1} end end end(E0)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--instantiate-8763'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkGlobalDef', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, {'Idris.Core.Context.PMDef', V17, [], {'Idris.Core.CaseTree.STerm', 0, V16}, {'Idris.Core.CaseTree.STerm', 0, V16}, []}, V36, V37, V38} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--instantiate-8672'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.Name.PV', E0, E1} -> (fun (V15, V16) -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.PatternVariableUnifies', V0, V11, V9, {'Idris.Core.Name.PV', V15, V16}, V3}, V17)) end end(E0, E1)); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--instantiate,mkDef-8427'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', V20} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V22) -> ('un--ufail'('erased', V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make solution for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V23) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V25) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'('erased', V25)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'('erased', V26, V27)) end end}, V24)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V30) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'('erased', V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'('erased', V31, V32)) end end}, V28, V29)) end end}, V23)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V35) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'('erased', V36)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'('erased', V37, V38)) end end}, V35)) end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V41) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'('erased', V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'('erased', V42, V43)) end end}, V39, V40)) end end}, V33, V34)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V44) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V15, V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V15, V45, V46)) end end}}, {'Idris.Builtin.MkPair', ('un--getIVars'('erased', 'erased', V18)), V17})))))))), V22)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--instantiate,mkDef-8293'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Prelude.Types.Just', E0} -> (fun (V29) -> fun (V30) -> {'Idris.Prelude.Types.Right', V29} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V23, V17, V22, V27}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--instantiate,updateIVars-7722'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V20, V19, V22}}.
'case--case block in instantiate,updateIVar-7618'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> {'Idris.Prelude.Types.Just', (1 + V25)}.
'case--instantiate,updateIVar-7494'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of 0 -> {'Idris.Prelude.Types.Just', 0}; 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7240--in--un--updateIVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V22, 'erased', 'erased', V21, 'erased')), fun (V26) -> {'Idris.Prelude.Types.Just', (1 + V26)} end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--instantiate,updateIVar-7412'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Prelude.Types.Just', (1 + V22)}.
'case--weakenNs-7085'(V0, V1, V2, V3, V4, V5) -> case V4 of 0 -> case V5 of {'Idris.Core.TT.SizedView.Z'} -> (fun () -> V3 end()); _ -> case V5 of {'Idris.Core.TT.SizedView.S', E1} -> (fun (V6) -> ('dn--un--weaken_Weaken_(IVars $vs)'('erased', 'erased', 'erased', ('dn--un--weakenNs_Weaken_(IVars $vs)'('erased', 'erased', 'erased', V6, V3)))) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V5 of {'Idris.Core.TT.SizedView.S', E0} -> (fun (V7) -> ('dn--un--weaken_Weaken_(IVars $vs)'('erased', 'erased', 'erased', ('dn--un--weakenNs_Weaken_(IVars $vs)'('erased', 'erased', 'erased', V7, V3)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in occursCheck-6965'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> begin (V15 = (('nested--11129-6679--in--un--failOnStrongRigid'(V0, V1, V2, V3, V4, V5, V6, 1, fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.CyclicMeta', V0, V5, V4, V2, V10}, V14)) end, V10))(V13))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V10}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--occursCheck-6897'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 1 -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V1}} end; _ -> fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V6))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V6, V0, V14, V4, V1, V10))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = (('un--getMetaNames'('erased', V6, V17))(V10))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> (('case--case block in occursCheck-6965'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V17, V20, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V23, V24)) end end}, V2, V20))))(V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--occursCheck,failOnStrongRigid-6758'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case V12 of [] -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> case V11 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V14, V15, V16) -> case V15 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V18) -> ('nested--11129-6679--in--un--failOnStrongRigid'(V0, V1, V2, V3, V4, V5, V6, 0, V8, V18)) end, V12)) end end(E2, E3, E4)); _ -> ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V19) -> ('nested--11129-6679--in--un--failOnStrongRigid'(V0, V1, V2, V3, V4, V5, V6, V9, V8, V19)) end, V12)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--occursCheck,failOnStrongRigid-6697'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> V11; 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in patternEnvTm-6634'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V9, {'Idris.Builtin.MkPair', ('nested--10916-6495--in--un--updateVars'(V0, V1, V2, V3, V4, 'erased', V7, V10)), V10}}}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--patternEnvTm-6593'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> ('case--case block in patternEnvTm-6634'(V0, V1, V2, V3, V4, V5, V6, V9, ('un--toSubVars'(V0, V9)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--patternEnvTm,updateVars-6520'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10916-6495--in--un--updateVars'(V0, V1, V2, V3, V4, 'erased', V9, V10)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> [V12 | ('nested--10916-6495--in--un--updateVars'(V0, V1, V2, V3, V4, 'erased', V9, V10))] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getVarsTm-6422'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> {'Idris.Prelude.Types.Nothing'}; 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('un--getVarsTm'('erased', [V2 | V7], V6)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', [V2 | V9])) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in patternEnv-6363'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V10, {'Idris.Builtin.MkPair', ('nested--10586-6208--in--un--updateVars'(V0, V1, V2, V3, V4, 'erased', V8, V11)), V11}}}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--patternEnv-6318'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> ('case--case block in patternEnv-6363'(V0, V1, V2, V3, V4, V5, V6, V7, V10, ('un--toSubVars'(V0, V10)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--patternEnv,updateVars-6233'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10586-6208--in--un--updateVars'(V0, V1, V2, V3, V4, 'erased', V9, V10)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> [V12 | ('nested--10586-6208--in--un--updateVars'(V0, V1, V2, V3, V4, 'erased', V9, V10))] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in toSubVars-6161'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> {'Idris.Builtin.DPair.MkDPair', [V0 | V3], {'Idris.Core.TT.KeepCons', V4}}; 1 -> {'Idris.Builtin.DPair.MkDPair', V3, {'Idris.Core.TT.DropCons', V4}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toSubVars-6145'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V4, V5) -> ('case--case block in toSubVars-6161'(V0, V1, V2, V4, V5, ('nested--10472-6111--in--un--anyFirst'(V0, V1, V2, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getVars-6016'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> {'Idris.Prelude.Types.Nothing'}; 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('un--getVars'(V0, [V2 | V7], V6)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', [V2 | V9])) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--postponeS-5859'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V7 of 0 -> fun (V11) -> ('un--postpone'(V0, V10, V9, V8, V6, ('un--lower'(V5)), V4, V3, V1, V2, V11)) end; 1 -> fun (V12) -> ('un--postpone'(V0, V10, V9, V8, V6, V5, V4, V3, V2, V1, V12)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--postpone-5780'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V7 of 0 -> begin (V14 = ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V12))), ('un--chaseMetas'(V9, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--addMetas'('erased', V14, V13)))), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')))) end; 1 -> fun (V15) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--postpone,undefinedN-5478'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Core.Context.Hole', E1, E2} -> (fun (V14, V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', 0} end end(E1, E2)); {'Idris.Core.Context.BySearch', E3, E4, E5} -> (fun (V17, V18, V19) -> fun (V20) -> {'Idris.Prelude.Types.Right', 0} end end(E3, E4, E5)); {'Idris.Core.Context.Guess', E6, E7, E8} -> (fun (V21, V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', 0} end end(E6, E7, E8)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', 1} end end end(E0)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--postpone,checkDefined-5384'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); _ -> fun (V18) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V9, V6, V13, V18)) end end.
'case--case block in chaseMetas-5284'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Core.Context.PMDef', E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12) -> case V10 of {'Idris.Core.CaseTree.STerm', E6, E7} -> (fun (V13, V14) -> begin (V15 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V14))))), ('un--chaseMetas'(V3, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V15, V1)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V2)))) end end(E6, E7)); _ -> ('un--chaseMetas'(V3, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V2)))) end end(E1, E2, E3, E4, E5)); _ -> ('un--chaseMetas'(V3, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V2)))) end end(E0)); _ -> ('un--chaseMetas'(V3, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V2)))) end.
'case--chaseMetas-5242'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E39} -> (fun (V5) -> ('un--chaseMetas'(V3, V1, V2)) end(E39)); _ -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V0, case V10 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V11 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V38 of {'Idris.Prelude.Types.Left', E29} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E31} -> (fun (V41) -> case V41 of {'Idris.Core.Context.PMDef', E32, E33, E34, E35, E36} -> (fun (V42, V43, V44, V45, V46) -> case V44 of {'Idris.Core.CaseTree.STerm', E37, E38} -> (fun (V47, V48) -> begin (V49 = ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V48))))), (('un--chaseMetas'(V3, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V49, V1)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V2))))(V6)) end end(E37, E38)); _ -> (('un--chaseMetas'(V3, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V2))))(V6)) end end(E32, E33, E34, E35, E36)); _ -> (('un--chaseMetas'(V3, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V2))))(V6)) end end(E31)); _ -> (('un--chaseMetas'(V3, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V2))))(V6)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--convertErrorS-5192'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of 0 -> fun (V8) -> ('un--convertError'('erased', V1, V7, V5, V4, V2, V3, V8)) end; 1 -> fun (V9) -> ('un--convertError'('erased', V1, V7, V5, V4, V3, V2, V9)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lower-4717'(V0) -> case V0 of {'Idris.Core.Unify.MkUnifyInfo', E0, E1} -> (fun (V1, V2) -> {'Idris.Core.Unify.MkUnifyInfo', 1, V2} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10916-6495--in--un--updateVars'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> ('case--patternEnvTm,updateVars-6520'(V0, V1, V2, V3, V4, 'erased', 'erased', V8, 'erased', V9, V7, ('Idris.Idris2.Core.TT':'un--subElem'('erased', 'erased', 'erased', V8, 'erased', V7)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10586-6208--in--un--updateVars'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> ('case--patternEnv,updateVars-6233'(V0, V1, V2, V3, V4, 'erased', 'erased', V8, 'erased', V9, V7, ('Idris.Idris2.Core.TT':'un--subElem'('erased', 'erased', 'erased', V8, 'erased', V7)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11751-7818--in--un--updateIVarsPi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V25)), fun (V26) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.DefImplicit', V26}} end)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11751-7819--in--un--updateIVarsB'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V25, V26, V27, V28) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11751-7818--in--un--updateIVarsPi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V27)), fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V28)), fun (V30) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Lam', V25, V26, V29, V30}} end)) end)) end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V31, V32, V33, V34) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V33)), fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V34)), fun (V36) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Let', V31, V32, V35, V36}} end)) end)) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V37, V38, V39, V40) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11751-7818--in--un--updateIVarsPi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V39)), fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V40)), fun (V42) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Pi', V37, V38, V41, V42}} end)) end)) end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V43, V44, V45, V46) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11751-7818--in--un--updateIVarsPi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V45)), fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V46)), fun (V48) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.PVar', V43, V44, V47, V48}} end)) end)) end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V49, V50, V51, V52) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V51)), fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V52)), fun (V54) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.PLet', V49, V50, V53, V54}} end)) end)) end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V55, V56, V57) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V21, V22, V23, V57)), fun (V58) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.PVTy', V55, V56, V58}} end)) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V18, V19, V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7240--in--un--updateIVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V20, 'erased', 'erased', V16, 'erased')), fun (V21) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Local', V18, V19, V21}} end)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V22, V23, V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Core.TT.Ref', V22, V23, V24})) end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V25, V26, V27, V28) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V31, V32)) end end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V34)) end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V37, V38)) end end end end}, fun (V39) -> ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V39)) end, V28)), fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Core.TT.Meta', V25, V26, V27, V40})) end)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V41, V42, V43, V44) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11751-7819--in--un--updateIVarsB'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15, V42, V44, V43, V41, V14, V16, V14, V15, V16, V43)), fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V42 | V14], [V42 | V15], {'Idris.Core.Unify.ICons', {'Idris.Prelude.Types.Just', 0}, ('dn--un--weaken_Weaken_(IVars $vs)'('erased', 'erased', 'erased', V16))}, V44)), fun (V46) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Bind', V41, V42, V45, V46}} end)) end)) end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V47, V48, V49) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V48)), fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V49)), fun (V51) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.App', V47, V50, V51}} end)) end)) end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V52, V53, V54, V55) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V54)), fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V55)), fun (V57) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.As', V52, V53, V56, V57}} end)) end)) end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V58, V59, V60) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V60)), fun (V61) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TDelayed', V58, V59, V61}} end)) end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V62, V63, V64, V65) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V64)), fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V65)), fun (V67) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TDelay', V62, V63, V66, V67}} end)) end)) end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V68, V69, V70) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V70)), fun (V71) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TForce', V68, V69, V71}} end)) end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V72, V73) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.PrimVal', V72, V73}} end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V74, V75) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.Erased', V74, V75}} end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V76) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.TType', V76}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11727-7240--in--un--updateIVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of {'Idris.Core.Unify.ICons', E0, E1} -> (fun (V20, V21) -> case V20 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--11727-7240--in--un--updateIVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V15, 'erased', 'erased', V21, 'erased')), fun (V22) -> {'Idris.Prelude.Types.Just', (1 + V22)} end)) end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V23) -> ('case--instantiate,updateIVar-7494'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', 'erased', 'erased', 'erased', 'erased', V23, 'erased', V21, V15, 'erased', 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V15, V23)))) end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--9664-5363--in--un--undefinedN'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V43 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V10, case V15 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V43 of {'Idris.Prelude.Types.Left', E29} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V45) -> case V45 of {'Idris.Prelude.Types.Just', E31} -> (fun (V46) -> case V46 of {'Idris.Core.Context.Hole', E32, E33} -> (fun (V47, V48) -> {'Idris.Prelude.Types.Right', 0} end(E32, E33)); {'Idris.Core.Context.BySearch', E34, E35, E36} -> (fun (V49, V50, V51) -> {'Idris.Prelude.Types.Right', 0} end(E34, E35, E36)); {'Idris.Core.Context.Guess', E37, E38, E39} -> (fun (V52, V53, V54) -> {'Idris.Prelude.Types.Right', 0} end(E37, E38, E39)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E31)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--13976-9275--in--un--tooBigArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of 0 -> 0; _ -> case V7 of [] -> 1; _ -> case V6 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V8 = (V6 - 1)), case V7 of [E0 | E1] -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('un--tooBig'('erased', V5, case V5 of 0 -> V8; 1 -> (1 + V8); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V9)), fun () -> ('nested--13976-9275--in--un--tooBigArgs'('erased', V1, V2, V3, V4, V5, V8, V10)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'nested--14193-10926--in--un--solutionHeadSame'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V17, V18, V19) -> case V18 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V20, V21, V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V21, V9)) end(E3, E4, E5)); _ -> 1 end end(E0, E1, E2)); _ -> 1 end.
'nested--14206-13124--in--un--pv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Name.PV', E0, E1} -> (fun (V17, V18) -> 0 end(E0, E1)); _ -> 1 end.
'nested--11727-7242--in--un--mkDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V16 of [E10 | E11] -> (fun (V20, V21) -> case V19 of {'Idris.Core.TT.Bind', E22, E23, E24, E25} -> (fun (V22, V23, V24, V25) -> case V24 of {'Idris.Core.TT.Pi', E36, E37, E38, E39} -> (fun (V26, V27, V28, V29) -> fun (V30) -> begin (V31 = (('nested--11727-7242--in--un--mkDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V23 | V14], V15, V21, {'Idris.Core.Unify.ICons', {'Idris.Prelude.Types.Just', V20}, V17}, V18, V25))(V30))), case V31 of {'Idris.Prelude.Types.Left', E40} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V22, V23, {'Idris.Core.TT.Lam', V26, V27, {'Idris.Core.TT.Explicit'}, {'Idris.Core.TT.Erased', V22, 1}}, V33}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36, E37, E38, E39)); _ -> case V19 of {'Idris.Core.TT.Bind', E26, E27, E28, E29} -> (fun (V34, V35, V36, V37) -> case V36 of {'Idris.Core.TT.Let', E30, E31, E32, E33} -> (fun (V38, V39, V40, V41) -> fun (V42) -> begin (V43 = (('nested--11727-7242--in--un--mkDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V35 | V14], V15, V16, {'Idris.Core.Unify.ICons', {'Idris.Prelude.Types.Nothing'}, V17}, V18, V37))(V42))), case V43 of {'Idris.Prelude.Types.Left', E34} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V45) -> begin (V46 = {'Idris.Core.TT.Let', V38, V39, V40, V41}), (('case--instantiate,mkDef-8293'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V38, V35, V37, V40, V41, V39, V46, V34, V18, V17, V16, V45, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V45, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))))(V42)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30, E31, E32, E33)); _ -> case V16 of [] -> ('case--instantiate,mkDef-8427'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V18, V17, ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18)))); _ -> fun (V47) -> ('un--ufail'('erased', V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make solution for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V19)))))))), V47)) end end end end(E26, E27, E28, E29)); _ -> case V16 of [] -> ('case--instantiate,mkDef-8427'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V18, V17, ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18)))); _ -> fun (V48) -> ('un--ufail'('erased', V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make solution for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V19)))))))), V48)) end end end end end(E22, E23, E24, E25)); _ -> case V19 of {'Idris.Core.TT.Bind', E12, E13, E14, E15} -> (fun (V49, V50, V51, V52) -> case V51 of {'Idris.Core.TT.Let', E16, E17, E18, E19} -> (fun (V53, V54, V55, V56) -> fun (V57) -> begin (V58 = (('nested--11727-7242--in--un--mkDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V50 | V14], V15, V16, {'Idris.Core.Unify.ICons', {'Idris.Prelude.Types.Nothing'}, V17}, V18, V52))(V57))), case V58 of {'Idris.Prelude.Types.Left', E20} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V60) -> begin (V61 = {'Idris.Core.TT.Let', V53, V54, V55, V56}), (('case--instantiate,mkDef-8293'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V53, V50, V52, V55, V56, V54, V61, V49, V18, V17, V16, V60, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V60, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))))(V57)) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19)); _ -> case V16 of [] -> ('case--instantiate,mkDef-8427'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V18, V17, ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18)))); _ -> fun (V62) -> ('un--ufail'('erased', V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make solution for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V19)))))))), V62)) end end end end(E12, E13, E14, E15)); _ -> case V16 of [] -> ('case--instantiate,mkDef-8427'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V18, V17, ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18)))); _ -> fun (V63) -> ('un--ufail'('erased', V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make solution for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V19)))))))), V63)) end end end end end(E10, E11)); _ -> case V19 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V64, V65, V66, V67) -> case V66 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V68, V69, V70, V71) -> fun (V72) -> begin (V73 = (('nested--11727-7242--in--un--mkDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, [V65 | V14], V15, V16, {'Idris.Core.Unify.ICons', {'Idris.Prelude.Types.Nothing'}, V17}, V18, V67))(V72))), case V73 of {'Idris.Prelude.Types.Left', E8} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V75) -> begin (V76 = {'Idris.Core.TT.Let', V68, V69, V70, V71}), (('case--instantiate,mkDef-8293'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V68, V65, V67, V70, V71, V69, V76, V64, V18, V17, V16, V75, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V75, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))))(V72)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> case V16 of [] -> ('case--instantiate,mkDef-8427'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V18, V17, ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18)))); _ -> fun (V77) -> ('un--ufail'('erased', V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make solution for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V19)))))))), V77)) end end end end(E0, E1, E2, E3)); _ -> case V16 of [] -> ('case--instantiate,mkDef-8427'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V18, V17, ('nested--11727-7241--in--un--updateIVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18)))); _ -> fun (V78) -> ('un--ufail'('erased', V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make solution for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V14, V19)))))))), V78)) end end end end.
'nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> fun (V17) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V18, V19) -> fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V15))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V15, V0, V24, V18))(V20))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> case V27 of {'Idris.Core.Value.NApp', E6, E7, E8} -> (fun (V28, V29, V30) -> case V29 of {'Idris.Core.Value.NLocal', E9, E10} -> (fun (V31, V32) -> begin (V33 = (('nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19))(V20))), case V33 of {'Idris.Prelude.Types.Left', E11} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V35) -> {'Idris.Prelude.Types.Right', (1 + V35)} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> (('nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19))(V20)) end end(E6, E7, E8)); _ -> (('nested--14206-13125--in--un--localsIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19))(V20)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11727-7239--in--un--isSimple'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V16, V17, V18) -> 0 end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V19, V20, V21) -> 0 end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V22, V23, V24, V25) -> 0 end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V26, V27, V28, V29) -> case V28 of {'Idris.Core.TT.Lam', E14, E15, E16, E17} -> (fun (V30, V31, V32, V33) -> ('nested--11727-7239--in--un--isSimple'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, 'erased', V29)) end(E14, E15, E16, E17)); _ -> 1 end end(E10, E11, E12, E13)); {'Idris.Core.TT.PrimVal', E18, E19} -> (fun (V34, V35) -> 0 end(E18, E19)); {'Idris.Core.TT.TType', E20} -> (fun (V36) -> 0 end(E20)); _ -> 1 end.
'nested--14185-10580--in--un--isPatName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Core.Name.PV', E0, E1} -> (fun (V18, V19) -> 0 end(E0, E1)); _ -> 1 end.
'nested--13976-9274--in--un--isFn'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V7, V8, V9) -> case V8 of {'Idris.Core.TT.Func'} -> (fun () -> 0 end()); _ -> 1 end end(E0, E1, E2)); _ -> 1 end.
'nested--14217-15323--in--un--isDelay'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.NDelayed', E0, E1, E2} -> (fun (V9, V10, V11) -> 0 end(E0, E1, E2)); _ -> 1 end.
'nested--10341-6002--in--un--inArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> 1; [E0 | E1] -> (fun (V10, V11) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Integer'(V8, V10)), fun () -> ('nested--10341-6002--in--un--inArgs'(V0, 'erased', V2, 'erased', V4, V5, V6, V7, V8, V11)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--25459-19628--in--un--getHoleName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V7, {'Idris.Core.Env.Nil'}, V2))(V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V10 of {'Idris.Core.Value.NApp', E4, E5, E6} -> (fun (V11, V12, V13) -> case V12 of {'Idris.Core.Value.NMeta', E7, E8, E9} -> (fun (V14, V15, V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V14}} end(E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E4, E5, E6)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11129-6679--in--un--failOnStrongRigid'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.TT.Meta', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> ('case--occursCheck,failOnStrongRigid-6697'(V0, V1, V2, V3, V4, V5, V6, V10, V12, V13, V11, V8, V7, ('Idris.Idris2.Prelude.Basics':'un--&&'(V7, fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V2)) end)))) end(E0, E1, E2, E3)); _ -> ('case--occursCheck,failOnStrongRigid-6758'(V0, V1, V2, V3, V4, V5, V6, V9, V8, V7, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V9)))) end.
'nested--22608-17135--in--un--definedN'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Core.Name.MN', E2, E3} -> (fun (V7, V8) -> fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V13 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V14 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> begin (V44 = {'Idris.Core.Name.NS', V5, {'Idris.Core.Name.MN', V7, V8}}), case V43 of {'Idris.Prelude.Types.Just', E35} -> (fun (V45) -> begin (V46 = {'Idris.Prelude.Types.Just', V45}), (('case--case block in retry,definedN-17183'(V0, V1, V2, V3, V5, V7, V8, V44, V13, V45, V46, case V45 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> V64 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9)) end end(E35)); _ -> {'Idris.Prelude.Types.Right', 1} end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> fun (V68) -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V69) -> {'Idris.Prelude.Types.Right', 0} end end.
'nested--25025-19240--in--un--constraintToHole'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V39 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Idris.Core.Name.Resolved', V3}, case V11 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V12 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V39 of {'Idris.Prelude.Types.Left', E33} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E35} -> (fun (V42) -> case V42 of {'Idris.Core.Context.BySearch', E36, E37, E38} -> (fun (V43, V44, V45) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Idris.Core.Name.Resolved', V3}, fun (V46) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', 0, ('Idris.Idris2.Core.Context':'un--holeInit'(1))}} end, V7)) end(E36, E37, E38)); {'Idris.Core.Context.Guess', E39, E40, E41} -> (fun (V47, V48, V49) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Idris.Core.Name.Resolved', V3}, fun (V50) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', 0, ('Idris.Idris2.Core.Context':'un--holeInit'(1))}} end, V7)) end(E39, E40, E41)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E35)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9664-5362--in--un--checkDefined'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V12, V13, V14) -> case V13 of {'Idris.Core.Value.NRef', E3, E4} -> (fun (V15, V16) -> fun (V17) -> begin (V45 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, case V10 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V17))), case V45 of {'Idris.Prelude.Types.Left', E32} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E34} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E34)); _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V9, V6, V16, V17)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2)); _ -> fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'nested--25459-19629--in--un--checkConstraint'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Core.UnifyState.MkConstraint', E4, E5, E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11, V12, V13) -> fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V7, V0, <<"unify.constraint"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Dot"/utf8>> end, V11, V13))(V14))), case V15 of {'Idris.Prelude.Types.Left', E11} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V17) -> begin (V18 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V7, V0, <<"unify.constraint"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  ="/utf8>> end, V11, V12))(V14))), case V18 of {'Idris.Prelude.Types.Left', E13} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E15} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V24) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'('erased', V0, V1, fun (V25) -> begin (V27 = begin (V26 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> begin (V57 = (('Idris.Idris2.Core.Context':'un--getPosition'(V3, case V29 of {'Idris.Core.Context.MkDefs', E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V30 end(E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V25))), case V57 of {'Idris.Prelude.Types.Left', E46} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V59) -> case V59 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V60, V61) -> begin (V62 = ('nested--25459-19628--in--un--getHoleName'(V0, V1, {'Idris.Core.TT.Meta', V8, V3, V60, []}, V25))), case V62 of {'Idris.Prelude.Types.Left', E50} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V64) -> begin (V83 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('dn--un--unifyD_Unify_Term'(V65, V66, V67, V68, V69, V70, V71, V72, V73)) end end end end end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('dn--un--unifyWithLazyD_Unify_Term'(V74, V75, V76, V77, V78, V79, V80, V81, V82)) end end end end end end end end end}, V7, V0, V1))(('un--inMatch'())))(V8))(V11))(V12))(V13))(V25))), case V83 of {'Idris.Prelude.Types.Left', E52} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V85) -> begin (V87 = begin (V86 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V86} end), case V87 of {'Idris.Prelude.Types.Left', E54} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V89) -> begin (V126 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V90) -> {'Idris.Prelude.Types.Right', 1} end end, fun () -> fun (V91) -> fun (V92) -> begin (V120 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V91, case V89 of {'Idris.Core.Context.MkDefs', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119) -> V93 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V92))), case V120 of {'Idris.Prelude.Types.Left', E83} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V122) -> case V122 of {'Idris.Prelude.Types.Just', E85} -> (fun (V123) -> case V123 of {'Idris.Core.Context.Hole', E86, E87} -> (fun (V124, V125) -> {'Idris.Prelude.Types.Right', 1} end(E86, E87)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E85)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V8, V91, V92)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V64))(V25))), case V126 of {'Idris.Prelude.Types.Left', E88} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V128) -> begin (V133 = (('un--checkArgsSame'(V1, V0, case V85 of {'Idris.Core.Unify.MkUnifyResult', E90, E91, E92, E93} -> (fun (V129, V130, V131, V132) -> V131 end(E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V25))), case V133 of {'Idris.Prelude.Types.Left', E94} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V135) -> case ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Data.List':'un--isNil'('erased', case V85 of {'Idris.Core.Unify.MkUnifyResult', E96, E97, E98, E99} -> (fun (V136, V137, V138, V139) -> V136 end(E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V128, fun () -> V135 end)) end)) of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Dot pattern match fail"/utf8>>}, V25)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V140) -> case V140 of {'Idris.Core.Core.InternalError', E112} -> (fun (V141) -> fun (V142) -> begin (V144 = begin (V143 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V143} end), case V144 of {'Idris.Prelude.Types.Left', E113} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V146) -> begin (V174 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V146 of {'Idris.Core.Context.MkDefs', E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141} -> (fun (V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173) -> V147 end(E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V142))), case V174 of {'Idris.Prelude.Types.Left', E142} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V176) -> case V176 of {'Idris.Prelude.Types.Just', E144} -> (fun (V177) -> begin (V178 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V0, <<"unify.constraint"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Dot type"/utf8>> end, {'Idris.Core.Env.Nil'}, V177))(V142))), case V178 of {'Idris.Prelude.Types.Left', E145} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V180) -> begin (V192 = begin (V191 = ('erlang':'put'(V1, case V24 of {'Idris.Core.UnifyState.MkUState', E147, E148, E149, E150, E151, E152, E153, E154, E155, E156} -> (fun (V181, V182, V183, V184, V185, V186, V187, V188, V189, V190) -> {'Idris.Core.UnifyState.MkUState', V181, V182, V183, V184, V185, [], V187, V188, V189, V190} end(E147, E148, E149, E150, E151, E152, E153, E154, E155, E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V191} end), case V192 of {'Idris.Prelude.Types.Left', E157} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E157)); {'Idris.Prelude.Types.Right', E158} -> (fun (V194) -> begin (V195 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V7, V146, V11, V12, V142))), case V195 of {'Idris.Prelude.Types.Left', E159} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E159)); {'Idris.Prelude.Types.Right', E160} -> (fun (V197) -> begin (V198 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V7, V146, V11, V13, V142))), case V198 of {'Idris.Prelude.Types.Left', E161} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V200) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadDotPattern', V7, V8, V11, V5, V197, V200}, V142)) end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E160)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V8, V3, V142)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E112)); _ -> fun (V201) -> begin (V213 = begin (V212 = ('erlang':'put'(V1, case V24 of {'Idris.Core.UnifyState.MkUState', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109} -> (fun (V202, V203, V204, V205, V206, V207, V208, V209, V210, V211) -> {'Idris.Core.UnifyState.MkUState', V202, V203, V204, V205, V206, [], V208, V209, V210, V211} end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V212} end), case V213 of {'Idris.Prelude.Types.Left', E110} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V215) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V140, V201)) end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V14)) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7, E8, E9, E10)); _ -> fun (V216) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E2, E3)); _ -> fun (V217) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1)); _ -> fun (V218) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V7, V8) -> fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V41 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Idris.Core.Name.Resolved', V7}, case V13 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V14 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V41 of {'Idris.Prelude.Types.Left', E31} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E33} -> (fun (V44) -> case V44 of {'Idris.Core.Context.PMDef', E34, E35, E36, E37, E38} -> (fun (V45, V46, V47, V48, V49) -> case V46 of [] -> case V47 of {'Idris.Core.CaseTree.STerm', E39, E40} -> (fun (V50, V51) -> case V50 of 0 -> begin (V52 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_Term'(V2, [], V13, {'Idris.Core.Env.Nil'}, V4, V51, V9))), case V52 of {'Idris.Prelude.Types.Left', E41} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V54) -> case V54 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> (('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V4, V8))(V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> (('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V4, V8))(V9)) end end(E39, E40)); _ -> (('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V4, V8))(V9)) end; _ -> (('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V4, V8))(V9)) end end(E34, E35, E36, E37, E38)); _ -> (('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V4, V8))(V9)) end end(E33)); _ -> (('nested--25153-19371--in--un--anySame'(V0, V1, V2, V3, V4, V8))(V9)) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10472-6111--in--un--anyFirst'(V0, V1, V2, V3) -> case V3 of [] -> 1; [E0 | E1] -> (fun (V4, V5) -> case V4 of 0 -> 0; _ -> ('nested--10472-6111--in--un--anyFirst'(V0, V1, V2, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--24977-19197--in--un--afterStart'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--weaken_Weaken_(IVars $vs)'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Unify.INil'} -> (fun () -> {'Idris.Core.Unify.INil'} end()); {'Idris.Core.Unify.ICons', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Unify.ICons', {'Idris.Prelude.Types.Nothing'}, ('dn--un--weaken_Weaken_(IVars $vs)'('erased', 'erased', 'erased', V5))} end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V6) -> {'Idris.Core.Unify.ICons', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'('erased', 'erased', V6))}, ('dn--un--weaken_Weaken_(IVars $vs)'('erased', 'erased', 'erased', V5))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--weakenNs_Weaken_(IVars $vs)'(V0, V1, V2, V3, V4) -> ('case--weakenNs-7085'('erased', 'erased', 'erased', V4, V3, ('Idris.Idris2.Core.TT':'un--sizedView'('erased', 'erased', V3)))).
'dn--un--unifyWithLazyD_Unify_Term'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V12, V8))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_Term'(V1, V0, V15, V5, V6, V7, V8))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> case V18 of 0 -> begin (V19 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.equal"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Skipped unification (equal already): "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V7)))))))) end))(V8))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('un--success'())} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V22 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V12, V5, V6))(V8))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V12, V5, V7))(V8))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> ((((((('un--unifyWithLazy'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--unifyD_Unify_NF'(V28, V29, V30, V31, V32, V33, V34, V35)) end end end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('dn--un--unifyWithLazyD_Unify_NF'(V36, V37, V38, V39, V40, V41, V42, V43)) end end end end end end end end}, V0, V1, V2))(V3))(V4))(V5))(V24))(V27))(V8)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--unifyWithLazyD_Unify_NF'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NDelayed', E9, E10, E11} -> (fun (V8, V9, V10) -> case V7 of {'Idris.Core.Value.NDelayed', E14, E15, E16} -> (fun (V11, V12, V13) -> (((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--unifyD_Unify_NF'(V14, V15, V16, V17, V18, V19, V20, V21)) end end end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('dn--un--unifyWithLazyD_Unify_NF'(V22, V23, V24, V25, V26, V27, V28, V29)) end end end end end end end end}, V0, V1, V2))(('un--lower'(V3))))(V4))(V5))(V10))(V13)) end(E14, E15, E16)); _ -> begin (V30 = {'Idris.Core.Value.NDelayed', V8, V9, V10}), ('case--unifyWithLazyD-16275'(V0, V1, V2, V8, V7, V10, V9, V30, V5, V4, V3, ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--isHoleApp'('erased', V7)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E12, E13} -> (fun (V31, V32) -> V32 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end)))) end end end(E9, E10, E11)); _ -> case V7 of {'Idris.Core.Value.NDelayed', E0, E1, E2} -> (fun (V33, V34, V35) -> fun (V36) -> begin (V53 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--unifyD_Unify_NF'(V37, V38, V39, V40, V41, V42, V43, V44)) end end end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('dn--un--unifyWithLazyD_Unify_NF'(V45, V46, V47, V48, V49, V50, V51, V52)) end end end end end end end end}, V0, V1, V2))(('un--lower'(V3))))(V4))(V5))(V6))(V35))(V36))), case V53 of {'Idris.Prelude.Types.Left', E3} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V55) -> {'Idris.Prelude.Types.Right', case V55 of {'Idris.Core.Unify.MkUnifyResult', E5, E6, E7, E8} -> (fun (V56, V57, V58, V59) -> {'Idris.Core.Unify.MkUnifyResult', V56, V57, V58, {'Idris.Core.Unify.AddDelay', V34}} end(E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> (((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('dn--un--unifyD_Unify_NF'(V60, V61, V62, V63, V64, V65, V66, V67)) end end end end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('dn--un--unifyWithLazyD_Unify_NF'(V68, V69, V70, V71, V72, V73, V74, V75)) end end end end end end end end}, V0, V1, V2))(V3))(V4))(V5))(V6))(V7)) end end.
'dn--un--unifyWithLazyD_Unify_Closure'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('dn--un--unifyD_Unify_Closure'(V0, V1, V2, V3, V4, V5, V6, V7, V8)).
'dn--un--unifyD_Unify_Term'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V12, V8))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_Term'(V1, V0, V15, V5, V6, V7, V8))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> case V18 of 0 -> begin (V19 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.equal"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Skipped unification (equal already): "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V7)))))))) end))(V8))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('un--success'())} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V22 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V12, V5, V6))(V8))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V25 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V12, V5, V7))(V8))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--unifyD_Unify_NF'(V28, V29, V30, V31, V32, V33, V34, V35)) end end end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('dn--un--unifyWithLazyD_Unify_NF'(V36, V37, V38, V39, V40, V41, V42, V43)) end end end end end end end end}, V0, V1, V2))(V3))(V4))(V5))(V24))(V27))(V8)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--unifyD_Unify_NF'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E14, E15, E16, E17} -> (fun (V8, V9, V10, V11) -> case V7 of {'Idris.Core.Value.NBind', E42, E43, E44, E45} -> (fun (V12, V13, V14, V15) -> ('un--unifyBothBinders'(V1, V2, V0, V3, V4, V5, V8, V9, V10, V11, V12, V13, V14, V15)) end(E42, E43, E44, E45)); _ -> case V10 of {'Idris.Core.TT.Lam', E32, E33, E34, E35} -> (fun (V16, V17, V18, V19) -> fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E36} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"EtaR"/utf8>> end, V5, V6, V20))), case V25 of {'Idris.Prelude.Types.Left', E38} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...with"/utf8>> end, V5, V7, V20))), case V28 of {'Idris.Prelude.Types.Left', E40} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V30) -> begin (V31 = {'Idris.Core.Value.NBind', V8, V9, {'Idris.Core.TT.Lam', V16, V17, V18, V19}, V11}), (('case--unifyD-15725'(V0, V1, V2, V7, V19, V18, V17, V16, V11, V9, V8, V31, V5, V4, V3, V24, ('un--isHoleApp'('erased', V7))))(V20)) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33, E34, E35)); _ -> case V7 of {'Idris.Core.Value.NBind', E18, E19, E20, E21} -> (fun (V32, V33, V34, V35) -> case V34 of {'Idris.Core.TT.Lam', E22, E23, E24, E25} -> (fun (V36, V37, V38, V39) -> fun (V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E26} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V44) -> begin (V45 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"EtaL"/utf8>> end, V5, V6, V40))), case V45 of {'Idris.Prelude.Types.Left', E28} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...with"/utf8>> end, V5, V7, V40))), case V48 of {'Idris.Prelude.Types.Left', E30} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V50) -> begin (V51 = {'Idris.Core.Value.NBind', V32, V33, {'Idris.Core.TT.Lam', V36, V37, V38, V39}, V35}), (('case--unifyD-15996'(V0, V1, V2, V39, V38, V37, V36, V35, V33, V32, V51, V6, V5, V4, V3, V44, ('un--isHoleApp'('erased', V6))))(V40)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22, E23, E24, E25)); _ -> ('un--unifyNoEta'(V1, V2, V0, V3, V4, V5, V6, V7)) end end(E18, E19, E20, E21)); _ -> ('un--unifyNoEta'(V1, V2, V0, V3, V4, V5, V6, V7)) end end end end(E14, E15, E16, E17)); _ -> case V7 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V52, V53, V54, V55) -> case V54 of {'Idris.Core.TT.Lam', E4, E5, E6, E7} -> (fun (V56, V57, V58, V59) -> fun (V60) -> begin (V62 = begin (V61 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E8} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"EtaL"/utf8>> end, V5, V6, V60))), case V65 of {'Idris.Prelude.Types.Left', E10} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...with"/utf8>> end, V5, V7, V60))), case V68 of {'Idris.Prelude.Types.Left', E12} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V70) -> begin (V71 = {'Idris.Core.Value.NBind', V52, V53, {'Idris.Core.TT.Lam', V56, V57, V58, V59}, V55}), (('case--unifyD-15996'(V0, V1, V2, V59, V58, V57, V56, V55, V53, V52, V71, V6, V5, V4, V3, V64, ('un--isHoleApp'('erased', V6))))(V60)) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> ('un--unifyNoEta'(V1, V2, V0, V3, V4, V5, V6, V7)) end end(E0, E1, E2, E3)); _ -> ('un--unifyNoEta'(V1, V2, V0, V3, V4, V5, V6, V7)) end end.
'dn--un--unifyD_Unify_Closure'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V12, V8))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_Closure'(V1, V0, V15, V5, V6, V7, V8))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> case V18 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> begin (V19 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V0, V12, V6))(V8))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V0, V12, V7))(V8))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('dn--un--unifyD_Unify_NF'(V25, V26, V27, V28, V29, V30, V31, V32)) end end end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('dn--un--unifyWithLazyD_Unify_NF'(V33, V34, V35, V36, V37, V38, V39, V40)) end end end end end end end end}, V0, V1, V2))(V3))(V4))(V5))(V21))(V24))(V8)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--show_Show_UnifyMode'(V0) -> case V0 of {'Idris.Core.Unify.InLHS'} -> (fun () -> <<"InLHS"/utf8>> end()); {'Idris.Core.Unify.InTerm'} -> (fun () -> <<"InTerm"/utf8>> end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> <<"InMatch"/utf8>> end()); {'Idris.Core.Unify.InSearch'} -> (fun () -> <<"InSearch"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_AddLazy'(V0) -> case V0 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> <<"NoLazy"/utf8>> end()); {'Idris.Core.Unify.AddForce', E0} -> (fun (V1) -> <<"AddForce"/utf8>> end(E0)); {'Idris.Core.Unify.AddDelay', E1} -> (fun (V2) -> <<"AddDelay"/utf8>> end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_AddLazy'(V0, V1) -> ('dn--un--show_Show_AddLazy'(V1)).
'dn--un--__Impl_Weaken_(IVars $vs)'(V0) -> {'Idris.Core.TT.dn--un--__mkWeaken', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--weaken_Weaken_(IVars $vs)'('erased', 'erased', 'erased', V3)) end end end, fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--weakenNs_Weaken_(IVars $vs)'('erased', 'erased', 'erased', V6, V7)) end end end end}.
'dn--un--__Impl_Unify_Term'() -> {'Idris.Core.Unify.dn--un--__mkUnify', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--unifyD_Unify_Term'(V0, V1, V2, V3, V4, V5, V6, V7, V8)) end end end end end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un--unifyWithLazyD_Unify_Term'(V9, V10, V11, V12, V13, V14, V15, V16, V17)) end end end end end end end end end}.
'dn--un--__Impl_Unify_NF'() -> {'Idris.Core.Unify.dn--un--__mkUnify', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--unifyD_Unify_NF'(V0, V1, V2, V3, V4, V5, V6, V7)) end end end end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--unifyWithLazyD_Unify_NF'(V8, V9, V10, V11, V12, V13, V14, V15)) end end end end end end end end}.
'dn--un--__Impl_Unify_Closure'() -> {'Idris.Core.Unify.dn--un--__mkUnify', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('dn--un--unifyD_Unify_Closure'(V0, V1, V2, V3, V4, V5, V6, V7, V8)) end end end end end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V9, V10, V11, V12, V13, V14, V15, V16, V17)) end end end end end end end end end}.
'dn--un--__Impl_Show_AddLazy'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_AddLazy'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_AddLazy'(V1, V2)) end end}.
'dn--un--__Impl_Eq_UnifyMode'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UnifyMode'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UnifyMode'(V2, V3)) end end}.
'dn--un--==_Eq_UnifyMode'(V0, V1) -> case V0 of {'Idris.Core.Unify.InLHS'} -> (fun () -> case V1 of {'Idris.Core.Unify.InLHS'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Unify.InTerm'} -> (fun () -> case V1 of {'Idris.Core.Unify.InTerm'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V1 of {'Idris.Core.Unify.InMatch'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Unify.InSearch'} -> (fun () -> case V1 of {'Idris.Core.Unify.InSearch'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--==_Eq_SolveMode'(V0, V1) -> case V0 of {'Idris.Core.Unify.Normal'} -> (fun () -> case V1 of {'Idris.Core.Unify.Normal'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Unify.Defaults'} -> (fun () -> case V1 of {'Idris.Core.Unify.Defaults'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Unify.LastChance'} -> (fun () -> case V1 of {'Idris.Core.Unify.LastChance'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--/=_Eq_UnifyMode'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_UnifyMode'(V0, V1)))).
'un--unionAll'(V0) -> case V0 of [] -> {'Idris.Core.Unify.MkUnifyResult', [], 1, [], {'Idris.Core.Unify.NoLazy'}}; [E0 | E1] -> (fun (V1, V2) -> case V2 of [] -> V1; _ -> ('un--union'(V1, ('un--unionAll'(V2)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--union'(V0, V1) -> {'Idris.Core.Unify.MkUnifyResult', ('Idris.Idris2.Data.List':'un--union'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V4, V5)) end end}, case V0 of {'Idris.Core.Unify.MkUnifyResult', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> V6 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Unify.MkUnifyResult', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> V10 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Basics':'un--||'(case V0 of {'Idris.Core.Unify.MkUnifyResult', E8, E9, E10, E11} -> (fun (V14, V15, V16, V17) -> V15 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> case V1 of {'Idris.Core.Unify.MkUnifyResult', E12, E13, E14, E15} -> (fun (V18, V19, V20, V21) -> V19 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', case V0 of {'Idris.Core.Unify.MkUnifyResult', E16, E17, E18, E19} -> (fun (V22, V23, V24, V25) -> V24 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Unify.MkUnifyResult', E20, E21, E22, E23} -> (fun (V26, V27, V28, V29) -> V28 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), {'Idris.Core.Unify.NoLazy'}}.
'un--unifyWithLazyD'(V0, V1, V2) -> case V1 of {'Idris.Core.Unify.dn--un--__mkUnify', E0, E1} -> (fun (V3, V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ((((((((V4(V2))(V5))(V6))(V7))(V8))(V9))(V10))(V11)) end end end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unifyWithLazy'(V0, V1, V2, V3, V4) -> case V1 of {'Idris.Core.Unify.dn--un--__mkUnify', E0, E1} -> (fun (V5, V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ((((((((V6(V2))(V3))(V4))(V7))(V8))(V9))(V10))(V11)) end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NDCon', E19, E20, E21, E22, E23} -> (fun (V8, V9, V10, V11, V12) -> case V7 of {'Idris.Core.Value.NDCon', E43, E44, E45, E46, E47} -> (fun (V13, V14, V15, V16, V17) -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E48} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V22) -> (('case--unifyNoEta-14771'(V2, V12, V11, V10, V9, V8, V17, V16, V15, V14, V13, V5, V4, V3, V1, V0, V22, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V10, V15))))(V18)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43, E44, E45, E46, E47)); _ -> case V7 of {'Idris.Core.Value.NApp', E34, E35, E36} -> (fun (V23, V24, V25) -> ('case--unifyNoEta-15236'(V2, V25, V24, V23, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E37, E38} -> (fun (V26, V27) -> V27 end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E34, E35, E36)); {'Idris.Core.Value.NAs', E39, E40, E41, E42} -> (fun (V28, V29, V30, V31) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V6, V31)) end(E39, E40, E41, E42)); _ -> case V6 of {'Idris.Core.Value.NAs', E30, E31, E32, E33} -> (fun (V32, V33, V34, V35) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V35, V7)) end(E30, E31, E32, E33)); _ -> fun (V36) -> begin (V38 = begin (V37 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E24} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V40, V36))), case V41 of {'Idris.Prelude.Types.Left', E26} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V43) -> begin (V44 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.noeta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing else worked, unifyIfEq"/utf8>> end))(V36))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> ('un--unifyIfEq'(V0, V1, V2, ('Idris.Idris2.Prelude.Basics':'un--||'(('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V6)), fun () -> ('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V7)) end)), V4, V3, V5, V6, V7, V36)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E19, E20, E21, E22, E23)); {'Idris.Core.Value.NTCon', E50, E51, E52, E53, E54} -> (fun (V47, V48, V49, V50, V51) -> case V7 of {'Idris.Core.Value.NTCon', E74, E75, E76, E77, E78} -> (fun (V52, V53, V54, V55, V56) -> fun (V57) -> begin (V62 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V60, V61)) end end}, V48, V57))), case V62 of {'Idris.Prelude.Types.Left', E79} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V64) -> begin (V69 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V67, V68)) end end}, V53, V57))), case V69 of {'Idris.Prelude.Types.Left', E81} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V71) -> begin (V72 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Comparing type constructors "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V64)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V71)))))))) end))(V57))), case V72 of {'Idris.Prelude.Types.Left', E83} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V74) -> (('case--unifyNoEta-14935'(V2, V51, V50, V49, V48, V47, V56, V55, V54, V53, V52, V5, V4, V3, V1, V0, V64, V71, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V64, V71))))(V57)) end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74, E75, E76, E77, E78)); _ -> case V7 of {'Idris.Core.Value.NApp', E65, E66, E67} -> (fun (V75, V76, V77) -> ('case--unifyNoEta-15236'(V2, V77, V76, V75, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E68, E69} -> (fun (V78, V79) -> V79 end(E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E65, E66, E67)); {'Idris.Core.Value.NAs', E70, E71, E72, E73} -> (fun (V80, V81, V82, V83) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V6, V83)) end(E70, E71, E72, E73)); _ -> case V6 of {'Idris.Core.Value.NAs', E61, E62, E63, E64} -> (fun (V84, V85, V86, V87) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V87, V7)) end(E61, E62, E63, E64)); _ -> fun (V88) -> begin (V90 = begin (V89 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E55} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V92) -> begin (V93 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V92, V88))), case V93 of {'Idris.Prelude.Types.Left', E57} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V95) -> begin (V96 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.noeta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing else worked, unifyIfEq"/utf8>> end))(V88))), case V96 of {'Idris.Prelude.Types.Left', E59} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V98) -> ('un--unifyIfEq'(V0, V1, V2, ('Idris.Idris2.Prelude.Basics':'un--||'(('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V6)), fun () -> ('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V7)) end)), V4, V3, V5, V6, V7, V88)) end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E50, E51, E52, E53, E54)); {'Idris.Core.Value.NDelayed', E85, E86, E87} -> (fun (V99, V100, V101) -> case V7 of {'Idris.Core.Value.NDelayed', E107, E108, E109} -> (fun (V102, V103, V104) -> (((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('dn--un--unifyD_Unify_NF'(V105, V106, V107, V108, V109, V110, V111, V112)) end end end end end end end end, fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('dn--un--unifyWithLazyD_Unify_NF'(V113, V114, V115, V116, V117, V118, V119, V120)) end end end end end end end end}, V2, V0, V1))(('un--lower'(V3))))(V4))(V5))(V101))(V104)) end(E107, E108, E109)); _ -> case V7 of {'Idris.Core.Value.NApp', E98, E99, E100} -> (fun (V121, V122, V123) -> ('case--unifyNoEta-15236'(V2, V123, V122, V121, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E101, E102} -> (fun (V124, V125) -> V125 end(E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E98, E99, E100)); {'Idris.Core.Value.NAs', E103, E104, E105, E106} -> (fun (V126, V127, V128, V129) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V6, V129)) end(E103, E104, E105, E106)); _ -> case V6 of {'Idris.Core.Value.NAs', E94, E95, E96, E97} -> (fun (V130, V131, V132, V133) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V133, V7)) end(E94, E95, E96, E97)); _ -> fun (V134) -> begin (V136 = begin (V135 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V135} end), case V136 of {'Idris.Prelude.Types.Left', E88} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V138) -> begin (V139 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V138, V134))), case V139 of {'Idris.Prelude.Types.Left', E90} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V141) -> begin (V142 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.noeta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing else worked, unifyIfEq"/utf8>> end))(V134))), case V142 of {'Idris.Prelude.Types.Left', E92} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V144) -> ('un--unifyIfEq'(V0, V1, V2, ('Idris.Idris2.Prelude.Basics':'un--||'(('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V6)), fun () -> ('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V7)) end)), V4, V3, V5, V6, V7, V134)) end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E85, E86, E87)); {'Idris.Core.Value.NDelay', E110, E111, E112, E113} -> (fun (V145, V146, V147, V148) -> case V7 of {'Idris.Core.Value.NDelay', E133, E134, E135, E136} -> (fun (V149, V150, V151, V152) -> ('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('dn--un--unifyD_Unify_Closure'(V153, V154, V155, V156, V157, V158, V159, V160, V161)) end end end end end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V162, V163, V164, V165, V166, V167, V168, V169, V170)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V171, V172, V173, V174, V175, V176)) end end end end end end, fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Closure'(V177, V178, V179, V180, V181, V182, V183)) end end end end end end end}}, V2, V0, V1, V3, V4, V5, [V147 | [V148 | []]], [V151 | [V152 | []]])) end(E133, E134, E135, E136)); _ -> case V7 of {'Idris.Core.Value.NApp', E124, E125, E126} -> (fun (V184, V185, V186) -> ('case--unifyNoEta-15236'(V2, V186, V185, V184, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E127, E128} -> (fun (V187, V188) -> V188 end(E127, E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E124, E125, E126)); {'Idris.Core.Value.NAs', E129, E130, E131, E132} -> (fun (V189, V190, V191, V192) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V6, V192)) end(E129, E130, E131, E132)); _ -> case V6 of {'Idris.Core.Value.NAs', E120, E121, E122, E123} -> (fun (V193, V194, V195, V196) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V196, V7)) end(E120, E121, E122, E123)); _ -> fun (V197) -> begin (V199 = begin (V198 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V198} end), case V199 of {'Idris.Prelude.Types.Left', E114} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V201) -> begin (V202 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V201, V197))), case V202 of {'Idris.Prelude.Types.Left', E116} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V204) -> begin (V205 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.noeta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing else worked, unifyIfEq"/utf8>> end))(V197))), case V205 of {'Idris.Prelude.Types.Left', E118} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V207) -> ('un--unifyIfEq'(V0, V1, V2, ('Idris.Idris2.Prelude.Basics':'un--||'(('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V6)), fun () -> ('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V7)) end)), V4, V3, V5, V6, V7, V197)) end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E110, E111, E112, E113)); {'Idris.Core.Value.NForce', E137, E138, E139, E140} -> (fun (V208, V209, V210, V211) -> case V7 of {'Idris.Core.Value.NForce', E160, E161, E162, E163} -> (fun (V212, V213, V214, V215) -> fun (V216) -> begin (V233 = ((((((('un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> ('dn--un--unifyD_Unify_NF'(V217, V218, V219, V220, V221, V222, V223, V224)) end end end end end end end end, fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('dn--un--unifyWithLazyD_Unify_NF'(V225, V226, V227, V228, V229, V230, V231, V232)) end end end end end end end end}, V2, V0, V1))(('un--lower'(V3))))(V4))(V5))(V210))(V214))(V216))), case V233 of {'Idris.Prelude.Types.Left', E164} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V235) -> begin (V269 = (('un--unifyArgs'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> ('dn--un--unifyD_Unify_Closure'(V236, V237, V238, V239, V240, V241, V242, V243, V244)) end end end end end end end end end, fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> fun (V252) -> fun (V253) -> ('dn--un--unifyWithLazyD_Unify_Closure'(V245, V246, V247, V248, V249, V250, V251, V252, V253)) end end end end end end end end end}, {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_Closure'(V254, V255, V256, V257, V258, V259)) end end end end end end, fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> fun (V266) -> ('Idris.Idris2.Core.Normalise':'dn--un--quoteGen_Quote_Closure'(V260, V261, V262, V263, V264, V265, V266)) end end end end end end end}}, V2, V0, V1, V3, V4, V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V267) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V267)) end, V211)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V268) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V268)) end, V215))))(V216))), case V269 of {'Idris.Prelude.Types.Left', E166} -> (fun (V270) -> {'Idris.Prelude.Types.Left', V270} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V271) -> {'Idris.Prelude.Types.Right', ('un--union'(V235, V271))} end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E160, E161, E162, E163)); _ -> case V7 of {'Idris.Core.Value.NApp', E151, E152, E153} -> (fun (V272, V273, V274) -> ('case--unifyNoEta-15236'(V2, V274, V273, V272, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E154, E155} -> (fun (V275, V276) -> V276 end(E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E151, E152, E153)); {'Idris.Core.Value.NAs', E156, E157, E158, E159} -> (fun (V277, V278, V279, V280) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V6, V280)) end(E156, E157, E158, E159)); _ -> case V6 of {'Idris.Core.Value.NAs', E147, E148, E149, E150} -> (fun (V281, V282, V283, V284) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V284, V7)) end(E147, E148, E149, E150)); _ -> fun (V285) -> begin (V287 = begin (V286 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V286} end), case V287 of {'Idris.Prelude.Types.Left', E141} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V289) -> begin (V290 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V289, V285))), case V290 of {'Idris.Prelude.Types.Left', E143} -> (fun (V291) -> {'Idris.Prelude.Types.Left', V291} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V292) -> begin (V293 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.noeta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing else worked, unifyIfEq"/utf8>> end))(V285))), case V293 of {'Idris.Prelude.Types.Left', E145} -> (fun (V294) -> {'Idris.Prelude.Types.Left', V294} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V295) -> ('un--unifyIfEq'(V0, V1, V2, ('Idris.Idris2.Prelude.Basics':'un--||'(('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V6)), fun () -> ('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V7)) end)), V4, V3, V5, V6, V7, V285)) end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E137, E138, E139, E140)); {'Idris.Core.Value.NApp', E168, E169, E170} -> (fun (V296, V297, V298) -> case V7 of {'Idris.Core.Value.NApp', E171, E172, E173} -> (fun (V299, V300, V301) -> ('un--unifyBothApps'(V0, V1, V2, ('un--lower'(V3)), V4, V5, V296, V297, V298, V299, V300, V301)) end(E171, E172, E173)); _ -> ('un--unifyApp'(V0, V1, V2, 1, ('un--lower'(V3)), V4, V5, V296, V297, V298, V7)) end end(E168, E169, E170)); _ -> case V7 of {'Idris.Core.Value.NApp', E10, E11, E12} -> (fun (V302, V303, V304) -> ('case--unifyNoEta-15236'(V2, V304, V303, V302, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E13, E14} -> (fun (V305, V306) -> V306 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E10, E11, E12)); {'Idris.Core.Value.NAs', E15, E16, E17, E18} -> (fun (V307, V308, V309, V310) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V6, V310)) end(E15, E16, E17, E18)); _ -> case V6 of {'Idris.Core.Value.NAs', E6, E7, E8, E9} -> (fun (V311, V312, V313, V314) -> ('un--unifyNoEta'(V0, V1, V2, V3, V4, V5, V314, V7)) end(E6, E7, E8, E9)); _ -> fun (V315) -> begin (V317 = begin (V316 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V316} end), case V317 of {'Idris.Prelude.Types.Left', E0} -> (fun (V318) -> {'Idris.Prelude.Types.Left', V318} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V319) -> begin (V320 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V319, V315))), case V320 of {'Idris.Prelude.Types.Left', E2} -> (fun (V321) -> {'Idris.Prelude.Types.Left', V321} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V322) -> begin (V323 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.noeta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing else worked, unifyIfEq"/utf8>> end))(V315))), case V323 of {'Idris.Prelude.Types.Left', E4} -> (fun (V324) -> {'Idris.Prelude.Types.Left', V324} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V325) -> ('un--unifyIfEq'(V0, V1, V2, ('Idris.Idris2.Prelude.Basics':'un--||'(('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V6)), fun () -> ('nested--14217-15323--in--un--isDelay'(V2, V7, V6, V5, V4, V3, V1, V0, V7)) end)), V4, V3, V5, V6, V7, V315)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--unifyInvertible'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V8}, case V18 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V19 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14))), case V46 of {'Idris.Prelude.Types.Left', E29} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E31} -> (fun (V49) -> begin (V53 = begin (V50 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V2, V18, V6, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V49))))(V14))), case V50 of {'Idris.Prelude.Types.Left', E32} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V52) -> (('un--getArgTypes'('erased', V18, V52, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V9, V10))))(V14)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V53 of {'Idris.Prelude.Types.Left', E34} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V55) -> begin (V63 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V57) -> fun (V58) -> begin (V59 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V2, V18, V6, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V57))))(V58))), case V59 of {'Idris.Prelude.Types.Left', E36} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V61) -> (('un--getArgTypes'('erased', V18, V61, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V62) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V62)) end, V13))))(V58)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V11))(V14))), case V63 of {'Idris.Prelude.Types.Left', E38} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V65) -> begin (V66 = (('un--headsConvert'(V2, V0, V1, V4, V5, V6, V55, V65))(V14))), case V66 of {'Idris.Prelude.Types.Left', E40} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V68) -> begin (V69 = {'Idris.Prelude.Types.Just', V49}), case V68 of 0 -> begin (V70 = 0), (('case--case block in case block in unifyInvertible-10005'(V2, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V1, V0, V18, V49, V69, V55, V65, V70, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', V10)), ('Idris.Idris2.Data.List':'un--reverse'('erased', V13))}))(V14)) end; 1 -> ('un--postpone'(V2, V0, V1, 0, V5, V4, <<"Postponing hole application [3]"/utf8>>, V6, {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V7, V8, V9}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V71) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V71} end, V10))}, (V12(V13)), V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--ufail'('erased', V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No such metavariable "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)))), V14)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unifyIfEq'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V13, V6, V7, V8, V9))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> case V16 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> case V3 of 0 -> ('un--postpone'(V2, V0, V1, 0, V4, V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postponing unifyIfEq "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(case V5 of {'Idris.Core.Unify.MkUnifyInfo', E4, E5} -> (fun (V17, V18) -> V17 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V6, V7, V8, V9)); 1 -> ('un--convertError'('erased', V2, V0, V4, V6, V7, V8, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unifyHoleApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V12, V13, V14, V15, V16) -> fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> begin (V49 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V13, case V21 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V22 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V17))), case V49 of {'Idris.Prelude.Types.Left', E34} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V51) -> ('un--unifyInvertible'(V0, V1, V2, V3, ('un--lower'(V4)), V5, V6, V7, V8, V9, V10, V51, fun (V52) -> {'Idris.Core.Value.NTCon', V12, V13, V14, V15, V52} end, V16, V17)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NDCon', E36, E37, E38, E39, E40} -> (fun (V53, V54, V55, V56, V57) -> fun (V58) -> begin (V60 = begin (V59 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E41} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V62) -> begin (V90 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V54, case V62 of {'Idris.Core.Context.MkDefs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V63 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58))), case V90 of {'Idris.Prelude.Types.Left', E70} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V92) -> ('un--unifyInvertible'(V0, V1, V2, V3, ('un--lower'(V4)), V5, V6, V7, V8, V9, V10, V92, fun (V93) -> {'Idris.Core.Value.NDCon', V53, V54, V55, V56, V93} end, V57, V58)) end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36, E37, E38, E39, E40)); {'Idris.Core.Value.NApp', E72, E73, E74} -> (fun (V94, V95, V96) -> case V95 of {'Idris.Core.Value.NLocal', E75, E76} -> (fun (V97, V98) -> fun (V99) -> ('un--unifyInvertible'(V0, V1, V2, V3, ('un--lower'(V4)), V5, V6, V7, V8, V9, V10, {'Idris.Prelude.Types.Nothing'}, fun (V100) -> {'Idris.Core.Value.NApp', V94, {'Idris.Core.Value.NLocal', V97, V98}, V100} end, V96, V99)) end end(E75, E76)); {'Idris.Core.Value.NMeta', E77, E78, E79} -> (fun (V101, V102, V103) -> fun (V104) -> begin (V106 = begin (V105 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V105} end), case V106 of {'Idris.Prelude.Types.Left', E80} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V108) -> begin (V136 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V102}, case V108 of {'Idris.Core.Context.MkDefs', E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108} -> (fun (V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135) -> V109 end(E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V104))), case V136 of {'Idris.Prelude.Types.Left', E109} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V138) -> begin (V139 = {'Idris.Core.Value.NApp', V94, {'Idris.Core.Value.NMeta', V101, V102, V103}, V96}), case V138 of {'Idris.Prelude.Types.Just', E111} -> (fun (V140) -> begin (V162 = ('Idris.Idris2.Prelude.Basics':'un--||'(('nested--14185-10580--in--un--isPatName'(V2, V103, V102, V101, V96, V94, V139, V10, V9, V8, V7, V6, V5, V4, V3, V1, V0, V101)), fun () -> case V140 of {'Idris.Core.Context.MkGlobalDef', E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132} -> (fun (V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161) -> V155 end(E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))), case V162 of 0 -> ('un--unifyInvertible'(V0, V1, V2, V3, ('un--lower'(V4)), V5, V6, V7, V8, V9, V10, {'Idris.Prelude.Types.Nothing'}, fun (V163) -> {'Idris.Core.Value.NApp', V94, {'Idris.Core.Value.NMeta', V101, V102, V103}, V163} end, V96, V104)); 1 -> (('un--postponeS'(V2, V0, V1, 0, V3, V5, V4, <<"Postponing hole application"/utf8>>, V6, {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V7, V8, V9}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V164) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V164} end, V10))}, V139))(V104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V94, V7, V104)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E77, E78, E79)); _ -> ('un--postponeS'(V2, V0, V1, 0, V3, V5, V4, <<"Postponing hole application"/utf8>>, V6, {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V7, V8, V9}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V165) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V165} end, V10))}, V11)) end end(E72, E73, E74)); _ -> ('un--postponeS'(V2, V0, V1, 0, V3, V5, V4, <<"Postponing hole application"/utf8>>, V6, {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V7, V8, V9}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V166) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V166} end, V10))}, V11)) end.
'un--unifyHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V17, V13))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V10, V11))), begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V0, <<"unify.hole"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V22) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V23) -> ('Idris.Idris2.Core.Normalise':'un--evalArg'(V0, V2, V20, V23)) end, V21, []))(V22))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V29 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V0, V2, V20, V6, V27, V28)) end end, V26, []))(V22))), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V0, V2, V20, V6, V12, V22))), case V32 of {'Idris.Prelude.Types.Left', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V34) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unifying: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V35) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V2, V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V2, V36, V37)) end end}, V31)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V2, V34))))))))))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V13))), case V38 of {'Idris.Prelude.Types.Left', E10} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V40) -> begin (V41 = ('un--patternEnv'(V0, V1, V2, V6, V21, V13))), case V41 of {'Idris.Prelude.Types.Left', E12} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V71 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V9}, case V17 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V44 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V71 of {'Idris.Prelude.Types.Left', E41} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V73) -> begin (V74 = {'Idris.Prelude.Types.Nothing'}), case V73 of {'Idris.Prelude.Types.Just', E43} -> (fun (V75) -> begin (V76 = {'Idris.Prelude.Types.Just', V75}), (('case--case block in case block in unifyHole-11309'(V2, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V1, V0, V17, V20, V21, V74, V75, V76, case V75 of {'Idris.Core.Context.MkGlobalDef', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97) -> V94 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13)) end end(E43)); _ -> (('un--postponePatVar'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V10, V11, V12))(V13)) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E65} -> (fun (V98) -> case V98 of {'Idris.Builtin.DPair.MkDPair', E66, E67} -> (fun (V99, V100) -> case V100 of {'Idris.Builtin.MkPair', E68, E69} -> (fun (V101, V102) -> begin (V130 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V9}, case V17 of {'Idris.Core.Context.MkDefs', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> V103 end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V130 of {'Idris.Prelude.Types.Left', E97} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V132) -> begin (V133 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V99, {'Idris.Builtin.MkPair', V101, V102}}}), case V132 of {'Idris.Prelude.Types.Just', E99} -> (fun (V134) -> begin (V135 = {'Idris.Prelude.Types.Just', V134}), (('case--case block in case block in unifyHole-11626'(V2, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V1, V0, V17, V20, V21, V99, V101, V102, V133, V134, V135, case V134 of {'Idris.Core.Context.MkGlobalDef', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120} -> (fun (V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156) -> V153 end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13)) end end(E99)); _ -> (('un--postponePatVar'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V10, V11, V12))(V13)) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unifyD'(V0, V1, V2) -> case V1 of {'Idris.Core.Unify.dn--un--__mkUnify', E0, E1} -> (fun (V3, V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ((((((((V3(V2))(V5))(V6))(V7))(V8))(V9))(V10))(V11)) end end end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unifyBothBinders'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V8 of {'Idris.Core.TT.Pi', E0, E1, E2, E3} -> (fun (V14, V15, V16, V17) -> case V12 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V18, V19, V20, V21) -> fun (V22) -> begin (V24 = begin (V23 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> (('case--unifyBothBinders-13942'(V2, V17, V16, V15, V14, V21, V20, V19, V18, V13, V11, V10, V9, V7, V6, V5, V4, V3, V1, V0, V26, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V15, V19))))(V22)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V27) -> ('un--convertError'('erased', V2, V0, V4, V5, {'Idris.Core.Value.NBind', V6, V7, V8, V9}, {'Idris.Core.Value.NBind', V10, V11, V12, V13}, V27)) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Lam', E10, E11, E12, E13} -> (fun (V28, V29, V30, V31) -> case V12 of {'Idris.Core.TT.Lam', E14, E15, E16, E17} -> (fun (V32, V33, V34, V35) -> fun (V36) -> begin (V38 = begin (V37 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E18} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V40) -> (('case--unifyBothBinders-14434'(V2, V31, V30, V29, V28, V35, V34, V33, V32, V13, V11, V10, V9, V7, V6, V5, V4, V3, V1, V0, V40, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V29, V33))))(V36)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14, E15, E16, E17)); _ -> fun (V41) -> ('un--convertError'('erased', V2, V0, V4, V5, {'Idris.Core.Value.NBind', V6, V7, V8, V9}, {'Idris.Core.Value.NBind', V10, V11, V12, V13}, V41)) end end end(E10, E11, E12, E13)); _ -> fun (V42) -> ('un--convertError'('erased', V2, V0, V4, V5, {'Idris.Core.Value.NBind', V6, V7, V8, V9}, {'Idris.Core.Value.NBind', V10, V11, V12, V13}, V42)) end end.
'un--unifyBothApps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V7 of {'Idris.Core.Value.NLocal', E190, E191} -> (fun (V12, V13) -> case V8 of [] -> case V10 of {'Idris.Core.Value.NLocal', E572, E573} -> (fun (V14, V15) -> case V11 of [] -> ('case--unifyBothApps-12870'(V2, 'erased', 'erased', V13, 'erased', V12, V15, 'erased', V14, V9, V6, V5, V4, V3, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V13, V15)))); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E620, E621} -> (fun (V16, V17) -> case V17 of {'Idris.Core.Unify.InTerm'} -> (fun () -> case V7 of {'Idris.Core.Value.NLocal', E714, E715} -> (fun (V18, V19) -> case V10 of {'Idris.Core.Value.NLocal', E762, E763} -> (fun (V20, V21) -> begin (V22 = {'Idris.Core.Unify.MkUnifyInfo', V16, {'Idris.Core.Unify.InTerm'}}), ('case--unifyBothApps-12969'(V2, 'erased', 'erased', V19, 'erased', V18, V21, 'erased', V20, V11, V9, V8, V6, V5, V4, V16, V22, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V19, V21)))) end end(E762, E763)); _ -> case V7 of {'Idris.Core.Value.NLocal', E731, E732} -> (fun (V23, V24) -> case V10 of {'Idris.Core.Value.NLocal', E748, E749} -> (fun (V25, V26) -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V27))), case V28 of {'Idris.Prelude.Types.Left', E750} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E750)); {'Idris.Prelude.Types.Right', E751} -> (fun (V30) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V23, V24}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V25, V26}, V11}, V27)) end(E751)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E748, E749)); _ -> case V10 of {'Idris.Core.Value.NMeta', E743, E744, E745} -> (fun (V31, V32, V33) -> ('case--unifyBothApps-13528'(V2, V33, V32, V31, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E746, E747} -> (fun (V34, V35) -> V35 end(E746, E747)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E743, E744, E745)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E733, E734} -> (fun (V36, V37) -> case V37 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E735, E736} -> (fun (V38, V39) -> case V10 of {'Idris.Core.Value.NRef', E737, E738} -> (fun (V40, V41) -> begin (V42 = {'Idris.Core.Value.NRef', V40, V41}), begin (V43 = {'Idris.Core.Value.NRef', V38, V39}), begin (V44 = {'Idris.Core.Unify.MkUnifyInfo', V36, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V41, V40, V42, V9, V8, V39, V38, V43, V6, V5, V4, V36, V44, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V39, V41)))) end end end end(E737, E738)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E735, E736)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E739, E740} -> (fun (V45, V46) -> case V10 of {'Idris.Core.Value.NRef', E741, E742} -> (fun (V47, V48) -> begin (V49 = {'Idris.Core.Value.NRef', V47, V48}), begin (V50 = {'Idris.Core.Value.NRef', V45, V46}), begin (V51 = {'Idris.Core.Unify.MkUnifyInfo', V36, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V48, V47, V49, V9, V8, V46, V45, V50, V6, V5, V4, V36, V51, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V46, V48)))) end end end end(E741, E742)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E739, E740)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E733, E734)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E731, E732)); {'Idris.Core.Value.NMeta', E752, E753, E754} -> (fun (V52, V53, V54) -> case V10 of {'Idris.Core.Value.NMeta', E755, E756, E757} -> (fun (V55, V56, V57) -> fun (V58) -> begin (V59 = ('un--isDefInvertible'(V0, V4, V53, V58))), case V59 of {'Idris.Prelude.Types.Left', E758} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E758)); {'Idris.Prelude.Types.Right', E759} -> (fun (V61) -> (('case--unifyBothApps-13277'(V2, V54, V53, V52, V57, V56, V55, V11, V9, V8, V6, V5, V4, V3, V1, V0, V61, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V53, V56)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V61, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E760, E761} -> (fun (V62, V63) -> V63 end(E760, E761)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V58)) end(E759)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E755, E756, E757)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V52, V53, V54}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E752, E753, E754)); _ -> case V10 of {'Idris.Core.Value.NMeta', E726, E727, E728} -> (fun (V64, V65, V66) -> ('case--unifyBothApps-13528'(V2, V66, V65, V64, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E729, E730} -> (fun (V67, V68) -> V68 end(E729, E730)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E726, E727, E728)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E716, E717} -> (fun (V69, V70) -> case V70 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E718, E719} -> (fun (V71, V72) -> case V10 of {'Idris.Core.Value.NRef', E720, E721} -> (fun (V73, V74) -> begin (V75 = {'Idris.Core.Value.NRef', V73, V74}), begin (V76 = {'Idris.Core.Value.NRef', V71, V72}), begin (V77 = {'Idris.Core.Unify.MkUnifyInfo', V69, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V74, V73, V75, V9, V8, V72, V71, V76, V6, V5, V4, V69, V77, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V72, V74)))) end end end end(E720, E721)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E718, E719)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E722, E723} -> (fun (V78, V79) -> case V10 of {'Idris.Core.Value.NRef', E724, E725} -> (fun (V80, V81) -> begin (V82 = {'Idris.Core.Value.NRef', V80, V81}), begin (V83 = {'Idris.Core.Value.NRef', V78, V79}), begin (V84 = {'Idris.Core.Unify.MkUnifyInfo', V69, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V81, V80, V82, V9, V8, V79, V78, V83, V6, V5, V4, V69, V84, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V79, V81)))) end end end end(E724, E725)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E722, E723)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E716, E717)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end(E714, E715)); _ -> case V7 of {'Idris.Core.Value.NLocal', E683, E684} -> (fun (V85, V86) -> case V10 of {'Idris.Core.Value.NLocal', E700, E701} -> (fun (V87, V88) -> fun (V89) -> begin (V90 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V89))), case V90 of {'Idris.Prelude.Types.Left', E702} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E702)); {'Idris.Prelude.Types.Right', E703} -> (fun (V92) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V85, V86}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V87, V88}, V11}, V89)) end(E703)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E700, E701)); _ -> case V10 of {'Idris.Core.Value.NMeta', E695, E696, E697} -> (fun (V93, V94, V95) -> ('case--unifyBothApps-13528'(V2, V95, V94, V93, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E698, E699} -> (fun (V96, V97) -> V97 end(E698, E699)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E695, E696, E697)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E685, E686} -> (fun (V98, V99) -> case V99 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E687, E688} -> (fun (V100, V101) -> case V10 of {'Idris.Core.Value.NRef', E689, E690} -> (fun (V102, V103) -> begin (V104 = {'Idris.Core.Value.NRef', V102, V103}), begin (V105 = {'Idris.Core.Value.NRef', V100, V101}), begin (V106 = {'Idris.Core.Unify.MkUnifyInfo', V98, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V103, V102, V104, V9, V8, V101, V100, V105, V6, V5, V4, V98, V106, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V101, V103)))) end end end end(E689, E690)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E687, E688)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E691, E692} -> (fun (V107, V108) -> case V10 of {'Idris.Core.Value.NRef', E693, E694} -> (fun (V109, V110) -> begin (V111 = {'Idris.Core.Value.NRef', V109, V110}), begin (V112 = {'Idris.Core.Value.NRef', V107, V108}), begin (V113 = {'Idris.Core.Unify.MkUnifyInfo', V98, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V110, V109, V111, V9, V8, V108, V107, V112, V6, V5, V4, V98, V113, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V108, V110)))) end end end end(E693, E694)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E691, E692)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E685, E686)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E683, E684)); {'Idris.Core.Value.NMeta', E704, E705, E706} -> (fun (V114, V115, V116) -> case V10 of {'Idris.Core.Value.NMeta', E707, E708, E709} -> (fun (V117, V118, V119) -> fun (V120) -> begin (V121 = ('un--isDefInvertible'(V0, V4, V115, V120))), case V121 of {'Idris.Prelude.Types.Left', E710} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E710)); {'Idris.Prelude.Types.Right', E711} -> (fun (V123) -> (('case--unifyBothApps-13277'(V2, V116, V115, V114, V119, V118, V117, V11, V9, V8, V6, V5, V4, V3, V1, V0, V123, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V115, V118)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V123, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E712, E713} -> (fun (V124, V125) -> V125 end(E712, E713)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V120)) end(E711)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E707, E708, E709)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V114, V115, V116}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E704, E705, E706)); _ -> case V10 of {'Idris.Core.Value.NMeta', E678, E679, E680} -> (fun (V126, V127, V128) -> ('case--unifyBothApps-13528'(V2, V128, V127, V126, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E681, E682} -> (fun (V129, V130) -> V130 end(E681, E682)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E678, E679, E680)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E668, E669} -> (fun (V131, V132) -> case V132 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E670, E671} -> (fun (V133, V134) -> case V10 of {'Idris.Core.Value.NRef', E672, E673} -> (fun (V135, V136) -> begin (V137 = {'Idris.Core.Value.NRef', V135, V136}), begin (V138 = {'Idris.Core.Value.NRef', V133, V134}), begin (V139 = {'Idris.Core.Unify.MkUnifyInfo', V131, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V136, V135, V137, V9, V8, V134, V133, V138, V6, V5, V4, V131, V139, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V134, V136)))) end end end end(E672, E673)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E670, E671)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E674, E675} -> (fun (V140, V141) -> case V10 of {'Idris.Core.Value.NRef', E676, E677} -> (fun (V142, V143) -> begin (V144 = {'Idris.Core.Value.NRef', V142, V143}), begin (V145 = {'Idris.Core.Value.NRef', V140, V141}), begin (V146 = {'Idris.Core.Unify.MkUnifyInfo', V131, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V143, V142, V144, V9, V8, V141, V140, V145, V6, V5, V4, V131, V146, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V141, V143)))) end end end end(E676, E677)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E674, E675)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E668, E669)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end()); _ -> case V7 of {'Idris.Core.Value.NLocal', E637, E638} -> (fun (V147, V148) -> case V10 of {'Idris.Core.Value.NLocal', E654, E655} -> (fun (V149, V150) -> fun (V151) -> begin (V152 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V151))), case V152 of {'Idris.Prelude.Types.Left', E656} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E656)); {'Idris.Prelude.Types.Right', E657} -> (fun (V154) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V147, V148}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V149, V150}, V11}, V151)) end(E657)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E654, E655)); _ -> case V10 of {'Idris.Core.Value.NMeta', E649, E650, E651} -> (fun (V155, V156, V157) -> ('case--unifyBothApps-13528'(V2, V157, V156, V155, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E652, E653} -> (fun (V158, V159) -> V159 end(E652, E653)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E649, E650, E651)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E639, E640} -> (fun (V160, V161) -> case V161 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E641, E642} -> (fun (V162, V163) -> case V10 of {'Idris.Core.Value.NRef', E643, E644} -> (fun (V164, V165) -> begin (V166 = {'Idris.Core.Value.NRef', V164, V165}), begin (V167 = {'Idris.Core.Value.NRef', V162, V163}), begin (V168 = {'Idris.Core.Unify.MkUnifyInfo', V160, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V165, V164, V166, V9, V8, V163, V162, V167, V6, V5, V4, V160, V168, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V163, V165)))) end end end end(E643, E644)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E641, E642)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E645, E646} -> (fun (V169, V170) -> case V10 of {'Idris.Core.Value.NRef', E647, E648} -> (fun (V171, V172) -> begin (V173 = {'Idris.Core.Value.NRef', V171, V172}), begin (V174 = {'Idris.Core.Value.NRef', V169, V170}), begin (V175 = {'Idris.Core.Unify.MkUnifyInfo', V160, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V172, V171, V173, V9, V8, V170, V169, V174, V6, V5, V4, V160, V175, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V170, V172)))) end end end end(E647, E648)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E645, E646)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E639, E640)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E637, E638)); {'Idris.Core.Value.NMeta', E658, E659, E660} -> (fun (V176, V177, V178) -> case V10 of {'Idris.Core.Value.NMeta', E661, E662, E663} -> (fun (V179, V180, V181) -> fun (V182) -> begin (V183 = ('un--isDefInvertible'(V0, V4, V177, V182))), case V183 of {'Idris.Prelude.Types.Left', E664} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E664)); {'Idris.Prelude.Types.Right', E665} -> (fun (V185) -> (('case--unifyBothApps-13277'(V2, V178, V177, V176, V181, V180, V179, V11, V9, V8, V6, V5, V4, V3, V1, V0, V185, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V177, V180)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V185, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E666, E667} -> (fun (V186, V187) -> V187 end(E666, E667)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V182)) end(E665)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E661, E662, E663)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V176, V177, V178}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E658, E659, E660)); _ -> case V10 of {'Idris.Core.Value.NMeta', E632, E633, E634} -> (fun (V188, V189, V190) -> ('case--unifyBothApps-13528'(V2, V190, V189, V188, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E635, E636} -> (fun (V191, V192) -> V192 end(E635, E636)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E632, E633, E634)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E622, E623} -> (fun (V193, V194) -> case V194 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E624, E625} -> (fun (V195, V196) -> case V10 of {'Idris.Core.Value.NRef', E626, E627} -> (fun (V197, V198) -> begin (V199 = {'Idris.Core.Value.NRef', V197, V198}), begin (V200 = {'Idris.Core.Value.NRef', V195, V196}), begin (V201 = {'Idris.Core.Unify.MkUnifyInfo', V193, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V198, V197, V199, V9, V8, V196, V195, V200, V6, V5, V4, V193, V201, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V196, V198)))) end end end end(E626, E627)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E624, E625)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E628, E629} -> (fun (V202, V203) -> case V10 of {'Idris.Core.Value.NRef', E630, E631} -> (fun (V204, V205) -> begin (V206 = {'Idris.Core.Value.NRef', V204, V205}), begin (V207 = {'Idris.Core.Value.NRef', V202, V203}), begin (V208 = {'Idris.Core.Unify.MkUnifyInfo', V193, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V205, V204, V206, V9, V8, V203, V202, V207, V6, V5, V4, V193, V208, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V203, V205)))) end end end end(E630, E631)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E628, E629)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E622, E623)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end(E620, E621)); _ -> case V7 of {'Idris.Core.Value.NLocal', E589, E590} -> (fun (V209, V210) -> case V10 of {'Idris.Core.Value.NLocal', E606, E607} -> (fun (V211, V212) -> fun (V213) -> begin (V214 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V213))), case V214 of {'Idris.Prelude.Types.Left', E608} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E608)); {'Idris.Prelude.Types.Right', E609} -> (fun (V216) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V209, V210}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V211, V212}, V11}, V213)) end(E609)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E606, E607)); _ -> case V10 of {'Idris.Core.Value.NMeta', E601, E602, E603} -> (fun (V217, V218, V219) -> ('case--unifyBothApps-13528'(V2, V219, V218, V217, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E604, E605} -> (fun (V220, V221) -> V221 end(E604, E605)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E601, E602, E603)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E591, E592} -> (fun (V222, V223) -> case V223 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E593, E594} -> (fun (V224, V225) -> case V10 of {'Idris.Core.Value.NRef', E595, E596} -> (fun (V226, V227) -> begin (V228 = {'Idris.Core.Value.NRef', V226, V227}), begin (V229 = {'Idris.Core.Value.NRef', V224, V225}), begin (V230 = {'Idris.Core.Unify.MkUnifyInfo', V222, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V227, V226, V228, V9, V8, V225, V224, V229, V6, V5, V4, V222, V230, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V225, V227)))) end end end end(E595, E596)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E593, E594)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E597, E598} -> (fun (V231, V232) -> case V10 of {'Idris.Core.Value.NRef', E599, E600} -> (fun (V233, V234) -> begin (V235 = {'Idris.Core.Value.NRef', V233, V234}), begin (V236 = {'Idris.Core.Value.NRef', V231, V232}), begin (V237 = {'Idris.Core.Unify.MkUnifyInfo', V222, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V234, V233, V235, V9, V8, V232, V231, V236, V6, V5, V4, V222, V237, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V232, V234)))) end end end end(E599, E600)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E597, E598)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E591, E592)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E589, E590)); {'Idris.Core.Value.NMeta', E610, E611, E612} -> (fun (V238, V239, V240) -> case V10 of {'Idris.Core.Value.NMeta', E613, E614, E615} -> (fun (V241, V242, V243) -> fun (V244) -> begin (V245 = ('un--isDefInvertible'(V0, V4, V239, V244))), case V245 of {'Idris.Prelude.Types.Left', E616} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E616)); {'Idris.Prelude.Types.Right', E617} -> (fun (V247) -> (('case--unifyBothApps-13277'(V2, V240, V239, V238, V243, V242, V241, V11, V9, V8, V6, V5, V4, V3, V1, V0, V247, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V239, V242)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V247, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E618, E619} -> (fun (V248, V249) -> V249 end(E618, E619)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V244)) end(E617)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E613, E614, E615)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V238, V239, V240}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E610, E611, E612)); _ -> case V10 of {'Idris.Core.Value.NMeta', E584, E585, E586} -> (fun (V250, V251, V252) -> ('case--unifyBothApps-13528'(V2, V252, V251, V250, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E587, E588} -> (fun (V253, V254) -> V254 end(E587, E588)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E584, E585, E586)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E574, E575} -> (fun (V255, V256) -> case V256 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E576, E577} -> (fun (V257, V258) -> case V10 of {'Idris.Core.Value.NRef', E578, E579} -> (fun (V259, V260) -> begin (V261 = {'Idris.Core.Value.NRef', V259, V260}), begin (V262 = {'Idris.Core.Value.NRef', V257, V258}), begin (V263 = {'Idris.Core.Unify.MkUnifyInfo', V255, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V260, V259, V261, V9, V8, V258, V257, V262, V6, V5, V4, V255, V263, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V258, V260)))) end end end end(E578, E579)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E576, E577)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E580, E581} -> (fun (V264, V265) -> case V10 of {'Idris.Core.Value.NRef', E582, E583} -> (fun (V266, V267) -> begin (V268 = {'Idris.Core.Value.NRef', V266, V267}), begin (V269 = {'Idris.Core.Value.NRef', V264, V265}), begin (V270 = {'Idris.Core.Unify.MkUnifyInfo', V255, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V267, V266, V268, V9, V8, V265, V264, V269, V6, V5, V4, V255, V270, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V265, V267)))) end end end end(E582, E583)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E580, E581)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E574, E575)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end end(E572, E573)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E428, E429} -> (fun (V271, V272) -> case V272 of {'Idris.Core.Unify.InTerm'} -> (fun () -> case V7 of {'Idris.Core.Value.NLocal', E522, E523} -> (fun (V273, V274) -> case V10 of {'Idris.Core.Value.NLocal', E570, E571} -> (fun (V275, V276) -> begin (V277 = {'Idris.Core.Unify.MkUnifyInfo', V271, {'Idris.Core.Unify.InTerm'}}), ('case--unifyBothApps-12969'(V2, 'erased', 'erased', V274, 'erased', V273, V276, 'erased', V275, V11, V9, V8, V6, V5, V4, V271, V277, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V274, V276)))) end end(E570, E571)); _ -> case V7 of {'Idris.Core.Value.NLocal', E539, E540} -> (fun (V278, V279) -> case V10 of {'Idris.Core.Value.NLocal', E556, E557} -> (fun (V280, V281) -> fun (V282) -> begin (V283 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V282))), case V283 of {'Idris.Prelude.Types.Left', E558} -> (fun (V284) -> {'Idris.Prelude.Types.Left', V284} end(E558)); {'Idris.Prelude.Types.Right', E559} -> (fun (V285) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V278, V279}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V280, V281}, V11}, V282)) end(E559)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E556, E557)); _ -> case V10 of {'Idris.Core.Value.NMeta', E551, E552, E553} -> (fun (V286, V287, V288) -> ('case--unifyBothApps-13528'(V2, V288, V287, V286, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E554, E555} -> (fun (V289, V290) -> V290 end(E554, E555)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E551, E552, E553)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E541, E542} -> (fun (V291, V292) -> case V292 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E543, E544} -> (fun (V293, V294) -> case V10 of {'Idris.Core.Value.NRef', E545, E546} -> (fun (V295, V296) -> begin (V297 = {'Idris.Core.Value.NRef', V295, V296}), begin (V298 = {'Idris.Core.Value.NRef', V293, V294}), begin (V299 = {'Idris.Core.Unify.MkUnifyInfo', V291, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V296, V295, V297, V9, V8, V294, V293, V298, V6, V5, V4, V291, V299, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V294, V296)))) end end end end(E545, E546)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E543, E544)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E547, E548} -> (fun (V300, V301) -> case V10 of {'Idris.Core.Value.NRef', E549, E550} -> (fun (V302, V303) -> begin (V304 = {'Idris.Core.Value.NRef', V302, V303}), begin (V305 = {'Idris.Core.Value.NRef', V300, V301}), begin (V306 = {'Idris.Core.Unify.MkUnifyInfo', V291, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V303, V302, V304, V9, V8, V301, V300, V305, V6, V5, V4, V291, V306, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V301, V303)))) end end end end(E549, E550)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E547, E548)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E541, E542)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E539, E540)); {'Idris.Core.Value.NMeta', E560, E561, E562} -> (fun (V307, V308, V309) -> case V10 of {'Idris.Core.Value.NMeta', E563, E564, E565} -> (fun (V310, V311, V312) -> fun (V313) -> begin (V314 = ('un--isDefInvertible'(V0, V4, V308, V313))), case V314 of {'Idris.Prelude.Types.Left', E566} -> (fun (V315) -> {'Idris.Prelude.Types.Left', V315} end(E566)); {'Idris.Prelude.Types.Right', E567} -> (fun (V316) -> (('case--unifyBothApps-13277'(V2, V309, V308, V307, V312, V311, V310, V11, V9, V8, V6, V5, V4, V3, V1, V0, V316, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V308, V311)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V316, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E568, E569} -> (fun (V317, V318) -> V318 end(E568, E569)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V313)) end(E567)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E563, E564, E565)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V307, V308, V309}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E560, E561, E562)); _ -> case V10 of {'Idris.Core.Value.NMeta', E534, E535, E536} -> (fun (V319, V320, V321) -> ('case--unifyBothApps-13528'(V2, V321, V320, V319, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E537, E538} -> (fun (V322, V323) -> V323 end(E537, E538)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E534, E535, E536)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E524, E525} -> (fun (V324, V325) -> case V325 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E526, E527} -> (fun (V326, V327) -> case V10 of {'Idris.Core.Value.NRef', E528, E529} -> (fun (V328, V329) -> begin (V330 = {'Idris.Core.Value.NRef', V328, V329}), begin (V331 = {'Idris.Core.Value.NRef', V326, V327}), begin (V332 = {'Idris.Core.Unify.MkUnifyInfo', V324, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V329, V328, V330, V9, V8, V327, V326, V331, V6, V5, V4, V324, V332, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V327, V329)))) end end end end(E528, E529)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E526, E527)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E530, E531} -> (fun (V333, V334) -> case V10 of {'Idris.Core.Value.NRef', E532, E533} -> (fun (V335, V336) -> begin (V337 = {'Idris.Core.Value.NRef', V335, V336}), begin (V338 = {'Idris.Core.Value.NRef', V333, V334}), begin (V339 = {'Idris.Core.Unify.MkUnifyInfo', V324, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V336, V335, V337, V9, V8, V334, V333, V338, V6, V5, V4, V324, V339, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V334, V336)))) end end end end(E532, E533)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E530, E531)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E524, E525)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end(E522, E523)); _ -> case V7 of {'Idris.Core.Value.NLocal', E491, E492} -> (fun (V340, V341) -> case V10 of {'Idris.Core.Value.NLocal', E508, E509} -> (fun (V342, V343) -> fun (V344) -> begin (V345 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V344))), case V345 of {'Idris.Prelude.Types.Left', E510} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E510)); {'Idris.Prelude.Types.Right', E511} -> (fun (V347) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V340, V341}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V342, V343}, V11}, V344)) end(E511)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E508, E509)); _ -> case V10 of {'Idris.Core.Value.NMeta', E503, E504, E505} -> (fun (V348, V349, V350) -> ('case--unifyBothApps-13528'(V2, V350, V349, V348, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E506, E507} -> (fun (V351, V352) -> V352 end(E506, E507)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E503, E504, E505)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E493, E494} -> (fun (V353, V354) -> case V354 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E495, E496} -> (fun (V355, V356) -> case V10 of {'Idris.Core.Value.NRef', E497, E498} -> (fun (V357, V358) -> begin (V359 = {'Idris.Core.Value.NRef', V357, V358}), begin (V360 = {'Idris.Core.Value.NRef', V355, V356}), begin (V361 = {'Idris.Core.Unify.MkUnifyInfo', V353, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V358, V357, V359, V9, V8, V356, V355, V360, V6, V5, V4, V353, V361, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V356, V358)))) end end end end(E497, E498)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E495, E496)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E499, E500} -> (fun (V362, V363) -> case V10 of {'Idris.Core.Value.NRef', E501, E502} -> (fun (V364, V365) -> begin (V366 = {'Idris.Core.Value.NRef', V364, V365}), begin (V367 = {'Idris.Core.Value.NRef', V362, V363}), begin (V368 = {'Idris.Core.Unify.MkUnifyInfo', V353, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V365, V364, V366, V9, V8, V363, V362, V367, V6, V5, V4, V353, V368, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V363, V365)))) end end end end(E501, E502)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E499, E500)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E493, E494)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E491, E492)); {'Idris.Core.Value.NMeta', E512, E513, E514} -> (fun (V369, V370, V371) -> case V10 of {'Idris.Core.Value.NMeta', E515, E516, E517} -> (fun (V372, V373, V374) -> fun (V375) -> begin (V376 = ('un--isDefInvertible'(V0, V4, V370, V375))), case V376 of {'Idris.Prelude.Types.Left', E518} -> (fun (V377) -> {'Idris.Prelude.Types.Left', V377} end(E518)); {'Idris.Prelude.Types.Right', E519} -> (fun (V378) -> (('case--unifyBothApps-13277'(V2, V371, V370, V369, V374, V373, V372, V11, V9, V8, V6, V5, V4, V3, V1, V0, V378, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V370, V373)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V378, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E520, E521} -> (fun (V379, V380) -> V380 end(E520, E521)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V375)) end(E519)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E515, E516, E517)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V369, V370, V371}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E512, E513, E514)); _ -> case V10 of {'Idris.Core.Value.NMeta', E486, E487, E488} -> (fun (V381, V382, V383) -> ('case--unifyBothApps-13528'(V2, V383, V382, V381, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E489, E490} -> (fun (V384, V385) -> V385 end(E489, E490)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E486, E487, E488)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E476, E477} -> (fun (V386, V387) -> case V387 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E478, E479} -> (fun (V388, V389) -> case V10 of {'Idris.Core.Value.NRef', E480, E481} -> (fun (V390, V391) -> begin (V392 = {'Idris.Core.Value.NRef', V390, V391}), begin (V393 = {'Idris.Core.Value.NRef', V388, V389}), begin (V394 = {'Idris.Core.Unify.MkUnifyInfo', V386, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V391, V390, V392, V9, V8, V389, V388, V393, V6, V5, V4, V386, V394, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V389, V391)))) end end end end(E480, E481)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E478, E479)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E482, E483} -> (fun (V395, V396) -> case V10 of {'Idris.Core.Value.NRef', E484, E485} -> (fun (V397, V398) -> begin (V399 = {'Idris.Core.Value.NRef', V397, V398}), begin (V400 = {'Idris.Core.Value.NRef', V395, V396}), begin (V401 = {'Idris.Core.Unify.MkUnifyInfo', V386, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V398, V397, V399, V9, V8, V396, V395, V400, V6, V5, V4, V386, V401, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V396, V398)))) end end end end(E484, E485)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E482, E483)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E476, E477)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end()); _ -> case V7 of {'Idris.Core.Value.NLocal', E445, E446} -> (fun (V402, V403) -> case V10 of {'Idris.Core.Value.NLocal', E462, E463} -> (fun (V404, V405) -> fun (V406) -> begin (V407 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V406))), case V407 of {'Idris.Prelude.Types.Left', E464} -> (fun (V408) -> {'Idris.Prelude.Types.Left', V408} end(E464)); {'Idris.Prelude.Types.Right', E465} -> (fun (V409) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V402, V403}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V404, V405}, V11}, V406)) end(E465)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E462, E463)); _ -> case V10 of {'Idris.Core.Value.NMeta', E457, E458, E459} -> (fun (V410, V411, V412) -> ('case--unifyBothApps-13528'(V2, V412, V411, V410, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E460, E461} -> (fun (V413, V414) -> V414 end(E460, E461)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E457, E458, E459)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E447, E448} -> (fun (V415, V416) -> case V416 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E449, E450} -> (fun (V417, V418) -> case V10 of {'Idris.Core.Value.NRef', E451, E452} -> (fun (V419, V420) -> begin (V421 = {'Idris.Core.Value.NRef', V419, V420}), begin (V422 = {'Idris.Core.Value.NRef', V417, V418}), begin (V423 = {'Idris.Core.Unify.MkUnifyInfo', V415, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V420, V419, V421, V9, V8, V418, V417, V422, V6, V5, V4, V415, V423, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V418, V420)))) end end end end(E451, E452)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E449, E450)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E453, E454} -> (fun (V424, V425) -> case V10 of {'Idris.Core.Value.NRef', E455, E456} -> (fun (V426, V427) -> begin (V428 = {'Idris.Core.Value.NRef', V426, V427}), begin (V429 = {'Idris.Core.Value.NRef', V424, V425}), begin (V430 = {'Idris.Core.Unify.MkUnifyInfo', V415, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V427, V426, V428, V9, V8, V425, V424, V429, V6, V5, V4, V415, V430, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V425, V427)))) end end end end(E455, E456)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E453, E454)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E447, E448)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E445, E446)); {'Idris.Core.Value.NMeta', E466, E467, E468} -> (fun (V431, V432, V433) -> case V10 of {'Idris.Core.Value.NMeta', E469, E470, E471} -> (fun (V434, V435, V436) -> fun (V437) -> begin (V438 = ('un--isDefInvertible'(V0, V4, V432, V437))), case V438 of {'Idris.Prelude.Types.Left', E472} -> (fun (V439) -> {'Idris.Prelude.Types.Left', V439} end(E472)); {'Idris.Prelude.Types.Right', E473} -> (fun (V440) -> (('case--unifyBothApps-13277'(V2, V433, V432, V431, V436, V435, V434, V11, V9, V8, V6, V5, V4, V3, V1, V0, V440, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V432, V435)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V440, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E474, E475} -> (fun (V441, V442) -> V442 end(E474, E475)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V437)) end(E473)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E469, E470, E471)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V431, V432, V433}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E466, E467, E468)); _ -> case V10 of {'Idris.Core.Value.NMeta', E440, E441, E442} -> (fun (V443, V444, V445) -> ('case--unifyBothApps-13528'(V2, V445, V444, V443, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E443, E444} -> (fun (V446, V447) -> V447 end(E443, E444)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E440, E441, E442)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E430, E431} -> (fun (V448, V449) -> case V449 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E432, E433} -> (fun (V450, V451) -> case V10 of {'Idris.Core.Value.NRef', E434, E435} -> (fun (V452, V453) -> begin (V454 = {'Idris.Core.Value.NRef', V452, V453}), begin (V455 = {'Idris.Core.Value.NRef', V450, V451}), begin (V456 = {'Idris.Core.Unify.MkUnifyInfo', V448, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V453, V452, V454, V9, V8, V451, V450, V455, V6, V5, V4, V448, V456, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V451, V453)))) end end end end(E434, E435)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E432, E433)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E436, E437} -> (fun (V457, V458) -> case V10 of {'Idris.Core.Value.NRef', E438, E439} -> (fun (V459, V460) -> begin (V461 = {'Idris.Core.Value.NRef', V459, V460}), begin (V462 = {'Idris.Core.Value.NRef', V457, V458}), begin (V463 = {'Idris.Core.Unify.MkUnifyInfo', V448, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V460, V459, V461, V9, V8, V458, V457, V462, V6, V5, V4, V448, V463, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V458, V460)))) end end end end(E438, E439)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E436, E437)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E430, E431)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end(E428, E429)); _ -> case V7 of {'Idris.Core.Value.NLocal', E397, E398} -> (fun (V464, V465) -> case V10 of {'Idris.Core.Value.NLocal', E414, E415} -> (fun (V466, V467) -> fun (V468) -> begin (V469 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V468))), case V469 of {'Idris.Prelude.Types.Left', E416} -> (fun (V470) -> {'Idris.Prelude.Types.Left', V470} end(E416)); {'Idris.Prelude.Types.Right', E417} -> (fun (V471) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V464, V465}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V466, V467}, V11}, V468)) end(E417)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E414, E415)); _ -> case V10 of {'Idris.Core.Value.NMeta', E409, E410, E411} -> (fun (V472, V473, V474) -> ('case--unifyBothApps-13528'(V2, V474, V473, V472, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E412, E413} -> (fun (V475, V476) -> V476 end(E412, E413)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E409, E410, E411)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E399, E400} -> (fun (V477, V478) -> case V478 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E401, E402} -> (fun (V479, V480) -> case V10 of {'Idris.Core.Value.NRef', E403, E404} -> (fun (V481, V482) -> begin (V483 = {'Idris.Core.Value.NRef', V481, V482}), begin (V484 = {'Idris.Core.Value.NRef', V479, V480}), begin (V485 = {'Idris.Core.Unify.MkUnifyInfo', V477, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V482, V481, V483, V9, V8, V480, V479, V484, V6, V5, V4, V477, V485, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V480, V482)))) end end end end(E403, E404)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E401, E402)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E405, E406} -> (fun (V486, V487) -> case V10 of {'Idris.Core.Value.NRef', E407, E408} -> (fun (V488, V489) -> begin (V490 = {'Idris.Core.Value.NRef', V488, V489}), begin (V491 = {'Idris.Core.Value.NRef', V486, V487}), begin (V492 = {'Idris.Core.Unify.MkUnifyInfo', V477, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V489, V488, V490, V9, V8, V487, V486, V491, V6, V5, V4, V477, V492, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V487, V489)))) end end end end(E407, E408)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E405, E406)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E399, E400)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E397, E398)); {'Idris.Core.Value.NMeta', E418, E419, E420} -> (fun (V493, V494, V495) -> case V10 of {'Idris.Core.Value.NMeta', E421, E422, E423} -> (fun (V496, V497, V498) -> fun (V499) -> begin (V500 = ('un--isDefInvertible'(V0, V4, V494, V499))), case V500 of {'Idris.Prelude.Types.Left', E424} -> (fun (V501) -> {'Idris.Prelude.Types.Left', V501} end(E424)); {'Idris.Prelude.Types.Right', E425} -> (fun (V502) -> (('case--unifyBothApps-13277'(V2, V495, V494, V493, V498, V497, V496, V11, V9, V8, V6, V5, V4, V3, V1, V0, V502, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V494, V497)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V502, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E426, E427} -> (fun (V503, V504) -> V504 end(E426, E427)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V499)) end(E425)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E421, E422, E423)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V493, V494, V495}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E418, E419, E420)); _ -> case V10 of {'Idris.Core.Value.NMeta', E392, E393, E394} -> (fun (V505, V506, V507) -> ('case--unifyBothApps-13528'(V2, V507, V506, V505, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E395, E396} -> (fun (V508, V509) -> V509 end(E395, E396)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E392, E393, E394)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E382, E383} -> (fun (V510, V511) -> case V511 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E384, E385} -> (fun (V512, V513) -> case V10 of {'Idris.Core.Value.NRef', E386, E387} -> (fun (V514, V515) -> begin (V516 = {'Idris.Core.Value.NRef', V514, V515}), begin (V517 = {'Idris.Core.Value.NRef', V512, V513}), begin (V518 = {'Idris.Core.Unify.MkUnifyInfo', V510, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V515, V514, V516, V9, V8, V513, V512, V517, V6, V5, V4, V510, V518, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V513, V515)))) end end end end(E386, E387)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E384, E385)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E388, E389} -> (fun (V519, V520) -> case V10 of {'Idris.Core.Value.NRef', E390, E391} -> (fun (V521, V522) -> begin (V523 = {'Idris.Core.Value.NRef', V521, V522}), begin (V524 = {'Idris.Core.Value.NRef', V519, V520}), begin (V525 = {'Idris.Core.Unify.MkUnifyInfo', V510, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V522, V521, V523, V9, V8, V520, V519, V524, V6, V5, V4, V510, V525, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V520, V522)))) end end end end(E390, E391)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E388, E389)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E382, E383)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end; _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E238, E239} -> (fun (V526, V527) -> case V527 of {'Idris.Core.Unify.InTerm'} -> (fun () -> case V7 of {'Idris.Core.Value.NLocal', E332, E333} -> (fun (V528, V529) -> case V10 of {'Idris.Core.Value.NLocal', E380, E381} -> (fun (V530, V531) -> begin (V532 = {'Idris.Core.Unify.MkUnifyInfo', V526, {'Idris.Core.Unify.InTerm'}}), ('case--unifyBothApps-12969'(V2, 'erased', 'erased', V529, 'erased', V528, V531, 'erased', V530, V11, V9, V8, V6, V5, V4, V526, V532, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V529, V531)))) end end(E380, E381)); _ -> case V7 of {'Idris.Core.Value.NLocal', E349, E350} -> (fun (V533, V534) -> case V10 of {'Idris.Core.Value.NLocal', E366, E367} -> (fun (V535, V536) -> fun (V537) -> begin (V538 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V537))), case V538 of {'Idris.Prelude.Types.Left', E368} -> (fun (V539) -> {'Idris.Prelude.Types.Left', V539} end(E368)); {'Idris.Prelude.Types.Right', E369} -> (fun (V540) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V533, V534}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V535, V536}, V11}, V537)) end(E369)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E366, E367)); _ -> case V10 of {'Idris.Core.Value.NMeta', E361, E362, E363} -> (fun (V541, V542, V543) -> ('case--unifyBothApps-13528'(V2, V543, V542, V541, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E364, E365} -> (fun (V544, V545) -> V545 end(E364, E365)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E361, E362, E363)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E351, E352} -> (fun (V546, V547) -> case V547 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E353, E354} -> (fun (V548, V549) -> case V10 of {'Idris.Core.Value.NRef', E355, E356} -> (fun (V550, V551) -> begin (V552 = {'Idris.Core.Value.NRef', V550, V551}), begin (V553 = {'Idris.Core.Value.NRef', V548, V549}), begin (V554 = {'Idris.Core.Unify.MkUnifyInfo', V546, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V551, V550, V552, V9, V8, V549, V548, V553, V6, V5, V4, V546, V554, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V549, V551)))) end end end end(E355, E356)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E353, E354)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E357, E358} -> (fun (V555, V556) -> case V10 of {'Idris.Core.Value.NRef', E359, E360} -> (fun (V557, V558) -> begin (V559 = {'Idris.Core.Value.NRef', V557, V558}), begin (V560 = {'Idris.Core.Value.NRef', V555, V556}), begin (V561 = {'Idris.Core.Unify.MkUnifyInfo', V546, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V558, V557, V559, V9, V8, V556, V555, V560, V6, V5, V4, V546, V561, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V556, V558)))) end end end end(E359, E360)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E357, E358)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E351, E352)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E349, E350)); {'Idris.Core.Value.NMeta', E370, E371, E372} -> (fun (V562, V563, V564) -> case V10 of {'Idris.Core.Value.NMeta', E373, E374, E375} -> (fun (V565, V566, V567) -> fun (V568) -> begin (V569 = ('un--isDefInvertible'(V0, V4, V563, V568))), case V569 of {'Idris.Prelude.Types.Left', E376} -> (fun (V570) -> {'Idris.Prelude.Types.Left', V570} end(E376)); {'Idris.Prelude.Types.Right', E377} -> (fun (V571) -> (('case--unifyBothApps-13277'(V2, V564, V563, V562, V567, V566, V565, V11, V9, V8, V6, V5, V4, V3, V1, V0, V571, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V563, V566)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V571, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E378, E379} -> (fun (V572, V573) -> V573 end(E378, E379)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V568)) end(E377)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E373, E374, E375)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V562, V563, V564}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E370, E371, E372)); _ -> case V10 of {'Idris.Core.Value.NMeta', E344, E345, E346} -> (fun (V574, V575, V576) -> ('case--unifyBothApps-13528'(V2, V576, V575, V574, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E347, E348} -> (fun (V577, V578) -> V578 end(E347, E348)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E344, E345, E346)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E334, E335} -> (fun (V579, V580) -> case V580 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E336, E337} -> (fun (V581, V582) -> case V10 of {'Idris.Core.Value.NRef', E338, E339} -> (fun (V583, V584) -> begin (V585 = {'Idris.Core.Value.NRef', V583, V584}), begin (V586 = {'Idris.Core.Value.NRef', V581, V582}), begin (V587 = {'Idris.Core.Unify.MkUnifyInfo', V579, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V584, V583, V585, V9, V8, V582, V581, V586, V6, V5, V4, V579, V587, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V582, V584)))) end end end end(E338, E339)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E336, E337)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E340, E341} -> (fun (V588, V589) -> case V10 of {'Idris.Core.Value.NRef', E342, E343} -> (fun (V590, V591) -> begin (V592 = {'Idris.Core.Value.NRef', V590, V591}), begin (V593 = {'Idris.Core.Value.NRef', V588, V589}), begin (V594 = {'Idris.Core.Unify.MkUnifyInfo', V579, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V591, V590, V592, V9, V8, V589, V588, V593, V6, V5, V4, V579, V594, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V589, V591)))) end end end end(E342, E343)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E340, E341)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E334, E335)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end(E332, E333)); _ -> case V7 of {'Idris.Core.Value.NLocal', E301, E302} -> (fun (V595, V596) -> case V10 of {'Idris.Core.Value.NLocal', E318, E319} -> (fun (V597, V598) -> fun (V599) -> begin (V600 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V599))), case V600 of {'Idris.Prelude.Types.Left', E320} -> (fun (V601) -> {'Idris.Prelude.Types.Left', V601} end(E320)); {'Idris.Prelude.Types.Right', E321} -> (fun (V602) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V595, V596}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V597, V598}, V11}, V599)) end(E321)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E318, E319)); _ -> case V10 of {'Idris.Core.Value.NMeta', E313, E314, E315} -> (fun (V603, V604, V605) -> ('case--unifyBothApps-13528'(V2, V605, V604, V603, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E316, E317} -> (fun (V606, V607) -> V607 end(E316, E317)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E313, E314, E315)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E303, E304} -> (fun (V608, V609) -> case V609 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E305, E306} -> (fun (V610, V611) -> case V10 of {'Idris.Core.Value.NRef', E307, E308} -> (fun (V612, V613) -> begin (V614 = {'Idris.Core.Value.NRef', V612, V613}), begin (V615 = {'Idris.Core.Value.NRef', V610, V611}), begin (V616 = {'Idris.Core.Unify.MkUnifyInfo', V608, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V613, V612, V614, V9, V8, V611, V610, V615, V6, V5, V4, V608, V616, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V611, V613)))) end end end end(E307, E308)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E305, E306)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E309, E310} -> (fun (V617, V618) -> case V10 of {'Idris.Core.Value.NRef', E311, E312} -> (fun (V619, V620) -> begin (V621 = {'Idris.Core.Value.NRef', V619, V620}), begin (V622 = {'Idris.Core.Value.NRef', V617, V618}), begin (V623 = {'Idris.Core.Unify.MkUnifyInfo', V608, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V620, V619, V621, V9, V8, V618, V617, V622, V6, V5, V4, V608, V623, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V618, V620)))) end end end end(E311, E312)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E309, E310)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E303, E304)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E301, E302)); {'Idris.Core.Value.NMeta', E322, E323, E324} -> (fun (V624, V625, V626) -> case V10 of {'Idris.Core.Value.NMeta', E325, E326, E327} -> (fun (V627, V628, V629) -> fun (V630) -> begin (V631 = ('un--isDefInvertible'(V0, V4, V625, V630))), case V631 of {'Idris.Prelude.Types.Left', E328} -> (fun (V632) -> {'Idris.Prelude.Types.Left', V632} end(E328)); {'Idris.Prelude.Types.Right', E329} -> (fun (V633) -> (('case--unifyBothApps-13277'(V2, V626, V625, V624, V629, V628, V627, V11, V9, V8, V6, V5, V4, V3, V1, V0, V633, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V625, V628)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V633, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E330, E331} -> (fun (V634, V635) -> V635 end(E330, E331)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V630)) end(E329)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E325, E326, E327)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V624, V625, V626}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E322, E323, E324)); _ -> case V10 of {'Idris.Core.Value.NMeta', E296, E297, E298} -> (fun (V636, V637, V638) -> ('case--unifyBothApps-13528'(V2, V638, V637, V636, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E299, E300} -> (fun (V639, V640) -> V640 end(E299, E300)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E296, E297, E298)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E286, E287} -> (fun (V641, V642) -> case V642 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E288, E289} -> (fun (V643, V644) -> case V10 of {'Idris.Core.Value.NRef', E290, E291} -> (fun (V645, V646) -> begin (V647 = {'Idris.Core.Value.NRef', V645, V646}), begin (V648 = {'Idris.Core.Value.NRef', V643, V644}), begin (V649 = {'Idris.Core.Unify.MkUnifyInfo', V641, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V646, V645, V647, V9, V8, V644, V643, V648, V6, V5, V4, V641, V649, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V644, V646)))) end end end end(E290, E291)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E288, E289)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E292, E293} -> (fun (V650, V651) -> case V10 of {'Idris.Core.Value.NRef', E294, E295} -> (fun (V652, V653) -> begin (V654 = {'Idris.Core.Value.NRef', V652, V653}), begin (V655 = {'Idris.Core.Value.NRef', V650, V651}), begin (V656 = {'Idris.Core.Unify.MkUnifyInfo', V641, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V653, V652, V654, V9, V8, V651, V650, V655, V6, V5, V4, V641, V656, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V651, V653)))) end end end end(E294, E295)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E292, E293)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E286, E287)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end()); _ -> case V7 of {'Idris.Core.Value.NLocal', E255, E256} -> (fun (V657, V658) -> case V10 of {'Idris.Core.Value.NLocal', E272, E273} -> (fun (V659, V660) -> fun (V661) -> begin (V662 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V661))), case V662 of {'Idris.Prelude.Types.Left', E274} -> (fun (V663) -> {'Idris.Prelude.Types.Left', V663} end(E274)); {'Idris.Prelude.Types.Right', E275} -> (fun (V664) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V657, V658}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V659, V660}, V11}, V661)) end(E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E272, E273)); _ -> case V10 of {'Idris.Core.Value.NMeta', E267, E268, E269} -> (fun (V665, V666, V667) -> ('case--unifyBothApps-13528'(V2, V667, V666, V665, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E270, E271} -> (fun (V668, V669) -> V669 end(E270, E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E267, E268, E269)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E257, E258} -> (fun (V670, V671) -> case V671 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E259, E260} -> (fun (V672, V673) -> case V10 of {'Idris.Core.Value.NRef', E261, E262} -> (fun (V674, V675) -> begin (V676 = {'Idris.Core.Value.NRef', V674, V675}), begin (V677 = {'Idris.Core.Value.NRef', V672, V673}), begin (V678 = {'Idris.Core.Unify.MkUnifyInfo', V670, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V675, V674, V676, V9, V8, V673, V672, V677, V6, V5, V4, V670, V678, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V673, V675)))) end end end end(E261, E262)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E259, E260)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E263, E264} -> (fun (V679, V680) -> case V10 of {'Idris.Core.Value.NRef', E265, E266} -> (fun (V681, V682) -> begin (V683 = {'Idris.Core.Value.NRef', V681, V682}), begin (V684 = {'Idris.Core.Value.NRef', V679, V680}), begin (V685 = {'Idris.Core.Unify.MkUnifyInfo', V670, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V682, V681, V683, V9, V8, V680, V679, V684, V6, V5, V4, V670, V685, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V680, V682)))) end end end end(E265, E266)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E263, E264)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E257, E258)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E255, E256)); {'Idris.Core.Value.NMeta', E276, E277, E278} -> (fun (V686, V687, V688) -> case V10 of {'Idris.Core.Value.NMeta', E279, E280, E281} -> (fun (V689, V690, V691) -> fun (V692) -> begin (V693 = ('un--isDefInvertible'(V0, V4, V687, V692))), case V693 of {'Idris.Prelude.Types.Left', E282} -> (fun (V694) -> {'Idris.Prelude.Types.Left', V694} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V695) -> (('case--unifyBothApps-13277'(V2, V688, V687, V686, V691, V690, V689, V11, V9, V8, V6, V5, V4, V3, V1, V0, V695, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V687, V690)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V695, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E284, E285} -> (fun (V696, V697) -> V697 end(E284, E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V692)) end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E279, E280, E281)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V686, V687, V688}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E276, E277, E278)); _ -> case V10 of {'Idris.Core.Value.NMeta', E250, E251, E252} -> (fun (V698, V699, V700) -> ('case--unifyBothApps-13528'(V2, V700, V699, V698, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E253, E254} -> (fun (V701, V702) -> V702 end(E253, E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E250, E251, E252)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E240, E241} -> (fun (V703, V704) -> case V704 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E242, E243} -> (fun (V705, V706) -> case V10 of {'Idris.Core.Value.NRef', E244, E245} -> (fun (V707, V708) -> begin (V709 = {'Idris.Core.Value.NRef', V707, V708}), begin (V710 = {'Idris.Core.Value.NRef', V705, V706}), begin (V711 = {'Idris.Core.Unify.MkUnifyInfo', V703, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V708, V707, V709, V9, V8, V706, V705, V710, V6, V5, V4, V703, V711, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V706, V708)))) end end end end(E244, E245)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E242, E243)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E246, E247} -> (fun (V712, V713) -> case V10 of {'Idris.Core.Value.NRef', E248, E249} -> (fun (V714, V715) -> begin (V716 = {'Idris.Core.Value.NRef', V714, V715}), begin (V717 = {'Idris.Core.Value.NRef', V712, V713}), begin (V718 = {'Idris.Core.Unify.MkUnifyInfo', V703, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V715, V714, V716, V9, V8, V713, V712, V717, V6, V5, V4, V703, V718, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V713, V715)))) end end end end(E248, E249)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E246, E247)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E240, E241)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end(E238, E239)); _ -> case V7 of {'Idris.Core.Value.NLocal', E207, E208} -> (fun (V719, V720) -> case V10 of {'Idris.Core.Value.NLocal', E224, E225} -> (fun (V721, V722) -> fun (V723) -> begin (V724 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V723))), case V724 of {'Idris.Prelude.Types.Left', E226} -> (fun (V725) -> {'Idris.Prelude.Types.Left', V725} end(E226)); {'Idris.Prelude.Types.Right', E227} -> (fun (V726) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V719, V720}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V721, V722}, V11}, V723)) end(E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E224, E225)); _ -> case V10 of {'Idris.Core.Value.NMeta', E219, E220, E221} -> (fun (V727, V728, V729) -> ('case--unifyBothApps-13528'(V2, V729, V728, V727, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E222, E223} -> (fun (V730, V731) -> V731 end(E222, E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E219, E220, E221)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E209, E210} -> (fun (V732, V733) -> case V733 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E211, E212} -> (fun (V734, V735) -> case V10 of {'Idris.Core.Value.NRef', E213, E214} -> (fun (V736, V737) -> begin (V738 = {'Idris.Core.Value.NRef', V736, V737}), begin (V739 = {'Idris.Core.Value.NRef', V734, V735}), begin (V740 = {'Idris.Core.Unify.MkUnifyInfo', V732, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V737, V736, V738, V9, V8, V735, V734, V739, V6, V5, V4, V732, V740, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V735, V737)))) end end end end(E213, E214)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E211, E212)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E215, E216} -> (fun (V741, V742) -> case V10 of {'Idris.Core.Value.NRef', E217, E218} -> (fun (V743, V744) -> begin (V745 = {'Idris.Core.Value.NRef', V743, V744}), begin (V746 = {'Idris.Core.Value.NRef', V741, V742}), begin (V747 = {'Idris.Core.Unify.MkUnifyInfo', V732, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V744, V743, V745, V9, V8, V742, V741, V746, V6, V5, V4, V732, V747, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V742, V744)))) end end end end(E217, E218)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E215, E216)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E209, E210)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E207, E208)); {'Idris.Core.Value.NMeta', E228, E229, E230} -> (fun (V748, V749, V750) -> case V10 of {'Idris.Core.Value.NMeta', E231, E232, E233} -> (fun (V751, V752, V753) -> fun (V754) -> begin (V755 = ('un--isDefInvertible'(V0, V4, V749, V754))), case V755 of {'Idris.Prelude.Types.Left', E234} -> (fun (V756) -> {'Idris.Prelude.Types.Left', V756} end(E234)); {'Idris.Prelude.Types.Right', E235} -> (fun (V757) -> (('case--unifyBothApps-13277'(V2, V750, V749, V748, V753, V752, V751, V11, V9, V8, V6, V5, V4, V3, V1, V0, V757, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V749, V752)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V757, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E236, E237} -> (fun (V758, V759) -> V759 end(E236, E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V754)) end(E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E231, E232, E233)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V748, V749, V750}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E228, E229, E230)); _ -> case V10 of {'Idris.Core.Value.NMeta', E202, E203, E204} -> (fun (V760, V761, V762) -> ('case--unifyBothApps-13528'(V2, V762, V761, V760, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E205, E206} -> (fun (V763, V764) -> V764 end(E205, E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E202, E203, E204)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E192, E193} -> (fun (V765, V766) -> case V766 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E194, E195} -> (fun (V767, V768) -> case V10 of {'Idris.Core.Value.NRef', E196, E197} -> (fun (V769, V770) -> begin (V771 = {'Idris.Core.Value.NRef', V769, V770}), begin (V772 = {'Idris.Core.Value.NRef', V767, V768}), begin (V773 = {'Idris.Core.Unify.MkUnifyInfo', V765, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V770, V769, V771, V9, V8, V768, V767, V772, V6, V5, V4, V765, V773, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V768, V770)))) end end end end(E196, E197)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E194, E195)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E198, E199} -> (fun (V774, V775) -> case V10 of {'Idris.Core.Value.NRef', E200, E201} -> (fun (V776, V777) -> begin (V778 = {'Idris.Core.Value.NRef', V776, V777}), begin (V779 = {'Idris.Core.Value.NRef', V774, V775}), begin (V780 = {'Idris.Core.Unify.MkUnifyInfo', V765, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V777, V776, V778, V9, V8, V775, V774, V779, V6, V5, V4, V765, V780, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V775, V777)))) end end end end(E200, E201)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E198, E199)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E192, E193)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end end(E190, E191)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E46, E47} -> (fun (V781, V782) -> case V782 of {'Idris.Core.Unify.InTerm'} -> (fun () -> case V7 of {'Idris.Core.Value.NLocal', E140, E141} -> (fun (V783, V784) -> case V10 of {'Idris.Core.Value.NLocal', E188, E189} -> (fun (V785, V786) -> begin (V787 = {'Idris.Core.Unify.MkUnifyInfo', V781, {'Idris.Core.Unify.InTerm'}}), ('case--unifyBothApps-12969'(V2, 'erased', 'erased', V784, 'erased', V783, V786, 'erased', V785, V11, V9, V8, V6, V5, V4, V781, V787, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V784, V786)))) end end(E188, E189)); _ -> case V7 of {'Idris.Core.Value.NLocal', E157, E158} -> (fun (V788, V789) -> case V10 of {'Idris.Core.Value.NLocal', E174, E175} -> (fun (V790, V791) -> fun (V792) -> begin (V793 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V792))), case V793 of {'Idris.Prelude.Types.Left', E176} -> (fun (V794) -> {'Idris.Prelude.Types.Left', V794} end(E176)); {'Idris.Prelude.Types.Right', E177} -> (fun (V795) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V788, V789}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V790, V791}, V11}, V792)) end(E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E174, E175)); _ -> case V10 of {'Idris.Core.Value.NMeta', E169, E170, E171} -> (fun (V796, V797, V798) -> ('case--unifyBothApps-13528'(V2, V798, V797, V796, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E172, E173} -> (fun (V799, V800) -> V800 end(E172, E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E169, E170, E171)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E159, E160} -> (fun (V801, V802) -> case V802 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E161, E162} -> (fun (V803, V804) -> case V10 of {'Idris.Core.Value.NRef', E163, E164} -> (fun (V805, V806) -> begin (V807 = {'Idris.Core.Value.NRef', V805, V806}), begin (V808 = {'Idris.Core.Value.NRef', V803, V804}), begin (V809 = {'Idris.Core.Unify.MkUnifyInfo', V801, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V806, V805, V807, V9, V8, V804, V803, V808, V6, V5, V4, V801, V809, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V804, V806)))) end end end end(E163, E164)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E161, E162)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E165, E166} -> (fun (V810, V811) -> case V10 of {'Idris.Core.Value.NRef', E167, E168} -> (fun (V812, V813) -> begin (V814 = {'Idris.Core.Value.NRef', V812, V813}), begin (V815 = {'Idris.Core.Value.NRef', V810, V811}), begin (V816 = {'Idris.Core.Unify.MkUnifyInfo', V801, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V813, V812, V814, V9, V8, V811, V810, V815, V6, V5, V4, V801, V816, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V811, V813)))) end end end end(E167, E168)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E165, E166)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E159, E160)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E157, E158)); {'Idris.Core.Value.NMeta', E178, E179, E180} -> (fun (V817, V818, V819) -> case V10 of {'Idris.Core.Value.NMeta', E181, E182, E183} -> (fun (V820, V821, V822) -> fun (V823) -> begin (V824 = ('un--isDefInvertible'(V0, V4, V818, V823))), case V824 of {'Idris.Prelude.Types.Left', E184} -> (fun (V825) -> {'Idris.Prelude.Types.Left', V825} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V826) -> (('case--unifyBothApps-13277'(V2, V819, V818, V817, V822, V821, V820, V11, V9, V8, V6, V5, V4, V3, V1, V0, V826, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V818, V821)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V826, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E186, E187} -> (fun (V827, V828) -> V828 end(E186, E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V823)) end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E181, E182, E183)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V817, V818, V819}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E178, E179, E180)); _ -> case V10 of {'Idris.Core.Value.NMeta', E152, E153, E154} -> (fun (V829, V830, V831) -> ('case--unifyBothApps-13528'(V2, V831, V830, V829, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E155, E156} -> (fun (V832, V833) -> V833 end(E155, E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E152, E153, E154)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E142, E143} -> (fun (V834, V835) -> case V835 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E144, E145} -> (fun (V836, V837) -> case V10 of {'Idris.Core.Value.NRef', E146, E147} -> (fun (V838, V839) -> begin (V840 = {'Idris.Core.Value.NRef', V838, V839}), begin (V841 = {'Idris.Core.Value.NRef', V836, V837}), begin (V842 = {'Idris.Core.Unify.MkUnifyInfo', V834, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V839, V838, V840, V9, V8, V837, V836, V841, V6, V5, V4, V834, V842, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V837, V839)))) end end end end(E146, E147)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E144, E145)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E148, E149} -> (fun (V843, V844) -> case V10 of {'Idris.Core.Value.NRef', E150, E151} -> (fun (V845, V846) -> begin (V847 = {'Idris.Core.Value.NRef', V845, V846}), begin (V848 = {'Idris.Core.Value.NRef', V843, V844}), begin (V849 = {'Idris.Core.Unify.MkUnifyInfo', V834, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V846, V845, V847, V9, V8, V844, V843, V848, V6, V5, V4, V834, V849, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V844, V846)))) end end end end(E150, E151)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E148, E149)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E142, E143)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end(E140, E141)); _ -> case V7 of {'Idris.Core.Value.NLocal', E109, E110} -> (fun (V850, V851) -> case V10 of {'Idris.Core.Value.NLocal', E126, E127} -> (fun (V852, V853) -> fun (V854) -> begin (V855 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V854))), case V855 of {'Idris.Prelude.Types.Left', E128} -> (fun (V856) -> {'Idris.Prelude.Types.Left', V856} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V857) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V850, V851}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V852, V853}, V11}, V854)) end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126, E127)); _ -> case V10 of {'Idris.Core.Value.NMeta', E121, E122, E123} -> (fun (V858, V859, V860) -> ('case--unifyBothApps-13528'(V2, V860, V859, V858, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E124, E125} -> (fun (V861, V862) -> V862 end(E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E121, E122, E123)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E111, E112} -> (fun (V863, V864) -> case V864 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E113, E114} -> (fun (V865, V866) -> case V10 of {'Idris.Core.Value.NRef', E115, E116} -> (fun (V867, V868) -> begin (V869 = {'Idris.Core.Value.NRef', V867, V868}), begin (V870 = {'Idris.Core.Value.NRef', V865, V866}), begin (V871 = {'Idris.Core.Unify.MkUnifyInfo', V863, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V868, V867, V869, V9, V8, V866, V865, V870, V6, V5, V4, V863, V871, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V866, V868)))) end end end end(E115, E116)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E113, E114)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E117, E118} -> (fun (V872, V873) -> case V10 of {'Idris.Core.Value.NRef', E119, E120} -> (fun (V874, V875) -> begin (V876 = {'Idris.Core.Value.NRef', V874, V875}), begin (V877 = {'Idris.Core.Value.NRef', V872, V873}), begin (V878 = {'Idris.Core.Unify.MkUnifyInfo', V863, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V875, V874, V876, V9, V8, V873, V872, V877, V6, V5, V4, V863, V878, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V873, V875)))) end end end end(E119, E120)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E117, E118)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E111, E112)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E109, E110)); {'Idris.Core.Value.NMeta', E130, E131, E132} -> (fun (V879, V880, V881) -> case V10 of {'Idris.Core.Value.NMeta', E133, E134, E135} -> (fun (V882, V883, V884) -> fun (V885) -> begin (V886 = ('un--isDefInvertible'(V0, V4, V880, V885))), case V886 of {'Idris.Prelude.Types.Left', E136} -> (fun (V887) -> {'Idris.Prelude.Types.Left', V887} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V888) -> (('case--unifyBothApps-13277'(V2, V881, V880, V879, V884, V883, V882, V11, V9, V8, V6, V5, V4, V3, V1, V0, V888, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V880, V883)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V888, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E138, E139} -> (fun (V889, V890) -> V890 end(E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V885)) end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E133, E134, E135)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V879, V880, V881}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E130, E131, E132)); _ -> case V10 of {'Idris.Core.Value.NMeta', E104, E105, E106} -> (fun (V891, V892, V893) -> ('case--unifyBothApps-13528'(V2, V893, V892, V891, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E107, E108} -> (fun (V894, V895) -> V895 end(E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E104, E105, E106)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E94, E95} -> (fun (V896, V897) -> case V897 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E96, E97} -> (fun (V898, V899) -> case V10 of {'Idris.Core.Value.NRef', E98, E99} -> (fun (V900, V901) -> begin (V902 = {'Idris.Core.Value.NRef', V900, V901}), begin (V903 = {'Idris.Core.Value.NRef', V898, V899}), begin (V904 = {'Idris.Core.Unify.MkUnifyInfo', V896, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V901, V900, V902, V9, V8, V899, V898, V903, V6, V5, V4, V896, V904, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V899, V901)))) end end end end(E98, E99)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E96, E97)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E100, E101} -> (fun (V905, V906) -> case V10 of {'Idris.Core.Value.NRef', E102, E103} -> (fun (V907, V908) -> begin (V909 = {'Idris.Core.Value.NRef', V907, V908}), begin (V910 = {'Idris.Core.Value.NRef', V905, V906}), begin (V911 = {'Idris.Core.Unify.MkUnifyInfo', V896, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V908, V907, V909, V9, V8, V906, V905, V910, V6, V5, V4, V896, V911, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V906, V908)))) end end end end(E102, E103)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E100, E101)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E94, E95)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end()); _ -> case V7 of {'Idris.Core.Value.NLocal', E63, E64} -> (fun (V912, V913) -> case V10 of {'Idris.Core.Value.NLocal', E80, E81} -> (fun (V914, V915) -> fun (V916) -> begin (V917 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V916))), case V917 of {'Idris.Prelude.Types.Left', E82} -> (fun (V918) -> {'Idris.Prelude.Types.Left', V918} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V919) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V912, V913}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V914, V915}, V11}, V916)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E80, E81)); _ -> case V10 of {'Idris.Core.Value.NMeta', E75, E76, E77} -> (fun (V920, V921, V922) -> ('case--unifyBothApps-13528'(V2, V922, V921, V920, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E78, E79} -> (fun (V923, V924) -> V924 end(E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E75, E76, E77)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E65, E66} -> (fun (V925, V926) -> case V926 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E67, E68} -> (fun (V927, V928) -> case V10 of {'Idris.Core.Value.NRef', E69, E70} -> (fun (V929, V930) -> begin (V931 = {'Idris.Core.Value.NRef', V929, V930}), begin (V932 = {'Idris.Core.Value.NRef', V927, V928}), begin (V933 = {'Idris.Core.Unify.MkUnifyInfo', V925, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V930, V929, V931, V9, V8, V928, V927, V932, V6, V5, V4, V925, V933, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V928, V930)))) end end end end(E69, E70)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E67, E68)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E71, E72} -> (fun (V934, V935) -> case V10 of {'Idris.Core.Value.NRef', E73, E74} -> (fun (V936, V937) -> begin (V938 = {'Idris.Core.Value.NRef', V936, V937}), begin (V939 = {'Idris.Core.Value.NRef', V934, V935}), begin (V940 = {'Idris.Core.Unify.MkUnifyInfo', V925, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V937, V936, V938, V9, V8, V935, V934, V939, V6, V5, V4, V925, V940, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V935, V937)))) end end end end(E73, E74)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E71, E72)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E65, E66)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E63, E64)); {'Idris.Core.Value.NMeta', E84, E85, E86} -> (fun (V941, V942, V943) -> case V10 of {'Idris.Core.Value.NMeta', E87, E88, E89} -> (fun (V944, V945, V946) -> fun (V947) -> begin (V948 = ('un--isDefInvertible'(V0, V4, V942, V947))), case V948 of {'Idris.Prelude.Types.Left', E90} -> (fun (V949) -> {'Idris.Prelude.Types.Left', V949} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V950) -> (('case--unifyBothApps-13277'(V2, V943, V942, V941, V946, V945, V944, V11, V9, V8, V6, V5, V4, V3, V1, V0, V950, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V942, V945)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V950, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E92, E93} -> (fun (V951, V952) -> V952 end(E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V947)) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E87, E88, E89)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V941, V942, V943}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E84, E85, E86)); _ -> case V10 of {'Idris.Core.Value.NMeta', E58, E59, E60} -> (fun (V953, V954, V955) -> ('case--unifyBothApps-13528'(V2, V955, V954, V953, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E61, E62} -> (fun (V956, V957) -> V957 end(E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E58, E59, E60)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E48, E49} -> (fun (V958, V959) -> case V959 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E50, E51} -> (fun (V960, V961) -> case V10 of {'Idris.Core.Value.NRef', E52, E53} -> (fun (V962, V963) -> begin (V964 = {'Idris.Core.Value.NRef', V962, V963}), begin (V965 = {'Idris.Core.Value.NRef', V960, V961}), begin (V966 = {'Idris.Core.Unify.MkUnifyInfo', V958, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V963, V962, V964, V9, V8, V961, V960, V965, V6, V5, V4, V958, V966, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V961, V963)))) end end end end(E52, E53)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E50, E51)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E54, E55} -> (fun (V967, V968) -> case V10 of {'Idris.Core.Value.NRef', E56, E57} -> (fun (V969, V970) -> begin (V971 = {'Idris.Core.Value.NRef', V969, V970}), begin (V972 = {'Idris.Core.Value.NRef', V967, V968}), begin (V973 = {'Idris.Core.Unify.MkUnifyInfo', V958, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V970, V969, V971, V9, V8, V968, V967, V972, V6, V5, V4, V958, V973, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V968, V970)))) end end end end(E56, E57)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E54, E55)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E48, E49)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end(E46, E47)); _ -> case V7 of {'Idris.Core.Value.NLocal', E15, E16} -> (fun (V974, V975) -> case V10 of {'Idris.Core.Value.NLocal', E32, E33} -> (fun (V976, V977) -> fun (V978) -> begin (V979 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Both local apps, unifyIfEq"/utf8>> end))(V978))), case V979 of {'Idris.Prelude.Types.Left', E34} -> (fun (V980) -> {'Idris.Prelude.Types.Left', V980} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V981) -> ('un--unifyIfEq'(V0, V1, V2, 0, V4, V3, V5, {'Idris.Core.Value.NApp', V6, {'Idris.Core.Value.NLocal', V974, V975}, V8}, {'Idris.Core.Value.NApp', V9, {'Idris.Core.Value.NLocal', V976, V977}, V11}, V978)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33)); _ -> case V10 of {'Idris.Core.Value.NMeta', E27, E28, E29} -> (fun (V982, V983, V984) -> ('case--unifyBothApps-13528'(V2, V984, V983, V982, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E30, E31} -> (fun (V985, V986) -> V986 end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E27, E28, E29)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E17, E18} -> (fun (V987, V988) -> case V988 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E19, E20} -> (fun (V989, V990) -> case V10 of {'Idris.Core.Value.NRef', E21, E22} -> (fun (V991, V992) -> begin (V993 = {'Idris.Core.Value.NRef', V991, V992}), begin (V994 = {'Idris.Core.Value.NRef', V989, V990}), begin (V995 = {'Idris.Core.Unify.MkUnifyInfo', V987, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V992, V991, V993, V9, V8, V990, V989, V994, V6, V5, V4, V987, V995, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V990, V992)))) end end end end(E21, E22)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E19, E20)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E23, E24} -> (fun (V996, V997) -> case V10 of {'Idris.Core.Value.NRef', E25, E26} -> (fun (V998, V999) -> begin (V1000 = {'Idris.Core.Value.NRef', V998, V999}), begin (V1001 = {'Idris.Core.Value.NRef', V996, V997}), begin (V1002 = {'Idris.Core.Unify.MkUnifyInfo', V987, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V999, V998, V1000, V9, V8, V997, V996, V1001, V6, V5, V4, V987, V1002, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V997, V999)))) end end end end(E25, E26)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E23, E24)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E17, E18)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end(E15, E16)); {'Idris.Core.Value.NMeta', E36, E37, E38} -> (fun (V1003, V1004, V1005) -> case V10 of {'Idris.Core.Value.NMeta', E39, E40, E41} -> (fun (V1006, V1007, V1008) -> fun (V1009) -> begin (V1010 = ('un--isDefInvertible'(V0, V4, V1004, V1009))), case V1010 of {'Idris.Prelude.Types.Left', E42} -> (fun (V1011) -> {'Idris.Prelude.Types.Left', V1011} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V1012) -> (('case--unifyBothApps-13277'(V2, V1005, V1004, V1003, V1008, V1007, V1006, V11, V9, V8, V6, V5, V4, V3, V1, V0, V1012, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V1004, V1007)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(V1012, fun () -> ('dn--un--==_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E44, E45} -> (fun (V1013, V1014) -> V1014 end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InSearch'})) end)) end))))(V1009)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39, E40, E41)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, {'Idris.Core.Value.NMeta', V1003, V1004, V1005}, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E36, E37, E38)); _ -> case V10 of {'Idris.Core.Value.NMeta', E10, E11, E12} -> (fun (V1015, V1016, V1017) -> ('case--unifyBothApps-13528'(V2, V1017, V1016, V1015, V11, V9, V8, V7, V6, V5, V4, V3, V1, V0, ('dn--un--/=_Eq_UnifyMode'(case V3 of {'Idris.Core.Unify.MkUnifyInfo', E13, E14} -> (fun (V1018, V1019) -> V1019 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Unify.InMatch'})))) end(E10, E11, E12)); _ -> case V3 of {'Idris.Core.Unify.MkUnifyInfo', E0, E1} -> (fun (V1020, V1021) -> case V1021 of {'Idris.Core.Unify.InSearch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E2, E3} -> (fun (V1022, V1023) -> case V10 of {'Idris.Core.Value.NRef', E4, E5} -> (fun (V1024, V1025) -> begin (V1026 = {'Idris.Core.Value.NRef', V1024, V1025}), begin (V1027 = {'Idris.Core.Value.NRef', V1022, V1023}), begin (V1028 = {'Idris.Core.Unify.MkUnifyInfo', V1020, {'Idris.Core.Unify.InSearch'}}), ('case--unifyBothApps-13608'(V2, V11, V1025, V1024, V1026, V9, V8, V1023, V1022, V1027, V6, V5, V4, V1020, V1028, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1023, V1025)))) end end end end(E4, E5)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E2, E3)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); {'Idris.Core.Unify.InMatch'} -> (fun () -> case V7 of {'Idris.Core.Value.NRef', E6, E7} -> (fun (V1029, V1030) -> case V10 of {'Idris.Core.Value.NRef', E8, E9} -> (fun (V1031, V1032) -> begin (V1033 = {'Idris.Core.Value.NRef', V1031, V1032}), begin (V1034 = {'Idris.Core.Value.NRef', V1029, V1030}), begin (V1035 = {'Idris.Core.Unify.MkUnifyInfo', V1020, {'Idris.Core.Unify.InMatch'}}), ('case--unifyBothApps-13725'(V2, V11, V1032, V1031, V1033, V9, V8, V1030, V1029, V1034, V6, V5, V4, V1020, V1035, V1, V0, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1030, V1032)))) end end end end(E8, E9)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E6, E7)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end()); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end(E0, E1)); _ -> ('un--unifyApp'(V0, V1, V2, 1, V3, V4, V5, V6, V7, V8, {'Idris.Core.Value.NApp', V9, V10, V11})) end end end end end.
'un--unifyArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> case V9 of [] -> fun (V10) -> {'Idris.Prelude.Types.Right', ('un--success'())} end; _ -> fun (V11) -> ('un--ufail'('erased', V6, <<""/utf8>>, V11)) end end; [E0 | E1] -> (fun (V12, V13) -> case V9 of [E2 | E3] -> (fun (V14, V15) -> fun (V16) -> begin (V17 = (('un--unifyArgs'('erased', V1, V2, V3, V4, V5, V6, V7, V13, V15))(V16))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = ((((((('un--unify'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1)), V2, V3, V4))(('un--lower'(V5))))(V6))(V7))(V12))(V14))(V16))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('un--union'(V22, V19))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> fun (V23) -> ('un--ufail'('erased', V6, <<""/utf8>>, V23)) end end end(E0, E1)); _ -> fun (V24) -> ('un--ufail'('erased', V6, <<""/utf8>>, V24)) end end.
'un--unifyApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V8 of {'Idris.Core.Value.NMeta', E248, E249, E250} -> (fun (V11, V12, V13) -> fun (V14) -> ('un--unifyHole'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V12, V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V15)) end, V9)), V10, V14)) end end(E248, E249, E250)); _ -> case V10 of {'Idris.Core.Value.NApp', E121, E122, E123} -> (fun (V16, V17, V18) -> case V17 of {'Idris.Core.Value.NMeta', E245, E246, E247} -> (fun (V19, V20, V21) -> fun (V22) -> ('un--unifyHole'(V0, V1, V2, V3, V4, V5, V6, V16, V19, V20, V21, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V23) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V23)) end, V18)), {'Idris.Core.Value.NApp', V7, V8, V9}, V22)) end end(E245, E246, E247)); _ -> case V8 of {'Idris.Core.Value.NRef', E132, E133} -> (fun (V24, V25) -> fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Name against app, unifyIfEq"/utf8>> end))(V26))), case V27 of {'Idris.Prelude.Types.Left', E134} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V29) -> (('case--unifyApp-12414'(V2, V25, V24, V10, V9, V7, V6, V5, V4, V3, V1, V0, ('Idris.Idris2.Prelude.Basics':'un--not'(V3))))(V26)) end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E132, E133)); {'Idris.Core.Value.NLocal', E136, E137} -> (fun (V30, V31) -> case V9 of [] -> case V10 of {'Idris.Core.Value.NApp', E188, E189, E190} -> (fun (V32, V33, V34) -> case V33 of {'Idris.Core.Value.NLocal', E216, E217} -> (fun (V35, V36) -> case V34 of [] -> fun (V37) -> begin (V39 = begin (V38 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E243} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E243)); {'Idris.Prelude.Types.Right', E244} -> (fun (V41) -> (('case--unifyApp-12505'(V2, 'erased', 'erased', V31, 'erased', V30, V36, 'erased', V35, V32, V7, V6, V5, V4, V3, V1, V0, V41, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V31, V36))))(V37)) end(E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V10 of {'Idris.Core.Value.NBind', E226, E227, E228, E229} -> (fun (V42, V43, V44, V45) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E226, E227, E228, E229)); {'Idris.Core.Value.NDCon', E230, E231, E232, E233, E234} -> (fun (V46, V47, V48, V49, V50) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E230, E231, E232, E233, E234)); {'Idris.Core.Value.NTCon', E235, E236, E237, E238, E239} -> (fun (V51, V52, V53, V54, V55) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E235, E236, E237, E238, E239)); {'Idris.Core.Value.NPrimVal', E240, E241} -> (fun (V56, V57) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E240, E241)); {'Idris.Core.Value.NType', E242} -> (fun (V58) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E242)); _ -> case V3 of 1 -> fun (V59) -> begin (V61 = begin (V60 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E218} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V63, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V59))), case V64 of {'Idris.Prelude.Types.Left', E220} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V66) -> case V66 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V67) -> begin (V69 = begin (V68 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V68} end), case V69 of {'Idris.Prelude.Types.Left', E222} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E222)); {'Idris.Prelude.Types.Right', E223} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V71, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V67))), case V72 of {'Idris.Prelude.Types.Left', E224} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E224)); {'Idris.Prelude.Types.Right', E225} -> (fun (V74) -> case V74 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E216, E217)); _ -> case V10 of {'Idris.Core.Value.NBind', E199, E200, E201, E202} -> (fun (V75, V76, V77, V78) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E199, E200, E201, E202)); {'Idris.Core.Value.NDCon', E203, E204, E205, E206, E207} -> (fun (V79, V80, V81, V82, V83) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E203, E204, E205, E206, E207)); {'Idris.Core.Value.NTCon', E208, E209, E210, E211, E212} -> (fun (V84, V85, V86, V87, V88) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E208, E209, E210, E211, E212)); {'Idris.Core.Value.NPrimVal', E213, E214} -> (fun (V89, V90) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E213, E214)); {'Idris.Core.Value.NType', E215} -> (fun (V91) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E215)); _ -> case V3 of 1 -> fun (V92) -> begin (V94 = begin (V93 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E191} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V96) -> begin (V97 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V96, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V92))), case V97 of {'Idris.Prelude.Types.Left', E193} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V99) -> case V99 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V100) -> begin (V102 = begin (V101 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E195} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V104) -> begin (V105 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V104, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V100))), case V105 of {'Idris.Prelude.Types.Left', E197} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V107) -> case V107 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E188, E189, E190)); _ -> case V10 of {'Idris.Core.Value.NBind', E171, E172, E173, E174} -> (fun (V108, V109, V110, V111) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E171, E172, E173, E174)); {'Idris.Core.Value.NDCon', E175, E176, E177, E178, E179} -> (fun (V112, V113, V114, V115, V116) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E175, E176, E177, E178, E179)); {'Idris.Core.Value.NTCon', E180, E181, E182, E183, E184} -> (fun (V117, V118, V119, V120, V121) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E180, E181, E182, E183, E184)); {'Idris.Core.Value.NPrimVal', E185, E186} -> (fun (V122, V123) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E185, E186)); {'Idris.Core.Value.NType', E187} -> (fun (V124) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E187)); _ -> case V3 of 1 -> fun (V125) -> begin (V127 = begin (V126 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V126} end), case V127 of {'Idris.Prelude.Types.Left', E163} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V129) -> begin (V130 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V129, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V125))), case V130 of {'Idris.Prelude.Types.Left', E165} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V132) -> case V132 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V133) -> begin (V135 = begin (V134 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V134} end), case V135 of {'Idris.Prelude.Types.Left', E167} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V137) -> begin (V138 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V137, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V133))), case V138 of {'Idris.Prelude.Types.Left', E169} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V140) -> case V140 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V10 of {'Idris.Core.Value.NBind', E146, E147, E148, E149} -> (fun (V141, V142, V143, V144) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E146, E147, E148, E149)); {'Idris.Core.Value.NDCon', E150, E151, E152, E153, E154} -> (fun (V145, V146, V147, V148, V149) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E150, E151, E152, E153, E154)); {'Idris.Core.Value.NTCon', E155, E156, E157, E158, E159} -> (fun (V150, V151, V152, V153, V154) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E155, E156, E157, E158, E159)); {'Idris.Core.Value.NPrimVal', E160, E161} -> (fun (V155, V156) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E160, E161)); {'Idris.Core.Value.NType', E162} -> (fun (V157) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V30, V31}, V9}, V10)) end(E162)); _ -> case V3 of 1 -> fun (V158) -> begin (V160 = begin (V159 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V159} end), case V160 of {'Idris.Prelude.Types.Left', E138} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V162) -> begin (V163 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V162, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V158))), case V163 of {'Idris.Prelude.Types.Left', E140} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V165) -> case V165 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V166) -> begin (V168 = begin (V167 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V167} end), case V168 of {'Idris.Prelude.Types.Left', E142} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V170) -> begin (V171 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V170, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V166))), case V171 of {'Idris.Prelude.Types.Left', E144} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V173) -> case V173 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E136, E137)); _ -> case V3 of 1 -> fun (V174) -> begin (V176 = begin (V175 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V175} end), case V176 of {'Idris.Prelude.Types.Left', E124} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V178) -> begin (V179 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V178, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V174))), case V179 of {'Idris.Prelude.Types.Left', E126} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V181) -> case V181 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V182) -> begin (V184 = begin (V183 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V183} end), case V184 of {'Idris.Prelude.Types.Left', E128} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V186) -> begin (V187 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V186, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V182))), case V187 of {'Idris.Prelude.Types.Left', E130} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V189) -> case V189 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E121, E122, E123)); _ -> case V8 of {'Idris.Core.Value.NRef', E8, E9} -> (fun (V190, V191) -> fun (V192) -> begin (V193 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.application"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Name against app, unifyIfEq"/utf8>> end))(V192))), case V193 of {'Idris.Prelude.Types.Left', E10} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V195) -> (('case--unifyApp-12414'(V2, V191, V190, V10, V9, V7, V6, V5, V4, V3, V1, V0, ('Idris.Idris2.Prelude.Basics':'un--not'(V3))))(V192)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); {'Idris.Core.Value.NLocal', E12, E13} -> (fun (V196, V197) -> case V9 of [] -> case V10 of {'Idris.Core.Value.NApp', E64, E65, E66} -> (fun (V198, V199, V200) -> case V199 of {'Idris.Core.Value.NLocal', E92, E93} -> (fun (V201, V202) -> case V200 of [] -> fun (V203) -> begin (V205 = begin (V204 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V204} end), case V205 of {'Idris.Prelude.Types.Left', E119} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V207) -> (('case--unifyApp-12505'(V2, 'erased', 'erased', V197, 'erased', V196, V202, 'erased', V201, V198, V7, V6, V5, V4, V3, V1, V0, V207, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V197, V202))))(V203)) end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V10 of {'Idris.Core.Value.NBind', E102, E103, E104, E105} -> (fun (V208, V209, V210, V211) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E102, E103, E104, E105)); {'Idris.Core.Value.NDCon', E106, E107, E108, E109, E110} -> (fun (V212, V213, V214, V215, V216) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E106, E107, E108, E109, E110)); {'Idris.Core.Value.NTCon', E111, E112, E113, E114, E115} -> (fun (V217, V218, V219, V220, V221) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E111, E112, E113, E114, E115)); {'Idris.Core.Value.NPrimVal', E116, E117} -> (fun (V222, V223) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E116, E117)); {'Idris.Core.Value.NType', E118} -> (fun (V224) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E118)); _ -> case V3 of 1 -> fun (V225) -> begin (V227 = begin (V226 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V226} end), case V227 of {'Idris.Prelude.Types.Left', E94} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V229) -> begin (V230 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V229, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V225))), case V230 of {'Idris.Prelude.Types.Left', E96} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V232) -> case V232 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V233) -> begin (V235 = begin (V234 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V234} end), case V235 of {'Idris.Prelude.Types.Left', E98} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V237) -> begin (V238 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V237, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V233))), case V238 of {'Idris.Prelude.Types.Left', E100} -> (fun (V239) -> {'Idris.Prelude.Types.Left', V239} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V240) -> case V240 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92, E93)); _ -> case V10 of {'Idris.Core.Value.NBind', E75, E76, E77, E78} -> (fun (V241, V242, V243, V244) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E75, E76, E77, E78)); {'Idris.Core.Value.NDCon', E79, E80, E81, E82, E83} -> (fun (V245, V246, V247, V248, V249) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E79, E80, E81, E82, E83)); {'Idris.Core.Value.NTCon', E84, E85, E86, E87, E88} -> (fun (V250, V251, V252, V253, V254) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E84, E85, E86, E87, E88)); {'Idris.Core.Value.NPrimVal', E89, E90} -> (fun (V255, V256) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E89, E90)); {'Idris.Core.Value.NType', E91} -> (fun (V257) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E91)); _ -> case V3 of 1 -> fun (V258) -> begin (V260 = begin (V259 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V259} end), case V260 of {'Idris.Prelude.Types.Left', E67} -> (fun (V261) -> {'Idris.Prelude.Types.Left', V261} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V262) -> begin (V263 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V262, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V258))), case V263 of {'Idris.Prelude.Types.Left', E69} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V265) -> case V265 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V258)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V266) -> begin (V268 = begin (V267 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V267} end), case V268 of {'Idris.Prelude.Types.Left', E71} -> (fun (V269) -> {'Idris.Prelude.Types.Left', V269} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V270) -> begin (V271 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V270, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V266))), case V271 of {'Idris.Prelude.Types.Left', E73} -> (fun (V272) -> {'Idris.Prelude.Types.Left', V272} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V273) -> case V273 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V266)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E64, E65, E66)); _ -> case V10 of {'Idris.Core.Value.NBind', E47, E48, E49, E50} -> (fun (V274, V275, V276, V277) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E47, E48, E49, E50)); {'Idris.Core.Value.NDCon', E51, E52, E53, E54, E55} -> (fun (V278, V279, V280, V281, V282) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E51, E52, E53, E54, E55)); {'Idris.Core.Value.NTCon', E56, E57, E58, E59, E60} -> (fun (V283, V284, V285, V286, V287) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E56, E57, E58, E59, E60)); {'Idris.Core.Value.NPrimVal', E61, E62} -> (fun (V288, V289) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E61, E62)); {'Idris.Core.Value.NType', E63} -> (fun (V290) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E63)); _ -> case V3 of 1 -> fun (V291) -> begin (V293 = begin (V292 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V292} end), case V293 of {'Idris.Prelude.Types.Left', E39} -> (fun (V294) -> {'Idris.Prelude.Types.Left', V294} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V295) -> begin (V296 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V295, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V291))), case V296 of {'Idris.Prelude.Types.Left', E41} -> (fun (V297) -> {'Idris.Prelude.Types.Left', V297} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V298) -> case V298 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V291)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V299) -> begin (V301 = begin (V300 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V300} end), case V301 of {'Idris.Prelude.Types.Left', E43} -> (fun (V302) -> {'Idris.Prelude.Types.Left', V302} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V303) -> begin (V304 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V303, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V299))), case V304 of {'Idris.Prelude.Types.Left', E45} -> (fun (V305) -> {'Idris.Prelude.Types.Left', V305} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V306) -> case V306 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V10 of {'Idris.Core.Value.NBind', E22, E23, E24, E25} -> (fun (V307, V308, V309, V310) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E22, E23, E24, E25)); {'Idris.Core.Value.NDCon', E26, E27, E28, E29, E30} -> (fun (V311, V312, V313, V314, V315) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E26, E27, E28, E29, E30)); {'Idris.Core.Value.NTCon', E31, E32, E33, E34, E35} -> (fun (V316, V317, V318, V319, V320) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E31, E32, E33, E34, E35)); {'Idris.Core.Value.NPrimVal', E36, E37} -> (fun (V321, V322) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E36, E37)); {'Idris.Core.Value.NType', E38} -> (fun (V323) -> ('un--convertErrorS'('erased', V2, V0, V3, V5, V6, {'Idris.Core.Value.NApp', V7, {'Idris.Core.Value.NLocal', V196, V197}, V9}, V10)) end(E38)); _ -> case V3 of 1 -> fun (V324) -> begin (V326 = begin (V325 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V325} end), case V326 of {'Idris.Prelude.Types.Left', E14} -> (fun (V327) -> {'Idris.Prelude.Types.Left', V327} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V328) -> begin (V329 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V328, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V324))), case V329 of {'Idris.Prelude.Types.Left', E16} -> (fun (V330) -> {'Idris.Prelude.Types.Left', V330} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V331) -> case V331 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V324)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V332) -> begin (V334 = begin (V333 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V333} end), case V334 of {'Idris.Prelude.Types.Left', E18} -> (fun (V335) -> {'Idris.Prelude.Types.Left', V335} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V336) -> begin (V337 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V336, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V332))), case V337 of {'Idris.Prelude.Types.Left', E20} -> (fun (V338) -> {'Idris.Prelude.Types.Left', V338} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V339) -> case V339 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13)); _ -> case V3 of 1 -> fun (V340) -> begin (V342 = begin (V341 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V341} end), case V342 of {'Idris.Prelude.Types.Left', E0} -> (fun (V343) -> {'Idris.Prelude.Types.Left', V343} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V344) -> begin (V345 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V344, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10, V340))), case V345 of {'Idris.Prelude.Types.Left', E2} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V347) -> case V347 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 1, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V340)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> fun (V348) -> begin (V350 = begin (V349 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V349} end), case V350 of {'Idris.Prelude.Types.Left', E4} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V352) -> begin (V353 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V352, V6, V10, {'Idris.Core.Value.NApp', V7, V8, V9}, V348))), case V353 of {'Idris.Prelude.Types.Left', E6} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V355) -> case V355 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 0, 0, V5, V4, <<"Postponing constraint"/utf8>>, V6, {'Idris.Core.Value.NApp', V7, V8, V9}, V10))(V348)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--unify'(V0, V1, V2, V3, V4) -> case V1 of {'Idris.Core.Unify.dn--un--__mkUnify', E0, E1} -> (fun (V5, V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ((((((((V5(V2))(V3))(V4))(V7))(V8))(V9))(V10))(V11)) end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--ufail'(V0, V1, V2, V3) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, V2}, V3)).
'un--tooBig'(V0, V1, V2, V3, V4) -> case V2 of 0 -> 0; _ -> case V4 of {'Idris.Core.TT.App', E8, E9, E10} -> (fun (V5, V6, V7) -> ('un--tooBig'('erased', V1, V2, [V7 | V3], V6)) end(E8, E9, E10)); _ -> case V2 of 0 -> 1; _ -> begin (V8 = (V2 - 1)), case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('un--tooBig'('erased', V1, (1 + V8), [], V12)), fun () -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V24)) end end}, fun (V25) -> ('un--tooBig'('erased', V1, V8, [], V25)) end))(V3)) end)) end(E0, E1, E2, E3)); {'Idris.Core.TT.Meta', E4, E5, E6, E7} -> (fun (V26, V27, V28, V29) -> ('Idris.Idris2.Prelude.Basics':'un--||'((('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V41)) end end}, fun (V42) -> ('un--tooBig'('erased', V1, V8, [], V42)) end))(V29)), fun () -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V54)) end end}, fun (V55) -> ('un--tooBig'('erased', V1, V8, [], V55)) end))(V3)) end)) end(E4, E5, E6, E7)); _ -> ('case--tooBig-9344'('erased', V8, V4, V3, V1, ('Idris.Idris2.Prelude.Basics':'un--||'(V1, fun () -> ('nested--13976-9274--in--un--isFn'('erased', V8, V4, V3, V1, 'erased', V4)) end)))) end end end end end.
'un--toSubVars'(V0, V1) -> case V0 of [] -> {'Idris.Builtin.DPair.MkDPair', [], {'Idris.Core.TT.SubRefl'}}; [E0 | E1] -> (fun (V2, V3) -> ('case--toSubVars-6145'(V2, V3, V1, ('un--toSubVars'(V3, ('Idris.Idris2.Core.TT':'un--dropFirst'('erased', 'erased', V1)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--success'() -> {'Idris.Core.Unify.MkUnifyResult', [], 1, [], {'Idris.Core.Unify.NoLazy'}}.
'un--solvedHole'(V0) -> {'Idris.Core.Unify.MkUnifyResult', [], 0, [V0 | []], {'Idris.Core.Unify.NoLazy'}}.
'un--solveIfUndefined'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Meta', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Idris.Core.Name.Resolved', V8}, case V14 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V15 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V42 of {'Idris.Prelude.Types.Left', E33} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V44) -> case V44 of {'Idris.Prelude.Types.Just', E35} -> (fun (V45) -> case V45 of {'Idris.Core.Context.Hole', E36, E37} -> (fun (V46, V47) -> begin (V48 = ('un--patternEnvTm'(V1, V2, V0, V3, V9, V10))), case V48 of {'Idris.Prelude.Types.Left', E38} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V50) -> begin (V51 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', V46, V47}}), case V50 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); {'Idris.Prelude.Types.Just', E40} -> (fun (V52) -> case V52 of {'Idris.Builtin.DPair.MkDPair', E41, E42} -> (fun (V53, V54) -> case V54 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V55, V56) -> begin (V57 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.DPair.MkDPair', V53, {'Idris.Builtin.MkPair', V55, V56}}}), (('case--case block in case block in solveIfUndefined-8947'(V0, V9, V8, V7, V6, V5, V3, V2, V1, V14, V46, V47, V51, V53, V55, V56, V57, ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V5, V56))))(V10)) end end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E35)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> fun (V58) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--solveHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V20, V16))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> (('case--solveHole-10960'(V2, V3, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V0, V20, V23, ('nested--14193-10926--in--un--solutionHeadSame'(V2, V3, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V0, V15))))(V16)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--solveConstraintsAfter'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V22 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V10) -> ('un--retryGuess'(V0, V1, V3, V4, V10)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V11) -> ('nested--24977-19197--in--un--afterStart'(V4, V3, V2, V1, V0, 'erased', V11)) end, ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'('erased', case V9 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), []))(V5))), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> case ('Idris.Idris2.Libraries.Data.Bool.Extra':'un--anyTrue'(V24)) of 0 -> ('un--solveConstraintsAfter'(V0, V1, V2, V3, {'Idris.Core.Unify.Normal'}, V5)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--solveConstraints'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V20 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> ('un--retryGuess'(V0, V1, V2, V3, V9)) end, ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'('erased', case V8 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V11 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), []))(V4))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> case ('Idris.Idris2.Libraries.Data.Bool.Extra':'un--anyTrue'(V22)) of 0 -> ('un--solveConstraints'(V0, V1, V2, {'Idris.Core.Unify.Normal'}, V4)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setInvertible'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V2, case V38 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> {'Idris.Core.Context.MkGlobalDef', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, 0, V58, V59, V60, V61, V62, V63} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V42)) end, V3)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--retryGuess'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V5}, case V13 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V14 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); {'Idris.Prelude.Types.Just', E35} -> (fun (V44) -> begin (V45 = {'Idris.Prelude.Types.Just', V44}), (('case--case block in retryGuess-17913'(V5, V7, V8, V3, V2, V1, V0, V13, V44, V45, case V44 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V63 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9)) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--retry'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('case--retry-17340'(V0, V3, V2, V1, V8, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'('erased', V3, case V8 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--postponeS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V4 of 0 -> fun (V11) -> ('un--postpone'(V0, V1, V2, V3, V5, ('un--lower'(V6)), V7, V8, V10, V9, V11)) end; 1 -> fun (V12) -> ('un--postpone'(V0, V1, V2, V3, V5, V6, V7, V8, V9, V10, V12)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--postponePatVar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V13 = {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V7, V8, V9}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V12) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V12} end, V10))}), fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V0, V2, V18, V6, V13, V11, V14))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> case V21 of 0 -> {'Idris.Prelude.Types.Right', ('un--success'())}; 1 -> (('un--postponeS'(V2, V0, V1, 1, V3, V5, V4, <<"Not in pattern fragment"/utf8>>, V6, V13, V11))(V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--postpone'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V10))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V39 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V1, <<"unify.postpone"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V14, V7, V8, V18))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V14, V7, V9, V18))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> begin (V29 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V27, V28)) end end}, V21, V18))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V34, V35)) end end}, V24, V18))), case V36 of {'Idris.Prelude.Types.Left', E10} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V38) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V31)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" =?= "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V38))))))))))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V10))), case V39 of {'Idris.Prelude.Types.Left', E12} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V41) -> begin (V42 = (('nested--9664-5362--in--un--checkDefined'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V14, V8))(V10))), case V42 of {'Idris.Prelude.Types.Left', E14} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V44) -> begin (V45 = (('nested--9664-5362--in--un--checkDefined'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V14, V9))(V10))), case V45 of {'Idris.Prelude.Types.Left', E16} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V17, V7, V8, V10))), case V48 of {'Idris.Prelude.Types.Left', E18} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V50) -> begin (V51 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V17, V7, V9, V10))), case V51 of {'Idris.Prelude.Types.Left', E20} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V53) -> begin (V55 = case V3 of 0 -> begin (V54 = ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V50))), (('un--chaseMetas'(V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--addMetas'('erased', V54, V53)))), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased'))))(V10)) end; 1 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Left', E22} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V57) -> begin (V60 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V58) -> fun (V59) -> ('nested--9664-5363--in--un--undefinedN'(V0, V9, V8, V7, V6, V5, V4, V3, V2, V1, V58, V59)) end end, V57))(V10))), case V60 of {'Idris.Prelude.Types.Left', E24} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V62) -> begin (V65 = ('Idris.Idris2.Core.UnifyState':'un--addConstraint'(V2, V1, {'Idris.Core.UnifyState.MkConstraint', V0, V4, case V5 of {'Idris.Core.Unify.MkUnifyInfo', E26, E27} -> (fun (V63, V64) -> V63 end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V62, V7, V50, V53}, V10))), case V65 of {'Idris.Prelude.Types.Left', E28} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V67) -> begin (V71 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.postpone"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V67)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" NEW CONSTRAINT "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" blocked on "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V68) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V69, V70)) end end}, V57)))))))))) end))(V10))), case V71 of {'Idris.Prelude.Types.Left', E30} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V73) -> begin (V74 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"unify.postpone"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"X"/utf8>> end, V50, V10))), case V74 of {'Idris.Prelude.Types.Left', E32} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"unify.postpone"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Y"/utf8>> end, V53, V10))), case V77 of {'Idris.Prelude.Types.Left', E34} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V79) -> {'Idris.Prelude.Types.Right', ('un--constrain'(V67))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--patternEnvTm'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V9, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> (('case--patternEnvTm-6593'(V2, V4, V3, V1, V0, V9, V12, ('un--getVarsTm'('erased', [], V4))))(V5)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--patternEnv'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V9, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V14 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Core.Normalise':'un--evalArg'(V0, V2, V12, V13)) end, V4, []))(V5))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> (('case--patternEnv-6318'(V2, V4, V3, V1, V0, V9, V12, V16, ('un--getVars'(V2, [], V16))))(V5)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--occursCheck'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (('un--getMetaNames'('erased', V1, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('case--occursCheck-6897'(V0, V6, V5, V4, V3, V2, V1, V10, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V5, V10))))(V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lower'(V0) -> case V0 of {'Idris.Core.Unify.MkUnifyInfo', E0, E1} -> (fun (V1, V2) -> {'Idris.Core.Unify.MkUnifyInfo', 1, V2} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isHoleApp'(V0, V1) -> case V1 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V2, V3, V4) -> case V3 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V5, V6, V7) -> 0 end(E3, E4, E5)); _ -> 1 end end(E0, E1, E2)); _ -> 1 end.
'un--isDefInvertible'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> {'Idris.Prelude.Types.Right', case V38 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V53 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V1, {'Idris.Core.Name.Resolved', V2}}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--instantiate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V18 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V3, V0, <<"unify.instantiate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Instantiating in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V16, V17)) end end}, V3)))) end, V13, V14))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V42 = (('case--instantiate-8672'(V2, V3, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V0, case V10 of {'Idris.Core.Context.MkGlobalDef', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V22 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V42 of {'Idris.Prelude.Types.Left', E23} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V44) -> begin (V66 = case V10 of {'Idris.Core.Context.MkGlobalDef', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V47 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V67 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"unify.instantiate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)))) end, V66, V14))), case V67 of {'Idris.Prelude.Types.Left', E46} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V69) -> begin (V73 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.instantiate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"With locs: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'('erased', V70)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'('erased', V71, V72)) end end}, V11)))) end))(V14))), case V73 of {'Idris.Prelude.Types.Left', E48} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V75) -> begin (V79 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unify.instantiate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"From vars: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V77, V78)) end end}, V3)))) end))(V14))), case V79 of {'Idris.Prelude.Types.Left', E50} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V81) -> begin (V83 = begin (V82 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V82} end), case V83 of {'Idris.Prelude.Types.Left', E52} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V85) -> begin (V86 = (('nested--11727-7242--in--un--mkDef'(V2, V3, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V0, [], V3, V11, {'Idris.Core.Unify.INil'}, V13, V66))(V14))), case V86 of {'Idris.Prelude.Types.Left', E54} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V88) -> begin (V89 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V0, <<"unify.instantiate"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Definition"/utf8>> end, V88, V14))), case V89 of {'Idris.Prelude.Types.Left', E56} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V91) -> begin (V92 = {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.SolvedHole', V9}, ('nested--11727-7239--in--un--isSimple'(V2, V3, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V0, 'erased', V88))}), begin (V114 = case V10 of {'Idris.Core.Context.MkGlobalDef', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113) -> {'Idris.Core.Context.MkGlobalDef', V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, {'Idris.Core.Context.PMDef', V92, [], {'Idris.Core.CaseTree.STerm', 0, V88}, {'Idris.Core.CaseTree.STerm', 0, V88}, []}, V111, V112, V113} end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V119 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V115) -> case V115 of {'Idris.Prelude.Types.Left', E79} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V117) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V118) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, {'Idris.Core.Name.Resolved', V8}, V114, V118)) end, V14))), case V119 of {'Idris.Prelude.Types.Left', E81} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V121) -> ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V1, V8, V14)) end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--inTerm'() -> {'Idris.Core.Unify.MkUnifyInfo', 0, {'Idris.Core.Unify.InTerm'}}.
'un--inSearch'() -> {'Idris.Core.Unify.MkUnifyInfo', 0, {'Idris.Core.Unify.InSearch'}}.
'un--inMatch'() -> {'Idris.Core.Unify.MkUnifyInfo', 0, {'Idris.Core.Unify.InMatch'}}.
'un--inLHS'() -> {'Idris.Core.Unify.MkUnifyInfo', 0, {'Idris.Core.Unify.InLHS'}}.
'un--headsConvert'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V8) -> case V7 of {'Idris.Prelude.Types.Just', E5} -> (fun (V9) -> ('case--headsConvert-9762'(V0, V8, V9, V5, V4, V3, V2, V1, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', V8)), ('Idris.Idris2.Data.List':'un--reverse'('erased', V9))})) end(E5)); _ -> fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.head"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing to convert"/utf8>> end))(V10))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Right', 0} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2)); _ -> fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unify.head"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Nothing to convert"/utf8>> end))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--giveUpConstraints'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V7) -> ('nested--25025-19240--in--un--constraintToHole'(V1, V0, V7)) end, ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'('erased', case V6 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVarsTm'(V0, V1, V2) -> case V2 of [] -> {'Idris.Prelude.Types.Just', []}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Core.TT.Local', E2, E3, E4} -> (fun (V5, V6, V7) -> ('case--getVarsTm-6422'('erased', 'erased', V7, 'erased', V6, V5, V4, V1, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V10, V11)) end end}, V7, V1)))) end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getVars'(V0, V1, V2) -> case V2 of [] -> {'Idris.Prelude.Types.Just', []}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Core.Value.NApp', E2, E3, E4} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Core.Value.NLocal', E5, E6} -> (fun (V8, V9) -> case V7 of [] -> ('case--getVars-6016'(V0, 'erased', V9, 'erased', V8, V5, V4, V1, ('nested--10341-6002--in--un--inArgs'(V0, 'erased', V9, 'erased', V8, V5, V4, V1, V9, V1)))); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3, E4)); {'Idris.Core.Value.NAs', E7, E8, E9, E10} -> (fun (V10, V11, V12, V13) -> ('un--getVars'(V0, V1, [V13 | V4])) end(E7, E8, E9, E10)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getMetaNames'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V2))), ('un--chaseMetas'(V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V3)), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')))) end.
'un--getIVars'(V0, V1, V2) -> case V2 of {'Idris.Core.Unify.INil'} -> (fun () -> [] end()); {'Idris.Core.Unify.ICons', E0, E1} -> (fun (V3, V4) -> [V3 | ('un--getIVars'('erased', 'erased', V4))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getEtaType'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> fun (V9) -> begin (V10 = (('un--getEtaType'([V6 | V0], V1, V2, {'Idris.Core.Env.::', V7, V3}, V8))(V9))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Just', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--shrinkTerm'('erased', 'erased', V13, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.TT.App', E7, E8, E9} -> (fun (V14, V15, V16) -> fun (V17) -> begin (V18 = (('Idris.Idris2.Core.GetType':'un--getType'(V0, V1, V3, V15))(V17))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"unify.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V3, V20, V17))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V20))(V17))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> case V26 of {'Idris.Core.Value.NBind', E16, E17, E18, E19} -> (fun (V27, V28, V29, V30) -> case V29 of {'Idris.Core.TT.Pi', E20, E21, E22, E23} -> (fun (V31, V32, V33, V34) -> begin (V36 = begin (V35 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E24} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V38, V17))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V41, V3, V34, V17))), case V42 of {'Idris.Prelude.Types.Left', E28} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V44}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21, E22, E23)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E16, E17, E18, E19)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--getArgTypes'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> case V3 of [E8 | E9] -> (fun (V12, V13) -> fun (V14) -> begin (V18 = begin (V15 = (((V7(V1))(V12))(V14))), case V15 of {'Idris.Prelude.Types.Left', E10} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V17) -> (('un--getArgTypes'('erased', V1, V17, V13))(V14)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V18 of {'Idris.Prelude.Types.Left', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V20) -> case V20 of {'Idris.Prelude.Types.Just', E14} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', [V11 | V21]}} end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> case V3 of [] -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end; _ -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end end(E4, E5, E6, E7)); _ -> case V3 of [] -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end; _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end end(E0, E1, E2, E3)); _ -> case V3 of [] -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end; _ -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end.
'un--forceMeta'(V0, V1, V2, V3) -> case V2 of 0 -> {'Idris.Core.TT.TForce', ('Idris.Idris2.Core.TT':'un--getLoc'('erased', V3)), V1, V3}; _ -> begin (V4 = (V2 - 1)), case V3 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> {'Idris.Core.TT.Bind', V5, V6, V7, ('un--forceMeta'('erased', V1, V4, V8))} end(E0, E1, E2, E3)); _ -> {'Idris.Core.TT.TForce', ('Idris.Idris2.Core.TT':'un--getLoc'('erased', V3)), V1, V3} end end end.
'un--dumpArg'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.MkClosure', E6, E7, E8, E9, E10} -> (fun (V4, V5, V6, V7, V8) -> fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E11} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V13, V9))), case V14 of {'Idris.Prelude.Types.Left', E13} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, V0)), V1, <<""/utf8>>, 0, fun () -> <<"Term: "/utf8>> end, V8, V9))), case V17 of {'Idris.Prelude.Types.Left', E15} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V0, V16, {'Idris.Core.Value.MkClosure', V4, V5, V6, V7, V8}))(V9))), case V20 of {'Idris.Prelude.Types.Left', E17} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V22) -> ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<""/utf8>>, 0, fun () -> <<"  "/utf8>> end, V2, V22, V9)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8, E9, E10)); _ -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V27, V23))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V0, V30, V3))(V23))), case V31 of {'Idris.Prelude.Types.Left', E4} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V33) -> ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<""/utf8>>, 0, fun () -> <<"  "/utf8>> end, V2, V33, V23)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--delayMeta'(V0, V1, V2, V3, V4) -> case V2 of 0 -> {'Idris.Core.TT.TDelay', ('Idris.Idris2.Core.TT':'un--getLoc'('erased', V4)), V1, V3, V4}; _ -> begin (V5 = (V2 - 1)), case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Bind', V6, V7, V8, ('un--delayMeta'([V7 | V0], V1, V5, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V3)), V9))} end(E0, E1, E2, E3)); _ -> {'Idris.Core.TT.TDelay', ('Idris.Idris2.Core.TT':'un--getLoc'('erased', V4)), V1, V3, V4} end end end.
'un--convertErrorS'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V3 of 0 -> fun (V8) -> ('un--convertError'('erased', V1, V2, V4, V5, V7, V6, V8)) end; 1 -> fun (V9) -> ('un--convertError'('erased', V1, V2, V4, V5, V6, V7, V9)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--convertError'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V11, V7))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V2, V1, V14, V4, V5, V7))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V2, V1, V14, V4, V6, V7))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.CantConvert', V1, V3, V4, V17, V20}, V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--constrain'(V0) -> {'Idris.Core.Unify.MkUnifyResult', [V0 | []], 1, [], {'Idris.Core.Unify.NoLazy'}}.
'un--checkDots'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.UnifyState':'un--getCurrentHoles'(V0, V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V10) -> ('nested--25459-19629--in--un--checkConstraint'(V1, V0, V10)) end, ('Idris.Idris2.Data.List':'un--reverse'('erased', case V6 of {'Idris.Core.UnifyState.MkUState', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V2))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.UnifyState':'un--getCurrentHoles'(V0, V2))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> begin (V41 = ('erlang':'put'(V0, case V30 of {'Idris.Core.UnifyState.MkUState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.UnifyState.MkUState', V31, V32, V33, V34, V35, [], V37, V38, V39, V40} end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkArgsSame'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'({'Idris.Core.Name.Resolved', V4}, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V38 of {'Idris.Prelude.Types.Left', E31} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E33} -> (fun (V41) -> case V41 of {'Idris.Core.Context.PMDef', E34, E35, E36, E37, E38} -> (fun (V42, V43, V44, V45, V46) -> case V43 of [] -> case V44 of {'Idris.Core.CaseTree.STerm', E39, E40} -> (fun (V47, V48) -> case V47 of 0 -> begin (V49 = (('nested--25153-19371--in--un--anySame'(V4, V5, V1, V0, V48, V5))(V6))), case V49 of {'Idris.Prelude.Types.Left', E41} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V51) -> case V51 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> (('un--checkArgsSame'(V0, V1, V5))(V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> (('un--checkArgsSame'(V0, V1, V5))(V6)) end end(E39, E40)); _ -> (('un--checkArgsSame'(V0, V1, V5))(V6)) end; _ -> (('un--checkArgsSame'(V0, V1, V5))(V6)) end end(E34, E35, E36, E37, E38)); _ -> (('un--checkArgsSame'(V0, V1, V5))(V6)) end end(E33)); _ -> (('un--checkArgsSame'(V0, V1, V5))(V6)) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chaseMetas'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V2))} end; [E0 | E1] -> (fun (V4, V5) -> ('case--chaseMetas-5242'(V4, V5, V2, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V4, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
