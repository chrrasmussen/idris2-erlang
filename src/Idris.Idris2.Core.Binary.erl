-module('Idris.Idris2.Core.Binary').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--10191-6672--in--un--trimName'/6,
  'nested--8661-5268--in--un--resolved_aux'/7,
  'nested--9109-5843--in--un--resolvedRW'/23,
  'nested--9109-5844--in--un--resolvedPrim'/23,
  'nested--9109-5842--in--un--resolvedPair'/23,
  'nested--9774-6269--in--un--replaceNS'/8,
  'nested--8660-5240--in--un--full_aux'/7,
  'nested--9108-5658--in--un--fullRW'/23,
  'nested--9108-5659--in--un--fullPrim'/23,
  'nested--9108-5657--in--un--fullPair'/23,
  'nested--10561-6998--in--un--completeDef'/7,
  'nested--11713-8070--in--un--alreadyDone'/12,
  'nested--11229-7635--in--un--addT'/7,
  'dn--un--resolved_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'/3,
  'dn--un--resolved_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'/3,
  'dn--un--resolved_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'/3,
  'dn--un--resolved_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'/3,
  'dn--un--resolved_HasNames_(TTCFile $e)'/4,
  'dn--un--resolved_HasNames_(List $a)'/4,
  'dn--un--full_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'/3,
  'dn--un--full_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'/3,
  'dn--un--full_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'/3,
  'dn--un--full_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'/3,
  'dn--un--full_HasNames_(TTCFile $e)'/4,
  'dn--un--full_HasNames_(List $a)'/4,
  'un--writeToTTC'/6,
  'un--writeTTCFile'/5,
  'un--updateTransforms'/3,
  'un--updateRewrite'/3,
  'un--updatePrims'/3,
  'un--updatePrimNames'/2,
  'un--updatePair'/3,
  'un--updateNameDirectives'/3,
  'un--updateCGDirectives'/3,
  'un--ttcVersion'/0,
  'un--stringToBuffer'/1,
  'un--readTTCFile'/7,
  'un--readImportHashes'/2,
  'un--readIFaceHash'/2,
  'un--readFromTTC'/10,
  'un--readEscriptFile'/2,
  'un--getSaveDefs'/5,
  'un--getNSas'/1,
  'un--getImportHashes'/3,
  'un--getHash'/3,
  'un--escriptReadFromFile'/2,
  'un--checkTTCVersion'/4,
  'un--addTypeHint'/4,
  'un--addGlobalDef'/6,
  'un--addAutoHint'/3
]).
'nested--10191-6672--in--un--trimName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V6, V7) -> begin (V8 = {'Idris.Core.Name.NS', V6, V7}), case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V6, V4)) of 1 -> V7; 0 -> V8; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> V5 end.
'nested--8661-5268--in--un--resolved_aux'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'(V4))}; [E0 | E1] -> (fun (V7, V8) -> begin (V11 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V9, V10) -> (((V10(V3))(V7))(V6)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> ('nested--8661-5268--in--un--resolved_aux'(V0, V1, V2, V3, [V13 | V4], V8, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9109-5843--in--un--resolvedRW'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V23) -> case V23 of {'Idris.Core.Options.MkRewriteNs', E1, E2} -> (fun (V24, V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V20, V24, V22))), case V26 of {'Idris.Prelude.Types.Left', E3} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V20, V25, V22))), case V29 of {'Idris.Prelude.Types.Left', E5} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkRewriteNs', V28, V31}}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9109-5844--in--un--resolvedPrim'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2, E3} -> (fun (V23, V24, V25, V26) -> begin (V33 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V27, V28, V29)) end end end, fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V30, V31, V32)) end end end}, V20, V23, V22))), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> begin (V42 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V36, V37, V38)) end end end, fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V39, V40, V41)) end end end}, V20, V24, V22))), case V42 of {'Idris.Prelude.Types.Left', E6} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V44) -> begin (V51 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V45, V46, V47)) end end end, fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V48, V49, V50)) end end end}, V20, V25, V22))), case V51 of {'Idris.Prelude.Types.Left', E8} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V53) -> begin (V60 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V57, V58, V59)) end end end}, V20, V26, V22))), case V60 of {'Idris.Prelude.Types.Left', E10} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Options.MkPrimNs', V35, V44, V53, V62}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9109-5842--in--un--resolvedPair'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V23) -> case V23 of {'Idris.Core.Options.MkPairNs', E1, E2, E3} -> (fun (V24, V25, V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V20, V24, V22))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V20, V25, V22))), case V30 of {'Idris.Prelude.Types.Left', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V20, V26, V22))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkPairNs', V29, V32, V35}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9774-6269--in--un--replaceNS'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V8 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V10, V11) -> V7 end(E2, E3)); _ -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.NS', V6, V8}, V9} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8660-5240--in--un--full_aux'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'(V4))}; [E0 | E1] -> (fun (V7, V8) -> begin (V11 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V9, V10) -> (((V9(V3))(V7))(V6)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> ('nested--8660-5240--in--un--full_aux'(V0, V1, V2, V3, [V13 | V4], V8, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9108-5658--in--un--fullRW'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V23) -> case V23 of {'Idris.Core.Options.MkRewriteNs', E1, E2} -> (fun (V24, V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V20, V24, V22))), case V26 of {'Idris.Prelude.Types.Left', E3} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V20, V25, V22))), case V29 of {'Idris.Prelude.Types.Left', E5} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkRewriteNs', V28, V31}}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9108-5659--in--un--fullPrim'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2, E3} -> (fun (V23, V24, V25, V26) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V27) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V28) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V29) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V30) -> {'Idris.Prelude.Types.Right', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> {'Idris.Core.Options.MkPrimNs', V31, V32, V33, V34} end end end end} end, fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V36, V37, V38)) end end end, fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V39, V40, V41)) end end end}, V20, V23, V35)) end, V29)) end, fun (V42) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V43, V44, V45)) end end end, fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V46, V47, V48)) end end end}, V20, V24, V42)) end, V28)) end, fun (V49) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V50, V51, V52)) end end end, fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V53, V54, V55)) end end end}, V20, V25, V49)) end, V27)) end, fun (V56) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V57, V58, V59)) end end end, fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V60, V61, V62)) end end end}, V20, V26, V56)) end, V22)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9108-5657--in--un--fullPair'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V21 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V23) -> case V23 of {'Idris.Core.Options.MkPairNs', E1, E2, E3} -> (fun (V24, V25, V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V20, V24, V22))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V20, V25, V22))), case V30 of {'Idris.Prelude.Types.Left', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V20, V26, V22))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Core.Options.MkPairNs', V29, V32, V35}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10561-6998--in--un--completeDef'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V25 of {'Idris.Core.Context.None'} -> (fun () -> 0 end()); {'Idris.Core.Context.Hole', E22, E23} -> (fun (V29, V30) -> 0 end(E22, E23)); _ -> 1 end end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11713-8070--in--un--alreadyDone'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> 0; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V9, V16)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V10, V19)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V9, V16)) of 1 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V9)), V10)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> ('nested--11713-8070--in--un--alreadyDone'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11229-7635--in--un--addT'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V4, case V10 of {'Idris.Core.Context.MkDefs', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V24 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V67 = ('erlang':'put'(V3, case V10 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.MkDefs', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V4, [V5 | []], V52)), V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V67} end end()); {'Idris.Prelude.Types.Just', E30} -> (fun (V68) -> begin (V97 = ('erlang':'put'(V3, case V10 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96) -> {'Idris.Core.Context.MkDefs', V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V4, [V5 | V68], V82)), V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V97} end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Transform'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V4}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V5, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V12, V6}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V4}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(TTCFile $e)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Binary.MkTTCFile', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V22) -> fun (V23) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V1, V22, V23)) end end, V9, [], V3))), case V24 of {'Idris.Prelude.Types.Left', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V26) -> begin (V29 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V27) -> fun (V28) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V1, V27, V28)) end end, V10, [], V3))), case V29 of {'Idris.Prelude.Types.Left', E20} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V31) -> begin (V32 = ('nested--9109-5842--in--un--resolvedPair'(V0, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V15, V3))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> begin (V35 = ('nested--9109-5843--in--un--resolvedRW'(V0, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V16, V3))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> begin (V38 = ('nested--9109-5844--in--un--resolvedPrim'(V0, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V17, V3))), case V38 of {'Idris.Prelude.Types.Left', E26} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V40) -> begin (V47 = ('dn--un--resolved_HasNames_(List $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V41) -> fun (V42) -> fun (V43) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V41, V42, V43)) end end end, fun (V44) -> fun (V45) -> fun (V46) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V44, V45, V46)) end end end}, V1, V18, V3))), case V47 of {'Idris.Prelude.Types.Left', E28} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V49) -> begin (V56 = ('dn--un--resolved_HasNames_(List $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V50) -> fun (V51) -> fun (V52) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V50, V51, V52)) end end end, fun (V53) -> fun (V54) -> fun (V55) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V53, V54, V55)) end end end}, V1, V20, V3))), case V56 of {'Idris.Prelude.Types.Left', E30} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V58) -> begin (V61 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E32, E33} -> (fun (V59, V60) -> (((V60(V1))(V21))(V3)) end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V61 of {'Idris.Prelude.Types.Left', E34} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V4, V5, V6, V7, V8, V26, V31, V11, V12, V13, V14, V34, V37, V40, V49, V19, V58, V63}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(List $a)'(V0, V1, V2, V3) -> ('nested--8661-5268--in--un--resolved_aux'(V0, V2, V1, V1, [], V2, V3)).
'dn--un--full_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Transform'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V4}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V5, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V12, V6}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V4}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(TTCFile $e)'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Binary.MkTTCFile', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> begin (V24 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V22) -> fun (V23) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)'(V1, V22, V23)) end end, V9, [], V3))), case V24 of {'Idris.Prelude.Types.Left', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V26) -> begin (V29 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V27) -> fun (V28) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|)),((Builtin.MkPair Name) (|((Builtin.Pair Name) Bool),((Builtin.MkPair Name) Bool)|))|)'(V1, V27, V28)) end end, V10, [], V3))), case V29 of {'Idris.Prelude.Types.Left', E20} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V31) -> begin (V32 = ('nested--9108-5657--in--un--fullPair'(V0, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V15, V3))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> begin (V35 = ('nested--9108-5658--in--un--fullRW'(V0, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V16, V3))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> begin (V38 = ('nested--9108-5659--in--un--fullPrim'(V0, V21, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V1, V1, V17, V3))), case V38 of {'Idris.Prelude.Types.Left', E26} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V40) -> begin (V47 = ('dn--un--full_HasNames_(List $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V41) -> fun (V42) -> fun (V43) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V41, V42, V43)) end end end, fun (V44) -> fun (V45) -> fun (V46) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) (List String)),((Builtin.MkPair Name) (List String))|)'(V44, V45, V46)) end end end}, V1, V18, V3))), case V47 of {'Idris.Prelude.Types.Left', E28} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V49) -> begin (V56 = ('dn--un--full_HasNames_(List $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V50) -> fun (V51) -> fun (V52) -> ('dn--un--full_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V50, V51, V52)) end end end, fun (V53) -> fun (V54) -> fun (V55) -> ('dn--un--resolved_HasNames_(|((Builtin.Pair Name) Transform),((Builtin.MkPair Name) Transform)|)'(V53, V54, V55)) end end end}, V1, V20, V3))), case V56 of {'Idris.Prelude.Types.Left', E30} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V58) -> begin (V61 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E32, E33} -> (fun (V59, V60) -> (((V59(V1))(V21))(V3)) end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V61 of {'Idris.Prelude.Types.Left', E34} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V4, V5, V6, V7, V8, V26, V31, V11, V12, V13, V14, V34, V37, V40, V49, V19, V58, V63}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(List $a)'(V0, V1, V2, V3) -> ('nested--8660-5240--in--un--full_aux'(V0, V2, V1, V1, [], V2, V3)).
'un--writeToTTC'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Libraries.Utils.Binary':'un--initBinary'(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V73 = ('un--getSaveDefs'(case V12 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V19 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V12 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V50 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), [], V12, V5))), case V73 of {'Idris.Prelude.Types.Left', E62} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V75) -> begin (V104 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"ttc.write"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Writing "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with hash "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(case V12 of {'Idris.Core.Context.MkDefs', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V93 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end, V5))), case V104 of {'Idris.Prelude.Types.Left', E92} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V106) -> begin (V538 = ('un--writeTTCFile'(V0, V1, V8, {'Idris.Core.Binary.MkTTCFile', ('un--ttcVersion'()), case V12 of {'Idris.Core.Context.MkDefs', E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134) -> V124 end(E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162) -> V153 end(E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V75, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V12 of {'Idris.Core.Context.MkDefs', E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177} -> (fun (V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190) -> V187 end(E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V12 of {'Idris.Core.Context.MkDefs', E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205} -> (fun (V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218) -> V203 end(E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233} -> (fun (V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246) -> V230 end(E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261} -> (fun (V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274) -> V266 end(E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V16 of {'Idris.Core.UnifyState.MkUState', E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273} -> (fun (V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286) -> V283 end(E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301} -> (fun (V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314) -> V289 end(E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329} -> (fun (V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342) -> V318 end(E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357} -> (fun (V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370) -> case V347 of {'Idris.Core.Options.MkOptions', E358, E359, E360, E361, E362, E363, E364, E365, E366} -> (fun (V371, V372, V373, V374, V375, V376, V377, V378, V379) -> V375 end(E358, E359, E360, E361, E362, E363, E364, E365, E366)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394} -> (fun (V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407) -> case V384 of {'Idris.Core.Options.MkOptions', E395, E396, E397, E398, E399, E400, E401, E402, E403} -> (fun (V408, V409, V410, V411, V412, V413, V414, V415, V416) -> V413 end(E395, E396, E397, E398, E399, E400, E401, E402, E403)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431} -> (fun (V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444) -> case V421 of {'Idris.Core.Options.MkOptions', E432, E433, E434, E435, E436, E437, E438, E439, E440} -> (fun (V445, V446, V447, V448, V449, V450, V451, V452, V453) -> V451 end(E432, E433, E434, E435, E436, E437, E438, E439, E440)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V12 of {'Idris.Core.Context.MkDefs', E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468} -> (fun (V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481) -> V470 end(E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V12 of {'Idris.Core.Context.MkDefs', E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496} -> (fun (V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509) -> V503 end(E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V12 of {'Idris.Core.Context.MkDefs', E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524} -> (fun (V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537) -> V524 end(E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3}, V5))), case V538 of {'Idris.Prelude.Types.Left', E525} -> (fun (V539) -> {'Idris.Prelude.Types.Left', V539} end(E525)); {'Idris.Prelude.Types.Right', E526} -> (fun (V540) -> begin (V546 = begin (V542 = begin (V541 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V541} end), case V542 of {'Idris.Prelude.Types.Left', E527} -> (fun (V543) -> {'Idris.Prelude.Types.Left', V543} end(E527)); {'Idris.Prelude.Types.Right', E528} -> (fun (V544) -> begin (V545 = (('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V4, V544))(V5))), {'Idris.Prelude.Types.Right', V545} end end(E528)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V546 of {'Idris.Prelude.Types.Left', E529} -> (fun (V547) -> {'Idris.Prelude.Types.Left', V547} end(E529)); {'Idris.Prelude.Types.Right', E530} -> (fun (V548) -> case V548 of {'Idris.Prelude.Types.Right', E531} -> (fun (V549) -> {'Idris.Prelude.Types.Right', 0} end(E531)); {'Idris.Prelude.Types.Left', E532} -> (fun (V550) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V550))))))}, V5)) end(E532)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E530)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E526)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--writeTTCFile'(V0, V1, V2, V3, V4) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--full_HasNames_(TTCFile $e)'(('Idris.Idris2.Builtin':'un--fst'(V0)), V5, V6, V7)) end end end, fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_(TTCFile $e)'(('Idris.Idris2.Builtin':'un--fst'(V0)), V8, V9, V10)) end end end}, V3, V4))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V2, <<"TT2"/utf8>>))(V4))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V35 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_WastefulInt'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V17 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V35 of {'Idris.Prelude.Types.Left', E22} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V37) -> begin (V56 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Int'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V39 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V56 of {'Idris.Prelude.Types.Left', E42} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V58) -> begin (V102 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V62, V63, V64)) end end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V65, V66)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Int'(V67, V68, V69)) end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V70, V71)) end end}}, V59, V60, V61)) end end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V74, V75, V76)) end end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V77, V78)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Int'(V79, V80, V81)) end end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V82, V83)) end end}}, V72, V73)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> V86 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V102 of {'Idris.Prelude.Types.Left', E62} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V104) -> begin (V188 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V108, V109, V110)) end end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V111, V112)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V116, V117, V118)) end end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V119, V120)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V121, V122, V123)) end end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V124, V125)) end end}}, V113, V114, V115)) end end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V128, V129, V130)) end end end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V131, V132)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V133) -> fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V133, V134, V135)) end end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V136, V137)) end end}}, V126, V127)) end end}}, V105, V106, V107)) end end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V140, V141, V142)) end end end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V143, V144)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V148, V149, V150)) end end end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V151, V152)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V153, V154, V155)) end end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V156, V157)) end end}}, V145, V146, V147)) end end end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V160, V161, V162)) end end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V163, V164)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V165, V166, V167)) end end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V168, V169)) end end}}, V158, V159)) end end}}, V138, V139)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187) -> V177 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V188 of {'Idris.Prelude.Types.Left', E82} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V190) -> begin (V211 = case ('Idris.Idris2.Builtin':'un--snd'(V0)) of {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', E84, E85} -> (fun (V191, V192) -> (((V191(V2))(case V13 of {'Idris.Core.Binary.MkTTCFile', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210) -> V210 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V211 of {'Idris.Prelude.Types.Left', E104} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V213) -> begin (V255 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V214) -> fun (V215) -> fun (V216) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V217) -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V217, V218, V219)) end end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V220, V221)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V222) -> fun (V223) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Binary'(V222, V223)) end end, fun (V224) -> fun (V225) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Binary'(V224, V225)) end end}}, V214, V215, V216)) end end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V228) -> fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V228, V229, V230)) end end end, fun (V231) -> fun (V232) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V231, V232)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V233) -> fun (V234) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Binary'(V233, V234)) end end, fun (V235) -> fun (V236) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Binary'(V235, V236)) end end}}, V226, V227)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123} -> (fun (V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254) -> V240 end(E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V255 of {'Idris.Prelude.Types.Left', E124} -> (fun (V256) -> {'Idris.Prelude.Types.Left', V256} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V257) -> begin (V281 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V258) -> fun (V259) -> fun (V260) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V258, V259, V260)) end end end, fun (V261) -> fun (V262) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V261, V262)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143} -> (fun (V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280) -> V267 end(E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V281 of {'Idris.Prelude.Types.Left', E144} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V283) -> begin (V327 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V284) -> fun (V285) -> fun (V286) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V287, V288, V289)) end end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V290, V291)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V292) -> fun (V293) -> fun (V294) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V292, V293, V294)) end end end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V295, V296)) end end}}, V284, V285, V286)) end end end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V299) -> fun (V300) -> fun (V301) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V299, V300, V301)) end end end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V302, V303)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V304) -> fun (V305) -> fun (V306) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V304, V305, V306)) end end end, fun (V307) -> fun (V308) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V307, V308)) end end}}, V297, V298)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163} -> (fun (V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326) -> V314 end(E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V327 of {'Idris.Prelude.Types.Left', E164} -> (fun (V328) -> {'Idris.Prelude.Types.Left', V328} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V329) -> begin (V413 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V330) -> fun (V331) -> fun (V332) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V333) -> fun (V334) -> fun (V335) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V333, V334, V335)) end end end, fun (V336) -> fun (V337) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V336, V337)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V338) -> fun (V339) -> fun (V340) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V341) -> fun (V342) -> fun (V343) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V341, V342, V343)) end end end, fun (V344) -> fun (V345) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V344, V345)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V346) -> fun (V347) -> fun (V348) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V346, V347, V348)) end end end, fun (V349) -> fun (V350) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V349, V350)) end end}}, V338, V339, V340)) end end end, fun (V351) -> fun (V352) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V353) -> fun (V354) -> fun (V355) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V353, V354, V355)) end end end, fun (V356) -> fun (V357) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V356, V357)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V358) -> fun (V359) -> fun (V360) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V358, V359, V360)) end end end, fun (V361) -> fun (V362) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V361, V362)) end end}}, V351, V352)) end end}}, V330, V331, V332)) end end end, fun (V363) -> fun (V364) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V365) -> fun (V366) -> fun (V367) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V365, V366, V367)) end end end, fun (V368) -> fun (V369) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V368, V369)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V370) -> fun (V371) -> fun (V372) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V373) -> fun (V374) -> fun (V375) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V373, V374, V375)) end end end, fun (V376) -> fun (V377) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V376, V377)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V378) -> fun (V379) -> fun (V380) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V378, V379, V380)) end end end, fun (V381) -> fun (V382) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V381, V382)) end end}}, V370, V371, V372)) end end end, fun (V383) -> fun (V384) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V385) -> fun (V386) -> fun (V387) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V385, V386, V387)) end end end, fun (V388) -> fun (V389) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V388, V389)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V390) -> fun (V391) -> fun (V392) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V390, V391, V392)) end end end, fun (V393) -> fun (V394) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V393, V394)) end end}}, V383, V384)) end end}}, V363, V364)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183} -> (fun (V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412) -> V401 end(E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V413 of {'Idris.Prelude.Types.Left', E184} -> (fun (V414) -> {'Idris.Prelude.Types.Left', V414} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V415) -> begin (V434 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Int'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203} -> (fun (V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433) -> V424 end(E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V434 of {'Idris.Prelude.Types.Left', E204} -> (fun (V435) -> {'Idris.Prelude.Types.Left', V435} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V436) -> begin (V455 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223} -> (fun (V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454) -> V446 end(E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V455 of {'Idris.Prelude.Types.Left', E224} -> (fun (V456) -> {'Idris.Prelude.Types.Left', V456} end(E224)); {'Idris.Prelude.Types.Right', E225} -> (fun (V457) -> begin (V481 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V458) -> fun (V459) -> fun (V460) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V458, V459, V460)) end end end, fun (V461) -> fun (V462) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V461, V462)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243} -> (fun (V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480) -> V473 end(E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V481 of {'Idris.Prelude.Types.Left', E244} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E244)); {'Idris.Prelude.Types.Right', E245} -> (fun (V483) -> begin (V507 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V484) -> fun (V485) -> fun (V486) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_PairNames'(V484, V485, V486)) end end end, fun (V487) -> fun (V488) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_PairNames'(V487, V488)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263} -> (fun (V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505, V506) -> V500 end(E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V507 of {'Idris.Prelude.Types.Left', E264} -> (fun (V508) -> {'Idris.Prelude.Types.Left', V508} end(E264)); {'Idris.Prelude.Types.Right', E265} -> (fun (V509) -> begin (V533 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(Maybe $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V510) -> fun (V511) -> fun (V512) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RewriteNames'(V510, V511, V512)) end end end, fun (V513) -> fun (V514) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RewriteNames'(V513, V514)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283} -> (fun (V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532) -> V527 end(E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V533 of {'Idris.Prelude.Types.Left', E284} -> (fun (V534) -> {'Idris.Prelude.Types.Left', V534} end(E284)); {'Idris.Prelude.Types.Right', E285} -> (fun (V535) -> begin (V554 = ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_PrimNames'(V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303} -> (fun (V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553) -> V549 end(E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V554 of {'Idris.Prelude.Types.Left', E304} -> (fun (V555) -> {'Idris.Prelude.Types.Left', V555} end(E304)); {'Idris.Prelude.Types.Right', E305} -> (fun (V556) -> begin (V616 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V557) -> fun (V558) -> fun (V559) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V560) -> fun (V561) -> fun (V562) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V560, V561, V562)) end end end, fun (V563) -> fun (V564) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V563, V564)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V565) -> fun (V566) -> fun (V567) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V568) -> fun (V569) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V568, V569)) end end, fun (V570) -> fun (V571) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V570, V571)) end end}, V565, V566, V567)) end end end, fun (V572) -> fun (V573) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V574) -> fun (V575) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V574, V575)) end end, fun (V576) -> fun (V577) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V576, V577)) end end}, V572, V573)) end end}}, V557, V558, V559)) end end end, fun (V578) -> fun (V579) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V580) -> fun (V581) -> fun (V582) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V580, V581, V582)) end end end, fun (V583) -> fun (V584) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V583, V584)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V585) -> fun (V586) -> fun (V587) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V588) -> fun (V589) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V588, V589)) end end, fun (V590) -> fun (V591) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V590, V591)) end end}, V585, V586, V587)) end end end, fun (V592) -> fun (V593) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V594) -> fun (V595) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V594, V595)) end end, fun (V596) -> fun (V597) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V596, V597)) end end}, V592, V593)) end end}}, V578, V579)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323} -> (fun (V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615) -> V612 end(E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V616 of {'Idris.Prelude.Types.Left', E324} -> (fun (V617) -> {'Idris.Prelude.Types.Left', V617} end(E324)); {'Idris.Prelude.Types.Right', E325} -> (fun (V618) -> begin (V698 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V619) -> fun (V620) -> fun (V621) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V622) -> fun (V623) -> fun (V624) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V622, V623, V624)) end end end, fun (V625) -> fun (V626) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V625, V626)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V627) -> fun (V628) -> fun (V629) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V630) -> fun (V631) -> fun (V632) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V630, V631, V632)) end end end, fun (V633) -> fun (V634) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V633, V634)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V635) -> fun (V636) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V635, V636)) end end, fun (V637) -> fun (V638) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V637, V638)) end end}}, V627, V628, V629)) end end end, fun (V639) -> fun (V640) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V641) -> fun (V642) -> fun (V643) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V641, V642, V643)) end end end, fun (V644) -> fun (V645) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V644, V645)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V646) -> fun (V647) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V646, V647)) end end, fun (V648) -> fun (V649) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V648, V649)) end end}}, V639, V640)) end end}}, V619, V620, V621)) end end end, fun (V650) -> fun (V651) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V652) -> fun (V653) -> fun (V654) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V652, V653, V654)) end end end, fun (V655) -> fun (V656) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V655, V656)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V657) -> fun (V658) -> fun (V659) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V660) -> fun (V661) -> fun (V662) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V660, V661, V662)) end end end, fun (V663) -> fun (V664) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V663, V664)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V665) -> fun (V666) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V665, V666)) end end, fun (V667) -> fun (V668) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V667, V668)) end end}}, V657, V658, V659)) end end end, fun (V669) -> fun (V670) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V671) -> fun (V672) -> fun (V673) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V671, V672, V673)) end end end, fun (V674) -> fun (V675) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V674, V675)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V676) -> fun (V677) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V676, V677)) end end, fun (V678) -> fun (V679) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V678, V679)) end end}}, V669, V670)) end end}}, V650, V651)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343} -> (fun (V680, V681, V682, V683, V684, V685, V686, V687, V688, V689, V690, V691, V692, V693, V694, V695, V696, V697) -> V695 end(E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V698 of {'Idris.Prelude.Types.Left', E344} -> (fun (V699) -> {'Idris.Prelude.Types.Left', V699} end(E344)); {'Idris.Prelude.Types.Right', E345} -> (fun (V700) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V701) -> fun (V702) -> fun (V703) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V704) -> fun (V705) -> fun (V706) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V704, V705, V706)) end end end, fun (V707) -> fun (V708) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V707, V708)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V709) -> fun (V710) -> fun (V711) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Transform'(V709, V710, V711)) end end end, fun (V712) -> fun (V713) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Transform'(V712, V713)) end end}}, V701, V702, V703)) end end end, fun (V714) -> fun (V715) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V716) -> fun (V717) -> fun (V718) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V716, V717, V718)) end end end, fun (V719) -> fun (V720) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V719, V720)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V721) -> fun (V722) -> fun (V723) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Transform'(V721, V722, V723)) end end end, fun (V724) -> fun (V725) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Transform'(V724, V725)) end end}}, V714, V715)) end end}, V2, case V13 of {'Idris.Core.Binary.MkTTCFile', E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363} -> (fun (V726, V727, V728, V729, V730, V731, V732, V733, V734, V735, V736, V737, V738, V739, V740, V741, V742, V743) -> V742 end(E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E345)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E325)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E265)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateTransforms'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V25 = begin (V13 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V5, V2))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Transform'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Transform'(V19, V20, V21)) end end end}, V6, V2))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> ('nested--11229-7635--in--un--addT'(V5, V6, V4, V0, V15, V24, V2)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> ('un--updateTransforms'(V0, V4, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateRewrite'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, V38, V39, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(V1, V40)), V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updatePrims'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, V38, V39, V40, ('un--updatePrimNames'(V1, V41)), V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updatePrimNames'(V0, V1) -> case V1 of {'Idris.Core.Options.MkPrimNs', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Core.Options.MkPrimNs', ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(case V0 of {'Idris.Core.Options.MkPrimNs', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> V6 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(case V0 of {'Idris.Core.Options.MkPrimNs', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> V11 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(case V0 of {'Idris.Core.Options.MkPrimNs', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> V16 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(case V0 of {'Idris.Core.Options.MkPrimNs', E16, E17, E18, E19} -> (fun (V18, V19, V20, V21) -> V21 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updatePair'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, V38, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(Maybe $a)'(V1, V39)), V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateNameDirectives'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V40 = begin (V39 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V5, V6, V27)), V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E34} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V42) -> ('un--updateNameDirectives'(V0, V4, V2)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateCGDirectives'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V87 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V11, V12)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V17, V18)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V21, V22)) end end}, V13, V14)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V27, V28)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V31, V32)) end end}, V23, V24)) end end}, V7, V8)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V37, V38)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V43, V44)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V47, V48)) end end}, V39, V40)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Options':'dn--un--/=_Eq_CG'(V53, V54)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V57, V58)) end end}, V49, V50)) end end}, V33, V34)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--++'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V80 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V116 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> {'Idris.Core.Context.MkDefs', V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V87, V110, V111, V112, V113, V114, V115} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V116} end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--ttcVersion'() -> 55.
'un--stringToBuffer'(V0) -> begin (V1 = ('Idris.Idris2.Erlang.Data.Buffer':'un--stringByteLength'(V0))), fun (V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.Data.Buffer':'un--newBuffer'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Just', E2} -> (fun (V34) -> begin (V63 = begin (V62 = (('Idris.Idris2.Erlang.Data.Buffer':'un--setString'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> V41 end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), begin (V49 = (V46(V47))), (V48(V49)) end end end end end end end}, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), ((V53(V55))(V54)) end end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V57(V58))), (V59(V58)) end end end end}, fun (V60) -> fun (V61) -> V61 end end}, V34, 0, V0))(V2))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E3} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V65) -> {'Idris.Prelude.Types.Right', V34} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Unable to create buffer"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--readTTCFile'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V9, <<"TT2"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Utils.Binary':'un--corrupt'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V9)))))))), V6)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_WastefulInt'(V5, V6))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = ('un--checkTTCVersion'(V3, V19, ('un--ttcVersion'()), V6))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V5, V6))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V51 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V29, V30, V31)) end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V32, V33)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Int'(V34, V35, V36)) end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V37, V38)) end end}}, V26, V27, V28)) end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V41, V42, V43)) end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V44, V45)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Int'(V46, V47, V48)) end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V49, V50)) end end}}, V39, V40)) end end}, V5, V6))), case V51 of {'Idris.Prelude.Types.Left', E12} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V53) -> begin (V119 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V57, V58, V59)) end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V60, V61)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V65, V66, V67)) end end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V68, V69)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V70, V71, V72)) end end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V73, V74)) end end}}, V62, V63, V64)) end end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V77, V78, V79)) end end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V80, V81)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V82, V83, V84)) end end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V85, V86)) end end}}, V75, V76)) end end}}, V54, V55, V56)) end end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_ModuleIdent'(V89, V90, V91)) end end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_ModuleIdent'(V92, V93)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V97, V98, V99)) end end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V100, V101)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V102, V103, V104)) end end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V105, V106)) end end}}, V94, V95, V96)) end end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V109, V110, V111)) end end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V112, V113)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V114, V115, V116)) end end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V117, V118)) end end}}, V107, V108)) end end}}, V87, V88)) end end}, V5, V6))), case V119 of {'Idris.Prelude.Types.Left', E14} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V121) -> begin (V124 = case V0 of {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', E16, E17} -> (fun (V122, V123) -> ((V123(V5))(V6)) end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V124 of {'Idris.Prelude.Types.Left', E18} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V126) -> case V2 of 1 -> begin (V150 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V130, V131, V132)) end end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V133, V134)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V135) -> fun (V136) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Binary'(V135, V136)) end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Binary'(V137, V138)) end end}}, V127, V128, V129)) end end end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V141, V142, V143)) end end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V144, V145)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V146) -> fun (V147) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Binary'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Binary'(V148, V149)) end end}}, V139, V140)) end end}, V5, V6))), case V150 of {'Idris.Prelude.Types.Left', E20} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V152) -> begin (V158 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V153, V154, V155)) end end end, fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V156, V157)) end end}, V5, V6))), case V158 of {'Idris.Prelude.Types.Left', E22} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V160) -> begin (V186 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V164, V165, V166)) end end end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V167, V168)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V169, V170, V171)) end end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V172, V173)) end end}}, V161, V162, V163)) end end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V176, V177, V178)) end end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V179, V180)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V181) -> fun (V182) -> fun (V183) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V181, V182, V183)) end end end, fun (V184) -> fun (V185) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V184, V185)) end end}}, V174, V175)) end end}, V5, V6))), case V186 of {'Idris.Prelude.Types.Left', E24} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V188) -> begin (V254 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V189) -> fun (V190) -> fun (V191) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V192, V193, V194)) end end end, fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V195, V196)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V197) -> fun (V198) -> fun (V199) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V200) -> fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V200, V201, V202)) end end end, fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V203, V204)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V205) -> fun (V206) -> fun (V207) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V205, V206, V207)) end end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V208, V209)) end end}}, V197, V198, V199)) end end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V212) -> fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V212, V213, V214)) end end end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V215, V216)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V217) -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V217, V218, V219)) end end end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V220, V221)) end end}}, V210, V211)) end end}}, V189, V190, V191)) end end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V224) -> fun (V225) -> fun (V226) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V224, V225, V226)) end end end, fun (V227) -> fun (V228) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V227, V228)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V232) -> fun (V233) -> fun (V234) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V232, V233, V234)) end end end, fun (V235) -> fun (V236) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V235, V236)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V237) -> fun (V238) -> fun (V239) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V237, V238, V239)) end end end, fun (V240) -> fun (V241) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V240, V241)) end end}}, V229, V230, V231)) end end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V244) -> fun (V245) -> fun (V246) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V244, V245, V246)) end end end, fun (V247) -> fun (V248) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V247, V248)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V249) -> fun (V250) -> fun (V251) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V249, V250, V251)) end end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V252, V253)) end end}}, V242, V243)) end end}}, V222, V223)) end end}, V5, V6))), case V254 of {'Idris.Prelude.Types.Left', E26} -> (fun (V255) -> {'Idris.Prelude.Types.Left', V255} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V256) -> begin (V257 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V5, V6))), case V257 of {'Idris.Prelude.Types.Left', E28} -> (fun (V258) -> {'Idris.Prelude.Types.Left', V258} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V259) -> begin (V260 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V5, V6))), case V260 of {'Idris.Prelude.Types.Left', E30} -> (fun (V261) -> {'Idris.Prelude.Types.Left', V261} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V262) -> begin (V268 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V263) -> fun (V264) -> fun (V265) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V263, V264, V265)) end end end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V266, V267)) end end}, V5, V6))), case V268 of {'Idris.Prelude.Types.Left', E32} -> (fun (V269) -> {'Idris.Prelude.Types.Left', V269} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V270) -> begin (V276 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V271) -> fun (V272) -> fun (V273) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_PairNames'(V271, V272, V273)) end end end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_PairNames'(V274, V275)) end end}, V5, V6))), case V276 of {'Idris.Prelude.Types.Left', E34} -> (fun (V277) -> {'Idris.Prelude.Types.Left', V277} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V278) -> begin (V284 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V279) -> fun (V280) -> fun (V281) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_RewriteNames'(V279, V280, V281)) end end end, fun (V282) -> fun (V283) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RewriteNames'(V282, V283)) end end}, V5, V6))), case V284 of {'Idris.Prelude.Types.Left', E36} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V286) -> begin (V287 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_PrimNames'(V5, V6))), case V287 of {'Idris.Prelude.Types.Left', E38} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V289) -> begin (V331 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V290) -> fun (V291) -> fun (V292) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V293) -> fun (V294) -> fun (V295) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V293, V294, V295)) end end end, fun (V296) -> fun (V297) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V296, V297)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V298) -> fun (V299) -> fun (V300) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V301) -> fun (V302) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V301, V302)) end end, fun (V303) -> fun (V304) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V303, V304)) end end}, V298, V299, V300)) end end end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V307) -> fun (V308) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V307, V308)) end end, fun (V309) -> fun (V310) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V309, V310)) end end}, V305, V306)) end end}}, V290, V291, V292)) end end end, fun (V311) -> fun (V312) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V313) -> fun (V314) -> fun (V315) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V313, V314, V315)) end end end, fun (V316) -> fun (V317) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V316, V317)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V318) -> fun (V319) -> fun (V320) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V321) -> fun (V322) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V321, V322)) end end, fun (V323) -> fun (V324) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V323, V324)) end end}, V318, V319, V320)) end end end, fun (V325) -> fun (V326) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V327) -> fun (V328) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V327, V328)) end end, fun (V329) -> fun (V330) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V329, V330)) end end}, V325, V326)) end end}}, V311, V312)) end end}, V5, V6))), case V331 of {'Idris.Prelude.Types.Left', E40} -> (fun (V332) -> {'Idris.Prelude.Types.Left', V332} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V333) -> begin (V395 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V334) -> fun (V335) -> fun (V336) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V337) -> fun (V338) -> fun (V339) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V337, V338, V339)) end end end, fun (V340) -> fun (V341) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V340, V341)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V342) -> fun (V343) -> fun (V344) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V345) -> fun (V346) -> fun (V347) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V345, V346, V347)) end end end, fun (V348) -> fun (V349) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V348, V349)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V350) -> fun (V351) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V350, V351)) end end, fun (V352) -> fun (V353) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V352, V353)) end end}}, V342, V343, V344)) end end end, fun (V354) -> fun (V355) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V356) -> fun (V357) -> fun (V358) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V356, V357, V358)) end end end, fun (V359) -> fun (V360) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V359, V360)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V361) -> fun (V362) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V361, V362)) end end, fun (V363) -> fun (V364) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V363, V364)) end end}}, V354, V355)) end end}}, V334, V335, V336)) end end end, fun (V365) -> fun (V366) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V367) -> fun (V368) -> fun (V369) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V367, V368, V369)) end end end, fun (V370) -> fun (V371) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V370, V371)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V372) -> fun (V373) -> fun (V374) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V375) -> fun (V376) -> fun (V377) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V375, V376, V377)) end end end, fun (V378) -> fun (V379) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V378, V379)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V380) -> fun (V381) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V380, V381)) end end, fun (V382) -> fun (V383) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V382, V383)) end end}}, V372, V373, V374)) end end end, fun (V384) -> fun (V385) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V386) -> fun (V387) -> fun (V388) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CG'(V386, V387, V388)) end end end, fun (V389) -> fun (V390) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CG'(V389, V390)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V391) -> fun (V392) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_String'(V391, V392)) end end, fun (V393) -> fun (V394) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V393, V394)) end end}}, V384, V385)) end end}}, V365, V366)) end end}, V5, V6))), case V395 of {'Idris.Prelude.Types.Left', E42} -> (fun (V396) -> {'Idris.Prelude.Types.Left', V396} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V397) -> begin (V423 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V398) -> fun (V399) -> fun (V400) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V401) -> fun (V402) -> fun (V403) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V401, V402, V403)) end end end, fun (V404) -> fun (V405) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V404, V405)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V406) -> fun (V407) -> fun (V408) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Transform'(V406, V407, V408)) end end end, fun (V409) -> fun (V410) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Transform'(V409, V410)) end end}}, V398, V399, V400)) end end end, fun (V411) -> fun (V412) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V413) -> fun (V414) -> fun (V415) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V413, V414, V415)) end end end, fun (V416) -> fun (V417) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V416, V417)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V418) -> fun (V419) -> fun (V420) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Transform'(V418, V419, V420)) end end end, fun (V421) -> fun (V422) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Transform'(V421, V422)) end end}}, V411, V412)) end end}, V5, V6))), case V423 of {'Idris.Prelude.Types.Left', E44} -> (fun (V424) -> {'Idris.Prelude.Types.Left', V424} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V425) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V19, V25, V53, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V426) -> ('nested--9774-6269--in--un--replaceNS'(V0, V5, V4, V3, V2, V1, V262, V426)) end, V152)), V160, V188, V256, V121, V259, V262, V270, V278, V286, V289, V333, V397, V425, V126}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.Binary.MkTTCFile', V19, V25, V53, [], [], [], [], [], 0, ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(<<""/utf8>>)), [], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.Options.MkPrimNs', {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}}, [], [], [], V126}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readImportHashes'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V0, V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Libraries.Utils.Binary.Bin'}, V6, V1))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V10) -> begin (V11 = ('un--getImportHashes'(V0, V9, V10))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', V13} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', []} end end, V1)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', []} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readIFaceHash'(V0, V1) -> begin (V2 = ('un--escriptReadFromFile'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Libraries.Utils.Binary.Bin'}, V4, V1))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Directory':'un--filenameFromModuleLocation'(V0))), ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V9) -> begin (V10 = ('un--getHash'(V8, V7, V9))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', V12} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end end, V1)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readFromTTC'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Directory':'un--filenameFromModuleLocation'(V6))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V19, V20)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Bool'(V25, V26)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V29, V30)) end end}, V21, V22)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Bool'(V35, V36)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V39, V40)) end end}, V31, V32)) end end}, V15, V16)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V45, V46)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Bool'(V51, V52)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V55, V56)) end end}, V47, V48)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Bool'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Bool'(V61, V62)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_Namespace'(V65, V66)) end end}, V57, V58)) end end}, V41, V42)) end end}, {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V5, V8}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V67) -> ('Idris.Idris2.Builtin':'un--snd'(V67)) end, case V13 of {'Idris.Core.Context.MkDefs', E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524, E525, E526, E527} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95) -> V88 end(E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524, E525, E526, E527)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 0 -> begin (V125 = begin (V124 = ('erlang':'put'(V1, case V13 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123) -> {'Idris.Core.Context.MkDefs', V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, [{'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V5, V8}}} | V116], V117, V118, V119, V120, V121, V122, V123} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V124} end), case V125 of {'Idris.Prelude.Types.Left', E30} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V127) -> begin (V128 = ('un--escriptReadFromFile'(V6, V9))), case V128 of {'Idris.Prelude.Types.Left', E32} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V130) -> begin (V131 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Libraries.Utils.Binary.Bin'}, V130, V9))), case V131 of {'Idris.Prelude.Types.Left', E34} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V133) -> begin (V134 = case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V8, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V7)))) of 1 -> {'Idris.Prelude.Types.Nothing'}; 0 -> {'Idris.Prelude.Types.Just', V8}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case ('nested--11713-8070--in--un--alreadyDone'(V0, V8, V7, V6, V5, V4, V3, V2, V1, V7, V8, case V13 of {'Idris.Core.Context.MkDefs', E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499} -> (fun (V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162) -> V155 end(E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> begin (V163 = ('un--readTTCFile'(V0, V1, 0, V14, V134, V133, V9))), case V163 of {'Idris.Prelude.Types.Left', E36} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V165) -> begin (V184 = case V165 of {'Idris.Core.Binary.MkTTCFile', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183) -> V183 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V184, {'Idris.Builtin.MkPair', case V165 of {'Idris.Core.Binary.MkTTCFile', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202) -> V186 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V165 of {'Idris.Core.Binary.MkTTCFile', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220) -> V210 end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}} end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V221 = ('un--readTTCFile'(V0, V1, 1, V14, V134, V133, V9))), case V221 of {'Idris.Prelude.Types.Left', E92} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V223) -> begin (V242 = case V223 of {'Idris.Core.Binary.MkTTCFile', E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111} -> (fun (V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241) -> V241 end(E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V281 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V243) -> fun (V244) -> ('un--addGlobalDef'(V1, V7, case V223 of {'Idris.Core.Binary.MkTTCFile', E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262) -> V254 end(E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V134, V243, V244)) end end, case V223 of {'Idris.Core.Binary.MkTTCFile', E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147} -> (fun (V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280) -> V266 end(E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V281 of {'Idris.Prelude.Types.Left', E148} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V283) -> begin (V304 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, V284, V285)) end end, case V223 of {'Idris.Core.Binary.MkTTCFile', E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167} -> (fun (V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303) -> V290 end(E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V304 of {'Idris.Prelude.Types.Left', E168} -> (fun (V305) -> {'Idris.Prelude.Types.Left', V305} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V306) -> begin (V325 = ('Idris.Idris2.Core.Context':'un--setNS'(V1, case V223 of {'Idris.Core.Binary.MkTTCFile', E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187} -> (fun (V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324) -> V316 end(E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V325 of {'Idris.Prelude.Types.Left', E188} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V327) -> begin (V346 = case V3 of 1 -> ('Idris.Idris2.Core.Context':'un--setNestedNS'(V1, case V223 of {'Idris.Core.Binary.MkTTCFile', E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207} -> (fun (V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345) -> V338 end(E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V346 of {'Idris.Prelude.Types.Left', E208} -> (fun (V347) -> {'Idris.Prelude.Types.Left', V347} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V348) -> begin (V551 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V349) -> fun (V350) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V349, V350)) end end, fun (V351) -> fun (V352) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V351, V352)) end end}, V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V353) -> ('Idris.Idris2.Builtin':'un--fst'(('un--getNSas'(V353)))) end, case V13 of {'Idris.Core.Context.MkDefs', E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395} -> (fun (V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381) -> V374 end(E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V402 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V382) -> fun (V383) -> ('un--addTypeHint'(V1, V4, V382, V383)) end end, case V223 of {'Idris.Core.Binary.MkTTCFile', E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227} -> (fun (V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401) -> V390 end(E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V402 of {'Idris.Prelude.Types.Left', E228} -> (fun (V403) -> {'Idris.Prelude.Types.Left', V403} end(E228)); {'Idris.Prelude.Types.Right', E229} -> (fun (V404) -> begin (V425 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V405) -> fun (V406) -> ('un--addAutoHint'(V1, V405, V406)) end end, case V223 of {'Idris.Core.Binary.MkTTCFile', E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247} -> (fun (V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424) -> V412 end(E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V425 of {'Idris.Prelude.Types.Left', E248} -> (fun (V426) -> {'Idris.Prelude.Types.Left', V426} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V427) -> begin (V446 = ('un--updatePair'(V1, case V223 of {'Idris.Core.Binary.MkTTCFile', E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267} -> (fun (V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445) -> V439 end(E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V446 of {'Idris.Prelude.Types.Left', E268} -> (fun (V447) -> {'Idris.Prelude.Types.Left', V447} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V448) -> begin (V467 = ('un--updateRewrite'(V1, case V223 of {'Idris.Core.Binary.MkTTCFile', E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287} -> (fun (V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466) -> V461 end(E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V467 of {'Idris.Prelude.Types.Left', E288} -> (fun (V468) -> {'Idris.Prelude.Types.Left', V468} end(E288)); {'Idris.Prelude.Types.Right', E289} -> (fun (V469) -> begin (V488 = ('un--updatePrims'(V1, case V223 of {'Idris.Core.Binary.MkTTCFile', E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307} -> (fun (V470, V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487) -> V483 end(E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V488 of {'Idris.Prelude.Types.Left', E308} -> (fun (V489) -> {'Idris.Prelude.Types.Left', V489} end(E308)); {'Idris.Prelude.Types.Right', E309} -> (fun (V490) -> begin (V509 = ('un--updateNameDirectives'(V1, ('Idris.Idris2.Data.List':'un--reverse'(case V223 of {'Idris.Core.Binary.MkTTCFile', E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327} -> (fun (V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505, V506, V507, V508) -> V505 end(E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V9))), case V509 of {'Idris.Prelude.Types.Left', E328} -> (fun (V510) -> {'Idris.Prelude.Types.Left', V510} end(E328)); {'Idris.Prelude.Types.Right', E329} -> (fun (V511) -> begin (V530 = ('un--updateCGDirectives'(V1, case V223 of {'Idris.Core.Binary.MkTTCFile', E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347} -> (fun (V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529) -> V527 end(E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V530 of {'Idris.Prelude.Types.Left', E348} -> (fun (V531) -> {'Idris.Prelude.Types.Left', V531} end(E348)); {'Idris.Prelude.Types.Right', E349} -> (fun (V532) -> ('un--updateTransforms'(V1, case V223 of {'Idris.Core.Binary.MkTTCFile', E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367} -> (fun (V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550) -> V549 end(E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9)) end(E349)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E329)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V551 of {'Idris.Prelude.Types.Left', E396} -> (fun (V552) -> {'Idris.Prelude.Types.Left', V552} end(E396)); {'Idris.Prelude.Types.Right', E397} -> (fun (V553) -> begin (V554 = case V5 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context':'un--clearSavedHints'(V1, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V554 of {'Idris.Prelude.Types.Left', E398} -> (fun (V555) -> {'Idris.Prelude.Types.Left', V555} end(E398)); {'Idris.Prelude.Types.Right', E399} -> (fun (V556) -> begin (V557 = ('Idris.Idris2.Core.Context':'un--resetFirstEntry'(V1, V9))), case V557 of {'Idris.Prelude.Types.Left', E400} -> (fun (V558) -> {'Idris.Prelude.Types.Left', V558} end(E400)); {'Idris.Prelude.Types.Right', E401} -> (fun (V559) -> begin (V561 = begin (V560 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V560} end), case V561 of {'Idris.Prelude.Types.Left', E402} -> (fun (V562) -> {'Idris.Prelude.Types.Left', V562} end(E402)); {'Idris.Prelude.Types.Right', E403} -> (fun (V563) -> begin (V595 = begin (V594 = ('erlang':'put'(V2, case V563 of {'Idris.Core.UnifyState.MkUState', E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415} -> (fun (V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575) -> {'Idris.Core.UnifyState.MkUState', V564, V565, V566, V567, V568, V569, V570, V571, case V223 of {'Idris.Core.Binary.MkTTCFile', E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433} -> (fun (V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587, V588, V589, V590, V591, V592, V593) -> V584 end(E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V573, V574, V575} end(E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V594} end), case V595 of {'Idris.Prelude.Types.Left', E434} -> (fun (V596) -> {'Idris.Prelude.Types.Left', V596} end(E434)); {'Idris.Prelude.Types.Right', E435} -> (fun (V597) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V242, {'Idris.Builtin.MkPair', case V223 of {'Idris.Core.Binary.MkTTCFile', E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453} -> (fun (V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615) -> V599 end(E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V223 of {'Idris.Core.Binary.MkTTCFile', E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471} -> (fun (V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633) -> V623 end(E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}}} end(E435)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E403)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E401)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E399)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E397)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readEscriptFile'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Libraries.Utils.Escript':'un--getEscriptPath'(V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of {'Idris.Prelude.Types.Just', E2} -> (fun (V6) -> begin (V8 = begin (V7 = ('Idris.Idris2.Libraries.Utils.Escript':'un--openArchive'(V6, V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E5} -> (fun (V11) -> begin (V13 = begin (V12 = ('Idris.Idris2.Libraries.Utils.Escript':'un--readFile'(V11, V0, V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> case V15 of {'Idris.Prelude.Types.Just', E8} -> (fun (V16) -> begin (V18 = begin (V17 = ('Idris.Idris2.Libraries.Utils.Escript':'un--closeArchive'(V11, V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Right', V16} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<": Unable to read file"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<": Unable to open archive"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<": Unable to find Escript path"/utf8>>))}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSaveDefs'(V0, V1, V2, V3, V4) -> case V1 of [] -> {'Idris.Prelude.Types.Right', V2}; [E0 | E1] -> (fun (V5, V6) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V3 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E32} -> (fun (V38) -> case V38 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> case V56 of {'Idris.Core.Context.Builtin', E111, E112} -> (fun (V60, V61) -> ('un--getSaveDefs'(V0, V6, V2, V3, V4)) end(E111, E112)); _ -> begin (V62 = ('Idris.Idris2.Libraries.Utils.Binary':'un--initBinaryS'(16384, V4))), case V62 of {'Idris.Prelude.Types.Left', E54} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V64) -> begin (V96 = begin (V93 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_GlobalDef'(case V3 of {'Idris.Core.Context.MkDefs', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> V65 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V38, V4))), case V93 of {'Idris.Prelude.Types.Left', E84} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V95) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_GlobalDef'(V64, ('Idris.Idris2.Core.Context':'dn--un--trimNS_StripNamespace_GlobalDef'(V0, V95)), V4)) end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V96 of {'Idris.Prelude.Types.Left', E86} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V98) -> begin (V100 = begin (V99 = ('erlang':'get'(V64))), {'Idris.Prelude.Types.Right', V99} end), case V100 of {'Idris.Prelude.Types.Left', E88} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V102) -> ('un--getSaveDefs'(V0, V6, [{'Idris.Builtin.MkPair', ('nested--10191-6672--in--un--trimName'(V5, V6, V3, V2, V0, case V38 of {'Idris.Core.Context.MkGlobalDef', E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123) -> V104 end(E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V102} | V2], V3, V4)) end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--getSaveDefs'(V0, V6, V2, V3, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNSas'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V3, V6} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getImportHashes'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V5, <<"TT2"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Utils.Binary':'un--corrupt'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V5)))))))), V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_WastefulInt'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = ('un--checkTTCVersion'(V0, V11, ('un--ttcVersion'()), V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V1, V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V21, V22, V23)) end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V24, V25)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Int'(V26, V27, V28)) end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V29, V30)) end end}}, V18, V19, V20)) end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Namespace'(V33, V34, V35)) end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Namespace'(V36, V37)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Int'(V38, V39, V40)) end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V41, V42)) end end}}, V31, V32)) end end}, V1, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getHash'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_String'(V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V5, <<"TT2"/utf8>>)) of 1 -> ('Idris.Idris2.Libraries.Utils.Binary':'un--corrupt'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC header in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V5)))))))), V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_WastefulInt'(V1, V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = ('un--checkTTCVersion'(V0, V11, ('un--ttcVersion'()), V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Int'(V1, V2)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--escriptReadFromFile'(V0, V1) -> case V0 of {'Idris.Core.Directory.LocalFile', E0} -> (fun (V2) -> begin (V4 = begin (V3 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V2, V1))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E3)); {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V8))))))}, V1)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.Directory.EscriptFile', E5} -> (fun (V9) -> begin (V10 = ('un--readEscriptFile'(V9, V1))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = (('un--stringToBuffer'(V12))(V1))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> begin (V44 = begin (V43 = (('Idris.Idris2.Erlang.Data.Buffer':'un--rawSize'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, V15))(V1))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Utils.Binary.MkBin', V15, 0, V46, V46}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkTTCVersion'(V0, V1, V2, V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V1, V2)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TTCError', {'Idris.Core.Core.Format', V0, V1, V2}}, V3)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addTypeHint'(V0, V1, V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> begin (V15 = begin (V8 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V6, V3))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V4, V3))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V0, <<"ttc.read"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13))))))} end, V3)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V0, V1, V4, V6, V7, 1, V3)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addGlobalDef'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V6, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> begin (V77 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V44) -> fun (V45) -> begin (V74 = ('Idris.Idris2.Core.Context':'un--decode'(case V11 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V46 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Builtin':'un--fst'(V44)), 0, ('Idris.Idris2.Builtin':'un--snd'(V44)), V45))), case V74 of {'Idris.Prelude.Types.Left', E62} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V76}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V42))(V5))), case V77 of {'Idris.Prelude.Types.Left', E64} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V79) -> begin (V84 = case ('nested--10561-6998--in--un--completeDef'(V6, V7, V3, V2, V1, V0, V79)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V80) -> case V80 of {'Idris.Prelude.Types.Left', E66} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V82) -> {'Idris.Prelude.Types.Right', 0} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V83) -> ('Idris.Idris2.Core.Context':'un--addContextEntry'(V0, V2, V6, V7, V83)) end, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V84 of {'Idris.Prelude.Types.Left', E68} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V86) -> case V3 of {'Idris.Prelude.Types.Just', E70} -> (fun (V87) -> ('Idris.Idris2.Core.Context':'un--addContextAlias'(V0, ('Idris.Idris2.Core.Name':'un--asName'(V1, V87, V6)), V6, V5)) end(E70)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addAutoHint'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V9, V10, V11)) end end end, fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V12, V13, V14)) end end end}, V3, V2))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V46 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V17, V4, V26)), V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V46} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
