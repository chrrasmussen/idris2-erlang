-module('Idris.Idris2.Idris.SetOptions').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--pkgDir-3385'/2,
  'nested--9863-3337--in--un--toVersion'/2,
  'nested--10684-4107--in--un--prefixes'/1,
  'nested--10532-3946--in--un--notHidden'/2,
  'nested--10012-3489--in--un--checkBounds'/4,
  'un--prefixOnlyIfNonEmpty'/2,
  'un--prefixOnly'/2,
  'un--preOptions'/3,
  'un--postOptions'/7,
  'un--pkgDir'/1,
  'un--packageNames'/1,
  'un--opts'/3,
  'un--logLevels'/0,
  'un--ideModeSocket'/1,
  'un--ideMode'/1,
  'un--getPackageDirs'/2,
  'un--findPackages'/2,
  'un--findIpkg'/2,
  'un--dirOption'/3,
  'un--completionScript'/1,
  'un--codegens'/2,
  'un--candidateDirs'/3,
  'un--addPkgDir'/4
]).
'case--pkgDir-3385'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V2 of [] -> {'Idris.Idris.SetOptions.MkPkgDir', V0, V3, {'Idris.Prelude.Types.Nothing'}}; _ -> case ('nested--9863-3337--in--un--toVersion'(V0, V3)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V4) -> {'Idris.Idris.SetOptions.MkPkgDir', V0, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V16)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V20, V21, V22, V23)) end end end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V28, V29, V30)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V31, V32)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, ('Idris.Idris2.Data.List':'un--intersperse'(<<"-"/utf8>>, V2)))), {'Idris.Prelude.Types.Just', V4}} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.SetOptions.MkPkgDir', V0, V0, {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9863-3337--in--un--toVersion'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V2) -> V2 end, ('Idris.Idris2.Data.List1':'dn--un--traverse_Traversable_List1'({'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V5, V6)) end end end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V8)) end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V11, V12)) end end end end}, fun (V13) -> ('Idris.Idris2.Data.String':'un--parsePositive'({'Idris.Prelude.Num.MkNum', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--*_Num_Nat'(V16, V17)) end end, fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V18)) end}, V13)) end, ('Idris.Idris2.Data.String':'un--split'(fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V19, $.)) end, V1)))))).
'nested--10684-4107--in--un--prefixes'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [V1 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"."/utf8>>)), V3)) end, ('nested--10684-4107--in--un--prefixes'(V2))))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10532-3946--in--un--notHidden'(V0, V1) -> case ('Idris.Idris2.Data.String':'un--isPrefixOf'(<<"."/utf8>>, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10012-3489--in--un--checkBounds'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.SetOptions.MkPkgDir', E0, E1, E2} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V15, V16)) end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V19, V20)) end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V22)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V31, V32)) end end end end}, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V35, V36)) end end end}, case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V5, V1)) of 1 -> ('Idris.Idris2.Idris.Package.Types':'un--inBounds'(V6, V0)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V4)), V6})) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prefixOnlyIfNonEmpty'(V0, V1) -> case V0 of <<"--"/utf8>> -> V1; _ -> ('un--prefixOnly'(V0, V1)) end.
'un--prefixOnly'(V0, V1) -> ('Idris.Idris2.Libraries.Data.List.Extra':'un--sortedNub'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V4, V5)) end end}, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V18, V19)) end end}, ('Idris.Idris2.Data.List':'un--filter'(fun (V20) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V0, V20)) of 1 -> ('Idris.Idris2.Data.String':'un--isPrefixOf'(V0, V20)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1)))).
'un--preOptions'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Idris.CommandLine.NoBanner'} -> (fun () -> fun (V6) -> begin (V29 = begin (V7 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V9 of {'Idris.Core.Options.MkSessionOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Options.MkSessionOpts', V10, 1, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V29 of {'Idris.Prelude.Types.Left', E23} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V31) -> (('un--preOptions'(V0, V1, V5))(V6)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.OutputFile', E25} -> (fun (V32) -> fun (V33) -> begin (V56 = begin (V34 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V33))), case V34 of {'Idris.Prelude.Types.Left', E26} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V36) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V36 of {'Idris.Core.Options.MkSessionOpts', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Options.MkSessionOpts', V37, 1, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V33)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V56 of {'Idris.Prelude.Types.Left', E47} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V58) -> (('un--preOptions'(V0, V1, V5))(V33)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25)); {'Idris.Idris.CommandLine.ExecFn', E49} -> (fun (V59) -> fun (V60) -> begin (V83 = begin (V61 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V60))), case V61 of {'Idris.Prelude.Types.Left', E50} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V63) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V63 of {'Idris.Core.Options.MkSessionOpts', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> {'Idris.Core.Options.MkSessionOpts', V64, 1, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82} end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V60)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V83 of {'Idris.Prelude.Types.Left', E71} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V85) -> (('un--preOptions'(V0, V1, V5))(V60)) end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49)); {'Idris.Idris.CommandLine.IdeMode'} -> (fun () -> fun (V86) -> begin (V109 = begin (V87 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V86))), case V87 of {'Idris.Prelude.Types.Left', E73} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V89) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V89 of {'Idris.Core.Options.MkSessionOpts', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> {'Idris.Core.Options.MkSessionOpts', V90, 1, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108} end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V86)) end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V109 of {'Idris.Prelude.Types.Left', E94} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V111) -> (('un--preOptions'(V0, V1, V5))(V86)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.IdeModeSocket', E96} -> (fun (V112) -> fun (V113) -> begin (V136 = begin (V114 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V113))), case V114 of {'Idris.Prelude.Types.Left', E97} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V116) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V116 of {'Idris.Core.Options.MkSessionOpts', E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117} -> (fun (V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135) -> {'Idris.Core.Options.MkSessionOpts', V117, 1, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135} end(E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V113)) end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V136 of {'Idris.Prelude.Types.Left', E118} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V138) -> (('un--preOptions'(V0, V1, V5))(V113)) end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E96)); {'Idris.Idris.CommandLine.CheckOnly'} -> (fun () -> fun (V139) -> begin (V162 = begin (V140 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V139))), case V140 of {'Idris.Prelude.Types.Left', E120} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V142) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V142 of {'Idris.Core.Options.MkSessionOpts', E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140} -> (fun (V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161) -> {'Idris.Core.Options.MkSessionOpts', V143, 1, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161} end(E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V139)) end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V162 of {'Idris.Prelude.Types.Left', E141} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V164) -> (('un--preOptions'(V0, V1, V5))(V139)) end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.Profile'} -> (fun () -> fun (V165) -> begin (V188 = begin (V166 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V165))), case V166 of {'Idris.Prelude.Types.Left', E143} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V168) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V168 of {'Idris.Core.Options.MkSessionOpts', E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163} -> (fun (V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187) -> {'Idris.Core.Options.MkSessionOpts', V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, 1, V186, V187} end(E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V165)) end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V188 of {'Idris.Prelude.Types.Left', E164} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V190) -> (('un--preOptions'(V0, V1, V5))(V165)) end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.Quiet'} -> (fun () -> fun (V191) -> begin (V192 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V1, {'Idris.Idris.REPL.Opts.REPL', 1}, V191))), case V192 of {'Idris.Prelude.Types.Left', E166} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V194) -> (('un--preOptions'(V0, V1, V5))(V191)) end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.NoPrelude'} -> (fun () -> fun (V195) -> begin (V218 = begin (V196 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V195))), case V196 of {'Idris.Prelude.Types.Left', E168} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V198) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V198 of {'Idris.Core.Options.MkSessionOpts', E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188} -> (fun (V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217) -> {'Idris.Core.Options.MkSessionOpts', 1, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217} end(E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V195)) end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V218 of {'Idris.Prelude.Types.Left', E189} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E189)); {'Idris.Prelude.Types.Right', E190} -> (fun (V220) -> (('un--preOptions'(V0, V1, V5))(V195)) end(E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.SetCG', E191} -> (fun (V221) -> fun (V222) -> begin (V224 = begin (V223 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V223} end), case V224 of {'Idris.Prelude.Types.Left', E192} -> (fun (V225) -> {'Idris.Prelude.Types.Left', V225} end(E192)); {'Idris.Prelude.Types.Right', E193} -> (fun (V226) -> case ('Idris.Idris2.Core.Options':'un--getCG'(case V226 of {'Idris.Core.Context.MkDefs', E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256} -> (fun (V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254) -> V231 end(E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V221)) of {'Idris.Prelude.Types.Just', E194} -> (fun (V255) -> begin (V256 = ('Idris.Idris2.Core.Context':'un--setCG'(V0, V255, V222))), case V256 of {'Idris.Prelude.Types.Left', E195} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V258) -> (('un--preOptions'(V0, V1, V5))(V222)) end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E194)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V287 = begin (V286 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V261, V262, V263)) end end end end end, fun (V264) -> fun (V265) -> fun (V266) -> V265 end end end, fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> begin (V272 = (V269(V271))), begin (V273 = (V270(V271))), (V272(V273)) end end end end end end end}, fun (V274) -> fun (V275) -> fun (V276) -> fun (V277) -> fun (V278) -> begin (V279 = (V276(V278))), ((V277(V279))(V278)) end end end end end end, fun (V280) -> fun (V281) -> fun (V282) -> begin (V283 = (V281(V282))), (V283(V282)) end end end end}, fun (V284) -> fun (V285) -> V285 end end}, <<"No such code generator"/utf8>>))(V222))), {'Idris.Prelude.Types.Right', V286} end), case V287 of {'Idris.Prelude.Types.Left', E197} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V289) -> begin (V347 = begin (V346 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V290) -> fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V292, V293, V294)) end end end end end, fun (V295) -> fun (V296) -> fun (V297) -> V296 end end end, fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> begin (V303 = (V300(V302))), begin (V304 = (V301(V302))), (V303(V304)) end end end end end end end}, fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> begin (V310 = (V307(V309))), ((V308(V310))(V309)) end end end end end end, fun (V311) -> fun (V312) -> fun (V313) -> begin (V314 = (V312(V313))), (V314(V313)) end end end end}, fun (V315) -> fun (V316) -> V316 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Code generators available: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V317) -> ('Idris.Idris2.Builtin':'un--fst'(V317)) end, ('Idris.Idris2.Core.Options':'un--availableCGs'(case V226 of {'Idris.Core.Context.MkDefs', E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226} -> (fun (V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345) -> V322 end(E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))(V222))), {'Idris.Prelude.Types.Right', V346} end), case V347 of {'Idris.Prelude.Types.Left', E227} -> (fun (V348) -> {'Idris.Prelude.Types.Left', V348} end(E227)); {'Idris.Prelude.Types.Right', E228} -> (fun (V349) -> begin (V377 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V350) -> fun (V351) -> fun (V352) -> fun (V353) -> fun (V354) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V352, V353, V354)) end end end end end, fun (V355) -> fun (V356) -> fun (V357) -> V356 end end end, fun (V358) -> fun (V359) -> fun (V360) -> fun (V361) -> fun (V362) -> begin (V363 = (V360(V362))), begin (V364 = (V361(V362))), (V363(V364)) end end end end end end end}, fun (V365) -> fun (V366) -> fun (V367) -> fun (V368) -> fun (V369) -> begin (V370 = (V367(V369))), ((V368(V370))(V369)) end end end end end end, fun (V371) -> fun (V372) -> fun (V373) -> begin (V374 = (V372(V373))), (V374(V373)) end end end end}, fun (V375) -> fun (V376) -> V376 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V222))), {'Idris.Prelude.Types.Right', V377} end end(E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E191)); {'Idris.Idris.CommandLine.Directive', E257} -> (fun (V378) -> fun (V379) -> begin (V402 = begin (V380 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V379))), case V380 of {'Idris.Prelude.Types.Left', E258} -> (fun (V381) -> {'Idris.Prelude.Types.Left', V381} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V382) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V382 of {'Idris.Core.Options.MkSessionOpts', E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278} -> (fun (V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401) -> {'Idris.Core.Options.MkSessionOpts', V383, V384, V385, V386, [V378 | V387], V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401} end(E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V379)) end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V402 of {'Idris.Prelude.Types.Left', E279} -> (fun (V403) -> {'Idris.Prelude.Types.Left', V403} end(E279)); {'Idris.Prelude.Types.Right', E280} -> (fun (V404) -> (('un--preOptions'(V0, V1, V5))(V379)) end(E280)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E257)); {'Idris.Idris.CommandLine.PkgPath', E281} -> (fun (V405) -> fun (V406) -> begin (V407 = ('Idris.Idris2.Core.Context':'un--addPkg'(V0, V405, V406))), case V407 of {'Idris.Prelude.Types.Left', E282} -> (fun (V408) -> {'Idris.Prelude.Types.Left', V408} end(E282)); {'Idris.Prelude.Types.Right', E283} -> (fun (V409) -> (('un--preOptions'(V0, V1, V5))(V406)) end(E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E281)); {'Idris.Idris.CommandLine.SourceDir', E284} -> (fun (V410) -> fun (V411) -> begin (V412 = ('Idris.Idris2.Core.Context':'un--setSourceDir'(V0, {'Idris.Prelude.Types.Just', V410}, V411))), case V412 of {'Idris.Prelude.Types.Left', E285} -> (fun (V413) -> {'Idris.Prelude.Types.Left', V413} end(E285)); {'Idris.Prelude.Types.Right', E286} -> (fun (V414) -> (('un--preOptions'(V0, V1, V5))(V411)) end(E286)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E284)); {'Idris.Idris.CommandLine.BuildDir', E287} -> (fun (V415) -> fun (V416) -> begin (V417 = ('Idris.Idris2.Core.Context':'un--setBuildDir'(V0, V415, V416))), case V417 of {'Idris.Prelude.Types.Left', E288} -> (fun (V418) -> {'Idris.Prelude.Types.Left', V418} end(E288)); {'Idris.Prelude.Types.Right', E289} -> (fun (V419) -> (('un--preOptions'(V0, V1, V5))(V416)) end(E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E287)); {'Idris.Idris.CommandLine.OutputDir', E290} -> (fun (V420) -> fun (V421) -> begin (V422 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V0, {'Idris.Prelude.Types.Just', V420}, V421))), case V422 of {'Idris.Prelude.Types.Left', E291} -> (fun (V423) -> {'Idris.Prelude.Types.Left', V423} end(E291)); {'Idris.Prelude.Types.Right', E292} -> (fun (V424) -> (('un--preOptions'(V0, V1, V5))(V421)) end(E292)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E290)); {'Idris.Idris.CommandLine.Directory', E293} -> (fun (V425) -> fun (V426) -> begin (V428 = begin (V427 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V427} end), case V428 of {'Idris.Prelude.Types.Left', E294} -> (fun (V429) -> {'Idris.Prelude.Types.Left', V429} end(E294)); {'Idris.Prelude.Types.Right', E295} -> (fun (V430) -> begin (V468 = ('un--dirOption'(case V430 of {'Idris.Core.Context.MkDefs', E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323} -> (fun (V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458) -> case V435 of {'Idris.Core.Options.MkOptions', E324, E325, E326, E327, E328, E329, E330, E331, E332} -> (fun (V459, V460, V461, V462, V463, V464, V465, V466, V467) -> V459 end(E324, E325, E326, E327, E328, E329, E330, E331, E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V425, V426))), case V468 of {'Idris.Prelude.Types.Left', E333} -> (fun (V469) -> {'Idris.Prelude.Types.Left', V469} end(E333)); {'Idris.Prelude.Types.Right', E334} -> (fun (V470) -> {'Idris.Prelude.Types.Right', 0} end(E334)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E293)); {'Idris.Idris.CommandLine.Timing'} -> (fun () -> fun (V471) -> begin (V472 = ('Idris.Idris2.Core.Context':'un--setLogTimings'(V0, 1, V471))), case V472 of {'Idris.Prelude.Types.Left', E335} -> (fun (V473) -> {'Idris.Prelude.Types.Left', V473} end(E335)); {'Idris.Prelude.Types.Right', E336} -> (fun (V474) -> (('un--preOptions'(V0, V1, V5))(V471)) end(E336)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.DebugElabCheck'} -> (fun () -> fun (V475) -> begin (V476 = ('Idris.Idris2.Core.Context':'un--setDebugElabCheck'(V0, 1, V475))), case V476 of {'Idris.Prelude.Types.Left', E337} -> (fun (V477) -> {'Idris.Prelude.Types.Left', V477} end(E337)); {'Idris.Prelude.Types.Right', E338} -> (fun (V478) -> (('un--preOptions'(V0, V1, V5))(V475)) end(E338)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.RunREPL', E339} -> (fun (V479) -> fun (V480) -> begin (V481 = ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V1, {'Idris.Idris.REPL.Opts.REPL', 1}, V480))), case V481 of {'Idris.Prelude.Types.Left', E340} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E340)); {'Idris.Prelude.Types.Right', E341} -> (fun (V483) -> begin (V506 = begin (V484 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V480))), case V484 of {'Idris.Prelude.Types.Left', E342} -> (fun (V485) -> {'Idris.Prelude.Types.Left', V485} end(E342)); {'Idris.Prelude.Types.Right', E343} -> (fun (V486) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V486 of {'Idris.Core.Options.MkSessionOpts', E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362} -> (fun (V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505) -> {'Idris.Core.Options.MkSessionOpts', V487, 1, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505} end(E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V480)) end(E343)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V506 of {'Idris.Prelude.Types.Left', E363} -> (fun (V507) -> {'Idris.Prelude.Types.Left', V507} end(E363)); {'Idris.Prelude.Types.Right', E364} -> (fun (V508) -> (('un--preOptions'(V0, V1, V5))(V480)) end(E364)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E341)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E339)); {'Idris.Idris.CommandLine.FindIPKG'} -> (fun () -> fun (V509) -> begin (V532 = begin (V510 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V509))), case V510 of {'Idris.Prelude.Types.Left', E365} -> (fun (V511) -> {'Idris.Prelude.Types.Left', V511} end(E365)); {'Idris.Prelude.Types.Right', E366} -> (fun (V512) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V512 of {'Idris.Core.Options.MkSessionOpts', E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385} -> (fun (V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531) -> {'Idris.Core.Options.MkSessionOpts', V513, V514, 1, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531} end(E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V509)) end(E366)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V532 of {'Idris.Prelude.Types.Left', E386} -> (fun (V533) -> {'Idris.Prelude.Types.Left', V533} end(E386)); {'Idris.Prelude.Types.Right', E387} -> (fun (V534) -> (('un--preOptions'(V0, V1, V5))(V509)) end(E387)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.IgnoreMissingIPKG'} -> (fun () -> fun (V535) -> begin (V558 = begin (V536 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V535))), case V536 of {'Idris.Prelude.Types.Left', E388} -> (fun (V537) -> {'Idris.Prelude.Types.Left', V537} end(E388)); {'Idris.Prelude.Types.Right', E389} -> (fun (V538) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V538 of {'Idris.Core.Options.MkSessionOpts', E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408} -> (fun (V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557) -> {'Idris.Core.Options.MkSessionOpts', V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, 1, V550, V551, V552, V553, V554, V555, V556, V557} end(E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V535)) end(E389)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V558 of {'Idris.Prelude.Types.Left', E409} -> (fun (V559) -> {'Idris.Prelude.Types.Left', V559} end(E409)); {'Idris.Prelude.Types.Right', E410} -> (fun (V560) -> (('un--preOptions'(V0, V1, V5))(V535)) end(E410)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.ChangedModules', E411} -> (fun (V561) -> fun (V562) -> begin (V585 = begin (V563 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V562))), case V563 of {'Idris.Prelude.Types.Left', E412} -> (fun (V564) -> {'Idris.Prelude.Types.Left', V564} end(E412)); {'Idris.Prelude.Types.Right', E413} -> (fun (V565) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V565 of {'Idris.Core.Options.MkSessionOpts', E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432} -> (fun (V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584) -> {'Idris.Core.Options.MkSessionOpts', V566, V567, V568, V569, V570, V571, V561, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584} end(E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V562)) end(E413)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V585 of {'Idris.Prelude.Types.Left', E433} -> (fun (V586) -> {'Idris.Prelude.Types.Left', V586} end(E433)); {'Idris.Prelude.Types.Right', E434} -> (fun (V587) -> (('un--preOptions'(V0, V1, V5))(V562)) end(E434)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E411)); {'Idris.Idris.CommandLine.DumpCases', E435} -> (fun (V588) -> fun (V589) -> begin (V612 = begin (V590 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V589))), case V590 of {'Idris.Prelude.Types.Left', E436} -> (fun (V591) -> {'Idris.Prelude.Types.Left', V591} end(E436)); {'Idris.Prelude.Types.Right', E437} -> (fun (V592) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V592 of {'Idris.Core.Options.MkSessionOpts', E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456} -> (fun (V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611) -> {'Idris.Core.Options.MkSessionOpts', V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, {'Idris.Prelude.Types.Just', V588}, V606, V607, V608, V609, V610, V611} end(E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V589)) end(E437)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V612 of {'Idris.Prelude.Types.Left', E457} -> (fun (V613) -> {'Idris.Prelude.Types.Left', V613} end(E457)); {'Idris.Prelude.Types.Right', E458} -> (fun (V614) -> (('un--preOptions'(V0, V1, V5))(V589)) end(E458)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E435)); {'Idris.Idris.CommandLine.DumpLifted', E459} -> (fun (V615) -> fun (V616) -> begin (V639 = begin (V617 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V616))), case V617 of {'Idris.Prelude.Types.Left', E460} -> (fun (V618) -> {'Idris.Prelude.Types.Left', V618} end(E460)); {'Idris.Prelude.Types.Right', E461} -> (fun (V619) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V619 of {'Idris.Core.Options.MkSessionOpts', E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480} -> (fun (V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638) -> {'Idris.Core.Options.MkSessionOpts', V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, {'Idris.Prelude.Types.Just', V615}, V634, V635, V636, V637, V638} end(E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V616)) end(E461)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V639 of {'Idris.Prelude.Types.Left', E481} -> (fun (V640) -> {'Idris.Prelude.Types.Left', V640} end(E481)); {'Idris.Prelude.Types.Right', E482} -> (fun (V641) -> (('un--preOptions'(V0, V1, V5))(V616)) end(E482)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E459)); {'Idris.Idris.CommandLine.DumpANF', E483} -> (fun (V642) -> fun (V643) -> begin (V666 = begin (V644 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V643))), case V644 of {'Idris.Prelude.Types.Left', E484} -> (fun (V645) -> {'Idris.Prelude.Types.Left', V645} end(E484)); {'Idris.Prelude.Types.Right', E485} -> (fun (V646) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V646 of {'Idris.Core.Options.MkSessionOpts', E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499, E500, E501, E502, E503, E504} -> (fun (V647, V648, V649, V650, V651, V652, V653, V654, V655, V656, V657, V658, V659, V660, V661, V662, V663, V664, V665) -> {'Idris.Core.Options.MkSessionOpts', V647, V648, V649, V650, V651, V652, V653, V654, V655, V656, V657, V658, V659, V660, {'Idris.Prelude.Types.Just', V642}, V662, V663, V664, V665} end(E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499, E500, E501, E502, E503, E504)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V643)) end(E485)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V666 of {'Idris.Prelude.Types.Left', E505} -> (fun (V667) -> {'Idris.Prelude.Types.Left', V667} end(E505)); {'Idris.Prelude.Types.Right', E506} -> (fun (V668) -> (('un--preOptions'(V0, V1, V5))(V643)) end(E506)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E483)); {'Idris.Idris.CommandLine.DumpVMCode', E507} -> (fun (V669) -> fun (V670) -> begin (V693 = begin (V671 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V670))), case V671 of {'Idris.Prelude.Types.Left', E508} -> (fun (V672) -> {'Idris.Prelude.Types.Left', V672} end(E508)); {'Idris.Prelude.Types.Right', E509} -> (fun (V673) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V673 of {'Idris.Core.Options.MkSessionOpts', E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524, E525, E526, E527, E528} -> (fun (V674, V675, V676, V677, V678, V679, V680, V681, V682, V683, V684, V685, V686, V687, V688, V689, V690, V691, V692) -> {'Idris.Core.Options.MkSessionOpts', V674, V675, V676, V677, V678, V679, V680, V681, V682, V683, V684, V685, V686, V687, V688, {'Idris.Prelude.Types.Just', V669}, V690, V691, V692} end(E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524, E525, E526, E527, E528)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V670)) end(E509)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V693 of {'Idris.Prelude.Types.Left', E529} -> (fun (V694) -> {'Idris.Prelude.Types.Left', V694} end(E529)); {'Idris.Prelude.Types.Right', E530} -> (fun (V695) -> (('un--preOptions'(V0, V1, V5))(V670)) end(E530)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E507)); {'Idris.Idris.CommandLine.Logging', E531} -> (fun (V696) -> fun (V697) -> begin (V720 = begin (V698 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V697))), case V698 of {'Idris.Prelude.Types.Left', E532} -> (fun (V699) -> {'Idris.Prelude.Types.Left', V699} end(E532)); {'Idris.Prelude.Types.Right', E533} -> (fun (V700) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V700 of {'Idris.Core.Options.MkSessionOpts', E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552} -> (fun (V701, V702, V703, V704, V705, V706, V707, V708, V709, V710, V711, V712, V713, V714, V715, V716, V717, V718, V719) -> {'Idris.Core.Options.MkSessionOpts', V701, V702, V703, V704, V705, V706, V707, 1, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V696, V709)), V710, V711, V712, V713, V714, V715, V716, V717, V718, V719} end(E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V697)) end(E533)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V720 of {'Idris.Prelude.Types.Left', E553} -> (fun (V721) -> {'Idris.Prelude.Types.Left', V721} end(E553)); {'Idris.Prelude.Types.Right', E554} -> (fun (V722) -> (('un--preOptions'(V0, V1, V5))(V697)) end(E554)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E531)); {'Idris.Idris.CommandLine.ConsoleWidth', E555} -> (fun (V723) -> fun (V724) -> begin (V725 = ('Idris.Idris2.Idris.REPL.Opts':'un--setConsoleWidth'(V1, V723, V724))), case V725 of {'Idris.Prelude.Types.Left', E556} -> (fun (V726) -> {'Idris.Prelude.Types.Left', V726} end(E556)); {'Idris.Prelude.Types.Right', E557} -> (fun (V727) -> (('un--preOptions'(V0, V1, V5))(V724)) end(E557)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E555)); {'Idris.Idris.CommandLine.Color', E558} -> (fun (V728) -> fun (V729) -> begin (V730 = ('Idris.Idris2.Idris.REPL.Opts':'un--setColor'(V1, V728, V729))), case V730 of {'Idris.Prelude.Types.Left', E559} -> (fun (V731) -> {'Idris.Prelude.Types.Left', V731} end(E559)); {'Idris.Prelude.Types.Right', E560} -> (fun (V732) -> (('un--preOptions'(V0, V1, V5))(V729)) end(E560)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E558)); {'Idris.Idris.CommandLine.WarningsAsErrors'} -> (fun () -> fun (V733) -> begin (V756 = begin (V734 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V733))), case V734 of {'Idris.Prelude.Types.Left', E561} -> (fun (V735) -> {'Idris.Prelude.Types.Left', V735} end(E561)); {'Idris.Prelude.Types.Right', E562} -> (fun (V736) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V736 of {'Idris.Core.Options.MkSessionOpts', E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574, E575, E576, E577, E578, E579, E580, E581} -> (fun (V737, V738, V739, V740, V741, V742, V743, V744, V745, V746, V747, V748, V749, V750, V751, V752, V753, V754, V755) -> {'Idris.Core.Options.MkSessionOpts', V737, V738, V739, V740, V741, V742, V743, V744, V745, V746, V747, V748, V749, V750, V751, V752, V753, 1, V755} end(E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574, E575, E576, E577, E578, E579, E580, E581)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V733)) end(E562)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V756 of {'Idris.Prelude.Types.Left', E582} -> (fun (V757) -> {'Idris.Prelude.Types.Left', V757} end(E582)); {'Idris.Prelude.Types.Right', E583} -> (fun (V758) -> (('un--preOptions'(V0, V1, V5))(V733)) end(E583)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.IgnoreShadowingWarnings'} -> (fun () -> fun (V759) -> begin (V782 = begin (V760 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V759))), case V760 of {'Idris.Prelude.Types.Left', E584} -> (fun (V761) -> {'Idris.Prelude.Types.Left', V761} end(E584)); {'Idris.Prelude.Types.Right', E585} -> (fun (V762) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V762 of {'Idris.Core.Options.MkSessionOpts', E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601, E602, E603, E604} -> (fun (V763, V764, V765, V766, V767, V768, V769, V770, V771, V772, V773, V774, V775, V776, V777, V778, V779, V780, V781) -> {'Idris.Core.Options.MkSessionOpts', V763, V764, V765, V766, V767, V768, V769, V770, V771, V772, V773, V774, V775, V776, V777, V778, V779, V780, 0} end(E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601, E602, E603, E604)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V759)) end(E585)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V782 of {'Idris.Prelude.Types.Left', E605} -> (fun (V783) -> {'Idris.Prelude.Types.Left', V783} end(E605)); {'Idris.Prelude.Types.Right', E606} -> (fun (V784) -> (('un--preOptions'(V0, V1, V5))(V759)) end(E606)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.BashCompletion', E607, E608} -> (fun (V785, V786) -> fun (V787) -> begin (V788 = (('un--opts'(V0, V785, V786))(V787))), case V788 of {'Idris.Prelude.Types.Left', E609} -> (fun (V789) -> {'Idris.Prelude.Types.Left', V789} end(E609)); {'Idris.Prelude.Types.Right', E610} -> (fun (V790) -> begin (V819 = begin (V818 = (('Idris.Idris2.Prelude.IO':'un--putStr'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V791) -> fun (V792) -> fun (V793) -> fun (V794) -> fun (V795) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V793, V794, V795)) end end end end end, fun (V796) -> fun (V797) -> fun (V798) -> V797 end end end, fun (V799) -> fun (V800) -> fun (V801) -> fun (V802) -> fun (V803) -> begin (V804 = (V801(V803))), begin (V805 = (V802(V803))), (V804(V805)) end end end end end end end}, fun (V806) -> fun (V807) -> fun (V808) -> fun (V809) -> fun (V810) -> begin (V811 = (V808(V810))), ((V809(V811))(V810)) end end end end end end, fun (V812) -> fun (V813) -> fun (V814) -> begin (V815 = (V813(V814))), (V815(V814)) end end end end}, fun (V816) -> fun (V817) -> V817 end end}, ('Idris.Idris2.Data.String':'un--fastUnlines'(V790))))(V787))), {'Idris.Prelude.Types.Right', V818} end), case V819 of {'Idris.Prelude.Types.Left', E611} -> (fun (V820) -> {'Idris.Prelude.Types.Left', V820} end(E611)); {'Idris.Prelude.Types.Right', E612} -> (fun (V821) -> {'Idris.Prelude.Types.Right', 0} end(E612)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E610)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E607, E608)); {'Idris.Idris.CommandLine.BashCompletionScript', E613} -> (fun (V822) -> fun (V823) -> begin (V852 = begin (V851 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V824) -> fun (V825) -> fun (V826) -> fun (V827) -> fun (V828) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V826, V827, V828)) end end end end end, fun (V829) -> fun (V830) -> fun (V831) -> V830 end end end, fun (V832) -> fun (V833) -> fun (V834) -> fun (V835) -> fun (V836) -> begin (V837 = (V834(V836))), begin (V838 = (V835(V836))), (V837(V838)) end end end end end end end}, fun (V839) -> fun (V840) -> fun (V841) -> fun (V842) -> fun (V843) -> begin (V844 = (V841(V843))), ((V842(V844))(V843)) end end end end end end, fun (V845) -> fun (V846) -> fun (V847) -> begin (V848 = (V846(V847))), (V848(V847)) end end end end}, fun (V849) -> fun (V850) -> V850 end end}, ('un--completionScript'(V822))))(V823))), {'Idris.Prelude.Types.Right', V851} end), case V852 of {'Idris.Prelude.Types.Left', E614} -> (fun (V853) -> {'Idris.Prelude.Types.Left', V853} end(E614)); {'Idris.Prelude.Types.Right', E615} -> (fun (V854) -> {'Idris.Prelude.Types.Right', 0} end(E615)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E613)); _ -> ('un--preOptions'(V0, V1, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--postOptions'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', 1} end; _ -> case V5 of {'Idris.Idris.REPL.Common.ErrorLoadingFile', E27, E28} -> (fun (V8, V9) -> case V6 of [E56 | E57] -> (fun (V10, V11) -> case V10 of {'Idris.Idris.CommandLine.OutputFile', E85} -> (fun (V12) -> fun (V13) -> begin (V17 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E86} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V16) -> {'Idris.Prelude.Types.Right', 0} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V11)), V13))), case V17 of {'Idris.Prelude.Types.Left', E88} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V19) -> {'Idris.Prelude.Types.Right', 0} end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E85)); _ -> case V6 of [E58 | E59] -> (fun (V20, V21) -> case V20 of {'Idris.Idris.CommandLine.OutputFile', E60} -> (fun (V22) -> fun (V23) -> begin (V28 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V24) -> case V24 of {'Idris.Prelude.Types.Left', E61} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V26) -> {'Idris.Prelude.Types.Right', 0} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V27) -> ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', <<"main"/utf8>>}}, V22, V27)) end, V23))), case V28 of {'Idris.Prelude.Types.Left', E63} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V30) -> begin (V34 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V31) -> case V31 of {'Idris.Prelude.Types.Left', E65} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V33) -> {'Idris.Prelude.Types.Right', 0} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V21)), V23))), case V34 of {'Idris.Prelude.Types.Left', E67} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V36) -> {'Idris.Prelude.Types.Right', 0} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60)); {'Idris.Idris.CommandLine.ExecFn', E69} -> (fun (V37) -> fun (V38) -> begin (V43 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E70} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V41) -> {'Idris.Prelude.Types.Right', 0} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', V37}}, V42)) end, V38))), case V43 of {'Idris.Prelude.Types.Left', E72} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V45) -> begin (V49 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E74} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V48) -> {'Idris.Prelude.Types.Right', 0} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V21)), V38))), case V49 of {'Idris.Prelude.Types.Left', E76} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V51) -> {'Idris.Prelude.Types.Right', 0} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E69)); {'Idris.Idris.CommandLine.CheckOnly'} -> (fun () -> fun (V52) -> begin (V56 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V53) -> case V53 of {'Idris.Prelude.Types.Left', E78} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V55) -> {'Idris.Prelude.Types.Right', 0} end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V21)), V52))), case V56 of {'Idris.Prelude.Types.Left', E80} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V58) -> {'Idris.Prelude.Types.Right', 0} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.RunREPL', E82} -> (fun (V59) -> fun (V60) -> begin (V61 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V59, V60))), case V61 of {'Idris.Prelude.Types.Left', E83} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V63) -> {'Idris.Prelude.Types.Right', 0} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E82)); _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V21)) end end(E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56, E57)); _ -> case V6 of [E29 | E30] -> (fun (V64, V65) -> case V64 of {'Idris.Idris.CommandLine.OutputFile', E31} -> (fun (V66) -> fun (V67) -> begin (V72 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V68) -> case V68 of {'Idris.Prelude.Types.Left', E32} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V70) -> {'Idris.Prelude.Types.Right', 0} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V71) -> ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', <<"main"/utf8>>}}, V66, V71)) end, V67))), case V72 of {'Idris.Prelude.Types.Left', E34} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V74) -> begin (V78 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V75) -> case V75 of {'Idris.Prelude.Types.Left', E36} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V77) -> {'Idris.Prelude.Types.Right', 0} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V65)), V67))), case V78 of {'Idris.Prelude.Types.Left', E38} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V80) -> {'Idris.Prelude.Types.Right', 0} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); {'Idris.Idris.CommandLine.ExecFn', E40} -> (fun (V81) -> fun (V82) -> begin (V87 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V83) -> case V83 of {'Idris.Prelude.Types.Left', E41} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V85) -> {'Idris.Prelude.Types.Right', 0} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V86) -> ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', V81}}, V86)) end, V82))), case V87 of {'Idris.Prelude.Types.Left', E43} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V89) -> begin (V93 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V90) -> case V90 of {'Idris.Prelude.Types.Left', E45} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V92) -> {'Idris.Prelude.Types.Right', 0} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V65)), V82))), case V93 of {'Idris.Prelude.Types.Left', E47} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V95) -> {'Idris.Prelude.Types.Right', 0} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40)); {'Idris.Idris.CommandLine.CheckOnly'} -> (fun () -> fun (V96) -> begin (V100 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E49} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V99) -> {'Idris.Prelude.Types.Right', 0} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V65)), V96))), case V100 of {'Idris.Prelude.Types.Left', E51} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V102) -> {'Idris.Prelude.Types.Right', 0} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.RunREPL', E53} -> (fun (V103) -> fun (V104) -> begin (V105 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V103, V104))), case V105 of {'Idris.Prelude.Types.Left', E54} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V107) -> {'Idris.Prelude.Types.Right', 0} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53)); _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V65)) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28)); _ -> case V6 of [E0 | E1] -> (fun (V108, V109) -> case V108 of {'Idris.Idris.CommandLine.OutputFile', E2} -> (fun (V110) -> fun (V111) -> begin (V116 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V112) -> case V112 of {'Idris.Prelude.Types.Left', E3} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V114) -> {'Idris.Prelude.Types.Right', 0} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V115) -> ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', <<"main"/utf8>>}}, V110, V115)) end, V111))), case V116 of {'Idris.Prelude.Types.Left', E5} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V118) -> begin (V122 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V119) -> case V119 of {'Idris.Prelude.Types.Left', E7} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V121) -> {'Idris.Prelude.Types.Right', 0} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V109)), V111))), case V122 of {'Idris.Prelude.Types.Left', E9} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V124) -> {'Idris.Prelude.Types.Right', 0} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); {'Idris.Idris.CommandLine.ExecFn', E11} -> (fun (V125) -> fun (V126) -> begin (V131 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V127) -> case V127 of {'Idris.Prelude.Types.Left', E12} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V129) -> {'Idris.Prelude.Types.Right', 0} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V130) -> ('Idris.Idris2.Idris.REPL':'un--execExp'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', V125}}, V130)) end, V126))), case V131 of {'Idris.Prelude.Types.Left', E14} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V133) -> begin (V137 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V134) -> case V134 of {'Idris.Prelude.Types.Left', E16} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V136) -> {'Idris.Prelude.Types.Right', 0} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V109)), V126))), case V137 of {'Idris.Prelude.Types.Left', E18} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V139) -> {'Idris.Prelude.Types.Right', 0} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); {'Idris.Idris.CommandLine.CheckOnly'} -> (fun () -> fun (V140) -> begin (V144 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V141) -> case V141 of {'Idris.Prelude.Types.Left', E20} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V143) -> {'Idris.Prelude.Types.Right', 0} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--postOptions'(V0, V1, V2, V3, V4, V5, V109)), V140))), case V144 of {'Idris.Prelude.Types.Left', E22} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V146) -> {'Idris.Prelude.Types.Right', 0} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.RunREPL', E24} -> (fun (V147) -> fun (V148) -> begin (V149 = ('Idris.Idris2.Idris.REPL':'un--replCmd'(V0, V1, V2, V3, V4, V147, V148))), case V149 of {'Idris.Prelude.Types.Left', E25} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V151) -> {'Idris.Prelude.Types.Right', 0} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24)); _ -> ('un--postOptions'(V0, V1, V2, V3, V4, V5, V109)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--pkgDir'(V0) -> ('case--pkgDir-3385'(V0, ('Idris.Idris2.Libraries.Data.List1':'un--unsnoc'(('Idris.Idris2.Data.String':'un--split'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $-)) end, V0)))))).
'un--packageNames'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> ('Idris.Idris2.Data.List':'un--filter'(fun (V7) -> ('nested--10532-3946--in--un--notHidden'(V0, V7)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> case V8 of {'Idris.Idris.SetOptions.MkPkgDir', E0, E1, E2} -> (fun (V9, V10, V11) -> V10 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6)))) end, fun (V12) -> ('un--getPackageDirs'(V0, V12)) end)).
'un--opts'(V0, V1, V2) -> case V1 of <<"--"/utf8>> -> case V2 of <<"idris2"/utf8>> -> fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'())} end; _ -> case V2 of <<"--cg"/utf8>> -> fun (V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E56} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V7))} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V8) -> ('un--codegens'(V0, V8)) end, V4)) end; <<"--codegen"/utf8>> -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E58} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V12))} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> ('un--codegens'(V0, V13)) end, V9)) end; <<"-p"/utf8>> -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E60} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V17) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V17))} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> ('un--findPackages'(V0, V18)) end, V14)) end; <<"--package"/utf8>> -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E62} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V22))} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V23) -> ('un--findPackages'(V0, V23)) end, V19)) end; <<"--log"/utf8>> -> fun (V24) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('un--logLevels'())))} end; _ -> case V1 of <<"--"/utf8>> -> fun (V25) -> case V2 of <<"-o"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--output"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--source-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--build-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--output-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; _ -> case V2 of <<"--build"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V26) -> case V26 of {'Idris.Prelude.Types.Left', E44} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V28))} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V29) -> ('un--findIpkg'(V0, V29)) end, V25)); <<"--install"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V30) -> case V30 of {'Idris.Prelude.Types.Left', E46} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V32) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V32))} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V33) -> ('un--findIpkg'(V0, V33)) end, V25)); <<"--mkdoc"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V34) -> case V34 of {'Idris.Prelude.Types.Left', E48} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V36) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V36))} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V37) -> ('un--findIpkg'(V0, V37)) end, V25)); <<"--typecheck"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V38) -> case V38 of {'Idris.Prelude.Types.Left', E50} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V40) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V40))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V41) -> ('un--findIpkg'(V0, V41)) end, V25)); <<"--clean"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E52} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V44) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V44))} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V45) -> ('un--findIpkg'(V0, V45)) end, V25)); <<"--repl"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E54} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V48) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V48))} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V49) -> ('un--findIpkg'(V0, V49)) end, V25)); _ -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V52, V53)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end; _ -> fun (V54) -> case V2 of <<"--build"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V55) -> case V55 of {'Idris.Prelude.Types.Left', E32} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V57) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V57))} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V58) -> ('un--findIpkg'(V0, V58)) end, V54)); <<"--install"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V59) -> case V59 of {'Idris.Prelude.Types.Left', E34} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V61) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V61))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V62) -> ('un--findIpkg'(V0, V62)) end, V54)); <<"--mkdoc"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V63) -> case V63 of {'Idris.Prelude.Types.Left', E36} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V65) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V65))} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V66) -> ('un--findIpkg'(V0, V66)) end, V54)); <<"--typecheck"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V67) -> case V67 of {'Idris.Prelude.Types.Left', E38} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V69) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V69))} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V70) -> ('un--findIpkg'(V0, V70)) end, V54)); <<"--clean"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V71) -> case V71 of {'Idris.Prelude.Types.Left', E40} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V73) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V73))} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V74) -> ('un--findIpkg'(V0, V74)) end, V54)); <<"--repl"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V75) -> case V75 of {'Idris.Prelude.Types.Left', E42} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V77) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V77))} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V78) -> ('un--findIpkg'(V0, V78)) end, V54)); _ -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V79, V80)) end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V81, V82)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end end end; _ -> case V2 of <<"--cg"/utf8>> -> fun (V83) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V84) -> case V84 of {'Idris.Prelude.Types.Left', E24} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V86) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V86))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V87) -> ('un--codegens'(V0, V87)) end, V83)) end; <<"--codegen"/utf8>> -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V89) -> case V89 of {'Idris.Prelude.Types.Left', E26} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V91) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V91))} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V92) -> ('un--codegens'(V0, V92)) end, V88)) end; <<"-p"/utf8>> -> fun (V93) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V94) -> case V94 of {'Idris.Prelude.Types.Left', E28} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V96) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V96))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V97) -> ('un--findPackages'(V0, V97)) end, V93)) end; <<"--package"/utf8>> -> fun (V98) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V99) -> case V99 of {'Idris.Prelude.Types.Left', E30} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V101) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V101))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V102) -> ('un--findPackages'(V0, V102)) end, V98)) end; <<"--log"/utf8>> -> fun (V103) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, ('un--logLevels'())))} end; _ -> case V1 of <<"--"/utf8>> -> fun (V104) -> case V2 of <<"-o"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--output"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--source-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--build-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"--output-dir"/utf8>> -> {'Idris.Prelude.Types.Right', []}; _ -> case V2 of <<"--build"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V105) -> case V105 of {'Idris.Prelude.Types.Left', E12} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V107) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V107))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V108) -> ('un--findIpkg'(V0, V108)) end, V104)); <<"--install"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V109) -> case V109 of {'Idris.Prelude.Types.Left', E14} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V111) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V111))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V112) -> ('un--findIpkg'(V0, V112)) end, V104)); <<"--mkdoc"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V113) -> case V113 of {'Idris.Prelude.Types.Left', E16} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V115) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V115))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V116) -> ('un--findIpkg'(V0, V116)) end, V104)); <<"--typecheck"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V117) -> case V117 of {'Idris.Prelude.Types.Left', E18} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V119) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V119))} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V120) -> ('un--findIpkg'(V0, V120)) end, V104)); <<"--clean"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V121) -> case V121 of {'Idris.Prelude.Types.Left', E20} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V123) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V123))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V124) -> ('un--findIpkg'(V0, V124)) end, V104)); <<"--repl"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V125) -> case V125 of {'Idris.Prelude.Types.Left', E22} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V127) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V127))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V128) -> ('un--findIpkg'(V0, V128)) end, V104)); _ -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V129, V130)) end end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V131, V132)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end; _ -> fun (V133) -> case V2 of <<"--build"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V134) -> case V134 of {'Idris.Prelude.Types.Left', E0} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V136) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V136))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V137) -> ('un--findIpkg'(V0, V137)) end, V133)); <<"--install"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V138) -> case V138 of {'Idris.Prelude.Types.Left', E2} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V140) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V140))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V141) -> ('un--findIpkg'(V0, V141)) end, V133)); <<"--mkdoc"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V142) -> case V142 of {'Idris.Prelude.Types.Left', E4} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V144) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V144))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V145) -> ('un--findIpkg'(V0, V145)) end, V133)); <<"--typecheck"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V146) -> case V146 of {'Idris.Prelude.Types.Left', E6} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V148) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V148))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V149) -> ('un--findIpkg'(V0, V149)) end, V133)); <<"--clean"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V150) -> case V150 of {'Idris.Prelude.Types.Left', E8} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V152) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V152))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V153) -> ('un--findIpkg'(V0, V153)) end, V133)); <<"--repl"/utf8>> -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V154) -> case V154 of {'Idris.Prelude.Types.Left', E10} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V156) -> {'Idris.Prelude.Types.Right', ('un--prefixOnlyIfNonEmpty'(V1, V156))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V157) -> ('un--findIpkg'(V0, V157)) end, V133)); _ -> {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V158, V159)) end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V160, V161)) end end}, V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))) of 1 -> []; 0 -> ('un--prefixOnly'(V1, ('Idris.Idris2.Idris.CommandLine':'un--optionFlags'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end end end.
'un--logLevels'() -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V0) -> ('Idris.Idris2.Builtin':'un--fst'(V0)) end, ('Idris.Idris2.Core.Options.Log':'un--knownTopics'()))), fun (V1) -> ('nested--10684-4107--in--un--prefixes'(('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.String':'un--split'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $.)) end, V1)))))) end)).
'un--ideModeSocket'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.IdeModeSocket', E2} -> (fun (V3) -> 1 end(E2)); _ -> ('un--ideModeSocket'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--ideMode'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Idris.CommandLine.IdeMode'} -> (fun () -> 1 end()); _ -> ('un--ideMode'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPackageDirs'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.Directory':'un--dirEntries'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> ('un--pkgDir'(V31)) end, V30)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V32) -> [] end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findPackages'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V53 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V48 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Idris.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'())))))))), begin (V101 = case V5 of {'Idris.Core.Context.MkDefs', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> case V58 of {'Idris.Core.Options.MkOptions', E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90) -> case V82 of {'Idris.Core.Options.MkDirs', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V94 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V130 = begin (V129 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> fun (V109) -> V108 end end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), begin (V116 = (V113(V114))), (V115(V116)) end end end end end end end}, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), ((V120(V122))(V121)) end end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V124(V125))), (V126(V125)) end end end end}, fun (V127) -> fun (V128) -> V128 end end}))(V1))), {'Idris.Prelude.Types.Right', V129} end), case V130 of {'Idris.Prelude.Types.Left', E96} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V132) -> case V132 of {'Idris.Prelude.Types.Just', E98} -> (fun (V133) -> begin (V134 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V133, V101))), begin (V136 = begin (V135 = (('un--packageNames'(V134))(V1))), {'Idris.Prelude.Types.Right', V135} end), case V136 of {'Idris.Prelude.Types.Left', E99} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V138) -> begin (V140 = begin (V139 = (('un--packageNames'(V53))(V1))), {'Idris.Prelude.Types.Right', V139} end), case V140 of {'Idris.Prelude.Types.Left', E101} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V142) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V138, V142))} end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E98)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findIpkg'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Just', E2} -> (fun (V33) -> begin (V62 = begin (V61 = (('Idris.Idris2.Erlang.System.Directory':'un--dirEntries'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V36, V37, V38)) end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> V40 end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), begin (V48 = (V45(V46))), (V47(V48)) end end end end end end end}, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), ((V52(V54))(V53)) end end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V56(V57))), (V58(V57)) end end end end}, fun (V59) -> fun (V60) -> V60 end end}, V33))(V1))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E3} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V64) -> case V64 of {'Idris.Prelude.Types.Right', E5} -> (fun (V65) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'(fun (V66) -> ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<".ipkg"/utf8>>, V66)) end, V65))} end(E5)); {'Idris.Prelude.Types.Left', E6} -> (fun (V67) -> {'Idris.Prelude.Types.Right', []} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dirOption'(V0, V1, V2) -> case V1 of 0 -> begin (V40 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V0 of {'Idris.Core.Options.MkDirs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V35 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Idris.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'())))))))))(V2))), {'Idris.Prelude.Types.Right', V40} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--completionScript'(V0) -> begin (V1 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, V0))), ('Idris.Idris2.Data.String':'un--fastUnlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"()"/utf8>>)) | [<<"{"/utf8>> | [<<"  ED=$([ -z $2 ] && echo \x{22}--\x{22} || echo $2)"/utf8>> | [<<"  COMPREPLY=($(idris2 --bash-completion $ED $3))"/utf8>> | [<<"}"/utf8>> | [<<""/utf8>> | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"complete -F "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<" -o dirnames idris2"/utf8>>)))) | []]]]]]]])) end.
'un--codegens'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V5) -> ('Idris.Idris2.Builtin':'un--fst'(V5)) end, ('Idris.Idris2.Core.Options':'un--availableCGs'(case V4 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V34) -> begin (V35 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V35} end end, V1)).
'un--candidateDirs'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V9) -> ('nested--10012-3489--in--un--checkBounds'(V2, V1, V0, V9)) end, V8)) end, fun (V10) -> ('un--getPackageDirs'(V0, V10)) end)).
'un--addPkgDir'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V55 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V12 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> case V36 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V50 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Idris.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'())))))))), begin (V103 = case V7 of {'Idris.Core.Context.MkDefs', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> case V60 of {'Idris.Core.Options.MkOptions', E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92) -> case V84 of {'Idris.Core.Options.MkDirs', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> V96 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V132 = begin (V131 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V106, V107, V108)) end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> V110 end end end, fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> begin (V117 = (V114(V116))), begin (V118 = (V115(V116))), (V117(V118)) end end end end end end end}, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> begin (V124 = (V121(V123))), ((V122(V124))(V123)) end end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> begin (V128 = (V126(V127))), (V128(V127)) end end end end}, fun (V129) -> fun (V130) -> V130 end end}))(V3))), {'Idris.Prelude.Types.Right', V131} end), case V132 of {'Idris.Prelude.Types.Left', E96} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V134) -> case V134 of {'Idris.Prelude.Types.Just', E98} -> (fun (V135) -> begin (V136 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V135, V103))), begin (V138 = begin (V137 = (('un--candidateDirs'(V136, V1, V2))(V3))), {'Idris.Prelude.Types.Right', V137} end), case V138 of {'Idris.Prelude.Types.Left', E99} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V140) -> begin (V142 = begin (V141 = (('un--candidateDirs'(V55, V1, V2))(V3))), {'Idris.Prelude.Types.Right', V141} end), case V142 of {'Idris.Prelude.Types.Left', E101} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V144) -> begin (V192 = case V7 of {'Idris.Core.Context.MkDefs', E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172) -> case V149 of {'Idris.Core.Options.MkOptions', E131, E132, E133, E134, E135, E136, E137, E138, E139} -> (fun (V173, V174, V175, V176, V177, V178, V179, V180, V181) -> case V173 of {'Idris.Core.Options.MkDirs', E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V182, V183, V184, V185, V186, V187, V188, V189, V190, V191) -> V189 end(E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E131, E132, E133, E134, E135, E136, E137, E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V210 = begin (V209 = (('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V195, V196, V197)) end end end end end, fun (V198) -> fun (V199) -> fun (V200) -> V199 end end end, fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> begin (V206 = (V203(V205))), begin (V207 = (V204(V205))), (V206(V207)) end end end end end end end}, fun (V208) -> ('un--candidateDirs'(V208, V1, V2)) end, V192))(V3))), {'Idris.Prelude.Types.Right', V209} end), case V210 of {'Idris.Prelude.Types.Left', E150} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V212) -> begin (V241 = case ('Idris.Idris2.Data.List':'un--isNil'(V140)) of 1 -> ('Idris.Idris2.Prelude.Types.List':'un--++'(V144, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V215, V216, V217)) end end end end end, fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V220, V221, V222)) end end end end end, fun (V223) -> fun (V224) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V224)) end end, fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V228, V229, V230, V231)) end end end end end end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V233)) end end, fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V236, V237, V238)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V239) -> fun (V240) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V239, V240)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V212)))); 0 -> V140; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V262 = ('Idris.Idris2.Data.List':'un--sortBy'(fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_(Maybe $a)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V244) -> fun (V245) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--==_Eq_PkgVersion'(V244, V245)) end end, fun (V246) -> fun (V247) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--/=_Eq_PkgVersion'(V246, V247)) end end}, fun (V248) -> fun (V249) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--compare_Ord_PkgVersion'(V248, V249)) end end, fun (V250) -> fun (V251) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--<_Ord_PkgVersion'(V250, V251)) end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Idris.Package.Types':'dn--un-->_Ord_PkgVersion'(V252, V253)) end end, fun (V254) -> fun (V255) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--<=_Ord_PkgVersion'(V254, V255)) end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Idris.Package.Types':'dn--un-->=_Ord_PkgVersion'(V256, V257)) end end, fun (V258) -> fun (V259) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--max_Ord_PkgVersion'(V258, V259)) end end, fun (V260) -> fun (V261) -> ('Idris.Idris2.Idris.Package.Types':'dn--un--min_Ord_PkgVersion'(V260, V261)) end end}, ('Idris.Idris2.Builtin':'un--snd'(V243)), ('Idris.Idris2.Builtin':'un--snd'(V242)))) end end, V241))), case V262 of [] -> case case V7 of {'Idris.Core.Context.MkDefs', E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179} -> (fun (V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290) -> case V267 of {'Idris.Core.Options.MkOptions', E180, E181, E182, E183, E184, E185, E186, E187, E188} -> (fun (V291, V292, V293, V294, V295, V296, V297, V298, V299) -> case V293 of {'Idris.Core.Options.MkSessionOpts', E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207} -> (fun (V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318) -> V310 end(E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E180, E181, E182, E183, E184, E185, E186, E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.CantFindPackage', ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Package.Types':'dn--un--show_Show_PkgVersionBounds'(V2)), <<")"/utf8>>))))))}, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E208 | E209] -> (fun (V319, V320) -> case V319 of {'Idris.Builtin.MkPair', E210, E211} -> (fun (V321, V322) -> ('Idris.Idris2.Core.Context':'un--addExtraDir'(V0, V321, V3)) end(E210, E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E208, E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E98)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
