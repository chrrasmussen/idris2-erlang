-module('Idris.Idris2.Control.Monad.State.Interface').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--state-2147'/11,
  'case--{Default implementation of state:0}-1503'/7,
  'dn--un--state_MonadState_$stateType_((StateT $stateType) $m)'/6,
  'dn--un--state_MonadState_$s_(MaybeT $m)'/5,
  'dn--un--state_MonadState_$s_((WriterT $r) $m)'/7,
  'dn--un--state_MonadState_$s_((ReaderT $r) $m)'/7,
  'dn--un--state_MonadState_$s_((EitherT $e) $m)'/6,
  'dn--un--state_MonadState_$s_((((RWST $r) $w) $s) $m)'/10,
  'dn--un--put_MonadState_$stateType_((StateT $stateType) $m)'/5,
  'dn--un--put_MonadState_$s_(MaybeT $m)'/4,
  'dn--un--put_MonadState_$s_((WriterT $r) $m)'/6,
  'dn--un--put_MonadState_$s_((ReaderT $r) $m)'/6,
  'dn--un--put_MonadState_$s_((EitherT $e) $m)'/5,
  'dn--un--put_MonadState_$s_((((RWST $r) $w) $s) $m)'/9,
  'dn--un--get_MonadState_$stateType_((StateT $stateType) $m)'/4,
  'dn--un--get_MonadState_$s_(MaybeT $m)'/3,
  'dn--un--get_MonadState_$s_((WriterT $r) $m)'/5,
  'dn--un--get_MonadState_$s_((ReaderT $r) $m)'/5,
  'dn--un--get_MonadState_$s_((EitherT $e) $m)'/4,
  'dn--un--get_MonadState_$s_((((RWST $r) $w) $s) $m)'/8,
  'dn--un--__MonadState_(Monad m)'/3,
  'dn--un--__Impl_MonadState_$stateType_((StateT $stateType) $m)'/3,
  'dn--un--__Impl_MonadState_$s_(MaybeT $m)'/3,
  'dn--un--__Impl_MonadState_$s_((WriterT $r) $m)'/4,
  'dn--un--__Impl_MonadState_$s_((ReaderT $r) $m)'/4,
  'dn--un--__Impl_MonadState_$s_((EitherT $e) $m)'/4,
  'dn--un--__Impl_MonadState_$s_((((RWST $r) $w) $s) $m)'/5,
  'un--state'/4,
  'un--put'/3,
  'un--modify'/4,
  'un--gets'/5,
  'un--get'/3
]).
'case--state-2147'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case case V5 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E5, E6, E7} -> (fun (V13, V14, V15) -> V13 end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E2, E3, E4} -> (fun (V16, V17, V18) -> ((V17('erased'))({'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V11, V9}})) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--{Default implementation of state:0}-1503'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> V9 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> (V15(V7)) end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun () -> case case case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E16, E17, E18, E19} -> (fun (V17, V18, V19, V20) -> V17 end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E13, E14, E15} -> (fun (V21, V22, V23) -> V21 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E10, E11, E12} -> (fun (V24, V25, V26) -> ((V25('erased'))(V8)) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--state_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1, V2, V3, V4, V5) -> case case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V6, V7, V8) -> V6 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V9, V10, V11) -> ((V10('erased'))((V4(V5)))) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--state_MonadState_$s_(MaybeT $m)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'('erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> V5 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> ((V12('erased'))(V4)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--state_MonadState_$s_((WriterT $r) $m)'(V0, V1, V2, V3, V4, V5, V6) -> case case case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V7, V8, V9, V10) -> V7 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E7, E8, E9} -> (fun (V11, V12, V13) -> V11 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V14, V15, V16) -> ((((V14('erased'))('erased'))(fun (V21) -> {'Idris.Builtin.MkPair', V21, V6} end))(case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E3, E4, E5, E6} -> (fun (V17, V18, V19, V20) -> ((V20('erased'))(V5)) end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--state_MonadState_$s_((ReaderT $r) $m)'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'('erased', 'erased', 'erased', case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> V7 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> ((V14('erased'))(V5)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6)).
'dn--un--state_MonadState_$s_((EitherT $e) $m)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'('erased', 'erased', 'erased', case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> V6 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> ((V13('erased'))(V5)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--state_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('case--state-2147'('erased', 'erased', 'erased', 'erased', 'erased', V5, V6, V7, V8, V9, (V6(V8)))).
'dn--un--put_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1, V2, V3, V4) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V5, V6, V7) -> V5 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V8, V9, V10) -> ((V9('erased'))({'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkUnit'}})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--put_MonadState_$s_(MaybeT $m)'(V0, V1, V2, V3) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'('erased', 'erased', case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> V4 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> (V10(V3)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--put_MonadState_$s_((WriterT $r) $m)'(V0, V1, V2, V3, V4, V5) -> case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V6, V7, V8, V9) -> V6 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E7, E8, E9} -> (fun (V10, V11, V12) -> V10 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V13, V14, V15) -> ((((V13('erased'))('erased'))(fun (V20) -> {'Idris.Builtin.MkPair', V20, V5} end))(case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E3, E4, E5, E6} -> (fun (V16, V17, V18, V19) -> (V18(V4)) end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--put_MonadState_$s_((ReaderT $r) $m)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> V6 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> (V12(V4)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5)).
'dn--un--put_MonadState_$s_((EitherT $e) $m)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> V5 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> (V11(V4)) end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--put_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V12, V13, V14) -> ((V13('erased'))({'Idris.Builtin.MkPair', {'Idris.Builtin.MkUnit'}, {'Idris.Builtin.MkPair', V5, V8}})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--get_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1, V2, V3) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V4, V5, V6) -> V4 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V7, V8, V9) -> ((V8('erased'))({'Idris.Builtin.MkPair', V3, V3})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--get_MonadState_$s_(MaybeT $m)'(V0, V1, V2) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'('erased', 'erased', case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> V8 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--get_MonadState_$s_((WriterT $r) $m)'(V0, V1, V2, V3, V4) -> case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E10, E11, E12, E13} -> (fun (V5, V6, V7, V8) -> V5 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E7, E8, E9} -> (fun (V9, V10, V11) -> V9 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V12, V13, V14) -> ((((V12('erased'))('erased'))(fun (V19) -> {'Idris.Builtin.MkPair', V19, V4} end))(case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E3, E4, E5, E6} -> (fun (V15, V16, V17, V18) -> V16 end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--get_MonadState_$s_((ReaderT $r) $m)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> V5 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> V10 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)).
'dn--un--get_MonadState_$s_((EitherT $e) $m)'(V0, V1, V2, V3) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> V4 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> V9 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--get_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4, V5, V6, V7) -> case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V11, V12, V13) -> ((V12('erased'))({'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V6, V7}})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__MonadState_(Monad m)'(V0, V1, V2) -> case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_MonadState_$stateType_((StateT $stateType) $m)'(V0, V1, V2) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V11, V12, V13) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6, V7)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'('erased', 'erased', 'erased', V2, V15, V16)) end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'('erased', 'erased', 'erased', 'erased', V2, V19, V20, V21)) end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'('erased', 'erased', 'erased', 'erased', V2, V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'('erased', 'erased', 'erased', V2, V28, V29)) end end end}, fun (V30) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V31, V32, V33) -> V31 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E6, E7, E8} -> (fun (V34, V35, V36) -> ((V35('erased'))({'Idris.Builtin.MkPair', V30, V30})) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V37) -> fun (V38) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E15, E16, E17} -> (fun (V39, V40, V41) -> V39 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E12, E13, E14} -> (fun (V42, V43, V44) -> ((V43('erased'))({'Idris.Builtin.MkPair', V37, {'Idris.Builtin.MkUnit'}})) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V45) -> fun (V46) -> fun (V47) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E21, E22, E23} -> (fun (V48, V49, V50) -> V48 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E18, E19, E20} -> (fun (V51, V52, V53) -> ((V52('erased'))((V46(V47)))) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'dn--un--__Impl_MonadState_$s_(MaybeT $m)'(V0, V1, V2) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--map_Functor_(MaybeT $m)'('erased', 'erased', 'erased', case case case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E6, E7, E8, E9} -> (fun (V7, V8, V9, V10) -> V7 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V11, V12, V13) -> V11 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V14, V15, V16) -> V14 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6)) end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--pure_Applicative_(MaybeT $m)'('erased', 'erased', case case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E13, E14, E15, E16} -> (fun (V19, V20, V21, V22) -> V19 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E10, E11, E12} -> (fun (V23, V24, V25) -> V23 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--<*>_Applicative_(MaybeT $m)'('erased', 'erased', 'erased', case case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E20, E21, E22, E23} -> (fun (V30, V31, V32, V33) -> V30 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V34, V35, V36) -> V34 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V28, V29)) end end end end}, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un-->>=_Monad_(MaybeT $m)'('erased', 'erased', 'erased', case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E24, E25, E26, E27} -> (fun (V41, V42, V43, V44) -> V41 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V39, V40)) end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--join_Monad_(MaybeT $m)'('erased', 'erased', case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E28, E29, E30, E31} -> (fun (V47, V48, V49, V50) -> V47 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V46)) end end}, ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'('erased', 'erased', case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E32, E33, E34, E35} -> (fun (V51, V52, V53, V54) -> V51 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E36, E37, E38, E39} -> (fun (V55, V56, V57, V58) -> V56 end(E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V59) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'('erased', 'erased', case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E40, E41, E42, E43} -> (fun (V60, V61, V62, V63) -> V60 end(E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E44, E45, E46, E47} -> (fun (V64, V65, V66, V67) -> (V66(V59)) end(E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Control.Monad.Maybe':'dn--un--lift_MonadTrans_MaybeT'('erased', 'erased', case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E48, E49, E50, E51} -> (fun (V70, V71, V72, V73) -> V70 end(E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E52, E53, E54, E55} -> (fun (V74, V75, V76, V77) -> ((V77('erased'))(V69)) end(E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end}.
'dn--un--__Impl_MonadState_$s_((WriterT $r) $m)'(V0, V1, V2, V3) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E6, E7, E8, E9} -> (fun (V9, V10, V11, V12) -> V9 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V13, V14, V15) -> V13 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V16, V17, V18) -> V16 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V20, V21) -> {'Idris.Builtin.MkPair', (V6(V20)), V21} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V7(V8)))) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E18, E19, E20, E21} -> (fun (V25, V26, V27, V28) -> V25 end(E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E15, E16, E17} -> (fun (V29, V30, V31) -> V29 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E12, E13, E14} -> (fun (V32, V33, V34) -> ((V33('erased'))({'Idris.Builtin.MkPair', V23, V24})) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E46, E47, E48, E49} -> (fun (V40, V41, V42, V43) -> V40 end(E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E22, E23, E24} -> (fun (V44, V45, V46) -> ((((V45('erased'))('erased'))((V37(V39))))(fun (V47) -> case V47 of {'Idris.Builtin.MkPair', E25, E26} -> (fun (V48, V49) -> case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E42, E43, E44, E45} -> (fun (V50, V51, V52, V53) -> V50 end(E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E27, E28, E29} -> (fun (V54, V55, V56) -> ((((V55('erased'))('erased'))((V38(V49))))(fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V58, V59) -> case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E38, E39, E40, E41} -> (fun (V60, V61, V62, V63) -> V60 end(E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E35, E36, E37} -> (fun (V64, V65, V66) -> V64 end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E32, E33, E34} -> (fun (V67, V68, V69) -> ((V68('erased'))({'Idris.Builtin.MkPair', (V48(V58)), V59})) end(E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E55, E56, E57, E58} -> (fun (V75, V76, V77, V78) -> V75 end(E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E50, E51, E52} -> (fun (V79, V80, V81) -> ((((V80('erased'))('erased'))((V72(V74))))(fun (V82) -> case V82 of {'Idris.Builtin.MkPair', E53, E54} -> (fun (V83, V84) -> ((V73(V83))(V84)) end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V85) -> fun (V86) -> fun (V87) -> case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E64, E65, E66, E67} -> (fun (V88, V89, V90, V91) -> V88 end(E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E59, E60, E61} -> (fun (V92, V93, V94) -> ((((V93('erased'))('erased'))((V86(V87))))(fun (V95) -> case V95 of {'Idris.Builtin.MkPair', E62, E63} -> (fun (V96, V97) -> (V96(V97)) end(E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}, fun (V98) -> case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E78, E79, E80, E81} -> (fun (V99, V100, V101, V102) -> V99 end(E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E75, E76, E77} -> (fun (V103, V104, V105) -> V103 end(E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E68, E69, E70} -> (fun (V106, V107, V108) -> ((((V106('erased'))('erased'))(fun (V113) -> {'Idris.Builtin.MkPair', V113, V98} end))(case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E71, E72, E73, E74} -> (fun (V109, V110, V111, V112) -> V110 end(E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V114) -> fun (V115) -> case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E92, E93, E94, E95} -> (fun (V116, V117, V118, V119) -> V116 end(E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E89, E90, E91} -> (fun (V120, V121, V122) -> V120 end(E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E82, E83, E84} -> (fun (V123, V124, V125) -> ((((V123('erased'))('erased'))(fun (V130) -> {'Idris.Builtin.MkPair', V130, V115} end))(case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E85, E86, E87, E88} -> (fun (V126, V127, V128, V129) -> (V128(V114)) end(E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V131) -> fun (V132) -> fun (V133) -> case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E106, E107, E108, E109} -> (fun (V134, V135, V136, V137) -> V134 end(E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E103, E104, E105} -> (fun (V138, V139, V140) -> V138 end(E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E96, E97, E98} -> (fun (V141, V142, V143) -> ((((V141('erased'))('erased'))(fun (V148) -> {'Idris.Builtin.MkPair', V148, V133} end))(case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E99, E100, E101, E102} -> (fun (V144, V145, V146, V147) -> ((V147('erased'))(V132)) end(E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'dn--un--__Impl_MonadState_$s_((ReaderT $r) $m)'(V0, V1, V2, V3) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--map_Functor_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E6, E7, E8, E9} -> (fun (V9, V10, V11, V12) -> V9 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V13, V14, V15) -> V13 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V16, V17, V18) -> V16 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V7, V8)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--pure_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E13, E14, E15, E16} -> (fun (V22, V23, V24, V25) -> V22 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E10, E11, E12} -> (fun (V26, V27, V28) -> V26 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V20, V21)) end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E20, E21, E22, E23} -> (fun (V34, V35, V36, V37) -> V34 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V38, V39, V40) -> V38 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V31, V32, V33)) end end end end end}, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un-->>=_Monad_((ReaderT $stateType) $m)'('erased', 'erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E24, E25, E26, E27} -> (fun (V46, V47, V48, V49) -> V46 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43, V44, V45)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--join_Monad_((ReaderT $stateType) $m)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E28, E29, E30, E31} -> (fun (V53, V54, V55, V56) -> V53 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V51, V52)) end end end}, fun (V57) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E32, E33, E34, E35} -> (fun (V58, V59, V60, V61) -> V58 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E36, E37, E38, E39} -> (fun (V62, V63, V64, V65) -> V63 end(E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V57)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E40, E41, E42, E43} -> (fun (V68, V69, V70, V71) -> V68 end(E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E44, E45, E46, E47} -> (fun (V72, V73, V74, V75) -> (V74(V66)) end(E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V67)) end end, fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Control.Monad.Reader.Reader':'dn--un--lift_MonadTrans_(ReaderT $stateType)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E48, E49, E50, E51} -> (fun (V79, V80, V81, V82) -> V79 end(E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E52, E53, E54, E55} -> (fun (V83, V84, V85, V86) -> ((V86('erased'))(V77)) end(E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V78)) end end end}.
'dn--un--__Impl_MonadState_$s_((EitherT $e) $m)'(V0, V1, V2, V3) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--map_Functor_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> V8 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V12, V13, V14) -> V12 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V15, V16, V17) -> V15 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V7)) end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--pure_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E13, E14, E15, E16} -> (fun (V20, V21, V22, V23) -> V20 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E10, E11, E12} -> (fun (V24, V25, V26) -> V24 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V19)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--<*>_Applicative_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E20, E21, E22, E23} -> (fun (V31, V32, V33, V34) -> V31 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V35, V36, V37) -> V35 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29, V30)) end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un-->>=_Monad_((EitherT $e) $m)'('erased', 'erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E24, E25, E26, E27} -> (fun (V42, V43, V44, V45) -> V42 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V40, V41)) end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--join_Monad_((EitherT $e) $m)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E28, E29, E30, E31} -> (fun (V48, V49, V50, V51) -> V48 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V47)) end end}, ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E32, E33, E34, E35} -> (fun (V52, V53, V54, V55) -> V52 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E36, E37, E38, E39} -> (fun (V56, V57, V58, V59) -> V57 end(E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun (V60) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E40, E41, E42, E43} -> (fun (V61, V62, V63, V64) -> V61 end(E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E44, E45, E46, E47} -> (fun (V65, V66, V67, V68) -> (V67(V60)) end(E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Control.Monad.Error.Either':'dn--un--lift_MonadTrans_(EitherT $e)'('erased', 'erased', 'erased', case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E48, E49, E50, E51} -> (fun (V71, V72, V73, V74) -> V71 end(E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E52, E53, E54, E55} -> (fun (V75, V76, V77, V78) -> ((V78('erased'))(V70)) end(E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end}.
'dn--un--__Impl_MonadState_$s_((((RWST $r) $w) $s) $m)'(V0, V1, V2, V3, V4) -> {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V12, V13, V14) -> V12 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V15, V16, V17) -> V15 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V21, V22) -> {'Idris.Builtin.MkPair', (V7(V19)), {'Idris.Builtin.MkPair', V21, V22}} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (((V8(V9))(V10))(V11)))) end end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E13, E14, E15} -> (fun (V28, V29, V30) -> V28 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E10, E11, E12} -> (fun (V31, V32, V33) -> ((V32('erased'))({'Idris.Builtin.MkPair', V24, {'Idris.Builtin.MkPair', V26, V27}})) end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E16, E17, E18} -> (fun (V41, V42, V43) -> ((((V42('erased'))('erased'))((((V36(V38))(V39))(V40))))(fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E19, E20} -> (fun (V45, V46) -> case V46 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V47, V48) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E23, E24, E25} -> (fun (V49, V50, V51) -> ((((V50('erased'))('erased'))((((V37(V38))(V47))(V48))))(fun (V52) -> case V52 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V53, V54) -> case V54 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V55, V56) -> case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E33, E34, E35} -> (fun (V57, V58, V59) -> V57 end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E30, E31, E32} -> (fun (V60, V61, V62) -> ((V61('erased'))({'Idris.Builtin.MkPair', (V45(V53)), {'Idris.Builtin.MkPair', V55, V56}})) end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end}, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E36, E37, E38} -> (fun (V70, V71, V72) -> ((((V71('erased'))('erased'))((((V65(V67))(V68))(V69))))(fun (V73) -> case V73 of {'Idris.Builtin.MkPair', E39, E40} -> (fun (V74, V75) -> case V75 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V76, V77) -> ((((V66(V74))(V67))(V76))(V77)) end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E43, E44, E45} -> (fun (V83, V84, V85) -> ((((V84('erased'))('erased'))((((V79(V80))(V81))(V82))))(fun (V86) -> case V86 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V87, V88) -> case V88 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V89, V90) -> (((V87(V80))(V89))(V90)) end(E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end}, fun (V91) -> fun (V92) -> fun (V93) -> case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E53, E54, E55} -> (fun (V94, V95, V96) -> V94 end(E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E50, E51, E52} -> (fun (V97, V98, V99) -> ((V98('erased'))({'Idris.Builtin.MkPair', V92, {'Idris.Builtin.MkPair', V92, V93}})) end(E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> case case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E59, E60, E61} -> (fun (V104, V105, V106) -> V104 end(E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E56, E57, E58} -> (fun (V107, V108, V109) -> ((V108('erased'))({'Idris.Builtin.MkPair', {'Idris.Builtin.MkUnit'}, {'Idris.Builtin.MkPair', V100, V103}})) end(E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('case--state-2147'('erased', 'erased', 'erased', 'erased', 'erased', V4, V111, V112, V113, V114, (V111(V113)))) end end end end end}.
'un--state'(V0, V1, V2, V3) -> case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> fun (V8) -> ((V7('erased'))(V8)) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--put'(V0, V1, V2) -> case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> (V5(V7)) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--modify'(V0, V1, V2, V3) -> case case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E11, E12, E13, E14} -> (fun (V4, V5, V6, V7) -> V4 end(E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))(case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E3, E4, E5, E6} -> (fun (V16, V17, V18, V19) -> V17 end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V11) -> case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E7, E8, E9, E10} -> (fun (V12, V13, V14, V15) -> (V14((V3(V11)))) end(E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--gets'(V0, V1, V2, V3, V4) -> case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E17, E18, E19, E20} -> (fun (V5, V6, V7, V8) -> V5 end(E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V9, V10, V11) -> ((((V10('erased'))('erased'))(case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E3, E4, E5, E6} -> (fun (V23, V24, V25, V26) -> V24 end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V12) -> case case case V3 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E13, E14, E15, E16} -> (fun (V13, V14, V15, V16) -> V13 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E10, E11, E12} -> (fun (V17, V18, V19) -> V17 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E7, E8, E9} -> (fun (V20, V21, V22) -> ((V21('erased'))((V4(V12)))) end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--get'(V0, V1, V2) -> case V2 of {'Idris.Control.Monad.State.Interface.dn--un--__mkMonadState', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> V4 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
