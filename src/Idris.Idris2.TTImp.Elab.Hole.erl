-module('Idris.Idris2.TTImp.Elab.Hole').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkHole-7270'/19,
  'case--checkHole-7223'/18,
  'case--case block in checkHole-7046'/18,
  'case--checkHole-6997'/15,
  'case--case block in mkPrecise-6916'/10,
  'case--mkPrecise-6893'/8,
  'un--mkPrecise'/3,
  'un--checkHole'/12
]).
'case--case block in checkHole-7270'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V19, V20) -> fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V11, V10, {'Idris.Core.Name.Resolved', V19}, V21))), case V22 of {'Idris.Prelude.Types.Left', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V11, V15, V21))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V8, V15, V21))), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V20, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, V14))}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkHole-7223'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V18) -> begin (V19 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V11, V9, V3, V7, V13, V15, V14, V18))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V22, V23) -> begin (V24 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V11, V10, {'Idris.Core.Name.Resolved', V22}, V18))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V11, V15, V18))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V8, V15, V18))), case V30 of {'Idris.Prelude.Types.Left', E10} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V23, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, V14))}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V33) -> begin (V34 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), <<" already defined"/utf8>>)) end))(V33))), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V3, V15}, V33)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in checkHole-7046'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> fun (V20) -> begin (V24 = begin (V21 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V1))(V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> (('un--mkPrecise'('erased', V11, V23))(V20)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V11, V10, {'Idris.Core.Name.Resolved', V18}, V20))), case V27 of {'Idris.Prelude.Types.Left', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V11, V12, V20))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V8, V12, V20))), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V19, V1}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkHole-6997'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V1))(V15))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V4))), begin (V20 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V11, V9, V3, V7, V19, V12, V18, V15))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V23, V24) -> begin (V28 = begin (V25 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V1))(V15))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> (('un--mkPrecise'('erased', V11, V27))(V15)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V28 of {'Idris.Prelude.Types.Left', E10} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V11, V10, {'Idris.Core.Name.Resolved', V23}, V15))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V11, V12, V15))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V8, V12, V15))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V24, V1}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)), <<" already defined"/utf8>>)) end))(V40))), case V41 of {'Idris.Prelude.Types.Left', E0} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V43) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V3, V12}, V40)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in mkPrecise-6916'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Core.Context.MkHoleFlags', E0, E1} -> (fun (V10, V11) -> {'Idris.Core.Context.MkHoleFlags', V10, 0} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkPrecise-6893'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.Hole', E0, E1} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', V8, case V9 of {'Idris.Core.Context.MkHoleFlags', E2, E3} -> (fun (V10, V11) -> {'Idris.Core.Context.MkHoleFlags', V10, 0} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--mkPrecise'(V0, V1, V2) -> case V2 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V3, V4, V5) -> case V4 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V6, V7, V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V1, {'Idris.Core.Name.Resolved', V7}, fun (V10) -> case V10 of {'Idris.Core.Context.Hole', E6, E7} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', V11, case V12 of {'Idris.Core.Context.MkHoleFlags', E8, E9} -> (fun (V13, V14) -> {'Idris.Core.Context.MkHoleFlags', V13, 0} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V9)) end end(E3, E4, E5)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--checkHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E53} -> (fun (V12) -> fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, {'Idris.Core.Name.UN', V10}))(V13))), case V14 of {'Idris.Prelude.Types.Left', E54} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E56} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V20) -> begin (V48 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, case V20 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V21 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V48 of {'Idris.Prelude.Types.Left', E85} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V50) -> case V50 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V51 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V12))(V13))), case V51 of {'Idris.Prelude.Types.Left', E89} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V8))), begin (V55 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V1, V3, V9, V5, V54, V16, V53, V13))), case V55 of {'Idris.Prelude.Types.Left', E91} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E93, E94} -> (fun (V58, V59) -> begin (V63 = begin (V60 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V12))(V13))), case V60 of {'Idris.Prelude.Types.Left', E95} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V62) -> (('un--mkPrecise'('erased', V1, V62))(V13)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V63 of {'Idris.Prelude.Types.Left', E97} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V1, V2, {'Idris.Core.Name.Resolved', V58}, V13))), case V66 of {'Idris.Prelude.Types.Left', E99} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, V16, V13))), case V69 of {'Idris.Prelude.Types.Left', E101} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V4, V16, V13))), case V72 of {'Idris.Prelude.Types.Left', E103} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V59, V12}} end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V75 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)), <<" already defined"/utf8>>)) end))(V13))), case V75 of {'Idris.Prelude.Types.Left', E87} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V77) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V9, V16}, V13)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53)); _ -> fun (V78) -> begin (V79 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"type_of_"/utf8>>, V10)), V78))), case V79 of {'Idris.Prelude.Types.Left', E0} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Core.Env':'un--letToLam'('erased', V8))), begin (V87 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V83) -> fun (V84) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V83, V84)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V85) -> fun (V86) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V85, V86)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V82, V81, {'Idris.Core.TT.TType', V9}, V78))), case V87 of {'Idris.Prelude.Types.Left', E2} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V89) -> begin (V90 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, {'Idris.Core.Name.UN', V10}))(V78))), case V90 of {'Idris.Prelude.Types.Left', E4} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V92) -> begin (V94 = begin (V93 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E6} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V96) -> begin (V100 = begin (V97 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V96, V82, V89))(V78))), case V97 of {'Idris.Prelude.Types.Left', E8} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V99) -> (('un--mkPrecise'('erased', V1, V99))(V78)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V100 of {'Idris.Prelude.Types.Left', E10} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V102) -> begin (V130 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V92, case V96 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> V103 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V78))), case V130 of {'Idris.Prelude.Types.Left', E39} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V132) -> case V132 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V133 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVarI'(V0, V1, V3, V9, V5, V82, V92, V89, V78))), case V133 of {'Idris.Prelude.Types.Left', E43} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V135) -> case V135 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V136, V137) -> begin (V138 = ('Idris.Idris2.Core.Metadata':'un--withCurrentLHS'(V1, V2, {'Idris.Core.Name.Resolved', V136}, V78))), case V138 of {'Idris.Prelude.Types.Left', E47} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V140) -> begin (V141 = ('Idris.Idris2.Core.Context':'un--addUserHole'(V1, V92, V78))), case V141 of {'Idris.Prelude.Types.Left', E49} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V143) -> begin (V144 = ('Idris.Idris2.TTImp.Elab.Check':'un--saveHole'('erased', V4, V92, V78))), case V144 of {'Idris.Prelude.Types.Left', E51} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V146) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V137, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V89))}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V147 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.hole"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V92)), <<" already defined"/utf8>>)) end))(V78))), case V147 of {'Idris.Prelude.Types.Left', E41} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V149) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V9, V92}, V78)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
