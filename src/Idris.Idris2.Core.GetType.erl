-module('Idris.Idris2.Core.GetType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--chk-4156'/8,
  'case--chk-4007'/8,
  'case--chk-3895'/9,
  'case--chk-3835'/8,
  'un--getType'/4,
  'un--discharge'/6,
  'un--chkMeta'/6,
  'un--chkConstant'/3,
  'un--chkBinder'/4,
  'un--chk'/4
]).
'case--chk-4156'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NDelayed', E0, E1, E2} -> (fun (V8, V9, V10) -> fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V5, V0, V15, V4, V10))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Not a delayed type"/utf8>>}, V16)) end end.
'case--chk-4007'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E2, E3, E4, E5} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V20) -> begin (V21 = (('un--chk'(V0, V5, V4, V1))(V16))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V24 = (((V11(V20))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, V1))))(V16))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V5, V0, V20, V4, V26))} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10, E11)); _ -> fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V6))(V27))), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V3, V4, V30}, V27)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3, E4, E5)); _ -> fun (V31) -> begin (V32 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V6))(V31))), case V32 of {'Idris.Prelude.Types.Left', E0} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V3, V4, V34}, V31)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--chk-3895'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Normalise':'un--nf'(V6, V0, V7, V5, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V9))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> (('un--chkMeta'(V0, V6, V4, V5, V13, V1))(V10)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V6, V4, V3, V14)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--chk-3835'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V8))))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V5, V3, V1, V10)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getType'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, V3)).
'un--discharge'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.Pi', V6, V7, V8, V9}, V5} end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.Let', V10, V11, V12, V13}, V5} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V14, V15, V16, V17) -> V4 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.PVTy', V18, V19, V21}, V5} end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V22, V23, V24, V25) -> {'Idris.Core.TT.Bind', V1, V2, {'Idris.Core.TT.PLet', V22, V23, V24, V25}, V5} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V26, V27, V28) -> V4 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chkMeta'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E28} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V10, V3, V4))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V4 of {'Idris.Core.Value.NBind', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case V13 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V15, V16, V17, V18) -> case V5 of [E20 | E21] -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E22} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V25) -> begin (V26 = (('un--chk'(V0, V1, V3, V19))(V21))), case V26 of {'Idris.Prelude.Types.Left', E24} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V28) -> begin (V29 = (((V14(V25))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, V19))))(V21))), case V29 of {'Idris.Prelude.Types.Left', E26} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V31) -> (('un--chkMeta'(V0, V1, V2, V3, V31, V20))(V21)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E20, E21)); _ -> fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E16} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V36, V3, V4, V32))), case V37 of {'Idris.Prelude.Types.Left', E18} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V39}, V32)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E12, E13, E14, E15)); _ -> fun (V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E8} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V44) -> begin (V45 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V44, V3, V4, V40))), case V45 of {'Idris.Prelude.Types.Left', E10} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V47}, V40)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> fun (V48) -> begin (V50 = begin (V49 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E0} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V52, V3, V4, V48))), case V53 of {'Idris.Prelude.Types.Left', E2} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V2, V3, V55}, V48)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--chkConstant'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.I', E0} -> (fun (V3) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.IntType'}} end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V4) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.IntegerType'}} end(E1)); {'Idris.Core.TT.B8', E2} -> (fun (V5) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits8Type'}} end(E2)); {'Idris.Core.TT.B16', E3} -> (fun (V6) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits16Type'}} end(E3)); {'Idris.Core.TT.B32', E4} -> (fun (V7) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits32Type'}} end(E4)); {'Idris.Core.TT.B64', E5} -> (fun (V8) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Bits64Type'}} end(E5)); {'Idris.Core.TT.Str', E6} -> (fun (V9) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.StringType'}} end(E6)); {'Idris.Core.TT.Ch', E7} -> (fun (V10) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.CharType'}} end(E7)); {'Idris.Core.TT.Db', E8} -> (fun (V11) -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.DoubleType'}} end(E8)); {'Idris.Core.TT.WorldVal'} -> (fun () -> {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.WorldType'}} end()); _ -> {'Idris.Core.TT.TType', V1} end.
'un--chkBinder'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V3)))).
'un--chk'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--binderType'('erased', ('Idris.Idris2.Core.Env':'un--getBinder'('erased', 'erased', {'Idris.Core.TT.dn--un--__mkWeaken', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'('erased', 'erased', V13, V14)) end end end end}, V0, V6, 'erased', V2))))))} end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V15, V16, V17) -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V50 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V17, case V22 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> V23 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V50 of {'Idris.Prelude.Types.Left', E35} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V52) -> case V52 of {'Idris.Prelude.Types.Just', E37} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V53))))} end(E37)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V1, V15, V17, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E38, E39, E40, E41} -> (fun (V54, V55, V56, V57) -> fun (V58) -> begin (V60 = begin (V59 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E42} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V62) -> begin (V90 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V56}, case V62 of {'Idris.Core.Context.MkDefs', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V63 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58))), case V90 of {'Idris.Prelude.Types.Left', E71} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V92) -> case V92 of {'Idris.Prelude.Types.Just', E73} -> (fun (V93) -> begin (V94 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V62, V2, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', V93))))(V58))), case V94 of {'Idris.Prelude.Types.Left', E74} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V96) -> (('un--chkMeta'(V0, V1, V54, V2, V96, V57))(V58)) end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V1, V54, V55, V58)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E38, E39, E40, E41)); {'Idris.Core.TT.Bind', E76, E77, E78, E79} -> (fun (V97, V98, V99, V100) -> fun (V101) -> begin (V102 = (('un--chkBinder'(V0, V1, V2, V99))(V101))), case V102 of {'Idris.Prelude.Types.Left', E80} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V104) -> begin (V105 = (('un--chk'([V98 | V0], V1, {'Idris.Core.Env.::', V99, V2}, V100))(V101))), case V105 of {'Idris.Prelude.Types.Left', E82} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V107) -> begin (V108 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V104))(V101))), case V108 of {'Idris.Prelude.Types.Left', E84} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V110) -> begin (V111 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V107))(V101))), case V111 of {'Idris.Prelude.Types.Left', E86} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V113) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('un--discharge'('erased', V97, V98, V99, V110, V113))))} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E76, E77, E78, E79)); {'Idris.Core.TT.App', E88, E89, E90} -> (fun (V114, V115, V116) -> fun (V117) -> begin (V118 = (('un--chk'(V0, V1, V2, V115))(V117))), case V118 of {'Idris.Prelude.Types.Left', E91} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V120) -> begin (V121 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V120))(V117))), case V121 of {'Idris.Prelude.Types.Left', E93} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V123) -> case V123 of {'Idris.Core.Value.NBind', E97, E98, E99, E100} -> (fun (V124, V125, V126, V127) -> case V126 of {'Idris.Core.TT.Pi', E103, E104, E105, E106} -> (fun (V128, V129, V130, V131) -> begin (V133 = begin (V132 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V132} end), case V133 of {'Idris.Prelude.Types.Left', E107} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V135) -> begin (V136 = (('un--chk'(V0, V1, V2, V116))(V117))), case V136 of {'Idris.Prelude.Types.Left', E109} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V138) -> begin (V139 = (((V127(V135))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, V116))))(V117))), case V139 of {'Idris.Prelude.Types.Left', E111} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V141) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V135, V2, V141))} end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103, E104, E105, E106)); _ -> begin (V142 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V120))(V117))), case V142 of {'Idris.Prelude.Types.Left', E101} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V144) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V114, V2, V144}, V117)) end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E97, E98, E99, E100)); _ -> begin (V145 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V120))(V117))), case V145 of {'Idris.Prelude.Types.Left', E95} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V147) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.NotFunctionType', V0, V114, V2, V147}, V117)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E88, E89, E90)); {'Idris.Core.TT.As', E113, E114, E115, E116} -> (fun (V148, V149, V150, V151) -> ('un--chk'(V0, V1, V2, V151)) end(E113, E114, E115, E116)); {'Idris.Core.TT.TDelayed', E117, E118, E119} -> (fun (V152, V153, V154) -> fun (V155) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V152))} end end(E117, E118, E119)); {'Idris.Core.TT.TDelay', E120, E121, E122, E123} -> (fun (V156, V157, V158, V159) -> fun (V160) -> begin (V161 = (('un--chk'(V0, V1, V2, V159))(V160))), case V161 of {'Idris.Prelude.Types.Left', E124} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V163) -> begin (V164 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V163))(V160))), case V164 of {'Idris.Prelude.Types.Left', E126} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V166) -> begin (V168 = begin (V167 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V167} end), case V168 of {'Idris.Prelude.Types.Left', E128} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V170) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V170, V2, {'Idris.Core.Value.NDelayed', V156, V157, V166}))} end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E120, E121, E122, E123)); {'Idris.Core.TT.TForce', E130, E131, E132} -> (fun (V171, V172, V173) -> fun (V174) -> begin (V175 = (('un--chk'(V0, V1, V2, V173))(V174))), case V175 of {'Idris.Prelude.Types.Left', E133} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V177) -> begin (V178 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V177))(V174))), case V178 of {'Idris.Prelude.Types.Left', E135} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V180) -> case V180 of {'Idris.Core.Value.NDelayed', E137, E138, E139} -> (fun (V181, V182, V183) -> begin (V185 = begin (V184 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V184} end), case V185 of {'Idris.Prelude.Types.Left', E140} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V187) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V187, V2, V183))} end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137, E138, E139)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V171, <<"Not a delayed type"/utf8>>}, V174)) end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E130, E131, E132)); {'Idris.Core.TT.PrimVal', E142, E143} -> (fun (V188, V189) -> fun (V190) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('un--chkConstant'('erased', V188, V189))))} end end(E142, E143)); {'Idris.Core.TT.TType', E144} -> (fun (V191) -> fun (V192) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V191))} end end(E144)); {'Idris.Core.TT.Erased', E145, E146} -> (fun (V193, V194) -> fun (V195) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gErased'('erased', V193))} end end(E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
