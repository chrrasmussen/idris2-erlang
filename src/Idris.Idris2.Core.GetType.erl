-module('Idris.Idris2.Core.GetType').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--getType'/4,
  'un--discharge'/5,
  'un--chkMeta'/6,
  'un--chkConstant'/2,
  'un--chkBinder'/4,
  'un--chk'/4
]).
'un--getType'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, V3)).
'un--discharge'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> {'Idris.Core.TT.Bind', V0, V1, {'Idris.Core.TT.Pi', V5, V6, V7, V8}, V4} end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> {'Idris.Core.TT.Bind', V0, V1, {'Idris.Core.TT.Let', V9, V10, V11, V12}, V4} end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V13, V14, V15, V16) -> V3 end(E8, E9, E10, E11)); {'Idris.Core.TT.PVar', E12, E13, E14, E15} -> (fun (V17, V18, V19, V20) -> {'Idris.Core.TT.Bind', V0, V1, {'Idris.Core.TT.PVTy', V17, V18, V20}, V4} end(E12, E13, E14, E15)); {'Idris.Core.TT.PLet', E16, E17, E18, E19} -> (fun (V21, V22, V23, V24) -> {'Idris.Core.TT.Bind', V0, V1, {'Idris.Core.TT.PLet', V21, V22, V23, V24}, V4} end(E16, E17, E18, E19)); {'Idris.Core.TT.PVTy', E20, E21, E22} -> (fun (V25, V26, V27) -> V3 end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chkMeta'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E28} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V10, V3, V4))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V4 of {'Idris.Core.Value.NBind', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> fun (V15) -> case V13 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V16, V17, V18, V19) -> case V5 of [E20 | E21] -> (fun (V20, V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E22} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V25) -> begin (V26 = (('un--chk'(V0, V1, V3, V20))(V15))), case V26 of {'Idris.Prelude.Types.Left', E24} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V28) -> begin (V29 = (((V14(V25))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, V20))))(V15))), case V29 of {'Idris.Prelude.Types.Left', E26} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V31) -> (('un--chkMeta'(V0, V1, V2, V3, V31, V21))(V15)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> begin (V33 = begin (V32 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V35, V3, V4, V15))), case V36 of {'Idris.Prelude.Types.Left', E18} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V2, V3, V38}, V15)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15)); _ -> begin (V40 = begin (V39 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E8} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V42, V3, V4, V15))), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V2, V3, V45}, V15)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> fun (V46) -> begin (V48 = begin (V47 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E0} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V50) -> begin (V51 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V50, V3, V4, V46))), case V51 of {'Idris.Prelude.Types.Left', E2} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V2, V3, V53}, V46)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--chkConstant'(V0, V1) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.IntType'}} end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V3) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int8Type'}} end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V4) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int16Type'}} end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V5) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int32Type'}} end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V6) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Int64Type'}} end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V7) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.IntegerType'}} end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V8) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits8Type'}} end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V9) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits16Type'}} end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V10) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits32Type'}} end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V11) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.Bits64Type'}} end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V12) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.StringType'}} end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V13) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.CharType'}} end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V14) -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.DoubleType'}} end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> {'Idris.Core.TT.PrimVal', V0, {'Idris.Core.TT.WorldType'}} end()); _ -> {'Idris.Core.TT.TType', V0} end.
'un--chkBinder'(V0, V1, V2, V3) -> ('un--chk'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'(V3)))).
'un--chk'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--binderType'(('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V13, V14)) end end end end}, V0, V6, V2))))))} end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V15, V16, V17) -> fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V51 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V17, case V22 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V23 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V51 of {'Idris.Prelude.Types.Left', E36} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V53) -> case V53 of {'Idris.Prelude.Types.Just', E38} -> (fun (V54) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('Idris.Idris2.Core.TT':'un--embed'(V54))))} end(E38)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V15, V17, V18)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E39, E40, E41, E42} -> (fun (V55, V56, V57, V58) -> fun (V59) -> begin (V61 = begin (V60 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E43} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V63) -> begin (V92 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V57}, case V63 of {'Idris.Core.Context.MkDefs', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V64 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V59))), case V92 of {'Idris.Prelude.Types.Left', E73} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V94) -> case V94 of {'Idris.Prelude.Types.Just', E75} -> (fun (V95) -> begin (V96 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V63, V2, ('Idris.Idris2.Core.TT':'un--embed'(V95))))(V59))), case V96 of {'Idris.Prelude.Types.Left', E76} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V98) -> (('un--chkMeta'(V0, V1, V55, V2, V98, V58))(V59)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V55, V56, V59)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39, E40, E41, E42)); {'Idris.Core.TT.Bind', E78, E79, E80, E81} -> (fun (V99, V100, V101, V102) -> fun (V103) -> begin (V104 = (('un--chkBinder'(V0, V1, V2, V101))(V103))), case V104 of {'Idris.Prelude.Types.Left', E82} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V106) -> begin (V107 = (('un--chk'([V100 | V0], V1, {'Idris.Core.Env.::', V101, V2}, V102))(V103))), case V107 of {'Idris.Prelude.Types.Left', E84} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V109) -> begin (V110 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V106))(V103))), case V110 of {'Idris.Prelude.Types.Left', E86} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V112) -> begin (V113 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V109))(V103))), case V113 of {'Idris.Prelude.Types.Left', E88} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V115) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('un--discharge'(V99, V100, V101, V112, V115))))} end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E78, E79, E80, E81)); {'Idris.Core.TT.App', E90, E91, E92} -> (fun (V116, V117, V118) -> fun (V119) -> begin (V120 = (('un--chk'(V0, V1, V2, V117))(V119))), case V120 of {'Idris.Prelude.Types.Left', E93} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V122) -> begin (V123 = (('Idris.Idris2.Core.Normalise':'un--getNF'(V1, V122))(V119))), case V123 of {'Idris.Prelude.Types.Left', E95} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V125) -> case V125 of {'Idris.Core.Value.NBind', E99, E100, E101, E102} -> (fun (V126, V127, V128, V129) -> case V128 of {'Idris.Core.TT.Pi', E105, E106, E107, E108} -> (fun (V130, V131, V132, V133) -> begin (V135 = begin (V134 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V134} end), case V135 of {'Idris.Prelude.Types.Left', E109} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V137) -> begin (V138 = (('un--chk'(V0, V1, V2, V118))(V119))), case V138 of {'Idris.Prelude.Types.Left', E111} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V140) -> begin (V141 = (((V129(V137))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, V118))))(V119))), case V141 of {'Idris.Prelude.Types.Left', E113} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V143) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V137, V2, V143))} end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105, E106, E107, E108)); _ -> begin (V144 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V122))(V119))), case V144 of {'Idris.Prelude.Types.Left', E103} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V146) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V116, V2, V146}, V119)) end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E99, E100, E101, E102)); _ -> begin (V147 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V122))(V119))), case V147 of {'Idris.Prelude.Types.Left', E97} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V149) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.NotFunctionType', V0, V116, V2, V149}, V119)) end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E90, E91, E92)); {'Idris.Core.TT.As', E115, E116, E117, E118} -> (fun (V150, V151, V152, V153) -> ('un--chk'(V0, V1, V2, V153)) end(E115, E116, E117, E118)); {'Idris.Core.TT.TDelayed', E119, E120, E121} -> (fun (V154, V155, V156) -> fun (V157) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gType'(V154))} end end(E119, E120, E121)); {'Idris.Core.TT.TDelay', E122, E123, E124, E125} -> (fun (V158, V159, V160, V161) -> fun (V162) -> begin (V163 = (('un--chk'(V0, V1, V2, V161))(V162))), case V163 of {'Idris.Prelude.Types.Left', E126} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V165) -> begin (V166 = (('Idris.Idris2.Core.Normalise':'un--getNF'(V1, V165))(V162))), case V166 of {'Idris.Prelude.Types.Left', E128} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V168) -> begin (V170 = begin (V169 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V169} end), case V170 of {'Idris.Prelude.Types.Left', E130} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V172) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V172, V2, {'Idris.Core.Value.NDelayed', V158, V159, V168}))} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E122, E123, E124, E125)); {'Idris.Core.TT.TForce', E132, E133, E134} -> (fun (V173, V174, V175) -> fun (V176) -> begin (V177 = (('un--chk'(V0, V1, V2, V175))(V176))), case V177 of {'Idris.Prelude.Types.Left', E135} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V179) -> begin (V180 = (('Idris.Idris2.Core.Normalise':'un--getNF'(V1, V179))(V176))), case V180 of {'Idris.Prelude.Types.Left', E137} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V182) -> case V182 of {'Idris.Core.Value.NDelayed', E139, E140, E141} -> (fun (V183, V184, V185) -> begin (V187 = begin (V186 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V186} end), case V187 of {'Idris.Prelude.Types.Left', E142} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V189) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V189, V2, V185))} end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139, E140, E141)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V173, <<"Not a delayed type"/utf8>>}, V176)) end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E132, E133, E134)); {'Idris.Core.TT.PrimVal', E144, E145} -> (fun (V190, V191) -> fun (V192) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V2, ('un--chkConstant'(V190, V191))))} end end(E144, E145)); {'Idris.Core.TT.TType', E146} -> (fun (V193) -> fun (V194) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gType'(V193))} end end(E146)); {'Idris.Core.TT.Erased', E147, E148} -> (fun (V195, V196) -> fun (V197) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gErased'(V195))} end end(E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
