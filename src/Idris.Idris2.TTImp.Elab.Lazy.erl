-module('Idris.Idris2.TTImp.Elab.Lazy').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in checkForce-7352'/18,
  'case--checkForce-7309'/15,
  'case--case block in checkDelay-7121'/21,
  'case--checkDelay-7061'/16,
  'case--checkDelay-6979'/14,
  'case--checkDelayed-6905'/14,
  'nested--10428-6958--in--un--delayError'/13,
  'un--checkForce'/13,
  'un--checkDelayed'/14,
  'un--checkDelay'/13
]).
'case--case block in checkForce-7352'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Core.Value.NDelayed', E0, E1, E2} -> (fun (V18, V19, V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V3, V19, V14}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V11, V0, V12, V4, V20))}} end end(E0, E1, E2)); _ -> fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Forcing a non-delayed type"/utf8>>}, V22)) end end.
'case--checkForce-7309'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V16))(V17))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> case V20 of {'Idris.Core.Value.NDelayed', E4, E5, E6} -> (fun (V21, V22, V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V3, V22, V15}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V11, V0, V12, V4, V23))}} end(E4, E5, E6)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Forcing a non-delayed type"/utf8>>}, V17)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkDelay-7121'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V22))(V23))), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V22))(V23))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V3, V17, V29, V21}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V11, V0, V19, V4, {'Idris.Core.Value.NDelayed', V3, V17, V26}))}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkDelay-7061'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.Value.NDelayed', E2, E3, E4} -> (fun (V16, V17, V18) -> fun (V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E5} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V11, V0, V23, V4, V18))}))(V19))), case V24 of {'Idris.Prelude.Types.Left', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V27, V28) -> begin (V29 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V28))(V19))), case V29 of {'Idris.Prelude.Types.Left', E11} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V31) -> begin (V32 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V28))(V19))), case V32 of {'Idris.Prelude.Types.Left', E13} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V3, V17, V34, V27}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V11, V0, V23, V4, {'Idris.Core.Value.NDelayed', V3, V17, V31}))}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); _ -> fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V11, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expected delay type"/utf8>> end, V4, V15, V35))), case V36 of {'Idris.Prelude.Types.Left', E0} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Can\x{27}t infer delay type"/utf8>>}, V35)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--checkDelay-6979'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V14) -> ('Idris.Idris2.Core.Unify':'un--inLHS'()) end(E0)); _ -> ('Idris.Idris2.Core.Unify':'un--inTerm'()) end.
'case--checkDelayed-6905'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelayed', V4, V3, V14}, V15}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10428-6958--in--un--delayError'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Core.GenericMsg', E0, E1} -> (fun (V13, V14) -> 0 end(E0, E1)); _ -> 1 end.
'un--checkForce'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V23 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V18) -> fun (V19) -> begin (V20 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V18))(V19))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V16, V8, {'Idris.Core.Value.NDelayed', V9, {'Idris.Core.TT.LUnknown'}, V22}))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V11))(V12))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> begin (V26 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V25))(V12))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V29, V30) -> begin (V31 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V30))(V12))), case V31 of {'Idris.Prelude.Types.Left', E10} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V33) -> case V33 of {'Idris.Core.Value.NDelayed', E12, E13, E14} -> (fun (V34, V35, V36) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TForce', V9, V35, V29}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V16, V8, V36))}} end(E12, E13, E14)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V9, <<"Forcing a non-delayed type"/utf8>>}, V12)) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkDelayed'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V14 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V9))}))(V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V17, V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelayed', V9, V10, V17}, V18}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkDelay'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V26 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V13) -> begin (V14 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"delayTy"/utf8>>, V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V21 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V16, {'Idris.Core.TT.TType', V9}, V13))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V23))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', V24} end end end, V11))(V12))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> begin (V35 = ('case--checkDelay-6979'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V28, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E6, E7, E8, E9, E10, E11} -> (fun (V29, V30, V31, V32, V33, V34) -> V29 end(E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V36 = ('Idris.Idris2.Core.Unify':'un--solveConstraints'(V1, V3, V35, {'Idris.Core.Unify.Normal'}, V12))), case V36 of {'Idris.Prelude.Types.Left', E12} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V38) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayOnFailure'(V0, V1, V2, V3, V4, V9, V5, V8, V28, fun (V39) -> ('nested--10428-6958--in--un--delayError'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V39)) end, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V40) -> fun (V41) -> begin (V42 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V28))(V41))), case V42 of {'Idris.Prelude.Types.Left', E14} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V44) -> case V44 of {'Idris.Core.Value.NDelayed', E18, E19, E20} -> (fun (V45, V46, V47) -> begin (V49 = begin (V48 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E21} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V51) -> begin (V52 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V51, V8, V47))}))(V41))), case V52 of {'Idris.Prelude.Types.Left', E23} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V54) -> case V54 of {'Idris.Builtin.MkPair', E25, E26} -> (fun (V55, V56) -> begin (V57 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V56))(V41))), case V57 of {'Idris.Prelude.Types.Left', E27} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V59) -> begin (V60 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V56))(V41))), case V60 of {'Idris.Prelude.Types.Left', E29} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.TDelay', V9, V46, V62, V55}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V51, V8, {'Idris.Core.Value.NDelayed', V9, V46, V59}))}} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19, E20)); _ -> begin (V63 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.delay"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expected delay type"/utf8>> end, V8, V44, V41))), case V63 of {'Idris.Prelude.Types.Left', E16} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V65) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V9, <<"Can\x{27}t infer delay type"/utf8>>}, V41)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V12)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
