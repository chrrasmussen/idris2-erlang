-module('Idris.Idris2.Compiler.LambdaLift').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in lambdaLift-2026'/7,
  'case--lambdaLift-2012'/5,
  'case--lambdaLiftDef-1974'/4,
  'case--lambdaLiftDef-1914'/5,
  'case--liftExp-1674'/7,
  'case--liftExp-1627'/7,
  'case--makeLam-1362'/10,
  'case--makeLam,allVars-1294'/10,
  'case--genName-1195'/3,
  'nested--7685-1552--in--un--traverseArgs'/10,
  'nested--7574-1131--in--un--mkName'/3,
  'nested--7685-1781--in--un--liftConstAlt'/10,
  'nested--7685-1726--in--un--liftConAlt'/10,
  'nested--7680-1256--in--un--allVars'/9,
  'nested--7680-1255--in--un--allPrfs'/8,
  'dn--un--show_Show_LiftedDef'/1,
  'dn--un--show_Show_(LiftedConstAlt $vs)'/2,
  'dn--un--show_Show_(LiftedConAlt $vs)'/2,
  'dn--un--show_Show_(Lifted $vs)'/2,
  'dn--un--showPrec_Show_LiftedDef'/2,
  'dn--un--showPrec_Show_(LiftedConstAlt $vs)'/3,
  'dn--un--showPrec_Show_(LiftedConAlt $vs)'/3,
  'dn--un--showPrec_Show_(Lifted $vs)'/3,
  'dn--un--__Impl_Show_LiftedDef'/0,
  'dn--un--__Impl_Show_(LiftedConstAlt $vs)'/1,
  'dn--un--__Impl_Show_(LiftedConAlt $vs)'/1,
  'dn--un--__Impl_Show_(Lifted $vs)'/1,
  'un--unload'/5,
  'un--showLazy'/1,
  'un--makeLam'/7,
  'un--liftExp'/5,
  'un--liftBody'/5,
  'un--lambdaLiftDef'/3,
  'un--lambdaLift'/4,
  'un--genName'/2
]).
'case--case block in lambdaLift-2026'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> ('un--lambdaLiftDef'(V1, V0, V7)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lambdaLift-2012'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> begin (V6 = {'Idris.Prelude.Types.Just', V5}), ('case--case block in lambdaLift-2026'(V0, V1, V2, V3, V5, V6, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lambdaLiftDef-1974'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLError', V4}} | V5]} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lambdaLiftDef-1914'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V2, {'Idris.Compiler.LambdaLift.MkLFun', V0, [], V5}} | V6]} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--liftExp-1674'(V0, V1, V2, V3, V4, V5, V6) -> case V1 of 0 -> ('un--liftExp'(V0, V6, V1, {'Idris.Prelude.Types.Just', V4}, V3)); 1 -> ('un--liftExp'(V0, V6, V1, {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CompileExpr.CLam', V5, {'Idris.Core.Name.MN', <<"act"/utf8>>, 0}, ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'('erased', 'erased', V3))})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--liftExp-1627'(V0, V1, V2, V3, V4, V5, V6) -> case V1 of 0 -> ('un--liftExp'(V0, V6, V1, {'Idris.Prelude.Types.Nothing'}, V3)); 1 -> ('un--liftExp'(V0, V6, V1, {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CompileExpr.CApp', V5, V3, [{'Idris.Core.CompileExpr.CErased', V5} | []]})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeLam-1362'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Compiler.LambdaLift.MkLDefs', E0, E1, E2} -> (fun (V10, V11, V12) -> {'Idris.Compiler.LambdaLift.MkLDefs', V10, [{'Idris.Builtin.MkPair', V8, {'Idris.Compiler.LambdaLift.MkLFun', V3, V2, V7}} | V11], V12} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeLam,allVars-1294'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> {'Idris.Compiler.LambdaLift.LLocal', V9, V8}.
'case--genName-1195'(V0, V1, V2) -> case V1 of {'Idris.Compiler.LambdaLift.MkLDefs', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Compiler.LambdaLift.MkLDefs', V3, V4, ((V2 + 1) rem 9223372036854775808)} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7685-1552--in--un--traverseArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = (('un--liftExp'(V0, V7, V1, {'Idris.Prelude.Types.Nothing'}, V11))(V13))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = (('nested--7685-1552--in--un--traverseArgs'(V0, V1, V2, V3, V4, V5, V6, V7, 'erased', V12))(V13))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', V16, V19}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7574-1131--in--un--mkName'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.Name.NS', V3, ('nested--7574-1131--in--un--mkName'(V0, V4, V2))} end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V5) -> {'Idris.Core.Name.MN', V5, V2} end(E2)); {'Idris.Core.Name.DN', E3, E4} -> (fun (V6, V7) -> ('nested--7574-1131--in--un--mkName'(V0, V7, V2)) end(E3, E4)); {'Idris.Core.Name.CaseBlock', E5, E6} -> (fun (V8, V9) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case block in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)), <<")"/utf8>>)))))))), V2} end(E5, E6)); {'Idris.Core.Name.WithBlock', E7, E8} -> (fun (V10, V11) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with block in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11)), <<")"/utf8>>)))))))), V2} end(E7, E8)); _ -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), V2} end.
'nested--7685-1781--in--un--liftConstAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.CompileExpr.MkConstAlt', E0, E1} -> (fun (V10, V11) -> fun (V12) -> begin (V13 = (('un--liftExp'(V0, V7, V1, V2, V11))(V12))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.MkLConstAlt', V10, V15}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7685-1726--in--un--liftConAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.CompileExpr.MkConAlt', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> fun (V14) -> begin (V15 = (('un--liftExp'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V12, V0)), V7, V1, V2, V13))(V14))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.MkLConAlt', V10, V11, V12, V17}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7680-1256--in--un--allVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V9) -> {'Idris.Compiler.LambdaLift.LLocal', V9, V7} end, ('nested--7680-1255--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V8)))).
'nested--7680-1255--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> [0 | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'('erased', 'erased', V10)) end, ('nested--7680-1255--in--un--allPrfs'(V0, V1, V2, V3, V4, V5, V6, V9))))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_LiftedDef'(V0) -> case V0 of {'Idris.Compiler.LambdaLift.MkLFun', E0, E1, E2} -> (fun (V1, V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V6)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V8, V9)) end end}, ('Idris.Idris2.Data.List':'un--reverse'('erased', V2)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V2, V1)), V3)))))))) end(E0, E1, E2)); {'Idris.Compiler.LambdaLift.MkLCon', E3, E4, E5} -> (fun (V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor tag "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V14, V15)) end end}, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V11)), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (newtype by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16)), <<")"/utf8>>)))) end end, V12)))))))))) end(E3, E4, E5)); {'Idris.Compiler.LambdaLift.MkLForeign', E6, E7, E8} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Foreign call "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V21, V22)) end end}, V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V23) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_CFType'(V24, V25)) end end}, V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V19)))))))))))) end(E6, E7, E8)); {'Idris.Compiler.LambdaLift.MkLError', E9} -> (fun (V26) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'([], V26)))) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V1) -> case V1 of {'Idris.Compiler.LambdaLift.MkLConstAlt', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%constalt("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") => "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'(V0, V3)))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(LiftedConAlt $vs)'(V0, V1) -> case V1 of {'Idris.Compiler.LambdaLift.MkLConAlt', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%conalt "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)) end, V4)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") => "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, V0)), V5)))))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(Lifted $vs)'(V0, V1) -> case V1 of {'Idris.Compiler.LambdaLift.LLocal', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"!"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Core.TT':'un--nameAt'('erased', V0, V2, 'erased')))))) end(E0, E1)); {'Idris.Compiler.LambdaLift.LAppName', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V8)) end, V7)))), <<")"/utf8>>)))))))) end(E2, E3, E4, E5)); {'Idris.Compiler.LambdaLift.LUnderApp', E6, E7, E8, E9} -> (fun (V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" underapp "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<">("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V13)) end, V12)))), <<")"/utf8>>)))))))))))) end(E6, E7, E8, E9)); {'Idris.Compiler.LambdaLift.LApp', E10, E11, E12, E13} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" @ ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V17)), <<")"/utf8>>)))))))) end(E10, E11, E12, E13)); {'Idris.Compiler.LambdaLift.LLet', E14, E15, E16, E17} -> (fun (V18, V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('dn--un--show_Show_(Lifted $vs)'([V19 | V0], V21)))))))))))) end(E14, E15, E16, E17)); {'Idris.Compiler.LambdaLift.LCon', E18, E19, E20, E21} -> (fun (V22, V23, V24, V25) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%con "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V26) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V26)) end, V25)))), <<")"/utf8>>)))))))) end(E18, E19, E20, E21)); {'Idris.Compiler.LambdaLift.LOp', E22, E23, E24, E25, E26} -> (fun (V27, V28, V29, V30, V31) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%op "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V30)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V29)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V44)) end end}))(('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'('erased', 'erased', 'erased', fun (V32) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V32)) end, V31)))))), <<")"/utf8>>)))))))))) end(E22, E23, E24, E25, E26)); {'Idris.Compiler.LambdaLift.LExtPrim', E27, E28, E29, E30} -> (fun (V45, V46, V47, V48) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%extprim "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V49) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V49)) end, V48)))), <<")"/utf8>>)))))))))) end(E27, E28, E29, E30)); {'Idris.Compiler.LambdaLift.LConCase', E31, E32, E33, E34} -> (fun (V50, V51, V52, V53) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V51)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V54) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V54)) end, V52)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V55) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V55)) end, fun (V56) -> fun (V57) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V56, V57)) end end}, V53)))))))))))) end(E31, E32, E33, E34)); {'Idris.Compiler.LambdaLift.LConstCase', E35, E36, E37, E38} -> (fun (V58, V59, V60, V61) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_(Lifted $vs)'(V0, V59)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V62) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V62)) end, V60)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V63) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V63)) end, fun (V64) -> fun (V65) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V64, V65)) end end}, V61)))))))))))) end(E35, E36, E37, E38)); {'Idris.Compiler.LambdaLift.LPrimVal', E39, E40} -> (fun (V66, V67) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V67)) end(E39, E40)); {'Idris.Compiler.LambdaLift.LErased', E41} -> (fun (V68) -> <<"___"/utf8>> end(E41)); {'Idris.Compiler.LambdaLift.LCrash', E42, E43} -> (fun (V69, V70) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%CRASH("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V70)), <<")"/utf8>>)))) end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_LiftedDef'(V0, V1) -> ('dn--un--show_Show_LiftedDef'(V1)).
'dn--un--showPrec_Show_(LiftedConstAlt $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V2)).
'dn--un--showPrec_Show_(LiftedConAlt $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V2)).
'dn--un--showPrec_Show_(Lifted $vs)'(V0, V1, V2) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V2)).
'dn--un--__Impl_Show_LiftedDef'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_LiftedDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_LiftedDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_(LiftedConstAlt $vs)'(V0) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V1) -> ('dn--un--show_Show_(LiftedConstAlt $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(LiftedConstAlt $vs)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(LiftedConAlt $vs)'(V0) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V1) -> ('dn--un--show_Show_(LiftedConAlt $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(LiftedConAlt $vs)'(V0, V2, V3)) end end}.
'dn--un--__Impl_Show_(Lifted $vs)'(V0) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V1) -> ('dn--un--show_Show_(Lifted $vs)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(Lifted $vs)'(V0, V2, V3)) end end}.
'un--unload'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V6, V7) -> ('un--unload'('erased', V1, {'Idris.Prelude.Types.Nothing'}, {'Idris.Compiler.LambdaLift.LApp', V1, V2, V3, V6}, V7)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showLazy'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V1)))) end end, V0)).
'un--makeLam'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.CompileExpr.CLam', E11, E12, E13} -> (fun (V7, V8, V9) -> ('un--makeLam'(V0, V1, V2, V3, V4, [V8 | V5], V9)) end(E11, E12, E13)); _ -> fun (V10) -> begin (V11 = (('un--liftExp'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V5, V1)), V0, V2, V3, V6))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('un--genName'(V0, V10))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V25 = begin (V24 = ('erlang':'put'(V0, case V20 of {'Idris.Compiler.LambdaLift.MkLDefs', E6, E7, E8} -> (fun (V21, V22, V23) -> {'Idris.Compiler.LambdaLift.MkLDefs', V21, [{'Idris.Builtin.MkPair', V16, {'Idris.Compiler.LambdaLift.MkLFun', V1, V5, V13}} | V22], V23} end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LUnderApp', V4, V16, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V5)), ('nested--7680-1256--in--un--allVars'(V2, V3, V5, V1, V6, V4, V0, V4, V1))}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--liftExp'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CompileExpr.CLocal', E0, E1} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LLocal', V5, V6}} end end(E0, E1)); {'Idris.Core.CompileExpr.CRef', E2, E3} -> (fun (V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LAppName', V8, V3, V9, []}} end end(E2, E3)); {'Idris.Core.CompileExpr.CLam', E4, E5, E6} -> (fun (V11, V12, V13) -> ('un--makeLam'(V1, V0, V2, V3, V11, [V12 | []], V13)) end(E4, E5, E6)); {'Idris.Core.CompileExpr.CLet', E7, E8, E9, E10, E11} -> (fun (V14, V15, V16, V17, V18) -> fun (V19) -> begin (V20 = (('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V17))(V19))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> begin (V23 = (('un--liftExp'([V15 | V0], V1, V2, {'Idris.Prelude.Types.Nothing'}, V18))(V19))), case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LLet', V14, V15, V22, V25}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10, E11)); {'Idris.Core.CompileExpr.CApp', E16, E17, E18} -> (fun (V26, V27, V28) -> case V27 of {'Idris.Core.CompileExpr.CRef', E23, E24} -> (fun (V29, V30) -> fun (V31) -> begin (V33 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V32) -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V32)) end, V28, []))(V31))), case V33 of {'Idris.Prelude.Types.Left', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LAppName', V26, V3, V30, V35}} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23, E24)); _ -> fun (V36) -> begin (V37 = (('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V27))(V36))), case V37 of {'Idris.Prelude.Types.Left', E19} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V39) -> begin (V41 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V40) -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V40)) end, V28, []))(V36))), case V41 of {'Idris.Prelude.Types.Left', E21} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V43) -> (('un--unload'('erased', V26, V3, V39, V43))(V36)) end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E16, E17, E18)); {'Idris.Core.CompileExpr.CCon', E27, E28, E29, E30} -> (fun (V44, V45, V46, V47) -> fun (V48) -> begin (V50 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V49) -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V49)) end, V47, []))(V48))), case V50 of {'Idris.Prelude.Types.Left', E31} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LCon', V44, V45, V46, V52}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27, E28, E29, E30)); {'Idris.Core.CompileExpr.COp', E33, E34, E35, E36} -> (fun (V53, V54, V55, V56) -> fun (V57) -> begin (V58 = (('nested--7685-1552--in--un--traverseArgs'(V0, V2, V3, V53, V56, V55, V54, V1, 'erased', V56))(V57))), case V58 of {'Idris.Prelude.Types.Left', E37} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LOp', V53, V54, V3, V55, V60}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33, E34, E35, E36)); {'Idris.Core.CompileExpr.CExtPrim', E39, E40, E41} -> (fun (V61, V62, V63) -> fun (V64) -> begin (V66 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V65) -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V65)) end, V63, []))(V64))), case V66 of {'Idris.Prelude.Types.Left', E42} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LExtPrim', V61, V3, V62, V68}} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39, E40, E41)); {'Idris.Core.CompileExpr.CForce', E44, E45, E46} -> (fun (V69, V70, V71) -> case V2 of 0 -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V71)); 1 -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CompileExpr.CApp', V69, V71, [{'Idris.Core.CompileExpr.CErased', V69} | []]})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44, E45, E46)); {'Idris.Core.CompileExpr.CDelay', E47, E48, E49} -> (fun (V72, V73, V74) -> case V2 of 0 -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Just', V73}, V74)); 1 -> ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, {'Idris.Core.CompileExpr.CLam', V72, {'Idris.Core.Name.MN', <<"act"/utf8>>, 0}, ('Idris.Idris2.Core.CompileExpr':'dn--un--weaken_Weaken_CExp'('erased', 'erased', V74))})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48, E49)); {'Idris.Core.CompileExpr.CConCase', E50, E51, E52, E53} -> (fun (V75, V76, V77, V78) -> fun (V79) -> begin (V80 = (('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V76))(V79))), case V80 of {'Idris.Prelude.Types.Left', E54} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V82) -> begin (V84 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V83) -> ('nested--7685-1726--in--un--liftConAlt'(V0, V2, V3, V78, V77, V76, V75, V1, V3, V83)) end, V77, []))(V79))), case V84 of {'Idris.Prelude.Types.Left', E56} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V86) -> begin (V91 = case V78 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E58} -> (fun (V87) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V88) -> case V88 of {'Idris.Prelude.Types.Left', E59} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V90}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V87)), V79)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V91 of {'Idris.Prelude.Types.Left', E61} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LConCase', V75, V82, V86, V93}} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E50, E51, E52, E53)); {'Idris.Core.CompileExpr.CConstCase', E63, E64, E65, E66} -> (fun (V94, V95, V96, V97) -> fun (V98) -> begin (V99 = (('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V95))(V98))), case V99 of {'Idris.Prelude.Types.Left', E67} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V101) -> begin (V103 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V102) -> ('nested--7685-1781--in--un--liftConstAlt'(V0, V2, V3, V97, V96, V95, V94, V1, {'Idris.Prelude.Types.Nothing'}, V102)) end, V96, []))(V98))), case V103 of {'Idris.Prelude.Types.Left', E69} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V105) -> begin (V110 = case V97 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E71} -> (fun (V106) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V107) -> case V107 of {'Idris.Prelude.Types.Left', E72} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V109}} end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--liftExp'(V0, V1, V2, {'Idris.Prelude.Types.Nothing'}, V106)), V98)) end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V110 of {'Idris.Prelude.Types.Left', E74} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V112) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LConstCase', V94, V101, V105, V112}} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63, E64, E65, E66)); {'Idris.Core.CompileExpr.CPrimVal', E76, E77} -> (fun (V113, V114) -> fun (V115) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LPrimVal', V113, V114}} end end(E76, E77)); {'Idris.Core.CompileExpr.CErased', E78} -> (fun (V116) -> fun (V117) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LErased', V116}} end end(E78)); {'Idris.Core.CompileExpr.CCrash', E79, E80} -> (fun (V118, V119) -> fun (V120) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.LambdaLift.LCrash', V118, V119}} end end(E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--liftBody'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.LambdaLift.Lifts'}, {'Idris.Compiler.LambdaLift.MkLDefs', V2, [], 0}, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = (('un--liftExp'(V0, V7, V1, {'Idris.Prelude.Types.Nothing'}, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, case V14 of {'Idris.Compiler.LambdaLift.MkLDefs', E6, E7, E8} -> (fun (V15, V16, V17) -> V16 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lambdaLiftDef'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.MkFun', E0, E1} -> (fun (V3, V4) -> fun (V5) -> begin (V6 = ('un--liftBody'(V3, V0, V1, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLFun', V3, [], V9}} | V10]} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Core.CompileExpr.MkCon', E6, E7, E8} -> (fun (V11, V12, V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLCon', V11, V12, V13}} | []]} end end(E6, E7, E8)); {'Idris.Core.CompileExpr.MkForeign', E9, E10, E11} -> (fun (V15, V16, V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLForeign', V15, V16, V17}} | []]} end end(E9, E10, E11)); {'Idris.Core.CompileExpr.MkError', E12} -> (fun (V19) -> fun (V20) -> begin (V21 = ('un--liftBody'([], V0, V1, V19, V20))), case V21 of {'Idris.Prelude.Types.Left', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V24, V25) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Compiler.LambdaLift.MkLError', V24}} | V25]} end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--lambdaLift'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Just', V38}), (('case--case block in lambdaLift-2026'(V2, V1, V0, V7, V38, V39, case V38 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--genName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V9 = case V5 of {'Idris.Compiler.LambdaLift.MkLDefs', E2, E3, E4} -> (fun (V6, V7, V8) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V14 = begin (V13 = ('erlang':'put'(V0, case V5 of {'Idris.Compiler.LambdaLift.MkLDefs', E5, E6, E7} -> (fun (V10, V11, V12) -> {'Idris.Compiler.LambdaLift.MkLDefs', V10, V11, ((V9 + 1) rem 9223372036854775808)} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('nested--7574-1131--in--un--mkName'(V0, case V5 of {'Idris.Compiler.LambdaLift.MkLDefs', E10, E11, E12} -> (fun (V17, V18, V19) -> V17 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
