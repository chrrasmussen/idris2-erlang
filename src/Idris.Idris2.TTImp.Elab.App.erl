-module('Idris.Idris2.TTImp.Elab.App').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--checkAppWith\x{27}-5216'/24,
  'case--checkApp-8469'/16,
  'case--case block in checkApp-8292'/24,
  'case--checkApp-8134'/17,
  'case--case block in checkApp,updateElabInfo-8018'/23,
  'case--checkApp,updateElabInfo-7959'/24,
  'case--case block in case block in case block in checkAppWith-7568'/27,
  'case--case block in case block in checkAppWith-7503'/25,
  'case--case block in checkAppWith-7449'/21,
  'case--checkAppWith-7398'/20,
  'case--checkAppWith\x{27}-7274'/19,
  'case--case block in checkAppWith\x{27}-7064'/35,
  'case--checkAppWith\x{27}-6923'/26,
  'case--checkAppWith\x{27}-6706'/26,
  'case--checkAppWith\x{27}-6563'/25,
  'case--checkAppWith\x{27}-6419'/24,
  'case--case block in checkAppWith\x{27}-6156'/33,
  'case--checkAppWith\x{27}-6083'/25,
  'case--checkAppWith\x{27}-5915'/24,
  'case--case block in checkAppWith\x{27}-5728'/25,
  'case--checkAppWith\x{27}-5612'/24,
  'case--case block in with block in checkAppWith\x{27}-5405'/26,
  'case--with block in checkAppWith\x{27}-5253'/24,
  'case--findNamed-5126'/3,
  'case--case block in checkRestApp-4980'/28,
  'case--case block in case block in case block in case block in checkRestApp-4643'/47,
  'case--case block in case block in case block in case block in case block in checkRestApp-4347'/47,
  'case--case block in case block in case block in case block in checkRestApp-4240'/46,
  'case--case block in case block in case block in checkRestApp-4092'/41,
  'case--case block in case block in checkRestApp-3962'/36,
  'case--case block in checkRestApp-3835'/31,
  'case--checkRestApp-3745'/28,
  'case--checkRestApp-3633'/25,
  'case--case block in case block in case block in dotErased-3481'/13,
  'case--case block in case block in dotErased-3453'/11,
  'case--case block in dotErased-3391'/10,
  'case--dotErased-3346'/9,
  'case--dotErased,dotTerm-3173'/9,
  'case--case block in case block in dotErased,countConstructors-3013'/17,
  'case--case block in dotErased,countConstructors-2980'/15,
  'case--dotErased,countConstructors-2935'/14,
  'case--case block in case block in checkPatTyValid-2780'/16,
  'case--case block in checkPatTyValid-2736'/15,
  'case--checkPatTyValid-2700'/13,
  'case--needsDelayExpr-2476'/5,
  'case--makeDefImplicit-2230'/24,
  'case--makeAutoImplicit-1968'/23,
  'case--case block in case block in getVarType-1400'/18,
  'case--case block in getVarType-1329'/16,
  'case--case block in getVarType-1240'/10,
  'case--getVarType-1207'/10,
  'case--case block in case block in getNameType-916'/14,
  'case--case block in getNameType-877'/10,
  'case--case block in getNameType-800'/14,
  'case--getNameType-694'/9,
  'case--case block in checkVisibleNS-587'/10,
  'case--checkVisibleNS-555'/6,
  'nested--11716-1136--in--un--useVars'/12,
  'nested--19365-7879--in--un--updateElabInfo'/21,
  'nested--11201-668--in--un--rigSafe'/11,
  'nested--19365-7878--in--un--normalisePrims'/21,
  'nested--12403-2220--in--un--metavarImp'/24,
  'nested--12397-1958--in--un--metavarImp'/23,
  'nested--12419-2920--in--un--dotTerm'/9,
  'nested--12419-2919--in--un--countConstructors'/9,
  'nested--19430-7887--in--un--boundSafe'/22,
  'un--onLHS'/1,
  'un--needsDelayLHS'/2,
  'un--needsDelayExpr'/3,
  'un--needsDelay'/4,
  'un--makeImplicit'/21,
  'un--makeDefImplicit'/22,
  'un--makeAutoImplicit'/21,
  'un--isImplicitAs'/1,
  'un--isHole'/2,
  'un--isBindAllExpPattern'/1,
  'un--getVarType'/9,
  'un--getNameType'/8,
  'un--findNamed'/2,
  'un--findBindAllExpPattern'/1,
  'un--dotErased'/8,
  'un--concrete'/4,
  'un--checkVisibleNS'/4,
  'un--checkRestApp'/22,
  'un--checkPatTyValid'/8,
  'un--checkAppWith\x{27}'/18,
  'un--checkAppWith'/19,
  'un--checkApp'/15
]).
'with--checkAppWith\x{27}-5216'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V25, V26) -> case V25 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V27, V28) -> begin (V29 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V10))), ('un--checkRestApp'(V3, V23, V22, V21, V20, V19, V29, V18, V17, V16, V15, V14, V1, V9, V11, V8, V28, [], V7, V26, V6, V5)) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('case--with block in checkAppWith\x{27}-5253'(V4, V23, V22, V21, V3, V20, V19, V18, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V1, V0, ('un--findBindAllExpPattern'(V0)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkApp-8469'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> fun (V18) -> begin (V19 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V14, V17))(V18))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> ('un--checkAppWith'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V6, V16, V21, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, 0}, V4, V3, V2, 1, V1, V18)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkApp-8292'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V25, V26) -> case V25 of {'Idris.Prelude.Types.Just', E3} -> (fun (V27) -> V27 end(E3)); _ -> V1 end end(E1, E2)); _ -> V1 end end(E0)); _ -> V1 end.
'case--checkApp-8134'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V19, V20) -> fun (V21) -> begin (V22 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V15, V20))(V21))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V15, V21))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V34 = (('nested--19365-7879--in--un--updateElabInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V27, case V10 of {'Idris.TTImp.Elab.Check.MkElabInfo', E8, E9, E10, E11, E12, E13} -> (fun (V28, V29, V30, V31, V32, V33) -> V28 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V6, V10))(V21))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V80 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V15, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V37) -> begin (V39 = begin (V38 = ('erlang':'get'(V15))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E16} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V15, V0, V41, V8, V24, V37))), case V42 of {'Idris.Prelude.Types.Left', E18} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V44) -> begin (V61 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V46) -> fun (V47) -> begin (V48 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V46))(V47))), case V48 of {'Idris.Prelude.Types.Left', E20} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V50) -> begin (V51 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V15, V0, V41, V8, V50, V47))), case V51 of {'Idris.Prelude.Types.Left', E22} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V53) -> begin (V58 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V15, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V56, V57)) end end}, V53, V47))), case V58 of {'Idris.Prelude.Types.Left', E24} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V60}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V37))), case V61 of {'Idris.Prelude.Types.Left', E26} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V63) -> begin (V64 = (('Idris.Idris2.Core.Context':'un--getFullName'(V15, V1))(V37))), case V64 of {'Idris.Prelude.Types.Left', E28} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V66) -> begin (V71 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V15, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V69, V70)) end end}, V44, V37))), case V71 of {'Idris.Prelude.Types.Left', E30} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V73) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking application of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V66)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V75, V76)) end end}, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}Function type "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V73)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}Expected app type "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V77) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V78, V79)) end end}, V63))))))))))))))))))))))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V21))), case V80 of {'Idris.Prelude.Types.Left', E32} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V82) -> begin (V88 = begin (V83 = {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', V19, V20}}), ('case--case block in checkApp-8292'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V19, V20, V83, V24, V27, V36, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V86, V87)) end end}, V1, V9)))) end), begin (V89 = ('un--checkAppWith'(V0, V15, V14, V13, V12, V11, V36, V9, V8, V7, V17, V24, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V88}, V19}, V6, V5, V4, 1, V3, V21))), case V89 of {'Idris.Prelude.Types.Left', E34} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V91) -> ('nested--19365-7878--in--un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, V27, V8, V91, V21)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkApp,updateElabInfo-8018'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V19 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V23, V24, V25, V26, V27, V28) -> {'Idris.TTImp.Elab.Check.MkElabInfo', {'Idris.TTImp.Elab.Check.InExpr'}, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkApp,updateElabInfo-7959'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> fun (V24) -> {'Idris.Prelude.Types.Right', case V19 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V25, V26, V27, V28, V29, V30) -> {'Idris.TTImp.Elab.Check.MkElabInfo', {'Idris.TTImp.Elab.Check.InExpr'}, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end; 1 -> fun (V31) -> {'Idris.Prelude.Types.Right', V19} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkAppWith-7568'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of 0 -> fun (V27) -> {'Idris.Prelude.Types.Right', V18} end; 1 -> fun (V28) -> ('Idris.Idris2.TTImp.Elab.Dot':'un--registerDot'(V0, V17, V16, V15, V14, V13, V10, V9, {'Idris.Core.Core.UnderAppliedCon'}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V18)), V28)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkAppWith-7503'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V26, V27) -> ('case--case block in case block in case block in checkAppWith-7568'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V26, V27, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V27, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V23)))))) end(E1, E2)); _ -> fun (V28) -> {'Idris.Prelude.Types.Right', V18} end end end(E0)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', V18} end end.
'case--case block in checkAppWith-7449'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> case V21 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V23, V24, V25) -> ('case--case block in case block in checkAppWith-7503'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23, V25, V24, V22, ('Idris.Idris2.Core.TT':'un--isCon'(V24)))) end(E2, E3, E4)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', V18} end end end(E0, E1)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', V18} end end.
'case--checkAppWith-7398'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> ('case--case block in checkAppWith-7449'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V20, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)))))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> {'Idris.Prelude.Types.Right', V18} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith\x{27}-7274'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V16, V14, V13, V12, V11, V9, V8, V7, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V16, V0, V17, V9, V6)), V1)); 1 -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InvalidArgs', V0, V8, V9, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> {'Idris.Core.Name.UN', <<"<auto>"/utf8>>} end, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V21)) end, V3)))), V7}, V19)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAppWith\x{27}-7064'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V34 of [] -> fun (V35) -> {'Idris.Prelude.Types.Right', V32} end; _ -> fun (V36) -> begin (V37 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V31))(V36))), case V37 of {'Idris.Prelude.Types.Left', E0} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V39) -> begin (V40 = (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V4, V17, V19, V11, V15, V12, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V32)), V39, V34))(V36))), case V40 of {'Idris.Prelude.Types.Left', E2} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V42, ('Idris.Idris2.Core.Normalise':'un--gnf'(V4, V12, V24))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--checkAppWith\x{27}-6923'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V26, V27) -> begin (V28 = {'Idris.Core.TT.App', V11, V10, V26}), fun (V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V19))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> begin (V34 = (('Idris.Idris2.Core.Normalise':'un--nf'(V19, V4, V33, V12, V24))(V29))), case V34 of {'Idris.Prelude.Types.Left', E4} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V4, V12, {'Idris.Core.TT.Bind', V11, V20, {'Idris.Core.TT.Pi', V11, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V22}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V24))}))), begin (V38 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V4, V19, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V12, V37, V29))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> begin (V42 = case V5 of {'Idris.Prelude.Types.Just', E8} -> (fun (V41) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V4, V19, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V12, V41, V29)) end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V42 of {'Idris.Prelude.Types.Left', E9} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V44) -> begin (V45 = (('un--checkAppWith\x{27}'(V4, V19, V18, V17, V16, V15, V14, V13, V12, V11, V28, V36, {'Idris.Builtin.MkPair', V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1))}, V3, V8, V7, V6, V5))(V29))), case V45 of {'Idris.Prelude.Types.Left', E11} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V47) -> begin (V48 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V4, V19, V17, V16, V11, V14, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V19, V4, V33, V12, V9)), V37))(V29))), case V48 of {'Idris.Prelude.Types.Left', E13} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V50) -> begin (V51 = {'Idris.Builtin.MkPair', V26, V27}), (('case--case block in checkAppWith\x{27}-7064'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V26, V27, V51, V28, V33, V36, V37, V47, V50, case V50 of {'Idris.Core.Unify.MkUnifyResult', E15, E16, E17, E18} -> (fun (V52, V53, V54, V55) -> V52 end(E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V29)) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith\x{27}-6706'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeDefImplicit'(V0, V23, V22, V21, V20, V19, V24, V18, V17, V16, V15, V14, V6, V2, V3, V5, V13, V12, V11, V10, V9, V8)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V27, V28) -> case V27 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V29, V30) -> ('un--checkRestApp'(V0, V23, V22, V21, V20, V19, V24, V18, V17, V16, V15, V14, V6, V3, V5, V13, V30, V12, V11, V28, V9, V8)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith\x{27}-6563'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeImplicit'(V0, V22, V21, V20, V19, V18, V23, V17, V16, V15, V14, V13, V5, V2, V4, V12, V11, V10, V9, V8, V7)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V26, V27) -> case V26 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V28, V29) -> ('un--checkRestApp'(V0, V22, V21, V20, V19, V18, V23, V17, V16, V15, V14, V13, V5, V2, V4, V12, V29, V11, V10, V27, V8, V7)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith\x{27}-6419'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V25, V26) -> case V25 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V27, V28) -> ('un--checkRestApp'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V5, V2, V4, V11, V28, V10, [], V26, V8, V7)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--makeAutoImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V5, V2, V4, V11, V10, [], V9, V8, V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAppWith\x{27}-6156'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V32 of 0 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V21, V19, V18, V17, V16, V14, V13, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V24, V14, V11)), {'Idris.Prelude.Types.Just', V2})); 1 -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith\x{27}-6083'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V23 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V25, V26, V27, V28) -> case V27 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V29, V30, V31, V32) -> case V31 of {'Idris.Core.TT.DefImplicit', E8} -> (fun (V33) -> fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V21, V0, V24, V14, V5, V33, V34))), case V35 of {'Idris.Prelude.Types.Left', E9} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V37) -> case V37 of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V21, V19, V18, V17, V16, V14, V13, V12, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V21, V0, V24, V14, V11)), {'Idris.Prelude.Types.Just', V2}))(V34)); 1 -> (('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2}))(V34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E4, E5, E6, E7)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E0, E1, E2, E3)); _ -> ('un--makeDefImplicit'(V0, V21, V20, V19, V18, V17, V22, V16, V15, V14, V13, V12, V9, V5, V6, V8, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end.
'case--checkAppWith\x{27}-5915'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V24, V25, V26, V27) -> case V26 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V28, V29, V30, V31) -> case V30 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})) end()); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E4, E5, E6, E7)); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end end(E0, E1, E2, E3)); _ -> ('un--makeAutoImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end.
'case--case block in checkAppWith\x{27}-5728'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> ('un--makeImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})); 1 -> fun (V25) -> ('Idris.Idris2.TTImp.Elab.Check':'un--handle'('erased', V0, V20, V19, V18, V17, ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})), fun (V26) -> ('un--makeImplicit'(V0, V20, V19, V18, V17, V16, V21, V15, V14, V13, V12, V11, V8, V5, V7, V4, [], [], [], V3, {'Idris.Prelude.Types.Just', V2})) end, V25)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAppWith\x{27}-5612'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V22 of {'Idris.Core.Value.NBind', E6, E7, E8, E9} -> (fun (V24, V25, V26, V27) -> case V26 of {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V28, V29, V30, V31) -> case V30 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V20, V18, V17, V16, V15, V13, V12, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V20, V0, V23, V13, V10)), {'Idris.Prelude.Types.Just', V2})) end()); _ -> ('case--case block in checkAppWith\x{27}-5728'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E20, E21, E22, E23, E24, E25} -> (fun (V32, V33, V34, V35, V36, V37) -> V36 end(E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E16, E17, E18, E19)); _ -> ('case--case block in checkAppWith\x{27}-5728'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E10, E11, E12, E13, E14, E15} -> (fun (V38, V39, V40, V41, V42, V43) -> V42 end(E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E6, E7, E8, E9)); _ -> ('case--case block in checkAppWith\x{27}-5728'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Prelude.Basics':'un--not'(case V15 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V44, V45, V46, V47, V48, V49) -> V48 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'case--case block in with block in checkAppWith\x{27}-5405'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of 0 -> ('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V4, V1, V3, V5, V6, V7, V9, V10, V11, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V4, V24, V9, V12)), V20)); 1 -> fun (V26) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InvalidArgs', V4, V10, V9, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V27) -> {'Idris.Core.Name.UN', <<"<auto>"/utf8>>} end, V18)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V28)) end, V22)))), V11}, V26)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in checkAppWith\x{27}-5253'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E2} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V15))), ('un--checkRestApp'(V4, V1, V2, V3, V5, V6, V25, V7, V8, V9, V10, V11, V21, V16, V14, V17, V24, [], V18, V22, V19, V20)) end end(E2)); _ -> fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> (('case--case block in with block in checkAppWith\x{27}-5405'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V30, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V44)) end end}, fun (V45) -> ('un--isImplicitAs'(V45)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V18, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V31)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V32) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V32)))))) end, V22))))))))))(V26)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--findNamed-5126'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V3 of [E2 | E3] -> (fun (V5, V6) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V6, V4))}} end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in checkRestApp-4980'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V28, V29) -> fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got arg type"/utf8>> end, V14, V29, V30))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> begin (V35 = begin (V34 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> begin (V38 = {'Idris.Core.TT.App', V13, V12, V28}), begin (V39 = (((V9(V37))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V28))))(V30))), case V39 of {'Idris.Prelude.Types.Left', E6} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V41) -> ('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V38, V41, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V25, V3, V30)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in checkRestApp-4643'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V46 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V47) -> fun (V48) -> begin (V50 = ('Idris.Idris2.Core.Context':'un--updateDef'(V22, {'Idris.Core.Name.Resolved', V30}, fun (V49) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.Hole', 0, ('Idris.Idris2.Core.Context':'un--holeInit'(1))}} end, V48))), case V50 of {'Idris.Prelude.Types.Left', E1} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V53) -> case V53 of {'Idris.Prelude.Types.Left', E3} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V31, V40)), V48)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in case block in case block in case block in case block in checkRestApp-4347'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V46 of [] -> fun (V47) -> {'Idris.Prelude.Types.Right', V35} end; _ -> fun (V48) -> begin (V49 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V36))(V48))), case V49 of {'Idris.Prelude.Types.Left', E0} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V51) -> (('Idris.Idris2.Core.UnifyState':'un--newConstant'(V0, V20, V22, V13, V18, V14, V35, V51, V46))(V48)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in case block in case block in checkRestApp-4240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> case V45 of 0 -> fun (V46) -> begin (V47 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V22, V20, V19, V13, V16, V14, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V14, V31)), ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V14, V40))))(V46))), case V47 of {'Idris.Prelude.Types.Left', E0} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V49) -> (('case--case block in case block in case block in case block in case block in checkRestApp-4347'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V49, case V49 of {'Idris.Core.Unify.MkUnifyResult', E2, E3, E4, E5} -> (fun (V50, V51, V52, V53) -> V50 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V46)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V54) -> {'Idris.Prelude.Types.Right', V35} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkRestApp-4092'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> case V40 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V41, V42) -> fun (V43) -> begin (V50 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V44, V45, V46, V47, V48, V49) -> V44 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V22, V13, V38, V14, V39, V41, V42))(V43)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V50 of {'Idris.Prelude.Types.Left', E8} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E10} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V31)), <<" with"/utf8>>)))) end, V41, V43))), case V57 of {'Idris.Prelude.Types.Left', E12} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V59) -> begin (V60 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V31, V41))(V43))), case V60 of {'Idris.Prelude.Types.Left', E14} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V62) -> begin (V64 = begin (V63 = {'Idris.Builtin.MkPair', V41, V42}), (('case--case block in case block in case block in case block in checkRestApp-4240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V41, V42, V63, V56, V62, ('Idris.Idris2.Prelude.Basics':'un--not'(V62))))(V43)) end), case V64 of {'Idris.Prelude.Types.Left', E16} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V66) -> begin (V74 = begin (V67 = {'Idris.Builtin.MkPair', V41, V42}), (('case--case block in case block in case block in case block in checkRestApp-4643'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V41, V42, V67, V56, V62, V66, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E18, E19, E20, E21, E22, E23} -> (fun (V68, V69, V70, V71, V72, V73) -> V68 end(E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V43)) end), case V74 of {'Idris.Prelude.Types.Left', E24} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V30, V43))), case V77 of {'Idris.Prelude.Types.Left', E26} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V66, V36}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkRestApp-3962'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V35 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V36, V37) -> fun (V38) -> begin (V40 = begin (V39 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E2} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V42) -> begin (V43 = (('Idris.Idris2.Core.Normalise':'un--nf'(V22, V0, V42, V14, V29))(V38))), case V43 of {'Idris.Prelude.Types.Left', E4} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V24)))))))) end, V14, V45, V38))), case V46 of {'Idris.Prelude.Types.Left', E6} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V48) -> begin (V49 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, V16, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V42, V14, V45))}))(V38))), case V49 of {'Idris.Prelude.Types.Left', E8} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V51) -> begin (V52 = {'Idris.Builtin.MkPair', V36, V37}), case V51 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V53, V54) -> begin (V61 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E12, E13, E14, E15, E16, E17} -> (fun (V55, V56, V57, V58, V59, V60) -> V55 end(E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V22, V13, V42, V14, V45, V53, V54))(V38)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V61 of {'Idris.Prelude.Types.Left', E18} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V63) -> begin (V65 = begin (V64 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E20} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V31)), <<" with"/utf8>>)))) end, V53, V38))), case V68 of {'Idris.Prelude.Types.Left', E22} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V70) -> begin (V71 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V31, V53))(V38))), case V71 of {'Idris.Prelude.Types.Left', E24} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V73) -> begin (V75 = begin (V74 = {'Idris.Builtin.MkPair', V53, V54}), (('case--case block in case block in case block in case block in checkRestApp-4240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V36, V37, V52, V42, V45, V53, V54, V74, V67, V73, ('Idris.Idris2.Prelude.Basics':'un--not'(V73))))(V38)) end), case V75 of {'Idris.Prelude.Types.Left', E26} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V77) -> begin (V85 = begin (V78 = {'Idris.Builtin.MkPair', V53, V54}), (('case--case block in case block in case block in case block in checkRestApp-4643'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V36, V37, V52, V42, V45, V53, V54, V78, V67, V73, V77, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E28, E29, E30, E31, E32, E33} -> (fun (V79, V80, V81, V82, V83, V84) -> V79 end(E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V38)) end), case V85 of {'Idris.Prelude.Types.Left', E34} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V87) -> begin (V88 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V30, V38))), case V88 of {'Idris.Prelude.Types.Left', E36} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V77, V37}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkRestApp-3835'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V30 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V31, V32) -> begin (V33 = {'Idris.Core.TT.App', V13, V12, V32}), fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Delaying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V24)))))))) end, V14, V10, V34))), case V35 of {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...as"/utf8>> end, V32, V34))), case V38 of {'Idris.Prelude.Types.Left', E4} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V40) -> begin (V41 = (((V9(V23))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V32))))(V34))), case V41 of {'Idris.Prelude.Types.Left', E6} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V43) -> begin (V44 = ('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V33, V43, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V25, V3, V34))), case V44 of {'Idris.Prelude.Types.Left', E8} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V46) -> begin (V47 = {'Idris.Builtin.MkPair', V31, V32}), case V46 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V48, V49) -> begin (V51 = begin (V50 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E12} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V53) -> begin (V54 = (('Idris.Idris2.Core.Normalise':'un--nf'(V22, V0, V53, V14, V29))(V34))), case V54 of {'Idris.Prelude.Types.Left', E14} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V24)))))))) end, V14, V56, V34))), case V57 of {'Idris.Prelude.Types.Left', E16} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V59) -> begin (V60 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, V16, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V53, V14, V56))}))(V34))), case V60 of {'Idris.Prelude.Types.Left', E18} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V62) -> begin (V63 = {'Idris.Builtin.MkPair', V48, V49}), case V62 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V64, V65) -> begin (V72 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E22, E23, E24, E25, E26, E27} -> (fun (V66, V67, V68, V69, V70, V71) -> V66 end(E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V22, V13, V53, V14, V56, V64, V65))(V34)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V72 of {'Idris.Prelude.Types.Left', E28} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V74) -> begin (V76 = begin (V75 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E30} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V32)), <<" with"/utf8>>)))) end, V64, V34))), case V79 of {'Idris.Prelude.Types.Left', E32} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V81) -> begin (V82 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V32, V64))(V34))), case V82 of {'Idris.Prelude.Types.Left', E34} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V84) -> begin (V86 = begin (V85 = {'Idris.Builtin.MkPair', V64, V65}), (('case--case block in case block in case block in case block in checkRestApp-4240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V31, V32, V47, V33, V43, V48, V49, V63, V53, V56, V64, V65, V85, V78, V84, ('Idris.Idris2.Prelude.Basics':'un--not'(V84))))(V34)) end), case V86 of {'Idris.Prelude.Types.Left', E36} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V88) -> begin (V96 = begin (V89 = {'Idris.Builtin.MkPair', V64, V65}), (('case--case block in case block in case block in case block in checkRestApp-4643'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V31, V32, V47, V33, V43, V48, V49, V63, V53, V56, V64, V65, V89, V78, V84, V88, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E38, E39, E40, E41, E42, E43} -> (fun (V90, V91, V92, V93, V94, V95) -> V90 end(E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V34)) end), case V96 of {'Idris.Prelude.Types.Left', E44} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V98) -> begin (V99 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V31, V34))), case V99 of {'Idris.Prelude.Types.Left', E46} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V101) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V88, V49}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkRestApp-3745'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of 0 -> fun (V28) -> begin (V29 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V22, V20, V11))(V28))), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V23, V28))), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V22, V0, V34, V14, V10, V28))), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> begin (V38 = (('Idris.Idris2.TTImp.Elab.Check':'un--argVar'(V0, V22, V20, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V24)), V17, V14, V31, V37))(V28))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> case V40 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V41, V42) -> begin (V43 = {'Idris.Core.TT.App', V13, V12, V42}), begin (V44 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Delaying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V31)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V24)))))))) end, V14, V10, V28))), case V44 of {'Idris.Prelude.Types.Left', E10} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"...as"/utf8>> end, V42, V28))), case V47 of {'Idris.Prelude.Types.Left', E12} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V49) -> begin (V50 = (((V9(V23))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V42))))(V28))), case V50 of {'Idris.Prelude.Types.Left', E14} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V52) -> begin (V53 = ('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V43, V52, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V25, V3, V28))), case V53 of {'Idris.Prelude.Types.Left', E16} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V55) -> begin (V56 = {'Idris.Builtin.MkPair', V41, V42}), case V55 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V57, V58) -> begin (V60 = begin (V59 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E20} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V62) -> begin (V63 = (('Idris.Idris2.Core.Normalise':'un--nf'(V22, V0, V62, V14, V37))(V28))), case V63 of {'Idris.Prelude.Types.Left', E22} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V65) -> begin (V66 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Now trying "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V31)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V24)))))))) end, V14, V65, V28))), case V66 of {'Idris.Prelude.Types.Left', E24} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V68) -> begin (V69 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, V16, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V62, V14, V65))}))(V28))), case V69 of {'Idris.Prelude.Types.Left', E26} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V71) -> begin (V72 = {'Idris.Builtin.MkPair', V57, V58}), case V71 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V73, V74) -> begin (V81 = case ('un--onLHS'(case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E30, E31, E32, E33, E34, E35} -> (fun (V75, V76, V77, V78, V79, V80) -> V75 end(E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 0 -> (('un--checkPatTyValid'(V0, V22, V13, V62, V14, V65, V73, V74))(V28)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V81 of {'Idris.Prelude.Types.Left', E36} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V83) -> begin (V85 = begin (V84 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E38} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V87) -> begin (V88 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Solving "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V42)), <<" with"/utf8>>)))) end, V73, V28))), case V88 of {'Idris.Prelude.Types.Left', E40} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V90) -> begin (V91 = (('Idris.Idris2.Core.Unify':'un--solveIfUndefined'(V0, V22, V20, V14, V42, V73))(V28))), case V91 of {'Idris.Prelude.Types.Left', E42} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V93) -> begin (V95 = begin (V94 = {'Idris.Builtin.MkPair', V73, V74}), (('case--case block in case block in case block in case block in checkRestApp-4240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V31, V34, V37, V41, V42, V56, V43, V52, V57, V58, V72, V62, V65, V73, V74, V94, V87, V93, ('Idris.Idris2.Prelude.Basics':'un--not'(V93))))(V28)) end), case V95 of {'Idris.Prelude.Types.Left', E44} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V97) -> begin (V105 = begin (V98 = {'Idris.Builtin.MkPair', V73, V74}), (('case--case block in case block in case block in case block in checkRestApp-4643'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V31, V34, V37, V41, V42, V56, V43, V52, V57, V58, V72, V62, V65, V73, V74, V98, V87, V93, V97, case V16 of {'Idris.TTImp.Elab.Check.MkElabInfo', E46, E47, E48, E49, E50, E51} -> (fun (V99, V100, V101, V102, V103, V104) -> V99 end(E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V28)) end), case V105 of {'Idris.Prelude.Types.Left', E52} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V107) -> begin (V108 = ('Idris.Idris2.Core.UnifyState':'un--removeHole'(V20, V41, V28))), case V108 of {'Idris.Prelude.Types.Left', E54} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V97, V58}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V111) -> begin (V112 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Argument type "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)))) end, V14, V10, V111))), case V112 of {'Idris.Prelude.Types.Left', E56} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V114) -> begin (V115 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Full function type"/utf8>> end, V14, {'Idris.Core.Value.NBind', V13, V11, {'Idris.Core.TT.Pi', V13, V17, {'Idris.Core.TT.Explicit'}, V10}, V9}, V111))), case V115 of {'Idris.Prelude.Types.Left', E58} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V117) -> begin (V138 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V118) -> begin (V132 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V119) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V120) -> fun (V121) -> begin (V122 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V120))(V121))), case V122 of {'Idris.Prelude.Types.Left', E60} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V124) -> begin (V129 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V22, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V125, V126)) end end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V127, V128)) end end}, V124, V121))), case V129 of {'Idris.Prelude.Types.Left', E62} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V131}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V118))), case V132 of {'Idris.Prelude.Types.Left', E64} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V134) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Overall expected type: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V135) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V135)) end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V136, V137)) end end}, V134))))} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V111))), case V138 of {'Idris.Prelude.Types.Left', E66} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V140) -> begin (V141 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V22, V21, V20, V19, V17, V16, V15, V14, V24, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V22, V0, V23, V14, V10))}))(V111))), case V141 of {'Idris.Prelude.Types.Left', E68} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V143) -> case V143 of {'Idris.Builtin.MkPair', E70, E71} -> (fun (V144, V145) -> begin (V146 = ('Idris.Idris2.Core.Normalise':'un--logGlueNF'(V0, V22, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Got arg type"/utf8>> end, V14, V145, V111))), case V146 of {'Idris.Prelude.Types.Left', E72} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V148) -> begin (V150 = begin (V149 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V149} end), case V150 of {'Idris.Prelude.Types.Left', E74} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V152) -> begin (V153 = {'Idris.Core.TT.App', V13, V12, V144}), begin (V154 = (((V9(V152))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V144))))(V111))), case V154 of {'Idris.Prelude.Types.Left', E76} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V156) -> ('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V153, V156, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V25, V3, V111)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkRestApp-3633'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V4 of 0 -> fun (V25) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V26) -> begin (V27 = (((V9(V23))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, {'Idris.Core.TT.Erased', V13, 1}))))(V26))), case V27 of {'Idris.Prelude.Types.Left', E0} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V29) -> (('un--concrete'('erased', V23, V14, V29))(V26)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in dotErased-3481'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> {'Idris.Prelude.Types.Right', V2} end; 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', ('nested--12419-2920--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in dotErased-3453'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V12 = {'Idris.Prelude.Types.Just', V11}), ('case--case block in case block in case block in dotErased-3481'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V15, V16)) end end}, V4, case V11 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V21 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', ('nested--12419-2920--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in dotErased-3391'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> {'Idris.Prelude.Types.Right', V2} end; 1 -> fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V45 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V17) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V17, case V15 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end, V5))(V11))), case V45 of {'Idris.Prelude.Types.Left', E29} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E31} -> (fun (V48) -> begin (V49 = {'Idris.Prelude.Types.Just', V48}), (('case--case block in case block in case block in dotErased-3481'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V15, V48, V49, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V52, V53)) end end}, V4, case V48 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V11)) end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('nested--12419-2920--in--un--dotTerm'('erased', V1, V2, V3, V4, V5, V6, V7, V2))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased-3346'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> begin (V10 = (('nested--12419-2919--in--un--countConstructors'('erased', V1, V2, V3, V4, V5, V6, V7, V6))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> (('case--case block in dotErased-3391'('erased', V1, V2, V3, V4, V5, V6, V7, V12, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V15, V16)) end end}, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1))})), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V19, V20)) end end}, V12, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0))})) end))))(V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V21) -> {'Idris.Prelude.Types.Right', V2} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased,dotTerm-3173'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.IMustUnify', E0, E1, E2} -> (fun (V9, V10, V11) -> V8 end(E0, E1, E2)); {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V12, V13) -> V8 end(E3, E4)); {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V14, V15) -> V8 end(E5, E6)); {'Idris.TTImp.TTImp.IAs', E7, E8, E9, E10, E11} -> (fun (V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.IBindVar', E12, E13} -> (fun (V21, V22) -> V8 end(E12, E13)); {'Idris.TTImp.TTImp.Implicit', E14, E15} -> (fun (V23, V24) -> V8 end(E14, E15)); _ -> {'Idris.TTImp.TTImp.IAs', V16, V17, V18, V19, {'Idris.TTImp.TTImp.IMustUnify', V16, {'Idris.Core.Core.ErasedArg'}, V8}} end end(E7, E8, E9, E10, E11)); _ -> {'Idris.TTImp.TTImp.IMustUnify', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V8)), {'Idris.Core.Core.ErasedArg'}, V8} end.
'case--case block in case block in dotErased,countConstructors-3013'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Context.TCon', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V23))}} end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--case block in dotErased,countConstructors-2980'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> begin (V16 = {'Idris.Prelude.Types.Just', V15}), ('case--case block in case block in dotErased,countConstructors-3013'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15, V16, case V15 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V34 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dotErased,countConstructors-2935'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V12, case V18 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V19 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V46 of {'Idris.Prelude.Types.Left', E29} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E31} -> (fun (V49) -> begin (V50 = {'Idris.Prelude.Types.Just', V49}), (('case--case block in case block in dotErased,countConstructors-3013'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V18, V49, V50, case V49 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V68 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14)) end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkPatTyValid-2780'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.MatchTooSpecific', V0, V10, V8, V7}, V16)) end; 1 -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkPatTyValid-2736'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V11, V6))(V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = (('un--concrete'('erased', V9, V8, V18))(V15))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> case V21 of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.MatchTooSpecific', V0, V10, V8, V7}, V15)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkPatTyValid-2700'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> begin (V14 = {'Idris.Prelude.Types.Just', V13}), ('case--case block in checkPatTyValid-2736'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13, V14, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V21, V22)) end end}}, case V13 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V30 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--needsDelayExpr-2476'(V0, V1, V2, V3, V4) -> case V4 of [E0 | E1] -> (fun (V5, V6) -> case V6 of [E2 | E3] -> (fun (V7, V8) -> 0 end(E2, E3)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'case--makeDefImplicit-2230'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> begin (V29 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V22, V20, V11))(V24))), case V29 of {'Idris.Prelude.Types.Left', E2} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V28, V24))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> begin (V35 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V22, V0, V34, V14, V9, V24))), case V35 of {'Idris.Prelude.Types.Left', E6} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V22, V20, V13, V17, V14, V31, V37, V24))), case V38 of {'Idris.Prelude.Types.Left', E8} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V40) -> begin (V41 = {'Idris.Core.TT.App', V13, V12, V40}), begin (V42 = (((V8(V28))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V40))))(V24))), case V42 of {'Idris.Prelude.Types.Left', E10} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'get'(V19))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> begin (V50 = begin (V49 = ('erlang':'put'(V19, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V31, V17, {'Idris.Core.TT.AutoImplicit'}, V14, V40, V37, V48))))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E14} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V52) -> ('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V41, V44, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V4, V3, V24)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V53) -> begin (V55 = begin (V54 = ('erlang':'get'(V22))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E16} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V57) -> begin (V58 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V57, V53))), case V58 of {'Idris.Prelude.Types.Left', E18} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V22, V0, V60, V14, V10, V53))), case V61 of {'Idris.Prelude.Types.Left', E20} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V63) -> begin (V64 = {'Idris.Core.TT.App', V13, V12, V63}), begin (V65 = (((V8(V57))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V14, V63))))(V53))), case V65 of {'Idris.Prelude.Types.Left', E22} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V67) -> ('un--checkAppWith'(V0, V22, V21, V20, V19, V18, V16, V15, V14, V13, V64, V67, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V4, V3, V53)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeAutoImplicit-1968'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> begin (V28 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V21, V19, V10))(V23))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V27, V23))), case V31 of {'Idris.Prelude.Types.Left', E4} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V21, V0, V33, V13, V9, V23))), case V34 of {'Idris.Prelude.Types.Left', E6} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V21, V19, V12, V16, V13, V30, V36, V23))), case V37 of {'Idris.Prelude.Types.Left', E8} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V39) -> begin (V40 = {'Idris.Core.TT.App', V12, V11, V39}), begin (V41 = (((V8(V27))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V39))))(V23))), case V41 of {'Idris.Prelude.Types.Left', E10} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E12} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V47) -> begin (V49 = begin (V48 = ('erlang':'put'(V18, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V30, V16, {'Idris.Core.TT.AutoImplicit'}, V13, V39, V36, V47))))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E14} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V51) -> ('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V40, V43, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V4, V3, V23)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E16} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V56) -> begin (V57 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V21, V19, V10))(V52))), case V57 of {'Idris.Prelude.Types.Left', E18} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V21, V0, V56, V13, V9, V52))), case V60 of {'Idris.Prelude.Types.Left', E20} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V62) -> begin (V64 = begin (V63 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E22} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V66) -> begin (V67 = ('Idris.Idris2.Core.Context':'un--getAutoImplicitLimit'(V21, V52))), case V67 of {'Idris.Prelude.Types.Left', E24} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V69) -> begin (V83 = ('Idris.Idris2.TTImp.Elab.Check':'un--searchVar'(V0, V21, V19, V12, V16, V69, {'Idris.Core.Name.Resolved', case V66 of {'Idris.TTImp.Elab.Check.MkEState', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V71 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V13, V14, V59, V62, V52))), case V83 of {'Idris.Prelude.Types.Left', E39} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V85) -> begin (V86 = {'Idris.Core.TT.App', V12, V11, V85}), begin (V87 = (((V8(V56))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V13, V85))))(V52))), case V87 of {'Idris.Prelude.Types.Left', E41} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V89) -> ('un--checkAppWith'(V0, V21, V20, V19, V18, V17, V15, V14, V13, V12, V86, V89, {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2))}, V7, V6, V5, V4, V3, V52)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getVarType-1400'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V18, V19, V20, V21, V22) -> {'Idris.Core.TT.Func'} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V23, V24, V25) -> {'Idris.Core.TT.DataCon', V23, V24} end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.TT.TyCon', V26, V27} end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> {'Idris.Core.TT.Func'} end.
'case--case block in getVarType-1329'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V16) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V8, V2, V14, V16)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> begin (V40 = begin (V18 = {'Idris.Prelude.Types.Just', V17}), ('case--case block in case block in getVarType-1400'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V18, case V17 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V36 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), begin (V41 = ((V11(V2))(V40))), begin (V63 = ('nested--11716-1136--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, ('Idris.Idris2.Core.TT':'un--getArgs'('erased', V41)), ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V17 of {'Idris.Core.Context.MkGlobalDef', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V44 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), fun (V64) -> begin (V107 = (('un--checkVisibleNS'(V8, V2, case V17 of {'Idris.Core.Context.MkGlobalDef', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V66 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V17 of {'Idris.Core.Context.MkGlobalDef', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V95 end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V64))), case V107 of {'Idris.Prelude.Types.Left', E85} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V109) -> begin (V110 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end, V63, V64))), case V110 of {'Idris.Prelude.Types.Left', E87} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V112) -> begin (V113 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expands to"/utf8>> end, V41, V64))), case V113 of {'Idris.Prelude.Types.Left', E89} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V115) -> begin (V116 = (('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Arg length "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V13)))) end))(V64))), case V116 of {'Idris.Prelude.Types.Left', E91} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V118) -> begin (V119 = (('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"getVarType is adding \x{2193}"/utf8>> end))(V64))), case V119 of {'Idris.Prelude.Types.Left', E93} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V121) -> begin (V122 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V8, V7, V2, V1, V3, V63, V64))), case V122 of {'Idris.Prelude.Types.Left', E95} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V124) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V41, {'Idris.Builtin.MkPair', V13, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V63))}}} end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getVarType-1240'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', 0, V11}}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getVarType-1207'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> begin (V11 = (('un--getNameType'(V0, V8, V7, V6, V5, V3, V2, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', 0, V15}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E9} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V19))), begin (V28 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V1 end, fun () -> fun (V27) -> V27 end end, V17))), begin (V56 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V28, case V25 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V29 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V56 of {'Idris.Prelude.Types.Left', E38} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V58) -> case V58 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V8, V2, V28, V21)) end()); {'Idris.Prelude.Types.Just', E40} -> (fun (V59) -> begin (V82 = begin (V60 = {'Idris.Prelude.Types.Just', V59}), ('case--case block in case block in getVarType-1400'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V17, V19, V20, V25, V26, V28, V59, V60, case V59 of {'Idris.Core.Context.MkGlobalDef', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V78 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), begin (V83 = ((V20(V2))(V82))), begin (V105 = ('nested--11716-1136--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V0, ('Idris.Idris2.Core.TT':'un--getArgs'('erased', V83)), ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V59 of {'Idris.Core.Context.MkGlobalDef', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104) -> V86 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), begin (V148 = (('un--checkVisibleNS'(V8, V2, case V59 of {'Idris.Core.Context.MkGlobalDef', E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126) -> V107 end(E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V59 of {'Idris.Core.Context.MkGlobalDef', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147) -> V136 end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V148 of {'Idris.Prelude.Types.Left', E125} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V150) -> begin (V151 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V28)))) end, V105, V21))), case V151 of {'Idris.Prelude.Types.Left', E127} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V153) -> begin (V154 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Expands to"/utf8>> end, V83, V21))), case V154 of {'Idris.Prelude.Types.Left', E129} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V156) -> begin (V157 = (('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Arg length "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V26)))) end))(V21))), case V157 of {'Idris.Prelude.Types.Left', E131} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V159) -> begin (V160 = (('Idris.Idris2.Core.Context.Log':'un--log'(V8, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"getVarType is adding \x{2193}"/utf8>> end))(V21))), case V160 of {'Idris.Prelude.Types.Left', E133} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V162) -> begin (V163 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V8, V7, V2, V1, V3, V105, V21))), case V163 of {'Idris.Prelude.Types.Left', E135} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V165) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V83, {'Idris.Builtin.MkPair', V26, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V105))}}} end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getNameType-916'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V14, V15, V16, V17, V18) -> {'Idris.Core.TT.Func'} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V19, V20, V21) -> {'Idris.Core.TT.DataCon', V19, V20} end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.TT.TyCon', V22, V23} end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> {'Idris.Core.TT.Func'} end.
'case--case block in getNameType-877'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V14, V15) -> case V11 of [] -> fun (V16) -> begin (V41 = begin (V17 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V12))(V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> (('un--checkVisibleNS'(V7, V2, V19, case V15 of {'Idris.Core.Context.MkGlobalDef', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V29 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V41 of {'Idris.Prelude.Types.Left', E29} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V43) -> begin (V65 = ('nested--11201-668--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, case V15 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V51 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V16))), case V65 of {'Idris.Prelude.Types.Left', E52} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V67) -> begin (V90 = begin (V68 = [{'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V14, V15}} | []]), ('case--case block in case block in getNameType-916'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12, V14, V15, V68, case V15 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V86 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Ref', V2, V90, {'Idris.Core.Name.Resolved', V14}}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V15 of {'Idris.Core.Context.MkGlobalDef', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V93 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V112) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V113) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V113)) end, V9))}, V112)) end end end(E4, E5)); _ -> fun (V114) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V115) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V115)) end, V9))}, V114)) end end end(E2, E3)); _ -> fun (V116) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V117) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V117)) end, V9))}, V116)) end end end(E0, E1)); [] -> fun (V118) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V7, V2, V1, V118)) end; _ -> fun (V119) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V120) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V120)) end, V9))}, V119)) end end.
'case--case block in getNameType-800'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.TTImp.Elab.Check.MkEState', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, [V8 | V24], V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getNameType-694'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Env.MkIsDefined', E1, E2} -> (fun (V10, V11) -> fun (V12) -> begin (V13 = ('nested--11201-668--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V4, V12))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> begin (V23 = ('Idris.Idris2.Core.Env':'un--getBinder'('erased', 'erased', {'Idris.Core.TT.dn--un--__mkWeaken', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'('erased', 'erased', V21, V22)) end end end end}, V0, V10, 'erased', V3))), begin (V24 = ('Idris.Idris2.Core.TT':'un--binderType'('erased', V23))), begin (V25 = (('Idris.Idris2.Core.Context.Log':'un--log'(V7, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"getNameType is adding \x{2193}"/utf8>> end))(V12))), case V25 of {'Idris.Prelude.Types.Left', E5} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V7, V6, V2, V1, V3, V24, V12))), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> begin (V57 = case ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V31, V32)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V37, V38)) end end}}, V11)) of 0 -> begin (V40 = begin (V39 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E9} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V42) -> begin (V56 = ('erlang':'put'(V5, case V42 of {'Idris.TTImp.Elab.Check.MkEState', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.TTImp.Elab.Check.MkEState', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, [V10 | V53], V54, V55} end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V56} end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V57 of {'Idris.Prelude.Types.Left', E24} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Local', V2, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--isLet'('erased', V23))}, V10}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, V24))}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V60) -> begin (V62 = begin (V61 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E26} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V64) -> begin (V92 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V1, case V64 of {'Idris.Core.Context.MkDefs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V65 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V60))), case V92 of {'Idris.Prelude.Types.Left', E55} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V94) -> case V94 of [E57 | E58] -> (fun (V95, V96) -> case V95 of {'Idris.Builtin.MkPair', E59, E60} -> (fun (V97, V98) -> case V98 of {'Idris.Builtin.MkPair', E61, E62} -> (fun (V99, V100) -> case V96 of [] -> begin (V125 = begin (V101 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V97))(V60))), case V101 of {'Idris.Prelude.Types.Left', E63} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V103) -> (('un--checkVisibleNS'(V7, V2, V103, case V100 of {'Idris.Core.Context.MkGlobalDef', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> V113 end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V60)) end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V125 of {'Idris.Prelude.Types.Left', E86} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V127) -> begin (V149 = ('nested--11201-668--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, case V100 of {'Idris.Core.Context.MkGlobalDef', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148) -> V135 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V60))), case V149 of {'Idris.Prelude.Types.Left', E109} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V151) -> begin (V174 = begin (V152 = [{'Idris.Builtin.MkPair', V97, {'Idris.Builtin.MkPair', V99, V100}} | []]), ('case--case block in case block in getNameType-916'(V0, V1, V2, V3, V4, V5, V6, V7, V64, V97, V99, V100, V152, case V100 of {'Idris.Core.Context.MkGlobalDef', E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131} -> (fun (V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173) -> V170 end(E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.Ref', V2, V174, {'Idris.Core.Name.Resolved', V99}}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'('erased', 'erased', case V100 of {'Idris.Core.Context.MkGlobalDef', E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152} -> (fun (V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195) -> V177 end(E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))}} end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V196) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V196)) end, V94))}, V60)) end end(E61, E62)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V197) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V197)) end, V94))}, V60)) end end(E59, E60)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V198) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V198)) end, V94))}, V60)) end end(E57, E58)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V7, V2, V1, V60)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V199) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V199)) end, V94))}, V60)) end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkVisibleNS-587'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V3, {'Idris.Core.Name.NS', V1, V0}, {'Idris.Prelude.Types.Nothing'}}, V11)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkVisibleNS-555'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--isAllPublic'(V4, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--getNS'(V4, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V4, V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = 0), (('case--case block in checkVisibleNS-587'(V0, V1, V2, V3, V4, V16, V9, V12, V15, ('Idris.Idris2.Prelude.Basics':'un--||'(V9, fun () -> ('Idris.Idris2.Core.Context':'un--visibleInAny'([V12 | V15], {'Idris.Core.Name.NS', V1, V0}, V2)) end))))(V6)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V3, {'Idris.Core.Name.NS', V1, V0}, {'Idris.Prelude.Types.Just', V1}}, V17)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11716-1136--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E8 | E9] -> (fun (V12, V13) -> case V11 of {'Idris.Core.TT.Bind', E18, E19, E20, E21} -> (fun (V14, V15, V16, V17) -> case V16 of {'Idris.Core.TT.Pi', E30, E31, E32, E33} -> (fun (V18, V19, V20, V21) -> {'Idris.Core.TT.Bind', V14, V15, {'Idris.Core.TT.Let', V18, V19, V12, V21}, ('nested--11716-1136--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V15 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V22)) end, V13)), V17))} end(E30, E31, E32, E33)); _ -> case V11 of {'Idris.Core.TT.Bind', E22, E23, E24, E25} -> (fun (V23, V24, V25, V26) -> case V25 of {'Idris.Core.TT.Let', E26, E27, E28, E29} -> (fun (V27, V28, V29, V30) -> {'Idris.Core.TT.Bind', V23, V24, {'Idris.Core.TT.Let', V27, V28, V29, V30}, ('nested--11716-1136--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V24 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V31) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V31)) end, V10)), V26))} end(E26, E27, E28, E29)); _ -> V11 end end(E22, E23, E24, E25)); _ -> V11 end end end(E18, E19, E20, E21)); _ -> case V11 of {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V32, V33, V34, V35) -> case V34 of {'Idris.Core.TT.Let', E14, E15, E16, E17} -> (fun (V36, V37, V38, V39) -> {'Idris.Core.TT.Bind', V32, V33, {'Idris.Core.TT.Let', V36, V37, V38, V39}, ('nested--11716-1136--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V33 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V40)) end, V10)), V35))} end(E14, E15, E16, E17)); _ -> V11 end end(E10, E11, E12, E13)); _ -> V11 end end end(E8, E9)); _ -> case V11 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V41, V42, V43, V44) -> case V43 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V45, V46, V47, V48) -> {'Idris.Core.TT.Bind', V41, V42, {'Idris.Core.TT.Let', V45, V46, V47, V48}, ('nested--11716-1136--in--un--useVars'(V0, V1, V2, V3, V4, V5, V6, V7, V8, [V42 | V9], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V49)) end, V10)), V44))} end(E4, E5, E6, E7)); _ -> V11 end end(E0, E1, E2, E3)); _ -> V11 end end.
'nested--19365-7879--in--un--updateElabInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V17 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V21) -> case V19 of [E1 | E2] -> (fun (V22, V23) -> case V22 of {'Idris.TTImp.TTImp.IPrimVal', E3, E4} -> (fun (V24, V25) -> case V23 of [] -> fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Context':'un--getFullName'(V15, V18))(V26))), case V27 of {'Idris.Prelude.Types.Left', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V29) -> (('case--checkApp,updateElabInfo-7959'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V21, V25, V24, V20, V18, V16, V29, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V32, V33)) end end}, ('Idris.Idris2.Core.Name':'un--dropNS'(V29)), V16))))(V26)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V34) -> {'Idris.Prelude.Types.Right', V20} end end end(E3, E4)); _ -> fun (V35) -> {'Idris.Prelude.Types.Right', V20} end end end(E1, E2)); _ -> fun (V36) -> {'Idris.Prelude.Types.Right', V20} end end end(E0)); _ -> fun (V37) -> {'Idris.Prelude.Types.Right', V20} end end.
'nested--11201-668--in--un--rigSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--getFullName'(V7, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case ('Idris.Idris2.Algebra.Preorder':'un--<'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Preorder.dn--un--__mkPreorder', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--<=_Preorder_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderRefl_Preorder_ZeroOneOmega'(V16)) end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--preorderTrans_Preorder_ZeroOneOmega'(V17, V18, V19, V20, V21)) end end end end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V24, V25)) end end}}, V8, V9)) of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.LinearMisuse', V2, V13, V8, V9}, V10)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--19365-7878--in--un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> begin (V29 = ('Idris.Idris2.Core.Normalise':'un--normalisePrims'('erased', V15, V16, fun (V21) -> ('nested--19430-7887--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V19, V18, V17, V21, case V10 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V22, V23, V24, V25, V26, V27) -> V22 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun (V28) -> ('Idris.Idris2.TTImp.TTImp':'un--isIPrimVal'(V28)) end, V17, V1, V6, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V19)), V18, V20))), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V19)) end, V31)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V19))}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--12403-2220--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V24) -> 0 end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> 0 end()); _ -> 1 end.
'nested--12397-1958--in--un--metavarImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V23) -> 0 end(E0)); {'Idris.TTImp.Elab.Check.InTransform'} -> (fun () -> 0 end()); _ -> 1 end.
'nested--12419-2920--in--un--dotTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.IMustUnify', E0, E1, E2} -> (fun (V9, V10, V11) -> V8 end(E0, E1, E2)); {'Idris.TTImp.TTImp.IBindVar', E3, E4} -> (fun (V12, V13) -> V8 end(E3, E4)); {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V14, V15) -> V8 end(E5, E6)); {'Idris.TTImp.TTImp.IAs', E7, E8, E9, E10, E11} -> (fun (V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.IBindVar', E12, E13} -> (fun (V21, V22) -> V8 end(E12, E13)); {'Idris.TTImp.TTImp.Implicit', E14, E15} -> (fun (V23, V24) -> V8 end(E14, E15)); _ -> {'Idris.TTImp.TTImp.IAs', V16, V17, V18, V19, {'Idris.TTImp.TTImp.IMustUnify', V16, {'Idris.Core.Core.ErasedArg'}, V8}} end end(E7, E8, E9, E10, E11)); _ -> {'Idris.TTImp.TTImp.IMustUnify', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V8)), {'Idris.Core.Core.ErasedArg'}, V8} end.
'nested--12419-2919--in--un--countConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> ('case--dotErased,countConstructors-2935'('erased', V1, V2, V3, V4, V5, V6, V7, V9, V11, V13, V12, V10, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V13)), V12)))) end(E0, E1, E2, E3, E4)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'nested--19430-7887--in--un--boundSafe'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.TTImp.Elab.Check.InLHS', E1} -> (fun (V22) -> 0 end(E1)); _ -> case V20 of {'Idris.Core.TT.BI', E0} -> (fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Integer'(('Idris.Idris2.Prelude.Num':'dn--un--abs_Abs_Integer'(V23)), 100)) end(E0)); _ -> 0 end end.
'un--onLHS'(V0) -> case V0 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V1) -> 0 end(E0)); _ -> 1 end.
'un--needsDelayLHS'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V5, V6, V7) -> ('un--needsDelayLHS'(V0, V6)) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V8, V9, V10) -> ('un--needsDelayLHS'(V0, V9)) end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> ('un--needsDelayLHS'(V0, V12)) end(E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IAlternative', E12, E13, E14} -> (fun (V15, V16, V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', 0} end end(E12, E13, E14)); {'Idris.TTImp.TTImp.ISearch', E15, E16} -> (fun (V19, V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', 0} end end(E15, E16)); {'Idris.TTImp.TTImp.IPrimVal', E17, E18} -> (fun (V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', 0} end end(E17, E18)); {'Idris.TTImp.TTImp.IType', E19} -> (fun (V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', 0} end end(E19)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--needsDelayExpr'(V0, V1, V2) -> case V1 of 1 -> fun (V3) -> {'Idris.Prelude.Types.Right', 1} end; 0 -> case V2 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V5, case V10 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V38 of {'Idris.Prelude.Types.Left', E31} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Right', case V40 of [E33 | E34] -> (fun (V41, V42) -> case V42 of [E35 | E36] -> (fun (V43, V44) -> 0 end(E35, E36)); _ -> 1 end end(E33, E34)); _ -> 1 end} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E37, E38, E39} -> (fun (V45, V46, V47) -> ('un--needsDelayExpr'(V0, 0, V46)) end(E37, E38, E39)); {'Idris.TTImp.TTImp.IAutoApp', E40, E41, E42} -> (fun (V48, V49, V50) -> ('un--needsDelayExpr'(V0, 0, V49)) end(E40, E41, E42)); {'Idris.TTImp.TTImp.INamedApp', E43, E44, E45, E46} -> (fun (V51, V52, V53, V54) -> ('un--needsDelayExpr'(V0, 0, V52)) end(E43, E44, E45, E46)); {'Idris.TTImp.TTImp.ILam', E47, E48, E49, E50, E51, E52} -> (fun (V55, V56, V57, V58, V59, V60) -> fun (V61) -> {'Idris.Prelude.Types.Right', 0} end end(E47, E48, E49, E50, E51, E52)); {'Idris.TTImp.TTImp.ICase', E53, E54, E55, E56} -> (fun (V62, V63, V64, V65) -> fun (V66) -> {'Idris.Prelude.Types.Right', 0} end end(E53, E54, E55, E56)); {'Idris.TTImp.TTImp.ILocal', E57, E58, E59} -> (fun (V67, V68, V69) -> fun (V70) -> {'Idris.Prelude.Types.Right', 0} end end(E57, E58, E59)); {'Idris.TTImp.TTImp.IUpdate', E60, E61, E62} -> (fun (V71, V72, V73) -> fun (V74) -> {'Idris.Prelude.Types.Right', 0} end end(E60, E61, E62)); {'Idris.TTImp.TTImp.IAlternative', E63, E64, E65} -> (fun (V75, V76, V77) -> fun (V78) -> {'Idris.Prelude.Types.Right', 0} end end(E63, E64, E65)); {'Idris.TTImp.TTImp.ISearch', E66, E67} -> (fun (V79, V80) -> fun (V81) -> {'Idris.Prelude.Types.Right', 0} end end(E66, E67)); {'Idris.TTImp.TTImp.IRewrite', E68, E69, E70} -> (fun (V82, V83, V84) -> fun (V85) -> {'Idris.Prelude.Types.Right', 0} end end(E68, E69, E70)); _ -> fun (V86) -> {'Idris.Prelude.Types.Right', 1} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--needsDelay'(V0, V1, V2, V3) -> case V1 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V4) -> ('un--needsDelayLHS'(V0, V3)) end(E0)); _ -> ('un--needsDelayExpr'(V0, V2, V3)) end.
'un--makeImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E2} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V27) -> begin (V28 = (('Idris.Idris2.Core.UnifyState':'un--genMVName'(V1, V3, V12))(V23))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V27, V23))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V33, V9, V13, V23))), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V10, V6, V9, V30, V36, V23))), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> begin (V40 = {'Idris.Core.TT.App', V10, V11, V39}), begin (V41 = (((V14(V27))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, V39))))(V23))), case V41 of {'Idris.Prelude.Types.Left', E12} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V43) -> begin (V55 = case case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E16, E17, E18, E19, E20, E21} -> (fun (V44, V45, V46, V47, V48, V49) -> V47 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 0 -> begin (V51 = begin (V50 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E14} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V53) -> begin (V54 = ('erlang':'put'(V4, ('Idris.Idris2.TTImp.Elab.Check':'un--addBindIfUnsolved'(V0, V30, V6, {'Idris.Core.TT.Implicit'}, V9, V39, V36, V53))))), {'Idris.Prelude.Types.Right', V54} end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Left', E22} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V57) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V7, V8, V9, V10, V40, V43, {'Idris.Builtin.MkPair', V21, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V22))}, V16, V17, V18, V19, V20, V23)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> ('case--makeDefImplicit-2230'(V0, V22, V23, V21, V20, V19, V18, V17, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('nested--12403-2220--in--un--metavarImp'(V0, V22, V23, V21, V20, V19, V18, V17, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V24, V25, V26, V27, V28, V29) -> V24 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> ('case--makeAutoImplicit-1968'(V0, V21, V22, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('nested--12397-1958--in--un--metavarImp'(V0, V21, V22, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V23, V24, V25, V26, V27, V28) -> V23 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isImplicitAs'(V0) -> case V0 of {'Idris.TTImp.TTImp.IAs', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> case V3 of {'Idris.Core.TT.UseLeft'} -> (fun () -> case V5 of {'Idris.TTImp.TTImp.Implicit', E5, E6} -> (fun (V6, V7) -> 0 end(E5, E6)); _ -> 1 end end()); _ -> 1 end end(E0, E1, E2, E3, E4)); _ -> 1 end.
'un--isHole'(V0, V1) -> case V1 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V2, V3, V4) -> case V3 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V5, V6, V7) -> 0 end(E3, E4, E5)); _ -> 1 end end(E0, E1, E2)); _ -> 1 end.
'un--isBindAllExpPattern'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> case V1 of <<"_"/utf8>> -> 0; _ -> 1 end end(E0)); _ -> 1 end.
'un--getVarType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--getVarType-1207'(V0, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, V8, V5)))).
'un--getNameType'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--getNameType-694'(V0, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.Env':'un--defined'(V0, V7, V5)))).
'un--findNamed'(V0, V1) -> ('case--findNamed-5126'(V1, V0, ('Idris.Idris2.Data.List':'un--partition'('erased', fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)), V0)) end, V1)))).
'un--findBindAllExpPattern'(V0) -> ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3, V4)) end end}, {'Idris.Core.Name.UN', <<"_"/utf8>>}, V0)).
'un--dotErased'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.TTImp.Elab.Check.InLHS', E0} -> (fun (V8) -> ('case--dotErased-3346'('erased', V8, V7, V6, V4, V3, V2, V1, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V15, V16)) end end}}, V8)))), fun () -> ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V23, V24)) end end}}, V6)) end)))) end(E0)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', V7} end end.
'un--concrete'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V13 = (((V7(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, {'Idris.Core.TT.Erased', V4, 1}))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('un--concrete'('erased', V1, V2, V15))(V12)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V17, V18, V19, V20, V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', 0} end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NTCon', E15, E16, E17, E18, E19} -> (fun (V23, V24, V25, V26, V27) -> fun (V28) -> {'Idris.Prelude.Types.Right', 0} end end(E15, E16, E17, E18, E19)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', 0} end end(E20, E21)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--checkVisibleNS'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--isVisible'(V0, V4, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> case V9 of 0 -> begin (V10 = ('Idris.Idris2.Core.Context':'un--isAllPublic'(V0, V6))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNS'(V0, V6))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getNestedNS'(V0, V6))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> begin (V19 = 0), (('case--case block in checkVisibleNS-587'(V5, V4, V3, V1, V0, V19, V12, V15, V18, ('Idris.Idris2.Prelude.Basics':'un--||'(V12, fun () -> ('Idris.Idris2.Core.Context':'un--visibleInAny'([V15 | V18], {'Idris.Core.Name.NS', V4, V5}, V3)) end))))(V6)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InvisibleName', V1, {'Idris.Core.Name.NS', V4, V5}, {'Idris.Prelude.Types.Just', V4}}, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--checkRestApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V35 = (('un--dotErased'('erased', V1, V13, V22, V23, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V29, V30, V31, V32, V33, V34) -> V29 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V16))(V24))), case V35 of {'Idris.Prelude.Types.Left', E10} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V37) -> begin (V41 = case V20 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> begin (V38 = (((V14(V28))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V9, {'Idris.Core.TT.Erased', V10, 1}))))(V24))), case V38 of {'Idris.Prelude.Types.Left', E12} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V40) -> (('un--concrete'('erased', V28, V9, V40))(V24)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V41 of {'Idris.Prelude.Types.Left', E14} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V43) -> begin (V50 = (('un--needsDelay'(V1, case V7 of {'Idris.TTImp.Elab.Check.MkElabInfo', E16, E17, E18, E19, E20, E21} -> (fun (V44, V45, V46, V47, V48, V49) -> V44 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43, V16))(V24))), case V50 of {'Idris.Prelude.Types.Left', E22} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V52) -> (('case--checkRestApp-3745'(V0, V22, V23, V21, V20, V19, V18, V17, V16, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V28, V37, V43, V52, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(('un--isHole'('erased', V13)), fun () -> V43 end)), fun () -> V52 end))))(V24)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkPatTyValid'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V8, V9, V10) -> case V9 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V11, V12, V13) -> fun (V14) -> begin (V42 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V12}, case V3 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V15 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V42 of {'Idris.Prelude.Types.Left', E33} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V44) -> case V44 of {'Idris.Prelude.Types.Just', E35} -> (fun (V45) -> begin (V46 = {'Idris.Prelude.Types.Just', V45}), (('case--case block in checkPatTyValid-2736'(V0, V8, V10, V13, V12, V11, V7, V6, V4, V3, V2, V1, V45, V46, ('Idris.Idris2.Algebra.Semiring':'un--isErased'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V47, V48)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V49, V50)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V53, V54)) end end}}, case V45 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V62 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V14)) end end(E35)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); _ -> fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1, E2)); _ -> fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V11 of {'Idris.Core.Value.NBind', E41, E42, E43, E44} -> (fun (V18, V19, V20, V21) -> case V20 of {'Idris.Core.TT.Pi', E86, E87, E88, E89} -> (fun (V22, V23, V24, V25) -> case V24 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V13 of [E172 | E173] -> (fun (V26, V27) -> begin (V28 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, V28, V6, V7, V8, V9, V10, V19, V25, V21, V12, V26, V27, V14, V15, V16, V17)) end end(E172, E173)); [] -> ('with--checkAppWith\x{27}-5216'(V15, V19, ('un--findNamed'(V19, V15)), V0, V22, V17, V16, V14, V12, V25, V23, V21, V18, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1)); _ -> case V12 of {'Idris.Builtin.MkPair', E133, E134} -> (fun (V29, V30) -> case V13 of [E137 | E138] -> (fun (V31, V32) -> fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V33))), case V34 of {'Idris.Prelude.Types.Left', E139} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V33))), case V37 of {'Idris.Prelude.Types.Left', E141} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V33))), case V40 of {'Idris.Prelude.Types.Left', E143} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V33))), case V43 of {'Idris.Prelude.Types.Left', E145} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V45) -> begin (V50 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V46, V47)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V48, V49)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V42, {'Idris.Core.TT.TType', V9}, V33))), case V50 of {'Idris.Prelude.Types.Left', E147} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V52) -> begin (V53 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V52))), begin (V58 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V54) -> fun (V55) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V54, V55)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V56) -> fun (V57) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V56, V57)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V45, {'Idris.Core.TT.TType', V9}, V33))), case V58 of {'Idris.Prelude.Types.Left', E149} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V60) -> begin (V61 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V31, {'Idris.Prelude.Types.Just', V53}))(V33))), case V61 of {'Idris.Prelude.Types.Left', E151} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V63) -> case V63 of {'Idris.Builtin.MkPair', E153, E154} -> (fun (V64, V65) -> begin (V66 = {'Idris.Core.TT.App', V9, V10, V64}), begin (V68 = begin (V67 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E155} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V70) -> begin (V71 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V70, V8, V60))(V33))), case V71 of {'Idris.Prelude.Types.Left', E157} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E157)); {'Idris.Prelude.Types.Right', E158} -> (fun (V73) -> begin (V74 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V42, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V52}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V60))}))), begin (V75 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V74, V33))), case V75 of {'Idris.Prelude.Types.Left', E159} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E159)); {'Idris.Prelude.Types.Right', E160} -> (fun (V77) -> begin (V79 = case V17 of {'Idris.Prelude.Types.Just', E161} -> (fun (V78) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V78, V33)) end(E161)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V79 of {'Idris.Prelude.Types.Left', E162} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V81) -> begin (V82 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V66, V73, {'Idris.Builtin.MkPair', V29, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V30))}, V32, V14, V15, V16, V17))(V33))), case V82 of {'Idris.Prelude.Types.Left', E164} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V84) -> begin (V85 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V70, V8, V11)), V74))(V33))), case V85 of {'Idris.Prelude.Types.Left', E166} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V87) -> begin (V88 = {'Idris.Builtin.MkPair', V64, V65}), (('case--case block in checkAppWith\x{27}-7064'(V29, V30, V31, V32, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V42, V45, V52, V53, V60, V64, V65, V88, V66, V70, V73, V74, V84, V87, case V87 of {'Idris.Core.Unify.MkUnifyResult', E168, E169, E170, E171} -> (fun (V89, V90, V91, V92) -> V89 end(E168, E169, E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V33)) end end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E160)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E153, E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E137, E138)); _ -> case V13 of [] -> fun (V93) -> begin (V95 = begin (V94 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V94} end), case V95 of {'Idris.Prelude.Types.Left', E135} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V97) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V97, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V102, V103, V104)) end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V107, V108, V109)) end end end end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V111)) end end}, fun (V112) -> ('un--isImplicitAs'(V112)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V98) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V98)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V99) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V99)))))) end, V15))))))))))(V93)) end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133, E134)); _ -> case V13 of [] -> fun (V113) -> begin (V115 = begin (V114 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V114} end), case V115 of {'Idris.Prelude.Types.Left', E131} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V117) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V117, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V122, V123, V124)) end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V127, V128, V129)) end end end end end, fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V131)) end end}, fun (V132) -> ('un--isImplicitAs'(V132)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V118) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V118)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V119) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V119)))))) end, V15))))))))))(V113)) end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E174} -> (fun (V133) -> begin (V134 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), fun (V135) -> begin (V136 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V133))(V135))), case V136 of {'Idris.Prelude.Types.Left', E175} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V138) -> begin (V140 = begin (V139 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V139} end), case V140 of {'Idris.Prelude.Types.Left', E177} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V142) -> begin (V143 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.Implicit'}, V25}, V21}), case V138 of {'Idris.Core.Value.NBind', E185, E186, E187, E188} -> (fun (V144, V145, V146, V147) -> case V146 of {'Idris.Core.TT.Pi', E195, E196, E197, E198} -> (fun (V148, V149, V150, V151) -> case V150 of {'Idris.Core.TT.Implicit'} -> (fun () -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V142, V8, V143)), {'Idris.Prelude.Types.Just', V133}))(V135)) end()); _ -> (('case--case block in checkAppWith\x{27}-5728'(V0, V22, V133, V16, V12, V25, V23, V21, V19, V18, V143, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V134, V138, V142, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E199, E200, E201, E202, E203, E204} -> (fun (V152, V153, V154, V155, V156, V157) -> V156 end(E199, E200, E201, E202, E203, E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V135)) end end(E195, E196, E197, E198)); _ -> (('case--case block in checkAppWith\x{27}-5728'(V0, V22, V133, V16, V12, V25, V23, V21, V19, V18, V143, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V134, V138, V142, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E189, E190, E191, E192, E193, E194} -> (fun (V158, V159, V160, V161, V162, V163) -> V162 end(E189, E190, E191, E192, E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V135)) end end(E185, E186, E187, E188)); _ -> (('case--case block in checkAppWith\x{27}-5728'(V0, V22, V133, V16, V12, V25, V23, V21, V19, V18, V143, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V134, V138, V142, ('Idris.Idris2.Prelude.Basics':'un--not'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E179, E180, E181, E182, E183, E184} -> (fun (V164, V165, V166, V167, V168, V169) -> V168 end(E179, E180, E181, E182, E183, E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V135)) end end end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E174)); _ -> begin (V170 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('case--checkAppWith\x{27}-6563'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V170, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V171 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('case--checkAppWith\x{27}-6563'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V171, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V172 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('case--checkAppWith\x{27}-6563'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V172, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V173 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('case--checkAppWith\x{27}-6563'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V173, ('un--findNamed'(V19, V15)))) end end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E377} -> (fun (V174) -> begin (V175 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), fun (V176) -> begin (V177 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V174))(V176))), case V177 of {'Idris.Prelude.Types.Left', E378} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E378)); {'Idris.Prelude.Types.Right', E379} -> (fun (V179) -> begin (V181 = begin (V180 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V180} end), case V181 of {'Idris.Prelude.Types.Left', E380} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E380)); {'Idris.Prelude.Types.Right', E381} -> (fun (V183) -> begin (V184 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.AutoImplicit'}, V25}, V21}), case V179 of {'Idris.Core.Value.NBind', E382, E383, E384, E385} -> (fun (V185, V186, V187, V188) -> case V187 of {'Idris.Core.TT.Pi', E386, E387, E388, E389} -> (fun (V189, V190, V191, V192) -> case V191 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V183, V8, V184)), {'Idris.Prelude.Types.Just', V174}))(V176)) end()); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V175, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V174}))(V176)) end end(E386, E387, E388, E389)); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V175, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V174}))(V176)) end end(E382, E383, E384, E385)); _ -> (('un--makeAutoImplicit'(V0, V1, V2, V3, V4, V5, V175, V6, V7, V8, V9, V10, V19, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V174}))(V176)) end end end(E381)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E379)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E377)); _ -> case V14 of [E375 | E376] -> (fun (V193, V194) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V193, V13, V194, V15, V16, V17)) end(E375, E376)); [] -> begin (V195 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('case--checkAppWith\x{27}-6419'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V195, ('un--findNamed'(V19, V15)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E336, E337} -> (fun (V196, V197) -> case V13 of [E340 | E341] -> (fun (V198, V199) -> fun (V200) -> begin (V201 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V200))), case V201 of {'Idris.Prelude.Types.Left', E342} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E342)); {'Idris.Prelude.Types.Right', E343} -> (fun (V203) -> begin (V204 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V200))), case V204 of {'Idris.Prelude.Types.Left', E344} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E344)); {'Idris.Prelude.Types.Right', E345} -> (fun (V206) -> begin (V207 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V200))), case V207 of {'Idris.Prelude.Types.Left', E346} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E346)); {'Idris.Prelude.Types.Right', E347} -> (fun (V209) -> begin (V210 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V200))), case V210 of {'Idris.Prelude.Types.Left', E348} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E348)); {'Idris.Prelude.Types.Right', E349} -> (fun (V212) -> begin (V217 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V213) -> fun (V214) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V213, V214)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V215) -> fun (V216) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V215, V216)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V209, {'Idris.Core.TT.TType', V9}, V200))), case V217 of {'Idris.Prelude.Types.Left', E350} -> (fun (V218) -> {'Idris.Prelude.Types.Left', V218} end(E350)); {'Idris.Prelude.Types.Right', E351} -> (fun (V219) -> begin (V220 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V219))), begin (V225 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V221) -> fun (V222) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V221, V222)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V223) -> fun (V224) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V223, V224)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V212, {'Idris.Core.TT.TType', V9}, V200))), case V225 of {'Idris.Prelude.Types.Left', E352} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E352)); {'Idris.Prelude.Types.Right', E353} -> (fun (V227) -> begin (V228 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V198, {'Idris.Prelude.Types.Just', V220}))(V200))), case V228 of {'Idris.Prelude.Types.Left', E354} -> (fun (V229) -> {'Idris.Prelude.Types.Left', V229} end(E354)); {'Idris.Prelude.Types.Right', E355} -> (fun (V230) -> case V230 of {'Idris.Builtin.MkPair', E356, E357} -> (fun (V231, V232) -> begin (V233 = {'Idris.Core.TT.App', V9, V10, V231}), begin (V235 = begin (V234 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V234} end), case V235 of {'Idris.Prelude.Types.Left', E358} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E358)); {'Idris.Prelude.Types.Right', E359} -> (fun (V237) -> begin (V238 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V237, V8, V227))(V200))), case V238 of {'Idris.Prelude.Types.Left', E360} -> (fun (V239) -> {'Idris.Prelude.Types.Left', V239} end(E360)); {'Idris.Prelude.Types.Right', E361} -> (fun (V240) -> begin (V241 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V209, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V219}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V227))}))), begin (V242 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V241, V200))), case V242 of {'Idris.Prelude.Types.Left', E362} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E362)); {'Idris.Prelude.Types.Right', E363} -> (fun (V244) -> begin (V246 = case V17 of {'Idris.Prelude.Types.Just', E364} -> (fun (V245) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V245, V200)) end(E364)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V246 of {'Idris.Prelude.Types.Left', E365} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E365)); {'Idris.Prelude.Types.Right', E366} -> (fun (V248) -> begin (V249 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V233, V240, {'Idris.Builtin.MkPair', V196, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V197))}, V199, V14, V15, V16, V17))(V200))), case V249 of {'Idris.Prelude.Types.Left', E367} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E367)); {'Idris.Prelude.Types.Right', E368} -> (fun (V251) -> begin (V252 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V237, V8, V11)), V241))(V200))), case V252 of {'Idris.Prelude.Types.Left', E369} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E369)); {'Idris.Prelude.Types.Right', E370} -> (fun (V254) -> begin (V255 = {'Idris.Builtin.MkPair', V231, V232}), (('case--case block in checkAppWith\x{27}-7064'(V196, V197, V198, V199, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V209, V212, V219, V220, V227, V231, V232, V255, V233, V237, V240, V241, V251, V254, case V254 of {'Idris.Core.Unify.MkUnifyResult', E371, E372, E373, E374} -> (fun (V256, V257, V258, V259) -> V256 end(E371, E372, E373, E374)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V200)) end end(E370)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E368)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E366)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E363)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E361)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E359)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E356, E357)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E355)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E351)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E349)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E347)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E345)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E343)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E340, E341)); _ -> case V13 of [] -> fun (V260) -> begin (V262 = begin (V261 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V261} end), case V262 of {'Idris.Prelude.Types.Left', E338} -> (fun (V263) -> {'Idris.Prelude.Types.Left', V263} end(E338)); {'Idris.Prelude.Types.Right', E339} -> (fun (V264) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V264, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V269, V270, V271)) end end end end end, fun (V272) -> fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V274, V275, V276)) end end end end end, fun (V277) -> fun (V278) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V278)) end end}, fun (V279) -> ('un--isImplicitAs'(V279)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V265) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V265)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V266) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V266)))))) end, V15))))))))))(V260)) end(E339)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E336, E337)); _ -> case V13 of [] -> fun (V280) -> begin (V282 = begin (V281 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V281} end), case V282 of {'Idris.Prelude.Types.Left', E334} -> (fun (V283) -> {'Idris.Prelude.Types.Left', V283} end(E334)); {'Idris.Prelude.Types.Right', E335} -> (fun (V284) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V284, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V289, V290, V291)) end end end end end, fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V294, V295, V296)) end end end end end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V298)) end end}, fun (V299) -> ('un--isImplicitAs'(V299)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V285) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V285)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V286) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V286)))))) end, V15))))))))))(V280)) end(E335)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V14 of [E332 | E333] -> (fun (V300, V301) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V300, V13, V301, V15, V16, V17)) end(E332, E333)); [] -> begin (V302 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('case--checkAppWith\x{27}-6419'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V302, ('un--findNamed'(V19, V15)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E293, E294} -> (fun (V303, V304) -> case V13 of [E297 | E298] -> (fun (V305, V306) -> fun (V307) -> begin (V308 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V307))), case V308 of {'Idris.Prelude.Types.Left', E299} -> (fun (V309) -> {'Idris.Prelude.Types.Left', V309} end(E299)); {'Idris.Prelude.Types.Right', E300} -> (fun (V310) -> begin (V311 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V307))), case V311 of {'Idris.Prelude.Types.Left', E301} -> (fun (V312) -> {'Idris.Prelude.Types.Left', V312} end(E301)); {'Idris.Prelude.Types.Right', E302} -> (fun (V313) -> begin (V314 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V307))), case V314 of {'Idris.Prelude.Types.Left', E303} -> (fun (V315) -> {'Idris.Prelude.Types.Left', V315} end(E303)); {'Idris.Prelude.Types.Right', E304} -> (fun (V316) -> begin (V317 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V307))), case V317 of {'Idris.Prelude.Types.Left', E305} -> (fun (V318) -> {'Idris.Prelude.Types.Left', V318} end(E305)); {'Idris.Prelude.Types.Right', E306} -> (fun (V319) -> begin (V324 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V320) -> fun (V321) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V320, V321)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V322) -> fun (V323) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V322, V323)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V316, {'Idris.Core.TT.TType', V9}, V307))), case V324 of {'Idris.Prelude.Types.Left', E307} -> (fun (V325) -> {'Idris.Prelude.Types.Left', V325} end(E307)); {'Idris.Prelude.Types.Right', E308} -> (fun (V326) -> begin (V327 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V326))), begin (V332 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V328) -> fun (V329) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V328, V329)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V330) -> fun (V331) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V330, V331)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V319, {'Idris.Core.TT.TType', V9}, V307))), case V332 of {'Idris.Prelude.Types.Left', E309} -> (fun (V333) -> {'Idris.Prelude.Types.Left', V333} end(E309)); {'Idris.Prelude.Types.Right', E310} -> (fun (V334) -> begin (V335 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V305, {'Idris.Prelude.Types.Just', V327}))(V307))), case V335 of {'Idris.Prelude.Types.Left', E311} -> (fun (V336) -> {'Idris.Prelude.Types.Left', V336} end(E311)); {'Idris.Prelude.Types.Right', E312} -> (fun (V337) -> case V337 of {'Idris.Builtin.MkPair', E313, E314} -> (fun (V338, V339) -> begin (V340 = {'Idris.Core.TT.App', V9, V10, V338}), begin (V342 = begin (V341 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V341} end), case V342 of {'Idris.Prelude.Types.Left', E315} -> (fun (V343) -> {'Idris.Prelude.Types.Left', V343} end(E315)); {'Idris.Prelude.Types.Right', E316} -> (fun (V344) -> begin (V345 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V344, V8, V334))(V307))), case V345 of {'Idris.Prelude.Types.Left', E317} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E317)); {'Idris.Prelude.Types.Right', E318} -> (fun (V347) -> begin (V348 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V316, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V326}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V334))}))), begin (V349 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V348, V307))), case V349 of {'Idris.Prelude.Types.Left', E319} -> (fun (V350) -> {'Idris.Prelude.Types.Left', V350} end(E319)); {'Idris.Prelude.Types.Right', E320} -> (fun (V351) -> begin (V353 = case V17 of {'Idris.Prelude.Types.Just', E321} -> (fun (V352) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V352, V307)) end(E321)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V353 of {'Idris.Prelude.Types.Left', E322} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E322)); {'Idris.Prelude.Types.Right', E323} -> (fun (V355) -> begin (V356 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V340, V347, {'Idris.Builtin.MkPair', V303, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V304))}, V306, V14, V15, V16, V17))(V307))), case V356 of {'Idris.Prelude.Types.Left', E324} -> (fun (V357) -> {'Idris.Prelude.Types.Left', V357} end(E324)); {'Idris.Prelude.Types.Right', E325} -> (fun (V358) -> begin (V359 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V344, V8, V11)), V348))(V307))), case V359 of {'Idris.Prelude.Types.Left', E326} -> (fun (V360) -> {'Idris.Prelude.Types.Left', V360} end(E326)); {'Idris.Prelude.Types.Right', E327} -> (fun (V361) -> begin (V362 = {'Idris.Builtin.MkPair', V338, V339}), (('case--case block in checkAppWith\x{27}-7064'(V303, V304, V305, V306, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V316, V319, V326, V327, V334, V338, V339, V362, V340, V344, V347, V348, V358, V361, case V361 of {'Idris.Core.Unify.MkUnifyResult', E328, E329, E330, E331} -> (fun (V363, V364, V365, V366) -> V363 end(E328, E329, E330, E331)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V307)) end end(E327)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E325)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E320)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E318)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E316)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E313, E314)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E312)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E310)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E308)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E306)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E304)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E300)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E297, E298)); _ -> case V13 of [] -> fun (V367) -> begin (V369 = begin (V368 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V368} end), case V369 of {'Idris.Prelude.Types.Left', E295} -> (fun (V370) -> {'Idris.Prelude.Types.Left', V370} end(E295)); {'Idris.Prelude.Types.Right', E296} -> (fun (V371) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V371, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V374) -> fun (V375) -> fun (V376) -> fun (V377) -> fun (V378) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V376, V377, V378)) end end end end end, fun (V379) -> fun (V380) -> fun (V381) -> fun (V382) -> fun (V383) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V381, V382, V383)) end end end end end, fun (V384) -> fun (V385) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V385)) end end}, fun (V386) -> ('un--isImplicitAs'(V386)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V372) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V372)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V373) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V373)))))) end, V15))))))))))(V367)) end(E296)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E293, E294)); _ -> case V13 of [] -> fun (V387) -> begin (V389 = begin (V388 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V388} end), case V389 of {'Idris.Prelude.Types.Left', E291} -> (fun (V390) -> {'Idris.Prelude.Types.Left', V390} end(E291)); {'Idris.Prelude.Types.Right', E292} -> (fun (V391) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V391, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V394) -> fun (V395) -> fun (V396) -> fun (V397) -> fun (V398) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V396, V397, V398)) end end end end end, fun (V399) -> fun (V400) -> fun (V401) -> fun (V402) -> fun (V403) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V401, V402, V403)) end end end end end, fun (V404) -> fun (V405) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V405)) end end}, fun (V406) -> ('un--isImplicitAs'(V406)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V392) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V392)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V393) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V393)))))) end, V15))))))))))(V387)) end(E292)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V14 of [E289 | E290] -> (fun (V407, V408) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V407, V13, V408, V15, V16, V17)) end(E289, E290)); [] -> begin (V409 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('case--checkAppWith\x{27}-6419'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V409, ('un--findNamed'(V19, V15)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E250, E251} -> (fun (V410, V411) -> case V13 of [E254 | E255] -> (fun (V412, V413) -> fun (V414) -> begin (V415 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V414))), case V415 of {'Idris.Prelude.Types.Left', E256} -> (fun (V416) -> {'Idris.Prelude.Types.Left', V416} end(E256)); {'Idris.Prelude.Types.Right', E257} -> (fun (V417) -> begin (V418 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V414))), case V418 of {'Idris.Prelude.Types.Left', E258} -> (fun (V419) -> {'Idris.Prelude.Types.Left', V419} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V420) -> begin (V421 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V414))), case V421 of {'Idris.Prelude.Types.Left', E260} -> (fun (V422) -> {'Idris.Prelude.Types.Left', V422} end(E260)); {'Idris.Prelude.Types.Right', E261} -> (fun (V423) -> begin (V424 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V414))), case V424 of {'Idris.Prelude.Types.Left', E262} -> (fun (V425) -> {'Idris.Prelude.Types.Left', V425} end(E262)); {'Idris.Prelude.Types.Right', E263} -> (fun (V426) -> begin (V431 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V427) -> fun (V428) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V427, V428)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V429) -> fun (V430) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V429, V430)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V423, {'Idris.Core.TT.TType', V9}, V414))), case V431 of {'Idris.Prelude.Types.Left', E264} -> (fun (V432) -> {'Idris.Prelude.Types.Left', V432} end(E264)); {'Idris.Prelude.Types.Right', E265} -> (fun (V433) -> begin (V434 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V433))), begin (V439 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V435) -> fun (V436) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V435, V436)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V437) -> fun (V438) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V437, V438)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V426, {'Idris.Core.TT.TType', V9}, V414))), case V439 of {'Idris.Prelude.Types.Left', E266} -> (fun (V440) -> {'Idris.Prelude.Types.Left', V440} end(E266)); {'Idris.Prelude.Types.Right', E267} -> (fun (V441) -> begin (V442 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V412, {'Idris.Prelude.Types.Just', V434}))(V414))), case V442 of {'Idris.Prelude.Types.Left', E268} -> (fun (V443) -> {'Idris.Prelude.Types.Left', V443} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V444) -> case V444 of {'Idris.Builtin.MkPair', E270, E271} -> (fun (V445, V446) -> begin (V447 = {'Idris.Core.TT.App', V9, V10, V445}), begin (V449 = begin (V448 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V448} end), case V449 of {'Idris.Prelude.Types.Left', E272} -> (fun (V450) -> {'Idris.Prelude.Types.Left', V450} end(E272)); {'Idris.Prelude.Types.Right', E273} -> (fun (V451) -> begin (V452 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V451, V8, V441))(V414))), case V452 of {'Idris.Prelude.Types.Left', E274} -> (fun (V453) -> {'Idris.Prelude.Types.Left', V453} end(E274)); {'Idris.Prelude.Types.Right', E275} -> (fun (V454) -> begin (V455 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V423, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V433}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V441))}))), begin (V456 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V455, V414))), case V456 of {'Idris.Prelude.Types.Left', E276} -> (fun (V457) -> {'Idris.Prelude.Types.Left', V457} end(E276)); {'Idris.Prelude.Types.Right', E277} -> (fun (V458) -> begin (V460 = case V17 of {'Idris.Prelude.Types.Just', E278} -> (fun (V459) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V459, V414)) end(E278)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V460 of {'Idris.Prelude.Types.Left', E279} -> (fun (V461) -> {'Idris.Prelude.Types.Left', V461} end(E279)); {'Idris.Prelude.Types.Right', E280} -> (fun (V462) -> begin (V463 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V447, V454, {'Idris.Builtin.MkPair', V410, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V411))}, V413, V14, V15, V16, V17))(V414))), case V463 of {'Idris.Prelude.Types.Left', E281} -> (fun (V464) -> {'Idris.Prelude.Types.Left', V464} end(E281)); {'Idris.Prelude.Types.Right', E282} -> (fun (V465) -> begin (V466 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V451, V8, V11)), V455))(V414))), case V466 of {'Idris.Prelude.Types.Left', E283} -> (fun (V467) -> {'Idris.Prelude.Types.Left', V467} end(E283)); {'Idris.Prelude.Types.Right', E284} -> (fun (V468) -> begin (V469 = {'Idris.Builtin.MkPair', V445, V446}), (('case--case block in checkAppWith\x{27}-7064'(V410, V411, V412, V413, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V423, V426, V433, V434, V441, V445, V446, V469, V447, V451, V454, V455, V465, V468, case V468 of {'Idris.Core.Unify.MkUnifyResult', E285, E286, E287, E288} -> (fun (V470, V471, V472, V473) -> V470 end(E285, E286, E287, E288)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V414)) end end(E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E282)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E280)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E277)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E270, E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E265)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E254, E255)); _ -> case V13 of [] -> fun (V474) -> begin (V476 = begin (V475 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V475} end), case V476 of {'Idris.Prelude.Types.Left', E252} -> (fun (V477) -> {'Idris.Prelude.Types.Left', V477} end(E252)); {'Idris.Prelude.Types.Right', E253} -> (fun (V478) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V478, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V481) -> fun (V482) -> fun (V483) -> fun (V484) -> fun (V485) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V483, V484, V485)) end end end end end, fun (V486) -> fun (V487) -> fun (V488) -> fun (V489) -> fun (V490) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V488, V489, V490)) end end end end end, fun (V491) -> fun (V492) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V492)) end end}, fun (V493) -> ('un--isImplicitAs'(V493)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V479) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V479)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V480) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V480)))))) end, V15))))))))))(V474)) end(E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E250, E251)); _ -> case V13 of [] -> fun (V494) -> begin (V496 = begin (V495 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V495} end), case V496 of {'Idris.Prelude.Types.Left', E248} -> (fun (V497) -> {'Idris.Prelude.Types.Left', V497} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V498) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V498, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> fun (V505) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V503, V504, V505)) end end end end end, fun (V506) -> fun (V507) -> fun (V508) -> fun (V509) -> fun (V510) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V508, V509, V510)) end end end end end, fun (V511) -> fun (V512) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V512)) end end}, fun (V513) -> ('un--isImplicitAs'(V513)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V499) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V499)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V500) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V500)))))) end, V15))))))))))(V494)) end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> case V14 of [E246 | E247] -> (fun (V514, V515) -> ('un--checkRestApp'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23)), V6, V7, V8, V9, V10, V19, V25, V21, V12, V514, V13, V515, V15, V16, V17)) end(E246, E247)); [] -> begin (V516 = ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V5, V23))), ('case--checkAppWith\x{27}-6419'(V0, V22, V25, V23, V21, V19, V18, V17, V16, V15, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V516, ('un--findNamed'(V19, V15)))) end; _ -> case V12 of {'Idris.Builtin.MkPair', E207, E208} -> (fun (V517, V518) -> case V13 of [E211 | E212] -> (fun (V519, V520) -> fun (V521) -> begin (V522 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V521))), case V522 of {'Idris.Prelude.Types.Left', E213} -> (fun (V523) -> {'Idris.Prelude.Types.Left', V523} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V524) -> begin (V525 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V521))), case V525 of {'Idris.Prelude.Types.Left', E215} -> (fun (V526) -> {'Idris.Prelude.Types.Left', V526} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V527) -> begin (V528 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V521))), case V528 of {'Idris.Prelude.Types.Left', E217} -> (fun (V529) -> {'Idris.Prelude.Types.Left', V529} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V530) -> begin (V531 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V521))), case V531 of {'Idris.Prelude.Types.Left', E219} -> (fun (V532) -> {'Idris.Prelude.Types.Left', V532} end(E219)); {'Idris.Prelude.Types.Right', E220} -> (fun (V533) -> begin (V538 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V534) -> fun (V535) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V534, V535)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V536) -> fun (V537) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V536, V537)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V530, {'Idris.Core.TT.TType', V9}, V521))), case V538 of {'Idris.Prelude.Types.Left', E221} -> (fun (V539) -> {'Idris.Prelude.Types.Left', V539} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V540) -> begin (V541 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V540))), begin (V546 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V542) -> fun (V543) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V542, V543)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V544) -> fun (V545) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V544, V545)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V533, {'Idris.Core.TT.TType', V9}, V521))), case V546 of {'Idris.Prelude.Types.Left', E223} -> (fun (V547) -> {'Idris.Prelude.Types.Left', V547} end(E223)); {'Idris.Prelude.Types.Right', E224} -> (fun (V548) -> begin (V549 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V519, {'Idris.Prelude.Types.Just', V541}))(V521))), case V549 of {'Idris.Prelude.Types.Left', E225} -> (fun (V550) -> {'Idris.Prelude.Types.Left', V550} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V551) -> case V551 of {'Idris.Builtin.MkPair', E227, E228} -> (fun (V552, V553) -> begin (V554 = {'Idris.Core.TT.App', V9, V10, V552}), begin (V556 = begin (V555 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V555} end), case V556 of {'Idris.Prelude.Types.Left', E229} -> (fun (V557) -> {'Idris.Prelude.Types.Left', V557} end(E229)); {'Idris.Prelude.Types.Right', E230} -> (fun (V558) -> begin (V559 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V558, V8, V548))(V521))), case V559 of {'Idris.Prelude.Types.Left', E231} -> (fun (V560) -> {'Idris.Prelude.Types.Left', V560} end(E231)); {'Idris.Prelude.Types.Right', E232} -> (fun (V561) -> begin (V562 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V530, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V540}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V548))}))), begin (V563 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V562, V521))), case V563 of {'Idris.Prelude.Types.Left', E233} -> (fun (V564) -> {'Idris.Prelude.Types.Left', V564} end(E233)); {'Idris.Prelude.Types.Right', E234} -> (fun (V565) -> begin (V567 = case V17 of {'Idris.Prelude.Types.Just', E235} -> (fun (V566) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V566, V521)) end(E235)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V567 of {'Idris.Prelude.Types.Left', E236} -> (fun (V568) -> {'Idris.Prelude.Types.Left', V568} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V569) -> begin (V570 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V554, V561, {'Idris.Builtin.MkPair', V517, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V518))}, V520, V14, V15, V16, V17))(V521))), case V570 of {'Idris.Prelude.Types.Left', E238} -> (fun (V571) -> {'Idris.Prelude.Types.Left', V571} end(E238)); {'Idris.Prelude.Types.Right', E239} -> (fun (V572) -> begin (V573 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V558, V8, V11)), V562))(V521))), case V573 of {'Idris.Prelude.Types.Left', E240} -> (fun (V574) -> {'Idris.Prelude.Types.Left', V574} end(E240)); {'Idris.Prelude.Types.Right', E241} -> (fun (V575) -> begin (V576 = {'Idris.Builtin.MkPair', V552, V553}), (('case--case block in checkAppWith\x{27}-7064'(V517, V518, V519, V520, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V530, V533, V540, V541, V548, V552, V553, V576, V554, V558, V561, V562, V572, V575, case V575 of {'Idris.Core.Unify.MkUnifyResult', E242, E243, E244, E245} -> (fun (V577, V578, V579, V580) -> V577 end(E242, E243, E244, E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V521)) end end(E241)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E227, E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E211, E212)); _ -> case V13 of [] -> fun (V581) -> begin (V583 = begin (V582 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V582} end), case V583 of {'Idris.Prelude.Types.Left', E209} -> (fun (V584) -> {'Idris.Prelude.Types.Left', V584} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V585) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V585, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V588) -> fun (V589) -> fun (V590) -> fun (V591) -> fun (V592) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V590, V591, V592)) end end end end end, fun (V593) -> fun (V594) -> fun (V595) -> fun (V596) -> fun (V597) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V595, V596, V597)) end end end end end, fun (V598) -> fun (V599) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V599)) end end}, fun (V600) -> ('un--isImplicitAs'(V600)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V586) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V586)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V587) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V587)))))) end, V15))))))))))(V581)) end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E207, E208)); _ -> case V13 of [] -> fun (V601) -> begin (V603 = begin (V602 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V602} end), case V603 of {'Idris.Prelude.Types.Left', E205} -> (fun (V604) -> {'Idris.Prelude.Types.Left', V604} end(E205)); {'Idris.Prelude.Types.Right', E206} -> (fun (V605) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V605, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V608) -> fun (V609) -> fun (V610) -> fun (V611) -> fun (V612) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V610, V611, V612)) end end end end end, fun (V613) -> fun (V614) -> fun (V615) -> fun (V616) -> fun (V617) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V615, V616, V617)) end end end end end, fun (V618) -> fun (V619) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V619)) end end}, fun (V620) -> ('un--isImplicitAs'(V620)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V606) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V606)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V607) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V607)))))) end, V15))))))))))(V601)) end(E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); {'Idris.Core.TT.DefImplicit', E390} -> (fun (V621) -> case V13 of [] -> case V14 of [] -> case V15 of [] -> case V17 of {'Idris.Prelude.Types.Just', E391} -> (fun (V622) -> begin (V623 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), fun (V624) -> begin (V625 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V622))(V624))), case V625 of {'Idris.Prelude.Types.Left', E392} -> (fun (V626) -> {'Idris.Prelude.Types.Left', V626} end(E392)); {'Idris.Prelude.Types.Right', E393} -> (fun (V627) -> begin (V629 = begin (V628 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V628} end), case V629 of {'Idris.Prelude.Types.Left', E394} -> (fun (V630) -> {'Idris.Prelude.Types.Left', V630} end(E394)); {'Idris.Prelude.Types.Right', E395} -> (fun (V631) -> begin (V632 = {'Idris.Core.Value.NBind', V18, V19, {'Idris.Core.TT.Pi', V22, V23, {'Idris.Core.TT.DefImplicit', V621}, V25}, V21}), case V627 of {'Idris.Core.Value.NBind', E396, E397, E398, E399} -> (fun (V633, V634, V635, V636) -> case V635 of {'Idris.Core.TT.Pi', E400, E401, E402, E403} -> (fun (V637, V638, V639, V640) -> case V639 of {'Idris.Core.TT.DefImplicit', E404} -> (fun (V641) -> begin (V642 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_NF'(V1, V0, V631, V8, V621, V641, V624))), case V642 of {'Idris.Prelude.Types.Left', E405} -> (fun (V643) -> {'Idris.Prelude.Types.Left', V643} end(E405)); {'Idris.Prelude.Types.Right', E406} -> (fun (V644) -> case V644 of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V1, V3, V4, V5, V6, V8, V9, V10, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V631, V8, V632)), {'Idris.Prelude.Types.Just', V622}))(V624)); 1 -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V623, V6, V7, V8, V9, V10, V19, V621, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V622}))(V624)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E406)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E404)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V623, V6, V7, V8, V9, V10, V19, V621, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V622}))(V624)) end end(E400, E401, E402, E403)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V623, V6, V7, V8, V9, V10, V19, V621, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V622}))(V624)) end end(E396, E397, E398, E399)); _ -> (('un--makeDefImplicit'(V0, V1, V2, V3, V4, V5, V623, V6, V7, V8, V9, V10, V19, V621, V25, V21, V12, [], [], [], V16, {'Idris.Prelude.Types.Just', V622}))(V624)) end end end(E395)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E393)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E391)); _ -> begin (V645 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), ('case--checkAppWith\x{27}-6706'(V0, V22, V621, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V645, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V646 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), ('case--checkAppWith\x{27}-6706'(V0, V22, V621, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V646, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V647 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), ('case--checkAppWith\x{27}-6706'(V0, V22, V621, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V647, ('un--findNamed'(V19, V15)))) end end; _ -> begin (V648 = ('Idris.Idris2.Algebra.ZeroOneOmega':'un--rigMult'(V5, V23))), ('case--checkAppWith\x{27}-6706'(V0, V22, V621, V25, V23, V21, V19, V18, V17, V16, V15, V14, V13, V12, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V648, ('un--findNamed'(V19, V15)))) end end end(E390)); _ -> case V12 of {'Idris.Builtin.MkPair', E92, E93} -> (fun (V649, V650) -> case V13 of [E96 | E97] -> (fun (V651, V652) -> fun (V653) -> begin (V654 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V653))), case V654 of {'Idris.Prelude.Types.Left', E98} -> (fun (V655) -> {'Idris.Prelude.Types.Left', V655} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V656) -> begin (V657 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V653))), case V657 of {'Idris.Prelude.Types.Left', E100} -> (fun (V658) -> {'Idris.Prelude.Types.Left', V658} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V659) -> begin (V660 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V653))), case V660 of {'Idris.Prelude.Types.Left', E102} -> (fun (V661) -> {'Idris.Prelude.Types.Left', V661} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V662) -> begin (V663 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V653))), case V663 of {'Idris.Prelude.Types.Left', E104} -> (fun (V664) -> {'Idris.Prelude.Types.Left', V664} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V665) -> begin (V670 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V666) -> fun (V667) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V666, V667)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V668) -> fun (V669) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V668, V669)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V662, {'Idris.Core.TT.TType', V9}, V653))), case V670 of {'Idris.Prelude.Types.Left', E106} -> (fun (V671) -> {'Idris.Prelude.Types.Left', V671} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V672) -> begin (V673 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V672))), begin (V678 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V674) -> fun (V675) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V674, V675)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V676) -> fun (V677) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V676, V677)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V665, {'Idris.Core.TT.TType', V9}, V653))), case V678 of {'Idris.Prelude.Types.Left', E108} -> (fun (V679) -> {'Idris.Prelude.Types.Left', V679} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V680) -> begin (V681 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V651, {'Idris.Prelude.Types.Just', V673}))(V653))), case V681 of {'Idris.Prelude.Types.Left', E110} -> (fun (V682) -> {'Idris.Prelude.Types.Left', V682} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V683) -> case V683 of {'Idris.Builtin.MkPair', E112, E113} -> (fun (V684, V685) -> begin (V686 = {'Idris.Core.TT.App', V9, V10, V684}), begin (V688 = begin (V687 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V687} end), case V688 of {'Idris.Prelude.Types.Left', E114} -> (fun (V689) -> {'Idris.Prelude.Types.Left', V689} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V690) -> begin (V691 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V690, V8, V680))(V653))), case V691 of {'Idris.Prelude.Types.Left', E116} -> (fun (V692) -> {'Idris.Prelude.Types.Left', V692} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V693) -> begin (V694 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V662, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V672}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V680))}))), begin (V695 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V694, V653))), case V695 of {'Idris.Prelude.Types.Left', E118} -> (fun (V696) -> {'Idris.Prelude.Types.Left', V696} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V697) -> begin (V699 = case V17 of {'Idris.Prelude.Types.Just', E120} -> (fun (V698) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V698, V653)) end(E120)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V699 of {'Idris.Prelude.Types.Left', E121} -> (fun (V700) -> {'Idris.Prelude.Types.Left', V700} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V701) -> begin (V702 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V686, V693, {'Idris.Builtin.MkPair', V649, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V650))}, V652, V14, V15, V16, V17))(V653))), case V702 of {'Idris.Prelude.Types.Left', E123} -> (fun (V703) -> {'Idris.Prelude.Types.Left', V703} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V704) -> begin (V705 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V690, V8, V11)), V694))(V653))), case V705 of {'Idris.Prelude.Types.Left', E125} -> (fun (V706) -> {'Idris.Prelude.Types.Left', V706} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V707) -> begin (V708 = {'Idris.Builtin.MkPair', V684, V685}), (('case--case block in checkAppWith\x{27}-7064'(V649, V650, V651, V652, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V662, V665, V672, V673, V680, V684, V685, V708, V686, V690, V693, V694, V704, V707, case V707 of {'Idris.Core.Unify.MkUnifyResult', E127, E128, E129, E130} -> (fun (V709, V710, V711, V712) -> V709 end(E127, E128, E129, E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V653)) end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E96, E97)); _ -> case V13 of [] -> fun (V713) -> begin (V715 = begin (V714 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V714} end), case V715 of {'Idris.Prelude.Types.Left', E94} -> (fun (V716) -> {'Idris.Prelude.Types.Left', V716} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V717) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V717, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V720) -> fun (V721) -> fun (V722) -> fun (V723) -> fun (V724) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V722, V723, V724)) end end end end end, fun (V725) -> fun (V726) -> fun (V727) -> fun (V728) -> fun (V729) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V727, V728, V729)) end end end end end, fun (V730) -> fun (V731) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V731)) end end}, fun (V732) -> ('un--isImplicitAs'(V732)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V718) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V718)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V719) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V719)))))) end, V15))))))))))(V713)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92, E93)); _ -> case V13 of [] -> fun (V733) -> begin (V735 = begin (V734 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V734} end), case V735 of {'Idris.Prelude.Types.Left', E90} -> (fun (V736) -> {'Idris.Prelude.Types.Left', V736} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V737) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V737, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V740) -> fun (V741) -> fun (V742) -> fun (V743) -> fun (V744) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V742, V743, V744)) end end end end end, fun (V745) -> fun (V746) -> fun (V747) -> fun (V748) -> fun (V749) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V747, V748, V749)) end end end end end, fun (V750) -> fun (V751) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V751)) end end}, fun (V752) -> ('un--isImplicitAs'(V752)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V738) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V738)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V739) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V739)))))) end, V15))))))))))(V733)) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E86, E87, E88, E89)); _ -> case V12 of {'Idris.Builtin.MkPair', E47, E48} -> (fun (V753, V754) -> case V13 of [E51 | E52] -> (fun (V755, V756) -> fun (V757) -> begin (V758 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V757))), case V758 of {'Idris.Prelude.Types.Left', E53} -> (fun (V759) -> {'Idris.Prelude.Types.Left', V759} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V760) -> begin (V761 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V757))), case V761 of {'Idris.Prelude.Types.Left', E55} -> (fun (V762) -> {'Idris.Prelude.Types.Left', V762} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V763) -> begin (V764 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V757))), case V764 of {'Idris.Prelude.Types.Left', E57} -> (fun (V765) -> {'Idris.Prelude.Types.Left', V765} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V766) -> begin (V767 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V757))), case V767 of {'Idris.Prelude.Types.Left', E59} -> (fun (V768) -> {'Idris.Prelude.Types.Left', V768} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V769) -> begin (V774 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V770) -> fun (V771) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V770, V771)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V772) -> fun (V773) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V772, V773)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V766, {'Idris.Core.TT.TType', V9}, V757))), case V774 of {'Idris.Prelude.Types.Left', E61} -> (fun (V775) -> {'Idris.Prelude.Types.Left', V775} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V776) -> begin (V777 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V776))), begin (V782 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V778) -> fun (V779) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V778, V779)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V780) -> fun (V781) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V780, V781)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V769, {'Idris.Core.TT.TType', V9}, V757))), case V782 of {'Idris.Prelude.Types.Left', E63} -> (fun (V783) -> {'Idris.Prelude.Types.Left', V783} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V784) -> begin (V785 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V755, {'Idris.Prelude.Types.Just', V777}))(V757))), case V785 of {'Idris.Prelude.Types.Left', E65} -> (fun (V786) -> {'Idris.Prelude.Types.Left', V786} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V787) -> case V787 of {'Idris.Builtin.MkPair', E67, E68} -> (fun (V788, V789) -> begin (V790 = {'Idris.Core.TT.App', V9, V10, V788}), begin (V792 = begin (V791 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V791} end), case V792 of {'Idris.Prelude.Types.Left', E69} -> (fun (V793) -> {'Idris.Prelude.Types.Left', V793} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V794) -> begin (V795 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V794, V8, V784))(V757))), case V795 of {'Idris.Prelude.Types.Left', E71} -> (fun (V796) -> {'Idris.Prelude.Types.Left', V796} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V797) -> begin (V798 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V766, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V776}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V784))}))), begin (V799 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V798, V757))), case V799 of {'Idris.Prelude.Types.Left', E73} -> (fun (V800) -> {'Idris.Prelude.Types.Left', V800} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V801) -> begin (V803 = case V17 of {'Idris.Prelude.Types.Just', E75} -> (fun (V802) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V802, V757)) end(E75)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V803 of {'Idris.Prelude.Types.Left', E76} -> (fun (V804) -> {'Idris.Prelude.Types.Left', V804} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V805) -> begin (V806 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V790, V797, {'Idris.Builtin.MkPair', V753, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V754))}, V756, V14, V15, V16, V17))(V757))), case V806 of {'Idris.Prelude.Types.Left', E78} -> (fun (V807) -> {'Idris.Prelude.Types.Left', V807} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V808) -> begin (V809 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V794, V8, V11)), V798))(V757))), case V809 of {'Idris.Prelude.Types.Left', E80} -> (fun (V810) -> {'Idris.Prelude.Types.Left', V810} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V811) -> begin (V812 = {'Idris.Builtin.MkPair', V788, V789}), (('case--case block in checkAppWith\x{27}-7064'(V753, V754, V755, V756, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V766, V769, V776, V777, V784, V788, V789, V812, V790, V794, V797, V798, V808, V811, case V811 of {'Idris.Core.Unify.MkUnifyResult', E82, E83, E84, E85} -> (fun (V813, V814, V815, V816) -> V813 end(E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V757)) end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51, E52)); _ -> case V13 of [] -> fun (V817) -> begin (V819 = begin (V818 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V818} end), case V819 of {'Idris.Prelude.Types.Left', E49} -> (fun (V820) -> {'Idris.Prelude.Types.Left', V820} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V821) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V821, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V824) -> fun (V825) -> fun (V826) -> fun (V827) -> fun (V828) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V826, V827, V828)) end end end end end, fun (V829) -> fun (V830) -> fun (V831) -> fun (V832) -> fun (V833) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V831, V832, V833)) end end end end end, fun (V834) -> fun (V835) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V835)) end end}, fun (V836) -> ('un--isImplicitAs'(V836)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V822) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V822)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V823) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V823)))))) end, V15))))))))))(V817)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47, E48)); _ -> case V13 of [] -> fun (V837) -> begin (V839 = begin (V838 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V838} end), case V839 of {'Idris.Prelude.Types.Left', E45} -> (fun (V840) -> {'Idris.Prelude.Types.Left', V840} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V841) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V841, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V844) -> fun (V845) -> fun (V846) -> fun (V847) -> fun (V848) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V846, V847, V848)) end end end end end, fun (V849) -> fun (V850) -> fun (V851) -> fun (V852) -> fun (V853) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V851, V852, V853)) end end end end end, fun (V854) -> fun (V855) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V855)) end end}, fun (V856) -> ('un--isImplicitAs'(V856)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V842) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V842)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V843) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V843)))))) end, V15))))))))))(V837)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E41, E42, E43, E44)); {'Idris.Core.Value.NDelayed', E407, E408, E409} -> (fun (V857, V858, V859) -> case V859 of {'Idris.Core.Value.NBind', E451, E452, E453, E454} -> (fun (V860, V861, V862, V863) -> case V862 of {'Idris.Core.TT.Pi', E496, E497, E498, E499} -> (fun (V864, V865, V866, V867) -> ('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, {'Idris.Core.TT.TForce', V857, V858, V10}, V859, V12, V13, V14, V15, V16, V17)) end(E496, E497, E498, E499)); _ -> case V12 of {'Idris.Builtin.MkPair', E457, E458} -> (fun (V868, V869) -> case V13 of [E461 | E462] -> (fun (V870, V871) -> fun (V872) -> begin (V873 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V872))), case V873 of {'Idris.Prelude.Types.Left', E463} -> (fun (V874) -> {'Idris.Prelude.Types.Left', V874} end(E463)); {'Idris.Prelude.Types.Right', E464} -> (fun (V875) -> begin (V876 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V872))), case V876 of {'Idris.Prelude.Types.Left', E465} -> (fun (V877) -> {'Idris.Prelude.Types.Left', V877} end(E465)); {'Idris.Prelude.Types.Right', E466} -> (fun (V878) -> begin (V879 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V872))), case V879 of {'Idris.Prelude.Types.Left', E467} -> (fun (V880) -> {'Idris.Prelude.Types.Left', V880} end(E467)); {'Idris.Prelude.Types.Right', E468} -> (fun (V881) -> begin (V882 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V872))), case V882 of {'Idris.Prelude.Types.Left', E469} -> (fun (V883) -> {'Idris.Prelude.Types.Left', V883} end(E469)); {'Idris.Prelude.Types.Right', E470} -> (fun (V884) -> begin (V889 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V885) -> fun (V886) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V885, V886)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V887) -> fun (V888) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V887, V888)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V881, {'Idris.Core.TT.TType', V9}, V872))), case V889 of {'Idris.Prelude.Types.Left', E471} -> (fun (V890) -> {'Idris.Prelude.Types.Left', V890} end(E471)); {'Idris.Prelude.Types.Right', E472} -> (fun (V891) -> begin (V892 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V891))), begin (V897 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V893) -> fun (V894) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V893, V894)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V895) -> fun (V896) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V895, V896)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V884, {'Idris.Core.TT.TType', V9}, V872))), case V897 of {'Idris.Prelude.Types.Left', E473} -> (fun (V898) -> {'Idris.Prelude.Types.Left', V898} end(E473)); {'Idris.Prelude.Types.Right', E474} -> (fun (V899) -> begin (V900 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V870, {'Idris.Prelude.Types.Just', V892}))(V872))), case V900 of {'Idris.Prelude.Types.Left', E475} -> (fun (V901) -> {'Idris.Prelude.Types.Left', V901} end(E475)); {'Idris.Prelude.Types.Right', E476} -> (fun (V902) -> case V902 of {'Idris.Builtin.MkPair', E477, E478} -> (fun (V903, V904) -> begin (V905 = {'Idris.Core.TT.App', V9, V10, V903}), begin (V907 = begin (V906 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V906} end), case V907 of {'Idris.Prelude.Types.Left', E479} -> (fun (V908) -> {'Idris.Prelude.Types.Left', V908} end(E479)); {'Idris.Prelude.Types.Right', E480} -> (fun (V909) -> begin (V910 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V909, V8, V899))(V872))), case V910 of {'Idris.Prelude.Types.Left', E481} -> (fun (V911) -> {'Idris.Prelude.Types.Left', V911} end(E481)); {'Idris.Prelude.Types.Right', E482} -> (fun (V912) -> begin (V913 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V881, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V891}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V899))}))), begin (V914 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V913, V872))), case V914 of {'Idris.Prelude.Types.Left', E483} -> (fun (V915) -> {'Idris.Prelude.Types.Left', V915} end(E483)); {'Idris.Prelude.Types.Right', E484} -> (fun (V916) -> begin (V918 = case V17 of {'Idris.Prelude.Types.Just', E485} -> (fun (V917) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V917, V872)) end(E485)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V918 of {'Idris.Prelude.Types.Left', E486} -> (fun (V919) -> {'Idris.Prelude.Types.Left', V919} end(E486)); {'Idris.Prelude.Types.Right', E487} -> (fun (V920) -> begin (V921 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V905, V912, {'Idris.Builtin.MkPair', V868, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V869))}, V871, V14, V15, V16, V17))(V872))), case V921 of {'Idris.Prelude.Types.Left', E488} -> (fun (V922) -> {'Idris.Prelude.Types.Left', V922} end(E488)); {'Idris.Prelude.Types.Right', E489} -> (fun (V923) -> begin (V924 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V909, V8, V11)), V913))(V872))), case V924 of {'Idris.Prelude.Types.Left', E490} -> (fun (V925) -> {'Idris.Prelude.Types.Left', V925} end(E490)); {'Idris.Prelude.Types.Right', E491} -> (fun (V926) -> begin (V927 = {'Idris.Builtin.MkPair', V903, V904}), (('case--case block in checkAppWith\x{27}-7064'(V868, V869, V870, V871, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V881, V884, V891, V892, V899, V903, V904, V927, V905, V909, V912, V913, V923, V926, case V926 of {'Idris.Core.Unify.MkUnifyResult', E492, E493, E494, E495} -> (fun (V928, V929, V930, V931) -> V928 end(E492, E493, E494, E495)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V872)) end end(E491)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E489)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E487)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E484)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E482)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E480)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E477, E478)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E476)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E474)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E472)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E470)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E468)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E466)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E464)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E461, E462)); _ -> case V13 of [] -> fun (V932) -> begin (V934 = begin (V933 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V933} end), case V934 of {'Idris.Prelude.Types.Left', E459} -> (fun (V935) -> {'Idris.Prelude.Types.Left', V935} end(E459)); {'Idris.Prelude.Types.Right', E460} -> (fun (V936) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V936, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V939) -> fun (V940) -> fun (V941) -> fun (V942) -> fun (V943) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V941, V942, V943)) end end end end end, fun (V944) -> fun (V945) -> fun (V946) -> fun (V947) -> fun (V948) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V946, V947, V948)) end end end end end, fun (V949) -> fun (V950) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V950)) end end}, fun (V951) -> ('un--isImplicitAs'(V951)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V937) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V937)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V938) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V938)))))) end, V15))))))))))(V932)) end(E460)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E457, E458)); _ -> case V13 of [] -> fun (V952) -> begin (V954 = begin (V953 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V953} end), case V954 of {'Idris.Prelude.Types.Left', E455} -> (fun (V955) -> {'Idris.Prelude.Types.Left', V955} end(E455)); {'Idris.Prelude.Types.Right', E456} -> (fun (V956) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V956, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V959) -> fun (V960) -> fun (V961) -> fun (V962) -> fun (V963) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V961, V962, V963)) end end end end end, fun (V964) -> fun (V965) -> fun (V966) -> fun (V967) -> fun (V968) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V966, V967, V968)) end end end end end, fun (V969) -> fun (V970) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V970)) end end}, fun (V971) -> ('un--isImplicitAs'(V971)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V957) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V957)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V958) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V958)))))) end, V15))))))))))(V952)) end(E456)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E451, E452, E453, E454)); _ -> case V12 of {'Idris.Builtin.MkPair', E412, E413} -> (fun (V972, V973) -> case V13 of [E416 | E417] -> (fun (V974, V975) -> fun (V976) -> begin (V977 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V976))), case V977 of {'Idris.Prelude.Types.Left', E418} -> (fun (V978) -> {'Idris.Prelude.Types.Left', V978} end(E418)); {'Idris.Prelude.Types.Right', E419} -> (fun (V979) -> begin (V980 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V976))), case V980 of {'Idris.Prelude.Types.Left', E420} -> (fun (V981) -> {'Idris.Prelude.Types.Left', V981} end(E420)); {'Idris.Prelude.Types.Right', E421} -> (fun (V982) -> begin (V983 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V976))), case V983 of {'Idris.Prelude.Types.Left', E422} -> (fun (V984) -> {'Idris.Prelude.Types.Left', V984} end(E422)); {'Idris.Prelude.Types.Right', E423} -> (fun (V985) -> begin (V986 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V976))), case V986 of {'Idris.Prelude.Types.Left', E424} -> (fun (V987) -> {'Idris.Prelude.Types.Left', V987} end(E424)); {'Idris.Prelude.Types.Right', E425} -> (fun (V988) -> begin (V993 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V989) -> fun (V990) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V989, V990)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V991) -> fun (V992) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V991, V992)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V985, {'Idris.Core.TT.TType', V9}, V976))), case V993 of {'Idris.Prelude.Types.Left', E426} -> (fun (V994) -> {'Idris.Prelude.Types.Left', V994} end(E426)); {'Idris.Prelude.Types.Right', E427} -> (fun (V995) -> begin (V996 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V995))), begin (V1001 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V997) -> fun (V998) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V997, V998)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V999) -> fun (V1000) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V999, V1000)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V988, {'Idris.Core.TT.TType', V9}, V976))), case V1001 of {'Idris.Prelude.Types.Left', E428} -> (fun (V1002) -> {'Idris.Prelude.Types.Left', V1002} end(E428)); {'Idris.Prelude.Types.Right', E429} -> (fun (V1003) -> begin (V1004 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V974, {'Idris.Prelude.Types.Just', V996}))(V976))), case V1004 of {'Idris.Prelude.Types.Left', E430} -> (fun (V1005) -> {'Idris.Prelude.Types.Left', V1005} end(E430)); {'Idris.Prelude.Types.Right', E431} -> (fun (V1006) -> case V1006 of {'Idris.Builtin.MkPair', E432, E433} -> (fun (V1007, V1008) -> begin (V1009 = {'Idris.Core.TT.App', V9, V10, V1007}), begin (V1011 = begin (V1010 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1010} end), case V1011 of {'Idris.Prelude.Types.Left', E434} -> (fun (V1012) -> {'Idris.Prelude.Types.Left', V1012} end(E434)); {'Idris.Prelude.Types.Right', E435} -> (fun (V1013) -> begin (V1014 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V1013, V8, V1003))(V976))), case V1014 of {'Idris.Prelude.Types.Left', E436} -> (fun (V1015) -> {'Idris.Prelude.Types.Left', V1015} end(E436)); {'Idris.Prelude.Types.Right', E437} -> (fun (V1016) -> begin (V1017 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V985, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V995}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V1003))}))), begin (V1018 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V1017, V976))), case V1018 of {'Idris.Prelude.Types.Left', E438} -> (fun (V1019) -> {'Idris.Prelude.Types.Left', V1019} end(E438)); {'Idris.Prelude.Types.Right', E439} -> (fun (V1020) -> begin (V1022 = case V17 of {'Idris.Prelude.Types.Just', E440} -> (fun (V1021) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V1021, V976)) end(E440)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V1022 of {'Idris.Prelude.Types.Left', E441} -> (fun (V1023) -> {'Idris.Prelude.Types.Left', V1023} end(E441)); {'Idris.Prelude.Types.Right', E442} -> (fun (V1024) -> begin (V1025 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V1009, V1016, {'Idris.Builtin.MkPair', V972, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V973))}, V975, V14, V15, V16, V17))(V976))), case V1025 of {'Idris.Prelude.Types.Left', E443} -> (fun (V1026) -> {'Idris.Prelude.Types.Left', V1026} end(E443)); {'Idris.Prelude.Types.Right', E444} -> (fun (V1027) -> begin (V1028 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1013, V8, V11)), V1017))(V976))), case V1028 of {'Idris.Prelude.Types.Left', E445} -> (fun (V1029) -> {'Idris.Prelude.Types.Left', V1029} end(E445)); {'Idris.Prelude.Types.Right', E446} -> (fun (V1030) -> begin (V1031 = {'Idris.Builtin.MkPair', V1007, V1008}), (('case--case block in checkAppWith\x{27}-7064'(V972, V973, V974, V975, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V985, V988, V995, V996, V1003, V1007, V1008, V1031, V1009, V1013, V1016, V1017, V1027, V1030, case V1030 of {'Idris.Core.Unify.MkUnifyResult', E447, E448, E449, E450} -> (fun (V1032, V1033, V1034, V1035) -> V1032 end(E447, E448, E449, E450)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V976)) end end(E446)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E444)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E442)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E439)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E437)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E435)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E432, E433)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E431)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E429)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E427)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E425)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E423)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E421)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E419)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E416, E417)); _ -> case V13 of [] -> fun (V1036) -> begin (V1038 = begin (V1037 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1037} end), case V1038 of {'Idris.Prelude.Types.Left', E414} -> (fun (V1039) -> {'Idris.Prelude.Types.Left', V1039} end(E414)); {'Idris.Prelude.Types.Right', E415} -> (fun (V1040) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1040, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1043) -> fun (V1044) -> fun (V1045) -> fun (V1046) -> fun (V1047) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V1045, V1046, V1047)) end end end end end, fun (V1048) -> fun (V1049) -> fun (V1050) -> fun (V1051) -> fun (V1052) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V1050, V1051, V1052)) end end end end end, fun (V1053) -> fun (V1054) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V1054)) end end}, fun (V1055) -> ('un--isImplicitAs'(V1055)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V1041) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1041)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V1042) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1042)))))) end, V15))))))))))(V1036)) end(E415)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E412, E413)); _ -> case V13 of [] -> fun (V1056) -> begin (V1058 = begin (V1057 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1057} end), case V1058 of {'Idris.Prelude.Types.Left', E410} -> (fun (V1059) -> {'Idris.Prelude.Types.Left', V1059} end(E410)); {'Idris.Prelude.Types.Right', E411} -> (fun (V1060) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1060, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1063) -> fun (V1064) -> fun (V1065) -> fun (V1066) -> fun (V1067) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V1065, V1066, V1067)) end end end end end, fun (V1068) -> fun (V1069) -> fun (V1070) -> fun (V1071) -> fun (V1072) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V1070, V1071, V1072)) end end end end end, fun (V1073) -> fun (V1074) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V1074)) end end}, fun (V1075) -> ('un--isImplicitAs'(V1075)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V1061) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1061)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V1062) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1062)))))) end, V15))))))))))(V1056)) end(E411)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E407, E408, E409)); _ -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V1076, V1077) -> case V13 of [E6 | E7] -> (fun (V1078, V1079) -> fun (V1080) -> begin (V1081 = ('Idris.Idris2.Core.Normalise':'un--logNF'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function type"/utf8>> end, V8, V11, V1080))), case V1081 of {'Idris.Prelude.Types.Left', E8} -> (fun (V1082) -> {'Idris.Prelude.Types.Left', V1082} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V1083) -> begin (V1084 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Function "/utf8>> end, V10, V1080))), case V1084 of {'Idris.Prelude.Types.Left', E10} -> (fun (V1085) -> {'Idris.Prelude.Types.Left', V1085} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V1086) -> begin (V1087 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"argTy"/utf8>>, V1080))), case V1087 of {'Idris.Prelude.Types.Left', E12} -> (fun (V1088) -> {'Idris.Prelude.Types.Left', V1088} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V1089) -> begin (V1090 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"retTy"/utf8>>, V1080))), case V1090 of {'Idris.Prelude.Types.Left', E14} -> (fun (V1091) -> {'Idris.Prelude.Types.Left', V1091} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V1092) -> begin (V1097 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1093) -> fun (V1094) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1093, V1094)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1095) -> fun (V1096) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1095, V1096)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1089, {'Idris.Core.TT.TType', V9}, V1080))), case V1097 of {'Idris.Prelude.Types.Left', E16} -> (fun (V1098) -> {'Idris.Prelude.Types.Left', V1098} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V1099) -> begin (V1100 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V1099))), begin (V1105 = ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V9, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1101) -> fun (V1102) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1101, V1102)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V1103) -> fun (V1104) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V1103, V1104)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V8, V1092, {'Idris.Core.TT.TType', V9}, V1080))), case V1105 of {'Idris.Prelude.Types.Left', E18} -> (fun (V1106) -> {'Idris.Prelude.Types.Left', V1106} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V1107) -> begin (V1108 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V1078, {'Idris.Prelude.Types.Just', V1100}))(V1080))), case V1108 of {'Idris.Prelude.Types.Left', E20} -> (fun (V1109) -> {'Idris.Prelude.Types.Left', V1109} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V1110) -> case V1110 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V1111, V1112) -> begin (V1113 = {'Idris.Core.TT.App', V9, V10, V1111}), begin (V1115 = begin (V1114 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1114} end), case V1115 of {'Idris.Prelude.Types.Left', E24} -> (fun (V1116) -> {'Idris.Prelude.Types.Left', V1116} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V1117) -> begin (V1118 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V1117, V8, V1107))(V1080))), case V1118 of {'Idris.Prelude.Types.Left', E26} -> (fun (V1119) -> {'Idris.Prelude.Types.Left', V1119} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V1120) -> begin (V1121 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, {'Idris.Core.TT.Bind', V9, V1089, {'Idris.Core.TT.Pi', V9, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, V1099}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V1107))}))), begin (V1122 = ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected function type"/utf8>> end, V8, V1121, V1080))), case V1122 of {'Idris.Prelude.Types.Left', E28} -> (fun (V1123) -> {'Idris.Prelude.Types.Left', V1123} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V1124) -> begin (V1126 = case V17 of {'Idris.Prelude.Types.Just', E30} -> (fun (V1125) -> ('Idris.Idris2.Core.Normalise':'un--logGlue'(V0, V1, <<"elab.with"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected result type"/utf8>> end, V8, V1125, V1080)) end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V1126 of {'Idris.Prelude.Types.Left', E31} -> (fun (V1127) -> {'Idris.Prelude.Types.Left', V1127} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V1128) -> begin (V1129 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V1113, V1120, {'Idris.Builtin.MkPair', V1076, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1077))}, V1079, V14, V15, V16, V17))(V1080))), case V1129 of {'Idris.Prelude.Types.Left', E33} -> (fun (V1130) -> {'Idris.Prelude.Types.Left', V1130} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V1131) -> begin (V1132 = (('Idris.Idris2.TTImp.Elab.Check':'un--convert'(V0, V1, V3, V4, V9, V6, V8, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V1117, V8, V11)), V1121))(V1080))), case V1132 of {'Idris.Prelude.Types.Left', E35} -> (fun (V1133) -> {'Idris.Prelude.Types.Left', V1133} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V1134) -> begin (V1135 = {'Idris.Builtin.MkPair', V1111, V1112}), (('case--case block in checkAppWith\x{27}-7064'(V1076, V1077, V1078, V1079, V0, V17, V16, V15, V14, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1089, V1092, V1099, V1100, V1107, V1111, V1112, V1135, V1113, V1117, V1120, V1121, V1131, V1134, case V1134 of {'Idris.Core.Unify.MkUnifyResult', E37, E38, E39, E40} -> (fun (V1136, V1137, V1138, V1139) -> V1136 end(E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1080)) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); _ -> case V13 of [] -> fun (V1140) -> begin (V1142 = begin (V1141 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1141} end), case V1142 of {'Idris.Prelude.Types.Left', E4} -> (fun (V1143) -> {'Idris.Prelude.Types.Left', V1143} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V1144) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1144, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1147) -> fun (V1148) -> fun (V1149) -> fun (V1150) -> fun (V1151) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V1149, V1150, V1151)) end end end end end, fun (V1152) -> fun (V1153) -> fun (V1154) -> fun (V1155) -> fun (V1156) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V1154, V1155, V1156)) end end end end end, fun (V1157) -> fun (V1158) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V1158)) end end}, fun (V1159) -> ('un--isImplicitAs'(V1159)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V1145) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1145)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V1146) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1146)))))) end, V15))))))))))(V1140)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> case V13 of [] -> fun (V1160) -> begin (V1162 = begin (V1161 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V1161} end), case V1162 of {'Idris.Prelude.Types.Left', E0} -> (fun (V1163) -> {'Idris.Prelude.Types.Left', V1163} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V1164) -> (('case--checkAppWith\x{27}-7274'(V0, V17, V16, V15, V14, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V1164, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1167) -> fun (V1168) -> fun (V1169) -> fun (V1170) -> fun (V1171) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V1169, V1170, V1171)) end end end end end, fun (V1172) -> fun (V1173) -> fun (V1174) -> fun (V1175) -> fun (V1176) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V1174, V1175, V1176)) end end end end end, fun (V1177) -> fun (V1178) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V1178)) end end}, fun (V1179) -> ('un--isImplicitAs'(V1179)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V1165) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V1165)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V1166) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isBindAllExpPattern'(('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V1166)))))) end, V15))))))))))(V1160)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V19 = (('un--checkAppWith\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17))(V18))), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> (('case--checkAppWith-7398'(V0, V17, V16, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V21, ('Idris.Idris2.TTImp.Elab.Check':'un--isLHS'(case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V22, V23, V24, V25, V26, V27) -> V22 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V18)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V10 of {'Idris.TTImp.TTImp.IApp', E6, E7, E8} -> (fun (V15, V16, V17) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V16, [V17 | V11], V12, V13, V14)) end(E6, E7, E8)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V18, V19, V20) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V18, V19, V11, [V20 | V12], V13, V14)) end(E9, E10, E11)); {'Idris.TTImp.TTImp.INamedApp', E12, E13, E14, E15} -> (fun (V21, V22, V23, V24) -> ('un--checkApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V21, V22, V11, V12, [{'Idris.Builtin.MkPair', V23, V24} | V13], V14)) end(E12, E13, E14, E15)); {'Idris.TTImp.TTImp.IVar', E16, E17} -> (fun (V25, V26) -> fun (V27) -> begin (V28 = (('un--getVarType'(V0, V1, V2, V4, V5, V7, V8, V25, V26))(V27))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> case V30 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V31, V32) -> case V32 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V33, V34) -> begin (V35 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V34))(V27))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V1, V27))), case V38 of {'Idris.Prelude.Types.Left', E26} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V40) -> begin (V47 = (('nested--19365-7879--in--un--updateElabInfo'(V0, V26, V25, V14, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V40, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E28, E29, E30, E31, E32, E33} -> (fun (V41, V42, V43, V44, V45, V46) -> V41 end(E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V11, V6))(V27))), case V47 of {'Idris.Prelude.Types.Left', E34} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V49) -> begin (V93 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V1, <<"elab"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V50) -> begin (V52 = begin (V51 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E36} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V54, V8, V37, V50))), case V55 of {'Idris.Prelude.Types.Left', E38} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V57) -> begin (V74 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V59) -> fun (V60) -> begin (V61 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V59))(V60))), case V61 of {'Idris.Prelude.Types.Left', E40} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V1, V0, V54, V8, V63, V60))), case V64 of {'Idris.Prelude.Types.Left', E42} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V66) -> begin (V71 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V69, V70)) end end}, V66, V60))), case V71 of {'Idris.Prelude.Types.Left', E44} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V73) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V73}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V14))(V50))), case V74 of {'Idris.Prelude.Types.Left', E46} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V76) -> begin (V77 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, V26))(V50))), case V77 of {'Idris.Prelude.Types.Left', E48} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V79) -> begin (V84 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V82, V83)) end end}, V57, V50))), case V84 of {'Idris.Prelude.Types.Left', E50} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V86) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking application of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V79)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V87) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V87)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V88, V89)) end end}, V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}Function type "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V86)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}Expected app type "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V90) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V90)) end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V91, V92)) end end}, V76))))))))))))))))))))))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V27))), case V93 of {'Idris.Prelude.Types.Left', E52} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V95) -> begin (V101 = begin (V96 = {'Idris.Builtin.MkPair', V31, {'Idris.Builtin.MkPair', V33, V34}}), ('case--case block in checkApp-8292'(V0, V26, V25, V14, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V31, V33, V34, V96, V37, V40, V49, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V97, V98)) end end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V99, V100)) end end}, V26, V7)))) end), begin (V102 = ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V49, V7, V8, V9, V31, V37, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V101}, V33}, V11, V12, V13, 1, V14, V27))), case V102 of {'Idris.Prelude.Types.Left', E54} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V104) -> ('nested--19365-7878--in--un--normalisePrims'(V0, V26, V25, V14, V13, V12, V11, V9, V8, V7, V6, V5, V4, V3, V2, V1, V0, V40, V8, V104, V27)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17)); _ -> fun (V105) -> begin (V106 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, {'Idris.Prelude.Types.Nothing'}))(V105))), case V106 of {'Idris.Prelude.Types.Left', E0} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V108) -> case V108 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V109, V110) -> begin (V111 = (('Idris.Idris2.Core.Normalise':'un--getNF'('erased', V1, V110))(V105))), case V111 of {'Idris.Prelude.Types.Left', E4} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V113) -> ('un--checkAppWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V109, V113, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, 0}, V11, V12, V13, 1, V14, V105)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
