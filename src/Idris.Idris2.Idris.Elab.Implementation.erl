-module('Idris.Idris2.Idris.Elab.Implementation').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in case block in elabImplementation-8055'/58,
  'case--case block in case block in case block in case block in elabImplementation-7603'/44,
  'case--case block in case block in case block in elabImplementation-7457'/41,
  'case--case block in case block in case block in elabImplementation-7304'/32,
  'case--case block in case block in case block in elabImplementation-7163'/35,
  'case--case block in case block in elabImplementation-6919'/30,
  'case--case block in elabImplementation-6854'/28,
  'case--elabImplementation-6788'/25,
  'case--elabImplementation-6644'/20,
  'case--elabImplementation,addTransform-6470'/24,
  'case--elabImplementation,findMethName-6210'/23,
  'case--elabImplementation,topMethTypes-6022'/29,
  'case--case block in elabImplementation,topMethType-5796'/41,
  'case--elabImplementation,topMethType-5482'/32,
  'case--elabImplementation,methName-5334'/20,
  'case--addDefaults,extendBody-4822'/11,
  'nested--15113-5008--in--un--updateClause'/21,
  'nested--15113-5009--in--un--updateBody'/21,
  'nested--15113-5007--in--un--updateApp'/21,
  'nested--15113-5003--in--un--topMethTypes'/27,
  'nested--15113-5002--in--un--topMethType'/28,
  'nested--14817-4702--in--un--toForward'/1,
  'nested--14907-4793--in--un--specialiseMeth'/7,
  'nested--15113-5004--in--un--mkTopMethDecl'/20,
  'nested--15113-4998--in--un--mkMethField'/22,
  'nested--15113-4996--in--un--mkLam'/21,
  'nested--15113-5005--in--un--methNameUpdate'/21,
  'nested--15113-4999--in--un--methName'/20,
  'nested--15113-4994--in--un--impsApply'/21,
  'nested--15113-4993--in--un--getFieldArgs'/21,
  'nested--15139-5059--in--un--getArgs'/29,
  'nested--15113-5006--in--un--findMethName'/22,
  'nested--14907-4794--in--un--extendBody'/9,
  'nested--14907-4795--in--un--dropGot'/8,
  'nested--15113-5001--in--un--bindImps'/21,
  'nested--15113-4995--in--un--autoImpsApply'/21,
  'nested--15144-5220--in--un--applyUpdate'/28,
  'nested--15113-4997--in--un--applyTo'/21,
  'nested--15113-4992--in--un--applyEnv'/21,
  'nested--15113-5000--in--un--applyCon'/22,
  'nested--15113-5010--in--un--addTransform'/23,
  'un--replaceSep'/1,
  'un--mkImplName'/3,
  'un--getMethImps'/4,
  'un--elabImplementation'/19,
  'un--bindImpls'/3,
  'un--bindConstraints'/4,
  'un--addDefaults'/6
]).
'case--case block in case block in case block in case block in case block in elabImplementation-8055'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V57, V9)).
'case--case block in case block in case block in case block in elabImplementation-7603'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V43 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V44, V45) -> fun (V46) -> begin (V50 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Added defaults: body is "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpDecl'(V48, V49)) end end}, V44)))) end))(V46))), case V50 of {'Idris.Prelude.Types.Left', E2} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V52) -> begin (V56 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing methods: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V54, V55)) end end}, V45)))) end))(V46))), case V56 of {'Idris.Prelude.Types.Left', E4} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V58) -> begin (V60 = begin (V59 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E6} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V62) -> begin (V90 = case V62 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V72 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V94 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Open hints: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V92, V93)) end end}, [V20 | V1])))) end))(V46))), case V94 of {'Idris.Prelude.Types.Left', E35} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V96) -> begin (V102 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V97) -> fun (V98) -> begin (V99 = ('Idris.Idris2.Core.Context':'un--checkUnambig'(V18, V14, V97, V98))), case V99 of {'Idris.Prelude.Types.Left', E37} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V101) -> ('Idris.Idris2.Core.Context':'un--addOpenHint'(V18, V101, V98)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V1))(V46))), case V102 of {'Idris.Prelude.Types.Left', E39} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V104) -> begin (V106 = begin (V105 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V105} end), case V106 of {'Idris.Prelude.Types.Left', E41} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V108) -> begin (V138 = (('nested--15113-5003--in--un--topMethTypes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, [], V20, V42, V31, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E43, E44, E45, E46, E47, E48} -> (fun (V109, V110, V111, V112, V113, V114) -> V110 end(E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E49, E50, E51, E52, E53, E54} -> (fun (V115, V116, V117, V118, V119, V120) -> V117 end(E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V121) -> case V121 of {'Idris.Idris.Syntax.MkMethod', E55, E56, E57, E58} -> (fun (V122, V123, V124, V125) -> V122 end(E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E59, E60, E61, E62, E63, E64} -> (fun (V126, V127, V128, V129, V130, V131) -> V130 end(E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E65, E66, E67, E68, E69, E70} -> (fun (V132, V133, V134, V135, V136, V137) -> V136 end(E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V46))), case V138 of {'Idris.Prelude.Types.Left', E71} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V140) -> begin (V143 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V141) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V18, V15, V17, [], V9, V10, V141)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V142) -> ('nested--15113-5004--in--un--mkTopMethDecl'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V142)) end, V140))))(V46))), case V143 of {'Idris.Prelude.Types.Left', E73} -> (fun (V144) -> {'Idris.Prelude.Types.Left', V144} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V145) -> begin (V147 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V146) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V146)))) end, V140))), begin (V154 = case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E75, E76, E77, E78, E79, E80} -> (fun (V148, V149, V150, V151, V152, V153) -> V148 end(E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V157 = ('nested--15113-4994--in--un--impsApply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V20}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V155) -> {'Idris.Builtin.MkPair', V155, {'Idris.TTImp.TTImp.IBindVar', V14, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V155))}} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V156) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V156)) end, V42))))))), begin (V159 = begin (V158 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V158} end), case V159 of {'Idris.Prelude.Types.Left', E81} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V161) -> begin (V162 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V18, [], V161, {'Idris.Core.Env.Nil'}, V29, V46))), case V162 of {'Idris.Prelude.Types.Left', E83} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V164) -> begin (V165 = ('nested--15113-4993--in--un--getFieldArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', V164))), begin (V433 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Field types "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V166) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V167) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V167)) end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V168, V169)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V170) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V171) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V172)) end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V173, V174)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V175) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V176) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V176)) end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V177, V178)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V179) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V180) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V180)) end, fun (V181) -> fun (V182) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V181, V182)) end end}, V179)) end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V185) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V185)) end, fun (V186) -> fun (V187) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V186, V187)) end end}, V183, V184)) end end}}, V175)) end, fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V190) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V190)) end, fun (V191) -> fun (V192) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V191, V192)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V193) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V194) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V194)) end, fun (V195) -> fun (V196) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V195, V196)) end end}, V193)) end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V199) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V199)) end, fun (V200) -> fun (V201) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V200, V201)) end end}, V197, V198)) end end}}, V188, V189)) end end}}, V171)) end, fun (V202) -> fun (V203) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V204) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V204)) end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V205, V206)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V207) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V208) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V208)) end, fun (V209) -> fun (V210) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V209, V210)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V211) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V212) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V212)) end, fun (V213) -> fun (V214) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V213, V214)) end end}, V211)) end, fun (V215) -> fun (V216) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V217) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V217)) end, fun (V218) -> fun (V219) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V218, V219)) end end}, V215, V216)) end end}}, V207)) end, fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V222) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V222)) end, fun (V223) -> fun (V224) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V223, V224)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V225) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V226) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V226)) end, fun (V227) -> fun (V228) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V227, V228)) end end}, V225)) end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V231) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V231)) end, fun (V232) -> fun (V233) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V232, V233)) end end}, V229, V230)) end end}}, V220, V221)) end end}}, V202, V203)) end end}, V170)) end, fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V236) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V237) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V237)) end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V238, V239)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V240) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V241) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V241)) end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V242, V243)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V244) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V245) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V245)) end, fun (V246) -> fun (V247) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V246, V247)) end end}, V244)) end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V250) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V250)) end, fun (V251) -> fun (V252) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V251, V252)) end end}, V248, V249)) end end}}, V240)) end, fun (V253) -> fun (V254) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V255) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V255)) end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V256, V257)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V258) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V259) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V259)) end, fun (V260) -> fun (V261) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V260, V261)) end end}, V258)) end, fun (V262) -> fun (V263) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V264) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V264)) end, fun (V265) -> fun (V266) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V265, V266)) end end}, V262, V263)) end end}}, V253, V254)) end end}}, V236)) end, fun (V267) -> fun (V268) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V269) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V269)) end, fun (V270) -> fun (V271) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V270, V271)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V272) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V273) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V273)) end, fun (V274) -> fun (V275) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V274, V275)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V276) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V277) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V277)) end, fun (V278) -> fun (V279) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V278, V279)) end end}, V276)) end, fun (V280) -> fun (V281) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V282) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V282)) end, fun (V283) -> fun (V284) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V283, V284)) end end}, V280, V281)) end end}}, V272)) end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V287) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V287)) end, fun (V288) -> fun (V289) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V288, V289)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V290) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V291) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V291)) end, fun (V292) -> fun (V293) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V292, V293)) end end}, V290)) end, fun (V294) -> fun (V295) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V296) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V296)) end, fun (V297) -> fun (V298) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V297, V298)) end end}, V294, V295)) end end}}, V285, V286)) end end}}, V267, V268)) end end}, V234, V235)) end end}}, V166)) end, fun (V299) -> fun (V300) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V301) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V301)) end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V302, V303)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V304) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V305) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V306) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V306)) end, fun (V307) -> fun (V308) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V307, V308)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V309) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V310) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V310)) end, fun (V311) -> fun (V312) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V311, V312)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V313) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V314) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V314)) end, fun (V315) -> fun (V316) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V315, V316)) end end}, V313)) end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V319) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V319)) end, fun (V320) -> fun (V321) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V320, V321)) end end}, V317, V318)) end end}}, V309)) end, fun (V322) -> fun (V323) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V324) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V324)) end, fun (V325) -> fun (V326) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V325, V326)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V327) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V328) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V328)) end, fun (V329) -> fun (V330) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V329, V330)) end end}, V327)) end, fun (V331) -> fun (V332) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V333) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V333)) end, fun (V334) -> fun (V335) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V334, V335)) end end}, V331, V332)) end end}}, V322, V323)) end end}}, V305)) end, fun (V336) -> fun (V337) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V338) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V338)) end, fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V339, V340)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V341) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V342) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V342)) end, fun (V343) -> fun (V344) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V343, V344)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V345) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V346) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V346)) end, fun (V347) -> fun (V348) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V347, V348)) end end}, V345)) end, fun (V349) -> fun (V350) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V351) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V351)) end, fun (V352) -> fun (V353) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V352, V353)) end end}, V349, V350)) end end}}, V341)) end, fun (V354) -> fun (V355) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V356) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V356)) end, fun (V357) -> fun (V358) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V357, V358)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V359) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V360) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V360)) end, fun (V361) -> fun (V362) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V361, V362)) end end}, V359)) end, fun (V363) -> fun (V364) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V365) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V365)) end, fun (V366) -> fun (V367) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V366, V367)) end end}, V363, V364)) end end}}, V354, V355)) end end}}, V336, V337)) end end}, V304)) end, fun (V368) -> fun (V369) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V370) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V371) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V371)) end, fun (V372) -> fun (V373) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V372, V373)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V374) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V375) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V375)) end, fun (V376) -> fun (V377) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V376, V377)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V378) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V379) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V379)) end, fun (V380) -> fun (V381) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V380, V381)) end end}, V378)) end, fun (V382) -> fun (V383) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V384) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V384)) end, fun (V385) -> fun (V386) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V385, V386)) end end}, V382, V383)) end end}}, V374)) end, fun (V387) -> fun (V388) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V389) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V389)) end, fun (V390) -> fun (V391) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V390, V391)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V392) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V393) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V393)) end, fun (V394) -> fun (V395) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V394, V395)) end end}, V392)) end, fun (V396) -> fun (V397) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V398) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V398)) end, fun (V399) -> fun (V400) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V399, V400)) end end}, V396, V397)) end end}}, V387, V388)) end end}}, V370)) end, fun (V401) -> fun (V402) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V403) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V403)) end, fun (V404) -> fun (V405) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V404, V405)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V406) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V407) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V407)) end, fun (V408) -> fun (V409) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V408, V409)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V410) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V411) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V411)) end, fun (V412) -> fun (V413) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V412, V413)) end end}, V410)) end, fun (V414) -> fun (V415) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V416) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V416)) end, fun (V417) -> fun (V418) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V417, V418)) end end}, V414, V415)) end end}}, V406)) end, fun (V419) -> fun (V420) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V421) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V421)) end, fun (V422) -> fun (V423) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V422, V423)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V424) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V425) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V425)) end, fun (V426) -> fun (V427) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V426, V427)) end end}, V424)) end, fun (V428) -> fun (V429) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(PiInfo $t)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V430) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V430)) end, fun (V431) -> fun (V432) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V431, V432)) end end}, V428, V429)) end end}}, V419, V420)) end end}}, V401, V402)) end end}, V368, V369)) end end}}, V299, V300)) end end}, V165)))) end))(V46))), case V433 of {'Idris.Prelude.Types.Left', E85} -> (fun (V434) -> {'Idris.Prelude.Types.Left', V434} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V435) -> begin (V444 = ('Idris.Idris2.TTImp.TTImp':'un--apply'(('nested--15113-4995--in--un--autoImpsApply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.IVar', V14, V154}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V436) -> {'Idris.TTImp.TTImp.ISearch', V14, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(500))} end, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E87, E88, E89, E90, E91, E92} -> (fun (V437, V438, V439, V440, V441, V442) -> V440 end(E87, E88, E89, E90, E91, E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V443) -> ('nested--15113-4998--in--un--mkMethField'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V42, V165, V443)) end, V140))))), begin (V445 = {'Idris.TTImp.TTImp.IDef', V14, V20, [{'Idris.TTImp.TTImp.PatClause', V14, V157, V444} | []]}), begin (V446 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Implementation record: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V445)))) end))(V46))), case V446 of {'Idris.Prelude.Types.Left', E93} -> (fun (V447) -> {'Idris.Prelude.Types.Left', V447} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V448) -> begin (V449 = case V3 of 0 -> ('Idris.Idris2.Core.Context':'un--addOpenHint'(V18, V20, V46)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V449 of {'Idris.Prelude.Types.Left', E95} -> (fun (V450) -> {'Idris.Prelude.Types.Left', V450} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V451) -> begin (V452 = ('Idris.Idris2.Core.Context':'un--setFlag'(V18, V14, V20, {'Idris.Core.Context.BlockedHint'}, V46))), case V452 of {'Idris.Prelude.Types.Left', E97} -> (fun (V453) -> {'Idris.Prelude.Types.Left', V453} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V454) -> begin (V457 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V455) -> fun (V456) -> ('nested--15113-4992--in--un--applyEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V455, V456)) end end, [V20 | V147], []))(V46))), case V457 of {'Idris.Prelude.Types.Left', E99} -> (fun (V458) -> {'Idris.Prelude.Types.Left', V458} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V459) -> begin (V460 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V459, V9))), begin (V462 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V461) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V18, V15, V17, [], V460, V10, V461)) end, [V445 | []]))(V46))), case V462 of {'Idris.Prelude.Types.Left', E101} -> (fun (V463) -> {'Idris.Prelude.Types.Left', V463} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V464) -> begin (V465 = ('Idris.Idris2.Core.Context':'un--unsetFlag'(V18, V14, V20, {'Idris.Core.Context.BlockedHint'}, V46))), case V465 of {'Idris.Prelude.Types.Left', E103} -> (fun (V466) -> {'Idris.Prelude.Types.Left', V466} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V467) -> begin (V468 = ('Idris.Idris2.Core.Context':'un--setFlag'(V18, V14, V20, {'Idris.Core.Context.TCInline'}, V46))), case V468 of {'Idris.Prelude.Types.Left', E105} -> (fun (V469) -> {'Idris.Prelude.Types.Left', V469} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V470) -> begin (V471 = ('Idris.Idris2.Core.Context':'un--setFlag'(V18, V14, V20, {'Idris.Core.Context.SetTotal', {'Idris.Core.TT.PartialOK'}}, V46))), case V471 of {'Idris.Prelude.Types.Left', E107} -> (fun (V472) -> {'Idris.Prelude.Types.Left', V472} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V473) -> begin (V475 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V474) -> ('nested--15113-5005--in--un--methNameUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', V474)) end, V140))), begin (V477 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V476) -> ('nested--15113-5009--in--un--updateBody'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V475, V476)) end, V44, []))(V46))), case V477 of {'Idris.Prelude.Types.Left', E109} -> (fun (V478) -> {'Idris.Prelude.Types.Left', V478} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V479) -> begin (V483 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Implementation body: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V480) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V480)) end, fun (V481) -> fun (V482) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpDecl'(V481, V482)) end end}, V479)))) end))(V46))), case V483 of {'Idris.Prelude.Types.Left', E111} -> (fun (V484) -> {'Idris.Prelude.Types.Left', V484} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V485) -> begin (V487 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V486) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V18, V15, V17, [], V460, V10, V486)) end, V479))(V46))), case V487 of {'Idris.Prelude.Types.Left', E113} -> (fun (V488) -> {'Idris.Prelude.Types.Left', V488} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V489) -> begin (V498 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V490) -> fun (V491) -> ('nested--15113-5010--in--un--addTransform'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V20, V475, V490, V491)) end end, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E115, E116, E117, E118, E119, E120} -> (fun (V492, V493, V494, V495, V496, V497) -> V496 end(E115, E116, E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V46))), case V498 of {'Idris.Prelude.Types.Left', E121} -> (fun (V499) -> {'Idris.Prelude.Types.Left', V499} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V500) -> begin (V501 = ('Idris.Idris2.Core.Context':'un--unsetFlag'(V18, V14, V20, {'Idris.Core.Context.TCInline'}, V46))), case V501 of {'Idris.Prelude.Types.Left', E123} -> (fun (V502) -> {'Idris.Prelude.Types.Left', V502} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V503) -> begin (V504 = ('Idris.Idris2.Core.Context':'un--setOpenHints'(V18, V90, V46))), case V504 of {'Idris.Prelude.Types.Left', E125} -> (fun (V505) -> {'Idris.Prelude.Types.Left', V505} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V506) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in elabImplementation-7457'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> case V40 of {'Idris.Prelude.Types.Just', E0} -> (fun (V41) -> fun (V42) -> begin (V43 = (('un--getMethImps'([], V18, {'Idris.Core.Env.Nil'}, V41))(V42))), case V43 of {'Idris.Prelude.Types.Left', E1} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V45) -> begin (V85 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bind implicits to each method: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V46) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V48, V49)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V52, V53)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V54) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V55, V56)) end end}}, V50)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V60, V61)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V62) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V62)) end, fun (V63) -> fun (V64) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V63, V64)) end end}}, V57, V58)) end end}}, V46)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V68, V69)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V71) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V72, V73)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V75, V76)) end end}}, V70)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V80, V81)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V82) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V82)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V83, V84)) end end}}, V77, V78)) end end}}, V65, V66)) end end}, V45)))) end))(V42))), case V85 of {'Idris.Prelude.Types.Left', E3} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V87) -> begin (V88 = {'Idris.Prelude.Types.Just', V41}), (('case--case block in case block in case block in case block in elabImplementation-7603'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V41, V88, V45, ('un--addDefaults'(V14, V20, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E5, E6, E7, E8, E9, E10} -> (fun (V89, V90, V91, V92, V93, V94) -> V91 end(E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V95) -> ('Idris.Idris2.Core.Name':'un--dropNS'(case V95 of {'Idris.Idris.Syntax.MkMethod', E11, E12, E13, E14} -> (fun (V96, V97, V98, V99) -> V96 end(E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E15, E16, E17, E18, E19, E20} -> (fun (V100, V101, V102, V103, V104, V105) -> V104 end(E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E21, E22, E23, E24, E25, E26} -> (fun (V106, V107, V108, V109, V110, V111) -> V111 end(E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V38))))(V42)) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V112) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t happen, can\x{27}t find type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20))))}, V112)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in elabImplementation-7304'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V3 of 0 -> [{'Idris.TTImp.TTImp.Inline'} | []]; 1 -> [{'Idris.TTImp.TTImp.Inline'} | [{'Idris.TTImp.TTImp.Hint', 0} | []]]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in elabImplementation-7163'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V34 of 0 -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, V8, [], V33)); 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in elabImplementation-6919'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V29 of {'Idris.Prelude.Types.Just', E0} -> (fun (V30) -> begin (V66 = ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V33, V34)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V46)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V47, V48)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V49) -> ('Idris.Idris2.TTImp.TTImp':'un--findIBinds'(V49)) end))(V4)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V62)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V63, V64)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V65) -> ('Idris.Idris2.TTImp.TTImp':'un--findIBinds'(V65)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V50) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V50)) end, V6))))))))), fun (V67) -> begin (V68 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found interface "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V25)))) end, V27, V67))), case V68 of {'Idris.Prelude.Types.Left', E1} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V70) -> begin (V110 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  with params: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V71) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V72, V73)) end end}, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E3, E4, E5, E6, E7, E8} -> (fun (V74, V75, V76, V77, V78, V79) -> V76 end(E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  specialised to: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V81, V82)) end end}, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  and parents: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V83) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V84, V85)) end end}, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E9, E10, E11, E12, E13, E14} -> (fun (V86, V87, V88, V89, V90, V91) -> V89 end(E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  using implicits: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V92) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V93, V94)) end end}, V66)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  and methods: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_Method'(V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Idris.Syntax':'dn--un--showPrec_Show_Method'(V96, V97)) end end}, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E15, E16, E17, E18, E19, E20} -> (fun (V98, V99, V100, V101, V102, V103) -> V102 end(E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Constructor: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E21, E22, E23, E24, E25, E26} -> (fun (V104, V105, V106, V107, V108, V109) -> V104 end(E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<"\x{a}"/utf8>>)))))))))))))))))))))))))) end))(V67))), case V110 of {'Idris.Prelude.Types.Left', E27} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V112) -> begin (V113 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Constructor type: "/utf8>> end, V30, V67))), case V113 of {'Idris.Prelude.Types.Left', E29} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V115) -> begin (V116 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Making implementation "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)))) end))(V67))), case V116 of {'Idris.Prelude.Types.Left', E31} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V118) -> begin (V119 = case V3 of 0 -> [{'Idris.TTImp.TTImp.Inline'} | []]; 1 -> [{'Idris.TTImp.TTImp.Inline'} | [{'Idris.TTImp.TTImp.Hint', 0} | []]]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V120 = ('un--bindImpls'(V14, V7, ('un--bindConstraints'(V14, {'Idris.Core.TT.AutoImplicit'}, V6, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V14, V5}, V4))))))), begin (V121 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V18, V67))), case V121 of {'Idris.Prelude.Types.Left', E33} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V123) -> begin (V124 = case V123 of 0 -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, V8, [], V120)); 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V125 = ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V124, V120))), begin (V126 = {'Idris.TTImp.TTImp.IClaim', V14, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V13, V119, {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V20, V125}}), begin (V127 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Implementation type: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V125)))) end))(V67))), case V127 of {'Idris.Prelude.Types.Left', E35} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V129) -> begin (V130 = case ('Idris.Idris2.Idris.Syntax':'un--typePass'(V11)) of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V18, V15, V17, [], V9, V10, V126))(V67)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V130 of {'Idris.Prelude.Types.Left', E37} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V132) -> case ('Idris.Idris2.Idris.Syntax':'un--defPass'(V11)) of 0 -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V133) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V134) -> fun (V135) -> begin (V137 = begin (V136 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V136} end), case V137 of {'Idris.Prelude.Types.Left', E39} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V139) -> begin (V167 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V20, case V139 of {'Idris.Core.Context.MkDefs', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67} -> (fun (V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166) -> V140 end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V135))), case V167 of {'Idris.Prelude.Types.Left', E68} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V169) -> begin (V170 = {'Idris.Prelude.Types.Just', V30}), case V169 of {'Idris.Prelude.Types.Just', E70} -> (fun (V171) -> begin (V172 = (('un--getMethImps'([], V18, {'Idris.Core.Env.Nil'}, V171))(V135))), case V172 of {'Idris.Prelude.Types.Left', E71} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V174) -> begin (V214 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bind implicits to each method: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V175) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V176) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V176)) end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V177, V178)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V179) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V180) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V180)) end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V181, V182)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V183) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V183)) end, fun (V184) -> fun (V185) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V184, V185)) end end}}, V179)) end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V188) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V188)) end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V189, V190)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V191) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V191)) end, fun (V192) -> fun (V193) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V192, V193)) end end}}, V186, V187)) end end}}, V175)) end, fun (V194) -> fun (V195) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V196) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V196)) end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V197, V198)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V199) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V200) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V200)) end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V201, V202)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V203) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V203)) end, fun (V204) -> fun (V205) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V204, V205)) end end}}, V199)) end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V208) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V208)) end, fun (V209) -> fun (V210) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V209, V210)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V211) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V211)) end, fun (V212) -> fun (V213) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V212, V213)) end end}}, V206, V207)) end end}}, V194, V195)) end end}, V174)))) end))(V135))), case V214 of {'Idris.Prelude.Types.Left', E73} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V216) -> begin (V217 = {'Idris.Prelude.Types.Just', V171}), (('case--case block in case block in case block in case block in elabImplementation-7603'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V30, V170, V66, V119, V120, V123, V124, V125, V126, V134, V139, V171, V217, V174, ('un--addDefaults'(V14, V20, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E75, E76, E77, E78, E79, E80} -> (fun (V218, V219, V220, V221, V222, V223) -> V220 end(E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V224) -> ('Idris.Idris2.Core.Name':'un--dropNS'(case V224 of {'Idris.Idris.Syntax.MkMethod', E81, E82, E83, E84} -> (fun (V225, V226, V227, V228) -> V225 end(E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E85, E86, E87, E88, E89, E90} -> (fun (V229, V230, V231, V232, V233, V234) -> V233 end(E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E91, E92, E93, E94, E95, E96} -> (fun (V235, V236, V237, V238, V239, V240) -> V240 end(E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V134))))(V135)) end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t happen, can\x{27}t find type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20))))}, V135)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V0))(V67)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V241) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V18, V14, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E97, E98, E99, E100, E101, E102} -> (fun (V242, V243, V244, V245, V246, V247) -> V242 end(E97, E98, E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V241)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabImplementation-6854'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Prelude.Types.Just', E0} -> (fun (V28) -> fun (V29) -> begin (V63 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E1, E2, E3, E4, E5, E6} -> (fun (V30, V31, V32, V33, V34, V35) -> V30 end(E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V22 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V36 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29))), case V63 of {'Idris.Prelude.Types.Left', E34} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V65) -> begin (V66 = {'Idris.Prelude.Types.Just', V28}), case V65 of {'Idris.Prelude.Types.Just', E36} -> (fun (V67) -> begin (V103 = ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V70, V71)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V74, V75, V76)) end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V79, V80, V81)) end end end end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V83)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V84, V85)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V86) -> ('Idris.Idris2.TTImp.TTImp':'un--findIBinds'(V86)) end))(V4)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V90, V91, V92)) end end end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V95, V96, V97)) end end end end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V99)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V100, V101)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V102) -> ('Idris.Idris2.TTImp.TTImp':'un--findIBinds'(V102)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V87) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V87)) end, V6))))))))), begin (V104 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found interface "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V25)))) end, V28, V29))), case V104 of {'Idris.Prelude.Types.Left', E37} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V106) -> begin (V146 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  with params: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V107) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V107)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V108, V109)) end end}, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E39, E40, E41, E42, E43, E44} -> (fun (V110, V111, V112, V113, V114, V115) -> V112 end(E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  specialised to: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V116) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V117, V118)) end end}, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  and parents: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V119) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V119)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V120, V121)) end end}, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E45, E46, E47, E48, E49, E50} -> (fun (V122, V123, V124, V125, V126, V127) -> V125 end(E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  using implicits: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V128) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V129, V130)) end end}, V103)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  and methods: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V131) -> ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_Method'(V131)) end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Idris.Syntax':'dn--un--showPrec_Show_Method'(V132, V133)) end end}, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E51, E52, E53, E54, E55, E56} -> (fun (V134, V135, V136, V137, V138, V139) -> V138 end(E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Constructor: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E57, E58, E59, E60, E61, E62} -> (fun (V140, V141, V142, V143, V144, V145) -> V140 end(E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<"\x{a}"/utf8>>)))))))))))))))))))))))))) end))(V29))), case V146 of {'Idris.Prelude.Types.Left', E63} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V148) -> begin (V149 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Constructor type: "/utf8>> end, V67, V29))), case V149 of {'Idris.Prelude.Types.Left', E65} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V151) -> begin (V152 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Making implementation "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)))) end))(V29))), case V152 of {'Idris.Prelude.Types.Left', E67} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V154) -> begin (V155 = case V3 of 0 -> [{'Idris.TTImp.TTImp.Inline'} | []]; 1 -> [{'Idris.TTImp.TTImp.Inline'} | [{'Idris.TTImp.TTImp.Hint', 0} | []]]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V156 = ('un--bindImpls'(V14, V7, ('un--bindConstraints'(V14, {'Idris.Core.TT.AutoImplicit'}, V6, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V14, V5}, V4))))))), begin (V157 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V18, V29))), case V157 of {'Idris.Prelude.Types.Left', E69} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V159) -> begin (V160 = case V159 of 0 -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, V8, [], V156)); 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V161 = ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V160, V156))), begin (V162 = {'Idris.TTImp.TTImp.IClaim', V14, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V13, V155, {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V20, V161}}), begin (V163 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Implementation type: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V161)))) end))(V29))), case V163 of {'Idris.Prelude.Types.Left', E71} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V165) -> begin (V166 = case ('Idris.Idris2.Idris.Syntax':'un--typePass'(V11)) of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V18, V15, V17, [], V9, V10, V162))(V29)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V166 of {'Idris.Prelude.Types.Left', E73} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V168) -> case ('Idris.Idris2.Idris.Syntax':'un--defPass'(V11)) of 0 -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V169) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V170) -> fun (V171) -> begin (V173 = begin (V172 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V172} end), case V173 of {'Idris.Prelude.Types.Left', E75} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V175) -> begin (V203 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V20, case V175 of {'Idris.Core.Context.MkDefs', E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202) -> V176 end(E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V171))), case V203 of {'Idris.Prelude.Types.Left', E104} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V205) -> begin (V206 = {'Idris.Prelude.Types.Just', V67}), case V205 of {'Idris.Prelude.Types.Just', E106} -> (fun (V207) -> begin (V208 = (('un--getMethImps'([], V18, {'Idris.Core.Env.Nil'}, V207))(V171))), case V208 of {'Idris.Prelude.Types.Left', E107} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V210) -> begin (V250 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bind implicits to each method: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V211) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V212) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V212)) end, fun (V213) -> fun (V214) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V213, V214)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V215) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V216) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V216)) end, fun (V217) -> fun (V218) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V217, V218)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V219) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V219)) end, fun (V220) -> fun (V221) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V220, V221)) end end}}, V215)) end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V224) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V224)) end, fun (V225) -> fun (V226) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V225, V226)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V227) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V227)) end, fun (V228) -> fun (V229) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V228, V229)) end end}}, V222, V223)) end end}}, V211)) end, fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V232) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V232)) end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V233, V234)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V235) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V236) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V236)) end, fun (V237) -> fun (V238) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V237, V238)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V239) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V239)) end, fun (V240) -> fun (V241) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V240, V241)) end end}}, V235)) end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V244) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V244)) end, fun (V245) -> fun (V246) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V245, V246)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V247) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V247)) end, fun (V248) -> fun (V249) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V248, V249)) end end}}, V242, V243)) end end}}, V230, V231)) end end}, V210)))) end))(V171))), case V250 of {'Idris.Prelude.Types.Left', E109} -> (fun (V251) -> {'Idris.Prelude.Types.Left', V251} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V252) -> begin (V253 = {'Idris.Prelude.Types.Just', V207}), (('case--case block in case block in case block in case block in elabImplementation-7603'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V28, V66, V67, V206, V103, V155, V156, V159, V160, V161, V162, V170, V175, V207, V253, V210, ('un--addDefaults'(V14, V20, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E111, E112, E113, E114, E115, E116} -> (fun (V254, V255, V256, V257, V258, V259) -> V256 end(E111, E112, E113, E114, E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V260) -> ('Idris.Idris2.Core.Name':'un--dropNS'(case V260 of {'Idris.Idris.Syntax.MkMethod', E117, E118, E119, E120} -> (fun (V261, V262, V263, V264) -> V261 end(E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E121, E122, E123, E124, E125, E126} -> (fun (V265, V266, V267, V268, V269, V270) -> V269 end(E121, E122, E123, E124, E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E127, E128, E129, E130, E131, E132} -> (fun (V271, V272, V273, V274, V275, V276) -> V276 end(E127, E128, E129, E130, E131, E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V170))))(V171)) end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t happen, can\x{27}t find type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20))))}, V171)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V0))(V29)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V18, V14, case V26 of {'Idris.Idris.Syntax.MkIFaceInfo', E133, E134, E135, E136, E137, E138} -> (fun (V277, V278, V279, V280, V281, V282) -> V277 end(E133, E134, E135, E136, E137, E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V283) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V18, V14, V25, V283)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabImplementation-6788'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of [E0 | E1] -> (fun (V25, V26) -> case V26 of [] -> begin (V27 = ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V25))), begin (V28 = ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V25))), fun (V29) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V27, case V22 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V30 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29))), case V57 of {'Idris.Prelude.Types.Left', E29} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V59) -> case V59 of {'Idris.Prelude.Types.Just', E31} -> (fun (V60) -> begin (V94 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E32, E33, E34, E35, E36, E37} -> (fun (V61, V62, V63, V64, V65, V66) -> V61 end(E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V22 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> V67 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29))), case V94 of {'Idris.Prelude.Types.Left', E65} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V96) -> begin (V97 = {'Idris.Prelude.Types.Just', V60}), case V96 of {'Idris.Prelude.Types.Just', E67} -> (fun (V98) -> begin (V134 = ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V101, V102)) end end}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V105, V106, V107)) end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V110, V111, V112)) end end end end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V114)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V115, V116)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V117) -> ('Idris.Idris2.TTImp.TTImp':'un--findIBinds'(V117)) end))(V4)), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V121, V122, V123)) end end end end end, fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V126, V127, V128)) end end end end end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V130)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V131, V132)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V133) -> ('Idris.Idris2.TTImp.TTImp':'un--findIBinds'(V133)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V118) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V118)) end, V6))))))))), begin (V135 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found interface "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)))) end, V60, V29))), case V135 of {'Idris.Prelude.Types.Left', E68} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V137) -> begin (V177 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  with params: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V138) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V138)) end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V139, V140)) end end}, case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E70, E71, E72, E73, E74, E75} -> (fun (V141, V142, V143, V144, V145, V146) -> V143 end(E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  specialised to: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V147) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V147)) end, fun (V148) -> fun (V149) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V148, V149)) end end}, V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  and parents: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V150) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V150)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V151, V152)) end end}, case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E76, E77, E78, E79, E80, E81} -> (fun (V153, V154, V155, V156, V157, V158) -> V156 end(E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  using implicits: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V159) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V159)) end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V160, V161)) end end}, V134)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}  and methods: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V162) -> ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_Method'(V162)) end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Idris.Syntax':'dn--un--showPrec_Show_Method'(V163, V164)) end end}, case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E82, E83, E84, E85, E86, E87} -> (fun (V165, V166, V167, V168, V169, V170) -> V169 end(E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Constructor: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E88, E89, E90, E91, E92, E93} -> (fun (V171, V172, V173, V174, V175, V176) -> V171 end(E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<"\x{a}"/utf8>>)))))))))))))))))))))))))) end))(V29))), case V177 of {'Idris.Prelude.Types.Left', E94} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V179) -> begin (V180 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Constructor type: "/utf8>> end, V98, V29))), case V180 of {'Idris.Prelude.Types.Left', E96} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V182) -> begin (V183 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Making implementation "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)))) end))(V29))), case V183 of {'Idris.Prelude.Types.Left', E98} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V185) -> begin (V186 = case V3 of 0 -> [{'Idris.TTImp.TTImp.Inline'} | []]; 1 -> [{'Idris.TTImp.TTImp.Inline'} | [{'Idris.TTImp.TTImp.Hint', 0} | []]]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V187 = ('un--bindImpls'(V14, V7, ('un--bindConstraints'(V14, {'Idris.Core.TT.AutoImplicit'}, V6, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V14, V5}, V4))))))), begin (V188 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V18, V29))), case V188 of {'Idris.Prelude.Types.Left', E100} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V190) -> begin (V191 = case V190 of 0 -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, V8, [], V187)); 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V192 = ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V191, V187))), begin (V193 = {'Idris.TTImp.TTImp.IClaim', V14, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V13, V186, {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V20, V192}}), begin (V194 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Implementation type: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V192)))) end))(V29))), case V194 of {'Idris.Prelude.Types.Left', E102} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V196) -> begin (V197 = case ('Idris.Idris2.Idris.Syntax':'un--typePass'(V11)) of 0 -> (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V18, V15, V17, [], V9, V10, V193))(V29)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V197 of {'Idris.Prelude.Types.Left', E104} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V199) -> case ('Idris.Idris2.Idris.Syntax':'un--defPass'(V11)) of 0 -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V200) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V201) -> fun (V202) -> begin (V204 = begin (V203 = ('erlang':'get'(V18))), {'Idris.Prelude.Types.Right', V203} end), case V204 of {'Idris.Prelude.Types.Left', E106} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V206) -> begin (V234 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V20, case V206 of {'Idris.Core.Context.MkDefs', E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134} -> (fun (V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233) -> V207 end(E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V202))), case V234 of {'Idris.Prelude.Types.Left', E135} -> (fun (V235) -> {'Idris.Prelude.Types.Left', V235} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V236) -> begin (V237 = {'Idris.Prelude.Types.Just', V98}), case V236 of {'Idris.Prelude.Types.Just', E137} -> (fun (V238) -> begin (V239 = (('un--getMethImps'([], V18, {'Idris.Core.Env.Nil'}, V238))(V202))), case V239 of {'Idris.Prelude.Types.Left', E138} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V241) -> begin (V281 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bind implicits to each method: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V242) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V243) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V243)) end, fun (V244) -> fun (V245) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V244, V245)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V246) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V247) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V247)) end, fun (V248) -> fun (V249) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V248, V249)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V250) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V250)) end, fun (V251) -> fun (V252) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V251, V252)) end end}}, V246)) end, fun (V253) -> fun (V254) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V255) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V255)) end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V256, V257)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V258) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V258)) end, fun (V259) -> fun (V260) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V259, V260)) end end}}, V253, V254)) end end}}, V242)) end, fun (V261) -> fun (V262) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V263) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V263)) end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V264, V265)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V266) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V267) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V267)) end, fun (V268) -> fun (V269) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V268, V269)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V270) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V270)) end, fun (V271) -> fun (V272) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V271, V272)) end end}}, V266)) end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V275) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V275)) end, fun (V276) -> fun (V277) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V276, V277)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V278) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V278)) end, fun (V279) -> fun (V280) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V279, V280)) end end}}, V273, V274)) end end}}, V261, V262)) end end}, V241)))) end))(V202))), case V281 of {'Idris.Prelude.Types.Left', E140} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V283) -> begin (V284 = {'Idris.Prelude.Types.Just', V238}), (('case--case block in case block in case block in case block in elabImplementation-7603'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V25, V27, V28, V60, V97, V98, V237, V134, V186, V187, V190, V191, V192, V193, V201, V206, V238, V284, V241, ('un--addDefaults'(V14, V20, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E142, E143, E144, E145, E146, E147} -> (fun (V285, V286, V287, V288, V289, V290) -> V287 end(E142, E143, E144, E145, E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V291) -> ('Idris.Idris2.Core.Name':'un--dropNS'(case V291 of {'Idris.Idris.Syntax.MkMethod', E148, E149, E150, E151} -> (fun (V292, V293, V294, V295) -> V292 end(E148, E149, E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E152, E153, E154, E155, E156, E157} -> (fun (V296, V297, V298, V299, V300, V301) -> V300 end(E152, E153, E154, E155, E156, E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E158, E159, E160, E161, E162, E163} -> (fun (V302, V303, V304, V305, V306, V307) -> V307 end(E158, E159, E160, E161, E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V201))))(V202)) end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t happen, can\x{27}t find type of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20))))}, V202)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V0))(V29)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V18, V14, case V28 of {'Idris.Idris.Syntax.MkIFaceInfo', E164, E165, E166, E167, E168, E169} -> (fun (V308, V309, V310, V311, V312, V313) -> V308 end(E164, E165, E166, E167, E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V18, V14, V27, V29)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> fun (V314) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V315) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V315)) end, V24))}, V314)) end end end(E0, E1)); [] -> fun (V316) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V18, V14, V5, V316)) end; _ -> fun (V317) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V318) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V318)) end, V24))}, V317)) end end.
'case--elabImplementation-6644'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Just', E0} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V21, V22) -> case V21 of {'Idris.Prelude.Types.Just', E3} -> (fun (V23) -> V23 end(E3)); _ -> V2 end end(E1, E2)); _ -> V2 end end(E0)); _ -> V2 end.
'case--elabImplementation,addTransform-6470'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> begin (V25 = {'Idris.TTImp.TTImp.IVar', V14, V24}), fun (V26) -> begin (V27 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ==> "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V25)))))) end))(V26))), case V27 of {'Idris.Prelude.Types.Left', E1} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V29) -> ('Idris.Idris2.Core.UnifyState':'un--handleUnify'('erased', V18, V17, ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V8, V18, V15, V17, [], V9, V10, {'Idris.TTImp.TTImp.ITransform', V14, {'Idris.Core.Name.UN', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V19 of {'Idris.Idris.Syntax.MkMethod', E3, E4, E5, E6} -> (fun (V30, V31, V32, V33) -> V30 end(E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21))))))}, V22, V25})), fun (V34) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t add transform "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ==> "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Core.Core':'dn--un--show_Show_Error'(V34)))))))))))) end)) end, V26)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabImplementation,findMethName-6210'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V20, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is not a method of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5))))))}, V23)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', V24} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabImplementation,topMethTypes-6022'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V29, V30) -> fun (V31) -> begin (V32 = (('nested--15113-5003--in--un--topMethTypes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V30, V27)), V26, V25, V24, V23, V22, V21, V20))(V31))), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> {'Idris.Prelude.Types.Right', [V29 | V34]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in elabImplementation,topMethType-5796'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> case V40 of 0 -> []; 1 -> [{'Idris.Builtin.MkPair', V27, ('nested--15113-4994--in--un--impsApply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.IVar', V14, V27}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V41) -> {'Idris.Builtin.MkPair', V41, {'Idris.TTImp.TTImp.IBindVar', V14, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41))}} end, V39))))} | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabImplementation,topMethType-5482'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V31 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V32, V33) -> begin (V34 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(V8, V26, V33))), begin (V36 = ('Idris.Idris2.TTImp.Utils':'un--substBindVars'(V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V35) -> {'Idris.Builtin.MkPair', V35, {'Idris.TTImp.TTImp.Implicit', V14, 1}} end, V22)), V34))), begin (V37 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(V8, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V21, V4)), V36))), fun (V38) -> begin (V57 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Substitute implicits "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V40, V41)) end end}, V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" parameters "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V44, V45)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V46) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V46)) end, fun (V47) -> fun (V48) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V47, V48)) end end}}, V42)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V52, V53)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V54) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V55, V56)) end end}}, V49, V50)) end end}, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V21, V4)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V34)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V37)))))))))))))))) end))(V38))), case V57 of {'Idris.Prelude.Types.Left', E2} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V59) -> begin (V60 = ('nested--15113-5001--in--un--bindImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V24, ('un--bindConstraints'(V14, {'Idris.Core.TT.AutoImplicit'}, V6, V37))))), begin (V61 = ('Idris.Idris2.TTImp.TTImp':'un--findImplicits'(V60))), begin (V62 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNamesUsed'(V18, V61, V8, V60, V38))), case V62 of {'Idris.Prelude.Types.Left', E4} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V64) -> begin (V69 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Method "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V19 of {'Idris.Idris.Syntax.MkMethod', E6, E7, E8, E9} -> (fun (V65, V66, V67, V68) -> V65 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ==> "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V64)))))))))))) end))(V38))), case V69 of {'Idris.Prelude.Types.Left', E10} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V71) -> begin (V72 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"    (initially "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V34)), <<")"/utf8>>)))) end))(V38))), case V72 of {'Idris.Prelude.Types.Left', E12} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V74) -> begin (V90 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updates "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V77, V78)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V80, V81)) end end}}, V75)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V84) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V84)) end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V85, V86)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V87) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V87)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V88, V89)) end end}}, V82, V83)) end end}, V26)))) end))(V38))), case V90 of {'Idris.Prelude.Types.Left', E14} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V92) -> begin (V93 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"From "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V60)))) end))(V38))), case V93 of {'Idris.Prelude.Types.Left', E16} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V95) -> begin (V111 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Name updates "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V96) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V97) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V98, V99)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V100) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V101, V102)) end end}}, V96)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V105) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V105)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V106, V107)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V109, V110)) end end}}, V103, V104)) end end}, V32)))) end))(V38))), case V111 of {'Idris.Prelude.Types.Left', E18} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V113) -> begin (V117 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Param names: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V115, V116)) end end}, V21)))) end))(V38))), case V117 of {'Idris.Prelude.Types.Left', E20} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V119) -> begin (V123 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Used names "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V120) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V121, V122)) end end}, V61)))) end))(V38))), case V123 of {'Idris.Prelude.Types.Left', E22} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V125) -> begin (V127 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V126) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V126)) end, V24))), begin (V128 = ('case--case block in elabImplementation,topMethType-5796'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V32, V33, V34, V36, V37, V60, V61, V64, V127, ('Idris.Idris2.Data.List':'un--isNil'('erased', V127))))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', case V19 of {'Idris.Idris.Syntax.MkMethod', E24, E25, E26, E27} -> (fun (V129, V130, V131, V132) -> V129 end(E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', V32, {'Idris.Builtin.MkPair', case V19 of {'Idris.Idris.Syntax.MkMethod', E28, E29, E30, E31} -> (fun (V133, V134, V135, V136) -> V134 end(E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', case V19 of {'Idris.Idris.Syntax.MkMethod', E32, E33, E34, E35} -> (fun (V137, V138, V139, V140) -> V139 end(E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V64}}}}}, V128}} end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabImplementation,methName-5334'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V3 of 0 -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)); 1 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addDefaults,extendBody-4822'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--14907-4794--in--un--extendBody'(V0, V1, V2, V3, V4, V5, [V6 | V9], V7, V8)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V13 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V12) -> ('nested--14907-4793--in--un--specialiseMeth'(V0, V1, V2, V3, V4, V5, V12)) end, V2))))), begin (V15 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('Idris.Idris2.TTImp.Utils':'un--substNamesClause'([], V13, V14)) end, V11))), ('nested--14907-4794--in--un--extendBody'(V0, V1, V2, V3, V4, V5, V9, V7, [{'Idris.TTImp.TTImp.IDef', V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.TTImp.Utils':'un--substLocClause'(V5, V16)) end, V15))} | V8])) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-5008--in--un--updateClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V21, V22, V23) -> fun (V24) -> begin (V25 = (('nested--15113-5007--in--un--updateApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V22))(V24))), case V25 of {'Idris.Prelude.Types.Left', E3} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PatClause', V21, V27, V23}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E5, E6, E7, E8, E9, E10} -> (fun (V28, V29, V30, V31, V32, V33) -> fun (V34) -> begin (V35 = (('nested--15113-5007--in--un--updateApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V29))(V34))), case V35 of {'Idris.Prelude.Types.Left', E11} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V37) -> begin (V39 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V38) -> ('nested--15113-5008--in--un--updateClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V38)) end, V33, []))(V34))), case V39 of {'Idris.Prelude.Types.Left', E13} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.WithClause', V28, V37, V30, V31, V32, V41}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7, E8, E9, E10)); {'Idris.TTImp.TTImp.ImpossibleClause', E15, E16} -> (fun (V42, V43) -> fun (V44) -> begin (V45 = (('nested--15113-5007--in--un--updateApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V43))(V44))), case V45 of {'Idris.Prelude.Types.Left', E17} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ImpossibleClause', V42, V47}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-5009--in--un--updateBody'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.IDef', E0, E1, E2} -> (fun (V21, V22, V23) -> fun (V24) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V25) -> ('nested--15113-5008--in--un--updateClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V25)) end, V23, []))(V24))), case V26 of {'Idris.Prelude.Types.Left', E3} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V28) -> begin (V29 = (('nested--15113-5006--in--un--findMethName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V22))(V24))), case V29 of {'Idris.Prelude.Types.Left', E5} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDef', V21, V31, V28}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> fun (V32) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V14, <<"Implementation body can only contain definitions"/utf8>>}, V32)) end end.
'nested--15113-5007--in--un--updateApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V24 = (('nested--15113-5006--in--un--findMethName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V22))(V23))), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V21, V26}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E4, E5, E6} -> (fun (V27, V28, V29) -> fun (V30) -> begin (V31 = (('nested--15113-5007--in--un--updateApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V28))(V30))), case V31 of {'Idris.Prelude.Types.Left', E7} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V27, V33, V29}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V34, V35, V36) -> fun (V37) -> begin (V38 = (('nested--15113-5007--in--un--updateApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V35))(V37))), case V38 of {'Idris.Prelude.Types.Left', E12} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAutoApp', V34, V40, V36}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); {'Idris.TTImp.TTImp.INamedApp', E14, E15, E16, E17} -> (fun (V41, V42, V43, V44) -> fun (V45) -> begin (V46 = (('nested--15113-5007--in--un--updateApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V42))(V45))), case V46 of {'Idris.Prelude.Types.Left', E18} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.INamedApp', V41, V48, V43, V44}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14, E15, E16, E17)); _ -> fun (V49) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V20)), <<"Invalid method definition"/utf8>>}, V49)) end end.
'nested--15113-5003--in--un--topMethTypes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of [] -> fun (V27) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V28, V29) -> fun (V30) -> begin (V31 = ('nested--15113-5002--in--un--topMethType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V28, V30))), case V31 of {'Idris.Prelude.Types.Left', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V34, V35) -> begin (V36 = (('nested--15113-5003--in--un--topMethTypes'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V35, V19)), V20, V21, V22, V23, V24, V25, V29))(V30))), case V36 of {'Idris.Prelude.Types.Left', E6} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V38) -> {'Idris.Prelude.Types.Right', [V34 | V38]} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-5002--in--un--topMethType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> begin (V32 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V18, ('nested--15113-4999--in--un--methName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, case V26 of {'Idris.Idris.Syntax.MkMethod', E0, E1, E2, E3} -> (fun (V28, V29, V30, V31) -> V28 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V27))), case V32 of {'Idris.Prelude.Types.Left', E4} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V34) -> begin (V37 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V35) -> fun (V36) -> ('nested--15113-5000--in--un--applyCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V20, V35, V36)) end end, V25, []))(V27))), case V37 of {'Idris.Prelude.Types.Left', E6} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V39) -> begin (V40 = V39), begin (V45 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(V8, V40, case V26 of {'Idris.Idris.Syntax.MkMethod', E8, E9, E10, E11} -> (fun (V41, V42, V43, V44) -> V44 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), (('case--elabImplementation,topMethType-5482'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V26, V25, V24, V23, V22, V21, V20, V19, V34, V39, V40, V45, (('Idris.Idris2.TTImp.BindImplicits':'un--renameIBinds'(V22, ('Idris.Idris2.TTImp.TTImp':'un--findImplicits'(V45)), V45))([]))))(V27)) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--14817-4702--in--un--toForward'(V0) -> case V0 of $\x{5c} -> $/; _ -> V0 end.
'nested--14907-4793--in--un--specialiseMeth'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Builtin.MkPair', V6, {'Idris.TTImp.TTImp.INamedApp', V5, {'Idris.TTImp.TTImp.IVar', V5, V6}, {'Idris.Core.Name.UN', <<"__con"/utf8>>}, {'Idris.TTImp.TTImp.IVar', V5, V4}}}.
'nested--15113-5004--in--un--mkTopMethDecl'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V28, V29) -> begin (V31 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V12 end, fun () -> fun (V30) -> [{'Idris.TTImp.TTImp.Totality', V30} | V12] end end, V28))), {'Idris.TTImp.TTImp.IClaim', V14, V26, V13, V31, {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V22, V29}} end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-4998--in--un--mkMethField'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V28, V29) -> case V29 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V30, V31) -> begin (V38 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V32) -> ('nested--15144-5220--in--un--applyUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V22, V24, V26, V28, V30, V31, V20, V19, V32)) end, ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> [] end, fun () -> fun (V33) -> V33 end end, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V36, V37)) end end}, ('Idris.Idris2.Core.Name':'un--dropNS'(V22)), V20))))))), begin (V40 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V39)) end, V19))), ('nested--15113-4996--in--un--mkLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V38, ('nested--15113-4994--in--un--impsApply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('nested--15113-4997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V24}, V38)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V41) -> {'Idris.Builtin.MkPair', V41, {'Idris.TTImp.TTImp.IVar', V14, {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41))}}} end, V40)))))) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-4996--in--un--mkLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of [] -> V20; [E0 | E1] -> (fun (V21, V22) -> case V21 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V25, V26) -> {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, V25, V26, {'Idris.Prelude.Types.Just', V23}, {'Idris.TTImp.TTImp.Implicit', V14, 1}, ('nested--15113-4996--in--un--mkLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V22, V20))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-5005--in--un--methNameUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> case V21 of {'Idris.Core.Name.UN', E4} -> (fun (V23) -> case V22 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V24, V25) -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', V23}, V24} end(E7, E8)); _ -> case V22 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V26, V27) -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--nameRoot'(V21))}, V26} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Core.Name.RF', E9} -> (fun (V28) -> case V22 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V29, V30) -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.RF', V28}, V29} end(E12, E13)); _ -> case V22 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V31, V32) -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--nameRoot'(V21))}, V31} end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); {'Idris.Core.Name.NS', E14, E15} -> (fun (V33, V34) -> case V22 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V35, V36) -> ('nested--15113-5005--in--un--methNameUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', {'Idris.Builtin.MkPair', V34, {'Idris.Builtin.MkPair', V35, V36}})) end(E18, E19)); _ -> case V22 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V37, V38) -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--nameRoot'(V21))}, V37} end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15)); _ -> case V22 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V39, V40) -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', ('Idris.Idris2.Core.Name':'un--nameRoot'(V21))}, V39} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-4999--in--un--methName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V20, V21) -> ('nested--15113-4999--in--un--methName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V21)) end(E0, E1)); _ -> {'Idris.Core.Name.DN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), {'Idris.Core.Name.UN', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V3 of 0 -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)); 1 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V22)) end, V4))))))))))))))}} end.
'nested--15113-4994--in--un--impsApply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of [] -> V19; [E0 | E1] -> (fun (V21, V22) -> case V21 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V23, V24) -> ('nested--15113-4994--in--un--impsApply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.INamedApp', V14, V19, V23, V24}, V22)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-4993--in--un--getFieldArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V21, V22, V23, V24) -> case V23 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V25, V26, V27, V28) -> [{'Idris.Builtin.MkPair', V22, ('nested--15139-5059--in--un--getArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', V21, V25, V26, V27, V28, V22, V24, 'erased', V28))} | ('nested--15113-4993--in--un--getFieldArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', V24))] end(E4, E5, E6, E7)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'nested--15139-5059--in--un--getArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V29, V30, V31, V32) -> case V31 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V33, V34, V35, V36) -> [{'Idris.Builtin.MkPair', V30, {'Idris.Builtin.MkPair', V34, ('Idris.Idris2.Core.TT':'un--forgetDef'('erased', 'erased', V35))}} | ('nested--15139-5059--in--un--getArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, 'erased', V20, V21, V22, V23, V24, V25, V26, 'erased', V32))] end(E4, E5, E6, E7)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'nested--15113-5006--in--un--findMethName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> ('case--elabImplementation,findMethName-6210'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V21, V20, V19, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V24, V25)) end end}, V21, V19)))).
'nested--14907-4794--in--un--extendBody'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Idris.Builtin.MkPair', V8, V6}; [E0 | E1] -> (fun (V9, V10) -> ('case--addDefaults,extendBody-4822'(V0, V1, V2, V3, V4, V5, V9, V10, V8, V6, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V9, V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14907-4795--in--un--dropGot'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V6; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.TTImp.TTImp.IDef', E2, E3, E4} -> (fun (V10, V11, V12) -> ('nested--14907-4795--in--un--dropGot'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V11)) end, V6)), V9)) end(E2, E3, E4)); _ -> ('nested--14907-4795--in--un--dropGot'(V0, V1, V2, V3, V4, V5, V6, V9)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-5001--in--un--bindImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V19 of [] -> V20; [E0 | E1] -> (fun (V21, V22) -> case V21 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V25, V26) -> {'Idris.TTImp.TTImp.IPi', V14, V25, {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', V23}, V26, ('nested--15113-5001--in--un--bindImps'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V22, V20))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-4995--in--un--autoImpsApply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of [] -> V19; [E0 | E1] -> (fun (V21, V22) -> ('nested--15113-4995--in--un--autoImpsApply'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.IAutoApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V19)), V19, V21}, V22)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15144-5220--in--un--applyUpdate'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V28, V29) -> case V28 of {'Idris.Core.Name.UN', E2} -> (fun (V30) -> case V29 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V31, V32) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', V30}, {'Idris.Builtin.MkPair', V31, V32}} end, fun () -> fun (V33) -> {'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', V33}, {'Idris.Builtin.MkPair', V31, V32}} end end, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V36, V37)) end end}, V30, V21)))) end(E3, E4)); _ -> V27 end end(E2)); _ -> V27 end end(E0, E1)); _ -> V27 end.
'nested--15113-4997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of [] -> V19; [E0 | E1] -> (fun (V21, V22) -> case V21 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V25, V26) -> case V26 of {'Idris.Core.TT.Explicit'} -> (fun () -> ('nested--15113-4997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.IApp', {'Idris.Core.FC.EmptyFC'}, V19, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V23}}, V22)) end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('nested--15113-4997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.INamedApp', {'Idris.Core.FC.EmptyFC'}, V19, V23, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V23}}, V22)) end()); {'Idris.Core.TT.Implicit'} -> (fun () -> ('nested--15113-4997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.INamedApp', {'Idris.Core.FC.EmptyFC'}, V19, V23, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V23}}, V22)) end()); {'Idris.Core.TT.DefImplicit', E6} -> (fun (V27) -> ('nested--15113-4997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, {'Idris.TTImp.TTImp.INamedApp', {'Idris.Core.FC.EmptyFC'}, V19, V23, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V23}}, V22)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15113-4992--in--un--applyEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> begin (V21 = (('Idris.Idris2.Core.Context':'un--resolveName'(V18, V19))(V20))), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.Name.Resolved', V23}, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Core.Env':'un--allVars'(V8, V10)))), fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V8, V14, {'Idris.Core.TT.Ref', V14, V25, {'Idris.Core.Name.Resolved', V23}}, V10)) end end}}}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--15113-5000--in--un--applyCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> begin (V22 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V18, ('nested--15113-4999--in--un--methName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V20))))(V21))), case V22 of {'Idris.Prelude.Types.Left', E0} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name':'un--dropNS'(V20)), {'Idris.TTImp.TTImp.IVar', V14, V24}}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--15113-5010--in--un--addTransform'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> begin (V46 = (('Idris.Idris2.Core.Context.Log':'un--log'(V18, <<"elab.implementation"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Adding transform for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V21 of {'Idris.Idris.Syntax.MkMethod', E0, E1, E2, E3} -> (fun (V23, V24, V25, V26) -> V23 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(case V21 of {'Idris.Idris.Syntax.MkMethod', E4, E5, E6, E7} -> (fun (V27, V28, V29, V30) -> V30 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V31) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V33, V34)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V36, V37)) end end}}, V31)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V41, V42)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V44, V45)) end end}}, V38, V39)) end end}, V20)))))))))))))))) end))(V22))), case V46 of {'Idris.Prelude.Types.Left', E8} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V48) -> begin (V53 = {'Idris.TTImp.TTImp.INamedApp', V14, {'Idris.TTImp.TTImp.IVar', V14, case V21 of {'Idris.Idris.Syntax.MkMethod', E10, E11, E12, E13} -> (fun (V49, V50, V51, V52) -> V49 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, {'Idris.Core.Name.UN', <<"__con"/utf8>>}, {'Idris.TTImp.TTImp.IVar', V14, V19}}), (('case--elabImplementation,addTransform-6470'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V21, V20, V19, V53, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V56, V57)) end end}, ('Idris.Idris2.Core.Name':'un--dropNS'(case V21 of {'Idris.Idris.Syntax.MkMethod', E14, E15, E16, E17} -> (fun (V58, V59, V60, V61) -> V58 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V20))))(V22)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--replaceSep'(V0) -> ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V1) -> ('nested--14817-4702--in--un--toForward'(V1)) end, ('Idris.Idris2.Prelude.Types':'un--unpack'(V0)))))).
'un--mkImplName'(V0, V1, V2) -> {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" implementation at "/utf8>>, ('un--replaceSep'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V0)))))))), {'Idris.Core.Name.UN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__Impl_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V3) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V3)) end, V2))))))))))}}.
'un--getMethImps'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V12) -> begin (V13 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'(V0, V1, V2, V11, V12))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> begin (V16 = (('un--getMethImps'([V5 | V0], V1, {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V8, V9, {'Idris.Core.TT.Implicit'}, V11}, V2}, V7))(V12))), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V9, V15}} | V18]} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V19) -> {'Idris.Prelude.Types.Right', []} end end end(E4, E5, E6, E7)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1, E2, E3)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', []} end end.
'un--elabImplementation'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V23 = ('case--elabImplementation-6644'(V18, V17, V16, V15, V14, V13, V12, V11, V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V21, V22)) end end}, V16, V10))))), fun (V24) -> begin (V25 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V23))(V24))), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> begin (V29 = begin (V28 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E2} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> begin (V63 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V13, case V35 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V36 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V24))), case V63 of {'Idris.Prelude.Types.Left', E33} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V65) -> (('case--elabImplementation-6788'(V18, V17, V16, V15, V14, V13, V12, V11, V0, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V23, V27, V31, V35, V65, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V69, V70, V71)) end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V74, V75, V76)) end end end end end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V78)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V79, V80)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V81) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V81, case V31 of {'Idris.Idris.Syntax.MkSyntax', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V84 end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V66) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V66)) end, V65))))))(V24)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--bindImpls'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> {'Idris.TTImp.TTImp.IPi', V0, V7, {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', V5}, V8, ('un--bindImpls'(V0, V4, V2))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindConstraints'(V0, V1, V2, V3) -> case V2 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> {'Idris.TTImp.TTImp.IPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V1, V6, V7, ('un--bindConstraints'(V0, V1, V5, V3))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addDefaults'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('nested--14907-4795--in--un--dropGot'(V5, V4, V3, V2, V1, V0, V3, V5))), ('nested--14907-4794--in--un--extendBody'(V5, V4, V3, V2, V1, V0, [], V6, V5)) end.
