-module('Idris.Idris2.Compiler.ANF').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in toANF-1825'/9,
  'case--toANF-1791'/5,
  'case--toANF,bindArgs-1735'/10,
  'case--anfConAlt-1658'/8,
  'case--anfConAlt,bindArgs-1610'/13,
  'case--anf-1432'/11,
  'case--anf-1332'/8,
  'nested--7572-909--in--un--showArg'/5,
  'nested--7883-1190--in--un--doBind'/6,
  'nested--8457-1699--in--un--bindArgs'/7,
  'nested--7957-1576--in--un--bindArgs'/10,
  'dn--un--show_Show_AVar'/1,
  'dn--un--show_Show_ANFDef'/1,
  'dn--un--show_Show_ANF'/1,
  'dn--un--show_Show_AConstAlt'/1,
  'dn--un--show_Show_AConAlt'/1,
  'dn--un--showPrec_Show_AVar'/2,
  'dn--un--showPrec_Show_ANFDef'/2,
  'dn--un--showPrec_Show_ANF'/2,
  'dn--un--showPrec_Show_AConstAlt'/2,
  'dn--un--showPrec_Show_AConAlt'/2,
  'dn--un--__Impl_Show_AVar'/0,
  'dn--un--__Impl_Show_ANFDef'/0,
  'dn--un--__Impl_Show_ANF'/0,
  'dn--un--__Impl_Show_AConstAlt'/0,
  'dn--un--__Impl_Show_AConAlt'/0,
  'un--toANF'/1,
  'un--showLazy'/1,
  'un--nextVar'/2,
  'un--mlet'/4,
  'un--lookup'/5,
  'un--letBind'/5,
  'un--bindArgs'/2,
  'un--anfConstAlt'/4,
  'un--anfConAlt'/4,
  'un--anfArgs'/7,
  'un--anf'/4
]).
'case--case block in toANF-1825'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--anf'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V0, V1)), V3, V10, V2))(V11))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkAFun', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Data.List':'un--reverse'('erased', V9)))), V14}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toANF-1791'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> begin (V7 = V6), fun (V8) -> begin (V9 = (('nested--8457-1699--in--un--bindArgs'(V0, V1, V2, 'erased', V3, V0, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> begin (V14 = (('un--anf'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V0, V1)), V3, V13, V2))(V8))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkAFun', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V5, ('Idris.Idris2.Data.List':'un--reverse'('erased', V12)))), V16}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toANF,bindArgs-1735'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [V8 | V10], {'Idris.Compiler.ANF.::', V8, V11}}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--anfConAlt-1658'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('un--anf'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V1, V0)), V6, V9, V2))(V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkAConAlt', V4, V3, V8, V13}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--anfConAlt,bindArgs-1610'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [V11 | V13], {'Idris.Compiler.ANF.::', V11, V14}}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--anf-1432'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Compiler.ANF.ACrash', V5, <<"Can\x{27}t happen (AOp)"/utf8>>} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> {'Idris.Compiler.ANF.AOp', V5, V4, V3, V11} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--anf-1332'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V9 of [E2 | E3] -> (fun (V10, V11) -> case V11 of [] -> {'Idris.Compiler.ANF.AApp', V4, V3, V8, V10}; _ -> {'Idris.Compiler.ANF.ACrash', V4, <<"Can\x{27}t happen (AApp)"/utf8>>} end end(E2, E3)); _ -> {'Idris.Compiler.ANF.ACrash', V4, <<"Can\x{27}t happen (AApp)"/utf8>>} end end(E0, E1)); _ -> {'Idris.Compiler.ANF.ACrash', V4, <<"Can\x{27}t happen (AApp)"/utf8>>} end.
'nested--7572-909--in--un--showArg'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"v"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4)))).
'nested--7883-1190--in--un--doBind'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> (V0(('Idris.Idris2.Data.List':'un--reverse'('erased', V4)))); [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V8 of {'Idris.Compiler.ANF.ALocal', E4} -> (fun (V10) -> case V9 of {'Idris.Prelude.Types.Just', E5} -> (fun (V11) -> {'Idris.Compiler.ANF.ALet', V2, V10, V11, ('nested--7883-1190--in--un--doBind'(V0, V1, V2, V3, [{'Idris.Compiler.ANF.ALocal', V10} | V4], V7))} end(E5)); _ -> ('nested--7883-1190--in--un--doBind'(V0, V1, V2, V3, [V8 | V4], V7)) end end(E4)); _ -> ('nested--7883-1190--in--un--doBind'(V0, V1, V2, V3, [V8 | V4], V7)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8457-1699--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V6}} end; [E0 | E1] -> (fun (V8, V9) -> fun (V10) -> begin (V11 = ('un--nextVar'(V4, V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = (('nested--8457-1699--in--un--bindArgs'(V0, V1, V2, 'erased', V4, V9, V6))(V10))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [V13 | V17], {'Idris.Compiler.ANF.::', V13, V18}}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7957-1576--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V9}} end; [E0 | E1] -> (fun (V11, V12) -> fun (V13) -> begin (V14 = ('un--nextVar'(V6, V13))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = (('nested--7957-1576--in--un--bindArgs'(V0, V1, V2, V3, V4, V5, V6, 'erased', V12, V9))(V13))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V20, V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [V16 | V20], {'Idris.Compiler.ANF.::', V16, V21}}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_AVar'(V0) -> case V0 of {'Idris.Compiler.ANF.ALocal', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"v"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))) end(E0)); {'Idris.Compiler.ANF.ANull'} -> (fun () -> <<"[__]"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ANFDef'(V0) -> case V0 of {'Idris.Compiler.ANF.MkAFun', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V4, V5)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('dn--un--show_Show_ANF'(V2)))))) end(E0, E1)); {'Idris.Compiler.ANF.MkACon', E2, E3, E4} -> (fun (V6, V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor tag "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" newtype by "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V13, V14)) end end}, V8)))))))))))) end(E2, E3, E4)); {'Idris.Compiler.ANF.MkAForeign', E5, E6, E7} -> (fun (V15, V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Foreign call "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V18)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V19, V20)) end end}, V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V21) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--showPrec_Show_CFType'(V22, V23)) end end}, V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -> "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V17)))))))))))) end(E5, E6, E7)); {'Idris.Compiler.ANF.MkAError', E8} -> (fun (V24) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, ('dn--un--show_Show_ANF'(V24)))) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ANF'(V0) -> case V0 of {'Idris.Compiler.ANF.AV', E0, E1} -> (fun (V1, V2) -> ('dn--un--show_Show_AVar'(V2)) end(E0, E1)); {'Idris.Compiler.ANF.AAppName', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V7) -> ('dn--un--show_Show_AVar'(V7)) end, V6)))), <<")"/utf8>>)))))))) end(E2, E3, E4, E5)); {'Idris.Compiler.ANF.AUnderApp', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" underapp "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<">("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V12) -> ('dn--un--show_Show_AVar'(V12)) end, V11)))), <<")"/utf8>>)))))))))))) end(E6, E7, E8, E9)); {'Idris.Compiler.ANF.AApp', E10, E11, E12, E13} -> (fun (V13, V14, V15, V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_AVar'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" @ ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_AVar'(V16)), <<")"/utf8>>)))))))) end(E10, E11, E12, E13)); {'Idris.Compiler.ANF.ALet', E14, E15, E16, E17} -> (fun (V17, V18, V19, V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%let v"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ANF'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") in ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ANF'(V20)), <<")"/utf8>>)))))))))))) end(E14, E15, E16, E17)); {'Idris.Compiler.ANF.ACon', E18, E19, E20, E21} -> (fun (V21, V22, V23, V24) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%con "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V25) -> ('dn--un--show_Show_AVar'(V25)) end, V24)))), <<")"/utf8>>)))))))) end(E18, E19, E20, E21)); {'Idris.Compiler.ANF.AOp', E22, E23, E24, E25} -> (fun (V26, V27, V28, V29) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%op "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V28)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V42)) end end}))(('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'('erased', 'erased', 'erased', fun (V30) -> ('dn--un--show_Show_AVar'(V30)) end, V29)))))), <<")"/utf8>>)))))))))) end(E22, E23, E24, E25)); {'Idris.Compiler.ANF.AExtPrim', E26, E27, E28, E29} -> (fun (V43, V44, V45, V46) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%extprim "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showLazy'(V44)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V47) -> ('dn--un--show_Show_AVar'(V47)) end, V46)))), <<")"/utf8>>)))))))))) end(E26, E27, E28, E29)); {'Idris.Compiler.ANF.AConCase', E30, E31, E32, E33} -> (fun (V48, V49, V50, V51) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_AVar'(V49)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V52) -> ('dn--un--show_Show_AConAlt'(V52)) end, V50)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V53) -> ('dn--un--show_Show_ANF'(V53)) end, fun (V54) -> fun (V55) -> ('dn--un--showPrec_Show_ANF'(V54, V55)) end end}, V51)), <<" }"/utf8>>)))))))))))) end(E30, E31, E32, E33)); {'Idris.Compiler.ANF.AConstCase', E34, E35, E36, E37} -> (fun (V56, V57, V58, V59) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_AVar'(V57)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" of { "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"| "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V60) -> ('dn--un--show_Show_AConstAlt'(V60)) end, V58)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V61) -> ('dn--un--show_Show_ANF'(V61)) end, fun (V62) -> fun (V63) -> ('dn--un--showPrec_Show_ANF'(V62, V63)) end end}, V59)), <<" }"/utf8>>)))))))))))) end(E34, E35, E36, E37)); {'Idris.Compiler.ANF.APrimVal', E38, E39} -> (fun (V64, V65) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V65)) end(E38, E39)); {'Idris.Compiler.ANF.AErased', E40} -> (fun (V66) -> <<"___"/utf8>> end(E40)); {'Idris.Compiler.ANF.ACrash', E41, E42} -> (fun (V67, V68) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%CRASH("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V68)), <<")"/utf8>>)))) end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_AConstAlt'(V0) -> case V0 of {'Idris.Compiler.ANF.MkAConstAlt', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%constalt("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") => "/utf8>>, ('dn--un--show_Show_ANF'(V2)))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_AConAlt'(V0) -> case V0 of {'Idris.Compiler.ANF.MkAConAlt', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"%conalt "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V5) -> ('nested--7572-909--in--un--showArg'(V4, V3, V2, V1, V5)) end, V3)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") => "/utf8>>, ('dn--un--show_Show_ANF'(V4)))))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_AVar'(V0, V1) -> ('dn--un--show_Show_AVar'(V1)).
'dn--un--showPrec_Show_ANFDef'(V0, V1) -> ('dn--un--show_Show_ANFDef'(V1)).
'dn--un--showPrec_Show_ANF'(V0, V1) -> ('dn--un--show_Show_ANF'(V1)).
'dn--un--showPrec_Show_AConstAlt'(V0, V1) -> ('dn--un--show_Show_AConstAlt'(V1)).
'dn--un--showPrec_Show_AConAlt'(V0, V1) -> ('dn--un--show_Show_AConAlt'(V1)).
'dn--un--__Impl_Show_AVar'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_AVar'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_AVar'(V1, V2)) end end}.
'dn--un--__Impl_Show_ANFDef'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_ANFDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ANFDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_ANF'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_ANF'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ANF'(V1, V2)) end end}.
'dn--un--__Impl_Show_AConstAlt'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_AConstAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_AConstAlt'(V1, V2)) end end}.
'dn--un--__Impl_Show_AConAlt'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_AConAlt'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_AConAlt'(V1, V2)) end end}.
'un--toANF'(V0) -> case V0 of {'Idris.Compiler.LambdaLift.MkLFun', E0, E1, E2} -> (fun (V1, V2, V3) -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.ANF.Next'}, 0, V4))), case V5 of {'Idris.Prelude.Types.Left', E3} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V7) -> begin (V8 = (('nested--8457-1699--in--un--bindArgs'(V2, V1, V3, 'erased', V7, V1, {'Idris.Compiler.ANF.Nil'}))(V4))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V11, V12) -> begin (V13 = V12), begin (V14 = (('nested--8457-1699--in--un--bindArgs'(V2, V1, V3, 'erased', V7, V2, V13))(V4))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V17, V18) -> begin (V19 = (('un--anf'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V2, V1)), V7, V18, V3))(V4))), case V19 of {'Idris.Prelude.Types.Left', E13} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkAFun', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V11, ('Idris.Idris2.Data.List':'un--reverse'('erased', V17)))), V21}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.Compiler.LambdaLift.MkLCon', E15, E16, E17} -> (fun (V22, V23, V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkACon', V22, V23, V24}} end end(E15, E16, E17)); {'Idris.Compiler.LambdaLift.MkLForeign', E18, E19, E20} -> (fun (V26, V27, V28) -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkAForeign', V26, V27, V28}} end end(E18, E19, E20)); {'Idris.Compiler.LambdaLift.MkLError', E21} -> (fun (V30) -> fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.ANF.Next'}, 0, V31))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> begin (V35 = (('un--anf'([], V34, {'Idris.Compiler.ANF.Nil'}, V30))(V31))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkAError', V37}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showLazy'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_LazyReason'(V1)))) end end, V0)).
'un--nextVar'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'put'(V0, ((V5 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V5} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mlet'(V0, V1, V2, V3) -> case V2 of {'Idris.Compiler.ANF.AV', E2, E3} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', (V3(V5))} end end(E2, E3)); _ -> fun (V7) -> begin (V8 = ('un--nextVar'(V0, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.ALet', V1, V10, V2, (V3({'Idris.Compiler.ANF.ALocal', V10}))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--lookup'(V0, V1, V2, V3, V4) -> case V2 of 0 -> case V4 of {'Idris.Compiler.ANF.::', E2, E3} -> (fun (V5, V6) -> V5 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V7 = (V2 - 1)), case V4 of {'Idris.Compiler.ANF.::', E0, E1} -> (fun (V8, V9) -> ('un--lookup'('erased', 'erased', V7, 'erased', V9)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--letBind'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--bindArgs'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('nested--7883-1190--in--un--doBind'(V3, V2, V1, V0, [], V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindArgs'(V0, V1) -> case V1 of [] -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Compiler.ANF.AV', E6, E7} -> (fun (V5, V6) -> fun (V7) -> begin (V8 = (('un--bindArgs'(V0, V4))(V7))), case V8 of {'Idris.Prelude.Types.Left', E8} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V10) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V6, {'Idris.Prelude.Types.Nothing'}} | V10]} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); {'Idris.Compiler.ANF.AErased', E10} -> (fun (V11) -> fun (V12) -> begin (V13 = (('un--bindArgs'(V0, V4))(V12))), case V13 of {'Idris.Prelude.Types.Left', E11} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V15) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', {'Idris.Compiler.ANF.ANull'}, {'Idris.Prelude.Types.Nothing'}} | V15]} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> fun (V16) -> begin (V17 = ('un--nextVar'(V0, V16))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V20 = (('un--bindArgs'(V0, V4))(V16))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', {'Idris.Compiler.ANF.ALocal', V19}, {'Idris.Prelude.Types.Just', V3}} | V22]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--anfConstAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Compiler.LambdaLift.MkLConstAlt', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('un--anf'(V0, V1, V2, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkAConstAlt', V4, V9}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--anfConAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Compiler.LambdaLift.MkLConAlt', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('nested--7957-1576--in--un--bindArgs'(V0, V6, V7, V5, V4, V2, V1, 'erased', V6, V2))(V8))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V12, V13) -> begin (V14 = (('un--anf'(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V6, V0)), V1, V13, V7))(V8))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.MkAConAlt', V4, V5, V12, V16}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--anfArgs'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V7) -> ('un--anf'(V0, V1, V3, V7)) end, V4, []))(V6))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> ('un--letBind'(V1, V2, V10, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--anf'(V0, V1, V2, V3) -> case V3 of {'Idris.Compiler.LambdaLift.LLocal', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.AV', V5, {'Idris.Compiler.ANF.ALocal', ('un--lookup'('erased', 'erased', V4, 'erased', V2))}}} end end(E0, E1)); {'Idris.Compiler.LambdaLift.LAppName', E2, E3, E4, E5} -> (fun (V7, V8, V9, V10) -> fun (V11) -> ('un--anfArgs'(V0, V1, V7, V2, V10, fun (V12) -> {'Idris.Compiler.ANF.AAppName', V7, V8, V9, V12} end, V11)) end end(E2, E3, E4, E5)); {'Idris.Compiler.LambdaLift.LUnderApp', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> fun (V17) -> ('un--anfArgs'(V0, V1, V13, V2, V16, fun (V18) -> {'Idris.Compiler.ANF.AUnderApp', V13, V14, V15, V18} end, V17)) end end(E6, E7, E8, E9)); {'Idris.Compiler.LambdaLift.LApp', E10, E11, E12, E13} -> (fun (V19, V20, V21, V22) -> fun (V23) -> ('un--anfArgs'(V0, V1, V19, V2, [V21 | [V22 | []]], fun (V24) -> case V24 of [E14 | E15] -> (fun (V25, V26) -> case V26 of [E16 | E17] -> (fun (V27, V28) -> case V28 of [] -> {'Idris.Compiler.ANF.AApp', V19, V20, V25, V27}; _ -> {'Idris.Compiler.ANF.ACrash', V19, <<"Can\x{27}t happen (AApp)"/utf8>>} end end(E16, E17)); _ -> {'Idris.Compiler.ANF.ACrash', V19, <<"Can\x{27}t happen (AApp)"/utf8>>} end end(E14, E15)); _ -> {'Idris.Compiler.ANF.ACrash', V19, <<"Can\x{27}t happen (AApp)"/utf8>>} end end, V23)) end end(E10, E11, E12, E13)); {'Idris.Compiler.LambdaLift.LLet', E18, E19, E20, E21} -> (fun (V29, V30, V31, V32) -> fun (V33) -> begin (V34 = ('un--nextVar'(V1, V33))), case V34 of {'Idris.Prelude.Types.Left', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V36) -> begin (V37 = {'Idris.Compiler.ANF.::', V36, V2}), begin (V38 = (('un--anf'(V0, V1, V2, V31))(V33))), case V38 of {'Idris.Prelude.Types.Left', E24} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V40) -> begin (V41 = (('un--anf'([V30 | V0], V1, V37, V32))(V33))), case V41 of {'Idris.Prelude.Types.Left', E26} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.ALet', V29, V36, V40, V43}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20, E21)); {'Idris.Compiler.LambdaLift.LCon', E28, E29, E30, E31} -> (fun (V44, V45, V46, V47) -> fun (V48) -> ('un--anfArgs'(V0, V1, V44, V2, V47, fun (V49) -> {'Idris.Compiler.ANF.ACon', V44, V45, V46, V49} end, V48)) end end(E28, E29, E30, E31)); {'Idris.Compiler.LambdaLift.LOp', E32, E33, E34, E35, E36} -> (fun (V50, V51, V52, V53, V54) -> fun (V55) -> begin (V69 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V56) -> ('un--anf'(V0, V1, V2, V56)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V68)) end end}))(V54)), []))(V55))), case V69 of {'Idris.Prelude.Types.Left', E37} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V71) -> ('un--letBind'(V1, V51, V71, fun (V72) -> ('case--anf-1432'(V0, V50, V54, V53, V52, V51, V2, V1, V71, V72, ('Idris.Idris2.Data.Vect':'un--toVect'('erased', V50, V72)))) end, V55)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33, E34, E35, E36)); {'Idris.Compiler.LambdaLift.LExtPrim', E39, E40, E41, E42} -> (fun (V73, V74, V75, V76) -> fun (V77) -> ('un--anfArgs'(V0, V1, V73, V2, V76, fun (V78) -> {'Idris.Compiler.ANF.AExtPrim', V73, V74, V75, V78} end, V77)) end end(E39, E40, E41, E42)); {'Idris.Compiler.LambdaLift.LConCase', E43, E44, E45, E46} -> (fun (V79, V80, V81, V82) -> fun (V83) -> begin (V84 = (('un--anf'(V0, V1, V2, V80))(V83))), case V84 of {'Idris.Prelude.Types.Left', E47} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V86) -> begin (V88 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V87) -> ('un--anfConAlt'(V0, V1, V2, V87)) end, V81, []))(V83))), case V88 of {'Idris.Prelude.Types.Left', E49} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V90) -> begin (V95 = case V82 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E51} -> (fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V92) -> case V92 of {'Idris.Prelude.Types.Left', E52} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V94}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--anf'(V0, V1, V2, V91)), V83)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V95 of {'Idris.Prelude.Types.Left', E54} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V97) -> (('un--mlet'(V1, V79, V86, fun (V98) -> {'Idris.Compiler.ANF.AConCase', V79, V98, V90, V97} end))(V83)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43, E44, E45, E46)); {'Idris.Compiler.LambdaLift.LConstCase', E56, E57, E58, E59} -> (fun (V99, V100, V101, V102) -> fun (V103) -> begin (V104 = (('un--anf'(V0, V1, V2, V100))(V103))), case V104 of {'Idris.Prelude.Types.Left', E60} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V106) -> begin (V108 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V107) -> ('un--anfConstAlt'(V0, V1, V2, V107)) end, V101, []))(V103))), case V108 of {'Idris.Prelude.Types.Left', E62} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V110) -> begin (V115 = case V102 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E64} -> (fun (V111) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V112) -> case V112 of {'Idris.Prelude.Types.Left', E65} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V114}} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--anf'(V0, V1, V2, V111)), V103)) end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V115 of {'Idris.Prelude.Types.Left', E67} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V117) -> (('un--mlet'(V1, V99, V106, fun (V118) -> {'Idris.Compiler.ANF.AConstCase', V99, V118, V110, V117} end))(V103)) end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E56, E57, E58, E59)); {'Idris.Compiler.LambdaLift.LPrimVal', E69, E70} -> (fun (V119, V120) -> fun (V121) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.APrimVal', V119, V120}} end end(E69, E70)); {'Idris.Compiler.LambdaLift.LErased', E71} -> (fun (V122) -> fun (V123) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.AErased', V122}} end end(E71)); {'Idris.Compiler.LambdaLift.LCrash', E72, E73} -> (fun (V124, V125) -> fun (V126) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ANF.ACrash', V124, V125}} end end(E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
