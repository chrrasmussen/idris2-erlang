-module('Idris.Idris2.Idris.Desugar').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--trimMultiline,dropLastNL-6758'/5,
  'with--trimMultiline,trimLast-6591'/6,
  'case--desugarDecl-11160'/7,
  'case--desugarDecl-11101'/10,
  'case--desugarDecl-10977'/10,
  'case--desugarDecl-10920'/9,
  'case--case block in case block in case block in desugarDecl-10792'/18,
  'case--case block in case block in desugarDecl-10726'/17,
  'case--case block in case block in case block in case block in case block in desugarDecl-10660'/27,
  'case--case block in case block in case block in case block in desugarDecl-10603'/24,
  'case--case block in case block in case block in desugarDecl-10526'/21,
  'case--case block in case block in case block in desugarDecl-10459'/20,
  'case--case block in case block in desugarDecl-10411'/19,
  'case--case block in desugarDecl-10368'/17,
  'case--desugarDecl-10330'/14,
  'case--desugarDecl-10263'/13,
  'case--case block in case block in case block in desugarDecl-10044'/24,
  'case--case block in case block in case block in case block in desugarDecl-9908'/31,
  'case--case block in case block in case block in case block in desugarDecl-9839'/29,
  'case--case block in case block in case block in desugarDecl-9773'/28,
  'case--case block in case block in case block in desugarDecl-9700'/27,
  'case--case block in case block in desugarDecl-9631'/24,
  'case--case block in desugarDecl-9573'/22,
  'case--case block in desugarDecl-9513'/20,
  'case--desugarDecl-9460'/20,
  'case--desugarDecl-9396'/18,
  'case--desugarDecl-9257'/22,
  'case--desugarDecl-9196'/23,
  'case--desugarDecl-9080'/18,
  'case--desugarDecl-8863'/13,
  'case--desugarDecl-8828'/11,
  'case--desugarClause-8085'/9,
  'case--desugarClause-8012'/14,
  'case--case block in desugarClause-7897'/16,
  'case--desugarClause-7852'/12,
  'case--desugarLHS-7750'/10,
  'case--getClauseFn-7713'/1,
  'case--expandDo-7340'/18,
  'case--expandDo-7155'/15,
  'case--trimMultiline-6985'/4,
  'case--case block in trimMultiline,trimLeft-6922'/10,
  'case--trimMultiline,trimLeft-6882'/8,
  'case--case block in trimMultiline,trimLeft-6828'/9,
  'case--trimMultiline,trimLeft-6798'/7,
  'case--with block in trimMultiline,trimLast-6712'/8,
  'case--with block in trimMultiline,trimLast-6651'/9,
  'case--expandString-6533'/10,
  'case--expandString,mergeStrLit-6388'/11,
  'case--expandString,mergeStrLit-6336'/11,
  'case--addFromString-6297'/4,
  'case--desugarB-6099'/10,
  'case--desugarB-6037'/11,
  'case--desugarB-5669'/12,
  'case--desugarB-5536'/11,
  'case--desugarB-5391'/10,
  'case--desugarB-5336'/10,
  'case--desugarB-5271'/10,
  'case--desugarB-5169'/12,
  'case--desugarB-4447'/17,
  'case--toTokList-4157'/7,
  'case--case block in toTokList-4009'/8,
  'case--toTokList-3984'/8,
  'case--extendSyn-3943'/3,
  'nested--15893-6587--in--un--trimLeft'/5,
  'nested--15893-6585--in--un--trimLast'/5,
  'nested--15887-6313--in--un--toRawImp'/10,
  'nested--15866-5984--in--un--toPure'/11,
  'nested--15937-8490--in--un--toIDef'/9,
  'nested--15937-8896--in--un--pairToCons'/15,
  'nested--15887-6315--in--un--notEmpty'/10,
  'nested--15931-8288--in--un--mkRecType'/9,
  'nested--15937-10179--in--un--mkConName'/13,
  'nested--15887-6314--in--un--mergeStrLit'/10,
  'nested--15937-10180--in--un--mapDesugarPiInfo'/14,
  'nested--15937-9354--in--un--isNamed'/18,
  'nested--15866-5983--in--un--guard'/11,
  'nested--15937-10178--in--un--fname'/13,
  'nested--15937-8897--in--un--expandConstraint'/15,
  'nested--15893-6586--in--un--dropLastNL'/4,
  'nested--15887-6316--in--un--concatStr'/11,
  'nested--15508-3967--in--un--backtickPrec'/5,
  'un--trimMultiline'/3,
  'un--toTokList'/2,
  'un--pairname'/0,
  'un--mkpairname'/0,
  'un--mkdpairname'/0,
  'un--mkPrec'/2,
  'un--initBangs'/0,
  'un--idiomise'/2,
  'un--getDecl'/2,
  'un--getClauseFn'/1,
  'un--extendSyn'/3,
  'un--expandString'/10,
  'un--expandList'/9,
  'un--expandDo'/9,
  'un--dpairname'/0,
  'un--desugarUpdate'/8,
  'un--desugarType'/6,
  'un--desugarTree'/8,
  'un--desugarLHS'/8,
  'un--desugarFnOpt'/6,
  'un--desugarField'/7,
  'un--desugarDecl'/6,
  'un--desugarData'/7,
  'un--desugarClause'/7,
  'un--desugarB'/8,
  'un--desugar'/8,
  'un--bindBangs'/2,
  'un--addNS'/2,
  'un--addFromString'/4
]).
'with--trimMultiline,dropLastNL-6758'(V0, V1, V2, V3, V4) -> case V3 of [] -> case V4 of {'Idris.Data.List.Views.Empty'} -> (fun () -> [] end()); _ -> case V4 of {'Idris.Data.List.Views.Snoc', E5, E6, E7} -> (fun (V5, V6, V7) -> case V5 of {'Idris.Idris.Syntax.StrLiteral', E8, E9} -> (fun (V8, V9) -> ('Idris.Idris2.Data.List':'un--snoc'('erased', V6, {'Idris.Idris.Syntax.StrLiteral', V8, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', ('Idris.Idris2.Data.String':'un--break'(fun (V10) -> ('Idris.Idris2.Prelude.Types':'un--isNL'(V10)) end, V9))))})) end(E8, E9)); _ -> V3 end end(E5, E6, E7)); _ -> V3 end end; _ -> case V4 of {'Idris.Data.List.Views.Snoc', E0, E1, E2} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Idris.Syntax.StrLiteral', E3, E4} -> (fun (V14, V15) -> ('Idris.Idris2.Data.List':'un--snoc'('erased', V12, {'Idris.Idris.Syntax.StrLiteral', V14, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', ('Idris.Idris2.Data.String':'un--break'(fun (V16) -> ('Idris.Idris2.Prelude.Types':'un--isNL'(V16)) end, V15))))})) end(E3, E4)); _ -> V3 end end(E0, E1, E2)); _ -> V3 end end.
'with--trimMultiline,trimLast-6591'(V0, V1, V2, V3, V4, V5) -> case V3 of [] -> case V4 of {'Idris.Data.List.Views.Empty'} -> (fun () -> fun (V6) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V5, <<"Expected line wrap"/utf8>>}, V6)) end end()); _ -> case V4 of {'Idris.Data.List.Views.Snoc', E19, E20, E21} -> (fun (V7, V8, V9) -> case V7 of [] -> fun (V10) -> {'Idris.Prelude.Types.Right', V0} end; [E26 | E27] -> (fun (V11, V12) -> case V11 of {'Idris.Idris.Syntax.StrLiteral', E32, E33} -> (fun (V13, V14) -> case V12 of [] -> ('case--with block in trimMultiline,trimLast-6651'(V0, V1, V2, V5, V8, V9, V14, V13, (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V26)) end end}, fun (V27) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--isSpace'(V27)))) end))(('Idris.Idris2.Data.String':'un--fastUnpack'(V14)))))); _ -> begin (V33 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'('erased', 'erased', fun (V28) -> case V28 of {'Idris.Idris.Syntax.StrInterp', E34, E35} -> (fun (V29, V30) -> {'Idris.Prelude.Types.Just', V29} end(E34, E35)); {'Idris.Idris.Syntax.StrLiteral', E36, E37} -> (fun (V31, V32) -> {'Idris.Prelude.Types.Nothing'} end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7))))), fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V33, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V34)) end end end end(E32, E33)); _ -> begin (V40 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'('erased', 'erased', fun (V35) -> case V35 of {'Idris.Idris.Syntax.StrInterp', E28, E29} -> (fun (V36, V37) -> {'Idris.Prelude.Types.Just', V36} end(E28, E29)); {'Idris.Idris.Syntax.StrLiteral', E30, E31} -> (fun (V38, V39) -> {'Idris.Prelude.Types.Nothing'} end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7))))), fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V40, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V41)) end end end end(E26, E27)); _ -> begin (V47 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'('erased', 'erased', fun (V42) -> case V42 of {'Idris.Idris.Syntax.StrInterp', E22, E23} -> (fun (V43, V44) -> {'Idris.Prelude.Types.Just', V43} end(E22, E23)); {'Idris.Idris.Syntax.StrLiteral', E24, E25} -> (fun (V45, V46) -> {'Idris.Prelude.Types.Nothing'} end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7))))), fun (V48) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V47, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V48)) end end end end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> case V4 of {'Idris.Data.List.Views.Snoc', E0, E1, E2} -> (fun (V49, V50, V51) -> case V49 of [] -> fun (V52) -> {'Idris.Prelude.Types.Right', V0} end; [E7 | E8] -> (fun (V53, V54) -> case V53 of {'Idris.Idris.Syntax.StrLiteral', E13, E14} -> (fun (V55, V56) -> case V54 of [] -> ('case--with block in trimMultiline,trimLast-6651'(V0, V1, V2, V5, V50, V51, V56, V55, (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V68)) end end}, fun (V69) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--isSpace'(V69)))) end))(('Idris.Idris2.Data.String':'un--fastUnpack'(V56)))))); _ -> begin (V75 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'('erased', 'erased', fun (V70) -> case V70 of {'Idris.Idris.Syntax.StrInterp', E15, E16} -> (fun (V71, V72) -> {'Idris.Prelude.Types.Just', V71} end(E15, E16)); {'Idris.Idris.Syntax.StrLiteral', E17, E18} -> (fun (V73, V74) -> {'Idris.Prelude.Types.Nothing'} end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V49))))), fun (V76) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V75, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V76)) end end end end(E13, E14)); _ -> begin (V82 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'('erased', 'erased', fun (V77) -> case V77 of {'Idris.Idris.Syntax.StrInterp', E9, E10} -> (fun (V78, V79) -> {'Idris.Prelude.Types.Just', V78} end(E9, E10)); {'Idris.Idris.Syntax.StrLiteral', E11, E12} -> (fun (V80, V81) -> {'Idris.Prelude.Types.Nothing'} end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V49))))), fun (V83) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V82, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V83)) end end end end(E7, E8)); _ -> begin (V89 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V2 end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'('erased', 'erased', fun (V84) -> case V84 of {'Idris.Idris.Syntax.StrInterp', E3, E4} -> (fun (V85, V86) -> {'Idris.Prelude.Types.Just', V85} end(E3, E4)); {'Idris.Idris.Syntax.StrLiteral', E5, E6} -> (fun (V87, V88) -> {'Idris.Prelude.Types.Nothing'} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V49))))), fun (V90) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V89, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V90)) end end end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--desugarDecl-11160'(V0, V1, V2, V3, V4, V5, V6) -> case V0 of {'Idris.Idris.Syntax.Hide', E0} -> (fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'un--hide'(V5, V1, V7, V12)) end end end end} | []]} end end(E0)); {'Idris.Idris.Syntax.Logging', E1} -> (fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.ILog', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V17, V18)) end end end end, fun (V19) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Options.Log':'un--topics'(V19)), ('Idris.Idris2.Core.Options.Log':'un--verbosity'(V19))} end, V13))} | []]} end end(E1)); {'Idris.Idris.Syntax.LazyOn', E2} -> (fun (V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Context':'un--lazyActive'(V5, V20, V25)) end end end end} | []]} end end(E2)); {'Idris.Idris.Syntax.UnboundImplicits', E3} -> (fun (V26) -> fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V5, V26, V27))), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V5, V26, V34)) end end end end} | []]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); {'Idris.Idris.Syntax.PrefixRecordProjections', E6} -> (fun (V35) -> fun (V36) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Context':'un--setPrefixRecordProjections'(V5, V35, V40)) end end end end} | []]} end end(E6)); {'Idris.Idris.Syntax.AmbigDepth', E7} -> (fun (V41) -> fun (V42) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Context':'un--setAmbigLimit'(V5, V41, V46)) end end end end} | []]} end end(E7)); {'Idris.Idris.Syntax.AutoImplicitDepth', E8} -> (fun (V47) -> fun (V48) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Context':'un--setAutoImplicitLimit'(V5, V47, V52)) end end end end} | []]} end end(E8)); {'Idris.Idris.Syntax.NFMetavarThreshold', E9} -> (fun (V53) -> fun (V54) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'un--setNFThreshold'(V5, V53, V58)) end end end end} | []]} end end(E9)); {'Idris.Idris.Syntax.PairNames', E10, E11, E12} -> (fun (V59, V60, V61) -> fun (V62) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Context':'un--setPair'(V5, V1, V59, V60, V61, V66)) end end end end} | []]} end end(E10, E11, E12)); {'Idris.Idris.Syntax.RewriteName', E13, E14} -> (fun (V67, V68) -> fun (V69) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Context':'un--setRewrite'(V5, V1, V67, V68, V73)) end end end end} | []]} end end(E13, E14)); {'Idris.Idris.Syntax.PrimInteger', E15} -> (fun (V74) -> fun (V75) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Context':'un--setFromInteger'(V5, V74, V79)) end end end end} | []]} end end(E15)); {'Idris.Idris.Syntax.PrimString', E16} -> (fun (V80) -> fun (V81) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Context':'un--setFromString'(V5, V80, V85)) end end end end} | []]} end end(E16)); {'Idris.Idris.Syntax.PrimChar', E17} -> (fun (V86) -> fun (V87) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Context':'un--setFromChar'(V5, V86, V91)) end end end end} | []]} end end(E17)); {'Idris.Idris.Syntax.PrimDouble', E18} -> (fun (V92) -> fun (V93) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Context':'un--setFromDouble'(V5, V92, V97)) end end end end} | []]} end end(E18)); {'Idris.Idris.Syntax.CGAction', E19, E20} -> (fun (V98, V99) -> fun (V100) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'un--addDirective'(V5, V98, V99, V104)) end end end end} | []]} end end(E19, E20)); {'Idris.Idris.Syntax.Names', E21, E22} -> (fun (V105, V106) -> fun (V107) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Context':'un--addNameDirective'(V5, V1, V105, V106, V111)) end end end end} | []]} end end(E21, E22)); {'Idris.Idris.Syntax.StartExpr', E23} -> (fun (V112) -> fun (V113) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"%start not implemented"/utf8>>}, V117)) end end end end} | []]} end end(E23)); {'Idris.Idris.Syntax.Overloadable', E24} -> (fun (V118) -> fun (V119) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Context':'un--setNameFlag'(V5, V1, V118, {'Idris.Core.Context.Overloadable'}, V123)) end end end end} | []]} end end(E24)); {'Idris.Idris.Syntax.Extension', E25} -> (fun (V124) -> fun (V125) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> ('Idris.Idris2.Core.Context':'un--setExtension'(V5, V124, V129)) end end end end} | []]} end end(E25)); {'Idris.Idris.Syntax.DefaultTotality', E26} -> (fun (V130) -> fun (V131) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V5, V130, V135)) end end end end} | []]} end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-11101'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> begin (V13 = ('un--desugar'(V8, V7, V5, V6, {'Idris.Idris.Desugar.AnyExpr'}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V10, V4)), V0, V12))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.ITransform', V3, {'Idris.Core.Name.UN', V2}, V11, V15} | []]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-10977'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18) -> {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V0, {'Idris.Builtin.MkPair', V2, V1}, V10)), V11, V12, V13, V14, V15, V16, V17, V18} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-10920'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Idris.Syntax.MkSyntax', V9, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V0, V1, V10)), V11, V12, V13, V14, V15, V16, V17} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in desugarDecl-10792'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V22, V23) -> V23 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in desugarDecl-10726'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V35)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V36, V37)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V38) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V7, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V39)) end, V2)))))), [], V38)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V22, V23) -> V23 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V12)))); 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in desugarDecl-10660'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IRecord', V6, {'Idris.Prelude.Types.Just', V21}, V4, {'Idris.TTImp.TTImp.MkImpRecord', V6, V3, V19, V24, V22}} | []]}.
'case--case block in case block in case block in case block in desugarDecl-10603'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> begin (V25 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('nested--15937-10179--in--un--mkConName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V3)) end, fun () -> fun (V24) -> V24 end end, V1))), fun (V26) -> ('case--case block in case block in case block in case block in case block in desugarDecl-10660'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V25, V25, V26)) end end.
'case--case block in case block in case block in desugarDecl-10526'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> begin (V21 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V3))), fun (V22) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V23) -> ('un--desugarField'(V11, V10, V9, V8, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V7, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V24) -> ('nested--15937-10178--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V24)) end, V0)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V25) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V25)) end, V2)))))), ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V21)), V23)) end, V0, []))(V22))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> (('case--case block in case block in case block in case block in desugarDecl-10603'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V28, V28))(V22)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in case block in desugarDecl-10459'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V24, V25) -> {'Idris.Builtin.MkPair', V20, {'Idris.Builtin.MkPair', V22, {'Idris.Builtin.MkPair', V24, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V17, V25))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in desugarDecl-10411'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V26 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V24, V25) -> {'Idris.Builtin.MkPair', V20, {'Idris.Builtin.MkPair', V22, {'Idris.Builtin.MkPair', V24, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V17, V25))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V12))), ('case--case block in case block in case block in desugarDecl-10526'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V26, V26)) end.
'case--case block in desugarDecl-10368'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V10, V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V43 = case V19 of 0 -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V38)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V39, V40)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V41) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V7, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V42) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V42)) end, V2)))))), [], V41)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V25, V26) -> V26 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V12)))); 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('case--case block in case block in desugarDecl-10411'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V43, V43))(V16)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--desugarDecl-10330'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('nested--15937-10178--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14)) end, V0))), fun (V16) -> ('case--case block in desugarDecl-10368'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V15, V15, V16)) end end.
'case--desugarDecl-10263'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> fun (V19) -> begin (V20 = ('un--desugar'(V11, V10, V8, V9, {'Idris.Idris.Desugar.AnyExpr'}, V7, V18, V19))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = (('nested--15937-10180--in--un--mapDesugarPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V7, V17))(V19))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', V25, V22}}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in desugarDecl-10044'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V36)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V37, V38)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V39) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, V11, [], V39)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V24)) end, V19)))), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V42, V43, V44)) end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V51)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V52, V53)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V54) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, V11, [], V54)) end))(V21)))); 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in desugarDecl-9908'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> begin (V52 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end, fun () -> fun (V32) -> fun (V33) -> begin (V35 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V34) -> ('un--desugarDecl'(V15, V14, V13, V12, V11, V34)) end, V32, []))(V33))), case V35 of {'Idris.Prelude.Types.Left', E0} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V49)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V50, V51)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V37))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V0))(V30))), case V52 of {'Idris.Prelude.Types.Left', E2} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V54) -> begin (V56 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Idris.Elab.Implementation':'un--mkImplName'(V10, V4, V25)) end, fun () -> fun (V55) -> V55 end end, V2))), {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [V56 | []], fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Idris.Elab.Implementation':'un--elabImplementation'(V57, V14, V13, V15, V12, V10, V9, V16, V7, V59, V58, V26, V28, V4, V25, ('nested--15937-9354--in--un--isNamed'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, 'erased', V2)), V56, V1, V54)) end end end} | []]} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in case block in case block in case block in desugarDecl-9839'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V29, V30) -> {'Idris.Builtin.MkPair', V29, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V24, V30))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in desugarDecl-9773'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> begin (V31 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V29, V30) -> {'Idris.Builtin.MkPair', V29, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V24, V30))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V19))), fun (V32) -> ('case--case block in case block in case block in case block in desugarDecl-9908'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V31, V31, V32)) end end.
'case--case block in case block in case block in desugarDecl-9700'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V29, V30) -> {'Idris.Builtin.MkPair', V27, {'Idris.Builtin.MkPair', V29, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V24, V30))}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in desugarDecl-9631'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V14, V23))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> begin (V58 = case V26 of 0 -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V39)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V40, V41)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V42) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, V11, [], V42)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V27) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V27)) end, V19)))), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V54)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V55, V56)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V57) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, V11, [], V57)) end))(V21)))); 1 -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V60 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V59) -> ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V58, V59)) end, V21))), begin (V66 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V61) -> case V61 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V62, V63) -> case V63 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V64, V65) -> {'Idris.Builtin.MkPair', V62, {'Idris.Builtin.MkPair', V64, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V58, V65))}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V17))), (('case--case block in case block in case block in desugarDecl-9773'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V26, V58, V60, V66, V66))(V23)) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in desugarDecl-9573'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V22) -> fun (V23) -> ('un--desugar'(V15, V14, V12, V13, {'Idris.Idris.Desugar.AnyExpr'}, V11, V22, V23)) end end, V3, []))(V21))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> ('case--case block in case block in desugarDecl-9631'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V26, V26, V21)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in desugarDecl-9513'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> fun (V22) -> begin (V23 = ('un--desugar'(V15, V14, V12, V13, {'Idris.Idris.Desugar.AnyExpr'}, V11, V21, V22))), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V20, V25}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-9460'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> begin (V27 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V24 = ('un--desugar'(V15, V14, V12, V13, {'Idris.Idris.Desugar.AnyExpr'}, V11, V22, V23))), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V21, V26}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V5, []))(V19))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> ('case--case block in desugarDecl-9573'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V29, V29, V19)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--desugarDecl-9396'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> fun (V22) -> begin (V23 = ('un--desugar'(V15, V14, V12, V13, {'Idris.Idris.Desugar.AnyExpr'}, V11, V21, V22))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, {'Idris.Builtin.MkPair', V20, V25}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-9257'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> begin (V26 = ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V20, V25))), {'Idris.Builtin.MkPair', V22, {'Idris.Builtin.MkPair', V24, V26}} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-9196'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> {'Idris.Builtin.MkPair', V23, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V20, V24))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-9080'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> fun (V22) -> begin (V23 = ('un--desugar'(V13, V12, V10, V11, {'Idris.Idris.Desugar.AnyExpr'}, V9, V21, V22))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, {'Idris.Builtin.MkPair', V20, V25}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-8863'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.Idris.Syntax.MkSyntax', V13, V14, V15, V16, V17, V18, V19, V9, V21} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarDecl-8828'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V8 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Idris.Syntax.MkSyntax', V11, V12, V13, V14, V15, V16, V17, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V10, V9)), V19} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarClause-8085'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V9, {'Idris.TTImp.TTImp.ImpossibleClause', V1, V12}}} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarClause-8012'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> fun (V18) -> begin (V19 = ('un--desugar'(V11, V10, V8, V9, {'Idris.Idris.Desugar.AnyExpr'}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V16, V7)), V3, V18))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V14, {'Idris.TTImp.TTImp.WithClause', V5, V17, V21, V2, V1, V12}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in desugarClause-7897'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V10 of [] -> V15; _ -> {'Idris.TTImp.TTImp.ILocal', V3, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V27)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V28, V29)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V10)), V15} end.
'case--desugarClause-7852'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = ('un--desugar'(V9, V8, V6, V7, {'Idris.Idris.Desugar.AnyExpr'}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, V5)), V1, V16))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V34 = case V10 of [] -> V19; _ -> {'Idris.TTImp.TTImp.ILocal', V3, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V31)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V32, V33)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V10)), V19} end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V12, {'Idris.TTImp.TTImp.PatClause', V3, V15, V34}}} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarLHS-7750'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> fun (V12) -> begin (V35 = (('Idris.Idris2.Core.Core':'un--iwhenJust'('erased', 'erased', V8, fun (V13) -> case ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V16, V17)) end end}, V13, V10)) of 0 -> (begin (V18 = ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0))), fun () -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V18, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V31)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V32, V33)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}))([<<"Declaration name ("/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)) | [<<") shadowed by a pattern variable."/utf8>> | []]]]))}, V19)) end end end()); 1 -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))(V12))), case V35 of {'Idris.Prelude.Types.Left', E2} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V10, V11}}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getClauseFn-7713'(V0) -> case V0 of {'Idris.TTImp.TTImp.Implicit', E0, E1} -> (fun (V1, V2) -> {'Idris.Core.Core.GenericMsg', V1, <<"Invalid name for a declaration"/utf8>>} end(E0, E1)); _ -> {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V0)), <<" is not a function application"/utf8>>))} end.
'case--expandDo-7340'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = (('un--desugarB'(V13, V14, V12, V10, V11, V9, V8, V1))(V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V29 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V26) -> case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V28))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V13, V12, V11, V10, V8, 0, V24)), V25)) end end, V0, []))(V20))), case V29 of {'Idris.Prelude.Types.Left', E6} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V18, V8))), begin (V33 = (('un--expandDo'(V13, V12, V11, V10, V9, V32, V7, V6, V5))(V20))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> begin (V37 = begin (V36 = ('erlang':'get'(V14))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> {'Idris.Prelude.Types.Right', ('un--bindBangs'(case V39 of {'Idris.Idris.Desugar.MkBangData', E12, E13} -> (fun (V40, V41) -> V41 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.TTImp.TTImp.ICase', V4, V23, V16, [{'Idris.TTImp.TTImp.PatClause', V4, V19, V35} | V31]}))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandDo-7155'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = ('un--desugar'(V12, V11, V9, V10, V8, V7, V1, V17))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V23) -> case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V25))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V12, V11, V10, V9, V7, 0, V21)), V22)) end end, V0, []))(V17))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V15, V7))), begin (V30 = (('un--expandDo'(V12, V11, V10, V9, V8, V29, V6, V5, V4))(V17))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V3, {'Idris.TTImp.TTImp.IApp', V3, {'Idris.TTImp.TTImp.IVar', V3, ('un--addNS'(V5, {'Idris.Core.Name.UN', <<">>="/utf8>>}))}, V20}, {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V3, 1}, {'Idris.TTImp.TTImp.ICase', V3, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V3, 1}, [{'Idris.TTImp.TTImp.PatClause', V3, V16, V32} | V28]}}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--trimMultiline-6985'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> {'Idris.Prelude.Types.Right', ('nested--15893-6586--in--un--dropLastNL'(V0, V1, V2, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V16)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V17, V18)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V0))))} end; 1 -> fun (V19) -> begin (V20 = (('nested--15893-6585--in--un--trimLast'(V0, V1, V2, V2, V0))(V19))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V23) -> ('nested--15893-6587--in--un--trimLeft'(V0, V1, V2, V1, V23)) end, V22, []))(V19))), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('nested--15893-6586--in--un--dropLastNL'(V0, V1, V2, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V38)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V39, V40)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V26))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in trimMultiline,trimLeft-6922'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V4, <<"Line is less indented than the closing delimiter"/utf8>>}, V10)) end; 1 -> fun (V11) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.Syntax.StrLiteral', V4, ('Idris.Idris2.Prelude.Types':'un--fastPack'(V8))} | V5]} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--trimMultiline,trimLeft-6882'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> ('case--case block in trimMultiline,trimLeft-6922'(V0, V1, V2, V3, V4, V5, V6, V8, V9, ('Idris.Idris2.Prelude.Basics':'un--||'((('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V21)) end end}, fun (V22) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--isSpace'(V22)))) end))(V8)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--<_Ord_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V8)), V6)) end)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in trimMultiline,trimLeft-6828'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V4, <<"Line is less indented than the closing delimiter"/utf8>>}, V9)) end; 1 -> fun (V10) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.Syntax.StrLiteral', V4, ('Idris.Idris2.Prelude.Types':'un--fastPack'(V7))} | []]} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--trimMultiline,trimLeft-6798'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('case--case block in trimMultiline,trimLeft-6828'(V0, V1, V2, V3, V4, V5, V7, V8, (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V20)) end end}, fun (V21) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--isSpace'(V21)))) end))(V7)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in trimMultiline,trimLast-6712'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.StrInterp', E0, E1} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Just', V8} end(E0, E1)); {'Idris.Idris.Syntax.StrLiteral', E2, E3} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Nothing'} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in trimMultiline,trimLast-6651'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V7, <<"Closing delimiter of multiline strings cannot be preceded by non-whitespace characters"/utf8>>}, V9)) end; 1 -> fun (V10) -> {'Idris.Prelude.Types.Right', V4} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandString-6533'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.Str', <<""/utf8>>}}; [E0 | E1] -> (fun (V10, V11) -> ('Idris.Idris2.Data.List':'un--foldr1'('erased', fun (V12) -> fun (V13) -> ('nested--15887-6316--in--un--concatStr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12, V13)) end end, V9, 'erased')) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandString,mergeStrLit-6388'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case V11 of [] -> case V12 of [] -> []; [E2 | E3] -> (fun (V13, V14) -> [V13 | ('nested--15887-6314--in--un--mergeStrLit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E4 | E5] -> (fun (V15, V16) -> [{'Idris.Idris.Syntax.StrLiteral', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', ('Idris.Idris2.Data.List':'un--head'('erased', V11, 'erased')))), ('Idris.Idris2.Data.String':'un--fastConcat'(('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V19, V20)) end end end end, fun (V21) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V21)) end, V11))))} | ('nested--15887-6314--in--un--mergeStrLit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12))] end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandString,mergeStrLit-6336'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Idris.Syntax.StrLiteral', E0, E1} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V11, V12}} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--addFromString-6297'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> {'Idris.TTImp.TTImp.IApp', V1, {'Idris.TTImp.TTImp.IVar', V1, V4}, V0} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-6099'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--desugarB'(V9, V8, V7, V6, V5, V4, V3, {'Idris.Idris.Syntax.PApp', V2, {'Idris.Idris.Syntax.PRef', V2, {'Idris.Core.Name.UN', <<"rangeFrom"/utf8>>}}, V1})) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> ('un--desugarB'(V9, V8, V7, V6, V5, V4, V3, {'Idris.Idris.Syntax.PApp', V2, {'Idris.Idris.Syntax.PApp', V2, {'Idris.Idris.Syntax.PRef', V2, {'Idris.Core.Name.UN', <<"rangeFromThen"/utf8>>}}, V1}, V10})) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-6037'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--desugarB'(V10, V9, V8, V7, V6, V5, V4, {'Idris.Idris.Syntax.PApp', V3, {'Idris.Idris.Syntax.PApp', V3, {'Idris.Idris.Syntax.PRef', V3, {'Idris.Core.Name.UN', <<"rangeFromTo"/utf8>>}}, V2}, V0})) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> ('un--desugarB'(V10, V9, V8, V7, V6, V5, V4, {'Idris.Idris.Syntax.PApp', V3, {'Idris.Idris.Syntax.PApp', V3, {'Idris.Idris.Syntax.PApp', V3, {'Idris.Idris.Syntax.PRef', V3, {'Idris.Core.Name.UN', <<"rangeFromThenTo"/utf8>>}}, V2}, V11}, V0})) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-5669'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Idris.Desugar.MkBangData', E0, E1} -> (fun (V12, V13) -> {'Idris.Idris.Desugar.MkBangData', ((V12 + 1) rem 9223372036854775808), [{'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V1, V9}} | V13]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-5536'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Idris.Syntax.MkSyntax', V11, V12, V13, V14, V15, V16, [{'Idris.Core.Name.UN', V0} | V17], V18, V19} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-5391'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.Db', V0}}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V1, {'Idris.TTImp.TTImp.IVar', V1, V11}, {'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.Db', V0}}}} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-5336'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.Ch', V0}}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V1, {'Idris.TTImp.TTImp.IVar', V1, V11}, {'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.Ch', V0}}}} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-5271'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V1, {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.BI', V0}}}, [{'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.BI', V0}} | [{'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.I', V0}} | []]]}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V1, {'Idris.TTImp.TTImp.IVar', V1, V11}, {'Idris.TTImp.TTImp.IPrimVal', V1, {'Idris.Core.TT.BI', V0}}}} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-5169'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--desugarB'(V9, V8, V7, V6, V5, V4, V3, {'Idris.Idris.Syntax.PLam', V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PRef', V2, {'Idris.Core.Name.MN', <<"arg"/utf8>>, 0}}, {'Idris.Idris.Syntax.PImplicit', V2}, {'Idris.Idris.Syntax.POp', V2, V1, {'Idris.Idris.Syntax.PRef', V2, {'Idris.Core.Name.MN', <<"arg"/utf8>>, 0}}, V0}})) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> ('un--desugarB'(V9, V8, V7, V6, V5, V4, V3, {'Idris.Idris.Syntax.PPrefixOp', V2, V1, V0})) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--desugarB-4447'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> fun (V17) -> begin (V20 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V18) -> fun (V19) -> ('un--desugar'(V15, V13, V12, V11, V10, V9, V18, V19)) end end, V6))(V17))), case V20 of {'Idris.Prelude.Types.Left', E0} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V22) -> begin (V23 = (('un--desugarB'(V15, V14, V13, V12, V11, V10, V9, V2))(V17))), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V26 = ('un--desugar'(V15, V13, V12, V11, V10, [V5 | V9], V1, V17))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILam', V8, V7, V22, {'Idris.Prelude.Types.Just', V5}, V25, V28}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V29) -> begin (V32 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V30) -> fun (V31) -> ('un--desugar'(V15, V13, V12, V11, V10, V9, V30, V31)) end end, V6))(V29))), case V32 of {'Idris.Prelude.Types.Left', E6} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V34) -> begin (V35 = (('un--desugarB'(V15, V14, V13, V12, V11, V10, V9, V2))(V29))), case V35 of {'Idris.Prelude.Types.Left', E8} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V37) -> begin (V38 = (('un--desugarClause'(V15, V13, V11, V12, V9, 0, {'Idris.Idris.Syntax.MkPatClause', V8, V4, V1, []}))(V29))), case V38 of {'Idris.Prelude.Types.Left', E10} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, V7, V34, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"lamc"/utf8>>, 0}}, V37, {'Idris.TTImp.TTImp.ICase', V8, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.MN', <<"lamc"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V8, 1}, [('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V40)) | []]}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toTokList-4157'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<"\x{27} is not a prefix operator"/utf8>>))))}, V7)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> begin (V10 = (('un--toTokList'(V3, V0))(V9))), case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Right', [{'Idris.Libraries.Utils.Shunting.Op', V2, V1, {'Idris.Libraries.Utils.Shunting.Prefix', V8}} | V12]} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in toTokList-4009'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown operator \x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, <<"\x{27}"/utf8>>))))}, V8)) end; 1 -> fun (V9) -> begin (V10 = (('un--toTokList'(V4, V0))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', [{'Idris.Libraries.Utils.Shunting.Expr', V1} | [{'Idris.Libraries.Utils.Shunting.Op', V3, V2, ('nested--15508-3967--in--un--backtickPrec'(V0, V1, V2, V3, V4))} | V12]]} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toTokList-3984'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('case--case block in toTokList-4009'(V0, V1, V2, V3, V4, V5, V6, (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V19)) end end}, fun (V20) -> ('Idris.Idris2.Parser.Lexer.Source':'un--isOpChar'(V20)) end))(('Idris.Idris2.Data.String':'un--fastUnpack'(V6)))))) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V22, V23) -> case V22 of {'Idris.Idris.Syntax.Prefix'} -> (fun () -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, <<"\x{27} is a prefix operator"/utf8>>))))}, V24)) end end()); _ -> fun (V25) -> begin (V26 = (('un--toTokList'(V4, V0))(V25))), case V26 of {'Idris.Prelude.Types.Left', E3} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Right', [{'Idris.Libraries.Utils.Shunting.Expr', V1} | [{'Idris.Libraries.Utils.Shunting.Op', V3, V2, ('un--mkPrec'(V22, V23))} | V28]]} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extendSyn-3943'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11) -> {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--mergeLeft'('erased', case V0 of {'Idris.Idris.Syntax.MkSyntax', E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V12 end(E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)), ('Idris.Idris2.Libraries.Data.StringMap':'un--mergeLeft'('erased', case V0 of {'Idris.Idris.Syntax.MkSyntax', E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V22 end(E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)), ('Idris.Idris2.Libraries.Data.ANameMap':'un--merge'('erased', case V0 of {'Idris.Idris.Syntax.MkSyntax', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V32 end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5)), V6, ('Idris.Idris2.Libraries.Data.ANameMap':'un--merge'('erased', case V0 of {'Idris.Idris.Syntax.MkSyntax', E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V43 end(E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7)), V8, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', case V0 of {'Idris.Idris.Syntax.MkSyntax', E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V54 end(E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9)), V10, V11} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15893-6587--in--un--trimLeft'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Idris.Syntax.StrLiteral', E2, E3} -> (fun (V8, V9) -> case V7 of [] -> ('case--trimMultiline,trimLeft-6798'(V0, V1, V2, V9, V8, V3, ('Idris.Idris2.Data.List':'un--splitAt'('erased', V3, ('Idris.Idris2.Data.String':'un--fastUnpack'(V9)))))); _ -> ('case--trimMultiline,trimLeft-6882'(V0, V1, V2, V9, V8, V7, V3, ('Idris.Idris2.Data.List':'un--splitAt'('erased', V3, ('Idris.Idris2.Data.String':'un--fastUnpack'(V9)))))) end end(E2, E3)); _ -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V2, <<"Line is less indented than the closing delimiter"/utf8>>}, V10)) end end end(E0, E1)); _ -> fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadMultiline', V2, <<"Line is less indented than the closing delimiter"/utf8>>}, V11)) end end.
'nested--15893-6585--in--un--trimLast'(V0, V1, V2, V3, V4) -> ('with--trimMultiline,trimLast-6591'(V4, V1, V3, V4, ('Idris.Idris2.Data.List.Views':'un--snocList'('erased', V4)), V3)).
'nested--15887-6313--in--un--toRawImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Idris.Syntax.StrLiteral', E0, E1} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPrimVal', V10, {'Idris.Core.TT.Str', V11}}} end end(E0, E1)); {'Idris.Idris.Syntax.StrInterp', E2, E3} -> (fun (V13, V14) -> ('un--desugarB'(V8, V7, V6, V5, V4, V3, V2, V14)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15866-5984--in--un--toPure'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Idris.Syntax.DoExp', V2, {'Idris.Idris.Syntax.PApp', V2, {'Idris.Idris.Syntax.PRef', V2, {'Idris.Core.Name.UN', <<"pure"/utf8>>}}, V10}}.
'nested--15937-8490--in--un--toIDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V9, V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDef', V9, V7, [{'Idris.TTImp.TTImp.PatClause', V9, V10, V11} | []]}} end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V13, V14, V15, V16, V17, V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDef', V13, V7, [{'Idris.TTImp.TTImp.WithClause', V13, V14, V15, V16, V17, V18} | []]}} end end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V20, V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDef', V20, V7, [{'Idris.TTImp.TTImp.ImpossibleClause', V20, V21} | []]}} end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15937-8896--in--un--pairToCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Idris.Syntax.PPair', E0, E1, E2} -> (fun (V15, V16, V17) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('nested--15937-8896--in--un--pairToCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V16)), ('nested--15937-8896--in--un--pairToCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)))) end(E0, E1, E2)); _ -> [V14 | []] end.
'nested--15887-6315--in--un--notEmpty'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Idris.Syntax.StrLiteral', E0, E1} -> (fun (V10, V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V11, <<""/utf8>>)) end(E0, E1)); {'Idris.Idris.Syntax.StrInterp', E2, E3} -> (fun (V12, V13) -> 0 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15931-8288--in--un--mkRecType'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> {'Idris.Idris.Syntax.PType', V6}; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> {'Idris.Idris.Syntax.PPi', V6, V13, V15, {'Idris.Prelude.Types.Just', V11}, V16, ('nested--15931-8288--in--un--mkRecType'(V0, V1, V2, V3, V4, V5, V6, V7, V10))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15937-10179--in--un--mkConName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V13, V14) -> case V14 of {'Idris.Core.Name.UN', E2} -> (fun (V15) -> {'Idris.Core.Name.NS', V13, {'Idris.Core.Name.DN', V15, {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, V15)), 0}}} end(E2)); _ -> {'Idris.Core.Name.DN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)), {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)))), 0}} end end(E0, E1)); _ -> {'Idris.Core.Name.DN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)), {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)))), 0}} end.
'nested--15887-6314--in--un--mergeStrLit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> ('case--expandString,mergeStrLit-6388'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Data.List':'un--spanBy'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Idris.Syntax.StrLiteral', E0, E1} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V11, V12}} end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V9)))).
'nested--15937-10180--in--un--mapDesugarPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end end()); {'Idris.Core.TT.Explicit'} -> (fun () -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V17) -> fun (V18) -> begin (V19 = ('un--desugar'(V11, V10, V8, V9, {'Idris.Idris.Desugar.AnyExpr'}, V12, V17, V18))), case V19 of {'Idris.Prelude.Types.Left', E1} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V21}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15937-9354--in--un--isNamed'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> 0 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15866-5983--in--un--guard'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Idris.Syntax.DoExp', E0, E1} -> (fun (V11, V12) -> {'Idris.Idris.Syntax.DoExp', V11, {'Idris.Idris.Syntax.PApp', V11, {'Idris.Idris.Syntax.PRef', V11, {'Idris.Core.Name.UN', <<"guard"/utf8>>}}, V12}} end(E0, E1)); _ -> V10 end.
'nested--15937-10178--in--un--fname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Idris.Syntax.MkField', E0, E1, E2, E3, E4, E5} -> (fun (V13, V14, V15, V16, V17, V18) -> V17 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15937-8897--in--un--expandConstraint'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Types.Just', E2} -> (fun (V17) -> [{'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V17}, V16} | []] end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V18} end, ('nested--15937-8896--in--un--pairToCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V16)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15893-6586--in--un--dropLastNL'(V0, V1, V2, V3) -> ('with--trimMultiline,dropLastNL-6758'(V0, V1, V2, V3, ('Idris.Idris2.Data.List.Views':'un--snocList'('erased', V3)))).
'nested--15887-6316--in--un--concatStr'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.TTImp.TTImp.IApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V9)), {'Idris.TTImp.TTImp.IApp', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V10)), {'Idris.TTImp.TTImp.IVar', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V10)), {'Idris.Core.Name.UN', <<"++"/utf8>>}}, V9}, V10}.
'nested--15508-3967--in--un--backtickPrec'(V0, V1, V2, V3, V4) -> {'Idris.Libraries.Utils.Shunting.NonAssoc', (1 + 0)}.
'un--trimMultiline'(V0, V1, V2) -> ('case--trimMultiline-6985'(V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V1, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))))).
'un--toTokList'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.POp', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V3))), (('case--toTokList-3984'(V5, V4, V3, V2, V0, V10, V11, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', V11, case V10 of {'Idris.Idris.Syntax.MkSyntax', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V12 end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V6)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.PPrefixOp', E15, E16, E17} -> (fun (V21, V22, V23) -> fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E18} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V22))), (('case--toTokList-4157'(V23, V22, V21, V0, V28, V29, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', V29, case V28 of {'Idris.Idris.Syntax.MkSyntax', E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V31 end(E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V24)) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15, E16, E17)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', [{'Idris.Libraries.Utils.Shunting.Expr', V1} | []]} end end.
'un--pairname'() -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"Pair"/utf8>>}}.
'un--mkpairname'() -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"MkPair"/utf8>>}}.
'un--mkdpairname'() -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--dpairNS'()), {'Idris.Core.Name.UN', <<"MkDPair"/utf8>>}}.
'un--mkPrec'(V0, V1) -> case V0 of {'Idris.Idris.Syntax.InfixL'} -> (fun () -> {'Idris.Libraries.Utils.Shunting.AssocL', V1} end()); {'Idris.Idris.Syntax.InfixR'} -> (fun () -> {'Idris.Libraries.Utils.Shunting.AssocR', V1} end()); {'Idris.Idris.Syntax.Infix'} -> (fun () -> {'Idris.Libraries.Utils.Shunting.NonAssoc', V1} end()); {'Idris.Idris.Syntax.Prefix'} -> (fun () -> {'Idris.Libraries.Utils.Shunting.Prefix', V1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--initBangs'() -> {'Idris.Idris.Desugar.MkBangData', 0, []}.
'un--idiomise'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IAlternative', E0, E1, E2} -> (fun (V2, V3, V4) -> {'Idris.TTImp.TTImp.IAlternative', V2, ('Idris.Idris2.TTImp.TTImp':'un--mapAltType'(fun (V5) -> ('un--idiomise'(V2, V5)) end, V3)), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V8, V9)) end end end end, fun (V10) -> ('un--idiomise'(V2, V10)) end, V4))} end(E0, E1, E2)); {'Idris.TTImp.TTImp.IApp', E3, E4, E5} -> (fun (V11, V12, V13) -> {'Idris.TTImp.TTImp.IApp', V0, {'Idris.TTImp.TTImp.IApp', V0, {'Idris.TTImp.TTImp.IVar', V0, {'Idris.Core.Name.UN', <<"<*>"/utf8>>}}, ('un--idiomise'(V11, V12))}, V13} end(E3, E4, E5)); _ -> {'Idris.TTImp.TTImp.IApp', V0, {'Idris.TTImp.TTImp.IVar', V0, {'Idris.Core.Name.UN', <<"pure"/utf8>>}}, V1} end.
'un--getDecl'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PImplementation', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PImplementation', V2, V3, V4, V0, V6, V7, V8, V9, V10, V11, V12}} end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); {'Idris.Idris.Syntax.PNamespace', E87, E88, E89} -> (fun (V13, V14, V15) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PNamespace', V13, V14, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V16) -> ('un--getDecl'(V0, V16)) end, V15))}} end(E87, E88, E89)); _ -> case V0 of {'Idris.Idris.Syntax.AsType'} -> (fun () -> case V1 of {'Idris.Idris.Syntax.PClaim', E6, E7, E8, E9, E10} -> (fun (V17, V18, V19, V20, V21) -> {'Idris.Prelude.Types.Just', V1} end(E6, E7, E8, E9, E10)); {'Idris.Idris.Syntax.PData', E11, E12, E13, E14} -> (fun (V22, V23, V24, V25) -> case V25 of {'Idris.Idris.Syntax.MkPData', E15, E16, E17, E18, E19} -> (fun (V26, V27, V28, V29, V30) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PData', V22, V23, V24, {'Idris.Idris.Syntax.MkPLater', V26, V27, V28}}} end(E15, E16, E17, E18, E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E11, E12, E13, E14)); {'Idris.Idris.Syntax.PInterface', E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Prelude.Types.Just', V1} end(E20, E21, E22, E23, E24, E25, E26, E27, E28)); {'Idris.Idris.Syntax.PRecord', E29, E30, E31, E32, E33, E34, E35} -> (fun (V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PData', V40, V41, V42, {'Idris.Idris.Syntax.MkPLater', V40, V43, ('nested--15931-8288--in--un--mkRecType'(V45, V46, V44, V43, V42, V41, V40, V1, V44))}}} end(E29, E30, E31, E32, E33, E34, E35)); {'Idris.Idris.Syntax.PFixity', E36, E37, E38, E39} -> (fun (V47, V48, V49, V50) -> {'Idris.Prelude.Types.Just', V1} end(E36, E37, E38, E39)); {'Idris.Idris.Syntax.PDirective', E40, E41} -> (fun (V51, V52) -> {'Idris.Prelude.Types.Just', V1} end(E40, E41)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); {'Idris.Idris.Syntax.AsDef'} -> (fun () -> case V1 of {'Idris.Idris.Syntax.PClaim', E42, E43, E44, E45, E46} -> (fun (V53, V54, V55, V56, V57) -> {'Idris.Prelude.Types.Nothing'} end(E42, E43, E44, E45, E46)); {'Idris.Idris.Syntax.PData', E47, E48, E49, E50} -> (fun (V58, V59, V60, V61) -> case V61 of {'Idris.Idris.Syntax.MkPLater', E51, E52, E53} -> (fun (V62, V63, V64) -> {'Idris.Prelude.Types.Just', V1} end(E51, E52, E53)); _ -> {'Idris.Prelude.Types.Just', V1} end end(E47, E48, E49, E50)); {'Idris.Idris.Syntax.PInterface', E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73) -> {'Idris.Prelude.Types.Nothing'} end(E54, E55, E56, E57, E58, E59, E60, E61, E62)); {'Idris.Idris.Syntax.PRecord', E63, E64, E65, E66, E67, E68, E69} -> (fun (V74, V75, V76, V77, V78, V79, V80) -> {'Idris.Prelude.Types.Just', V1} end(E63, E64, E65, E66, E67, E68, E69)); {'Idris.Idris.Syntax.PFixity', E70, E71, E72, E73} -> (fun (V81, V82, V83, V84) -> {'Idris.Prelude.Types.Nothing'} end(E70, E71, E72, E73)); {'Idris.Idris.Syntax.PDirective', E74, E75} -> (fun (V85, V86) -> {'Idris.Prelude.Types.Nothing'} end(E74, E75)); _ -> {'Idris.Prelude.Types.Just', V1} end end()); _ -> case V1 of {'Idris.Idris.Syntax.PParameters', E0, E1, E2} -> (fun (V87, V88, V89) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PParameters', V87, V88, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V90) -> ('un--getDecl'(V0, V90)) end, V89))}} end(E0, E1, E2)); {'Idris.Idris.Syntax.PUsing', E3, E4, E5} -> (fun (V91, V92, V93) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PUsing', V91, V92, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V94) -> ('un--getDecl'(V0, V94)) end, V93))}} end(E3, E4, E5)); _ -> case V0 of {'Idris.Idris.Syntax.Single'} -> (fun () -> {'Idris.Prelude.Types.Just', V1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getClauseFn'(V0) -> case V0 of {'Idris.TTImp.TTImp.IVar', E2, E3} -> (fun (V1, V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', V2} end end(E2, E3)); {'Idris.TTImp.TTImp.IApp', E4, E5, E6} -> (fun (V4, V5, V6) -> ('un--getClauseFn'(V5)) end(E4, E5, E6)); {'Idris.TTImp.TTImp.IAutoApp', E7, E8, E9} -> (fun (V7, V8, V9) -> ('un--getClauseFn'(V8)) end(E7, E8, E9)); {'Idris.TTImp.TTImp.INamedApp', E10, E11, E12, E13} -> (fun (V10, V11, V12, V13) -> ('un--getClauseFn'(V11)) end(E10, E11, E12, E13)); _ -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', case V0 of {'Idris.TTImp.TTImp.Implicit', E0, E1} -> (fun (V15, V16) -> {'Idris.Core.Core.GenericMsg', V15, <<"Invalid name for a declaration"/utf8>>} end(E0, E1)); _ -> {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V0)), <<" is not a function application"/utf8>>))} end, V14)) end end.
'un--extendSyn'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V61 = ('erlang':'put'(V0, case V6 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15) -> {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--mergeLeft'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7)), ('Idris.Idris2.Libraries.Data.StringMap':'un--mergeLeft'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V26 end(E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8)), ('Idris.Idris2.Libraries.Data.ANameMap':'un--merge'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V36 end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9)), V10, ('Idris.Idris2.Libraries.Data.ANameMap':'un--merge'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V47 end(E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11)), V12, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', case V1 of {'Idris.Idris.Syntax.MkSyntax', E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V58 end(E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13)), V14, V15} end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V61} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--expandString'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V10) -> ('nested--15887-6313--in--un--toRawImp'(V8, V7, V6, V5, V4, V3, V2, V1, V0, V10)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V11) -> ('nested--15887-6315--in--un--notEmpty'(V8, V7, V6, V5, V4, V3, V2, V1, V0, V11)) end, ('nested--15887-6314--in--un--mergeStrLit'(V8, V7, V6, V5, V4, V3, V2, V1, V0, V8)))), []))(V9))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', case V14 of [] -> {'Idris.TTImp.TTImp.IPrimVal', V7, {'Idris.Core.TT.Str', <<""/utf8>>}}; [E2 | E3] -> (fun (V15, V16) -> ('Idris.Idris2.Data.List':'un--foldr1'('erased', fun (V17) -> fun (V18) -> ('nested--15887-6316--in--un--concatStr'(V8, V7, V6, V5, V4, V3, V2, V1, V0, V17, V18)) end end, V14, 'erased')) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--expandList'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V7, {'Idris.Core.Name.UN', <<"Nil"/utf8>>}}} end; [E0 | E1] -> (fun (V10, V11) -> fun (V12) -> begin (V13 = (('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V10))(V12))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V16 = (('un--expandList'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V12))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V7, {'Idris.Core.Name.UN', <<"::"/utf8>>}}, [V15 | [V18 | []]]))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V6, <<"Do block cannot be empty"/utf8>>}, V9)) end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Idris.Syntax.DoExp', E93, E94} -> (fun (V12, V13) -> case V11 of [] -> fun (V14) -> ('un--desugar'(V0, V1, V3, V2, V4, V5, V13, V14)) end; _ -> case V11 of [] -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Idris.Syntax':'un--getLoc'(V10)), <<"Last statement in do block must be an expression"/utf8>>}, V15)) end; _ -> case V10 of {'Idris.Idris.Syntax.DoExp', E95, E96} -> (fun (V16, V17) -> fun (V18) -> begin (V19 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V17, V18))), case V19 of {'Idris.Prelude.Types.Left', E97} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V21) -> begin (V22 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V18))), case V22 of {'Idris.Prelude.Types.Left', E99} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E101} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V16, {'Idris.TTImp.TTImp.IApp', V16, {'Idris.TTImp.TTImp.IVar', V16, ('un--addNS'(V7, {'Idris.Core.Name.UN', <<">>"/utf8>>}))}, V21}, V24}} end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E95, E96)); {'Idris.Idris.Syntax.DoBind', E103, E104, E105, E106} -> (fun (V29, V30, V31, V32) -> fun (V33) -> begin (V34 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V32, V33))), case V34 of {'Idris.Prelude.Types.Left', E107} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V36) -> begin (V37 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V33))), case V37 of {'Idris.Prelude.Types.Left', E109} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V29, {'Idris.TTImp.TTImp.IApp', V29, {'Idris.TTImp.TTImp.IVar', V29, ('un--addNS'(V7, {'Idris.Core.Name.UN', <<">>="/utf8>>}))}, V36}, {'Idris.TTImp.TTImp.ILam', V30, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V31}, {'Idris.TTImp.TTImp.Implicit', V29, 1}, V39}}} end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E103, E104, E105, E106)); {'Idris.Idris.Syntax.DoBindPat', E111, E112, E113, E114} -> (fun (V40, V41, V42, V43) -> fun (V44) -> begin (V45 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.LHS'}, V5, V41, V44))), case V45 of {'Idris.Prelude.Types.Left', E115} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V47) -> begin (V48 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 1, V47, V44))), case V48 of {'Idris.Prelude.Types.Left', E117} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V50) -> case V50 of {'Idris.Builtin.MkPair', E119, E120} -> (fun (V51, V52) -> begin (V53 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V42, V44))), case V53 of {'Idris.Prelude.Types.Left', E121} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V55) -> begin (V61 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V58) -> case V58 of {'Idris.Prelude.Types.Left', E123} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V60) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V60))} end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V0, V1, V2, V3, V5, 0, V56)), V57)) end end, V43, []))(V44))), case V61 of {'Idris.Prelude.Types.Left', E125} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V63) -> begin (V64 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V51, V5))), begin (V65 = (('un--expandDo'(V0, V1, V2, V3, V4, V64, V6, V7, V11))(V44))), case V65 of {'Idris.Prelude.Types.Left', E127} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V40, {'Idris.TTImp.TTImp.IApp', V40, {'Idris.TTImp.TTImp.IVar', V40, ('un--addNS'(V7, {'Idris.Core.Name.UN', <<">>="/utf8>>}))}, V55}, {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V40, 1}, {'Idris.TTImp.TTImp.ICase', V40, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V40, 1}, [{'Idris.TTImp.TTImp.PatClause', V40, V52, V67} | V63]}}}} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E111, E112, E113, E114)); {'Idris.Idris.Syntax.DoLet', E129, E130, E131, E132, E133, E134} -> (fun (V68, V69, V70, V71, V72, V73) -> fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Desugar.Bang'}, ('un--initBangs'()), V74))), case V75 of {'Idris.Prelude.Types.Left', E135} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V77) -> begin (V78 = (('un--desugarB'(V0, V77, V1, V3, V2, V4, V5, V73))(V74))), case V78 of {'Idris.Prelude.Types.Left', E137} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V80) -> begin (V81 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V72, V74))), case V81 of {'Idris.Prelude.Types.Left', E139} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V83) -> begin (V84 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V74))), case V84 of {'Idris.Prelude.Types.Left', E141} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V86) -> begin (V87 = {'Idris.TTImp.TTImp.ILet', V68, V69, V71, V70, V83, V80, V86}), begin (V89 = begin (V88 = ('erlang':'get'(V77))), {'Idris.Prelude.Types.Right', V88} end), case V89 of {'Idris.Prelude.Types.Left', E143} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V91) -> {'Idris.Prelude.Types.Right', ('un--bindBangs'(case V91 of {'Idris.Idris.Desugar.MkBangData', E145, E146} -> (fun (V92, V93) -> V93 end(E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V87))} end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E129, E130, E131, E132, E133, E134)); {'Idris.Idris.Syntax.DoLetPat', E147, E148, E149, E150, E151} -> (fun (V94, V95, V96, V97, V98) -> fun (V99) -> begin (V100 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Desugar.Bang'}, ('un--initBangs'()), V99))), case V100 of {'Idris.Prelude.Types.Left', E152} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V102) -> begin (V103 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.LHS'}, V5, V95, V99))), case V103 of {'Idris.Prelude.Types.Left', E154} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V105) -> begin (V106 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V96, V99))), case V106 of {'Idris.Prelude.Types.Left', E156} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V108) -> begin (V109 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 1, V105, V99))), case V109 of {'Idris.Prelude.Types.Left', E158} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V111) -> case V111 of {'Idris.Builtin.MkPair', E160, E161} -> (fun (V112, V113) -> begin (V114 = (('un--desugarB'(V0, V102, V1, V3, V2, V4, V5, V97))(V99))), case V114 of {'Idris.Prelude.Types.Left', E162} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V116) -> begin (V122 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V119) -> case V119 of {'Idris.Prelude.Types.Left', E164} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V121) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V121))} end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V0, V1, V2, V3, V5, 0, V117)), V118)) end end, V98, []))(V99))), case V122 of {'Idris.Prelude.Types.Left', E166} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V124) -> begin (V125 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V112, V5))), begin (V126 = (('un--expandDo'(V0, V1, V2, V3, V4, V125, V6, V7, V11))(V99))), case V126 of {'Idris.Prelude.Types.Left', E168} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V128) -> begin (V130 = begin (V129 = ('erlang':'get'(V102))), {'Idris.Prelude.Types.Right', V129} end), case V130 of {'Idris.Prelude.Types.Left', E170} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V132) -> {'Idris.Prelude.Types.Right', ('un--bindBangs'(case V132 of {'Idris.Idris.Desugar.MkBangData', E172, E173} -> (fun (V133, V134) -> V134 end(E172, E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.TTImp.TTImp.ICase', V94, V116, V108, [{'Idris.TTImp.TTImp.PatClause', V94, V113, V128} | V124]}))} end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E147, E148, E149, E150, E151)); {'Idris.Idris.Syntax.DoLetLocal', E174, E175} -> (fun (V135, V136) -> fun (V137) -> begin (V138 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V137))), case V138 of {'Idris.Prelude.Types.Left', E176} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E176)); {'Idris.Prelude.Types.Right', E177} -> (fun (V140) -> begin (V142 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V141) -> ('un--desugarDecl'(V0, V1, V2, V3, V5, V141)) end, V136, []))(V137))), case V142 of {'Idris.Prelude.Types.Left', E178} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V144) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILocal', V135, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V147, V148, V149)) end end end end end, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V152, V153, V154)) end end end end end, fun (V155) -> fun (V156) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V156)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V157) -> fun (V158) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V157, V158)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V144)), V140}} end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E174, E175)); {'Idris.Idris.Syntax.DoRewrite', E180, E181} -> (fun (V159, V160) -> fun (V161) -> begin (V162 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V161))), case V162 of {'Idris.Prelude.Types.Left', E182} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E182)); {'Idris.Prelude.Types.Right', E183} -> (fun (V164) -> begin (V165 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V160, V161))), case V165 of {'Idris.Prelude.Types.Left', E184} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V167) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IRewrite', V159, V167, V164}} end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E180, E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93, E94)); _ -> case V11 of [] -> fun (V168) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Idris.Syntax':'un--getLoc'(V10)), <<"Last statement in do block must be an expression"/utf8>>}, V168)) end; _ -> case V10 of {'Idris.Idris.Syntax.DoExp', E2, E3} -> (fun (V169, V170) -> fun (V171) -> begin (V172 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V170, V171))), case V172 of {'Idris.Prelude.Types.Left', E4} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V174) -> begin (V175 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V171))), case V175 of {'Idris.Prelude.Types.Left', E6} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V177) -> begin (V179 = begin (V178 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V178} end), case V179 of {'Idris.Prelude.Types.Left', E8} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V181) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V169, {'Idris.TTImp.TTImp.IApp', V169, {'Idris.TTImp.TTImp.IVar', V169, ('un--addNS'(V7, {'Idris.Core.Name.UN', <<">>"/utf8>>}))}, V174}, V177}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); {'Idris.Idris.Syntax.DoBind', E10, E11, E12, E13} -> (fun (V182, V183, V184, V185) -> fun (V186) -> begin (V187 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V185, V186))), case V187 of {'Idris.Prelude.Types.Left', E14} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V189) -> begin (V190 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V186))), case V190 of {'Idris.Prelude.Types.Left', E16} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V192) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V182, {'Idris.TTImp.TTImp.IApp', V182, {'Idris.TTImp.TTImp.IVar', V182, ('un--addNS'(V7, {'Idris.Core.Name.UN', <<">>="/utf8>>}))}, V189}, {'Idris.TTImp.TTImp.ILam', V183, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V184}, {'Idris.TTImp.TTImp.Implicit', V182, 1}, V192}}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10, E11, E12, E13)); {'Idris.Idris.Syntax.DoBindPat', E18, E19, E20, E21} -> (fun (V193, V194, V195, V196) -> fun (V197) -> begin (V198 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.LHS'}, V5, V194, V197))), case V198 of {'Idris.Prelude.Types.Left', E22} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V200) -> begin (V201 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 1, V200, V197))), case V201 of {'Idris.Prelude.Types.Left', E24} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V203) -> case V203 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V204, V205) -> begin (V206 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V195, V197))), case V206 of {'Idris.Prelude.Types.Left', E28} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V208) -> begin (V214 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V209) -> fun (V210) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V211) -> case V211 of {'Idris.Prelude.Types.Left', E30} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V213) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V213))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V0, V1, V2, V3, V5, 0, V209)), V210)) end end, V196, []))(V197))), case V214 of {'Idris.Prelude.Types.Left', E32} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V216) -> begin (V217 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V204, V5))), begin (V218 = (('un--expandDo'(V0, V1, V2, V3, V4, V217, V6, V7, V11))(V197))), case V218 of {'Idris.Prelude.Types.Left', E34} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V220) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V193, {'Idris.TTImp.TTImp.IApp', V193, {'Idris.TTImp.TTImp.IVar', V193, ('un--addNS'(V7, {'Idris.Core.Name.UN', <<">>="/utf8>>}))}, V208}, {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V193, 1}, {'Idris.TTImp.TTImp.ICase', V193, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.MN', <<"_"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V193, 1}, [{'Idris.TTImp.TTImp.PatClause', V193, V205, V220} | V216]}}}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20, E21)); {'Idris.Idris.Syntax.DoLet', E36, E37, E38, E39, E40, E41} -> (fun (V221, V222, V223, V224, V225, V226) -> fun (V227) -> begin (V228 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Desugar.Bang'}, ('un--initBangs'()), V227))), case V228 of {'Idris.Prelude.Types.Left', E42} -> (fun (V229) -> {'Idris.Prelude.Types.Left', V229} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V230) -> begin (V231 = (('un--desugarB'(V0, V230, V1, V3, V2, V4, V5, V226))(V227))), case V231 of {'Idris.Prelude.Types.Left', E44} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V233) -> begin (V234 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V225, V227))), case V234 of {'Idris.Prelude.Types.Left', E46} -> (fun (V235) -> {'Idris.Prelude.Types.Left', V235} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V236) -> begin (V237 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V227))), case V237 of {'Idris.Prelude.Types.Left', E48} -> (fun (V238) -> {'Idris.Prelude.Types.Left', V238} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V239) -> begin (V240 = {'Idris.TTImp.TTImp.ILet', V221, V222, V224, V223, V236, V233, V239}), begin (V242 = begin (V241 = ('erlang':'get'(V230))), {'Idris.Prelude.Types.Right', V241} end), case V242 of {'Idris.Prelude.Types.Left', E50} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V244) -> {'Idris.Prelude.Types.Right', ('un--bindBangs'(case V244 of {'Idris.Idris.Desugar.MkBangData', E52, E53} -> (fun (V245, V246) -> V246 end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V240))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36, E37, E38, E39, E40, E41)); {'Idris.Idris.Syntax.DoLetPat', E54, E55, E56, E57, E58} -> (fun (V247, V248, V249, V250, V251) -> fun (V252) -> begin (V253 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Desugar.Bang'}, ('un--initBangs'()), V252))), case V253 of {'Idris.Prelude.Types.Left', E59} -> (fun (V254) -> {'Idris.Prelude.Types.Left', V254} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V255) -> begin (V256 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.LHS'}, V5, V248, V252))), case V256 of {'Idris.Prelude.Types.Left', E61} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V258) -> begin (V259 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V249, V252))), case V259 of {'Idris.Prelude.Types.Left', E63} -> (fun (V260) -> {'Idris.Prelude.Types.Left', V260} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V261) -> begin (V262 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 1, V258, V252))), case V262 of {'Idris.Prelude.Types.Left', E65} -> (fun (V263) -> {'Idris.Prelude.Types.Left', V263} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V264) -> case V264 of {'Idris.Builtin.MkPair', E67, E68} -> (fun (V265, V266) -> begin (V267 = (('un--desugarB'(V0, V255, V1, V3, V2, V4, V5, V250))(V252))), case V267 of {'Idris.Prelude.Types.Left', E69} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V269) -> begin (V275 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V270) -> fun (V271) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V272) -> case V272 of {'Idris.Prelude.Types.Left', E71} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V274) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V274))} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V0, V1, V2, V3, V5, 0, V270)), V271)) end end, V251, []))(V252))), case V275 of {'Idris.Prelude.Types.Left', E73} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V277) -> begin (V278 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V265, V5))), begin (V279 = (('un--expandDo'(V0, V1, V2, V3, V4, V278, V6, V7, V11))(V252))), case V279 of {'Idris.Prelude.Types.Left', E75} -> (fun (V280) -> {'Idris.Prelude.Types.Left', V280} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V281) -> begin (V283 = begin (V282 = ('erlang':'get'(V255))), {'Idris.Prelude.Types.Right', V282} end), case V283 of {'Idris.Prelude.Types.Left', E77} -> (fun (V284) -> {'Idris.Prelude.Types.Left', V284} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V285) -> {'Idris.Prelude.Types.Right', ('un--bindBangs'(case V285 of {'Idris.Idris.Desugar.MkBangData', E79, E80} -> (fun (V286, V287) -> V287 end(E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.TTImp.TTImp.ICase', V247, V269, V261, [{'Idris.TTImp.TTImp.PatClause', V247, V266, V281} | V277]}))} end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E54, E55, E56, E57, E58)); {'Idris.Idris.Syntax.DoLetLocal', E81, E82} -> (fun (V288, V289) -> fun (V290) -> begin (V291 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V290))), case V291 of {'Idris.Prelude.Types.Left', E83} -> (fun (V292) -> {'Idris.Prelude.Types.Left', V292} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V293) -> begin (V295 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V294) -> ('un--desugarDecl'(V0, V1, V2, V3, V5, V294)) end, V289, []))(V290))), case V295 of {'Idris.Prelude.Types.Left', E85} -> (fun (V296) -> {'Idris.Prelude.Types.Left', V296} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V297) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILocal', V288, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V300, V301, V302)) end end end end end, fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> fun (V307) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V305, V306, V307)) end end end end end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V309)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V310, V311)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V297)), V293}} end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E81, E82)); {'Idris.Idris.Syntax.DoRewrite', E87, E88} -> (fun (V312, V313) -> fun (V314) -> begin (V315 = (('un--expandDo'(V0, V1, V2, V3, V4, V5, V6, V7, V11))(V314))), case V315 of {'Idris.Prelude.Types.Left', E89} -> (fun (V316) -> {'Idris.Prelude.Types.Left', V316} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V317) -> begin (V318 = ('un--desugar'(V0, V1, V3, V2, V4, V5, V313, V314))), case V318 of {'Idris.Prelude.Types.Left', E91} -> (fun (V319) -> {'Idris.Prelude.Types.Left', V319} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V320) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IRewrite', V312, V320, V317}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dpairname'() -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--dpairNS'()), {'Idris.Core.Name.UN', <<"DPair"/utf8>>}}.
'un--desugarUpdate'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.PSetField', E0, E1} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V9))(V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ISetField', V8, V13}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Idris.Syntax.PSetFieldApp', E4, E5} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = (('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V15))(V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ISetFieldApp', V14, V19}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugarType'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.MkPTy', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> fun (V11) -> begin (V12 = ('Idris.Idris2.Idris.DocString':'un--addDocString'(V1, V0, V8, V9, V11))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> begin (V19 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V10, V11))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> begin (V31 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, case V18 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V29 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V21, V11))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpTy', V6, V7, V8, V33}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Libraries.Utils.Shunting.Infix', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V9 of {'Idris.Core.Name.UN', E8} -> (fun (V12) -> case V12 of <<"="/utf8>> -> fun (V13) -> begin (V14 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V10))(V13))), case V14 of {'Idris.Prelude.Types.Left', E13} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V16) -> begin (V17 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V11))(V13))), case V17 of {'Idris.Prelude.Types.Left', E15} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V8, {'Idris.TTImp.TTImp.FirstSuccess'}, [('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V8, {'Idris.Core.Name.UN', <<"==="/utf8>>}}, [V16 | [V19 | []]])) | [('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V8, {'Idris.Core.Name.UN', <<"~=~"/utf8>>}}, [V16 | [V19 | []]])) | []]]}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; <<"$"/utf8>> -> fun (V20) -> begin (V21 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V10))(V20))), case V21 of {'Idris.Prelude.Types.Left', E17} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V23) -> begin (V24 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V11))(V20))), case V24 of {'Idris.Prelude.Types.Left', E19} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V8, V23, V26}} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V27) -> begin (V28 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V10))(V27))), case V28 of {'Idris.Prelude.Types.Left', E9} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V30) -> begin (V31 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V11))(V27))), case V31 of {'Idris.Prelude.Types.Left', E11} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V8, {'Idris.TTImp.TTImp.IApp', V8, {'Idris.TTImp.TTImp.IVar', V8, V9}, V30}, V33}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E8)); _ -> fun (V34) -> begin (V35 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V10))(V34))), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> begin (V38 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V11))(V34))), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V8, {'Idris.TTImp.TTImp.IApp', V8, {'Idris.TTImp.TTImp.IVar', V8, V9}, V37}, V40}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2, E3)); {'Idris.Libraries.Utils.Shunting.Pre', E21, E22, E23} -> (fun (V41, V42, V43) -> case V42 of {'Idris.Core.Name.UN', E26} -> (fun (V44) -> case V44 of <<"-"/utf8>> -> fun (V45) -> begin (V46 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V43))(V45))), case V46 of {'Idris.Prelude.Types.Left', E29} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V41, {'Idris.TTImp.TTImp.IVar', V41, {'Idris.Core.Name.UN', <<"negate"/utf8>>}}, V48}} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V49) -> begin (V50 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V43))(V49))), case V50 of {'Idris.Prelude.Types.Left', E27} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V41, {'Idris.TTImp.TTImp.IVar', V41, V42}, V52}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E26)); _ -> fun (V53) -> begin (V54 = (('un--desugarTree'(V0, V1, V2, V3, V4, V5, V6, V43))(V53))), case V54 of {'Idris.Prelude.Types.Left', E24} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V41, {'Idris.TTImp.TTImp.IVar', V41, V42}, V56}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E21, E22, E23)); {'Idris.Libraries.Utils.Shunting.Leaf', E31} -> (fun (V57) -> ('un--desugarB'(V0, V1, V2, V4, V3, V5, V6, V57)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugarLHS'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--desugar'(V0, V1, V2, V3, {'Idris.Idris.Desugar.LHS'}, V4, V6, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Core':'un--iunless'('erased', V5, fun () -> ('un--getClauseFn'(V10)) end))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, V5, V10, V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V17, V18) -> begin (V41 = (('Idris.Idris2.Core.Core':'un--iwhenJust'('erased', 'erased', V13, fun (V19) -> case ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V22, V23)) end end}, V19, V17)) of 0 -> (begin (V24 = ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V6))), fun () -> fun (V25) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V24, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V37)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V38, V39)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}))([<<"Declaration name ("/utf8>> | [('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V19)) | [<<") shadowed by a pattern variable."/utf8>> | []]]]))}, V25)) end end end()); 1 -> fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))(V7))), case V41 of {'Idris.Prelude.Types.Left', E8} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, {'Idris.Builtin.MkPair', V17, V18}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--desugarFnOpt'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.IFnOpt', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', V6} end end(E0)); {'Idris.Idris.Syntax.PForeign', E1} -> (fun (V8) -> fun (V9) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V10) -> fun (V11) -> ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V10, V11)) end end, V8, []))(V9))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ForeignFn', V14}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugarField'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.MkField', E0, E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11, V12) -> fun (V13) -> begin (V14 = ('Idris.Idris2.Idris.DocString':'un--addDocStringNS'(V1, V0, V5, V11, V8, V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V23 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V21) -> fun (V22) -> ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V21, V22)) end end, V10))(V13))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V12, V13))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> begin (V38 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, case V20 of {'Idris.Idris.Syntax.MkSyntax', E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V36 end(E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V28, V13))), case V38 of {'Idris.Prelude.Types.Left', E23} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkIField', V7, V9, V25, V11, V40}} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugarDecl'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.PClaim', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V12) -> ('un--desugarFnOpt'(V0, V1, V2, V3, V4, V12)) end, V9, []))(V11))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V16 = (('un--desugarType'(V0, V1, V2, V3, V4, V10))(V11))), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IClaim', V6, V7, V8, V15, V18} | []]} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.PDef', E9, E10} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V22) -> ('un--desugarClause'(V0, V1, V2, V3, V4, 1, V22)) end, V20, []))(V21))), case V23 of {'Idris.Prelude.Types.Left', E11} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V25) -> begin (V29 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V26) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'('erased', 'erased', 'erased', fun (V27) -> fun (V28) -> ('nested--15937-8490--in--un--toIDef'(V20, V19, V4, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Data.IMaybe':'un--fromJust'('erased', V27)), V28)) end end, V26)) end, V25, []))(V21))), case V29 of {'Idris.Prelude.Types.Left', E13} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.Parser':'un--collectDefs'(V31))} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10)); {'Idris.Idris.Syntax.PData', E15, E16, E17, E18} -> (fun (V32, V33, V34, V35) -> fun (V36) -> begin (V37 = (('un--desugarData'(V0, V1, V2, V3, V4, V33, V35))(V36))), case V37 of {'Idris.Prelude.Types.Left', E19} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V39) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IData', V32, V34, V39} | []]} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15, E16, E17, E18)); {'Idris.Idris.Syntax.PParameters', E21, E22, E23} -> (fun (V40, V41, V42) -> fun (V43) -> begin (V46 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V44) -> ('un--desugarDecl'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V45) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V45)) end, V41)))), V44)) end, V42, []))(V43))), case V46 of {'Idris.Prelude.Types.Left', E24} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V48) -> begin (V54 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V49) -> fun (V50) -> begin (V51 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V49)), V50))), case V51 of {'Idris.Prelude.Types.Left', E26} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V49)), V53}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V41, []))(V43))), case V54 of {'Idris.Prelude.Types.Left', E28} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1, V43))), case V57 of {'Idris.Prelude.Types.Left', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V59) -> begin (V77 = ('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V59, fun () -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V63, V64, V65)) end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V68, V69, V70)) end end end end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V72)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V73, V74)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V75) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V76) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V76)) end, V41)))), [], V75)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V60) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V60)) end, V56)))) end, fun () -> [] end))), begin (V79 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V78) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V78)), ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V77, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V78))))} end, V56))), {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IParameters', V40, V79, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V82, V83, V84)) end end end end end, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V91)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V92, V93)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V48))} | []]} end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21, E22, E23)); {'Idris.Idris.Syntax.PUsing', E32, E33, E34} -> (fun (V94, V95, V96) -> fun (V97) -> begin (V99 = begin (V98 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V98} end), case V99 of {'Idris.Prelude.Types.Left', E35} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V101) -> begin (V111 = case V101 of {'Idris.Idris.Syntax.MkSyntax', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V102, V103, V104, V105, V106, V107, V108, V109, V110) -> V109 end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V120 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V112) -> fun (V113) -> begin (V114 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V112)), V113))), case V114 of {'Idris.Prelude.Types.Left', E46} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V116) -> begin (V117 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V111, V4, V116, V113))), case V117 of {'Idris.Prelude.Types.Left', E48} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V119) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V112)), V119}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V95, []))(V97))), case V120 of {'Idris.Prelude.Types.Left', E50} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V122) -> begin (V133 = begin (V132 = ('erlang':'put'(V0, case V101 of {'Idris.Idris.Syntax.MkSyntax', E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V123, V124, V125, V126, V127, V128, V129, V130, V131) -> {'Idris.Idris.Syntax.MkSyntax', V123, V124, V125, V126, V127, V128, V129, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V122, V111)), V131} end(E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V132} end), case V133 of {'Idris.Prelude.Types.Left', E61} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V135) -> begin (V137 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V136) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V136)) end, V96, []))(V97))), case V137 of {'Idris.Prelude.Types.Left', E63} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V139) -> begin (V141 = begin (V140 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E65} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V143) -> begin (V154 = begin (V153 = ('erlang':'put'(V0, case V143 of {'Idris.Idris.Syntax.MkSyntax', E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V144, V145, V146, V147, V148, V149, V150, V151, V152) -> {'Idris.Idris.Syntax.MkSyntax', V144, V145, V146, V147, V148, V149, V150, V111, V152} end(E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V153} end), case V154 of {'Idris.Prelude.Types.Left', E76} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V156) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V164, V165, V166)) end end end end end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V168)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V169, V170)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V139))} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33, E34)); {'Idris.Idris.Syntax.PReflect', E78, E79} -> (fun (V171, V172) -> fun (V173) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V171, <<"Reflection not implemented yet"/utf8>>}, V173)) end end(E78, E79)); {'Idris.Idris.Syntax.PInterface', E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V174, V175, V176, V177, V178, V179, V180, V181, V182) -> fun (V183) -> begin (V184 = ('Idris.Idris2.Idris.DocString':'un--addDocString'(V1, V0, V177, V178, V183))), case V184 of {'Idris.Prelude.Types.Left', E89} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V186) -> begin (V188 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V187) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V187)) end, V179))), begin (V204 = (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V191, V192, V193)) end end end end end, fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V196, V197, V198)) end end end end end, fun (V199) -> fun (V200) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V200)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V201) -> fun (V202) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V201, V202)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V203) -> ('nested--15937-8897--in--un--expandConstraint'(V182, V181, V180, V179, V178, V177, V176, V175, V174, V4, V3, V2, V1, V0, V203)) end))(V176))), begin (V210 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V205) -> fun (V206) -> begin (V207 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, V188)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V205)), V206))), case V207 of {'Idris.Prelude.Types.Left', E91} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V209) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V205)), V209}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V204, []))(V183))), case V210 of {'Idris.Prelude.Types.Left', E93} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V212) -> begin (V222 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V213) -> case V213 of {'Idris.Builtin.MkPair', E95, E96} -> (fun (V214, V215) -> case V215 of {'Idris.Builtin.MkPair', E97, E98} -> (fun (V216, V217) -> fun (V218) -> begin (V219 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V217, V218))), case V219 of {'Idris.Prelude.Types.Left', E99} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V221) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V214, {'Idris.Builtin.MkPair', V216, V221}}} end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V179, []))(V183))), case V222 of {'Idris.Prelude.Types.Left', E101} -> (fun (V223) -> {'Idris.Prelude.Types.Left', V223} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V224) -> begin (V226 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V225) -> ('Idris.Idris2.Core.Name':'un--dropNS'(V225)) end, ('Idris.Idris2.Idris.Syntax':'un--definedIn'(V182))))), begin (V227 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V1, V183))), case V227 of {'Idris.Prelude.Types.Left', E103} -> (fun (V228) -> {'Idris.Prelude.Types.Left', V228} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V229) -> begin (V262 = ('Idris.Idris2.Prelude.Basics':'un--ifThenElse'('erased', V229, fun () -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V233, V234, V235)) end end end end end, fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V238, V239, V240)) end end end end end, fun (V241) -> fun (V242) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V242)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V243) -> fun (V244) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V243, V244)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V245) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V226, V188)))), [], V245)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V230) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V230)) end, V212)))), (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V249, V250, V251)) end end end end end, fun (V252) -> fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V254, V255, V256)) end end end end end, fun (V257) -> fun (V258) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V258)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V259) -> fun (V260) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V259, V260)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V261) -> ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V226, V188)))), [], V261)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V246) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V246)))) end, V224)))))) end, fun () -> [] end))), begin (V269 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V263) -> case V263 of {'Idris.Builtin.MkPair', E105, E106} -> (fun (V264, V265) -> case V265 of {'Idris.Builtin.MkPair', E107, E108} -> (fun (V266, V267) -> begin (V268 = ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V262, V267))), {'Idris.Builtin.MkPair', V264, {'Idris.Builtin.MkPair', V266, V268}} end end(E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E105, E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V224))), begin (V273 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V270) -> case V270 of {'Idris.Builtin.MkPair', E109, E110} -> (fun (V271, V272) -> {'Idris.Builtin.MkPair', V271, ('Idris.Idris2.TTImp.BindImplicits':'un--doBind'(V262, V272))} end(E109, E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V212))), begin (V275 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V274) -> ('un--desugarDecl'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V226, V188)))), V274)) end, V182, []))(V183))), case V275 of {'Idris.Prelude.Types.Left', E111} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V277) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> [V177 | []] end, fun () -> fun (V278) -> [V177 | [V278 | []]] end end, V181)), fun (V279) -> fun (V280) -> fun (V281) -> fun (V282) -> ('Idris.Idris2.Idris.Elab.Interface':'un--elabInterface'(V279, V1, V2, V0, V3, V174, V175, V281, V280, V273, V177, V269, V180, V181, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V285, V286, V287)) end end end end end, fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> fun (V292) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V290, V291, V292)) end end end end end, fun (V293) -> fun (V294) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V294)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V295, V296)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V277)), V282)) end end end end} | []]} end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E80, E81, E82, E83, E84, E85, E86, E87, E88)); {'Idris.Idris.Syntax.PImplementation', E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123} -> (fun (V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307) -> fun (V308) -> begin (V310 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V309) -> ('un--desugarFnOpt'(V0, V1, V2, V3, V4, V309)) end, V299, []))(V308))), case V310 of {'Idris.Prelude.Types.Left', E124} -> (fun (V311) -> {'Idris.Prelude.Types.Left', V311} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V312) -> begin (V322 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V313) -> case V313 of {'Idris.Builtin.MkPair', E126, E127} -> (fun (V314, V315) -> case V315 of {'Idris.Builtin.MkPair', E128, E129} -> (fun (V316, V317) -> fun (V318) -> begin (V319 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V317, V318))), case V319 of {'Idris.Prelude.Types.Left', E130} -> (fun (V320) -> {'Idris.Prelude.Types.Left', V320} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V321) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V314, {'Idris.Builtin.MkPair', V316, V321}}} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V301, []))(V308))), case V322 of {'Idris.Prelude.Types.Left', E132} -> (fun (V323) -> {'Idris.Prelude.Types.Left', V323} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V324) -> ('case--desugarDecl-9460'(V307, V306, V305, V304, V303, V302, V301, V300, V299, V298, V297, V4, V3, V2, V1, V0, V312, V324, V324, V308)) end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123)); {'Idris.Idris.Syntax.PRecord', E134, E135, E136, E137, E138, E139, E140} -> (fun (V325, V326, V327, V328, V329, V330, V331) -> fun (V332) -> begin (V333 = ('Idris.Idris2.Idris.DocString':'un--addDocString'(V1, V0, V328, V326, V332))), case V333 of {'Idris.Prelude.Types.Left', E141} -> (fun (V334) -> {'Idris.Prelude.Types.Left', V334} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V335) -> begin (V350 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V336) -> case V336 of {'Idris.Builtin.MkPair', E143, E144} -> (fun (V337, V338) -> case V338 of {'Idris.Builtin.MkPair', E145, E146} -> (fun (V339, V340) -> case V340 of {'Idris.Builtin.MkPair', E147, E148} -> (fun (V341, V342) -> fun (V343) -> begin (V344 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V342, V343))), case V344 of {'Idris.Prelude.Types.Left', E149} -> (fun (V345) -> {'Idris.Prelude.Types.Left', V345} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V346) -> begin (V347 = (('nested--15937-10180--in--un--mapDesugarPiInfo'(V331, V330, V329, V328, V327, V326, V325, V4, V3, V2, V1, V0, V4, V341))(V343))), case V347 of {'Idris.Prelude.Types.Left', E151} -> (fun (V348) -> {'Idris.Prelude.Types.Left', V348} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V349) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V337, {'Idris.Builtin.MkPair', V339, {'Idris.Builtin.MkPair', V349, V346}}}} end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V329, []))(V332))), case V350 of {'Idris.Prelude.Types.Left', E153} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V352) -> (('case--desugarDecl-10330'(V331, V330, V329, V328, V327, V326, V325, V4, V3, V2, V1, V0, V352, V352))(V332)) end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E134, E135, E136, E137, E138, E139, E140)); {'Idris.Idris.Syntax.PFixity', E155, E156, E157, E158} -> (fun (V353, V354, V355, V356) -> case V354 of {'Idris.Idris.Syntax.Prefix'} -> (fun () -> case V356 of {'Idris.Core.Name.UN', E187} -> (fun (V357) -> fun (V358) -> begin (V360 = begin (V359 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V359} end), case V360 of {'Idris.Prelude.Types.Left', E188} -> (fun (V361) -> {'Idris.Prelude.Types.Left', V361} end(E188)); {'Idris.Prelude.Types.Right', E189} -> (fun (V362) -> begin (V373 = begin (V372 = ('erlang':'put'(V0, case V362 of {'Idris.Idris.Syntax.MkSyntax', E190, E191, E192, E193, E194, E195, E196, E197, E198} -> (fun (V363, V364, V365, V366, V367, V368, V369, V370, V371) -> {'Idris.Idris.Syntax.MkSyntax', V363, ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V357, V355, V364)), V365, V366, V367, V368, V369, V370, V371} end(E190, E191, E192, E193, E194, E195, E196, E197, E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V372} end), case V373 of {'Idris.Prelude.Types.Left', E199} -> (fun (V374) -> {'Idris.Prelude.Types.Left', V374} end(E199)); {'Idris.Prelude.Types.Right', E200} -> (fun (V375) -> {'Idris.Prelude.Types.Right', []} end(E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E187)); _ -> case V356 of {'Idris.Core.Name.UN', E173} -> (fun (V376) -> fun (V377) -> begin (V379 = begin (V378 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V378} end), case V379 of {'Idris.Prelude.Types.Left', E174} -> (fun (V380) -> {'Idris.Prelude.Types.Left', V380} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V381) -> begin (V392 = begin (V391 = ('erlang':'put'(V0, case V381 of {'Idris.Idris.Syntax.MkSyntax', E176, E177, E178, E179, E180, E181, E182, E183, E184} -> (fun (V382, V383, V384, V385, V386, V387, V388, V389, V390) -> {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V376, {'Idris.Builtin.MkPair', V354, V355}, V382)), V383, V384, V385, V386, V387, V388, V389, V390} end(E176, E177, E178, E179, E180, E181, E182, E183, E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V391} end), case V392 of {'Idris.Prelude.Types.Left', E185} -> (fun (V393) -> {'Idris.Prelude.Types.Left', V393} end(E185)); {'Idris.Prelude.Types.Right', E186} -> (fun (V394) -> {'Idris.Prelude.Types.Right', []} end(E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E173)); _ -> fun (V395) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V353, <<"Fixity declarations must be for unqualified names"/utf8>>}, V395)) end end end end()); _ -> case V356 of {'Idris.Core.Name.UN', E159} -> (fun (V396) -> fun (V397) -> begin (V399 = begin (V398 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V398} end), case V399 of {'Idris.Prelude.Types.Left', E160} -> (fun (V400) -> {'Idris.Prelude.Types.Left', V400} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V401) -> begin (V412 = begin (V411 = ('erlang':'put'(V0, case V401 of {'Idris.Idris.Syntax.MkSyntax', E162, E163, E164, E165, E166, E167, E168, E169, E170} -> (fun (V402, V403, V404, V405, V406, V407, V408, V409, V410) -> {'Idris.Idris.Syntax.MkSyntax', ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V396, {'Idris.Builtin.MkPair', V354, V355}, V402)), V403, V404, V405, V406, V407, V408, V409, V410} end(E162, E163, E164, E165, E166, E167, E168, E169, E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V411} end), case V412 of {'Idris.Prelude.Types.Left', E171} -> (fun (V413) -> {'Idris.Prelude.Types.Left', V413} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V414) -> {'Idris.Prelude.Types.Right', []} end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E159)); _ -> fun (V415) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V353, <<"Fixity declarations must be for unqualified names"/utf8>>}, V415)) end end end end(E155, E156, E157, E158)); {'Idris.Idris.Syntax.PMutual', E201, E202} -> (fun (V416, V417) -> begin (V420 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V418) -> ('un--getDecl'({'Idris.Idris.Syntax.AsType'}, V418)) end, V417)), ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V419) -> ('un--getDecl'({'Idris.Idris.Syntax.AsDef'}, V419)) end, V417))))), fun (V421) -> begin (V423 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V422) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V422)) end, V420, []))(V421))), case V423 of {'Idris.Prelude.Types.Left', E203} -> (fun (V424) -> {'Idris.Prelude.Types.Left', V424} end(E203)); {'Idris.Prelude.Types.Right', E204} -> (fun (V425) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V426) -> fun (V427) -> fun (V428) -> fun (V429) -> fun (V430) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V428, V429, V430)) end end end end end, fun (V431) -> fun (V432) -> fun (V433) -> fun (V434) -> fun (V435) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V433, V434, V435)) end end end end end, fun (V436) -> fun (V437) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V437)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V438) -> fun (V439) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V438, V439)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V425))} end(E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E201, E202)); {'Idris.Idris.Syntax.PNamespace', E205, E206, E207} -> (fun (V440, V441, V442) -> fun (V443) -> begin (V445 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V444) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V444)) end, V442, []))(V443))), case V445 of {'Idris.Prelude.Types.Left', E208} -> (fun (V446) -> {'Idris.Prelude.Types.Left', V446} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V447) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.INamespace', V440, V441, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V448) -> fun (V449) -> fun (V450) -> fun (V451) -> fun (V452) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V450, V451, V452)) end end end end end, fun (V453) -> fun (V454) -> fun (V455) -> fun (V456) -> fun (V457) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V455, V456, V457)) end end end end end, fun (V458) -> fun (V459) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V459)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V460) -> fun (V461) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V460, V461)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V447))} | []]} end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E205, E206, E207)); {'Idris.Idris.Syntax.PTransform', E210, E211, E212, E213} -> (fun (V462, V463, V464, V465) -> fun (V466) -> begin (V470 = begin (V467 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.LHS'}, V4, V464, V466))), case V467 of {'Idris.Prelude.Types.Left', E214} -> (fun (V468) -> {'Idris.Prelude.Types.Left', V468} end(E214)); {'Idris.Prelude.Types.Right', E215} -> (fun (V469) -> ('Idris.Idris2.TTImp.BindImplicits':'un--bindNames'(V1, 1, V469, V466)) end(E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V470 of {'Idris.Prelude.Types.Left', E216} -> (fun (V471) -> {'Idris.Prelude.Types.Left', V471} end(E216)); {'Idris.Prelude.Types.Right', E217} -> (fun (V472) -> case V472 of {'Idris.Builtin.MkPair', E218, E219} -> (fun (V473, V474) -> begin (V475 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V473, V4)), V465, V466))), case V475 of {'Idris.Prelude.Types.Left', E220} -> (fun (V476) -> {'Idris.Prelude.Types.Left', V476} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V477) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.ITransform', V462, {'Idris.Core.Name.UN', V463}, V474, V477} | []]} end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E210, E211, E212, E213)); {'Idris.Idris.Syntax.PRunElabDecl', E222, E223} -> (fun (V478, V479) -> fun (V480) -> begin (V481 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V479, V480))), case V481 of {'Idris.Prelude.Types.Left', E224} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E224)); {'Idris.Prelude.Types.Right', E225} -> (fun (V483) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IRunElabDecl', V478, V483} | []]} end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E222, E223)); {'Idris.Idris.Syntax.PDirective', E226, E227} -> (fun (V484, V485) -> case V485 of {'Idris.Idris.Syntax.Hide', E228} -> (fun (V486) -> fun (V487) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V488) -> fun (V489) -> fun (V490) -> fun (V491) -> ('Idris.Idris2.Core.Context':'un--hide'(V1, V484, V486, V491)) end end end end} | []]} end end(E228)); {'Idris.Idris.Syntax.Logging', E229} -> (fun (V492) -> fun (V493) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.ILog', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V494) -> fun (V495) -> fun (V496) -> fun (V497) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V496, V497)) end end end end, fun (V498) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Options.Log':'un--topics'(V498)), ('Idris.Idris2.Core.Options.Log':'un--verbosity'(V498))} end, V492))} | []]} end end(E229)); {'Idris.Idris.Syntax.LazyOn', E230} -> (fun (V499) -> fun (V500) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> ('Idris.Idris2.Core.Context':'un--lazyActive'(V1, V499, V504)) end end end end} | []]} end end(E230)); {'Idris.Idris.Syntax.UnboundImplicits', E231} -> (fun (V505) -> fun (V506) -> begin (V507 = ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V505, V506))), case V507 of {'Idris.Prelude.Types.Left', E232} -> (fun (V508) -> {'Idris.Prelude.Types.Left', V508} end(E232)); {'Idris.Prelude.Types.Right', E233} -> (fun (V509) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V510) -> fun (V511) -> fun (V512) -> fun (V513) -> ('Idris.Idris2.Core.Context':'un--setUnboundImplicits'(V1, V505, V513)) end end end end} | []]} end(E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E231)); {'Idris.Idris.Syntax.PrefixRecordProjections', E234} -> (fun (V514) -> fun (V515) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V516) -> fun (V517) -> fun (V518) -> fun (V519) -> ('Idris.Idris2.Core.Context':'un--setPrefixRecordProjections'(V1, V514, V519)) end end end end} | []]} end end(E234)); {'Idris.Idris.Syntax.AmbigDepth', E235} -> (fun (V520) -> fun (V521) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V522) -> fun (V523) -> fun (V524) -> fun (V525) -> ('Idris.Idris2.Core.Context':'un--setAmbigLimit'(V1, V520, V525)) end end end end} | []]} end end(E235)); {'Idris.Idris.Syntax.AutoImplicitDepth', E236} -> (fun (V526) -> fun (V527) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V528) -> fun (V529) -> fun (V530) -> fun (V531) -> ('Idris.Idris2.Core.Context':'un--setAutoImplicitLimit'(V1, V526, V531)) end end end end} | []]} end end(E236)); {'Idris.Idris.Syntax.NFMetavarThreshold', E237} -> (fun (V532) -> fun (V533) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V534) -> fun (V535) -> fun (V536) -> fun (V537) -> ('Idris.Idris2.Core.Context':'un--setNFThreshold'(V1, V532, V537)) end end end end} | []]} end end(E237)); {'Idris.Idris.Syntax.PairNames', E238, E239, E240} -> (fun (V538, V539, V540) -> fun (V541) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V542) -> fun (V543) -> fun (V544) -> fun (V545) -> ('Idris.Idris2.Core.Context':'un--setPair'(V1, V484, V538, V539, V540, V545)) end end end end} | []]} end end(E238, E239, E240)); {'Idris.Idris.Syntax.RewriteName', E241, E242} -> (fun (V546, V547) -> fun (V548) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V549) -> fun (V550) -> fun (V551) -> fun (V552) -> ('Idris.Idris2.Core.Context':'un--setRewrite'(V1, V484, V546, V547, V552)) end end end end} | []]} end end(E241, E242)); {'Idris.Idris.Syntax.PrimInteger', E243} -> (fun (V553) -> fun (V554) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V555) -> fun (V556) -> fun (V557) -> fun (V558) -> ('Idris.Idris2.Core.Context':'un--setFromInteger'(V1, V553, V558)) end end end end} | []]} end end(E243)); {'Idris.Idris.Syntax.PrimString', E244} -> (fun (V559) -> fun (V560) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V561) -> fun (V562) -> fun (V563) -> fun (V564) -> ('Idris.Idris2.Core.Context':'un--setFromString'(V1, V559, V564)) end end end end} | []]} end end(E244)); {'Idris.Idris.Syntax.PrimChar', E245} -> (fun (V565) -> fun (V566) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V567) -> fun (V568) -> fun (V569) -> fun (V570) -> ('Idris.Idris2.Core.Context':'un--setFromChar'(V1, V565, V570)) end end end end} | []]} end end(E245)); {'Idris.Idris.Syntax.PrimDouble', E246} -> (fun (V571) -> fun (V572) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V573) -> fun (V574) -> fun (V575) -> fun (V576) -> ('Idris.Idris2.Core.Context':'un--setFromDouble'(V1, V571, V576)) end end end end} | []]} end end(E246)); {'Idris.Idris.Syntax.CGAction', E247, E248} -> (fun (V577, V578) -> fun (V579) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V580) -> fun (V581) -> fun (V582) -> fun (V583) -> ('Idris.Idris2.Core.Context':'un--addDirective'(V1, V577, V578, V583)) end end end end} | []]} end end(E247, E248)); {'Idris.Idris.Syntax.Names', E249, E250} -> (fun (V584, V585) -> fun (V586) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V587) -> fun (V588) -> fun (V589) -> fun (V590) -> ('Idris.Idris2.Core.Context':'un--addNameDirective'(V1, V484, V584, V585, V590)) end end end end} | []]} end end(E249, E250)); {'Idris.Idris.Syntax.StartExpr', E251} -> (fun (V591) -> fun (V592) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V593) -> fun (V594) -> fun (V595) -> fun (V596) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"%start not implemented"/utf8>>}, V596)) end end end end} | []]} end end(E251)); {'Idris.Idris.Syntax.Overloadable', E252} -> (fun (V597) -> fun (V598) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V599) -> fun (V600) -> fun (V601) -> fun (V602) -> ('Idris.Idris2.Core.Context':'un--setNameFlag'(V1, V484, V597, {'Idris.Core.Context.Overloadable'}, V602)) end end end end} | []]} end end(E252)); {'Idris.Idris.Syntax.Extension', E253} -> (fun (V603) -> fun (V604) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V605) -> fun (V606) -> fun (V607) -> fun (V608) -> ('Idris.Idris2.Core.Context':'un--setExtension'(V1, V603, V608)) end end end end} | []]} end end(E253)); {'Idris.Idris.Syntax.DefaultTotality', E254} -> (fun (V609) -> fun (V610) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IPragma', [], fun (V611) -> fun (V612) -> fun (V613) -> fun (V614) -> ('Idris.Idris2.Core.Context':'un--setDefaultTotalityOption'(V1, V609, V614)) end end end end} | []]} end end(E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E226, E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugarData'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.MkPData', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> fun (V12) -> begin (V13 = ('Idris.Idris2.Idris.DocString':'un--addDocString'(V1, V0, V8, V5, V12))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> begin (V20 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V9, V12))), case V20 of {'Idris.Prelude.Types.Left', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V22) -> begin (V32 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, case V19 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V30 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V22, V12))), case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> begin (V36 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V35) -> ('un--desugarType'(V0, V1, V2, V3, V4, V35)) end, V11, []))(V12))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpData', V7, V8, V34, V10, V38}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Idris.Syntax.MkPLater', E24, E25, E26} -> (fun (V39, V40, V41) -> fun (V42) -> begin (V43 = ('Idris.Idris2.Idris.DocString':'un--addDocString'(V1, V0, V40, V5, V42))), case V43 of {'Idris.Prelude.Types.Left', E27} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V45) -> begin (V47 = begin (V46 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V46} end), case V47 of {'Idris.Prelude.Types.Left', E29} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V49) -> begin (V50 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, V4, V41, V42))), case V50 of {'Idris.Prelude.Types.Left', E31} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V52) -> begin (V62 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, case V49 of {'Idris.Idris.Syntax.MkSyntax', E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V60 end(E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V52, V42))), case V62 of {'Idris.Prelude.Types.Left', E42} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.MkImpLater', V39, V40, V64}} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugarClause'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.MkPatClause', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V12) -> ('un--desugarDecl'(V0, V1, V2, V3, V4, V12)) end, V10, []))(V11))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('un--desugarLHS'(V0, V1, V3, V2, V4, V5, V8, V11))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V21, V22) -> begin (V23 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V21, V4)), V9, V11))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> begin (V40 = case V15 of [] -> V25; _ -> {'Idris.TTImp.TTImp.ILocal', V7, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V37)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V38, V39)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V15)), V25} end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V19, {'Idris.TTImp.TTImp.PatClause', V7, V22, V40}}} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Idris.Syntax.MkWithClause', E14, E15, E16, E17, E18, E19} -> (fun (V41, V42, V43, V44, V45, V46) -> fun (V47) -> begin (V53 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V50) -> case V50 of {'Idris.Prelude.Types.Left', E20} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V52) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V52))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V0, V1, V2, V3, V4, V5, V48)), V49)) end end, V46, []))(V47))), case V53 of {'Idris.Prelude.Types.Left', E22} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V55) -> begin (V56 = ('un--desugarLHS'(V0, V1, V3, V2, V4, V5, V42, V47))), case V56 of {'Idris.Prelude.Types.Left', E24} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V58) -> case V58 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V59, V60) -> case V60 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V61, V62) -> begin (V63 = ('un--desugar'(V0, V1, V3, V2, {'Idris.Idris.Desugar.AnyExpr'}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V61, V4)), V43, V47))), case V63 of {'Idris.Prelude.Types.Left', E30} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V59, {'Idris.TTImp.TTImp.WithClause', V41, V62, V65, V44, V45, V55}}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14, E15, E16, E17, E18, E19)); {'Idris.Idris.Syntax.MkImpossible', E32, E33} -> (fun (V66, V67) -> fun (V68) -> begin (V69 = ('un--desugarLHS'(V0, V1, V3, V2, V4, V5, V67, V68))), case V69 of {'Idris.Prelude.Types.Left', E34} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V71) -> case V71 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V72, V73) -> case V73 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V74, V75) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V72, {'Idris.TTImp.TTImp.ImpossibleClause', V66, V75}}} end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V8, V9}} end end(E0, E1)); {'Idris.Idris.Syntax.PPi', E2, E3, E4, E5, E6, E7} -> (fun (V11, V12, V13, V14, V15, V16) -> begin (V18 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V6 end, fun () -> fun (V17) -> [V17 | V6] end end, V14))), fun (V19) -> begin (V22 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V20) -> fun (V21) -> ('un--desugar'(V0, V2, V3, V4, V5, V18, V20, V21)) end end, V13))(V19))), case V22 of {'Idris.Prelude.Types.Left', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V24) -> begin (V25 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V15))(V19))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V28 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V18, V16))(V19))), case V28 of {'Idris.Prelude.Types.Left', E12} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPi', V11, V12, V24, V14, V27, V30}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3, E4, E5, E6, E7)); {'Idris.Idris.Syntax.PLam', E14, E15, E16, E17, E18, E19} -> (fun (V31, V32, V33, V34, V35, V36) -> case V34 of {'Idris.Idris.Syntax.PRef', E26, E27} -> (fun (V37, V38) -> case V38 of {'Idris.Core.Name.UN', E34} -> (fun (V39) -> begin (V40 = {'Idris.Idris.Syntax.PRef', V37, {'Idris.Core.Name.UN', V39}}), begin (V41 = {'Idris.Core.Name.UN', V39}), ('case--desugarB-4447'(V37, V36, V35, V39, V40, V41, V33, V32, V31, V6, V5, V4, V3, V2, V1, V0, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Libraries.Utils.String':'un--lowerFirst'(V39)), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V39, <<"_"/utf8>>)) end)))) end end end(E34)); {'Idris.Core.Name.MN', E35, E36} -> (fun (V42, V43) -> fun (V44) -> begin (V47 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V45) -> fun (V46) -> ('un--desugar'(V0, V2, V3, V4, V5, V6, V45, V46)) end end, V33))(V44))), case V47 of {'Idris.Prelude.Types.Left', E37} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V49) -> begin (V50 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V35))(V44))), case V50 of {'Idris.Prelude.Types.Left', E39} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V52) -> begin (V53 = ('un--desugar'(V0, V2, V3, V4, V5, [V38 | V6], V36, V44))), case V53 of {'Idris.Prelude.Types.Left', E41} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILam', V31, V32, V49, {'Idris.Prelude.Types.Just', V38}, V52, V55}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35, E36)); _ -> fun (V56) -> begin (V59 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V57) -> fun (V58) -> ('un--desugar'(V0, V2, V3, V4, V5, V6, V57, V58)) end end, V33))(V56))), case V59 of {'Idris.Prelude.Types.Left', E28} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V61) -> begin (V62 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V35))(V56))), case V62 of {'Idris.Prelude.Types.Left', E30} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V64) -> begin (V65 = (('un--desugarClause'(V0, V2, V4, V3, V6, 0, {'Idris.Idris.Syntax.MkPatClause', V31, V34, V36, []}))(V56))), case V65 of {'Idris.Prelude.Types.Left', E32} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, V32, V61, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"lamc"/utf8>>, 0}}, V64, {'Idris.TTImp.TTImp.ICase', V31, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.MN', <<"lamc"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V31, 1}, [('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V67)) | []]}}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E26, E27)); {'Idris.Idris.Syntax.PImplicit', E43} -> (fun (V68) -> fun (V69) -> begin (V72 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V70) -> fun (V71) -> ('un--desugar'(V0, V2, V3, V4, V5, V6, V70, V71)) end end, V33))(V69))), case V72 of {'Idris.Prelude.Types.Left', E44} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V74) -> begin (V75 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V35))(V69))), case V75 of {'Idris.Prelude.Types.Left', E46} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V77) -> begin (V78 = ('un--desugar'(V0, V2, V3, V4, V5, V6, V36, V69))), case V78 of {'Idris.Prelude.Types.Left', E48} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILam', V31, V32, V74, {'Idris.Prelude.Types.Nothing'}, V77, V80}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43)); _ -> fun (V81) -> begin (V84 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V82) -> fun (V83) -> ('un--desugar'(V0, V2, V3, V4, V5, V6, V82, V83)) end end, V33))(V81))), case V84 of {'Idris.Prelude.Types.Left', E20} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V86) -> begin (V87 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V35))(V81))), case V87 of {'Idris.Prelude.Types.Left', E22} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V89) -> begin (V90 = (('un--desugarClause'(V0, V2, V4, V3, V6, 0, {'Idris.Idris.Syntax.MkPatClause', V31, V34, V36, []}))(V81))), case V90 of {'Idris.Prelude.Types.Left', E24} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, V32, V86, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"lamc"/utf8>>, 0}}, V89, {'Idris.TTImp.TTImp.ICase', V31, {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.MN', <<"lamc"/utf8>>, 0}}, {'Idris.TTImp.TTImp.Implicit', V31, 1}, [('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V92)) | []]}}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14, E15, E16, E17, E18, E19)); {'Idris.Idris.Syntax.PLet', E50, E51, E52, E53, E54, E55, E56} -> (fun (V93, V94, V95, V96, V97, V98, V99) -> case V95 of {'Idris.Idris.Syntax.PRef', E65, E66} -> (fun (V100, V101) -> case V99 of [] -> fun (V102) -> begin (V103 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V96))(V102))), case V103 of {'Idris.Prelude.Types.Left', E75} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V105) -> begin (V106 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V97))(V102))), case V106 of {'Idris.Prelude.Types.Left', E77} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V108) -> begin (V109 = ('un--desugar'(V0, V2, V3, V4, V5, [V101 | V6], V98, V102))), case V109 of {'Idris.Prelude.Types.Left', E79} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V111) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILet', V93, V100, V94, V101, V105, V108, V111}} end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V112) -> begin (V113 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V97))(V112))), case V113 of {'Idris.Prelude.Types.Left', E67} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V115) -> begin (V116 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V96))(V112))), case V116 of {'Idris.Prelude.Types.Left', E69} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V118) -> begin (V124 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V121) -> case V121 of {'Idris.Prelude.Types.Left', E71} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V123) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V123))} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V0, V2, V4, V3, V6, 0, V119)), V120)) end end, [{'Idris.Idris.Syntax.MkPatClause', V93, V95, V98, []} | V99], []))(V112))), case V124 of {'Idris.Prelude.Types.Left', E73} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V126) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICase', V93, V115, V118, V126}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E65, E66)); _ -> fun (V127) -> begin (V128 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V97))(V127))), case V128 of {'Idris.Prelude.Types.Left', E57} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V130) -> begin (V131 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V96))(V127))), case V131 of {'Idris.Prelude.Types.Left', E59} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V133) -> begin (V139 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V136) -> case V136 of {'Idris.Prelude.Types.Left', E61} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V138) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V138))} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V0, V2, V4, V3, V6, 0, V134)), V135)) end end, [{'Idris.Idris.Syntax.MkPatClause', V93, V95, V98, []} | V99], []))(V127))), case V139 of {'Idris.Prelude.Types.Left', E63} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V141) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICase', V93, V130, V133, V141}} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E50, E51, E52, E53, E54, E55, E56)); {'Idris.Idris.Syntax.PCase', E81, E82, E83} -> (fun (V142, V143, V144) -> fun (V145) -> begin (V146 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V143))(V145))), case V146 of {'Idris.Prelude.Types.Left', E84} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V148) -> begin (V154 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V149) -> fun (V150) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V151) -> case V151 of {'Idris.Prelude.Types.Left', E86} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V153) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V153))} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarClause'(V0, V2, V4, V3, V6, 0, V149)), V150)) end end, V144, []))(V145))), case V154 of {'Idris.Prelude.Types.Left', E88} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V156) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICase', V142, V148, {'Idris.TTImp.TTImp.Implicit', V142, 1}, V156}} end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E81, E82, E83)); {'Idris.Idris.Syntax.PLocal', E90, E91, E92} -> (fun (V157, V158, V159) -> begin (V160 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Idris.Syntax':'un--definedIn'(V158)), V6))), fun (V161) -> begin (V163 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V162) -> ('un--desugarDecl'(V0, V2, V4, V3, V160, V162)) end, V158, []))(V161))), case V163 of {'Idris.Prelude.Types.Left', E93} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V165) -> begin (V166 = ('un--desugar'(V0, V2, V3, V4, V5, V160, V159, V161))), case V166 of {'Idris.Prelude.Types.Left', E95} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V168) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ILocal', V157, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V171, V172, V173)) end end end end end, fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V176, V177, V178)) end end end end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V180)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V181, V182)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V165)), V168}} end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E90, E91, E92)); {'Idris.Idris.Syntax.PApp', E97, E98, E99} -> (fun (V183, V184, V185) -> case V184 of {'Idris.Idris.Syntax.PUpdate', E104, E105} -> (fun (V186, V187) -> fun (V188) -> begin (V190 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V189) -> ('un--desugarUpdate'(V0, V1, V2, V4, V3, V5, V6, V189)) end, V187, []))(V188))), case V190 of {'Idris.Prelude.Types.Left', E106} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V192) -> begin (V193 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V185))(V188))), case V193 of {'Idris.Prelude.Types.Left', E108} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V195) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IUpdate', V183, V192, V195}} end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E104, E105)); _ -> fun (V196) -> begin (V197 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V184))(V196))), case V197 of {'Idris.Prelude.Types.Left', E100} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V199) -> begin (V200 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V185))(V196))), case V200 of {'Idris.Prelude.Types.Left', E102} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V202) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V183, V199, V202}} end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E97, E98, E99)); {'Idris.Idris.Syntax.PUpdate', E110, E111} -> (fun (V203, V204) -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, {'Idris.Idris.Syntax.PLam', V203, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PRef', V203, {'Idris.Core.Name.MN', <<"rec"/utf8>>, 0}}, {'Idris.Idris.Syntax.PImplicit', V203}, {'Idris.Idris.Syntax.PApp', V203, {'Idris.Idris.Syntax.PUpdate', V203, V204}, {'Idris.Idris.Syntax.PRef', V203, {'Idris.Core.Name.MN', <<"rec"/utf8>>, 0}}}})) end(E110, E111)); {'Idris.Idris.Syntax.PAutoApp', E112, E113, E114} -> (fun (V205, V206, V207) -> fun (V208) -> begin (V209 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V206))(V208))), case V209 of {'Idris.Prelude.Types.Left', E115} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V211) -> begin (V212 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V207))(V208))), case V212 of {'Idris.Prelude.Types.Left', E117} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V214) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAutoApp', V205, V211, V214}} end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E112, E113, E114)); {'Idris.Idris.Syntax.PWithApp', E119, E120, E121} -> (fun (V215, V216, V217) -> fun (V218) -> begin (V219 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V216))(V218))), case V219 of {'Idris.Prelude.Types.Left', E122} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V221) -> begin (V222 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V217))(V218))), case V222 of {'Idris.Prelude.Types.Left', E124} -> (fun (V223) -> {'Idris.Prelude.Types.Left', V223} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V224) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IWithApp', V215, V221, V224}} end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120, E121)); {'Idris.Idris.Syntax.PNamedApp', E126, E127, E128, E129} -> (fun (V225, V226, V227, V228) -> fun (V229) -> begin (V230 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V226))(V229))), case V230 of {'Idris.Prelude.Types.Left', E130} -> (fun (V231) -> {'Idris.Prelude.Types.Left', V231} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V232) -> begin (V233 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V228))(V229))), case V233 of {'Idris.Prelude.Types.Left', E132} -> (fun (V234) -> {'Idris.Prelude.Types.Left', V234} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V235) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.INamedApp', V225, V232, V227, V235}} end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126, E127, E128, E129)); {'Idris.Idris.Syntax.PDelayed', E134, E135, E136} -> (fun (V236, V237, V238) -> fun (V239) -> begin (V240 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V238))(V239))), case V240 of {'Idris.Prelude.Types.Left', E137} -> (fun (V241) -> {'Idris.Prelude.Types.Left', V241} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V242) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDelayed', V236, V237, V242}} end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E134, E135, E136)); {'Idris.Idris.Syntax.PDelay', E139, E140} -> (fun (V243, V244) -> fun (V245) -> begin (V246 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V244))(V245))), case V246 of {'Idris.Prelude.Types.Left', E141} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V248) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IDelay', V243, V248}} end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E139, E140)); {'Idris.Idris.Syntax.PForce', E143, E144} -> (fun (V249, V250) -> fun (V251) -> begin (V252 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V250))(V251))), case V252 of {'Idris.Prelude.Types.Left', E145} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V254) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IForce', V249, V254}} end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E143, E144)); {'Idris.Idris.Syntax.PEq', E147, E148, E149} -> (fun (V255, V256, V257) -> fun (V258) -> begin (V259 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V256))(V258))), case V259 of {'Idris.Prelude.Types.Left', E150} -> (fun (V260) -> {'Idris.Prelude.Types.Left', V260} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V261) -> begin (V262 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V257))(V258))), case V262 of {'Idris.Prelude.Types.Left', E152} -> (fun (V263) -> {'Idris.Prelude.Types.Left', V263} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V264) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V255, {'Idris.TTImp.TTImp.FirstSuccess'}, [('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V255, {'Idris.Core.Name.UN', <<"==="/utf8>>}}, [V261 | [V264 | []]])) | [('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V255, {'Idris.Core.Name.UN', <<"~=~"/utf8>>}}, [V261 | [V264 | []]])) | []]]}} end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E147, E148, E149)); {'Idris.Idris.Syntax.PBracketed', E154, E155} -> (fun (V265, V266) -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V266)) end(E154, E155)); {'Idris.Idris.Syntax.POp', E156, E157, E158, E159} -> (fun (V267, V268, V269, V270) -> fun (V271) -> begin (V272 = (('un--toTokList'(V0, {'Idris.Idris.Syntax.POp', V267, V268, V269, V270}))(V271))), case V272 of {'Idris.Prelude.Types.Left', E160} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V274) -> begin (V278 = ('Idris.Idris2.Libraries.Utils.Shunting':'un--parseOps'('erased', 'erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V275) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V275)) end, fun (V276) -> fun (V277) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V276, V277)) end end}, V274, V271))), case V278 of {'Idris.Prelude.Types.Left', E162} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V280) -> (('un--desugarTree'(V0, V1, V2, V4, V3, V5, V6, V280))(V271)) end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E156, E157, E158, E159)); {'Idris.Idris.Syntax.PPrefixOp', E164, E165, E166} -> (fun (V281, V282, V283) -> fun (V284) -> begin (V285 = (('un--toTokList'(V0, {'Idris.Idris.Syntax.PPrefixOp', V281, V282, V283}))(V284))), case V285 of {'Idris.Prelude.Types.Left', E167} -> (fun (V286) -> {'Idris.Prelude.Types.Left', V286} end(E167)); {'Idris.Prelude.Types.Right', E168} -> (fun (V287) -> begin (V291 = ('Idris.Idris2.Libraries.Utils.Shunting':'un--parseOps'('erased', 'erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V288) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V288)) end, fun (V289) -> fun (V290) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V289, V290)) end end}, V287, V284))), case V291 of {'Idris.Prelude.Types.Left', E169} -> (fun (V292) -> {'Idris.Prelude.Types.Left', V292} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V293) -> (('un--desugarTree'(V0, V1, V2, V4, V3, V5, V6, V293))(V284)) end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E164, E165, E166)); {'Idris.Idris.Syntax.PSectionL', E171, E172, E173} -> (fun (V294, V295, V296) -> fun (V297) -> begin (V299 = begin (V298 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V298} end), case V299 of {'Idris.Prelude.Types.Left', E174} -> (fun (V300) -> {'Idris.Prelude.Types.Left', V300} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V301) -> (('case--desugarB-5169'(V296, V295, V294, V6, V5, V4, V3, V2, V1, V0, V301, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', ('Idris.Idris2.Core.Name':'un--nameRoot'(V295)), case V301 of {'Idris.Idris.Syntax.MkSyntax', E176, E177, E178, E179, E180, E181, E182, E183, E184} -> (fun (V302, V303, V304, V305, V306, V307, V308, V309, V310) -> V303 end(E176, E177, E178, E179, E180, E181, E182, E183, E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V297)) end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E171, E172, E173)); {'Idris.Idris.Syntax.PSectionR', E185, E186, E187} -> (fun (V311, V312, V313) -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, {'Idris.Idris.Syntax.PLam', V311, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PRef', V311, {'Idris.Core.Name.MN', <<"arg"/utf8>>, 0}}, {'Idris.Idris.Syntax.PImplicit', V311}, {'Idris.Idris.Syntax.POp', V311, V313, V312, {'Idris.Idris.Syntax.PRef', V311, {'Idris.Core.Name.MN', <<"arg"/utf8>>, 0}}}})) end(E185, E186, E187)); {'Idris.Idris.Syntax.PSearch', E188, E189} -> (fun (V314, V315) -> fun (V316) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ISearch', V314, V315}} end end(E188, E189)); {'Idris.Idris.Syntax.PPrimVal', E190, E191} -> (fun (V317, V318) -> case V318 of {'Idris.Core.TT.BI', E192} -> (fun (V319) -> fun (V320) -> begin (V321 = ('Idris.Idris2.Core.Context':'un--fromIntegerName'(V2, V320))), case V321 of {'Idris.Prelude.Types.Left', E193} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V323) -> case V323 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V317, {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IPrimVal', V317, {'Idris.Core.TT.BI', V319}}}, [{'Idris.TTImp.TTImp.IPrimVal', V317, {'Idris.Core.TT.BI', V319}} | [{'Idris.TTImp.TTImp.IPrimVal', V317, {'Idris.Core.TT.I', V319}} | []]]}} end()); {'Idris.Prelude.Types.Just', E195} -> (fun (V324) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V317, {'Idris.TTImp.TTImp.IVar', V317, V324}, {'Idris.TTImp.TTImp.IPrimVal', V317, {'Idris.Core.TT.BI', V319}}}} end(E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E192)); {'Idris.Core.TT.Ch', E196} -> (fun (V325) -> fun (V326) -> begin (V327 = ('Idris.Idris2.Core.Context':'un--fromCharName'(V2, V326))), case V327 of {'Idris.Prelude.Types.Left', E197} -> (fun (V328) -> {'Idris.Prelude.Types.Left', V328} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V329) -> case V329 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPrimVal', V317, {'Idris.Core.TT.Ch', V325}}} end()); {'Idris.Prelude.Types.Just', E199} -> (fun (V330) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V317, {'Idris.TTImp.TTImp.IVar', V317, V330}, {'Idris.TTImp.TTImp.IPrimVal', V317, {'Idris.Core.TT.Ch', V325}}}} end(E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E196)); {'Idris.Core.TT.Db', E200} -> (fun (V331) -> fun (V332) -> begin (V333 = ('Idris.Idris2.Core.Context':'un--fromDoubleName'(V2, V332))), case V333 of {'Idris.Prelude.Types.Left', E201} -> (fun (V334) -> {'Idris.Prelude.Types.Left', V334} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V335) -> case V335 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPrimVal', V317, {'Idris.Core.TT.Db', V331}}} end()); {'Idris.Prelude.Types.Just', E203} -> (fun (V336) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V317, {'Idris.TTImp.TTImp.IVar', V317, V336}, {'Idris.TTImp.TTImp.IPrimVal', V317, {'Idris.Core.TT.Db', V331}}}} end(E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E200)); _ -> fun (V337) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IPrimVal', V317, V318}} end end end(E190, E191)); {'Idris.Idris.Syntax.PQuote', E204, E205} -> (fun (V338, V339) -> fun (V340) -> begin (V341 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V339))(V340))), case V341 of {'Idris.Prelude.Types.Left', E206} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V343) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IQuote', V338, V343}} end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E204, E205)); {'Idris.Idris.Syntax.PQuoteName', E208, E209} -> (fun (V344, V345) -> fun (V346) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IQuoteName', V344, V345}} end end(E208, E209)); {'Idris.Idris.Syntax.PQuoteDecl', E210, E211} -> (fun (V347, V348) -> fun (V349) -> begin (V351 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V350) -> ('un--desugarDecl'(V0, V2, V4, V3, V6, V350)) end, V348, []))(V349))), case V351 of {'Idris.Prelude.Types.Left', E212} -> (fun (V352) -> {'Idris.Prelude.Types.Left', V352} end(E212)); {'Idris.Prelude.Types.Right', E213} -> (fun (V353) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IQuoteDecl', V347, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V354) -> fun (V355) -> fun (V356) -> fun (V357) -> fun (V358) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V356, V357, V358)) end end end end end, fun (V359) -> fun (V360) -> fun (V361) -> fun (V362) -> fun (V363) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V361, V362, V363)) end end end end end, fun (V364) -> fun (V365) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V365)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V366) -> fun (V367) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V366, V367)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V353))}} end(E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E210, E211)); {'Idris.Idris.Syntax.PUnquote', E214, E215} -> (fun (V368, V369) -> fun (V370) -> begin (V371 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V369))(V370))), case V371 of {'Idris.Prelude.Types.Left', E216} -> (fun (V372) -> {'Idris.Prelude.Types.Left', V372} end(E216)); {'Idris.Prelude.Types.Right', E217} -> (fun (V373) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IUnquote', V368, V373}} end(E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E214, E215)); {'Idris.Idris.Syntax.PRunElab', E218, E219} -> (fun (V374, V375) -> fun (V376) -> begin (V377 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V375))(V376))), case V377 of {'Idris.Prelude.Types.Left', E220} -> (fun (V378) -> {'Idris.Prelude.Types.Left', V378} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V379) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IRunElab', V374, V379}} end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E218, E219)); {'Idris.Idris.Syntax.PHole', E222, E223, E224} -> (fun (V380, V381, V382) -> fun (V383) -> begin (V398 = case V381 of 0 -> begin (V385 = begin (V384 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V384} end), case V385 of {'Idris.Prelude.Types.Left', E225} -> (fun (V386) -> {'Idris.Prelude.Types.Left', V386} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V387) -> begin (V397 = ('erlang':'put'(V0, case V387 of {'Idris.Idris.Syntax.MkSyntax', E227, E228, E229, E230, E231, E232, E233, E234, E235} -> (fun (V388, V389, V390, V391, V392, V393, V394, V395, V396) -> {'Idris.Idris.Syntax.MkSyntax', V388, V389, V390, V391, V392, V393, [{'Idris.Core.Name.UN', V382} | V394], V395, V396} end(E227, E228, E229, E230, E231, E232, E233, E234, E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V397} end end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V398 of {'Idris.Prelude.Types.Left', E236} -> (fun (V399) -> {'Idris.Prelude.Types.Left', V399} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V400) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IHole', V380, V382}} end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E222, E223, E224)); {'Idris.Idris.Syntax.PType', E238} -> (fun (V401) -> fun (V402) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IType', V401}} end end(E238)); {'Idris.Idris.Syntax.PAs', E239, E240, E241, E242} -> (fun (V403, V404, V405, V406) -> fun (V407) -> begin (V408 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V406))(V407))), case V408 of {'Idris.Prelude.Types.Left', E243} -> (fun (V409) -> {'Idris.Prelude.Types.Left', V409} end(E243)); {'Idris.Prelude.Types.Right', E244} -> (fun (V410) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAs', V403, V404, {'Idris.Core.TT.UseRight'}, V405, V410}} end(E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E239, E240, E241, E242)); {'Idris.Idris.Syntax.PDotted', E245, E246} -> (fun (V411, V412) -> fun (V413) -> begin (V414 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V412))(V413))), case V414 of {'Idris.Prelude.Types.Left', E247} -> (fun (V415) -> {'Idris.Prelude.Types.Left', V415} end(E247)); {'Idris.Prelude.Types.Right', E248} -> (fun (V416) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IMustUnify', V411, {'Idris.Core.Core.UserDotted'}, V416}} end(E248)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E245, E246)); {'Idris.Idris.Syntax.PImplicit', E249} -> (fun (V417) -> fun (V418) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', V417, 0}} end end(E249)); {'Idris.Idris.Syntax.PInfer', E250} -> (fun (V419) -> fun (V420) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', V419, 1}} end end(E250)); {'Idris.Idris.Syntax.PMultiline', E251, E252, E253} -> (fun (V421, V422, V423) -> fun (V424) -> begin (V425 = (('un--trimMultiline'(V421, V422, V423))(V424))), case V425 of {'Idris.Prelude.Types.Left', E254} -> (fun (V426) -> {'Idris.Prelude.Types.Left', V426} end(E254)); {'Idris.Prelude.Types.Right', E255} -> (fun (V427) -> begin (V428 = ('un--expandString'(V0, V1, V2, V3, V4, V5, V6, V421, V427, V424))), case V428 of {'Idris.Prelude.Types.Left', E256} -> (fun (V429) -> {'Idris.Prelude.Types.Left', V429} end(E256)); {'Idris.Prelude.Types.Right', E257} -> (fun (V430) -> ('un--addFromString'(V2, V421, V430, V424)) end(E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E255)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E251, E252, E253)); {'Idris.Idris.Syntax.PString', E258, E259} -> (fun (V431, V432) -> fun (V433) -> begin (V434 = ('un--expandString'(V0, V1, V2, V3, V4, V5, V6, V431, V432, V433))), case V434 of {'Idris.Prelude.Types.Left', E260} -> (fun (V435) -> {'Idris.Prelude.Types.Left', V435} end(E260)); {'Idris.Prelude.Types.Right', E261} -> (fun (V436) -> ('un--addFromString'(V2, V431, V436, V433)) end(E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E258, E259)); {'Idris.Idris.Syntax.PDoBlock', E262, E263, E264} -> (fun (V437, V438, V439) -> ('un--expandDo'(V0, V2, V4, V3, V5, V6, V437, V438, V439)) end(E262, E263, E264)); {'Idris.Idris.Syntax.PBang', E265, E266} -> (fun (V440, V441) -> fun (V442) -> begin (V443 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V441))(V442))), case V443 of {'Idris.Prelude.Types.Left', E267} -> (fun (V444) -> {'Idris.Prelude.Types.Left', V444} end(E267)); {'Idris.Prelude.Types.Right', E268} -> (fun (V445) -> begin (V447 = begin (V446 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V446} end), case V447 of {'Idris.Prelude.Types.Left', E269} -> (fun (V448) -> {'Idris.Prelude.Types.Left', V448} end(E269)); {'Idris.Prelude.Types.Right', E270} -> (fun (V449) -> begin (V452 = {'Idris.Core.Name.MN', <<"bind"/utf8>>, case V449 of {'Idris.Idris.Desugar.MkBangData', E271, E272} -> (fun (V450, V451) -> V450 end(E271, E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V456 = begin (V455 = ('erlang':'put'(V1, case V449 of {'Idris.Idris.Desugar.MkBangData', E273, E274} -> (fun (V453, V454) -> {'Idris.Idris.Desugar.MkBangData', ((V453 + 1) rem 9223372036854775808), [{'Idris.Builtin.MkPair', V452, {'Idris.Builtin.MkPair', V440, V445}} | V454]} end(E273, E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V455} end), case V456 of {'Idris.Prelude.Types.Left', E275} -> (fun (V457) -> {'Idris.Prelude.Types.Left', V457} end(E275)); {'Idris.Prelude.Types.Right', E276} -> (fun (V458) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V452}} end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E270)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E268)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E265, E266)); {'Idris.Idris.Syntax.PIdiom', E277, E278} -> (fun (V459, V460) -> fun (V461) -> begin (V462 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V460))(V461))), case V462 of {'Idris.Prelude.Types.Left', E279} -> (fun (V463) -> {'Idris.Prelude.Types.Left', V463} end(E279)); {'Idris.Prelude.Types.Right', E280} -> (fun (V464) -> begin (V465 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V2, <<"desugar.idiom"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Desugaring idiom for"/utf8>> end, V464, V461))), case V465 of {'Idris.Prelude.Types.Left', E281} -> (fun (V466) -> {'Idris.Prelude.Types.Left', V466} end(E281)); {'Idris.Prelude.Types.Right', E282} -> (fun (V467) -> begin (V468 = ('un--idiomise'(V459, V464))), begin (V469 = ('Idris.Idris2.TTImp.TTImp':'un--logRaw'(V2, <<"desugar.idiom"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Desugared to"/utf8>> end, V468, V461))), case V469 of {'Idris.Prelude.Types.Left', E283} -> (fun (V470) -> {'Idris.Prelude.Types.Left', V470} end(E283)); {'Idris.Prelude.Types.Right', E284} -> (fun (V471) -> {'Idris.Prelude.Types.Right', V468} end(E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E282)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E280)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E277, E278)); {'Idris.Idris.Syntax.PList', E285, E286} -> (fun (V472, V473) -> ('un--expandList'(V0, V1, V2, V4, V3, V5, V6, V472, V473)) end(E285, E286)); {'Idris.Idris.Syntax.PPair', E287, E288, E289} -> (fun (V474, V475, V476) -> fun (V477) -> begin (V478 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V475))(V477))), case V478 of {'Idris.Prelude.Types.Left', E290} -> (fun (V479) -> {'Idris.Prelude.Types.Left', V479} end(E290)); {'Idris.Prelude.Types.Right', E291} -> (fun (V480) -> begin (V481 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V476))(V477))), case V481 of {'Idris.Prelude.Types.Left', E292} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E292)); {'Idris.Prelude.Types.Right', E293} -> (fun (V483) -> begin (V484 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V474, ('un--mkpairname'())}, [V480 | [V483 | []]]))), {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V474, {'Idris.TTImp.TTImp.UniqueDefault', V484}, [('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V474, ('un--pairname'())}, [V480 | [V483 | []]])) | [V484 | []]]}} end end(E293)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E291)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E287, E288, E289)); {'Idris.Idris.Syntax.PDPair', E294, E295, E296, E297} -> (fun (V485, V486, V487, V488) -> case V486 of {'Idris.Idris.Syntax.PRef', E303, E304} -> (fun (V489, V490) -> case V490 of {'Idris.Core.Name.UN', E310} -> (fun (V491) -> case V487 of {'Idris.Idris.Syntax.PImplicit', E315} -> (fun (V492) -> fun (V493) -> begin (V494 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V488))(V493))), case V494 of {'Idris.Prelude.Types.Left', E316} -> (fun (V495) -> {'Idris.Prelude.Types.Left', V495} end(E316)); {'Idris.Prelude.Types.Right', E317} -> (fun (V496) -> begin (V497 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V485, ('un--mkdpairname'())}, [{'Idris.TTImp.TTImp.IVar', V489, {'Idris.Core.Name.UN', V491}} | [V496 | []]]))), {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V485, {'Idris.TTImp.TTImp.UniqueDefault', V497}, [('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V485, ('un--dpairname'())}, [{'Idris.TTImp.TTImp.Implicit', V489, 1} | [{'Idris.TTImp.TTImp.ILam', V489, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', V491}}, {'Idris.TTImp.TTImp.Implicit', V489, 1}, V496} | []]])) | [V497 | []]]}} end end(E317)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E315)); _ -> fun (V498) -> begin (V499 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V487))(V498))), case V499 of {'Idris.Prelude.Types.Left', E311} -> (fun (V500) -> {'Idris.Prelude.Types.Left', V500} end(E311)); {'Idris.Prelude.Types.Right', E312} -> (fun (V501) -> begin (V502 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V488))(V498))), case V502 of {'Idris.Prelude.Types.Left', E313} -> (fun (V503) -> {'Idris.Prelude.Types.Left', V503} end(E313)); {'Idris.Prelude.Types.Right', E314} -> (fun (V504) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V485, ('un--dpairname'())}, [V501 | [{'Idris.TTImp.TTImp.ILam', V489, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', V491}}, V501, V504} | []]]))} end(E314)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E312)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E310)); _ -> case V487 of {'Idris.Idris.Syntax.PImplicit', E305} -> (fun (V505) -> fun (V506) -> begin (V507 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V486))(V506))), case V507 of {'Idris.Prelude.Types.Left', E306} -> (fun (V508) -> {'Idris.Prelude.Types.Left', V508} end(E306)); {'Idris.Prelude.Types.Right', E307} -> (fun (V509) -> begin (V510 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V488))(V506))), case V510 of {'Idris.Prelude.Types.Left', E308} -> (fun (V511) -> {'Idris.Prelude.Types.Left', V511} end(E308)); {'Idris.Prelude.Types.Right', E309} -> (fun (V512) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V485, ('un--mkdpairname'())}, [V509 | [V512 | []]]))} end(E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E307)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E305)); _ -> fun (V513) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V485, <<"Invalid dependent pair type"/utf8>>}, V513)) end end end end(E303, E304)); _ -> case V487 of {'Idris.Idris.Syntax.PImplicit', E298} -> (fun (V514) -> fun (V515) -> begin (V516 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V486))(V515))), case V516 of {'Idris.Prelude.Types.Left', E299} -> (fun (V517) -> {'Idris.Prelude.Types.Left', V517} end(E299)); {'Idris.Prelude.Types.Right', E300} -> (fun (V518) -> begin (V519 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V488))(V515))), case V519 of {'Idris.Prelude.Types.Left', E301} -> (fun (V520) -> {'Idris.Prelude.Types.Left', V520} end(E301)); {'Idris.Prelude.Types.Right', E302} -> (fun (V521) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V485, ('un--mkdpairname'())}, [V518 | [V521 | []]]))} end(E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E300)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E298)); _ -> fun (V522) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V485, <<"Invalid dependent pair type"/utf8>>}, V522)) end end end end(E294, E295, E296, E297)); {'Idris.Idris.Syntax.PUnit', E318} -> (fun (V523) -> fun (V524) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAlternative', V523, {'Idris.TTImp.TTImp.UniqueDefault', {'Idris.TTImp.TTImp.IVar', V523, {'Idris.Core.Name.UN', <<"MkUnit"/utf8>>}}}, [{'Idris.TTImp.TTImp.IVar', V523, {'Idris.Core.Name.UN', <<"Unit"/utf8>>}} | [{'Idris.TTImp.TTImp.IVar', V523, {'Idris.Core.Name.UN', <<"MkUnit"/utf8>>}} | []]]}} end end(E318)); {'Idris.Idris.Syntax.PIfThenElse', E319, E320, E321, E322} -> (fun (V525, V526, V527, V528) -> fun (V529) -> begin (V530 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V526))(V529))), case V530 of {'Idris.Prelude.Types.Left', E323} -> (fun (V531) -> {'Idris.Prelude.Types.Left', V531} end(E323)); {'Idris.Prelude.Types.Right', E324} -> (fun (V532) -> begin (V533 = ('un--desugar'(V0, V2, V3, V4, V5, V6, V527, V529))), case V533 of {'Idris.Prelude.Types.Left', E325} -> (fun (V534) -> {'Idris.Prelude.Types.Left', V534} end(E325)); {'Idris.Prelude.Types.Right', E326} -> (fun (V535) -> begin (V536 = ('un--desugar'(V0, V2, V3, V4, V5, V6, V528, V529))), case V536 of {'Idris.Prelude.Types.Left', E327} -> (fun (V537) -> {'Idris.Prelude.Types.Left', V537} end(E327)); {'Idris.Prelude.Types.Right', E328} -> (fun (V538) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICase', V525, V532, {'Idris.TTImp.TTImp.IVar', V525, {'Idris.Core.Name.UN', <<"Bool"/utf8>>}}, [{'Idris.TTImp.TTImp.PatClause', V525, {'Idris.TTImp.TTImp.IVar', V525, {'Idris.Core.Name.UN', <<"True"/utf8>>}}, V535} | [{'Idris.TTImp.TTImp.PatClause', V525, {'Idris.TTImp.TTImp.IVar', V525, {'Idris.Core.Name.UN', <<"False"/utf8>>}}, V538} | []]]}} end(E328)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E326)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E324)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E319, E320, E321, E322)); {'Idris.Idris.Syntax.PComprehension', E329, E330, E331} -> (fun (V539, V540, V541) -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, {'Idris.Idris.Syntax.PDoBlock', V539, {'Idris.Prelude.Types.Nothing'}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V542) -> ('nested--15866-5983--in--un--guard'(V541, V540, V539, V6, V5, V4, V3, V2, V1, V0, V542)) end, V541)), [('nested--15866-5984--in--un--toPure'(V541, V540, V539, V6, V5, V4, V3, V2, V1, V0, V540)) | []]))})) end(E329, E330, E331)); {'Idris.Idris.Syntax.PRewrite', E332, E333, E334} -> (fun (V543, V544, V545) -> fun (V546) -> begin (V547 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V544))(V546))), case V547 of {'Idris.Prelude.Types.Left', E335} -> (fun (V548) -> {'Idris.Prelude.Types.Left', V548} end(E335)); {'Idris.Prelude.Types.Right', E336} -> (fun (V549) -> begin (V550 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V545))(V546))), case V550 of {'Idris.Prelude.Types.Left', E337} -> (fun (V551) -> {'Idris.Prelude.Types.Left', V551} end(E337)); {'Idris.Prelude.Types.Right', E338} -> (fun (V552) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IRewrite', V543, V549, V552}} end(E338)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E336)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E332, E333, E334)); {'Idris.Idris.Syntax.PRange', E339, E340, E341, E342} -> (fun (V553, V554, V555, V556) -> case V555 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, {'Idris.Idris.Syntax.PApp', V553, {'Idris.Idris.Syntax.PApp', V553, {'Idris.Idris.Syntax.PRef', V553, {'Idris.Core.Name.UN', <<"rangeFromTo"/utf8>>}}, V554}, V556})) end()); {'Idris.Prelude.Types.Just', E343} -> (fun (V557) -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, {'Idris.Idris.Syntax.PApp', V553, {'Idris.Idris.Syntax.PApp', V553, {'Idris.Idris.Syntax.PApp', V553, {'Idris.Idris.Syntax.PRef', V553, {'Idris.Core.Name.UN', <<"rangeFromThenTo"/utf8>>}}, V554}, V557}, V556})) end(E343)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E339, E340, E341, E342)); {'Idris.Idris.Syntax.PRangeStream', E344, E345, E346} -> (fun (V558, V559, V560) -> case V560 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, {'Idris.Idris.Syntax.PApp', V558, {'Idris.Idris.Syntax.PRef', V558, {'Idris.Core.Name.UN', <<"rangeFrom"/utf8>>}}, V559})) end()); {'Idris.Prelude.Types.Just', E347} -> (fun (V561) -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, {'Idris.Idris.Syntax.PApp', V558, {'Idris.Idris.Syntax.PApp', V558, {'Idris.Idris.Syntax.PRef', V558, {'Idris.Core.Name.UN', <<"rangeFromThen"/utf8>>}}, V559}, V561})) end(E347)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E344, E345, E346)); {'Idris.Idris.Syntax.PUnifyLog', E348, E349, E350} -> (fun (V562, V563, V564) -> fun (V565) -> begin (V566 = (('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V564))(V565))), case V566 of {'Idris.Prelude.Types.Left', E351} -> (fun (V567) -> {'Idris.Prelude.Types.Left', V567} end(E351)); {'Idris.Prelude.Types.Right', E352} -> (fun (V568) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IUnifyLog', V562, V563, V568}} end(E352)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E348, E349, E350)); {'Idris.Idris.Syntax.PPostfixApp', E353, E354, E355} -> (fun (V569, V570, V571) -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V572) -> fun (V573) -> {'Idris.Idris.Syntax.PApp', V569, {'Idris.Idris.Syntax.PRef', V569, V573}, V572} end end, V570, V571)))) end(E353, E354, E355)); {'Idris.Idris.Syntax.PPostfixAppPartial', E356, E357} -> (fun (V574, V575) -> ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, {'Idris.Idris.Syntax.PLam', V574, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Idris.Syntax.PRef', V574, {'Idris.Core.Name.MN', <<"paRoot"/utf8>>, 0}}, {'Idris.Idris.Syntax.PImplicit', V574}, ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V576) -> fun (V577) -> {'Idris.Idris.Syntax.PApp', V574, {'Idris.Idris.Syntax.PRef', V574, V577}, V576} end end, {'Idris.Idris.Syntax.PRef', V574, {'Idris.Core.Name.MN', <<"paRoot"/utf8>>, 0}}, V575))})) end(E356, E357)); {'Idris.Idris.Syntax.PWithUnambigNames', E358, E359, E360} -> (fun (V578, V579, V580) -> fun (V581) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V582) -> case V582 of {'Idris.Prelude.Types.Left', E361} -> (fun (V583) -> {'Idris.Prelude.Types.Left', V583} end(E361)); {'Idris.Prelude.Types.Right', E362} -> (fun (V584) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IWithUnambigNames', V578, V579, V584}} end(E362)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--desugarB'(V0, V1, V2, V3, V4, V5, V6, V580)), V581)) end end(E358, E359, E360)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--desugar'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Desugar.Bang'}, ('un--initBangs'()), V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('un--desugarB'(V0, V10, V1, V2, V3, V4, V5, V6))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V10))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Right', ('un--bindBangs'(case V17 of {'Idris.Idris.Desugar.MkBangData', E6, E7} -> (fun (V18, V19) -> V19 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindBangs'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> ('un--bindBangs'(V3, {'Idris.TTImp.TTImp.IApp', V6, {'Idris.TTImp.TTImp.IApp', V6, {'Idris.TTImp.TTImp.IVar', V6, {'Idris.Core.Name.UN', <<">>="/utf8>>}}, V7}, {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V4}, {'Idris.TTImp.TTImp.Implicit', V6, 1}, V1}})) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addNS'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case V1 of {'Idris.Core.Name.NS', E1, E2} -> (fun (V3, V4) -> V1 end(E1, E2)); _ -> {'Idris.Core.Name.NS', V2, V1} end end(E0)); _ -> V1 end.
'un--addFromString'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--fromStringName'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V2 end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> {'Idris.TTImp.TTImp.IApp', V1, {'Idris.TTImp.TTImp.IVar', V1, V7}, V2} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
