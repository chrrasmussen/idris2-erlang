-module('Idris.Idris2.TTImp.Elab.As').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in checkAs-5460'/28,
  'case--case block in case block in case block in case block in checkAs-5352'/29,
  'case--case block in case block in case block in checkAs-5197'/23,
  'case--case block in case block in checkAs-5142'/20,
  'case--case block in checkAs-5088'/20,
  'case--checkAs-5028'/16,
  'case--checkAs,rigAs\x{27}-4959'/16,
  'case--checkAs,rigAs\x{27}-4884'/16,
  'case--checkAs,rigPat\x{27}-4808'/16,
  'case--checkAs,rigPat\x{27}-4733'/16,
  'nested--11427-4718--in--un--rigPat\x{27}'/16,
  'nested--11427-4719--in--un--rigPat'/15,
  'nested--11427-4720--in--un--rigAs\x{27}'/16,
  'nested--11427-4721--in--un--rigAs'/15,
  'un--checkAs'/15
]).
'case--case block in case block in case block in case block in checkAs-5460'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of {'Idris.TTImp.Elab.Check.MkEState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.TTImp.Elab.Check.MkEState', V28, V29, V30, V31, begin (V41 = V0), [{'Idris.Builtin.MkPair', V18, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--11427-4721--in--un--rigAs'(V41, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Core.TT.Explicit'}, V22, V23, V19}} | V32] end, begin (V42 = V0), [{'Idris.Builtin.MkPair', V18, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--11427-4721--in--un--rigAs'(V42, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Core.TT.Explicit'}, V22, V24, V19}} | V33] end, V34, V35, V36, V37, V38, V39, V40} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in checkAs-5352'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V29, V30) -> fun (V31) -> begin (V32 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"checkAs is adding \x{2193}"/utf8>> end))(V31))), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> begin (V38 = begin (V35 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V30))(V31))), case V35 of {'Idris.Prelude.Types.Left', E4} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V37) -> ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V14, V13, V5, V3, V7, V37, V31)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V38 of {'Idris.Prelude.Types.Left', E6} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V6, V4, V29, V19}, V20}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkAs-5197'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V25, V26) -> fun (V27) -> begin (V118 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.as"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Added as pattern name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V28)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V29, V30)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V31) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V33, V34)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V35) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V36)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V37, V38)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V40) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V41, V42)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V43) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V44, V45)) end end}}, V39)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V49, V50)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V52, V53)) end end}}, V46, V47)) end end}}, V35)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V56) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V57, V58)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V59) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V60) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V61, V62)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V63) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V64, V65)) end end}}, V59)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V69, V70)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V72, V73)) end end}}, V66, V67)) end end}}, V54, V55)) end end}}, V31)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V76) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V77, V78)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V81, V82)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V83) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V84) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V84)) end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V85, V86)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V87) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V87)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V88, V89)) end end}}, V83)) end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V92) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V93, V94)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V96, V97)) end end}}, V90, V91)) end end}}, V79)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V100) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V101, V102)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V103) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V104) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V105, V106)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V107) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V107)) end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V108, V109)) end end}}, V103)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V112) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V113, V114)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V116, V117)) end end}}, V110, V111)) end end}}, V98, V99)) end end}}, V74, V75)) end end}}, {'Idris.Builtin.MkPair', V18, {'Idris.Builtin.MkPair', ('nested--11427-4721--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Builtin.MkPair', V23, {'Idris.Builtin.MkPair', V25, V26}}}})))) end))(V27))), case V118 of {'Idris.Prelude.Types.Left', E4} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V120) -> begin (V122 = begin (V121 = ('erlang':'get'(V14))), {'Idris.Prelude.Types.Right', V121} end), case V122 of {'Idris.Prelude.Types.Left', E6} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V124) -> begin (V126 = begin (V125 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V125} end), case V126 of {'Idris.Prelude.Types.Left', E8} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V128) -> begin (V145 = begin (V144 = ('erlang':'put'(V11, case V128 of {'Idris.TTImp.Elab.Check.MkEState', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141) -> {'Idris.TTImp.Elab.Check.MkEState', V129, V130, V131, V132, begin (V142 = V0), [{'Idris.Builtin.MkPair', V18, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--11427-4721--in--un--rigAs'(V142, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Core.TT.Explicit'}, V23, V25, V19}} | V133] end, begin (V143 = V0), [{'Idris.Builtin.MkPair', V18, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--11427-4721--in--un--rigAs'(V143, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Core.TT.Explicit'}, V23, V26, V19}} | V134] end, V135, V136, V137, V138, V139, V140, V141} end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V144} end), case V145 of {'Idris.Prelude.Types.Left', E23} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V147) -> begin (V148 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V14, V12, V11, V10, V9, V7, V5, V23, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V7, V25)), {'Idris.Prelude.Types.Just', V20}))(V27))), case V148 of {'Idris.Prelude.Types.Left', E25} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V150) -> case V150 of {'Idris.Builtin.MkPair', E27, E28} -> (fun (V151, V152) -> begin (V153 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"checkAs is adding \x{2193}"/utf8>> end))(V27))), case V153 of {'Idris.Prelude.Types.Left', E29} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V155) -> begin (V159 = begin (V156 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V152))(V27))), case V156 of {'Idris.Prelude.Types.Left', E31} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V158) -> ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V14, V13, V5, V3, V7, V158, V27)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V159 of {'Idris.Prelude.Types.Left', E33} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V161) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V6, V4, V151, V19}, V20}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in checkAs-5142'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> fun (V22) -> begin (V29 = (('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--mkPatternHole'(V0, V11, V14, V12, V5, V10, V18, V7, case V9 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V23, V24, V25, V26, V27, V28) -> V24 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V22))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> case V31 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V32, V33) -> case V33 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V34, V35) -> begin (V126 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.as"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Added as pattern name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V37, V38)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V41, V42)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V43) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V44) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V44)) end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V45, V46)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V49, V50)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V52, V53)) end end}}, V47)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V56) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V57, V58)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V59) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V60, V61)) end end}}, V54, V55)) end end}}, V43)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V64) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V65, V66)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V67) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V68) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V69, V70)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V72, V73)) end end}}, V67)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V76) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V77, V78)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V80, V81)) end end}}, V74, V75)) end end}}, V62, V63)) end end}}, V39)) end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V84) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V84)) end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V85, V86)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V87) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V88) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V89, V90)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V92) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V93, V94)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V96, V97)) end end}}, V91)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V100) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V100)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V101, V102)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V103) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V104, V105)) end end}}, V98, V99)) end end}}, V87)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V108) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V109, V110)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V111) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V112) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V113, V114)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V116, V117)) end end}}, V111)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V120) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V121, V122)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V123) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V123)) end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V124, V125)) end end}}, V118, V119)) end end}}, V106, V107)) end end}}, V82, V83)) end end}}, {'Idris.Builtin.MkPair', V18, {'Idris.Builtin.MkPair', ('nested--11427-4721--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Builtin.MkPair', V32, {'Idris.Builtin.MkPair', V34, V35}}}})))) end))(V22))), case V126 of {'Idris.Prelude.Types.Left', E14} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V128) -> begin (V130 = begin (V129 = ('erlang':'get'(V14))), {'Idris.Prelude.Types.Right', V129} end), case V130 of {'Idris.Prelude.Types.Left', E16} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V132) -> begin (V134 = begin (V133 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V133} end), case V134 of {'Idris.Prelude.Types.Left', E18} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V136) -> begin (V153 = begin (V152 = ('erlang':'put'(V11, case V136 of {'Idris.TTImp.Elab.Check.MkEState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149) -> {'Idris.TTImp.Elab.Check.MkEState', V137, V138, V139, V140, begin (V150 = V0), [{'Idris.Builtin.MkPair', V18, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--11427-4721--in--un--rigAs'(V150, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Core.TT.Explicit'}, V32, V34, V20}} | V141] end, begin (V151 = V0), [{'Idris.Builtin.MkPair', V18, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--11427-4721--in--un--rigAs'(V151, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Core.TT.Explicit'}, V32, V35, V20}} | V142] end, V143, V144, V145, V146, V147, V148, V149} end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V152} end), case V153 of {'Idris.Prelude.Types.Left', E33} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V155) -> begin (V156 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V14, V12, V11, V10, V9, V7, V5, V32, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V7, V34)), {'Idris.Prelude.Types.Just', V21}))(V22))), case V156 of {'Idris.Prelude.Types.Left', E35} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V158) -> case V158 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V159, V160) -> begin (V161 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"checkAs is adding \x{2193}"/utf8>> end))(V22))), case V161 of {'Idris.Prelude.Types.Left', E39} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V163) -> begin (V167 = begin (V164 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V160))(V22))), case V164 of {'Idris.Prelude.Types.Left', E41} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V166) -> ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V14, V13, V5, V3, V7, V166, V22)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V167 of {'Idris.Prelude.Types.Left', E43} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V169) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V6, V4, V159, V20}, V21}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkAs-5088'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> begin (V21 = (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V14, V13, V12, V11, ('nested--11427-4719--in--un--rigPat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V9, V8, V7, V2, V1))(V20))), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> begin (V32 = (('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--mkPatternHole'(V0, V11, V14, V12, V5, V10, V18, V7, case V9 of {'Idris.TTImp.Elab.Check.MkElabInfo', E4, E5, E6, E7, E8, E9} -> (fun (V26, V27, V28, V29, V30, V31) -> V27 end(E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V20))), case V32 of {'Idris.Prelude.Types.Left', E10} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V35, V36) -> case V36 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V37, V38) -> begin (V129 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.as"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Added as pattern name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V40, V41)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V43) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V43)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V44, V45)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V46) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V48, V49)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V51)) end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V52, V53)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V54) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V55, V56)) end end}}, V50)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V59) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V59)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V60, V61)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V62) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V62)) end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V63, V64)) end end}}, V57, V58)) end end}}, V46)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V67) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V68, V69)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V71) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V72, V73)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V75, V76)) end end}}, V70)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V80, V81)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V82) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V82)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V83, V84)) end end}}, V77, V78)) end end}}, V65, V66)) end end}}, V42)) end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V87)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V88, V89)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V90) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V92, V93)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V94) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V95)) end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V96, V97)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V98) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V98)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V99, V100)) end end}}, V94)) end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V103) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V104, V105)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V106) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V106)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V107, V108)) end end}}, V101, V102)) end end}}, V90)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V111) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V111)) end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V112, V113)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V114) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V115) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V116, V117)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V118) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V119, V120)) end end}}, V114)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V123) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V123)) end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V124, V125)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V126) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V126)) end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V0, V127, V128)) end end}}, V121, V122)) end end}}, V109, V110)) end end}}, V85, V86)) end end}}, {'Idris.Builtin.MkPair', V18, {'Idris.Builtin.MkPair', ('nested--11427-4721--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Builtin.MkPair', V35, {'Idris.Builtin.MkPair', V37, V38}}}})))) end))(V20))), case V129 of {'Idris.Prelude.Types.Left', E16} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V131) -> begin (V133 = begin (V132 = ('erlang':'get'(V14))), {'Idris.Prelude.Types.Right', V132} end), case V133 of {'Idris.Prelude.Types.Left', E18} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V135) -> begin (V137 = begin (V136 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V136} end), case V137 of {'Idris.Prelude.Types.Left', E20} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V139) -> begin (V156 = begin (V155 = ('erlang':'put'(V11, case V139 of {'Idris.TTImp.Elab.Check.MkEState', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> {'Idris.TTImp.Elab.Check.MkEState', V140, V141, V142, V143, begin (V153 = V0), [{'Idris.Builtin.MkPair', V18, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--11427-4721--in--un--rigAs'(V153, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Core.TT.Explicit'}, V35, V37, V24}} | V144] end, begin (V154 = V0), [{'Idris.Builtin.MkPair', V18, {'Idris.TTImp.Elab.Check.AsBinding', V0, ('nested--11427-4721--in--un--rigAs'(V154, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), {'Idris.Core.TT.Explicit'}, V35, V38, V24}} | V145] end, V146, V147, V148, V149, V150, V151, V152} end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V155} end), case V156 of {'Idris.Prelude.Types.Left', E35} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V158) -> begin (V159 = (('Idris.Idris2.TTImp.Elab.Check':'un--checkExp'(V0, V14, V12, V11, V10, V9, V7, V5, V35, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V7, V37)), {'Idris.Prelude.Types.Just', V25}))(V20))), case V159 of {'Idris.Prelude.Types.Left', E37} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V161) -> case V161 of {'Idris.Builtin.MkPair', E39, E40} -> (fun (V162, V163) -> begin (V164 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"metadata.names"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> <<"checkAs is adding \x{2193}"/utf8>> end))(V20))), case V164 of {'Idris.Prelude.Types.Left', E41} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V166) -> begin (V170 = begin (V167 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V163))(V20))), case V167 of {'Idris.Prelude.Types.Left', E43} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V169) -> ('Idris.Idris2.Core.Metadata':'un--addNameType'(V0, V14, V13, V5, V3, V7, V169, V20)) end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V170 of {'Idris.Prelude.Types.Left', E45} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V172) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.Core.TT.As', V6, V4, V162, V24}, V25}} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E47} -> (fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.NonLinearPattern', V6, V3}, V174)) end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAs-5028'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.TTImp.Elab.Check.InLHS', E2} -> (fun (V16) -> fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E3} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V21) -> begin (V35 = {'Idris.Core.Name.PV', V3, case V21 of {'Idris.TTImp.Elab.Check.MkEState', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V23 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V36 = (('Idris.Idris2.TTImp.Elab.Check':'un--noteLHSPatVar'('erased', V11, V15, V3))(V17))), case V36 of {'Idris.Prelude.Types.Left', E18} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.TTImp.Elab.Check':'un--notePatVar'('erased', V11, V35, V17))), case V39 of {'Idris.Prelude.Types.Left', E20} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V41) -> begin (V42 = {'Idris.TTImp.Elab.Check.InLHS', V16}), (('case--case block in checkAs-5088'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V16, V42, V21, V35, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V45, V46)) end end}, V35, case V21 of {'Idris.TTImp.Elab.Check.MkEState', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V51 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V17)) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> fun (V60) -> begin (V61 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.as"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bad @-pattern "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V2)))) end))(V60))), case V61 of {'Idris.Prelude.Types.Left', E0} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V63) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V6, <<"@-patterns only allowed in pattern clauses"/utf8>>}, V60)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--checkAs,rigAs\x{27}-4959'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 1 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAs,rigAs\x{27}-4884'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 1 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAs,rigPat\x{27}-4808'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 1 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkAs,rigPat\x{27}-4733'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 1 -> V10; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11427-4718--in--un--rigPat\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.TT.UseLeft'} -> (fun () -> ('case--checkAs,rigPat\x{27}-4733'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, V10)))) end()); {'Idris.Core.TT.UseRight'} -> (fun () -> ('case--checkAs,rigPat\x{27}-4808'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V26, V27)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V30, V31)) end end}}, V10)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11427-4719--in--un--rigPat'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('nested--11427-4718--in--un--rigPat\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V4)).
'nested--11427-4720--in--un--rigAs\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Core.TT.UseLeft'} -> (fun () -> ('case--checkAs,rigAs\x{27}-4884'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V22, V23)) end end}}, V10)))) end()); {'Idris.Core.TT.UseRight'} -> (fun () -> ('case--checkAs,rigAs\x{27}-4959'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V26) -> fun (V27) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V26, V27)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V30, V31)) end end}}, V10)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11427-4721--in--un--rigAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('nested--11427-4720--in--un--rigAs\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V4)).
'un--checkAs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V21 = case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E0, E1, E2, E3, E4, E5} -> (fun (V15, V16, V17, V18, V19, V20) -> V15 end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V21 of {'Idris.TTImp.Elab.Check.InLHS', E8} -> (fun (V22) -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> begin (V41 = {'Idris.Core.Name.PV', V12, case V27 of {'Idris.TTImp.Elab.Check.MkEState', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V29 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}), begin (V42 = (('Idris.Idris2.TTImp.Elab.Check':'un--noteLHSPatVar'('erased', V4, V21, V12))(V23))), case V42 of {'Idris.Prelude.Types.Left', E24} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V44) -> begin (V45 = ('Idris.Idris2.TTImp.Elab.Check':'un--notePatVar'('erased', V4, V41, V23))), case V45 of {'Idris.Prelude.Types.Left', E26} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V47) -> begin (V48 = {'Idris.TTImp.Elab.Check.InLHS', V22}), (('case--case block in checkAs-5088'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V22, V48, V27, V41, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V51, V52)) end end}, V41, case V27 of {'Idris.TTImp.Elab.Check.MkEState', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V57 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V23)) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> fun (V66) -> begin (V67 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.as"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Bad @-pattern "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V13)))) end))(V66))), case V67 of {'Idris.Prelude.Types.Left', E6} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V69) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V9, <<"@-patterns only allowed in pattern clauses"/utf8>>}, V66)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
