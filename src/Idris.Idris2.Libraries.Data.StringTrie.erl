-module('Idris.Idris2.Libraries.Data.StringTrie').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--foldWithKeysM,go-3459'/11,
  'nested--2397-3334--in--un--rec'/6,
  'nested--2496-3412--in--un--go'/8,
  'nested--2397-3333--in--un--end'/5,
  'dn--un--show_Show_(StringTrie $a)'/3,
  'dn--un--showPrec_Show_(StringTrie $a)'/4,
  'dn--un--map_Functor_StringTrie'/4,
  'dn--un--__Impl_Show_(StringTrie $a)'/2,
  'dn--un--__Impl_Functor_StringTrie'/4,
  'un--singleton'/3,
  'un--insertWith'/4,
  'un--insert'/4,
  'un--foldWithKeysM'/7,
  'un--empty'/1
]).
'case--foldWithKeysM,go-3459'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> begin (V13 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V7, [V11 | []]))), case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E2, E3, E4} -> (fun (V14, V15, V16) -> ((((V15('erased'))('erased'))(('nested--2496-3412--in--un--go'('erased', 'erased', V2, 'erased', V4, V5, V13, V12))))(fun (V17) -> case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E5, E6, E7} -> (fun (V18, V19, V20) -> ((((V19('erased'))('erased'))((V5(V13))))(fun (V21) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E15, E16, E17} -> (fun (V22, V23, V24) -> V22 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E8, E9, E10} -> (fun (V25, V26, V27) -> ((V26('erased'))(case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E11, E12} -> (fun (V28, V29) -> ((V28(case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E13, E14} -> (fun (V30, V31) -> ((V30(V9))(V17)) end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21)) end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--2397-3334--in--un--rec'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V1, ('nested--2397-3333--in--un--end'('erased', V1, V2, V3, V4)), V5)) end, fun () -> fun (V6) -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V1, ('un--insertWith'('erased', V2, V4, V6)), V5)) end end, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', V1, V5)))).
'nested--2496-3412--in--un--go'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V11, V12, V13) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V14) -> ('Idris.Idris2.Data.These':'un--bifold'('erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)), V14)) end, case V7 of {'Idris.Data.These.This', E6} -> (fun (V15) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E10, E11, E12} -> (fun (V16, V17, V18) -> V16 end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E7, E8, E9} -> (fun (V19, V20, V21) -> V19 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V22) -> {'Idris.Data.These.This', V22} end, ((V4(V6))(V15)))) end(E6)); {'Idris.Data.These.That', E13} -> (fun (V23) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E17, E18, E19} -> (fun (V24, V25, V26) -> V24 end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E14, E15, E16} -> (fun (V27, V28, V29) -> V27 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V30) -> {'Idris.Data.These.That', V30} end, (('Idris.Idris2.Prelude.Interfaces':'un--foldlM'('erased', 'erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V42)) end end}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2))}, fun (V43) -> fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V45, V46) -> begin (V47 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V6, [V45 | []]))), case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E22, E23, E24} -> (fun (V48, V49, V50) -> ((((V49('erased'))('erased'))(('nested--2496-3412--in--un--go'('erased', 'erased', V2, 'erased', V4, V5, V47, V46))))(fun (V51) -> case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E25, E26, E27} -> (fun (V52, V53, V54) -> ((((V53('erased'))('erased'))((V5(V47))))(fun (V55) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E35, E36, E37} -> (fun (V56, V57, V58) -> V56 end(E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E28, E29, E30} -> (fun (V59, V60, V61) -> ((V60('erased'))(case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E31, E32} -> (fun (V62, V63) -> ((V62(case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E33, E34} -> (fun (V64, V65) -> ((V64(V43))(V51)) end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V55)) end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E38, E39} -> (fun (V66, V67) -> V67 end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(('Idris.Idris2.Libraries.Data.StringMap':'un--toList'('erased', V23)))))) end(E13)); {'Idris.Data.These.Both', E40, E41} -> (fun (V68, V69) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E77, E78, E79} -> (fun (V70, V71, V72) -> V70 end(E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E42, E43, E44} -> (fun (V73, V74, V75) -> ((((V75('erased'))('erased'))(case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E54, E55, E56} -> (fun (V113, V114, V115) -> V113 end(E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E45, E46, E47} -> (fun (V116, V117, V118) -> ((((V118('erased'))('erased'))(case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E51, E52, E53} -> (fun (V119, V120, V121) -> V119 end(E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E48, E49, E50} -> (fun (V122, V123, V124) -> ((V123('erased'))(fun (V125) -> fun (V126) -> {'Idris.Data.These.Both', V125, V126} end end)) end(E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(((V4(V6))(V68)))) end(E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))((('Idris.Idris2.Prelude.Interfaces':'un--foldlM'('erased', 'erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V78, V79, V80)) end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V83, V84, V85)) end end end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V87)) end end}, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2))}, fun (V88) -> fun (V89) -> case V89 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V90, V91) -> begin (V92 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V6, [V90 | []]))), case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E59, E60, E61} -> (fun (V93, V94, V95) -> ((((V94('erased'))('erased'))(('nested--2496-3412--in--un--go'('erased', 'erased', V2, 'erased', V4, V5, V92, V91))))(fun (V96) -> case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E62, E63, E64} -> (fun (V97, V98, V99) -> ((((V98('erased'))('erased'))((V5(V92))))(fun (V100) -> case case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E72, E73, E74} -> (fun (V101, V102, V103) -> V101 end(E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E65, E66, E67} -> (fun (V104, V105, V106) -> ((V105('erased'))(case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E68, E69} -> (fun (V107, V108) -> ((V107(case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E70, E71} -> (fun (V109, V110) -> ((V109(V88))(V96)) end(E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V100)) end(E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E75, E76} -> (fun (V111, V112) -> V112 end(E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(('Idris.Idris2.Libraries.Data.StringMap':'un--toList'('erased', V69)))))) end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--2397-3333--in--un--end'(V0, V1, V2, V3, V4) -> ('un--singleton'('erased', V2, (V4({'Idris.Prelude.Types.Nothing'})))).
'dn--un--show_Show_(StringTrie $a)'(V0, V1, V2) -> ('Idris.Idris2.Data.These':'dn--un--show_Show_((These $a) $b)'('erased', 'erased', {'Idris.Builtin.MkPair', V1, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--show_Show_(StringMap $v)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V4) -> ('dn--un--show_Show_(StringTrie $a)'('erased', V1, V4)) end, fun (V5) -> fun (V6) -> ('dn--un--showPrec_Show_(StringTrie $a)'('erased', V1, V5, V6)) end end}, V3)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--showPrec_Show_(StringMap $v)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V9) -> ('dn--un--show_Show_(StringTrie $a)'('erased', V1, V9)) end, fun (V10) -> fun (V11) -> ('dn--un--showPrec_Show_(StringTrie $a)'('erased', V1, V10, V11)) end end}, V7, V8)) end end}}, V2)).
'dn--un--showPrec_Show_(StringTrie $a)'(V0, V1, V2, V3) -> ('dn--un--show_Show_(StringTrie $a)'('erased', V1, V3)).
'dn--un--map_Functor_StringTrie'(V0, V1, V2, V3) -> case V3 of {'Idris.Data.These.This', E0} -> (fun (V4) -> {'Idris.Data.These.This', (V2(V4))} end(E0)); {'Idris.Data.These.That', E1} -> (fun (V5) -> {'Idris.Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--map_Functor_StringMap'('erased', 'erased', fun (V6) -> ('dn--un--map_Functor_StringTrie'('erased', 'erased', V2, V6)) end, V5))} end(E1)); {'Idris.Data.These.Both', E2, E3} -> (fun (V7, V8) -> {'Idris.Data.These.Both', (V2(V7)), ('Idris.Idris2.Libraries.Data.StringMap':'dn--un--map_Functor_StringMap'('erased', 'erased', fun (V9) -> ('dn--un--map_Functor_StringTrie'('erased', 'erased', V2, V9)) end, V8))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Show_(StringTrie $a)'(V0, V1) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V2) -> ('dn--un--show_Show_(StringTrie $a)'('erased', V1, V2)) end, fun (V3) -> fun (V4) -> ('dn--un--showPrec_Show_(StringTrie $a)'('erased', V1, V3, V4)) end end}.
'dn--un--__Impl_Functor_StringTrie'(V0, V1, V2, V3) -> ('dn--un--map_Functor_StringTrie'('erased', 'erased', V2, V3)).
'un--singleton'(V0, V1, V2) -> case V1 of [] -> {'Idris.Data.These.This', V2}; [E0 | E1] -> (fun (V3, V4) -> {'Idris.Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'un--singleton'('erased', V3, ('un--singleton'('erased', V4, V2))))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insertWith'(V0, V1, V2, V3) -> case V1 of [] -> ('Idris.Idris2.Data.These':'un--these'('erased', 'erased', 'erased', fun (V4) -> {'Idris.Data.These.This', (V2({'Idris.Prelude.Types.Just', V4}))} end, fun (V5) -> {'Idris.Data.These.Both', (V2({'Idris.Prelude.Types.Nothing'})), V5} end, fun (V6) -> fun (V7) -> {'Idris.Data.These.Both', (V2({'Idris.Prelude.Types.Just', V6})), V7} end end, V3)); [E0 | E1] -> (fun (V8, V9) -> ('Idris.Idris2.Data.These':'un--these'('erased', 'erased', 'erased', fun (V10) -> {'Idris.Data.These.Both', V10, ('Idris.Idris2.Libraries.Data.StringMap':'un--singleton'('erased', V8, ('nested--2397-3333--in--un--end'('erased', V8, V9, V3, V2))))} end, fun (V11) -> {'Idris.Data.These.That', ('nested--2397-3334--in--un--rec'('erased', V8, V9, V3, V2, V11))} end, fun (V12) -> fun (V13) -> {'Idris.Data.These.Both', V12, ('nested--2397-3334--in--un--rec'('erased', V8, V9, V3, V2, V13))} end end, V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--insert'(V0, V1, V2, V3) -> ('un--insertWith'('erased', V1, fun (V4) -> V2 end, V3)).
'un--foldWithKeysM'(V0, V1, V2, V3, V4, V5, V6) -> ('nested--2496-3412--in--un--go'('erased', 'erased', V3, 'erased', V5, V4, [], V6)).
'un--empty'(V0) -> {'Idris.Data.These.That', ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'('erased'))}.
