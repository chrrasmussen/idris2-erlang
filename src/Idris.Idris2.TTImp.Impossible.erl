-module('Idris.Idris2.TTImp.Impossible').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6015-2425--in--un--sameRet'/7,
  'nested--7333-3627--in--un--expandNest'/6,
  'nested--7333-3628--in--un--applyEnv'/6,
  'nested--7333-3626--in--un--addEnv'/8,
  'un--processArgs'/7,
  'un--nextVar'/3,
  'un--mkTerm'/7,
  'un--match'/4,
  'un--getImpossibleTerm'/6,
  'un--dropNoMatch'/3,
  'un--buildApp'/9,
  'un--badClause'/5
]).
'nested--6015-2425--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Value.NApp', E69, E70, E71} -> (fun (V7, V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', 1} end end(E69, E70, E71)); {'Idris.Core.Value.NErased', E72, E73} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', 1} end end(E72, E73)); _ -> case V5 of {'Idris.Core.Value.NApp', E12, E13, E14} -> (fun (V14, V15, V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', 1} end end(E12, E13, E14)); {'Idris.Core.Value.NErased', E15, E16} -> (fun (V18, V19) -> fun (V20) -> {'Idris.Prelude.Types.Right', 1} end end(E15, E16)); {'Idris.Core.Value.NTCon', E17, E18, E19, E20, E21} -> (fun (V21, V22, V23, V24, V25) -> case V6 of {'Idris.Core.Value.NTCon', E34, E35, E36, E37, E38} -> (fun (V26, V27, V28, V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V22, V27))} end end(E34, E35, E36, E37, E38)); _ -> fun (V32) -> case V6 of {'Idris.Core.Value.NBind', E22, E23, E24, E25} -> (fun (V33, V34, V35, V36) -> case V35 of {'Idris.Core.TT.Pi', E26, E27, E28, E29} -> (fun (V37, V38, V39, V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E30} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V44) -> begin (V45 = (((V36(V44))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V33, 0}))))(V32))), case V45 of {'Idris.Prelude.Types.Left', E32} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V47) -> (('nested--6015-2425--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V47))(V32)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27, E28, E29)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E22, E23, E24, E25)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end(E17, E18, E19, E20, E21)); {'Idris.Core.Value.NPrimVal', E39, E40} -> (fun (V48, V49) -> case V6 of {'Idris.Core.Value.NPrimVal', E53, E54} -> (fun (V50, V51) -> fun (V52) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V49, V51))} end end(E53, E54)); _ -> fun (V53) -> case V6 of {'Idris.Core.Value.NBind', E41, E42, E43, E44} -> (fun (V54, V55, V56, V57) -> case V56 of {'Idris.Core.TT.Pi', E45, E46, E47, E48} -> (fun (V58, V59, V60, V61) -> begin (V63 = begin (V62 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V62} end), case V63 of {'Idris.Prelude.Types.Left', E49} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V65) -> begin (V66 = (((V57(V65))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V54, 0}))))(V53))), case V66 of {'Idris.Prelude.Types.Left', E51} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V68) -> (('nested--6015-2425--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V68))(V53)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45, E46, E47, E48)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E41, E42, E43, E44)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end(E39, E40)); {'Idris.Core.Value.NType', E55} -> (fun (V69) -> case V6 of {'Idris.Core.Value.NType', E68} -> (fun (V70) -> fun (V71) -> {'Idris.Prelude.Types.Right', 1} end end(E68)); _ -> fun (V72) -> case V6 of {'Idris.Core.Value.NBind', E56, E57, E58, E59} -> (fun (V73, V74, V75, V76) -> case V75 of {'Idris.Core.TT.Pi', E60, E61, E62, E63} -> (fun (V77, V78, V79, V80) -> begin (V82 = begin (V81 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V81} end), case V82 of {'Idris.Prelude.Types.Left', E64} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V84) -> begin (V85 = (((V76(V84))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V73, 0}))))(V72))), case V85 of {'Idris.Prelude.Types.Left', E66} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V87) -> (('nested--6015-2425--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V87))(V72)) end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60, E61, E62, E63)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E56, E57, E58, E59)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end(E55)); _ -> fun (V88) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V89, V90, V91, V92) -> case V91 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V93, V94, V95, V96) -> begin (V98 = begin (V97 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E8} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V100) -> begin (V101 = (((V92(V100))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V89, 0}))))(V88))), case V101 of {'Idris.Prelude.Types.Left', E10} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V103) -> (('nested--6015-2425--in--un--sameRet'(V0, V1, V2, V3, V4, V5, V103))(V88)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end.
'nested--7333-3627--in--un--expandNest'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V6, V7) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V10, V11)) end end}, V7, V2)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V13, V14) -> case V13 of {'Idris.Prelude.Types.Just', E5} -> (fun (V15) -> case V14 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V16, V17) -> {'Idris.TTImp.TTImp.IVar', V6, V15} end(E6, E7)); _ -> {'Idris.TTImp.TTImp.IVar', V6, V7} end end(E5)); _ -> {'Idris.TTImp.TTImp.IVar', V6, V7} end end(E3, E4)); _ -> {'Idris.TTImp.TTImp.IVar', V6, V7} end end(E2)); _ -> {'Idris.TTImp.TTImp.IVar', V6, V7} end end(E0, E1)); _ -> V5 end.
'nested--7333-3628--in--un--applyEnv'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V6, V7, V8) -> {'Idris.TTImp.TTImp.IApp', V6, ('nested--7333-3628--in--un--applyEnv'(V0, V1, V2, V3, V4, V7)), V8} end(E0, E1, E2)); {'Idris.TTImp.TTImp.IAutoApp', E3, E4, E5} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IAutoApp', V9, ('nested--7333-3628--in--un--applyEnv'(V0, V1, V2, V3, V4, V10)), V11} end(E3, E4, E5)); {'Idris.TTImp.TTImp.INamedApp', E6, E7, E8, E9} -> (fun (V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.INamedApp', V12, ('nested--7333-3628--in--un--applyEnv'(V0, V1, V2, V3, V4, V13)), V14, V15} end(E6, E7, E8, E9)); _ -> ('Idris.Idris2.TTImp.TTImp':'un--apply'(('nested--7333-3627--in--un--expandNest'(V0, V1, V2, V3, V4, V5)), ('nested--7333-3626--in--un--addEnv'(V0, V1, V2, V3, V4, V0, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V5)), V3)))) end.
'nested--7333-3626--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> case V7 of {'Idris.Core.Env.Nil'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V8, V9) -> case V7 of {'Idris.Core.Env.::', E2, E3} -> (fun (V10, V11) -> case ('Idris.Idris2.Core.TT':'un--isLet'(V10)) of 1 -> ('nested--7333-3626--in--un--addEnv'(V0, V1, V2, V3, V4, V9, V6, V11)); 0 -> [{'Idris.TTImp.TTImp.Implicit', V6, 0} | ('nested--7333-3626--in--un--addEnv'(V0, V1, V2, V3, V4, V9, V6, V11))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case V13 of {'Idris.Core.TT.Explicit'} -> (fun () -> case V4 of [E8 | E9] -> (fun (V15, V16) -> fun (V17) -> begin (V18 = (('un--mkTerm'(V0, V1, V15, {'Idris.Prelude.Types.Just', V14}, [], [], []))(V17))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> begin (V25 = (((V10(V24))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V20))))(V17))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V20}, V27, V16, V5, V6))(V17)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); [] -> fun (V28) -> begin (V30 = begin (V29 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E16} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V32) -> case ('Idris.Idris2.TTImp.Elab.App':'un--findNamed'(V8, V6)) of {'Idris.Prelude.Types.Just', E18} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E19, E20} -> (fun (V34, V35) -> case V34 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V36, V37) -> begin (V38 = (('un--mkTerm'(V0, V1, V37, {'Idris.Prelude.Types.Just', V14}, [], [], []))(V28))), case V38 of {'Idris.Prelude.Types.Left', E23} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V40) -> begin (V41 = (((V10(V32))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V40))))(V28))), case V41 of {'Idris.Prelude.Types.Left', E25} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V43) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V40}, V43, [], V5, V35))(V28)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--badClause'(V2, [], V5, V6, V28)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V4 of [] -> case V5 of [] -> fun (V44) -> case V6 of [] -> {'Idris.Prelude.Types.Right', V2}; _ -> ('un--badClause'(V2, V4, V5, V6, V44)) end end; _ -> fun (V45) -> ('un--badClause'(V2, V4, V5, V6, V45)) end end; _ -> fun (V46) -> ('un--badClause'(V2, V4, V5, V6, V46)) end end end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V47) -> begin (V49 = begin (V48 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E27} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V51) -> case ('Idris.Idris2.TTImp.Elab.App':'un--findNamed'(V8, V6)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V52 = ('un--nextVar'(V1, V7, V47))), case V52 of {'Idris.Prelude.Types.Left', E29} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V54) -> begin (V55 = (((V10(V51))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V54))))(V47))), case V55 of {'Idris.Prelude.Types.Left', E31} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V57) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V54}, V57, V4, V5, V6))(V47)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E33} -> (fun (V58) -> case V58 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V59, V60) -> case V59 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V61, V62) -> begin (V63 = (('un--mkTerm'(V0, V1, V62, {'Idris.Prelude.Types.Just', V14}, [], [], []))(V47))), case V63 of {'Idris.Prelude.Types.Left', E38} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V65) -> begin (V66 = (((V10(V51))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V65))))(V47))), case V66 of {'Idris.Prelude.Types.Left', E40} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V68) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V65}, V68, V4, V5, V60))(V47)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> fun (V69) -> begin (V71 = begin (V70 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V70} end), case V71 of {'Idris.Prelude.Types.Left', E42} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V73) -> case V5 of [E44 | E45] -> (fun (V74, V75) -> begin (V76 = (('un--mkTerm'(V0, V1, V74, {'Idris.Prelude.Types.Just', V14}, [], [], []))(V69))), case V76 of {'Idris.Prelude.Types.Left', E46} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V78) -> begin (V79 = (((V10(V73))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V78))))(V69))), case V79 of {'Idris.Prelude.Types.Left', E48} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V81) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V78}, V81, V4, V75, V6))(V69)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44, E45)); [] -> case ('Idris.Idris2.TTImp.Elab.App':'un--findNamed'(V8, V6)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V82 = ('un--nextVar'(V1, V7, V69))), case V82 of {'Idris.Prelude.Types.Left', E50} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V84) -> begin (V85 = (((V10(V73))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V84))))(V69))), case V85 of {'Idris.Prelude.Types.Left', E52} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V87) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V84}, V87, V4, [], V6))(V69)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E54} -> (fun (V88) -> case V88 of {'Idris.Builtin.MkPair', E55, E56} -> (fun (V89, V90) -> case V89 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V91, V92) -> begin (V93 = (('un--mkTerm'(V0, V1, V92, {'Idris.Prelude.Types.Just', V14}, [], [], []))(V69))), case V93 of {'Idris.Prelude.Types.Left', E59} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V95) -> begin (V96 = (((V10(V73))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, V95))))(V69))), case V96 of {'Idris.Prelude.Types.Left', E61} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V98) -> (('un--processArgs'(V0, V1, {'Idris.Core.TT.App', V7, V2, V95}, V98, V4, [], V90))(V69)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> case V4 of [] -> case V5 of [] -> fun (V99) -> case V6 of [] -> {'Idris.Prelude.Types.Right', V2}; _ -> ('un--badClause'(V2, V4, V5, V6, V99)) end end; _ -> fun (V100) -> ('un--badClause'(V2, V4, V5, V6, V100)) end end; _ -> fun (V101) -> ('un--badClause'(V2, V4, V5, V6, V101)) end end end end(E4, E5, E6, E7)); _ -> case V4 of [] -> case V5 of [] -> fun (V102) -> case V6 of [] -> {'Idris.Prelude.Types.Right', V2}; _ -> ('un--badClause'(V2, V4, V5, V6, V102)) end end; _ -> fun (V103) -> ('un--badClause'(V2, V4, V5, V6, V103)) end end; _ -> fun (V104) -> ('un--badClause'(V2, V4, V5, V6, V104)) end end end end(E0, E1, E2, E3)); _ -> case V4 of [] -> case V5 of [] -> fun (V105) -> case V6 of [] -> {'Idris.Prelude.Types.Right', V2}; _ -> ('un--badClause'(V2, V4, V5, V6, V105)) end end; _ -> fun (V106) -> ('un--badClause'(V2, V4, V5, V6, V106)) end end; _ -> fun (V107) -> ('un--badClause'(V2, V4, V5, V6, V107)) end end end.
'un--nextVar'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'put'(V0, ((V6 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', <<"imp"/utf8>>, V6}}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mkTerm'(V0, V1, V2, V3, V4, V5, V6) -> case V2 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V7, V8) -> fun (V9) -> ('un--buildApp'(V0, V1, V7, V8, V3, V4, V5, V6, V9)) end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V10, V11, V12) -> ('un--mkTerm'(V0, V1, V11, V3, [V12 | V4], V5, V6)) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V13, V14, V15) -> ('un--mkTerm'(V0, V1, V14, V3, V4, [V15 | V5], V6)) end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V16, V17, V18, V19) -> ('un--mkTerm'(V0, V1, V17, V3, V4, V5, [{'Idris.Builtin.MkPair', V18, V19} | V6])) end(E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IPrimVal', E12, E13} -> (fun (V20, V21) -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V20, V21}} end end(E12, E13)); _ -> fun (V23) -> ('un--nextVar'(V1, ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V2)), V23)) end end.
'un--match'(V0, V1, V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V11, {'Idris.Core.Env.Nil'}, V7))(V3))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> (('nested--6015-2425--in--un--sameRet'(V4, V6, V7, V1, V0, V1, V14))(V3)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getImpossibleTerm'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('un--mkTerm'(V1, V8, ('nested--7333-3628--in--un--applyEnv'(V0, V4, V3, V2, V1, V4)), {'Idris.Prelude.Types.Nothing'}, [], [], []))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropNoMatch'(V0, V1, V2) -> case V2 of [E26 | E27] -> (fun (V3, V4) -> fun (V5) -> case V4 of [] -> {'Idris.Prelude.Types.Right', [V3 | []]}; _ -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V2} end()); {'Idris.Prelude.Types.Just', E28} -> (fun (V6) -> ('Idris.Idris2.Core.Core':'un--filterM'(fun (V7) -> fun (V8) -> ('un--match'(V0, V6, case V7 of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', V9, case V10 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V11, V12) -> {'Idris.Builtin.MkPair', V11, case V12 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V15 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8)) end end, V2, V5)) end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26, E27)); _ -> fun (V34) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V2} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V35) -> ('Idris.Idris2.Core.Core':'un--filterM'(fun (V36) -> fun (V37) -> ('un--match'(V0, V35, case V36 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V38, V39) -> {'Idris.Builtin.MkPair', V38, case V39 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V40, V41) -> {'Idris.Builtin.MkPair', V40, case V41 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V44 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V37)) end end, V2, V34)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--buildApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getPrimitiveNames'(V0, V8))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V20 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V18, V19)) end end}, V3, V15)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t deal with constants here yet"/utf8>>}, V8)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V52 = ('Idris.Idris2.Core.Context':'un--lookupNameBy'(fun (V23) -> V23 end, V3, case V12 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V24 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V52 of {'Idris.Prelude.Types.Left', E34} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V54) -> begin (V55 = (('un--dropNoMatch'(V0, V4, V54))(V8))), case V55 of {'Idris.Prelude.Types.Left', E36} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V57) -> case V57 of [E38 | E39] -> (fun (V58, V59) -> case V58 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V60, V61) -> case V61 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V62, V63) -> case V59 of [] -> begin (V85 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V12, {'Idris.Core.Env.Nil'}, case V63 of {'Idris.Core.Context.MkGlobalDef', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> V66 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V85 of {'Idris.Prelude.Types.Left', E65} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V87) -> begin (V120 = case V63 of {'Idris.Core.Context.MkGlobalDef', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> case V105 of {'Idris.Core.Context.DCon', E88, E89, E90} -> (fun (V109, V110, V111) -> {'Idris.Core.TT.DataCon', V109, V110} end(E88, E89, E90)); {'Idris.Core.Context.TCon', E91, E92, E93, E94, E95, E96, E97, E98} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119) -> {'Idris.Core.TT.TyCon', V112, V113} end(E91, E92, E93, E94, E95, E96, E97, E98)); _ -> {'Idris.Core.TT.Func'} end end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('un--processArgs'(V0, V1, {'Idris.Core.TT.Ref', V2, V120, {'Idris.Core.Name.Resolved', V62}}, V87, V5, V6, V7))(V8)) end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V121) -> ('Idris.Idris2.Builtin':'un--fst'(V121)) end, V57))}, V8)) end end(E42, E43)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V122) -> ('Idris.Idris2.Builtin':'un--fst'(V122)) end, V57))}, V8)) end end(E40, E41)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V123) -> ('Idris.Idris2.Builtin':'un--fst'(V123)) end, V57))}, V8)) end end(E38, E39)); [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V2, V3, V8)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V124) -> ('Idris.Idris2.Builtin':'un--fst'(V124)) end, V57))}, V8)) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--badClause'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.TT':'un--getLoc'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Badly formed impossible clause "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'([], V6, V7)) end end}, {'Idris.Prelude.Show.MkShow', fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V10) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V11, V12)) end end}, V9)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V16, V17)) end end}, V13, V14)) end end}, {'Idris.Prelude.Show.MkShow', fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V19) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V20) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V21, V22)) end end}, V19)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V25) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V25)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V26, V27)) end end}, V23, V24)) end end}, {'Idris.Prelude.Show.MkShow', fun (V28) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V31, V32)) end end}, {'Idris.Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V34, V35)) end end}}, V29)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V38)) end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V39, V40)) end end}, {'Idris.Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V41)) end, fun (V42) -> fun (V43) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V42, V43)) end end}}, V36, V37)) end end}, V28)) end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V46) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V48, V49)) end end}, {'Idris.Prelude.Show.MkShow', fun (V50) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V51, V52)) end end}}, V46)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V56, V57)) end end}, {'Idris.Prelude.Show.MkShow', fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V58)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V59, V60)) end end}}, V53, V54)) end end}, V44, V45)) end end}}, V18)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V64) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V65, V66)) end end}, V63)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V69) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V70, V71)) end end}, V67, V68)) end end}, {'Idris.Prelude.Show.MkShow', fun (V72) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V74)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V75, V76)) end end}, {'Idris.Prelude.Show.MkShow', fun (V77) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V78, V79)) end end}}, V73)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V82)) end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V83, V84)) end end}, {'Idris.Prelude.Show.MkShow', fun (V85) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V85)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V86, V87)) end end}}, V80, V81)) end end}, V72)) end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V90) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V92, V93)) end end}, {'Idris.Prelude.Show.MkShow', fun (V94) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V94)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V95, V96)) end end}}, V90)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V99)) end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V100, V101)) end end}, {'Idris.Prelude.Show.MkShow', fun (V102) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V103, V104)) end end}}, V97, V98)) end end}, V88, V89)) end end}}, V61, V62)) end end}}, V8)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V109, V110)) end end}, V107)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V113) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V114, V115)) end end}, V111, V112)) end end}, {'Idris.Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V118) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V119, V120)) end end}, V117)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V123) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V123)) end, fun (V124) -> fun (V125) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V124, V125)) end end}, V121, V122)) end end}, {'Idris.Prelude.Show.MkShow', fun (V126) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V127) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V128) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V128)) end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V129, V130)) end end}, {'Idris.Prelude.Show.MkShow', fun (V131) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V131)) end, fun (V132) -> fun (V133) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V132, V133)) end end}}, V127)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V136) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V136)) end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V137, V138)) end end}, {'Idris.Prelude.Show.MkShow', fun (V139) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V139)) end, fun (V140) -> fun (V141) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V140, V141)) end end}}, V134, V135)) end end}, V126)) end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V144) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V145) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V145)) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V146, V147)) end end}, {'Idris.Prelude.Show.MkShow', fun (V148) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V148)) end, fun (V149) -> fun (V150) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V149, V150)) end end}}, V144)) end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V153) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V153)) end, fun (V154) -> fun (V155) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V154, V155)) end end}, {'Idris.Prelude.Show.MkShow', fun (V156) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V156)) end, fun (V157) -> fun (V158) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V157, V158)) end end}}, V151, V152)) end end}, V142, V143)) end end}}, V116)) end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V161) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V162) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V162)) end, fun (V163) -> fun (V164) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V163, V164)) end end}, V161)) end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V167) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V167)) end, fun (V168) -> fun (V169) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V168, V169)) end end}, V165, V166)) end end}, {'Idris.Prelude.Show.MkShow', fun (V170) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V171) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V172)) end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V173, V174)) end end}, {'Idris.Prelude.Show.MkShow', fun (V175) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V175)) end, fun (V176) -> fun (V177) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V176, V177)) end end}}, V171)) end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V180) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V180)) end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V181, V182)) end end}, {'Idris.Prelude.Show.MkShow', fun (V183) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V183)) end, fun (V184) -> fun (V185) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V184, V185)) end end}}, V178, V179)) end end}, V170)) end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V188) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V189) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V189)) end, fun (V190) -> fun (V191) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V190, V191)) end end}, {'Idris.Prelude.Show.MkShow', fun (V192) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V192)) end, fun (V193) -> fun (V194) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V193, V194)) end end}}, V188)) end, fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V197) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V197)) end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V198, V199)) end end}, {'Idris.Prelude.Show.MkShow', fun (V200) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V200)) end, fun (V201) -> fun (V202) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V201, V202)) end end}}, V195, V196)) end end}, V186, V187)) end end}}, V159, V160)) end end}}, V105, V106)) end end}}, {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V2, V3}}}))))}, V4)).
