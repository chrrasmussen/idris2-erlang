-module('Idris.Idris2.Compiler.ES.TailRec').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in kosarajuL-803'/6,
  'nested--6492-1160--in--un--rep'/7,
  'nested--6252-922--in--un--hasTailCalls'/2,
  'un--tailRecOptimGroup'/4,
  'un--tailRecOptim'/2,
  'un--tailCallGraph'/1,
  'un--stepFnName'/0,
  'un--replaceTailCall'/2,
  'un--recursiveTailCallGroups'/1,
  'un--makeTailOptimToBody'/3,
  'un--makeFusionBranch'/3,
  'un--lookupList'/2,
  'un--kosarajuL'/3,
  'un--kosarajuAssign'/4,
  'un--kosaraju'/1,
  'un--getDef'/3,
  'un--genName'/2,
  'un--fusionArgsName'/0,
  'un--extractFunctions'/2,
  'un--createNewArgs'/1,
  'un--createArgInit'/1,
  'un--changeBodyToUseFusion'/2,
  'un--argsName'/0,
  'un--allTailCalls'/1
]).
'case--case block in kosarajuL-803'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case ('un--kosarajuL'(V6, V1, V2)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> {'Idris.Builtin.MkPair', V8, ('Idris.Idris2.Prelude.Types.List':'un--++'(V9, [V0 | V7]))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6492-1160--in--un--rep'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Compiler.ES.ImperativeAst.IEApp', E0, E1} -> (fun (V7, V8) -> case V7 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E2} -> (fun (V9) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V9, V4)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Just', {'Idris.Compiler.ES.ImperativeAst.IEApp', {'Idris.Compiler.ES.ImperativeAst.IEVar', V5}, [{'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V14))}, V8} | []]}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--6252-922--in--un--hasTailCalls'(V0, V1) -> case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, V2, ('un--lookupList'(V2, case V0 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E2, E3} -> (fun (V8, V9) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))); _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--tailRecOptimGroup'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'())}; [E4 | E5] -> (fun (V4, V5) -> case V5 of [] -> begin (V6 = ('un--getDef'(V1, V4, V3))), case V6 of {'Idris.Prelude.Types.Left', E10} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V11, V12) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.ImperativeAst.FunDecl', V9, V4, V11, ('un--makeTailOptimToBody'(V4, V11, V12))}} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V13 = ('un--genName'(V0, V3))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V18 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V16) -> fun (V17) -> ('un--getDef'(V1, V16, V17)) end end, V2, [], V3))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'(0, ('Idris.Idris2.Prelude.Types':'un--minus'(('Idris.Idris2.Prelude.Types.List':'un--length'(V2)), (1 + 0)))))), begin (V23 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V22) -> ('un--makeFusionBranch'(V15, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V2, V21)), V22)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V21, V20))))), begin (V24 = {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--fusionArgsName'())}}, V23, {'Idris.Prelude.Types.Nothing'}}), begin (V25 = [('un--fusionArgsName'()) | []]), begin (V26 = {'Idris.Compiler.ES.ImperativeAst.FunDecl', {'Idris.Core.FC.EmptyFC'}, V15, V25, ('un--makeTailOptimToBody'(V15, V25, V24))}), begin (V56 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V38)) end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V42, V43, V44, V45)) end end end end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V50, V51, V52)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V53) -> fun (V54) -> ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V53, V54)) end end, ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'())}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V55) -> ('un--changeBodyToUseFusion'(V15, V55)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V21, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V2, V20))))))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V26, V56))} end end end end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> begin (V57 = ('un--genName'(V0, V3))), case V57 of {'Idris.Prelude.Types.Left', E0} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V59) -> begin (V62 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V60) -> fun (V61) -> ('un--getDef'(V1, V60, V61)) end end, V2, [], V3))), case V62 of {'Idris.Prelude.Types.Left', E2} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'(0, ('Idris.Idris2.Prelude.Types':'un--minus'(('Idris.Idris2.Prelude.Types.List':'un--length'(V2)), (1 + 0)))))), begin (V67 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V66) -> ('un--makeFusionBranch'(V59, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V2, V65)), V66)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V65, V64))))), begin (V68 = {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--fusionArgsName'())}}, V67, {'Idris.Prelude.Types.Nothing'}}), begin (V69 = [('un--fusionArgsName'()) | []]), begin (V70 = {'Idris.Compiler.ES.ImperativeAst.FunDecl', {'Idris.Core.FC.EmptyFC'}, V59, V69, ('un--makeTailOptimToBody'(V59, V69, V68))}), begin (V100 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V73, V74, V75)) end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V78, V79, V80)) end end end end end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V82)) end end, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V86, V87, V88, V89)) end end end end end end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V91)) end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V94, V95, V96)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V97) -> fun (V98) -> ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V97, V98)) end end, ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'())}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V99) -> ('un--changeBodyToUseFusion'(V59, V99)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V65, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V2, V64))))))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V70, V100))} end end end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--tailRecOptim'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.ES.TailRec.TailRecS'}, 0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('un--tailCallGraph'(V0))), begin (V6 = ('un--recursiveTailCallGroups'(V5))), begin (V46 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'(V7, V8)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V25, V26)) end end})), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--fromList'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V31)) end end}, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V44, V45)) end end}, V27)) end, V6))))), case ('un--extractFunctions'(V46, V0)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V47, V48) -> begin (V51 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V49) -> fun (V50) -> ('un--tailRecOptimGroup'(V4, V48, V49, V50)) end end, V6, [], V1))), case V51 of {'Idris.Prelude.Types.Left', E4} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V47, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V56, V57, V58)) end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V65)) end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V69, V70, V71, V72)) end end end end end end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V74)) end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V77, V78, V79)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V80) -> fun (V81) -> ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V80, V81)) end end, ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'())}}, V53))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tailCallGraph'(V0) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V1, V2) -> begin (V3 = ('un--tailCallGraph'(V1))), begin (V4 = ('un--tailCallGraph'(V2))), {'Idris.Compiler.ES.TailRec.MkCallGraph', ('Idris.Idris2.Libraries.Data.SortedMap':'un--mergeWith'(fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'(V5, V6)) end end, case V3 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E2, E3} -> (fun (V7, V8) -> V7 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E4, E5} -> (fun (V9, V10) -> V9 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Data.SortedMap':'un--mergeWith'(fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'(V11, V12)) end end, case V3 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E6, E7} -> (fun (V13, V14) -> V14 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E8, E9} -> (fun (V15, V16) -> V16 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.FunDecl', E10, E11, E12, E13} -> (fun (V17, V18, V19, V20) -> begin (V21 = ('un--allTailCalls'(V20))), {'Idris.Compiler.ES.TailRec.MkCallGraph', ('Idris.Idris2.Libraries.Data.SortedMap':'un--singleton'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V24, V25)) end end}, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V38, V39)) end end}, V18, V21)), ('Idris.Idris2.Prelude.Interfaces':'un--$>'(fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Libraries.Data.SortedMap':'dn--un--map_Functor_(SortedMap $k)'(V42, V43)) end end end end, ('Idris.Idris2.Libraries.Data.SortedSet':'un--toSortedMap'(V21)), ('Idris.Idris2.Libraries.Data.SortedSet':'un--singleton'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V46, V47)) end end}, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V60, V61)) end end}, V18))))} end end(E10, E11, E12, E13)); _ -> {'Idris.Compiler.ES.TailRec.MkCallGraph', ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V64, V65)) end end}, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V66, V67)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V78, V79)) end end})), ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V80, V81)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V82, V83)) end end}, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V86, V87)) end end, fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V90, V91)) end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V94, V95)) end end, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V96, V97)) end end}))} end.
'un--stepFnName'() -> {'Idris.Core.Name.MN', <<"imp_gen_tailoptim_step"/utf8>>, 0}.
'un--replaceTailCall'(V0, V1) -> case V1 of {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V2, V3) -> {'Idris.Compiler.ES.ImperativeAst.SeqStatement', V2, ('un--replaceTailCall'(V0, V3))} end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', E2} -> (fun (V4) -> begin (V5 = {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', 1}, [V4 | []]}}), case V4 of {'Idris.Compiler.ES.ImperativeAst.IEApp', E3, E4} -> (fun (V6, V7) -> case V6 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E5} -> (fun (V8) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V8)) of 1 -> {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', ('un--createNewArgs'(V7))}; 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> V5 end end(E3, E4)); _ -> V5 end end end(E2)); {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', E6, E7, E8} -> (fun (V9, V10, V11) -> {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', V9, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V13, V14) -> {'Idris.Builtin.MkPair', V13, ('un--replaceTailCall'(V0, V14))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V10)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V15) -> ('un--replaceTailCall'(V0, V15)) end, V11))} end(E6, E7, E8)); {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', E11} -> (fun (V16) -> {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', ('un--replaceTailCall'(V0, V16))} end(E11)); _ -> V1 end.
'un--recursiveTailCallGroups'(V0) -> begin (V1 = ('un--kosaraju'(V0))), begin (V23 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(fun (V3) -> ('Idris.Idris2.Builtin':'un--fst'(V3)) end, V2)) end, ('Idris.Idris2.Libraries.Data.List.Extra':'un--groupAllWith'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V20, V21)) end end}, fun (V22) -> ('Idris.Idris2.Builtin':'un--snd'(V22)) end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'(V1))))))), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V23, fun (V24) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V27, V28)) end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V30)) end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V33, V34)) end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V37, V38)) end end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_List'(V40)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V43, V44)) end end end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(V46)) end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'(V49, V50)) end end end end}, fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_List'()) end, fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_List'(V53, V54)) end end end}, ('nested--6252-922--in--un--hasTailCalls'(V0, V24)))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Data.List1':'un--forget'(V24)))) end)) end)) end end.
'un--makeTailOptimToBody'(V0, V1, V2) -> begin (V4 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V3)), {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--argsName'())}} end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V1))))))), begin (V5 = ('Idris.Idris2.Compiler.ES.ImperativeAst':'un--replaceNamesExpS'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V1, V4)), V2))), begin (V6 = ('un--replaceTailCall'(V0, V5))), begin (V7 = {'Idris.Compiler.ES.ImperativeAst.FunDecl', {'Idris.Core.FC.EmptyFC'}, ('un--stepFnName'()), [('un--argsName'()) | []], V6}), begin (V8 = {'Idris.Compiler.ES.ImperativeAst.MutateStatement', ('un--argsName'()), {'Idris.Compiler.ES.ImperativeAst.IEApp', {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--stepFnName'())}, [{'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--argsName'())} | []]}}), begin (V9 = {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', 1, {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--argsName'())}}}), begin (V10 = {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--argsName'())}}, [{'Idris.Builtin.MkPair', {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', {'Idris.Prelude.Types.Left', 0}}, V8} | []], {'Idris.Prelude.Types.Just', V9}}}), ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V7, ('un--createArgInit'(V1)))), V10)) end end end end end end end.
'un--makeFusionBranch'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> begin (V10 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V9)), {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--fusionArgsName'())}} end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V7))))))), begin (V11 = ('Idris.Idris2.Compiler.ES.ImperativeAst':'un--replaceNamesExpS'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(V7, V10)), V8))), {'Idris.Builtin.MkPair', {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V3))}}, ('Idris.Idris2.Compiler.ES.ImperativeAst':'un--replaceExpS'(fun (V12) -> ('nested--6492-1160--in--un--rep'(V5, V3, V7, V8, V1, V0, V12)) end, V11))} end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--lookupList'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [] end, fun () -> fun (V2) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'(V2)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V0, V1)))).
'un--kosarajuL'(V0, V1, V2) -> case V1 of [] -> {'Idris.Builtin.MkPair', V0, []}; [E0 | E1] -> (fun (V3, V4) -> case ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'(V3, V0)) of 1 -> ('un--kosarajuL'(V0, V4, V2)); 0 -> begin (V7 = ('un--lookupList'(V3, case V2 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E2, E3} -> (fun (V5, V6) -> V5 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('case--case block in kosarajuL-803'(V3, V4, V2, V0, V7, ('un--kosarajuL'(('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'(V3, V0)), V7, V2)))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--kosarajuAssign'(V0, V1, V2, V3) -> case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V3, V2)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> V2 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V7 = ('un--lookupList'(V3, case V0 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E1, E2} -> (fun (V5, V6) -> V6 end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V8) -> fun (V9) -> ('un--kosarajuAssign'(V0, V1, V8, V9)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V3, V1, V2)), V7)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--kosaraju'(V0) -> begin (V21 = ('Idris.Idris2.Builtin':'un--snd'(('un--kosarajuL'(('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V17, V18)) end end})), ('Idris.Idris2.Libraries.Data.SortedMap':'un--keys'(case V0 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E0, E1} -> (fun (V19, V20) -> V19 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V0))))), ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V22) -> fun (V23) -> ('un--kosarajuAssign'(V0, V23, V22, V23)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V26, V27)) end end}, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V40, V41)) end end})), V21)) end.
'un--getDef'(V0, V1, V2) -> case ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V1, V0)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t find function definition in tailRecOptim"/utf8>>}, V2)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Right', V3} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = V5), begin (V8 = begin (V7 = ('erlang':'put'(V0, ((V6 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', <<"imp_gen_tailoptim"/utf8>>, V6}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fusionArgsName'() -> {'Idris.Core.Name.MN', <<"imp_gen_tailoptim_fusion_args"/utf8>>, 0}.
'un--extractFunctions'(V0, V1) -> case V1 of {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V2, V3) -> case ('un--extractFunctions'(V0, V2)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case ('un--extractFunctions'(V0, V3)) of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V4, V6)), ('Idris.Idris2.Libraries.Data.SortedMap':'un--mergeLeft'(V5, V7))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.FunDecl', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> begin (V12 = {'Idris.Compiler.ES.ImperativeAst.FunDecl', V8, V9, V10, V11}), case ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'(V9, V0)) of 1 -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'()), ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V9, {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V10, V11}}, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V29, V30)) end end}))))}; 0 -> {'Idris.Builtin.MkPair', V12, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V33, V34)) end end}, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V47, V48)) end end}))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9)); _ -> {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V51, V52)) end end}, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V65, V66)) end end}))} end.
'un--createNewArgs'(V0) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', 0}, V0}.
'un--createArgInit'(V0) -> {'Idris.Compiler.ES.ImperativeAst.LetDecl', ('un--argsName'()), {'Idris.Prelude.Types.Just', {'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', 0}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> {'Idris.Compiler.ES.ImperativeAst.IEVar', V1} end, V0))}}}.
'un--changeBodyToUseFusion'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V8, V9) -> {'Idris.Compiler.ES.ImperativeAst.FunDecl', V6, V4, V8, {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', {'Idris.Compiler.ES.ImperativeAst.IEApp', {'Idris.Compiler.ES.ImperativeAst.IEVar', V0}, [{'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V2))}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> {'Idris.Compiler.ES.ImperativeAst.IEVar', V10} end, V8))} | []]}}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--argsName'() -> {'Idris.Core.Name.MN', <<"imp_gen_tailoptim_Args"/utf8>>, 0}.
'un--allTailCalls'(V0) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V1, V2) -> ('un--allTailCalls'(V2)) end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', E2} -> (fun (V3) -> case V3 of {'Idris.Compiler.ES.ImperativeAst.IEApp', E3, E4} -> (fun (V4, V5) -> case V4 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E5} -> (fun (V6) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--singleton'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V23, V24)) end end}, V6)) end(E5)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V41, V42)) end end})) end end(E3, E4)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V45, V46)) end end}, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V59, V60)) end end})) end end(E2)); {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', E6, E7, E8} -> (fun (V61, V62, V63) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'(('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'(V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'(V71, V72, V73)) end end end end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'(V75)) end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_Maybe'(V79, V80, V81, V82)) end end end end end end end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_Maybe'(V84)) end end, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_Maybe'(V87, V88, V89)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V90) -> fun (V91) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V92, V93)) end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V94, V95)) end end}, fun (V96) -> fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V96, V97)) end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V98, V99)) end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V100, V101)) end end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V102, V103)) end end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V104, V105)) end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V106, V107)) end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V108, V109)) end end}, V90, V91)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V110, V111)) end end, fun (V112) -> fun (V113) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V112, V113)) end end}, fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V114, V115)) end end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V116, V117)) end end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V118, V119)) end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V120, V121)) end end, fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V122, V123)) end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V124, V125)) end end, fun (V126) -> fun (V127) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V126, V127)) end end}))}}, fun (V128) -> ('un--allTailCalls'(V128)) end, V63)), ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V131, V132, V133)) end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V136, V137, V138)) end end end end end, fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V140)) end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V144, V145, V146, V147)) end end end end end end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V149)) end end, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V152, V153, V154)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V155) -> fun (V156) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V157) -> fun (V158) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V157, V158)) end end, fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V159, V160)) end end}, fun (V161) -> fun (V162) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V161, V162)) end end, fun (V163) -> fun (V164) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V163, V164)) end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V165, V166)) end end, fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V167, V168)) end end, fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V169, V170)) end end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V171, V172)) end end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V173, V174)) end end}, V155, V156)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V175) -> fun (V176) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V175, V176)) end end, fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V177, V178)) end end}, fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V179, V180)) end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V181, V182)) end end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V183, V184)) end end, fun (V185) -> fun (V186) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V185, V186)) end end, fun (V187) -> fun (V188) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V187, V188)) end end, fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V189, V190)) end end, fun (V191) -> fun (V192) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V191, V192)) end end}))}}, fun (V193) -> ('un--allTailCalls'(('Idris.Idris2.Builtin':'un--snd'(V193)))) end, V62)))) end(E6, E7, E8)); {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', E9} -> (fun (V194) -> ('un--allTailCalls'(V194)) end(E9)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V195) -> fun (V196) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V195, V196)) end end, fun (V197) -> fun (V198) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V197, V198)) end end}, fun (V199) -> fun (V200) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V199, V200)) end end, fun (V201) -> fun (V202) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V201, V202)) end end, fun (V203) -> fun (V204) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V203, V204)) end end, fun (V205) -> fun (V206) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V205, V206)) end end, fun (V207) -> fun (V208) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V207, V208)) end end, fun (V209) -> fun (V210) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V209, V210)) end end, fun (V211) -> fun (V212) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V211, V212)) end end})) end.
