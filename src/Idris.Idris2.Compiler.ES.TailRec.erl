-module('Idris.Idris2.Compiler.ES.TailRec').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--tailRecOptim-1763'/6,
  'case--tailRecOptimGroup-1625'/4,
  'case--makeFusionBranch,rep-1474'/9,
  'case--getDef-1423'/3,
  'case--extractFunctions-1352'/7,
  'case--case block in extractFunctions-1324'/6,
  'case--extractFunctions-1309'/4,
  'case--case block in recursiveTailCallGroups,hasTailCalls-1212'/4,
  'case--recursiveTailCallGroups,hasTailCalls-1194'/3,
  'case--groupBy-1155'/5,
  'case--case block in groupBy,go-1057'/11,
  'case--groupBy,go-1021'/9,
  'case--kosarajuAssign-911'/5,
  'case--case block in case block in kosarajuL-872'/8,
  'case--case block in kosarajuL-853'/6,
  'case--kosarajuL-813'/5,
  'case--replaceTailCall-570'/5,
  'case--case block in replaceTailCall-525'/6,
  'case--replaceTailCall-513'/3,
  'case--allTailCalls-412'/1,
  'case--genName-396'/3,
  'nested--8208-1463--in--un--rep'/7,
  'nested--7912-1179--in--un--hasTailCalls'/2,
  'nested--7709-1007--in--un--go'/7,
  'un--tailRecOptimGroup'/3,
  'un--tailRecOptim'/2,
  'un--tailCallGraph'/1,
  'un--stepFnName'/0,
  'un--replaceTailCall'/2,
  'un--recursiveTailCallGroups'/1,
  'un--makeTailOptimToBody'/3,
  'un--makeFusionBranch'/3,
  'un--kosarajuL'/3,
  'un--kosarajuAssign'/4,
  'un--kosaraju'/1,
  'un--groupBy'/3,
  'un--getDef'/2,
  'un--genName'/2,
  'un--fusionArgsName'/0,
  'un--extractFunctions'/2,
  'un--createNewArgs'/1,
  'un--createArgInit'/1,
  'un--changeBodyToUseFusion'/2,
  'un--argsName'/0,
  'un--allTailCalls'/1
]).
'case--tailRecOptim-1763'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> fun (V8) -> begin (V10 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> ('un--tailRecOptimGroup'(V1, V7, V9)) end, V3, []))(V8))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V6, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V24)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V25) -> fun (V26) -> ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V25, V26)) end end, ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'())}}))(V12))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tailRecOptimGroup-1625'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.ImperativeAst.FunDecl', V4, V0, V6, ('un--makeTailOptimToBody'(V0, V6, V7))}} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeFusionBranch,rep-1474'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Just', {'Idris.Compiler.ES.ImperativeAst.IEApp', {'Idris.Compiler.ES.ImperativeAst.IEVar', V5}, [{'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V9))}, V7} | []]}} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDef-1423'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t find function definition in tailRecOptim"/utf8>>}, V3)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', V4} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extractFunctions-1352'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'()), ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'('erased', 'erased', V2, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V1, V0}}, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V23, V24)) end end}))))}; 1 -> {'Idris.Builtin.MkPair', V4, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V41, V42)) end end}))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in extractFunctions-1324'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V3, V6)), ('Idris.Idris2.Libraries.Data.SortedMap':'un--mergeLeft'('erased', 'erased', V4, V7))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extractFunctions-1309'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('case--case block in extractFunctions-1324'(V0, V1, V2, V4, V5, ('un--extractFunctions'(V2, V0)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in recursiveTailCallGroups,hasTailCalls-1212'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> case V5 of [] -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V1)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'case--recursiveTailCallGroups,hasTailCalls-1194'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('case--case block in recursiveTailCallGroups,hasTailCalls-1212'(V0, V1, V3, ('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'('erased', V3)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--groupBy-1155'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> [[V1 | V5] | V6] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in groupBy,go-1057'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> {'Idris.Builtin.MkPair', [V6 | V8], V9}; 1 -> {'Idris.Builtin.MkPair', [], [[V6 | V8] | V9]}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--groupBy,go-1021'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> ('case--case block in groupBy,go-1057'('erased', V2, V3, V5, V7, V6, V4, V1, V9, V10, ((V7(V6))(V4)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--kosarajuAssign-911'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> V0 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V9 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> [] end, fun () -> fun (V6) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'('erased', V6)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'('erased', 'erased', V2, case V3 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E1, E2} -> (fun (V7, V8) -> V8 end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V10) -> fun (V11) -> ('un--kosarajuAssign'(V3, V11, V1, V10)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'('erased', 'erased', V2, V1, V0)), V9)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in kosarajuL-872'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> {'Idris.Builtin.MkPair', V8, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V9, [V0 | V6]))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in kosarajuL-853'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> ('case--case block in case block in kosarajuL-872'(V0, V1, V2, V3, V4, V6, V7, ('un--kosarajuL'(V6, V1, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--kosarajuL-813'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('un--kosarajuL'(V3, V1, V2)); 1 -> begin (V8 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> [] end, fun () -> fun (V5) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'('erased', V5)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'('erased', 'erased', V0, case V2 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E0, E1} -> (fun (V6, V7) -> V6 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), ('case--case block in kosarajuL-853'(V0, V1, V2, V3, V8, ('un--kosarajuL'(('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'('erased', V0, V3)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V20)) end end}))(V8)), V2)))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--replaceTailCall-570'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V5, ('un--replaceTailCall'(V3, V6))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in replaceTailCall-525'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', ('un--createNewArgs'(V3))}; 1 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--replaceTailCall-513'(V0, V1, V2) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.IEApp', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E2} -> (fun (V5) -> begin (V6 = {'Idris.Compiler.ES.ImperativeAst.IEApp', {'Idris.Compiler.ES.ImperativeAst.IEVar', V5}, V4}), ('case--case block in replaceTailCall-525'(V1, V2, V5, V4, V6, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V5)))) end end(E2)); _ -> V2 end end(E0, E1)); _ -> V2 end.
'case--allTailCalls-412'(V0) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.IEApp', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E2} -> (fun (V3) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'('erased', V3, ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V6, V7)) end end}, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V20, V21)) end end})))) end(E2)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V24, V25)) end end}, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V38, V39)) end end})) end end(E0, E1)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V42, V43)) end end}, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V56, V57)) end end})) end.
'case--genName-396'(V0, V1, V2) -> ((V2 + 1) rem 9223372036854775808).
'nested--8208-1463--in--un--rep'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Compiler.ES.ImperativeAst.IEApp', E0, E1} -> (fun (V7, V8) -> case V7 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E2} -> (fun (V9) -> ('case--makeFusionBranch,rep-1474'(V0, V1, V2, V3, V4, V5, V9, V8, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V9, V4)))) end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--7912-1179--in--un--hasTailCalls'(V0, V1) -> case V1 of [] -> 1; [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('case--recursiveTailCallGroups,hasTailCalls-1194'(V0, V2, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'('erased', 'erased', V2, case V0 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E2, E3} -> (fun (V4, V5) -> V4 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--7709-1007--in--un--go'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [E0 | E1] -> (fun (V7, V8) -> ('case--groupBy,go-1021'('erased', V1, V2, V3, V7, V8, V5, V4, ('nested--7709-1007--in--un--go'('erased', V1, V2, V3, V4, V7, V8)))) end(E0, E1)); [] -> {'Idris.Builtin.MkPair', [], []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tailRecOptimGroup'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'())} end; [E4 | E5] -> (fun (V4, V5) -> case V5 of [] -> fun (V6) -> begin (V7 = (('un--getDef'(V1, V4))(V6))), case V7 of {'Idris.Prelude.Types.Left', E10} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.ES.ImperativeAst.FunDecl', V10, V4, V12, ('un--makeTailOptimToBody'(V4, V12, V13))}} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V14) -> begin (V15 = ('un--genName'(V0, V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V19 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V18) -> ('un--getDef'(V1, V18)) end, V2, []))(V14))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'(0, ('Idris.Idris2.Prelude.Types':'un--minus'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V2)), (1 + 0)))))), begin (V24 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V23) -> ('un--makeFusionBranch'(V17, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V2, V22)), V23)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V22, V21))))), begin (V25 = {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--fusionArgsName'())}}, V24, {'Idris.Prelude.Types.Nothing'}}), begin (V26 = [('un--fusionArgsName'()) | []]), begin (V27 = {'Idris.Compiler.ES.ImperativeAst.FunDecl', {'Idris.Core.FC.EmptyFC'}, V17, V26, ('un--makeTailOptimToBody'(V17, V26, V25))}), begin (V43 = (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V36, V37, V38)) end end end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V40)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V41) -> fun (V42) -> ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V41, V42)) end end, ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'())}}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V28) -> ('un--changeBodyToUseFusion'(V17, V28)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V22, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V2, V21))))))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V27, V43))} end end end end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> fun (V44) -> begin (V45 = ('un--genName'(V0, V44))), case V45 of {'Idris.Prelude.Types.Left', E0} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V47) -> begin (V49 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> ('un--getDef'(V1, V48)) end, V2, []))(V44))), case V49 of {'Idris.Prelude.Types.Left', E2} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'(0, ('Idris.Idris2.Prelude.Types':'un--minus'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V2)), (1 + 0)))))), begin (V54 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V53) -> ('un--makeFusionBranch'(V47, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V2, V52)), V53)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V52, V51))))), begin (V55 = {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--fusionArgsName'())}}, V54, {'Idris.Prelude.Types.Nothing'}}), begin (V56 = [('un--fusionArgsName'()) | []]), begin (V57 = {'Idris.Compiler.ES.ImperativeAst.FunDecl', {'Idris.Core.FC.EmptyFC'}, V47, V56, ('un--makeTailOptimToBody'(V47, V56, V55))}), begin (V73 = (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V61, V62, V63)) end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V70)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V71) -> fun (V72) -> ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V71, V72)) end end, ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--neutral_Monoid_ImperativeStatement'())}}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V58) -> ('un--changeBodyToUseFusion'(V47, V58)) end, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V52, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V2, V51))))))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V57, V73))} end end end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--tailRecOptim'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.ES.TailRec.TailRecS'}, 0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> begin (V5 = ('un--tailCallGraph'(V0))), begin (V6 = ('un--recursiveTailCallGroups'(V5))), begin (V46 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'('erased', V7, V8)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V25, V26)) end end})), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V27) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--fromList'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V31)) end end}, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V44, V45)) end end}, V27)) end, V6))))), (('case--tailRecOptim-1763'(V0, V4, V5, V6, V46, ('un--extractFunctions'(V46, V0))))(V1)) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--tailCallGraph'(V0) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V1, V2) -> begin (V3 = ('un--tailCallGraph'(V1))), begin (V4 = ('un--tailCallGraph'(V2))), {'Idris.Compiler.ES.TailRec.MkCallGraph', ('Idris.Idris2.Libraries.Data.SortedMap':'un--mergeWith'('erased', 'erased', fun (V5) -> fun (V6) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'('erased', V5, V6)) end end, case V3 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E2, E3} -> (fun (V7, V8) -> V7 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E4, E5} -> (fun (V9, V10) -> V9 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Data.SortedMap':'un--mergeWith'('erased', 'erased', fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'('erased', V11, V12)) end end, case V3 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E6, E7} -> (fun (V13, V14) -> V14 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V4 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E8, E9} -> (fun (V15, V16) -> V16 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.FunDecl', E10, E11, E12, E13} -> (fun (V17, V18, V19, V20) -> begin (V21 = ('un--allTailCalls'(V20))), {'Idris.Compiler.ES.TailRec.MkCallGraph', ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'('erased', 'erased', V18, V21, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V24, V25)) end end}, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V38, V39)) end end})))), ('Idris.Idris2.Libraries.Data.SortedMap':'un--fromList'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V42, V43)) end end}, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V56, V57)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V58) -> {'Idris.Builtin.MkPair', V58, ('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'('erased', V18, ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V61, V62)) end end}, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V65, V66)) end end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V69, V70)) end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V71, V72)) end end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V73, V74)) end end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V75, V76)) end end}))))} end, ('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'('erased', V21))))))} end end(E10, E11, E12, E13)); _ -> {'Idris.Compiler.ES.TailRec.MkCallGraph', ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V77, V78)) end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V79, V80)) end end}, fun (V81) -> fun (V82) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V81, V82)) end end, fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V83, V84)) end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V87, V88)) end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V89, V90)) end end, fun (V91) -> fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V91, V92)) end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V93, V94)) end end})), ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V95, V96)) end end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V97, V98)) end end}, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V111, V112)) end end}))} end.
'un--stepFnName'() -> {'Idris.Core.Name.MN', <<"imp_gen_tailoptim_step"/utf8>>, 0}.
'un--replaceTailCall'(V0, V1) -> case V1 of {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V2, V3) -> {'Idris.Compiler.ES.ImperativeAst.SeqStatement', V2, ('un--replaceTailCall'(V0, V3))} end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', E2} -> (fun (V4) -> begin (V5 = {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', 1}, [V4 | []]}}), case V4 of {'Idris.Compiler.ES.ImperativeAst.IEApp', E3, E4} -> (fun (V6, V7) -> case V6 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E5} -> (fun (V8) -> begin (V9 = {'Idris.Compiler.ES.ImperativeAst.IEApp', {'Idris.Compiler.ES.ImperativeAst.IEVar', V8}, V7}), ('case--case block in replaceTailCall-525'(V0, V5, V8, V7, V9, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V8)))) end end(E5)); _ -> V5 end end(E3, E4)); _ -> V5 end end end(E2)); {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', E6, E7, E8} -> (fun (V10, V11, V12) -> {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', V14, ('un--replaceTailCall'(V0, V15))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V11)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V16) -> ('un--replaceTailCall'(V0, V16)) end, V12))} end(E6, E7, E8)); {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', E11} -> (fun (V17) -> {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', ('un--replaceTailCall'(V0, V17))} end(E11)); _ -> V1 end.
'un--recursiveTailCallGroups'(V0) -> begin (V1 = ('un--kosaraju'(V0))), begin (V8 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V3) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)) end, V2)) end, ('un--groupBy'('erased', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V4)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V5)))) end end, ('Idris.Idris2.Data.List':'un--sortBy'('erased', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V6)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V7)))) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--toList'('erased', 'erased', V1))))))))), ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'('erased', 'erased', V8, fun (V9) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V12, V13)) end end end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'('erased', 'erased', V18, V19)) end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'('erased', 'erased', V22, V23)) end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_List'('erased', V25)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V28, V29)) end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_List'('erased', 'erased', V34, V35)) end end end end}, fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_List'('erased')) end, fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_List'('erased', V38, V39)) end end end}, ('nested--7912-1179--in--un--hasTailCalls'(V0, V9)))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', V9)) end)) end)) end end.
'un--makeTailOptimToBody'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)), (1 + 0)))), begin (V5 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V4) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V4)), {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--argsName'())}} end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'((1 + 0), V3))))), begin (V6 = ('Idris.Idris2.Compiler.ES.ImperativeAst':'un--replaceNamesExpS'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V1, V5)), V2))), begin (V7 = ('un--replaceTailCall'(V0, V6))), begin (V8 = {'Idris.Compiler.ES.ImperativeAst.FunDecl', {'Idris.Core.FC.EmptyFC'}, ('un--stepFnName'()), [('un--argsName'()) | []], V7}), begin (V9 = {'Idris.Compiler.ES.ImperativeAst.MutateStatement', ('un--argsName'()), {'Idris.Compiler.ES.ImperativeAst.IEApp', {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--stepFnName'())}, [{'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--argsName'())} | []]}}), begin (V10 = {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', 1, {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--argsName'())}}}), begin (V11 = {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--argsName'())}}, [{'Idris.Builtin.MkPair', {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', {'Idris.Prelude.Types.Left', 0}}, V9} | []], {'Idris.Prelude.Types.Just', V10}}}), ('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(('Idris.Idris2.Compiler.ES.ImperativeAst':'dn--un--<+>_Semigroup_ImperativeStatement'(V8, ('un--createArgInit'(V1)))), V11)) end end end end end end end end.
'un--makeFusionBranch'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> begin (V10 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V9) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V9)), {'Idris.Compiler.ES.ImperativeAst.IEVar', ('un--fusionArgsName'())}} end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V7))))))), begin (V11 = ('Idris.Idris2.Compiler.ES.ImperativeAst':'un--replaceNamesExpS'(('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V7, V10)), V8))), {'Idris.Builtin.MkPair', {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V3))}}, ('Idris.Idris2.Compiler.ES.ImperativeAst':'un--replaceExpS'(fun (V12) -> ('nested--8208-1463--in--un--rep'(V5, V3, V7, V8, V1, V0, V12)) end, V11))} end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--kosarajuL'(V0, V1, V2) -> case V1 of [] -> {'Idris.Builtin.MkPair', V0, []}; [E0 | E1] -> (fun (V3, V4) -> ('case--kosarajuL-813'(V3, V4, V2, V0, ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'('erased', V3, V0)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--kosarajuAssign'(V0, V1, V2, V3) -> ('case--kosarajuAssign-911'(V3, V2, V1, V0, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'('erased', 'erased', V1, V3)))).
'un--kosaraju'(V0) -> begin (V21 = ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', ('un--kosarajuL'(('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V3, V4)) end end}, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V17, V18)) end end})), ('Idris.Idris2.Libraries.Data.SortedMap':'un--keys'('erased', 'erased', case V0 of {'Idris.Compiler.ES.TailRec.MkCallGraph', E0, E1} -> (fun (V19, V20) -> V19 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V0))))), ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V22) -> fun (V23) -> ('un--kosarajuAssign'(V0, V23, V23, V22)) end end, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V26, V27)) end end}, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V40, V41)) end end})), V21)) end.
'un--groupBy'(V0, V1, V2) -> case V2 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> ('case--groupBy-1155'('erased', V3, V4, V1, ('nested--7709-1007--in--un--go'('erased', V3, V4, V1, V1, V3, V4)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getDef'(V0, V1) -> ('case--getDef-1423'(V1, V0, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'('erased', 'erased', V1, V0)))).
'un--genName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = V5), begin (V8 = begin (V7 = ('erlang':'put'(V0, ((V6 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', <<"imp_gen_tailoptim"/utf8>>, V6}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fusionArgsName'() -> {'Idris.Core.Name.MN', <<"imp_gen_tailoptim_fusion_args"/utf8>>, 0}.
'un--extractFunctions'(V0, V1) -> case V1 of {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V2, V3) -> ('case--extractFunctions-1309'(V3, V2, V0, ('un--extractFunctions'(V0, V2)))) end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.FunDecl', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> begin (V8 = {'Idris.Compiler.ES.ImperativeAst.FunDecl', V4, V5, V6, V7}), ('case--extractFunctions-1352'(V7, V6, V5, V4, V8, V0, ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'('erased', V5, V0)))) end end(E2, E3, E4, E5)); _ -> {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V25, V26)) end end}))} end.
'un--createNewArgs'(V0) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', 0}, V0}.
'un--createArgInit'(V0) -> {'Idris.Compiler.ES.ImperativeAst.LetDecl', ('un--argsName'()), {'Idris.Prelude.Types.Just', {'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', 0}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V1) -> {'Idris.Compiler.ES.ImperativeAst.IEVar', V1} end, V0))}}}.
'un--changeBodyToUseFusion'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V8, V9) -> {'Idris.Compiler.ES.ImperativeAst.FunDecl', V6, V4, V8, {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', {'Idris.Compiler.ES.ImperativeAst.IEApp', {'Idris.Compiler.ES.ImperativeAst.IEVar', V0}, [{'Idris.Compiler.ES.ImperativeAst.IEConstructor', {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(V2))}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> {'Idris.Compiler.ES.ImperativeAst.IEVar', V10} end, V8))} | []]}}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--argsName'() -> {'Idris.Core.Name.MN', <<"imp_gen_tailoptim_Args"/utf8>>, 0}.
'un--allTailCalls'(V0) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V1, V2) -> ('un--allTailCalls'(V2)) end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', E2} -> (fun (V3) -> case V3 of {'Idris.Compiler.ES.ImperativeAst.IEApp', E3, E4} -> (fun (V4, V5) -> case V4 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E5} -> (fun (V6) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'('erased', V6, ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V23, V24)) end end})))) end(E5)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V39, V40)) end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V41, V42)) end end})) end end(E3, E4)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V43) -> fun (V44) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V43, V44)) end end, fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V45, V46)) end end}, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V59, V60)) end end})) end end(E2)); {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', E6, E7, E8} -> (fun (V61, V62, V63) -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--union'('erased', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V66, V67)) end end}, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V72, V73)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V74, V75)) end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V76, V77)) end end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V80, V81)) end end})) end, fun () -> fun (V82) -> ('un--allTailCalls'(V82)) end end, V63)), (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V92, V93, V94)) end end end end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V96)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V97) -> fun (V98) -> ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--<+>_Semigroup_(SortedSet $k)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V99, V100)) end end, fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V101, V102)) end end}, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V107, V108)) end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V109, V110)) end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V113, V114)) end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V115, V116)) end end}, V97, V98)) end end, ('Idris.Idris2.Libraries.Data.SortedSet':'dn--un--neutral_Monoid_(SortedSet $k)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V117, V118)) end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V119, V120)) end end}, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V121, V122)) end end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V125, V126)) end end, fun (V127) -> fun (V128) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V127, V128)) end end, fun (V129) -> fun (V130) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V129, V130)) end end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V131, V132)) end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V133, V134)) end end}))}}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V83) -> ('un--allTailCalls'(V83)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V84) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V84)) end, V62)))))))) end(E6, E7, E8)); {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', E9} -> (fun (V135) -> ('un--allTailCalls'(V135)) end(E9)); _ -> ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V136) -> fun (V137) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V136, V137)) end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V138, V139)) end end}, fun (V140) -> fun (V141) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V140, V141)) end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V142, V143)) end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V144, V145)) end end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V146, V147)) end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V148, V149)) end end, fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V150, V151)) end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V152, V153)) end end})) end.
