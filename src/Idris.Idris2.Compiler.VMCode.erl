-module('Idris.Idris2.Compiler.VMCode').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--allDefs-2238'/1,
  'case--declareVars,declareAll-2176'/6,
  'case--show-1500'/4,
  'nested--7591-1917--in--un--toVMConstAlt'/7,
  'nested--7591-1852--in--un--toVMConAlt'/7,
  'nested--7591-1851--in--un--projectArgs'/8,
  'nested--7825-2047--in--un--findVarAlt'/4,
  'nested--7825-2098--in--un--findConstVarAlt'/4,
  'nested--8020-2161--in--un--declareAll'/4,
  'dn--un--show_Show_VMInst'/1,
  'dn--un--show_Show_VMDef'/1,
  'dn--un--show_Show_Reg'/1,
  'dn--un--showPrec_Show_VMInst'/2,
  'dn--un--showPrec_Show_VMDef'/2,
  'dn--un--showPrec_Show_Reg'/2,
  'dn--un--__Impl_Show_VMInst'/0,
  'dn--un--__Impl_Show_VMDef'/0,
  'dn--un--__Impl_Show_Reg'/0,
  'un--toVMDef'/1,
  'un--toVM'/3,
  'un--toReg'/1,
  'un--findVars'/1,
  'un--declareVars'/2,
  'un--allDefs'/1
]).
'case--allDefs-2238'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('un--toVMDef'(V2)), fun (V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Builtin.MkPair', V1, V3})) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--declareVars,declareAll-2176'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('nested--8020-2161--in--un--declareAll'(V0, V1, V4, V3)); 1 -> [{'Idris.Compiler.VMCode.DECLARE', {'Idris.Compiler.VMCode.Loc', V2}} | ('nested--8020-2161--in--un--declareAll'(V0, V1, [V2 | V4], V3))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--show-1500'(V0, V1, V2, V3) -> case V2 of 0 -> <<"TAILCALL "/utf8>>; 1 -> <<"CALL "/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7591-1917--in--un--toVMConstAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Compiler.ANF.MkAConstAlt', E0, E1} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', V7, ('un--toVM'(V5, V4, V8))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7591-1852--in--un--toVMConAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Compiler.ANF.MkAConAlt', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V8 of {'Idris.Prelude.Types.Just', E4} -> (fun (V11) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Left', V11}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('nested--7591-1851--in--un--projectArgs'(V0, V1, V2, V3, V4, V5, 0, V9)), ('un--toVM'(V5, V4, V10))))} end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Right', V7}, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('nested--7591-1851--in--un--projectArgs'(V0, V1, V2, V3, V4, V5, 0, V9)), ('un--toVM'(V5, V4, V10))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7591-1851--in--un--projectArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> [{'Idris.Compiler.VMCode.PROJECT', {'Idris.Compiler.VMCode.Loc', V8}, {'Idris.Compiler.VMCode.Loc', V0}, V6} | ('nested--7591-1851--in--un--projectArgs'(V0, V1, V2, V3, V4, V5, ((V6 + 1) rem 9223372036854775808), V9))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7825-2047--in--un--findVarAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V17)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V18, V19)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V20) -> ('un--findVars'(V20)) end))(V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7825-2098--in--un--findConstVarAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V17)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V18, V19)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V20) -> ('un--findVars'(V20)) end))(V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8020-2161--in--un--declareAll'(V0, V1, V2, V3) -> case V3 of [] -> [{'Idris.Compiler.VMCode.START'} | V0]; [E0 | E1] -> (fun (V4, V5) -> ('case--declareVars,declareAll-2176'(V0, V1, V4, V5, V2, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8, V9)) end end}, V4, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_VMInst'(V0) -> case V0 of {'Idris.Compiler.VMCode.DECLARE', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"DECLARE "/utf8>>, ('dn--un--show_Show_Reg'(V1)))) end(E0)); {'Idris.Compiler.VMCode.START'} -> (fun () -> <<"START"/utf8>> end()); {'Idris.Compiler.VMCode.ASSIGN', E1, E2} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('dn--un--show_Show_Reg'(V3)))))) end(E1, E2)); {'Idris.Compiler.VMCode.MKCON', E3, E4, E5} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := MKCON "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V8, V9)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V11, V12)) end end}}, V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> ('dn--un--show_Show_Reg'(V13)) end, V6)))), <<")"/utf8>>)))))))))) end(E3, E4, E5)); {'Idris.Compiler.VMCode.MKCLOSURE', E6, E7, E8, E9} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := MKCLOSURE "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> ('dn--un--show_Show_Reg'(V18)) end, V17)))), <<")"/utf8>>)))))))))))))) end(E6, E7, E8, E9)); {'Idris.Compiler.VMCode.MKCONSTANT', E10, E11} -> (fun (V19, V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := MKCONSTANT "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V20)))))) end(E10, E11)); {'Idris.Compiler.VMCode.APPLY', E12, E13, E14} -> (fun (V21, V22, V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" @ "/utf8>>, ('dn--un--show_Show_Reg'(V23)))))))))) end(E12, E13, E14)); {'Idris.Compiler.VMCode.CALL', E15, E16, E17, E18} -> (fun (V24, V25, V26, V27) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V25 of 0 -> <<"TAILCALL "/utf8>>; 1 -> <<"CALL "/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V28) -> ('dn--un--show_Show_Reg'(V28)) end, V27)))), <<")"/utf8>>)))))))))))) end(E15, E16, E17, E18)); {'Idris.Compiler.VMCode.OP', E19, E20, E21} -> (fun (V29, V30, V31) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V29)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OP "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V30)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V32) -> ('dn--un--show_Show_Reg'(V32)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V44)) end end}))(V31)))))), <<")"/utf8>>)))))))))))) end(E19, E20, E21)); {'Idris.Compiler.VMCode.EXTPRIM', E22, E23, E24} -> (fun (V45, V46, V47) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V45)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"EXTPRIM "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V48) -> ('dn--un--show_Show_Reg'(V48)) end, V47)))), <<")"/utf8>>)))))))))))) end(E22, E23, E24)); {'Idris.Compiler.VMCode.CASE', E25, E26, E27} -> (fun (V49, V50, V51) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CASE "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V49)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V53) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V55, V56)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V58, V59)) end end}}, V53)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_((Either $a) $b)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V62) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V62)) end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V63, V64)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V66, V67)) end end}}, V60, V61)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V69) -> ('dn--un--show_Show_VMInst'(V69)) end, fun (V70) -> fun (V71) -> ('dn--un--showPrec_Show_VMInst'(V70, V71)) end end}, V68)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V74) -> ('dn--un--show_Show_VMInst'(V74)) end, fun (V75) -> fun (V76) -> ('dn--un--showPrec_Show_VMInst'(V75, V76)) end end}, V72, V73)) end end}}, V52)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V81, V82)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V83) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V84, V85)) end end}}, V79)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_((Either $a) $b)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V88) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V88)) end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V89, V90)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V92, V93)) end end}}, V86, V87)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V94) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V95) -> ('dn--un--show_Show_VMInst'(V95)) end, fun (V96) -> fun (V97) -> ('dn--un--showPrec_Show_VMInst'(V96, V97)) end end}, V94)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V100) -> ('dn--un--show_Show_VMInst'(V100)) end, fun (V101) -> fun (V102) -> ('dn--un--showPrec_Show_VMInst'(V101, V102)) end end}, V98, V99)) end end}}, V77, V78)) end end}, V50)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {default: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V103) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V104) -> ('dn--un--show_Show_VMInst'(V104)) end, fun (V105) -> fun (V106) -> ('dn--un--showPrec_Show_VMInst'(V105, V106)) end end}, V103)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('dn--un--show_Show_VMInst'(V109)) end, fun (V110) -> fun (V111) -> ('dn--un--showPrec_Show_VMInst'(V110, V111)) end end}, V107, V108)) end end}, V51)), <<"}"/utf8>>)))))))))))) end(E25, E26, E27)); {'Idris.Compiler.VMCode.CONSTCASE', E28, E29, E30} -> (fun (V112, V113, V114) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CASE "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V112)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V115) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V116) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V116)) end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V117, V118)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V119) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V120) -> ('dn--un--show_Show_VMInst'(V120)) end, fun (V121) -> fun (V122) -> ('dn--un--showPrec_Show_VMInst'(V121, V122)) end end}, V119)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V125) -> ('dn--un--show_Show_VMInst'(V125)) end, fun (V126) -> fun (V127) -> ('dn--un--showPrec_Show_VMInst'(V126, V127)) end end}, V123, V124)) end end}}, V115)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V130) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V130)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V131, V132)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V133) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V134) -> ('dn--un--show_Show_VMInst'(V134)) end, fun (V135) -> fun (V136) -> ('dn--un--showPrec_Show_VMInst'(V135, V136)) end end}, V133)) end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V139) -> ('dn--un--show_Show_VMInst'(V139)) end, fun (V140) -> fun (V141) -> ('dn--un--showPrec_Show_VMInst'(V140, V141)) end end}, V137, V138)) end end}}, V128, V129)) end end}, V113)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {default: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V142) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V143) -> ('dn--un--show_Show_VMInst'(V143)) end, fun (V144) -> fun (V145) -> ('dn--un--showPrec_Show_VMInst'(V144, V145)) end end}, V142)) end, fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V148) -> ('dn--un--show_Show_VMInst'(V148)) end, fun (V149) -> fun (V150) -> ('dn--un--showPrec_Show_VMInst'(V149, V150)) end end}, V146, V147)) end end}, V114)), <<"}"/utf8>>)))))))))))) end(E28, E29, E30)); {'Idris.Compiler.VMCode.PROJECT', E31, E32, E33} -> (fun (V151, V152, V153) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V151)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := PROJECT("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V152)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V153)), <<")"/utf8>>)))))))))) end(E31, E32, E33)); {'Idris.Compiler.VMCode.NULL', E34} -> (fun (V154) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V154)), <<" := NULL"/utf8>>)) end(E34)); {'Idris.Compiler.VMCode.ERROR', E35} -> (fun (V155) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"ERROR "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V155)))) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_VMDef'(V0) -> case V0 of {'Idris.Compiler.VMCode.MkVMFun', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V4, V5)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V6) -> ('dn--un--show_Show_VMInst'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--showPrec_Show_VMInst'(V7, V8)) end end}, V2)))))) end(E0, E1)); {'Idris.Compiler.VMCode.MkVMError', E2} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V10) -> ('dn--un--show_Show_VMInst'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--showPrec_Show_VMInst'(V11, V12)) end end}, V9)))) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Reg'(V0) -> case V0 of {'Idris.Compiler.VMCode.RVal'} -> (fun () -> <<"RVAL"/utf8>> end()); {'Idris.Compiler.VMCode.Loc', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"v"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))) end(E0)); {'Idris.Compiler.VMCode.Discard'} -> (fun () -> <<"DISCARD"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_VMInst'(V0, V1) -> ('dn--un--show_Show_VMInst'(V1)).
'dn--un--showPrec_Show_VMDef'(V0, V1) -> ('dn--un--show_Show_VMDef'(V1)).
'dn--un--showPrec_Show_Reg'(V0, V1) -> ('dn--un--show_Show_Reg'(V1)).
'dn--un--__Impl_Show_VMInst'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_VMInst'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_VMInst'(V1, V2)) end end}.
'dn--un--__Impl_Show_VMDef'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_VMDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_VMDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_Reg'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_Reg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Reg'(V1, V2)) end end}.
'un--toVMDef'(V0) -> case V0 of {'Idris.Compiler.ANF.MkAFun', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', {'Idris.Compiler.VMCode.MkVMFun', V1, ('un--declareVars'(V1, ('un--toVM'(0, {'Idris.Compiler.VMCode.RVal'}, V2))))}} end(E0, E1)); {'Idris.Compiler.ANF.MkAError', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', {'Idris.Compiler.VMCode.MkVMError', ('un--declareVars'([], ('un--toVM'(0, {'Idris.Compiler.VMCode.RVal'}, V3))))}} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--toVM'(V0, V1, V2) -> case V1 of {'Idris.Compiler.VMCode.Discard'} -> (fun () -> [] end()); _ -> case V2 of {'Idris.Compiler.ANF.AV', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Compiler.ANF.ALocal', E2} -> (fun (V5) -> [{'Idris.Compiler.VMCode.ASSIGN', V1, {'Idris.Compiler.VMCode.Loc', V5}} | []] end(E2)); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end(E0, E1)); {'Idris.Compiler.ANF.AAppName', E3, E4, E5, E6} -> (fun (V6, V7, V8, V9) -> [{'Idris.Compiler.VMCode.CALL', V1, V0, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> ('un--toReg'(V10)) end, V9))} | []] end(E3, E4, E5, E6)); {'Idris.Compiler.ANF.AUnderApp', E7, E8, E9, E10} -> (fun (V11, V12, V13, V14) -> [{'Idris.Compiler.VMCode.MKCLOSURE', V1, V12, V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V15) -> ('un--toReg'(V15)) end, V14))} | []] end(E7, E8, E9, E10)); {'Idris.Compiler.ANF.AApp', E11, E12, E13, E14} -> (fun (V16, V17, V18, V19) -> [{'Idris.Compiler.VMCode.APPLY', V1, ('un--toReg'(V18)), ('un--toReg'(V19))} | []] end(E11, E12, E13, E14)); {'Idris.Compiler.ANF.ALet', E15, E16, E17, E18} -> (fun (V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--toVM'(1, {'Idris.Compiler.VMCode.Loc', V21}, V22)), ('un--toVM'(V0, V1, V23)))) end(E15, E16, E17, E18)); {'Idris.Compiler.ANF.ACon', E19, E20, E21, E22} -> (fun (V24, V25, V26, V27) -> case V26 of {'Idris.Prelude.Types.Just', E23} -> (fun (V28) -> [{'Idris.Compiler.VMCode.MKCON', V1, {'Idris.Prelude.Types.Left', V28}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V29) -> ('un--toReg'(V29)) end, V27))} | []] end(E23)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> [{'Idris.Compiler.VMCode.MKCON', V1, {'Idris.Prelude.Types.Right', V25}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V30) -> ('un--toReg'(V30)) end, V27))} | []] end()); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end(E19, E20, E21, E22)); {'Idris.Compiler.ANF.AOp', E24, E25, E26, E27} -> (fun (V31, V32, V33, V34) -> [{'Idris.Compiler.VMCode.OP', V1, V33, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'('erased', 'erased', 'erased', fun (V35) -> ('un--toReg'(V35)) end, V34))} | []] end(E24, E25, E26, E27)); {'Idris.Compiler.ANF.AExtPrim', E28, E29, E30, E31} -> (fun (V36, V37, V38, V39) -> [{'Idris.Compiler.VMCode.EXTPRIM', V1, V38, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V40) -> ('un--toReg'(V40)) end, V39))} | []] end(E28, E29, E30, E31)); {'Idris.Compiler.ANF.AConCase', E32, E33, E34, E35} -> (fun (V41, V42, V43, V44) -> case V42 of {'Idris.Compiler.ANF.ALocal', E36} -> (fun (V45) -> [{'Idris.Compiler.VMCode.CASE', {'Idris.Compiler.VMCode.Loc', V45}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V46) -> ('nested--7591-1852--in--un--toVMConAlt'(V45, V44, V43, V41, V1, V0, V46)) end, V43)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V47) -> ('un--toVM'(V0, V1, V47)) end, V44))} | []] end(E36)); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end(E32, E33, E34, E35)); {'Idris.Compiler.ANF.AConstCase', E37, E38, E39, E40} -> (fun (V48, V49, V50, V51) -> case V49 of {'Idris.Compiler.ANF.ALocal', E41} -> (fun (V52) -> [{'Idris.Compiler.VMCode.CONSTCASE', {'Idris.Compiler.VMCode.Loc', V52}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V53) -> ('nested--7591-1917--in--un--toVMConstAlt'(V52, V51, V50, V48, V1, V0, V53)) end, V50)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V54) -> ('un--toVM'(V0, V1, V54)) end, V51))} | []] end(E41)); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end(E37, E38, E39, E40)); {'Idris.Compiler.ANF.APrimVal', E42, E43} -> (fun (V55, V56) -> [{'Idris.Compiler.VMCode.MKCONSTANT', V1, V56} | []] end(E42, E43)); {'Idris.Compiler.ANF.AErased', E44} -> (fun (V57) -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end(E44)); {'Idris.Compiler.ANF.ACrash', E45, E46} -> (fun (V58, V59) -> [{'Idris.Compiler.VMCode.ERROR', V59} | []] end(E45, E46)); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end.
'un--toReg'(V0) -> case V0 of {'Idris.Compiler.ANF.ALocal', E0} -> (fun (V1) -> {'Idris.Compiler.VMCode.Loc', V1} end(E0)); {'Idris.Compiler.ANF.ANull'} -> (fun () -> {'Idris.Compiler.VMCode.Discard'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findVars'(V0) -> case V0 of {'Idris.Compiler.VMCode.ASSIGN', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Compiler.VMCode.Loc', E2} -> (fun (V3) -> [V3 | []] end(E2)); _ -> [] end end(E0, E1)); {'Idris.Compiler.VMCode.MKCON', E3, E4, E5} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Compiler.VMCode.Loc', E6} -> (fun (V7) -> [V7 | []] end(E6)); _ -> [] end end(E3, E4, E5)); {'Idris.Compiler.VMCode.MKCLOSURE', E7, E8, E9, E10} -> (fun (V8, V9, V10, V11) -> case V8 of {'Idris.Compiler.VMCode.Loc', E11} -> (fun (V12) -> [V12 | []] end(E11)); _ -> [] end end(E7, E8, E9, E10)); {'Idris.Compiler.VMCode.MKCONSTANT', E12, E13} -> (fun (V13, V14) -> case V13 of {'Idris.Compiler.VMCode.Loc', E14} -> (fun (V15) -> [V15 | []] end(E14)); _ -> [] end end(E12, E13)); {'Idris.Compiler.VMCode.APPLY', E15, E16, E17} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Compiler.VMCode.Loc', E18} -> (fun (V19) -> [V19 | []] end(E18)); _ -> [] end end(E15, E16, E17)); {'Idris.Compiler.VMCode.CALL', E19, E20, E21, E22} -> (fun (V20, V21, V22, V23) -> case V20 of {'Idris.Compiler.VMCode.Loc', E23} -> (fun (V24) -> [V24 | []] end(E23)); _ -> [] end end(E19, E20, E21, E22)); {'Idris.Compiler.VMCode.OP', E24, E25, E26} -> (fun (V25, V26, V27) -> case V25 of {'Idris.Compiler.VMCode.Loc', E27} -> (fun (V28) -> [V28 | []] end(E27)); _ -> [] end end(E24, E25, E26)); {'Idris.Compiler.VMCode.EXTPRIM', E28, E29, E30} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Compiler.VMCode.Loc', E31} -> (fun (V32) -> [V32 | []] end(E31)); _ -> [] end end(E28, E29, E30)); {'Idris.Compiler.VMCode.CASE', E32, E33, E34} -> (fun (V33, V34, V35) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V47)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V48, V49)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V50) -> ('nested--7825-2047--in--un--findVarAlt'(V33, V35, V34, V50)) end))(V34)), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> [] end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V62)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V63, V64)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V65) -> ('un--findVars'(V65)) end)), V35)))))) end(E32, E33, E34)); {'Idris.Compiler.VMCode.CONSTCASE', E35, E36, E37} -> (fun (V66, V67, V68) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V71, V72, V73)) end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V76, V77, V78)) end end end end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V80)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V81, V82)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V83) -> ('nested--7825-2098--in--un--findConstVarAlt'(V66, V68, V67, V83)) end))(V67)), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> [] end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V91, V92, V93)) end end end end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V95)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V96, V97)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V98) -> ('un--findVars'(V98)) end)), V68)))))) end(E35, E36, E37)); {'Idris.Compiler.VMCode.PROJECT', E38, E39, E40} -> (fun (V99, V100, V101) -> case V99 of {'Idris.Compiler.VMCode.Loc', E41} -> (fun (V102) -> [V102 | []] end(E41)); _ -> [] end end(E38, E39, E40)); _ -> [] end.
'un--declareVars'(V0, V1) -> begin (V17 = (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V13)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V14, V15)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V16) -> ('un--findVars'(V16)) end))(V1))), ('nested--8020-2161--in--un--declareAll'(V1, V0, V0, V17)) end.
'un--allDefs'(V0) -> ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('un--toVMDef'(V3)), fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Builtin.MkPair', V2, V4})) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0)).
