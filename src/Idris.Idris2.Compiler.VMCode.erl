-module('Idris.Idris2.Compiler.VMCode').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6035-2369--in--un--toVMConstAlt'/7,
  'nested--6035-2304--in--un--toVMConAlt'/7,
  'nested--6035-2303--in--un--projectArgs'/8,
  'nested--6271-2499--in--un--findVarAlt'/4,
  'nested--6271-2550--in--un--findConstVarAlt'/4,
  'nested--6466-2613--in--un--declareAll'/4,
  'dn--un--show_Show_VMInst'/1,
  'dn--un--show_Show_VMDef'/1,
  'dn--un--show_Show_Reg'/1,
  'dn--un--showPrec_Show_VMInst'/2,
  'dn--un--showPrec_Show_VMDef'/2,
  'dn--un--showPrec_Show_Reg'/2,
  'dn--un--__Impl_Show_VMInst'/0,
  'dn--un--__Impl_Show_VMDef'/0,
  'dn--un--__Impl_Show_Reg'/0,
  'un--toVMDef'/1,
  'un--toVM'/3,
  'un--toReg'/1,
  'un--findVars'/1,
  'un--declareVars'/2,
  'un--allDefs'/1
]).
'nested--6035-2369--in--un--toVMConstAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Compiler.ANF.MkAConstAlt', E0, E1} -> (fun (V7, V8) -> {'Idris.Builtin.MkPair', V7, ('un--toVM'(V5, V4, V8))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6035-2304--in--un--toVMConAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Compiler.ANF.MkAConAlt', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> case V9 of {'Idris.Prelude.Types.Just', E5} -> (fun (V12) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Left', V12}, ('Idris.Idris2.Prelude.Types.List':'un--++'(('nested--6035-2303--in--un--projectArgs'(V0, V1, V2, V3, V4, V5, 0, V10)), ('un--toVM'(V5, V4, V11))))} end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Right', V7}, ('Idris.Idris2.Prelude.Types.List':'un--++'(('nested--6035-2303--in--un--projectArgs'(V0, V1, V2, V3, V4, V5, 0, V10)), ('un--toVM'(V5, V4, V11))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6035-2303--in--un--projectArgs'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> []; [E0 | E1] -> (fun (V8, V9) -> [{'Idris.Compiler.VMCode.PROJECT', {'Idris.Compiler.VMCode.Loc', V8}, {'Idris.Compiler.VMCode.Loc', V0}, V6} | ('nested--6035-2303--in--un--projectArgs'(V0, V1, V2, V3, V4, V5, ((V6 + 1) rem 9223372036854775808), V9))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6271-2499--in--un--findVarAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V32, V33)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V34) -> ('un--findVars'(V34)) end, V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6271-2550--in--un--findConstVarAlt'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V17)) end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V21, V22, V23, V24)) end end end end end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V26)) end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V29, V30, V31)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V32, V33)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V34) -> ('un--findVars'(V34)) end, V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6466-2613--in--un--declareAll'(V0, V1, V2, V3) -> case V3 of [] -> [{'Idris.Compiler.VMCode.START'} | V0]; [E0 | E1] -> (fun (V4, V5) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V8, V9)) end end}, V4, V2)) of 1 -> ('nested--6466-2613--in--un--declareAll'(V0, V1, V2, V5)); 0 -> [{'Idris.Compiler.VMCode.DECLARE', {'Idris.Compiler.VMCode.Loc', V4}} | ('nested--6466-2613--in--un--declareAll'(V0, V1, [V4 | V2], V5))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_VMInst'(V0) -> case V0 of {'Idris.Compiler.VMCode.DECLARE', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"DECLARE "/utf8>>, ('dn--un--show_Show_Reg'(V1)))) end(E0)); {'Idris.Compiler.VMCode.START'} -> (fun () -> <<"START"/utf8>> end()); {'Idris.Compiler.VMCode.ASSIGN', E1, E2} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('dn--un--show_Show_Reg'(V3)))))) end(E1, E2)); {'Idris.Compiler.VMCode.MKCON', E3, E4, E5} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := MKCON "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V8, V9)) end end}, {'Idris.Prelude.Show.MkShow', fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V11, V12)) end end}}, V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> ('dn--un--show_Show_Reg'(V13)) end, V6)))), <<")"/utf8>>)))))))))) end(E3, E4, E5)); {'Idris.Compiler.VMCode.MKCLOSURE', E6, E7, E8, E9} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := MKCLOSURE "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V18) -> ('dn--un--show_Show_Reg'(V18)) end, V17)))), <<")"/utf8>>)))))))))))))) end(E6, E7, E8, E9)); {'Idris.Compiler.VMCode.MKCONSTANT', E10, E11} -> (fun (V19, V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := MKCONSTANT "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V20)))))) end(E10, E11)); {'Idris.Compiler.VMCode.APPLY', E12, E13, E14} -> (fun (V21, V22, V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V22)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" @ "/utf8>>, ('dn--un--show_Show_Reg'(V23)))))))))) end(E12, E13, E14)); {'Idris.Compiler.VMCode.CALL', E15, E16, E17, E18} -> (fun (V24, V25, V26, V27) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V25 of 1 -> <<"TAILCALL "/utf8>>; 0 -> <<"CALL "/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V28) -> ('dn--un--show_Show_Reg'(V28)) end, V27)))), <<")"/utf8>>)))))))))))) end(E15, E16, E17, E18)); {'Idris.Compiler.VMCode.OP', E19, E20, E21} -> (fun (V29, V30, V31) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V29)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OP "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V30)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V32) -> ('dn--un--show_Show_Reg'(V32)) end, ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V31)))))), <<")"/utf8>>)))))))))))) end(E19, E20, E21)); {'Idris.Compiler.VMCode.EXTPRIM', E22, E23, E24} -> (fun (V33, V34, V35) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V33)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"EXTPRIM "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V34)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V36) -> ('dn--un--show_Show_Reg'(V36)) end, V35)))), <<")"/utf8>>)))))))))))) end(E22, E23, E24)); {'Idris.Compiler.VMCode.CASE', E25, E26, E27} -> (fun (V37, V38, V39) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CASE "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V37)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V43, V44)) end end}, {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V46, V47)) end end}}, V41)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_((Either $a) $b)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V50)) end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V51, V52)) end end}, {'Idris.Prelude.Show.MkShow', fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53)) end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V54, V55)) end end}}, V48, V49)) end end}, {'Idris.Prelude.Show.MkShow', fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V57) -> ('dn--un--show_Show_VMInst'(V57)) end, fun (V58) -> fun (V59) -> ('dn--un--showPrec_Show_VMInst'(V58, V59)) end end}, V56)) end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V62) -> ('dn--un--show_Show_VMInst'(V62)) end, fun (V63) -> fun (V64) -> ('dn--un--showPrec_Show_VMInst'(V63, V64)) end end}, V60, V61)) end end}}, V40)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V67) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V68)) end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V69, V70)) end end}, {'Idris.Prelude.Show.MkShow', fun (V71) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V71)) end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V72, V73)) end end}}, V67)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_((Either $a) $b)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V77, V78)) end end}, {'Idris.Prelude.Show.MkShow', fun (V79) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V80, V81)) end end}}, V74, V75)) end end}, {'Idris.Prelude.Show.MkShow', fun (V82) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V83) -> ('dn--un--show_Show_VMInst'(V83)) end, fun (V84) -> fun (V85) -> ('dn--un--showPrec_Show_VMInst'(V84, V85)) end end}, V82)) end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V88) -> ('dn--un--show_Show_VMInst'(V88)) end, fun (V89) -> fun (V90) -> ('dn--un--showPrec_Show_VMInst'(V89, V90)) end end}, V86, V87)) end end}}, V65, V66)) end end}, V38)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {default: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V92) -> ('dn--un--show_Show_VMInst'(V92)) end, fun (V93) -> fun (V94) -> ('dn--un--showPrec_Show_VMInst'(V93, V94)) end end}, V91)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V97) -> ('dn--un--show_Show_VMInst'(V97)) end, fun (V98) -> fun (V99) -> ('dn--un--showPrec_Show_VMInst'(V98, V99)) end end}, V95, V96)) end end}, V39)), <<"}"/utf8>>)))))))))))) end(E25, E26, E27)); {'Idris.Compiler.VMCode.CONSTCASE', E28, E29, E30} -> (fun (V100, V101, V102) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CASE "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V100)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V103) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V104) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V105, V106)) end end}, {'Idris.Prelude.Show.MkShow', fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V108) -> ('dn--un--show_Show_VMInst'(V108)) end, fun (V109) -> fun (V110) -> ('dn--un--showPrec_Show_VMInst'(V109, V110)) end end}, V107)) end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V113) -> ('dn--un--show_Show_VMInst'(V113)) end, fun (V114) -> fun (V115) -> ('dn--un--showPrec_Show_VMInst'(V114, V115)) end end}, V111, V112)) end end}}, V103)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V118) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_Constant'(V119, V120)) end end}, {'Idris.Prelude.Show.MkShow', fun (V121) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V122) -> ('dn--un--show_Show_VMInst'(V122)) end, fun (V123) -> fun (V124) -> ('dn--un--showPrec_Show_VMInst'(V123, V124)) end end}, V121)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V127) -> ('dn--un--show_Show_VMInst'(V127)) end, fun (V128) -> fun (V129) -> ('dn--un--showPrec_Show_VMInst'(V128, V129)) end end}, V125, V126)) end end}}, V116, V117)) end end}, V101)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" {default: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V130) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V131) -> ('dn--un--show_Show_VMInst'(V131)) end, fun (V132) -> fun (V133) -> ('dn--un--showPrec_Show_VMInst'(V132, V133)) end end}, V130)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V136) -> ('dn--un--show_Show_VMInst'(V136)) end, fun (V137) -> fun (V138) -> ('dn--un--showPrec_Show_VMInst'(V137, V138)) end end}, V134, V135)) end end}, V102)), <<"}"/utf8>>)))))))))))) end(E28, E29, E30)); {'Idris.Compiler.VMCode.PROJECT', E31, E32, E33} -> (fun (V139, V140, V141) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V139)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" := PROJECT("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V140)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V141)), <<")"/utf8>>)))))))))) end(E31, E32, E33)); {'Idris.Compiler.VMCode.NULL', E34} -> (fun (V142) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Reg'(V142)), <<" := NULL"/utf8>>)) end(E34)); {'Idris.Compiler.VMCode.ERROR', E35} -> (fun (V143) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"ERROR "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V143)))) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_VMDef'(V0) -> case V0 of {'Idris.Compiler.VMCode.MkVMFun', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V4, V5)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V6) -> ('dn--un--show_Show_VMInst'(V6)) end, fun (V7) -> fun (V8) -> ('dn--un--showPrec_Show_VMInst'(V7, V8)) end end}, V2)))))) end(E0, E1)); {'Idris.Compiler.VMCode.MkVMError', E2} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V10) -> ('dn--un--show_Show_VMInst'(V10)) end, fun (V11) -> fun (V12) -> ('dn--un--showPrec_Show_VMInst'(V11, V12)) end end}, V9)))) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Reg'(V0) -> case V0 of {'Idris.Compiler.VMCode.RVal'} -> (fun () -> <<"RVAL"/utf8>> end()); {'Idris.Compiler.VMCode.Loc', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"v"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))) end(E0)); {'Idris.Compiler.VMCode.Discard'} -> (fun () -> <<"DISCARD"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_VMInst'(V0, V1) -> ('dn--un--show_Show_VMInst'(V1)).
'dn--un--showPrec_Show_VMDef'(V0, V1) -> ('dn--un--show_Show_VMDef'(V1)).
'dn--un--showPrec_Show_Reg'(V0, V1) -> ('dn--un--show_Show_Reg'(V1)).
'dn--un--__Impl_Show_VMInst'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_VMInst'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_VMInst'(V1, V2)) end end}.
'dn--un--__Impl_Show_VMDef'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_VMDef'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_VMDef'(V1, V2)) end end}.
'dn--un--__Impl_Show_Reg'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Reg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Reg'(V1, V2)) end end}.
'un--toVMDef'(V0) -> case V0 of {'Idris.Compiler.ANF.MkAFun', E0, E1} -> (fun (V1, V2) -> {'Idris.Prelude.Types.Just', {'Idris.Compiler.VMCode.MkVMFun', V1, ('un--declareVars'(V1, ('un--toVM'(1, {'Idris.Compiler.VMCode.RVal'}, V2))))}} end(E0, E1)); {'Idris.Compiler.ANF.MkAError', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', {'Idris.Compiler.VMCode.MkVMError', ('un--declareVars'([], ('un--toVM'(1, {'Idris.Compiler.VMCode.RVal'}, V3))))}} end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--toVM'(V0, V1, V2) -> case V1 of {'Idris.Compiler.VMCode.Discard'} -> (fun () -> [] end()); _ -> case V2 of {'Idris.Compiler.ANF.AV', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Compiler.ANF.ALocal', E2} -> (fun (V5) -> [{'Idris.Compiler.VMCode.ASSIGN', V1, {'Idris.Compiler.VMCode.Loc', V5}} | []] end(E2)); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end(E0, E1)); {'Idris.Compiler.ANF.AAppName', E3, E4, E5, E6} -> (fun (V6, V7, V8, V9) -> [{'Idris.Compiler.VMCode.CALL', V1, V0, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--toReg'(V10)) end, V9))} | []] end(E3, E4, E5, E6)); {'Idris.Compiler.ANF.AUnderApp', E7, E8, E9, E10} -> (fun (V11, V12, V13, V14) -> [{'Idris.Compiler.VMCode.MKCLOSURE', V1, V12, V13, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> ('un--toReg'(V15)) end, V14))} | []] end(E7, E8, E9, E10)); {'Idris.Compiler.ANF.AApp', E11, E12, E13, E14} -> (fun (V16, V17, V18, V19) -> [{'Idris.Compiler.VMCode.APPLY', V1, ('un--toReg'(V18)), ('un--toReg'(V19))} | []] end(E11, E12, E13, E14)); {'Idris.Compiler.ANF.ALet', E15, E16, E17, E18} -> (fun (V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--toVM'(0, {'Idris.Compiler.VMCode.Loc', V21}, V22)), ('un--toVM'(V0, V1, V23)))) end(E15, E16, E17, E18)); {'Idris.Compiler.ANF.ACon', E19, E20, E21, E22, E23} -> (fun (V24, V25, V26, V27, V28) -> case V27 of {'Idris.Prelude.Types.Just', E24} -> (fun (V29) -> [{'Idris.Compiler.VMCode.MKCON', V1, {'Idris.Prelude.Types.Left', V29}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V30) -> ('un--toReg'(V30)) end, V28))} | []] end(E24)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> [{'Idris.Compiler.VMCode.MKCON', V1, {'Idris.Prelude.Types.Right', V25}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V31) -> ('un--toReg'(V31)) end, V28))} | []] end()); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end(E19, E20, E21, E22, E23)); {'Idris.Compiler.ANF.AOp', E25, E26, E27, E28} -> (fun (V32, V33, V34, V35) -> [{'Idris.Compiler.VMCode.OP', V1, V34, ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(fun (V36) -> ('un--toReg'(V36)) end, V35))} | []] end(E25, E26, E27, E28)); {'Idris.Compiler.ANF.AExtPrim', E29, E30, E31, E32} -> (fun (V37, V38, V39, V40) -> [{'Idris.Compiler.VMCode.EXTPRIM', V1, V39, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V41) -> ('un--toReg'(V41)) end, V40))} | []] end(E29, E30, E31, E32)); {'Idris.Compiler.ANF.AConCase', E33, E34, E35, E36} -> (fun (V42, V43, V44, V45) -> case V43 of {'Idris.Compiler.ANF.ALocal', E37} -> (fun (V46) -> [{'Idris.Compiler.VMCode.CASE', {'Idris.Compiler.VMCode.Loc', V46}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('nested--6035-2304--in--un--toVMConAlt'(V46, V45, V44, V42, V1, V0, V47)) end, V44)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V48) -> ('un--toVM'(V0, V1, V48)) end, V45))} | []] end(E37)); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end(E33, E34, E35, E36)); {'Idris.Compiler.ANF.AConstCase', E38, E39, E40, E41} -> (fun (V49, V50, V51, V52) -> case V50 of {'Idris.Compiler.ANF.ALocal', E42} -> (fun (V53) -> [{'Idris.Compiler.VMCode.CONSTCASE', {'Idris.Compiler.VMCode.Loc', V53}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V54) -> ('nested--6035-2369--in--un--toVMConstAlt'(V53, V52, V51, V49, V1, V0, V54)) end, V51)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V55) -> ('un--toVM'(V0, V1, V55)) end, V52))} | []] end(E42)); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end(E38, E39, E40, E41)); {'Idris.Compiler.ANF.APrimVal', E43, E44} -> (fun (V56, V57) -> [{'Idris.Compiler.VMCode.MKCONSTANT', V1, V57} | []] end(E43, E44)); {'Idris.Compiler.ANF.AErased', E45} -> (fun (V58) -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end(E45)); {'Idris.Compiler.ANF.ACrash', E46, E47} -> (fun (V59, V60) -> [{'Idris.Compiler.VMCode.ERROR', V60} | []] end(E46, E47)); _ -> [{'Idris.Compiler.VMCode.NULL', V1} | []] end end.
'un--toReg'(V0) -> case V0 of {'Idris.Compiler.ANF.ALocal', E0} -> (fun (V1) -> {'Idris.Compiler.VMCode.Loc', V1} end(E0)); {'Idris.Compiler.ANF.ANull'} -> (fun () -> {'Idris.Compiler.VMCode.Discard'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findVars'(V0) -> case V0 of {'Idris.Compiler.VMCode.ASSIGN', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Compiler.VMCode.Loc', E2} -> (fun (V3) -> [V3 | []] end(E2)); _ -> [] end end(E0, E1)); {'Idris.Compiler.VMCode.MKCON', E3, E4, E5} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Compiler.VMCode.Loc', E6} -> (fun (V7) -> [V7 | []] end(E6)); _ -> [] end end(E3, E4, E5)); {'Idris.Compiler.VMCode.MKCLOSURE', E7, E8, E9, E10} -> (fun (V8, V9, V10, V11) -> case V8 of {'Idris.Compiler.VMCode.Loc', E11} -> (fun (V12) -> [V12 | []] end(E11)); _ -> [] end end(E7, E8, E9, E10)); {'Idris.Compiler.VMCode.MKCONSTANT', E12, E13} -> (fun (V13, V14) -> case V13 of {'Idris.Compiler.VMCode.Loc', E14} -> (fun (V15) -> [V15 | []] end(E14)); _ -> [] end end(E12, E13)); {'Idris.Compiler.VMCode.APPLY', E15, E16, E17} -> (fun (V16, V17, V18) -> case V16 of {'Idris.Compiler.VMCode.Loc', E18} -> (fun (V19) -> [V19 | []] end(E18)); _ -> [] end end(E15, E16, E17)); {'Idris.Compiler.VMCode.CALL', E19, E20, E21, E22} -> (fun (V20, V21, V22, V23) -> case V20 of {'Idris.Compiler.VMCode.Loc', E23} -> (fun (V24) -> [V24 | []] end(E23)); _ -> [] end end(E19, E20, E21, E22)); {'Idris.Compiler.VMCode.OP', E24, E25, E26} -> (fun (V25, V26, V27) -> case V25 of {'Idris.Compiler.VMCode.Loc', E27} -> (fun (V28) -> [V28 | []] end(E27)); _ -> [] end end(E24, E25, E26)); {'Idris.Compiler.VMCode.EXTPRIM', E28, E29, E30} -> (fun (V29, V30, V31) -> case V29 of {'Idris.Compiler.VMCode.Loc', E31} -> (fun (V32) -> [V32 | []] end(E31)); _ -> [] end end(E28, E29, E30)); {'Idris.Compiler.VMCode.CASE', E32, E33, E34} -> (fun (V33, V34, V35) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V51, V52, V53, V54)) end end end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V56)) end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V59, V60, V61)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V62, V63)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V64) -> ('nested--6271-2499--in--un--findVarAlt'(V33, V35, V34, V64)) end, V34)), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V65) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V68, V69, V70)) end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V73, V74, V75)) end end end end end, fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V77)) end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V81, V82, V83, V84)) end end end end end end end, fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V86)) end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V89, V90, V91)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V92, V93)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V94) -> ('un--findVars'(V94)) end, V65)) end, V35)))))) end(E32, E33, E34)); {'Idris.Compiler.VMCode.CONSTCASE', E35, E36, E37} -> (fun (V95, V96, V97) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V100, V101, V102)) end end end end end, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V105, V106, V107)) end end end end end, fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V109)) end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V113, V114, V115, V116)) end end end end end end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V118)) end end, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V121, V122, V123)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V124, V125)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V126) -> ('nested--6271-2550--in--un--findConstVarAlt'(V95, V97, V96, V126)) end, V96)), ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V127) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V130, V131, V132)) end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V135, V136, V137)) end end end end end, fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V139)) end end, fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V143, V144, V145, V146)) end end end end end end end, fun (V147) -> fun (V148) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V148)) end end, fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V151, V152, V153)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V154, V155)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V156) -> ('un--findVars'(V156)) end, V127)) end, V97)))))) end(E35, E36, E37)); {'Idris.Compiler.VMCode.PROJECT', E38, E39, E40} -> (fun (V157, V158, V159) -> case V157 of {'Idris.Compiler.VMCode.Loc', E41} -> (fun (V160) -> [V160 | []] end(E41)); _ -> [] end end(E38, E39, E40)); _ -> [] end.
'un--declareVars'(V0, V1) -> begin (V31 = ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V28, V29)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V30) -> ('un--findVars'(V30)) end, V1))), ('nested--6466-2613--in--un--declareAll'(V1, V0, V0, V31)) end.
'un--allDefs'(V0) -> ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--toVMDef'(V3)), fun (V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V2, V4})) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0)).
