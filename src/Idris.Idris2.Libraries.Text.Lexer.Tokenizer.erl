-module('Idris.Idris2.Libraries.Text.Lexer.Tokenizer').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--lexTo-5155'/5,
  'case--case block in tokenise-5070'/8,
  'case--tokenise-5013'/8,
  'case--tokenise,getFirstMatch-4922'/11,
  'case--case block in case block in case block in tokenise,getFirstMatch-4674'/29,
  'case--case block in case block in tokenise,getFirstMatch-4531'/28,
  'case--case block in tokenise,getFirstMatch-4454'/24,
  'case--tokenise,getFirstMatch-4387'/16,
  'case--tokenise,getFirstMatch-4286'/11,
  'case--tokenise,getNext-4198'/12,
  'case--tokenise,getCols-4132'/10,
  'nested--4311-4109--in--un--getNext'/11,
  'nested--4311-4110--in--un--getFirstMatch'/9,
  'nested--4311-4108--in--un--getCols'/9,
  'nested--4311-4107--in--un--countNLs'/8,
  'dn--un--show_Show_StopReason'/1,
  'dn--un--showPrec_Show_StopReason'/2,
  'dn--un--pretty_Pretty_StopReason'/2,
  'dn--un--prettyPrec_Pretty_StopReason'/3,
  'dn--un--__Impl_Show_StopReason'/0,
  'dn--un--__Impl_Pretty_StopReason'/0,
  'un--tokenise'/7,
  'un--match'/3,
  'un--lexTo'/4,
  'un--lex'/3,
  'un--compose'/8,
  'un--<|>'/3
]).
'case--lexTo-5155'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V11, V12) -> {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V11, ('Idris.Idris2.Prelude.Types':'un--fastPack'(V12))}}}} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in tokenise-5070'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Right', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V13, V14) -> ('un--tokenise'('erased', V6, V5, V11, V13, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V9, V2)), V14)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', V2)), {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V3, V1}}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tokenise-5013'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', V2)), {'Idris.Builtin.MkPair', {'Idris.Libraries.Text.Lexer.Tokenizer.EndInput'}, {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V3, V1}}}} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('case--case block in tokenise-5070'('erased', V1, V2, V3, V4, V5, V6, ('nested--4311-4110--in--un--getFirstMatch'('erased', V1, V2, V3, V4, V5, V6, V5, V1)))) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tokenise,getFirstMatch-4922'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Right', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Right', V11} end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> case V12 of {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', E2, E3} -> (fun (V13, V14) -> {'Idris.Prelude.Types.Left', V12} end(E2, E3)); _ -> ('nested--4311-4110--in--un--getFirstMatch'('erased', V1, V2, V3, V4, V5, V6, (V7()), V9)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in tokenise,getFirstMatch-4674'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Prelude.Types.Just', E0} -> (fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V30, V31) -> case V31 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V32, V33) -> case V33 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V34, V35) -> begin (V36 = {'Idris.Libraries.Text.Bounded.MkBounded', (V8(V30)), 1, {'Idris.Libraries.Text.Bounded.MkBounds', V24, V25, V32, V34}}), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', [V36 | []], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V22)), [V21 | []])))), {'Idris.Builtin.MkPair', V32, {'Idris.Builtin.MkPair', V34, V35}}}} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', {'Idris.Builtin.MkPair', V4, V3}, {'Idris.Builtin.MkPair', V16, V17}}} end end(E3, E4)); _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', {'Idris.Builtin.MkPair', V4, V3}, {'Idris.Builtin.MkPair', V16, V17}}} end end(E1, E2)); _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', {'Idris.Builtin.MkPair', V4, V3}, {'Idris.Builtin.MkPair', V16, V17}}} end end(E0)); _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', {'Idris.Builtin.MkPair', V4, V3}, {'Idris.Builtin.MkPair', V16, V17}}} end.
'case--case block in case block in tokenise,getFirstMatch-4531'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V24 of {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', E0, E1} -> (fun (V28, V29) -> {'Idris.Prelude.Types.Left', V24} end(E0, E1)); _ -> ('case--case block in case block in case block in tokenise,getFirstMatch-4674'('erased', V1, V2, V3, V4, V5, V6, 'erased', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V23, V24, V25, V26, V27, V22, ('nested--4311-4109--in--un--getNext'('erased', V1, V2, V3, V4, V5, V6, V20, V25, V26, V27)))) end.
'case--case block in tokenise,getFirstMatch-4454'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V26, V27) -> case V27 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V28, V29) -> case V29 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V30, V31) -> case V26 of {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', E8, E9} -> (fun (V32, V33) -> {'Idris.Prelude.Types.Left', V26} end(E8, E9)); _ -> ('case--case block in case block in case block in tokenise,getFirstMatch-4674'('erased', V1, V2, V3, V4, V5, V6, 'erased', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V20, V21, V22, V24, V26, V28, V30, V31, V19, ('nested--4311-4109--in--un--getNext'('erased', V1, V2, V3, V4, V5, V6, V21, V28, V30, V31)))) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tokenise,getFirstMatch-4387'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> case V16 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V21, V22) -> begin (V23 = (V11(V17))), begin (V24 = ((V10())(V23))), begin (V25 = (V9(V23))), begin (V26 = {'Idris.Libraries.Text.Bounded.MkBounded', (V12(V17)), 1, {'Idris.Libraries.Text.Bounded.MkBounds', V4, V3, V19, V21}}), ('case--case block in tokenise,getFirstMatch-4454'('erased', V1, V2, V3, V4, V5, V6, 'erased', V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V23, V24, V25, V26, ('un--tokenise'('erased', V25, V24, V19, V21, [], V22)))) end end end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--tokenise,getFirstMatch-4286'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> begin (V18 = {'Idris.Libraries.Text.Bounded.MkBounded', (V7(V12)), 1, {'Idris.Libraries.Text.Bounded.MkBounds', V4, V3, V14, V16}}), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [V18 | []], {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V16, V17}}}} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end end(E3, E4)); _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end end(E1, E2)); _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end end(E0)); _ -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Lexer.Tokenizer.NoRuleApply'}} end.
'case--tokenise,getNext-4198'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V13, V14) -> begin (V15 = ((V9 + ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('nested--4311-4107--in--un--countNLs'('erased', V1, V2, V3, V4, V5, V6, V13))))) rem 9223372036854775808)), begin (V16 = ('nested--4311-4108--in--un--getCols'('erased', V1, V2, V3, V4, V5, V6, V13, V8))), begin (V17 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--reverse'('erased', V13))))), ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', V16, V14}}})) end end end end(E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--tokenise,getCols-4132'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> case V11 of [] -> ((V7 + ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V10))))) rem 9223372036854775808); _ -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V10)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4311-4109--in--un--getNext'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('case--tokenise,getNext-4198'('erased', V1, V2, V3, V4, V5, V6, V10, V9, V8, V7, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--scan'('erased', V7, [], V10)))).
'nested--4311-4110--in--un--getFirstMatch'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Libraries.Text.Lexer.Tokenizer.Match', E0, E1} -> (fun (V9, V10) -> ('case--tokenise,getFirstMatch-4286'('erased', V1, V2, V3, V4, V5, V6, V10, V9, V8, ('nested--4311-4109--in--un--getNext'('erased', V1, V2, V3, V4, V5, V6, V9, V4, V3, V8)))) end(E0, E1)); {'Idris.Libraries.Text.Lexer.Tokenizer.Compose', E2, E3, E4, E5, E6, E7} -> (fun (V11, V12, V13, V14, V15, V16) -> ('case--tokenise,getFirstMatch-4387'('erased', V1, V2, V3, V4, V5, V6, 'erased', V16, V15, V14, V13, V12, V11, V8, ('nested--4311-4109--in--un--getNext'('erased', V1, V2, V3, V4, V5, V6, V11, V4, V3, V8)))) end(E2, E3, E4, E5, E6, E7)); {'Idris.Libraries.Text.Lexer.Tokenizer.Alt', E8, E9} -> (fun (V17, V18) -> ('case--tokenise,getFirstMatch-4922'('erased', V1, V2, V3, V4, V5, V6, V18, V17, V8, ('nested--4311-4110--in--un--getFirstMatch'('erased', V1, V2, V3, V4, V5, V6, V17, V8)))) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--4311-4108--in--un--getCols'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--tokenise,getCols-4132'('erased', V1, V2, V3, V4, V5, V6, V8, V7, ('Idris.Idris2.Data.List':'un--span'('erased', fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V9, $\x{a})) end, V7)))).
'nested--4311-4107--in--un--countNLs'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V8, $\x{a})) end, V7)))).
'dn--un--show_Show_StopReason'(V0) -> case V0 of {'Idris.Libraries.Text.Lexer.Tokenizer.EndInput'} -> (fun () -> <<"EndInput"/utf8>> end()); {'Idris.Libraries.Text.Lexer.Tokenizer.NoRuleApply'} -> (fun () -> <<"NoRuleApply"/utf8>> end()); {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"ComposeNotClosing "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V4, V5)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V7, V8)) end end}}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V10, V11)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V13, V14)) end end}}, V2)))))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_StopReason'(V0, V1) -> ('dn--un--show_Show_StopReason'(V1)).
'dn--un--pretty_Pretty_StopReason'(V0, V1) -> case V1 of {'Idris.Libraries.Text.Lexer.Tokenizer.EndInput'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"EndInput"/utf8>>)) end()); {'Idris.Libraries.Text.Lexer.Tokenizer.NoRuleApply'} -> (fun () -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"NoRuleApply"/utf8>>)) end()); {'Idris.Libraries.Text.Lexer.Tokenizer.ComposeNotClosing', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"ComposeNotClosing"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'('erased', V5)) end end, fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Int'('erased', V7, V8)) end end end}, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V9) -> fun (V10) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'('erased', V10)) end end, fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Int'('erased', V12, V13)) end end end}}, V2)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'('erased', V15)) end end, fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Int'('erased', V17, V18)) end end end}, {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'('erased', V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--prettyPrec_Pretty_Int'('erased', V22, V23)) end end end}}, V3)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_StopReason'(V0, V1, V2) -> ('dn--un--pretty_Pretty_StopReason'('erased', V2)).
'dn--un--__Impl_Show_StopReason'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_StopReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_StopReason'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_StopReason'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_StopReason'('erased', V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_StopReason'('erased', V3, V4)) end end end}.
'un--tokenise'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', V5)), {'Idris.Builtin.MkPair', {'Idris.Libraries.Text.Lexer.Tokenizer.EndInput'}, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V4, []}}}}; _ -> ('case--tokenise-5013'('erased', V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--scan'('erased', V1, [], V6)))) end.
'un--match'(V0, V1, V2) -> {'Idris.Libraries.Text.Lexer.Tokenizer.Match', V1, V2}.
'un--lexTo'(V0, V1, V2, V3) -> ('case--lexTo-5155'('erased', V3, V2, V1, ('un--tokenise'('erased', V1, V2, 0, 0, [], ('Idris.Idris2.Data.String':'un--fastUnpack'(V3)))))).
'un--lex'(V0, V1, V2) -> ('un--lexTo'('erased', ('Idris.Idris2.Libraries.Text.Lexer.Core':'un--pred'(fun (V3) -> 1 end)), V1, V2)).
'un--compose'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Libraries.Text.Lexer.Tokenizer.Compose', V2, V3, V4, V5, V6, V7}.
'un--<|>'(V0, V1, V2) -> {'Idris.Libraries.Text.Lexer.Tokenizer.Alt', V1, V2}.
