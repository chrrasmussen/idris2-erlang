-module('Idris.Idris2.Idris.REPL').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--displayResult-13034'/6,
  'case--displayResult-12881'/7,
  'case--handleMissing-12623'/2,
  'case--handleMissing\x{27}-12544'/2,
  'case--repl-12460'/9,
  'case--interpret-12284'/7,
  'case--parseRepl-12246'/2,
  'case--parseRepl,fnameCmd-12174'/6,
  'case--process-11982'/7,
  'case--process-11938'/7,
  'case--process-11860'/11,
  'case--process-11808'/13,
  'case--process-11584'/8,
  'case--case block in process-11468'/12,
  'case--process-11412'/8,
  'case--process-11236'/12,
  'case--process-11108'/7,
  'case--process-11039'/7,
  'case--process-10962'/7,
  'case--process-10904'/8,
  'case--process-10808'/11,
  'case--process-10713'/9,
  'case--process-10649'/8,
  'case--case block in case block in process-10577'/22,
  'case--case block in case block in process-10441'/23,
  'case--case block in process-10301'/13,
  'case--process-10205'/8,
  'case--case block in case block in case block in equivTypes-10096'/7,
  'case--case block in case block in equivTypes-10042'/7,
  'case--case block in equivTypes-10021'/5,
  'case--equivTypes-9964'/4,
  'case--case block in docsOrSignature-9892'/11,
  'case--docsOrSignature-9847'/7,
  'case--docsOrSignature,typeSummary-9759'/6,
  'case--loadMainFile-9731'/7,
  'case--case block in loadMainFile-9644'/10,
  'case--loadMainFile-9600'/8,
  'case--execDecls,execDecl-9437'/11,
  'case--prepareExp-9297'/11,
  'case--getItDecls-9201'/3,
  'case--case block in case block in case block in processEdit-9027'/15,
  'case--case block in case block in processEdit-8990'/13,
  'case--case block in processEdit-8960'/12,
  'case--processEdit-8935'/10,
  'case--case block in case block in case block in processEdit-8773'/17,
  'case--case block in case block in processEdit-8732'/15,
  'case--case block in processEdit-8698'/14,
  'case--processEdit-8669'/12,
  'case--case block in case block in case block in case block in processEdit-8420'/28,
  'case--case block in case block in case block in processEdit-8358'/27,
  'case--case block in case block in processEdit-8304'/25,
  'case--case block in case block in processEdit-8205'/23,
  'case--case block in processEdit-8139'/18,
  'case--processEdit-8087'/12,
  'case--case block in case block in processEdit-7956'/13,
  'case--case block in processEdit-7930'/11,
  'case--processEdit-7895'/6,
  'case--case block in case block in processEdit-7720'/18,
  'case--case block in case block in case block in case block in case block in processEdit-7480'/28,
  'case--case block in case block in case block in case block in processEdit-7412'/26,
  'case--case block in case block in case block in processEdit-7360'/24,
  'case--case block in case block in processEdit-7297'/19,
  'case--case block in processEdit-7221'/16,
  'case--processEdit-7172'/11,
  'case--case block in case block in processEdit-7027'/18,
  'case--case block in processEdit-6973'/11,
  'case--processEdit-6943'/8,
  'case--case block in case block in case block in processEdit-6732'/26,
  'case--case block in case block in case block in processEdit-6633'/25,
  'case--case block in case block in processEdit-6570'/22,
  'case--case block in processEdit-6475'/21,
  'case--case block in processEdit-6384'/19,
  'case--case block in case block in processEdit-6202'/26,
  'case--case block in case block in processEdit-6103'/25,
  'case--case block in processEdit-6045'/21,
  'case--processEdit-5964'/13,
  'case--case block in processEdit-5852'/10,
  'case--processEdit-5831'/9,
  'case--case block in processEdit-5713'/13,
  'case--processEdit-5671'/11,
  'case--processEdit-5596'/10,
  'case--processEdit-5528'/10,
  'case--processEdit-5397'/13,
  'case--case block in case block in nextGenDef-5242'/8,
  'case--case block in case block in nextGenDef-5172'/10,
  'case--case block in case block in nextGenDef-5105'/10,
  'case--case block in nextGenDef-5073'/8,
  'case--nextGenDef-5044'/6,
  'case--case block in case block in nextProofSearch-5003'/7,
  'case--case block in case block in nextProofSearch-4937'/9,
  'case--case block in nextProofSearch-4883'/7,
  'case--nextProofSearch-4856'/5,
  'case--addMadeLemma,insertInBlank-4716'/10,
  'case--proofSearch,replaceStr-4625'/8,
  'case--addClause-4547'/4,
  'case--case block in updateFile-4459'/5,
  'case--updateFile-4433'/4,
  'case--case block in findCG-4215'/5,
  'case--findCG-4144'/4,
  'case--setOpt-4068'/5,
  'case--setOpt-4049'/4,
  'case--setOpt-4008'/4,
  'case--setOpt-3967'/4,
  'case--setOpt-3926'/4,
  'case--setOpt-3905'/4,
  'case--displayPats-3808'/7,
  'nested--34174-9749--in--un--typeSummary'/6,
  'nested--28200-4614--in--un--replaceStr'/7,
  'nested--36989-12403--in--un--prompt'/6,
  'nested--34621-10168--in--un--nfun'/8,
  'nested--37009-13150--in--un--makeSpace'/1,
  'nested--28281-4685--in--un--insertInBlank'/8,
  'nested--36768-12148--in--un--getLoad'/4,
  'nested--36768-12149--in--un--fnameCmd'/3,
  'nested--33785-9400--in--un--execDecl'/8,
  'nested--34621-10167--in--un--emode'/7,
  'nested--37009-13151--in--un--col'/5,
  'nested--37009-13152--in--un--cmdInfo'/1,
  'nested--28412-4802--in--un--addW'/7,
  'nested--28281-4686--in--un--addApp'/10,
  'un--updateFile'/3,
  'un--showInfo'/2,
  'un--setOpt'/3,
  'un--rtrim'/1,
  'un--replCmd'/6,
  'un--repl'/6,
  'un--proofSearch'/4,
  'un--processLocal'/11,
  'un--processEdit'/6,
  'un--processCatch'/7,
  'un--process'/6,
  'un--printClause'/5,
  'un--prepareExp'/7,
  'un--parseRepl'/1,
  'un--parseEmptyCmd'/0,
  'un--parseCmd'/0,
  'un--nextProofSearch'/4,
  'un--nextGenDef'/5,
  'un--lookupDefTyName'/3,
  'un--loadMainFile'/7,
  'un--interpret'/7,
  'un--handleResult'/6,
  'un--handleMissing\x{27}'/1,
  'un--handleMissing'/1,
  'un--getOptions'/3,
  'un--getItDecls'/2,
  'un--findCG'/3,
  'un--execExp'/7,
  'un--execDecls'/7,
  'un--equivTypes'/3,
  'un--dropLamsTm'/4,
  'un--dropLams'/2,
  'un--docsOrSignature'/5,
  'un--displayType'/4,
  'un--displayTerm'/5,
  'un--displayResult'/6,
  'un--displayPats'/4,
  'un--displayPatTerm'/5,
  'un--displayHelp'/0,
  'un--displayErrors'/6,
  'un--displayClause'/4,
  'un--compileLib'/5,
  'un--compileExp'/8,
  'un--caseSplit'/3,
  'un--anyAt'/5,
  'un--addMadeLemma'/6,
  'un--addMadeCase'/4,
  'un--addClause'/3
]).
'case--displayResult-13034'(V0, V1, V2, V3, V4, V5) -> case V0 of 0 -> <<"Set color on"/utf8>>; 1 -> <<"Set color off"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayResult-12881'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V7)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"is"/utf8>>)), ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_Totality'('erased', V8)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--handleMissing-12623'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"function"/utf8>>)), ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V2)))))); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"functions:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V4) -> fun (V5) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V4, V5)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V8, V9)) end end end end, fun (V10) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V10)))) end, V0)))))) end end(E0, E1)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"functions:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V11, V12)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V15, V16)) end end end end, fun (V17) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V17)))) end, V0)))))) end.
'case--handleMissing\x{27}-12544'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)))); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end, V0)))))) end end(E0, E1)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end, V0)))))) end.
'case--repl-12460'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> begin (V42 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> begin (V41 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, <<""/utf8>>))(V13))), {'Idris.Prelude.Types.Right', V41} end end, V9))), case V42 of {'Idris.Prelude.Types.Left', E2} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V44) -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V0, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"Bye for now!"/utf8>>)), V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V45) -> begin (V46 = ('un--interpret'(V4, V3, V2, V1, V0, V7, V45))), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> (('un--handleResult'(V4, V3, V2, V1, V0, V48))(V45)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--interpret-12284'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> fun (V8) -> begin (V9 = (('Idris.Idris2.Idris.Error':'un--perror'(V5, V3, V1, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.REPLError', V11}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V14) -> fun (V15) -> ('un--processCatch'(V5, V4, V3, V2, V1, V14, V15)) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseRepl-12246'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Parser.Source':'un--runParser'('erased', 1, <<"(interactive)"/utf8>>, {'Idris.Prelude.Types.Nothing'}, V0, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('un--parseEmptyCmd'()), fun () -> ('un--parseCmd'()) end})) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V2}} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseRepl,fnameCmd-12174'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('nested--36768-12148--in--un--getLoad'(V0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V1)), V2, V4)); 1 -> ('nested--36768-12149--in--un--fnameCmd'(V0, V3, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11982'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Options.MkSessionOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> {'Idris.Core.Options.MkSessionOpts', V7, V8, V9, V10, [V0 | V11], V12, V13, V14, V15, V16, V17, V18, V19, V20, V21} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11938'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Options.MkPPOpts', E0, E1, E2} -> (fun (V7, V8, V9) -> {'Idris.Core.Options.MkPPOpts', V7, 1, V9} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11860'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('Idris.Idris2.Idris.IDEMode.Holes':'un--isHole'(V14)), fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', V14, V15}})) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11808'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> fun (V17) -> ('Idris.Idris2.Idris.IDEMode.Holes':'un--holeData'([], V4, V2, V5, {'Idris.Core.Env.Nil'}, V13, V16, case V15 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V20 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V17)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11584'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0, V8)) end; _ -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CheckedTotal', V12}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V13) -> fun (V14) -> begin (V19 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> ('Idris.Idris2.Core.Termination':'un--checkTotal'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V13, V18)) end, V14))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V29 = begin (V22 = ('Idris.Idris2.Core.Context':'un--getTotality'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V13, V14))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V5, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Totality'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Totality'(V27, V28)) end end}, V24, V14)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, V31}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V32) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V32)) end, V7)), [])), V9)) end end.
'case--case block in process-11468'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.TT.MissingCases', E0} -> (fun (V12) -> fun (V13) -> begin (V16 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V14) -> fun (V15) -> ('un--displayPatTerm'(V5, V3, V6, V14, V15)) end end, V12, []))(V13))), case V16 of {'Idris.Prelude.Types.Left', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CasesMissing', V9, V18}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V19) -> fun (V20) -> begin (V22 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V21)) end, V19, []))(V20))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CallsNonCovering', V9, V24}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.AllCasesCovered', V9}} end end.
'case--process-11412'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0, V8)) end; _ -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Missed', V12}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V13) -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--getTotality'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V13, V14))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = V7), (('case--case block in process-11468'(V0, V1, V2, V3, V4, V5, V6, V7, V18, V13, V17, case V17 of {'Idris.Core.TT.MkTotality', E4, E5} -> (fun (V19, V20) -> V20 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V21)) end, V7)), [])), V9)) end end.
'case--process-11236'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> fun (V14) -> begin (V19 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V5, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V17, V18)) end end}, V12, V14))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V135 = begin (V22 = (('Idris.Idris2.Core.Context':'un--allNames'(V8))(V14))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V25) -> ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V26, V27)) end end, V8, V25)) end, V24, []))(V14))), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> begin (V107 = ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V31) -> fun (V32) -> ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', V31, V32)) end end, V30, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V33, fun (V34) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V37, V38)) end end end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V40)) end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V43, V44)) end end end end}, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V47, V48)) end end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V50)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V53, V54)) end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V56)) end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V59, V60)) end end end end}, fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V63, V64)) end end end}, ('Idris.Idris2.Core.Context':'un--visibleIn'(V7, case V34 of {'Idris.Core.Context.MkGlobalDef', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V66 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V34 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V95 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V34)) end)) end)) end))), begin (V110 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_GlobalDef'(V8, V108, V109)) end end, V107, []))(V14))), case V110 of {'Idris.Prelude.Types.Left', E50} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V112) -> (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V113) -> ('un--equivTypes'(V5, case V113 of {'Idris.Core.Context.MkGlobalDef', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134) -> V116 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V21)) end, V112))(V14)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V135 of {'Idris.Prelude.Types.Left', E73} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V137) -> begin (V139 = begin (V138 = ('erlang':'put'(V5, V6))), {'Idris.Prelude.Types.Right', V138} end), case V139 of {'Idris.Prelude.Types.Left', E75} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V141) -> begin (V170 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V142) -> fun (V143) -> ('un--docsOrSignature'(V5, V3, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V142, V143)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V146, V147)) end end end end, fun (V148) -> case V148 of {'Idris.Core.Context.MkGlobalDef', E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169) -> V150 end(E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V137)), []))(V14))), case V170 of {'Idris.Prelude.Types.Left', E98} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V172) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V175, V176)) end end end end, fun (V177) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V177)) end, ('Idris.Idris2.Data.List':'un--intersperse'('erased', <<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_List'('erased', V172))))))))}} end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11108'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.NoFileLoaded'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V26 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" +"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(((V9 + 1) rem 9223372036854775808))))) end end, case V5 of {'Idris.Idris.REPLOpts.MkREPLOpts', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V16 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V27) -> begin (V76 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V28) -> case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V31) -> begin (V75 = (('Idris.Idris2.Erlang.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, fun (V57) -> fun (V58) -> V58 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V5 of {'Idris.Idris.REPLOpts.MkREPLOpts', E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V64 end(E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, V26))))))))))(V31))), {'Idris.Prelude.Types.Right', V75} end end, V27))), case V76 of {'Idris.Prelude.Types.Left', E35} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V78) -> ('un--loadMainFile'(V4, V3, V2, V1, V0, V8, V27)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-11039'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V7, V8, {'Idris.Prelude.Types.Just', V0}, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10962'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.NoFileLoaded'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> ('un--loadMainFile'(V4, V3, V2, V1, V0, V8, V9)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10904'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0, V8)) end; _ -> fun (V9) -> begin (V11 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V10) -> ('un--displayPats'(V5, V3, V6, V10)) end, V7, []))(V9))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V13))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--process-10808'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V21 = begin (V18 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V5, [], V17, {'Idris.Core.Env.Nil'}, V11, V13))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V20, V13)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V12))(V13))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> begin (V30 = begin (V27 = (('Idris.Idris2.Core.Normalise':'un--normaliseScope'(V5, [], V17, {'Idris.Core.Env.Nil'}, V26))(V13))), case V27 of {'Idris.Prelude.Types.Left', E10} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V29) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V29, V13)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.TermChecked', V23, V32}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10713'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> fun (V9) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V6, V1, V0, V9)) end; _ -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('un--displayType'(V6, V4, V7, V11)) end, V8, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V14))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--process-10649'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.UndefinedName', V0, {'Idris.Core.Name.UN', <<"it"/utf8>>}}, V8)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> ('un--process'(V5, V4, V3, V2, V1, {'Idris.Idris.Syntax.Check', {'Idris.Idris.Syntax.PRef', V0, V9}})) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in process-10577'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V16 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, {'Idris.Prelude.Types.Just', V21}, V34, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in process-10441'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> begin (V27 = begin (V24 = ((((V17(V15))({'Idris.Core.Env.Nil'}))(V20))(V23))), case V24 of {'Idris.Prelude.Types.Left', E0} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V26) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V26, V23)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Evaluated', V19, {'Idris.Prelude.Types.Just', V29}}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Evaluated', V19, {'Idris.Prelude.Types.Nothing'}}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in process-10301'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V5, <<"repl.eval"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Elaborated input"/utf8>> end, V13, V15))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V24 = begin (V23 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V43 = ('nested--34621-10168--in--un--nfun'(V0, V1, V2, V3, V4, V5, [], case V26 of {'Idris.Idris.REPLOpts.MkREPLOpts', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V28 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V44 = ((((V43(V22))({'Idris.Core.Env.Nil'}))(V13))(V15))), case V44 of {'Idris.Prelude.Types.Left', E24} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V5, <<"repl.eval"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Normalised"/utf8>> end, {'Idris.Core.Env.Nil'}, V46))(V15))), case V47 of {'Idris.Prelude.Types.Left', E26} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V46, V15))), case V50 of {'Idris.Prelude.Types.Left', E28} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V52) -> begin (V53 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V14))(V15))), case V53 of {'Idris.Prelude.Types.Left', E30} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V55) -> begin (V60 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V56) -> case V56 of {'Idris.Prelude.Types.Left', E32} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.DN', <<"it"/utf8>>, V58}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V59) -> ('Idris.Idris2.Core.UnifyState':'un--genName'(V5, V4, <<"evalResult"/utf8>>, V59)) end, V15))), case V60 of {'Idris.Prelude.Types.Left', E34} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V62) -> begin (V67 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V63) -> case V63 of {'Idris.Prelude.Types.Left', E36} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V66) -> ('Idris.Idris2.Core.Context':'un--addDef'(V5, V62, ('Idris.Idris2.Core.Context':'un--newDef'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V62, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), [], V55, {'Idris.Core.TT.Private'}, {'Idris.Core.Context.PMDef', ('Idris.Idris2.Core.Context':'un--defaultPI'()), [], {'Idris.Core.CaseTree.STerm', 0, V46}, {'Idris.Core.CaseTree.STerm', 0, V46}, []})), V66)) end, V15))), case V67 of {'Idris.Prelude.Types.Left', E38} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V69) -> begin (V70 = ('Idris.Idris2.Core.Context':'un--addToSave'(V5, V62, V15))), case V70 of {'Idris.Prelude.Types.Left', E40} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V72) -> begin (V90 = begin (V89 = ('erlang':'put'(V1, case V26 of {'Idris.Idris.REPLOpts.MkREPLOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, {'Idris.Prelude.Types.Just', V62}, V85, V86, V87, V88} end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V89} end), case V90 of {'Idris.Prelude.Types.Left', E58} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V92) -> begin (V93 = {'Idris.Builtin.MkPair', V13, V14}), (('case--case block in case block in process-10441'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V13, V14, V93, V22, V26, V43, V46, V52, V55, V62, case V26 of {'Idris.Idris.REPLOpts.MkREPLOpts', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> V94 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V15)) end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-10205'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.Execute'} -> (fun () -> fun (V8) -> begin (V13 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E104} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V12) -> ('un--execExp'(V5, V4, V3, V2, V1, V0, V12)) end, V8))), case V13 of {'Idris.Prelude.Types.Left', E106} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Executed', V0}} end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V16) -> begin (V17 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V3, V5, V2, V4, {'Idris.Idris.Desugar.AnyExpr'}, [], V0, V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V20 = ('un--getItDecls'(V1, V16))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V23 = {'Idris.TTImp.TTImp.ILocal', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V22, V19}), begin (V24 = (('Idris.Idris2.Core.Context':'un--resolveName'(V5, {'Idris.Core.Name.UN', <<"[input]"/utf8>>}))(V16))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V33 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V27) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--hide'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Idris.Core.Name.UN', <<"::"/utf8>>}}, V27))), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> ('Idris.Idris2.Core.Context':'un--hide'(V5, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Idris.Core.Name.UN', <<"Nil"/utf8>>}}, V27)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V31) -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, V16))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> begin (V52 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V5, V2, V4, V26, ('nested--34621-10167--in--un--emode'(V0, V1, V2, V3, V4, V5, case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V37 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), [], [], {'Idris.Core.Env.Nil'}, V23, {'Idris.Prelude.Types.Nothing'}))(V16))), case V52 of {'Idris.Prelude.Types.Left', E26} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V54) -> case V54 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V55, V56) -> begin (V57 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V5, <<"repl.eval"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Elaborated input"/utf8>> end, V55, V16))), case V57 of {'Idris.Prelude.Types.Left', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V59) -> begin (V61 = begin (V60 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E32} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V63) -> begin (V65 = begin (V64 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E34} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V67) -> begin (V84 = ('nested--34621-10168--in--un--nfun'(V0, V1, V2, V3, V4, V5, [], case V67 of {'Idris.Idris.REPLOpts.MkREPLOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V69 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V85 = ((((V84(V63))({'Idris.Core.Env.Nil'}))(V55))(V16))), case V85 of {'Idris.Prelude.Types.Left', E52} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V87) -> begin (V88 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V5, <<"repl.eval"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Normalised"/utf8>> end, {'Idris.Core.Env.Nil'}, V87))(V16))), case V88 of {'Idris.Prelude.Types.Left', E54} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V90) -> begin (V91 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V5, V3, {'Idris.Core.Env.Nil'}, V87, V16))), case V91 of {'Idris.Prelude.Types.Left', E56} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V93) -> begin (V94 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V56))(V16))), case V94 of {'Idris.Prelude.Types.Left', E58} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V96) -> begin (V101 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E60} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.DN', <<"it"/utf8>>, V99}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V100) -> ('Idris.Idris2.Core.UnifyState':'un--genName'(V5, V4, <<"evalResult"/utf8>>, V100)) end, V16))), case V101 of {'Idris.Prelude.Types.Left', E62} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V103) -> begin (V108 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V104) -> case V104 of {'Idris.Prelude.Types.Left', E64} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V106) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V107) -> ('Idris.Idris2.Core.Context':'un--addDef'(V5, V103, ('Idris.Idris2.Core.Context':'un--newDef'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V103, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), [], V96, {'Idris.Core.TT.Private'}, {'Idris.Core.Context.PMDef', ('Idris.Idris2.Core.Context':'un--defaultPI'()), [], {'Idris.Core.CaseTree.STerm', 0, V87}, {'Idris.Core.CaseTree.STerm', 0, V87}, []})), V107)) end, V16))), case V108 of {'Idris.Prelude.Types.Left', E66} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V110) -> begin (V111 = ('Idris.Idris2.Core.Context':'un--addToSave'(V5, V103, V16))), case V111 of {'Idris.Prelude.Types.Left', E68} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V113) -> begin (V131 = begin (V130 = ('erlang':'put'(V1, case V67 of {'Idris.Idris.REPLOpts.MkREPLOpts', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, {'Idris.Prelude.Types.Just', V103}, V126, V127, V128, V129} end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V130} end), case V131 of {'Idris.Prelude.Types.Left', E86} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V133) -> begin (V134 = {'Idris.Builtin.MkPair', V55, V56}), (('case--case block in case block in process-10441'(V0, V1, V2, V3, V4, V5, V6, V7, V19, V22, V23, V26, V55, V56, V134, V63, V67, V84, V87, V93, V96, V103, case V67 of {'Idris.Idris.REPLOpts.MkREPLOpts', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150) -> V135 end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16)) end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in case block in equivTypes-10096'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Unify.MkUnifyResult', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V7 of [] -> case V9 of [] -> case V10 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> fun (V12) -> {'Idris.Prelude.Types.Right', 1} end end; _ -> fun (V13) -> {'Idris.Prelude.Types.Right', 1} end end; _ -> fun (V14) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--case block in case block in equivTypes-10042'(V0, V1, V2, V3, V4, V5, V6) -> begin (V35 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V7) -> begin (V26 = ((((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V8, V9, V10, V11, V12, V13, V14, V15, V16)) end end end end end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V17, V18, V19, V20, V21, V22, V23, V24, V25)) end end end end end end end end end}, [], V2, V5))(('Idris.Idris2.Core.Unify':'un--inTerm'())))(('Idris.Idris2.Idris.REPLOpts':'un--replFC'())))({'Idris.Core.Env.Nil'}))(V1))(V0))(V7))), case V26 of {'Idris.Prelude.Types.Left', E0} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V28) -> case V28 of {'Idris.Core.Unify.MkUnifyResult', E2, E3, E4, E5} -> (fun (V29, V30, V31, V32) -> case V29 of [] -> case V31 of [] -> case V32 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> {'Idris.Prelude.Types.Right', 1} end; _ -> {'Idris.Prelude.Types.Right', 1} end; _ -> {'Idris.Prelude.Types.Right', 1} end end(E2, E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V33) -> fun (V34) -> {'Idris.Prelude.Types.Right', 1} end end, V6))), case V35 of {'Idris.Prelude.Types.Left', E6} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V37) -> begin (V38 = case V37 of 0 -> ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V2, <<"typesearch.equiv"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Accepted: "/utf8>> end, V1, V6)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V38 of {'Idris.Prelude.Types.Left', E8} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V40) -> {'Idris.Prelude.Types.Right', V37} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in equivTypes-10021'(V0, V1, V2, V3, V4) -> case V4 of 0 -> fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V9) -> begin (V28 = ((((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V10, V11, V12, V13, V14, V15, V16, V17, V18)) end end end end end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V19, V20, V21, V22, V23, V24, V25, V26, V27)) end end end end end end end end end}, [], V2, V8))(('Idris.Idris2.Core.Unify':'un--inTerm'())))(('Idris.Idris2.Idris.REPLOpts':'un--replFC'())))({'Idris.Core.Env.Nil'}))(V1))(V0))(V9))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> case V30 of {'Idris.Core.Unify.MkUnifyResult', E4, E5, E6, E7} -> (fun (V31, V32, V33, V34) -> case V31 of [] -> case V33 of [] -> case V34 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> {'Idris.Prelude.Types.Right', 1} end; _ -> {'Idris.Prelude.Types.Right', 1} end; _ -> {'Idris.Prelude.Types.Right', 1} end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V35) -> fun (V36) -> {'Idris.Prelude.Types.Right', 1} end end, V5))), case V37 of {'Idris.Prelude.Types.Left', E8} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V39) -> begin (V40 = case V39 of 0 -> ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V2, <<"typesearch.equiv"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Accepted: "/utf8>> end, V1, V5)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V40 of {'Idris.Prelude.Types.Left', E10} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V42) -> {'Idris.Prelude.Types.Right', V39} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V43) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--equivTypes-9964'(V0, V1, V2, V3) -> case V3 of 1 -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V2, <<"typesearch.equiv"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Candidate: "/utf8>> end, V1, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V18 = begin (V12 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V2, [], V11, {'Idris.Core.Env.Nil'}, V1, V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V2, [], V11, {'Idris.Core.Env.Nil'}, V0, V4))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V14, V17))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> case V20 of 0 -> begin (V21 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V4))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V52 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V24) -> begin (V43 = ((((((('Idris.Idris2.Core.Unify':'un--unify'('erased', {'Idris.Core.Unify.dn--un--__mkUnify', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyD_Unify_Term'(V25, V26, V27, V28, V29, V30, V31, V32, V33)) end end end end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Unify':'dn--un--unifyWithLazyD_Unify_Term'(V34, V35, V36, V37, V38, V39, V40, V41, V42)) end end end end end end end end end}, [], V2, V23))(('Idris.Idris2.Core.Unify':'un--inTerm'())))(('Idris.Idris2.Idris.REPLOpts':'un--replFC'())))({'Idris.Core.Env.Nil'}))(V1))(V0))(V24))), case V43 of {'Idris.Prelude.Types.Left', E12} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V45) -> case V45 of {'Idris.Core.Unify.MkUnifyResult', E14, E15, E16, E17} -> (fun (V46, V47, V48, V49) -> case V46 of [] -> case V48 of [] -> case V49 of {'Idris.Core.Unify.NoLazy'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> {'Idris.Prelude.Types.Right', 1} end; _ -> {'Idris.Prelude.Types.Right', 1} end; _ -> {'Idris.Prelude.Types.Right', 1} end end(E14, E15, E16, E17)); _ -> {'Idris.Prelude.Types.Right', 1} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V50) -> fun (V51) -> {'Idris.Prelude.Types.Right', 1} end end, V4))), case V52 of {'Idris.Prelude.Types.Left', E18} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V54) -> begin (V55 = case V54 of 0 -> ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V2, <<"typesearch.equiv"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Accepted: "/utf8>> end, V1, V4)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V55 of {'Idris.Prelude.Types.Left', E20} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V57) -> {'Idris.Prelude.Types.Right', V54} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V58) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--case block in docsOrSignature-9892'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> fun (V13) -> ('Idris.Idris2.Idris.DocString':'un--getDocsForName'(V3, V2, V1, V0, V13)) end end(E0, E1)); [] -> fun (V14) -> ('nested--34174-9749--in--un--typeSummary'(V0, V1, V2, V3, V5, V14)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--docsOrSignature-9847'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [E0 | E1] -> (fun (V7, V8) -> begin (V9 = [V7 | V8]), begin (V10 = [V7 | V8]), ('case--case block in docsOrSignature-9892'(V0, V1, V2, V3, V4, V5, V8, V7, V9, V10, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V23)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V24, V25)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V26) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V26, case V4 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V31 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V11)) end, V10)))))) end end end(E0, E1)); _ -> fun (V36) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V3, V1, V0, V36)) end end.
'case--docsOrSignature,typeSummary-9759'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V29 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V4, {'Idris.Core.Env.Nil'}, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V10 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V29 of {'Idris.Prelude.Types.Left', E22} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V31, V7))), case V32 of {'Idris.Prelude.Types.Left', E24} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V34)))))) | []]} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V35) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--loadMainFile-9731'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, {'Idris.Prelude.Types.Nothing'}, V19, V20, V21, V22} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in loadMainFile-9644'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FileLoaded', V0}} end; _ -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorsBuildingFile', V0, V9}} end end.
'case--loadMainFile-9600'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Right', E0} -> (fun (V8) -> fun (V9) -> begin (V11 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V5, fun () -> <<"+ Build deps"/utf8>> end, fun (V10) -> ('Idris.Idris2.Idris.ModTree':'un--buildDeps'(V5, V3, V2, V4, V1, V0, V10)) end, V9))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.Idris.REPLCommon':'un--updateErrorLine'(V1, V13))(V9))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V1, V8, V9))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Idris.REPLOpts':'un--resetProofState'(V1, V9))), case V20 of {'Idris.Prelude.Types.Left', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V22) -> case V13 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FileLoaded', V0}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorsBuildingFile', V0, V13}} end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> fun (V24) -> begin (V25 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V1, <<""/utf8>>, V24))), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorLoadingFile', V0, V23}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--execDecls,execDecl-9437'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('un--getItDecls'(V1, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> ('un--processLocal'([], V5, V2, V4, V9, [], [], {'Idris.Core.Env.Nil'}, V13, V7, V10)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--prepareExp-9297'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> begin (V18 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'([], V5, V4, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 0, {'Idris.Core.Env.Nil'}, V11, V13))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Compiler.Inline':'un--compileAndInlineAll'(V5, V13))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> {'Idris.Prelude.Types.Right', V20} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getItDecls-9201'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', [{'Idris.TTImp.TTImp.IClaim', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Private'}, [], {'Idris.TTImp.TTImp.MkImpTy', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', <<"it"/utf8>>}, {'Idris.TTImp.TTImp.Implicit', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), 1}}} | [{'Idris.TTImp.TTImp.IDef', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.UN', <<"it"/utf8>>}, [{'Idris.TTImp.TTImp.PatClause', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.TTImp.TTImp.IVar', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.UN', <<"it"/utf8>>}}, {'Idris.TTImp.TTImp.IVar', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V4}} | []]} | []]]} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-9027'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V2 of 0 -> fun (V15) -> ('un--updateFile'(V3, fun (V16) -> ('un--addMadeCase'(V13, V14, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V1, 1)))))))), V16)) end, V15)) end; 1 -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeWith', V13, V14}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-8990'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> begin (V15 = ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Idris.IDEMode.MakeClause':'un--makeWith'(V0, V11))))))), case V2 of 0 -> fun (V16) -> ('un--updateFile'(V3, fun (V17) -> ('un--addMadeCase'(V13, V15, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V1, 1)))))))), V17)) end, V16)) end; 1 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeWith', V13, V15}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-8960'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Right', E0} -> (fun (V12) -> ('case--case block in case block in processEdit-8990'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V9)))) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V15)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Invalid literate Idris"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Invalid literate Idris"/utf8>>))))))))))))}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-8935'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> begin (V11 = {'Idris.Prelude.Types.Just', V10}), ('case--case block in processEdit-8960'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, ('Idris.Idris2.Parser.Unlit':'un--unlit'(V8, V10)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V13)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not available"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not available"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-8773'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V2 of 0 -> fun (V17) -> ('un--updateFile'(V3, fun (V18) -> ('un--addMadeCase'(V15, V16, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V1, 1)))))))), V18)) end, V17)) end; 1 -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeCase', V15, V16}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-8732'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V15, V16) -> begin (V17 = ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Idris.IDEMode.MakeClause':'un--makeCase'(V10, V0, V13))))))), case V2 of 0 -> fun (V18) -> ('un--updateFile'(V3, fun (V19) -> ('un--addMadeCase'(V15, V17, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V1, 1)))))))), V19)) end, V18)) end; 1 -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeCase', V15, V17}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-8698'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Right', E0} -> (fun (V14) -> ('case--case block in case block in processEdit-8732'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V14, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V11)))) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V17)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Invalid literate Idris"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Invalid literate Idris"/utf8>>))))))))))))}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-8669'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> begin (V13 = {'Idris.Prelude.Types.Just', V12}), ('case--case block in processEdit-8698'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V12, V13, ('Idris.Idris2.Parser.Unlit':'un--unlit'(V8, V12)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V15)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not available"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not available"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in processEdit-8420'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V2 of 0 -> fun (V28) -> ('un--updateFile'(V3, fun (V29) -> ('un--addMadeLemma'(V27, V0, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V20)), V23, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V1, 1)))))))), V29)) end, V28)) end; 1 -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeLemma', V27, V0, V20, V23}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-8358'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V27, V28) -> case V2 of 0 -> fun (V29) -> ('un--updateFile'(V3, fun (V30) -> ('un--addMadeLemma'(V27, V0, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V20)), V23, ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V1, 1)))))))), V30)) end, V29)) end; 1 -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.MadeLemma', V27, V0, V20, V23}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-8304'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Prelude.Types.Just', E0} -> (fun (V25) -> begin (V26 = {'Idris.Prelude.Types.Just', V25}), ('case--case block in case block in case block in processEdit-8358'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V25, V26, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V25)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V28)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-8205'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V10 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V21)); 1 -> V21; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-8139'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V7, V5, V18, V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V7, V5, V19, V20))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E6} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(case V10 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V26)); 1 -> V26; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V32 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V3, V1, V20))), case V32 of {'Idris.Prelude.Types.Left', E8} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V34) -> begin (V35 = {'Idris.Builtin.MkPair', V18, V19}), case V34 of {'Idris.Prelude.Types.Just', E10} -> (fun (V36) -> begin (V37 = {'Idris.Prelude.Types.Just', V36}), (('case--case block in case block in case block in processEdit-8358'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V18, V19, V35, V23, V26, V30, V31, V36, V37, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V36))))(V20)) end end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V38)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-8087'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> case V18 of {'Idris.Core.Context.Hole', E8, E9} -> (fun (V20, V21) -> case V13 of [] -> fun (V22) -> begin (V23 = ('Idris.Idris2.TTImp.Interactive.MakeLemma':'un--makeLemma'(V4, V7, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0, V20, V19, V22))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = [{'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', {'Idris.Core.Context.Hole', V20, V21}, V19}}} | []]), case V25 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V27, V28) -> begin (V29 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V7, V5, V27, V22))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V7, V5, V28, V22))), case V32 of {'Idris.Prelude.Types.Left', E16} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E18} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(case V10 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V34)); 1 -> V34; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V40 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V3, V1, V22))), case V40 of {'Idris.Prelude.Types.Left', E20} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V42) -> begin (V43 = {'Idris.Builtin.MkPair', V27, V28}), case V42 of {'Idris.Prelude.Types.Just', E22} -> (fun (V44) -> begin (V45 = {'Idris.Prelude.Types.Just', V44}), (('case--case block in case block in case block in processEdit-8358'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V21, V14, V16, V20, V19, V26, V27, V28, V43, V31, V34, V38, V39, V44, V45, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V44))))(V22)) end end(E22)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V46)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V48) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V48)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end end(E8, E9)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V50) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V50)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end end(E6, E7)); _ -> fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V52) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V52)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end end(E4, E5)); _ -> fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V54) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V54)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end end(E2, E3)); _ -> fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V56) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V56)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end end(E0, E1)); _ -> fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V58) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V58)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end.
'case--case block in case block in processEdit-7956'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> fun (V15) -> begin (V17 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V16) -> ('un--printClause'(V4, V2, V13, V9, V16)) end, V7, []))(V15))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V22, V23)) end end end end, fun (V24) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V24)) end, V19))))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-7930'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V12 = {'Idris.Prelude.Types.Just', V11}), ('case--case block in case block in processEdit-7956'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V11)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V14)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-7895'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Core.FC':'un--startCol'(('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V9))))))))), fun (V12) -> begin (V13 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V0, V7, V12))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V16 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V9, V10}}}), case V15 of {'Idris.Prelude.Types.Just', E7} -> (fun (V17) -> begin (V18 = {'Idris.Prelude.Types.Just', V17}), (('case--case block in case block in processEdit-7956'(V0, V1, V2, V3, V4, V7, V9, V10, V16, V11, V17, V18, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V17))))(V12)) end end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V19)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V21)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No more results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No more results"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-7720'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V16}}, V29, V30, V31, V32, V33} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in processEdit-7480'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V3 of 0 -> fun (V28) -> ('un--updateFile'(V4, fun (V29) -> ('un--addClause'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(V27)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V2)))), V29)) end, V28)) end; 1 -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V33, V34)) end end end end, fun (V35) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V35)) end, V27))))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in processEdit-7412'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V26, V27) -> fun (V28) -> begin (V30 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V29) -> ('un--printClause'(V8, V6, V26, V22, V29)) end, V20, []))(V28))), case V30 of {'Idris.Prelude.Types.Left', E2} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V32) -> case V3 of 0 -> ('un--updateFile'(V4, fun (V33) -> ('un--addClause'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(V32)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V2)))), V33)) end, V28)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V36, V37)) end end end end, fun (V38) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V38)) end, V32))))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-7360'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Prelude.Types.Just', E0} -> (fun (V24) -> begin (V25 = {'Idris.Prelude.Types.Just', V24}), ('case--case block in case block in case block in case block in processEdit-7412'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V24, V25, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V24)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V27) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V27)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-7297'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V22, V23) -> begin (V24 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Core.FC':'un--startCol'(('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V22))))))))), fun (V25) -> begin (V26 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V2, V25))), case V26 of {'Idris.Prelude.Types.Left', E5} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V28) -> begin (V29 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V20, {'Idris.Builtin.MkPair', V22, V23}}}), case V28 of {'Idris.Prelude.Types.Just', E7} -> (fun (V30) -> begin (V31 = {'Idris.Prelude.Types.Just', V30}), (('case--case block in case block in case block in case block in processEdit-7412'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V20, V22, V23, V29, V24, V30, V31, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V30))))(V25)) end end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V32) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V32)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V34) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V34)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No search results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No search results"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-7221'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> case V16 of {'Idris.Core.Context.None'} -> (fun () -> begin (V22 = fun (V17) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--makeDefSort'(V8, V5, V7, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)), V18)) end end, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), fun (V20) -> fun (V21) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--mostUsed'(V20, V21)) end end, V13, V17)) end), fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E1} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V27) -> begin (V45 = begin (V44 = ('erlang':'put'(V4, case V27 of {'Idris.Idris.REPLOpts.MkREPLOpts', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V22}}, V39, V40, V41, V42, V43} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E19} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V47) -> begin (V48 = ('un--nextGenDef'(V8, V7, V4, V0, V23))), case V48 of {'Idris.Prelude.Types.Left', E21} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V50) -> begin (V51 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.None'}}), case V50 of {'Idris.Prelude.Types.Just', E23} -> (fun (V52) -> case V52 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V53, V54) -> case V54 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V55, V56) -> begin (V57 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Core.FC':'un--startCol'(('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V55))))))))), begin (V58 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V2, V23))), case V58 of {'Idris.Prelude.Types.Left', E28} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V60) -> begin (V61 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V53, {'Idris.Builtin.MkPair', V55, V56}}}), case V60 of {'Idris.Prelude.Types.Just', E30} -> (fun (V62) -> begin (V63 = {'Idris.Prelude.Types.Just', V62}), (('case--case block in case block in case block in case block in processEdit-7412'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V51, V22, V27, V53, V55, V56, V61, V57, V62, V63, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V62))))(V23)) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V64) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V64)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V65) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V65)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No search results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No search results"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V67) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V67)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Already defined"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Already defined"/utf8>>))))))))))))}} end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V1))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-7172'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> fun (V18) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V14, case V9 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V19 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V46 of {'Idris.Prelude.Types.Left', E34} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V48) -> begin (V49 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V14, {'Idris.Builtin.MkPair', V16, V17}}}}), case V48 of {'Idris.Prelude.Types.Just', E36} -> (fun (V50) -> case V50 of {'Idris.Core.Context.None'} -> (fun () -> begin (V56 = fun (V51) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--makeDefSort'(V8, V5, V7, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)), V52)) end end, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), fun (V54) -> fun (V55) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--mostUsed'(V54, V55)) end end, V14, V51)) end), begin (V58 = begin (V57 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V57} end), case V58 of {'Idris.Prelude.Types.Left', E37} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V60) -> begin (V78 = begin (V77 = ('erlang':'put'(V4, case V60 of {'Idris.Idris.REPLOpts.MkREPLOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V56}}, V72, V73, V74, V75, V76} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V77} end), case V78 of {'Idris.Prelude.Types.Left', E55} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V80) -> begin (V81 = ('un--nextGenDef'(V8, V7, V4, V0, V18))), case V81 of {'Idris.Prelude.Types.Left', E57} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V83) -> begin (V84 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.None'}}), case V83 of {'Idris.Prelude.Types.Just', E59} -> (fun (V85) -> case V85 of {'Idris.Builtin.MkPair', E60, E61} -> (fun (V86, V87) -> case V87 of {'Idris.Builtin.MkPair', E62, E63} -> (fun (V88, V89) -> begin (V90 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Core.FC':'un--startCol'(('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V88))))))))), begin (V91 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V2, V18))), case V91 of {'Idris.Prelude.Types.Left', E64} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V93) -> begin (V94 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V86, {'Idris.Builtin.MkPair', V88, V89}}}), case V93 of {'Idris.Prelude.Types.Just', E66} -> (fun (V95) -> begin (V96 = {'Idris.Prelude.Types.Just', V95}), (('case--case block in case block in case block in case block in processEdit-7412'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V17, V16, V12, V14, V49, V84, V56, V60, V86, V88, V89, V94, V90, V95, V96, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V95))))(V18)) end end(E66)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V97) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V97)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E59)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V98) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V98)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No search results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No search results"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V99) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V99)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Already defined"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Already defined"/utf8>>))))))))))))}} end end(E36)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V1))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V1)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"on line"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'('erased', V2))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-7027'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V15 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V17)); 1 -> V17; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-6973'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V15, V16) -> case V16 of {'Idris.Core.Context.Hole', E6, E7} -> (fun (V17, V18) -> case V12 of [] -> begin (V30 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V19)), ('Idris.Idris2.Core.Name':'un--dropNS'(V20)))) end end, V7, case V6 of {'Idris.Idris.Syntax.MkSyntax', E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V27 end(E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V31 = ('un--dropLams'(V17, V8))), fun (V32) -> begin (V33 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V4, V2, V31, V32))), case V33 of {'Idris.Prelude.Types.Left', E17} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V35) -> begin (V36 = case V30 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V35)); 1 -> V35; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V36))}} end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V38)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E6, E7)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V40)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E4, E5)); _ -> fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V42) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V42)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E2, E3)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V44)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E0, E1)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V46)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end.
'case--processEdit-6943'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V39 = ('Idris.Idris2.Core.Context':'un--lookupDefName'(V9, case V5 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V12 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V39 of {'Idris.Prelude.Types.Left', E30} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V41) -> case V41 of [E32 | E33] -> (fun (V42, V43) -> case V42 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V44, V45) -> case V45 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V46, V47) -> case V47 of {'Idris.Core.Context.Hole', E38, E39} -> (fun (V48, V49) -> case V43 of [] -> begin (V61 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V50)), ('Idris.Idris2.Core.Name':'un--dropNS'(V51)))) end end, V9, case V6 of {'Idris.Idris.Syntax.MkSyntax', E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V58 end(E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V62 = ('un--dropLams'(V48, V10))), begin (V63 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V4, V2, V62, V11))), case V63 of {'Idris.Prelude.Types.Left', E49} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V65) -> begin (V66 = case V61 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V65)); 1 -> V65; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V66))}} end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V67) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V67)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E38, E39)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V68) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V68)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E36, E37)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V69) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V69)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E34, E35)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V70) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V70)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E32, E33)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V71) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V71)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V73) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V73)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No more results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No more results"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-6732'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V3 of 0 -> fun (V26) -> ('un--updateFile'(V4, fun (V27) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V25)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)))))), V27)) end, V26)) end; 1 -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V25))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processEdit-6633'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V24)); 1 -> V24; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-6570'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V22, V23) -> case V23 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> fun (V26) -> begin (V27 = ('Idris.Idris2.Idris.Resugar':'un--resugar'(V22, V8, V6, V24, V25, V26))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V30 = case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V29)); 1 -> V29; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V3 of 0 -> ('un--updateFile'(V4, fun (V31) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V30)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)))))), V31)) end, V26)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V30))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-6475'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Core.Context.NotHole'} -> (fun () -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V22)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end()); {'Idris.Core.Context.SolvedHole', E0} -> (fun (V23) -> ('case--case block in case block in processEdit-6570'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23, ('un--dropLamsTm'([], V23, {'Idris.Core.Env.Nil'}, V17)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-6384'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V19, V20, V21, V22, V23, V24, V25, V26, V27, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V17}}, V29, V30, V31, V32, V33, V34} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-6202'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V3 of 0 -> fun (V26) -> ('un--updateFile'(V4, fun (V27) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V25)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)))))), V27)) end, V26)) end; 1 -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V25))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processEdit-6103'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V24)); 1 -> V24; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-6045'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Prelude.Types.Just', E0} -> (fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V22, V23) -> begin (V24 = ('un--dropLams'(V15, V23))), fun (V25) -> begin (V26 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V8, V6, V24, V25))), case V26 of {'Idris.Prelude.Types.Left', E3} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V28) -> begin (V29 = case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V28)); 1 -> V28; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V3 of 0 -> ('un--updateFile'(V4, fun (V30) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V29)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)))))), V30)) end, V25)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V29))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V32) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V32)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No search results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No search results"/utf8>>))))))))))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5964'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V17, V18) -> case V18 of {'Idris.Core.Context.Hole', E6, E7} -> (fun (V19, V20) -> case V14 of [] -> begin (V22 = fun (V21) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--exprSearch'(V8, V5, V7, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V1, [], V21)) end), fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> begin (V45 = begin (V44 = ('erlang':'put'(V4, case V27 of {'Idris.Idris.REPLOpts.MkREPLOpts', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V28, V29, V30, V31, V32, V33, V34, V35, V36, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V22}}, V38, V39, V40, V41, V42, V43} end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E26} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V47) -> begin (V49 = begin (V48 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E28} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V51) -> begin (V52 = ('un--nextProofSearch'(V8, V7, V4, V23))), case V52 of {'Idris.Prelude.Types.Left', E30} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V54) -> case V54 of {'Idris.Prelude.Types.Just', E32} -> (fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V56, V57) -> begin (V58 = ('un--dropLams'(V19, V57))), begin (V59 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V8, V6, V58, V23))), case V59 of {'Idris.Prelude.Types.Left', E35} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V61) -> begin (V62 = case V11 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V61)); 1 -> V61; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V3 of 0 -> ('un--updateFile'(V4, fun (V63) -> ('un--proofSearch'(V1, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V62)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)))))), V63)) end, V23)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V62))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V64) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V64)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No search results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No search results"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V66) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V66)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E6, E7)); {'Idris.Core.Context.PMDef', E37, E38, E39, E40, E41} -> (fun (V67, V68, V69, V70, V71) -> case V68 of [] -> case V69 of {'Idris.Core.CaseTree.STerm', E42, E43} -> (fun (V72, V73) -> case V14 of [] -> begin (V74 = [{'Idris.Builtin.MkPair', V15, {'Idris.Builtin.MkPair', V17, {'Idris.Core.Context.PMDef', V67, [], {'Idris.Core.CaseTree.STerm', V72, V73}, V70, V71}}} | []]), ('case--case block in processEdit-6475'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V70, V71, V72, V15, V17, V73, V67, V74, case V67 of {'Idris.Core.Context.MkPMDefInfo', E44, E45} -> (fun (V75, V76) -> V75 end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end; _ -> fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V78) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V78)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E42, E43)); _ -> fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V80) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V80)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end; _ -> fun (V81) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V82) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V82)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E37, E38, E39, E40, E41)); _ -> fun (V83) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V84) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V84)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E4, E5)); _ -> fun (V85) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V86) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V86)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E2, E3)); _ -> fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V88) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V88)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end end(E0, E1)); [] -> fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"Unknown name"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V1))))}} end; _ -> fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V91) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V91)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end.
'case--case block in processEdit-5852'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V2 of 0 -> fun (V10) -> ('un--updateFile'(V3, fun (V11) -> ('un--addClause'(V8, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1)))), V11)) end, V10)) end; 1 -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V8))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5831'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V2 of 0 -> fun (V10) -> ('un--updateFile'(V3, fun (V11) -> ('un--addClause'(V9, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V1)))), V11)) end, V10)) end; 1 -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V9))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V0)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"not defined here"/utf8>>))))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processEdit-5713'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V3 of 0 -> fun (V13) -> ('un--updateFile'(V4, fun (V14) -> ('un--caseSplit'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(V12)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)))))), V14)) end, V13)) end; 1 -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V18, V19)) end end end end, fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V20)) end, V12))))}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5671'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.Interactive.CaseSplit.OK', E0} -> (fun (V11) -> fun (V12) -> begin (V13 = ('Idris.Idris2.Idris.IDEMode.CaseSplit':'un--updateCase'(V8, V6, V4, V11, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)), ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V1, 1)), V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> case V3 of 0 -> ('un--updateFile'(V4, fun (V16) -> ('un--caseSplit'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(V15)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)))))), V16)) end, V12)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V19, V20)) end end end end, fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V21)) end, V15))))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E3} -> (fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.TTImp.Interactive.CaseSplit':'dn--un--show_Show_SplitError'(V22))))}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5596'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> ('Idris.Idris2.Core.FC':'un--within'({'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)), ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V1, 1))}, V10)) end; 1 -> fun (V11) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1)), V11)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processEdit-5528'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V12) -> ('un--displayType'(V7, V5, V8, V12)) end, V9, []))(V11))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V15))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--processEdit-5397'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V13, V14) -> case V14 of {'Idris.Prelude.Types.Just', E3} -> (fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = ('un--displayTerm'(V7, V5, V8, V19, V20))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Core.Name':'un--nameRoot'(V16)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), V23))))}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> case V13 of {'Idris.Prelude.Types.Just', E7} -> (fun (V24) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', V24}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V26) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V7, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0, V26)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> case V13 of {'Idris.Prelude.Types.Just', E4} -> (fun (V27) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', V27}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V29) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V7, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0, V29)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> case V13 of {'Idris.Prelude.Types.Just', E2} -> (fun (V30) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', V30}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V7, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V0, V32)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextGenDef-5242'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, {'Idris.Prelude.Types.Nothing'}, V19, V20, V21, V22, V23} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextGenDef-5172'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, V8}}, V21, V22, V23, V24, V25} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextGenDef-5105'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V0 of 0 -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, V7}}} end; _ -> begin (V11 = (V0 - 1)), fun (V12) -> ('un--nextGenDef'(V3, V2, V1, V11, V12)) end end end.
'case--case block in nextGenDef-5073'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V29 = begin (V28 = ('erlang':'put'(V1, case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, V10}}, V23, V24, V25, V26, V27} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V31) -> case V0 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V5, V9}}}; _ -> begin (V32 = (V0 - 1)), ('un--nextGenDef'(V3, V2, V1, V32, V11)) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V33) -> begin (V51 = begin (V50 = ('erlang':'put'(V1, case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, {'Idris.Prelude.Types.Nothing'}, V45, V46, V47, V48, V49} end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E37} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nextGenDef-5044'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> fun (V9) -> begin (V10 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--nextResult'('erased', V3, V2, V8, V9))), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Just', E5} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V14, V15) -> begin (V33 = begin (V32 = ('erlang':'put'(V1, case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, V15}}, V27, V28, V29, V30, V31} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E24} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V35) -> case V0 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, V14}}}; _ -> begin (V36 = (V0 - 1)), ('un--nextGenDef'(V3, V2, V1, V36, V9)) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V54 = begin (V53 = ('erlang':'put'(V1, case V4 of {'Idris.Idris.REPLOpts.MkREPLOpts', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, {'Idris.Prelude.Types.Nothing'}, V48, V49, V50, V51, V52} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E42} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextProofSearch-5003'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V7, V8, V9, V10, V11, V12, V13, V14, V15, {'Idris.Prelude.Types.Nothing'}, V17, V18, V19, V20, V21, V22} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in nextProofSearch-4937'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V9, V10, V11, V12, V13, V14, V15, V16, V17, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V7}}, V19, V20, V21, V22, V23, V24} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in nextProofSearch-4883'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V8, V9) -> fun (V10) -> begin (V28 = begin (V27 = ('erlang':'put'(V0, case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V11, V12, V13, V14, V15, V16, V17, V18, V19, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V9}}, V21, V22, V23, V24, V25, V26} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V4, V8}}} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> begin (V49 = begin (V48 = ('erlang':'put'(V0, case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V32, V33, V34, V35, V36, V37, V38, V39, V40, {'Idris.Prelude.Types.Nothing'}, V42, V43, V44, V45, V46, V47} end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end), case V49 of {'Idris.Prelude.Types.Left', E37} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nextProofSearch-4856'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V6, V7) -> fun (V8) -> begin (V9 = ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--nextResult'('erased', V2, V1, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> case V11 of {'Idris.Prelude.Types.Just', E5} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V13, V14) -> begin (V32 = begin (V31 = ('erlang':'put'(V0, case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V15, V16, V17, V18, V19, V20, V21, V22, V23, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V6, V14}}, V25, V26, V27, V28, V29, V30} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E24} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V6, V13}}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V52 = begin (V51 = ('erlang':'put'(V0, case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V35, V36, V37, V38, V39, V40, V41, V42, V43, {'Idris.Prelude.Types.Nothing'}, V45, V46, V47, V48, V49, V50} end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E42} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addMadeLemma,insertInBlank-4716'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Parser.Unlit':'un--relit'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"\x{a}"/utf8>>)))))))))) | V7]; 1 -> [V6 | ('nested--28281-4685--in--un--insertInBlank'(V0, V1, V2, V3, V4, V5, V8, V7))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--proofSearch,replaceStr-4625'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--drop'('erased', ('Idris.Idris2.Prelude.Types.String':'un--length'(V6)), ('Idris.Idris2.Prelude.Types':'un--unpack'(V4)))))))); 1 -> ('Idris.Idris2.Prelude.Types':'un--strCons'(('erlang':'hd'(('string':'next_grapheme'(V4)))), ('nested--28200-4614--in--un--replaceStr'(V0, V1, V2, V3, V6, V5, case ('string':'next_grapheme'(V4)) of [E0 | E1] when (erlang:'is_binary'(E1)) -> (fun (V8, V9) -> V9 end(E0, E1)); _ -> <<""/utf8>> end)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addClause-4547'(V0, V1, V2, V3) -> case V3 of 0 -> [('un--rtrim'(V2)) | [V0 | V1]]; 1 -> [V0 | ('un--addClause'(V2, 0, V1))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateFile-4459'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> fun (V6) -> begin (V39 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"~"/utf8>>)), V5))(V10))), {'Idris.Prelude.Types.Right', V38} end end, V6))), case V39 of {'Idris.Prelude.Types.Left', E3} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V41) -> begin (V74 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E5} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V45) -> begin (V73 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> V52 end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), begin (V60 = (V57(V58))), (V59(V60)) end end end end end end end}, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), ((V64(V66))(V65)) end end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V68(V69))), (V70(V69)) end end end end}, fun (V71) -> fun (V72) -> V72 end end}, V3, ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'((V0(('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V5))))))))))(V45))), {'Idris.Prelude.Types.Right', V73} end end, V6))), case V74 of {'Idris.Prelude.Types.Left', E7} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E9} -> (fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V3, V77}, V78)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateFile-4433'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--readFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E1} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Right', E3} -> (fun (V37) -> begin (V70 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V38) -> case V38 of {'Idris.Prelude.Types.Left', E4} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V41) -> begin (V69 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> V48 end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), begin (V56 = (V53(V54))), (V55(V56)) end end end end end end end}, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), ((V60(V62))(V61)) end end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V64(V65))), (V66(V65)) end end end end}, fun (V67) -> fun (V68) -> V68 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, <<"~"/utf8>>)), V37))(V41))), {'Idris.Prelude.Types.Right', V69} end end, V5))), case V70 of {'Idris.Prelude.Types.Left', E6} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V72) -> begin (V105 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V73) -> case V73 of {'Idris.Prelude.Types.Left', E8} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V76) -> begin (V104 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V79, V80, V81)) end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> V83 end end end, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> begin (V90 = (V87(V89))), begin (V91 = (V88(V89))), (V90(V91)) end end end end end end end}, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), ((V95(V97))(V96)) end end end end end end, fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V99(V100))), (V101(V100)) end end end end}, fun (V102) -> fun (V103) -> V103 end end}, V4, ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'((V0(('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V37))))))))))(V76))), {'Idris.Prelude.Types.Right', V104} end end, V5))), case V105 of {'Idris.Prelude.Types.Left', E10} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V107) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Prelude.Types.Left', E12} -> (fun (V108) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V4, V108}, V5)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findCG-4215'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', V5} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> begin (V40 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> begin (V39 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No such code generator: "/utf8>>, V3))))(V11))), {'Idris.Prelude.Types.Right', V39} end end, V7))), case V40 of {'Idris.Prelude.Types.Left', E3} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V42) -> begin (V70 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> V49 end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), begin (V57 = (V54(V55))), (V56(V57)) end end end end end end end}, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), ((V61(V63))(V62)) end end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V65(V66))), (V67(V66)) end end end end}, fun (V68) -> fun (V69) -> V69 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V7))), {'Idris.Prelude.Types.Right', V70} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findCG-4144'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Options.Chez'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Chez':'un--codegenChez'())} end end()); {'Idris.Core.Options.Racket'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Racket':'un--codegenRacket'())} end end()); {'Idris.Core.Options.Gambit'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Scheme.Gambit':'un--codegenGambit'())} end end()); {'Idris.Core.Options.Node'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Node':'un--codegenNode'())} end end()); {'Idris.Core.Options.Javascript'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.ES.Javascript':'un--codegenJavascript'())} end end()); {'Idris.Core.Options.RefC'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.RefC.RefC':'un--codegenRefC'())} end end()); {'Idris.Core.Options.Other', E0} -> (fun (V10) -> fun (V11) -> begin (V12 = ('Idris.Idris2.Idris.REPLOpts':'un--getCodegen'(V1, V10, V11))), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> case V14 of {'Idris.Prelude.Types.Just', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Right', V15} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V48 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V16) -> case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V19) -> begin (V47 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V22, V23, V24)) end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> V26 end end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), begin (V34 = (V31(V32))), (V33(V34)) end end end end end end end}, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), ((V38(V40))(V39)) end end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V42(V43))), (V44(V43)) end end end end}, fun (V45) -> fun (V46) -> V46 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No such code generator: "/utf8>>, V10))))(V19))), {'Idris.Prelude.Types.Right', V47} end end, V11))), case V48 of {'Idris.Prelude.Types.Left', E6} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V50) -> begin (V78 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V53, V54, V55)) end end end end end, fun (V56) -> fun (V57) -> fun (V58) -> V57 end end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> begin (V64 = (V61(V63))), begin (V65 = (V62(V63))), (V64(V65)) end end end end end end end}, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), ((V69(V71))(V70)) end end end end end end, fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V73(V74))), (V75(V74)) end end end end}, fun (V76) -> fun (V77) -> V77 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V11))), {'Idris.Prelude.Types.Right', V78} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-4068'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--setCG'(V2, V5, V6)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"No such code generator available"/utf8>>)), V7)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-4049'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V4, V5, V6, V7, V8, V0, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-4008'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V4, V0, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3967'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V0, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3926'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Options.MkPPOpts', E0, E1, E2} -> (fun (V4, V5, V6) -> {'Idris.Core.Options.MkPPOpts', V4, V5, V0} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpt-3905'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Options.MkPPOpts', E0, E1, E2} -> (fun (V4, V5, V6) -> {'Idris.Core.Options.MkPPOpts', V0, V5, V6} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayPats-3808'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> fun (V12) -> begin (V13 = (('un--displayType'(V5, V4, V3, {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', V1, V2}}))(V12))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V17 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V16) -> ('un--displayClause'(V5, V4, V3, V16)) end, V11, []))(V12))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', [V15 | V19]))} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V0)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"is not a pattern matching definition"/utf8>>))))} end end.
'nested--34174-9749--in--un--typeSummary'(V0, V1, V2, V3, V4, V5) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V0, case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V33 of {'Idris.Prelude.Types.Left', E27} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E29} -> (fun (V36) -> begin (V58 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V4, {'Idris.Core.Env.Nil'}, case V36 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V39 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V58 of {'Idris.Prelude.Types.Left', E51} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V60, V5))), case V61 of {'Idris.Prelude.Types.Left', E53} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V63) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V63)))))) | []]} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--28200-4614--in--un--replaceStr'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of <<""/utf8>> -> <<""/utf8>>; _ -> ('case--proofSearch,replaceStr-4625'(V0, V1, V2, V3, V6, V5, V4, ('Idris.Idris2.Data.String':'un--isPrefixOf'(V4, V6)))) end.
'nested--36989-12403--in--un--prompt'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> <<"[tc] "/utf8>> end()); {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> <<""/utf8>> end()); {'Idris.Idris.Syntax.Execute'} -> (fun () -> <<"[exec] "/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--34621-10168--in--un--nfun'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Normalise':'un--normaliseAll'(V5, V6, V8, V9, V10, V11)) end end end end end()); _ -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Normalise':'un--normalise'(V5, V6, V12, V13, V14, V15)) end end end end end.
'nested--37009-13150--in--un--makeSpace'(V0) -> ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Prelude.Types':'un--take'('erased', V0, ('Idris.Idris2.Data.Stream':'un--repeat'('erased', $ )))))).
'nested--28281-4685--in--un--insertInBlank'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> [('Idris.Idris2.Parser.Unlit':'un--relit'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<"\x{a}"/utf8>>)))))))) | []]; [E0 | E1] -> (fun (V8, V9) -> ('case--addMadeLemma,insertInBlank-4716'(V0, V1, V2, V3, V4, V5, V8, V9, V6, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Data.String':'un--trim'(V8)), <<""/utf8>>)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--36768-12148--in--un--getLoad'(V0, V1, V2, V3) -> {'Idris.Prelude.Types.Just', (V2(('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'(V1, ('Idris.Idris2.Prelude.Types.String':'un--length'(V3)), V3))))))}.
'nested--36768-12149--in--un--fnameCmd'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> ('case--parseRepl,fnameCmd-12174'(V0, V5, V6, V4, V2, ('Idris.Idris2.Data.String':'un--isPrefixOf'(V5, V2)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--33785-9400--in--un--execDecl'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (('Idris.Idris2.Idris.Desugar':'un--desugarDecl'(V3, V5, V4, V2, [], V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--resolveName'(V5, {'Idris.Core.Name.UN', <<"[defs]"/utf8>>}))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.TTImp.Elab.Check.EST'}, ('Idris.Idris2.TTImp.Elab.Check':'un--initEStateSub'('erased', [], V13, {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.SubRefl'})), V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('un--getItDecls'(V1, V7))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> ('un--processLocal'([], V5, V2, V4, V16, [], [], {'Idris.Core.Env.Nil'}, V19, V10, V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--34621-10167--in--un--emode'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> {'Idris.TTImp.Elab.Check.InType'} end()); _ -> {'Idris.TTImp.Elab.Check.InExpr'} end.
'nested--37009-13151--in--un--col'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--37009-13150--in--un--makeSpace'(('Idris.Idris2.Prelude.Types':'un--minus'(V0, ('Idris.Idris2.Prelude.Types.String':'un--length'(V2)))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--37009-13150--in--un--makeSpace'(('Idris.Idris2.Prelude.Types':'un--minus'(V1, ('Idris.Idris2.Prelude.Types.String':'un--length'(V3)))))), V4)))))))).
'nested--37009-13152--in--un--cmdInfo'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--37009-13151--in--un--col'((1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))), ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" "/utf8>>, V1)), ('Idris.Idris2.Idris.Parser':'dn--un--show_Show_CmdArg'(V3)), V4)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--28412-4802--in--un--addW'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> case V6 of [E2 | E3] -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V5)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V3, V9)) end, V2)), V8)))) end(E2, E3)); [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V10 = (V4 - 1)), case V6 of [E0 | E1] -> (fun (V11, V12) -> ('nested--28412-4802--in--un--addW'(V0, V1, V2, V3, V10, [V11 | V5], V12)) end(E0, E1)); [] -> ('Idris.Idris2.Data.List':'un--reverse'('erased', V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--28281-4686--in--un--addApp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of 0 -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', ('nested--28281-4685--in--un--insertInBlank'(V0, V1, V2, V3, V4, V5, V6, V8)))), V9)); _ -> begin (V10 = (V7 - 1)), case V9 of [E0 | E1] -> (fun (V11, V12) -> ('nested--28281-4686--in--un--addApp'(V0, V1, V2, V3, V4, V5, V6, V10, [V11 | V8], V12)) end(E0, E1)); [] -> ('Idris.Idris2.Data.List':'un--reverse'('erased', V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--updateFile'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--updateFile-4433'(V1, V0, V6, case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showInfo'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> fun (V6) -> begin (V88 = begin (V32 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Def'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Def'(V9, V10)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V28 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V32 of {'Idris.Prelude.Types.Left', E25} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V35) -> case V35 of {'Idris.Prelude.Types.Left', E27} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V38) -> begin (V87 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V67 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ==> "/utf8>>, ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V34))))))))(V38))), {'Idris.Prelude.Types.Right', V87} end end, V6)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V88 of {'Idris.Prelude.Types.Left', E50} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V90) -> begin (V144 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V91) -> case V91 of {'Idris.Prelude.Types.Left', E52} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V94) -> begin (V143 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V97, V98, V99)) end end end end end, fun (V100) -> fun (V101) -> fun (V102) -> V101 end end end, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V105(V107))), begin (V109 = (V106(V107))), (V108(V109)) end end end end end end end}, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), ((V113(V115))(V114)) end end end end end end, fun (V116) -> fun (V117) -> fun (V118) -> begin (V119 = (V117(V118))), (V119(V118)) end end end end}, fun (V120) -> fun (V121) -> V121 end end}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(case V5 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142) -> V129 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V94))), {'Idris.Prelude.Types.Right', V143} end end, V6))), case V144 of {'Idris.Prelude.Types.Left', E75} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V146) -> begin (V203 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V147) -> case V147 of {'Idris.Prelude.Types.Left', E77} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V149) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V150) -> begin (V202 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V153, V154, V155)) end end end end end, fun (V156) -> fun (V157) -> fun (V158) -> V157 end end end, fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> begin (V164 = (V161(V163))), begin (V165 = (V162(V163))), (V164(V165)) end end end end end end end}, fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> begin (V171 = (V168(V170))), ((V169(V171))(V170)) end end end end end end, fun (V172) -> fun (V173) -> fun (V174) -> begin (V175 = (V173(V174))), (V175(V174)) end end end end}, fun (V176) -> fun (V177) -> V177 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Erasable args: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V178) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V178)) end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V179, V180)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201) -> V184 end(E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V150))), {'Idris.Prelude.Types.Right', V202} end end, V6))), case V203 of {'Idris.Prelude.Types.Left', E100} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V205) -> begin (V262 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V206) -> case V206 of {'Idris.Prelude.Types.Left', E102} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V208) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V209) -> begin (V261 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V212, V213, V214)) end end end end end, fun (V215) -> fun (V216) -> fun (V217) -> V216 end end end, fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> begin (V223 = (V220(V222))), begin (V224 = (V221(V222))), (V223(V224)) end end end end end end end}, fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> begin (V230 = (V227(V229))), ((V228(V230))(V229)) end end end end end end, fun (V231) -> fun (V232) -> fun (V233) -> begin (V234 = (V232(V233))), (V234(V233)) end end end end}, fun (V235) -> fun (V236) -> V236 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Detaggable arg types: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V237) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V237)) end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V238, V239)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260) -> V244 end(E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V209))), {'Idris.Prelude.Types.Right', V261} end end, V6))), case V262 of {'Idris.Prelude.Types.Left', E125} -> (fun (V263) -> {'Idris.Prelude.Types.Left', V263} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V264) -> begin (V321 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V265) -> case V265 of {'Idris.Prelude.Types.Left', E127} -> (fun (V266) -> {'Idris.Prelude.Types.Left', V266} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V267) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V268) -> begin (V320 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V271, V272, V273)) end end end end end, fun (V274) -> fun (V275) -> fun (V276) -> V275 end end end, fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> begin (V282 = (V279(V281))), begin (V283 = (V280(V281))), (V282(V283)) end end end end end end end}, fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> begin (V289 = (V286(V288))), ((V287(V289))(V288)) end end end end end end, fun (V290) -> fun (V291) -> fun (V292) -> begin (V293 = (V291(V292))), (V293(V292)) end end end end}, fun (V294) -> fun (V295) -> V295 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Specialise args: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V296) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V296)) end, fun (V297) -> fun (V298) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V297, V298)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319) -> V304 end(E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V268))), {'Idris.Prelude.Types.Right', V320} end end, V6))), case V321 of {'Idris.Prelude.Types.Left', E150} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V323) -> begin (V380 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V324) -> case V324 of {'Idris.Prelude.Types.Left', E152} -> (fun (V325) -> {'Idris.Prelude.Types.Left', V325} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V326) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V327) -> begin (V379 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V328) -> fun (V329) -> fun (V330) -> fun (V331) -> fun (V332) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V330, V331, V332)) end end end end end, fun (V333) -> fun (V334) -> fun (V335) -> V334 end end end, fun (V336) -> fun (V337) -> fun (V338) -> fun (V339) -> fun (V340) -> begin (V341 = (V338(V340))), begin (V342 = (V339(V340))), (V341(V342)) end end end end end end end}, fun (V343) -> fun (V344) -> fun (V345) -> fun (V346) -> fun (V347) -> begin (V348 = (V345(V347))), ((V346(V348))(V347)) end end end end end end, fun (V349) -> fun (V350) -> fun (V351) -> begin (V352 = (V350(V351))), (V352(V351)) end end end end}, fun (V353) -> fun (V354) -> V354 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Inferrable args: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V355) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V355)) end, fun (V356) -> fun (V357) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V356, V357)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174} -> (fun (V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378) -> V364 end(E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V327))), {'Idris.Prelude.Types.Right', V379} end end, V6))), case V380 of {'Idris.Prelude.Types.Left', E175} -> (fun (V381) -> {'Idris.Prelude.Types.Left', V381} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V382) -> begin (V437 = case case V5 of {'Idris.Core.Context.MkGlobalDef', E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200} -> (fun (V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403) -> V401 end(E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Types.Just', E177} -> (fun (V404) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V405) -> case V405 of {'Idris.Prelude.Types.Left', E178} -> (fun (V406) -> {'Idris.Prelude.Types.Left', V406} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V407) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V408) -> begin (V436 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V409) -> fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V411, V412, V413)) end end end end end, fun (V414) -> fun (V415) -> fun (V416) -> V415 end end end, fun (V417) -> fun (V418) -> fun (V419) -> fun (V420) -> fun (V421) -> begin (V422 = (V419(V421))), begin (V423 = (V420(V421))), (V422(V423)) end end end end end end end}, fun (V424) -> fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> begin (V429 = (V426(V428))), ((V427(V429))(V428)) end end end end end end, fun (V430) -> fun (V431) -> fun (V432) -> begin (V433 = (V431(V432))), (V433(V432)) end end end end}, fun (V434) -> fun (V435) -> V435 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Compiled: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CDef'(V404))))))(V408))), {'Idris.Prelude.Types.Right', V436} end end, V6)) end(E177)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V437 of {'Idris.Prelude.Types.Left', E201} -> (fun (V438) -> {'Idris.Prelude.Types.Left', V438} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V439) -> begin (V479 = begin (V441 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V440) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V440)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V5)))), []))(V6))), case V441 of {'Idris.Prelude.Types.Left', E203} -> (fun (V442) -> {'Idris.Prelude.Types.Left', V442} end(E203)); {'Idris.Prelude.Types.Right', E204} -> (fun (V443) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V444) -> case V444 of {'Idris.Prelude.Types.Left', E205} -> (fun (V445) -> {'Idris.Prelude.Types.Left', V445} end(E205)); {'Idris.Prelude.Types.Right', E206} -> (fun (V446) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V447) -> begin (V478 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V448) -> fun (V449) -> fun (V450) -> fun (V451) -> fun (V452) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V450, V451, V452)) end end end end end, fun (V453) -> fun (V454) -> fun (V455) -> V454 end end end, fun (V456) -> fun (V457) -> fun (V458) -> fun (V459) -> fun (V460) -> begin (V461 = (V458(V460))), begin (V462 = (V459(V460))), (V461(V462)) end end end end end end end}, fun (V463) -> fun (V464) -> fun (V465) -> fun (V466) -> fun (V467) -> begin (V468 = (V465(V467))), ((V466(V468))(V467)) end end end end end end, fun (V469) -> fun (V470) -> fun (V471) -> begin (V472 = (V470(V471))), (V472(V471)) end end end end}, fun (V473) -> fun (V474) -> V474 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Refers to: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V475) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V475)) end, fun (V476) -> fun (V477) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V476, V477)) end end}, V443))))))(V447))), {'Idris.Prelude.Types.Right', V478} end end, V6)) end(E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V479 of {'Idris.Prelude.Types.Left', E207} -> (fun (V480) -> {'Idris.Prelude.Types.Left', V480} end(E207)); {'Idris.Prelude.Types.Right', E208} -> (fun (V481) -> begin (V521 = begin (V483 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V482) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V482)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V5)))), []))(V6))), case V483 of {'Idris.Prelude.Types.Left', E209} -> (fun (V484) -> {'Idris.Prelude.Types.Left', V484} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V485) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V486) -> case V486 of {'Idris.Prelude.Types.Left', E211} -> (fun (V487) -> {'Idris.Prelude.Types.Left', V487} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V488) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V489) -> begin (V520 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V490) -> fun (V491) -> fun (V492) -> fun (V493) -> fun (V494) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V492, V493, V494)) end end end end end, fun (V495) -> fun (V496) -> fun (V497) -> V496 end end end, fun (V498) -> fun (V499) -> fun (V500) -> fun (V501) -> fun (V502) -> begin (V503 = (V500(V502))), begin (V504 = (V501(V502))), (V503(V504)) end end end end end end end}, fun (V505) -> fun (V506) -> fun (V507) -> fun (V508) -> fun (V509) -> begin (V510 = (V507(V509))), ((V508(V510))(V509)) end end end end end end, fun (V511) -> fun (V512) -> fun (V513) -> begin (V514 = (V512(V513))), (V514(V513)) end end end end}, fun (V515) -> fun (V516) -> V516 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Refers to (runtime): "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V517) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V517)) end, fun (V518) -> fun (V519) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V518, V519)) end end}, V485))))))(V489))), {'Idris.Prelude.Types.Right', V520} end end, V6)) end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V521 of {'Idris.Prelude.Types.Left', E213} -> (fun (V522) -> {'Idris.Prelude.Types.Left', V522} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V523) -> begin (V580 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V524) -> case V524 of {'Idris.Prelude.Types.Left', E215} -> (fun (V525) -> {'Idris.Prelude.Types.Left', V525} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V526) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V527) -> begin (V579 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V528) -> fun (V529) -> fun (V530) -> fun (V531) -> fun (V532) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V530, V531, V532)) end end end end end, fun (V533) -> fun (V534) -> fun (V535) -> V534 end end end, fun (V536) -> fun (V537) -> fun (V538) -> fun (V539) -> fun (V540) -> begin (V541 = (V538(V540))), begin (V542 = (V539(V540))), (V541(V542)) end end end end end end end}, fun (V543) -> fun (V544) -> fun (V545) -> fun (V546) -> fun (V547) -> begin (V548 = (V545(V547))), ((V546(V548))(V547)) end end end end end end, fun (V549) -> fun (V550) -> fun (V551) -> begin (V552 = (V550(V551))), (V552(V551)) end end end end}, fun (V553) -> fun (V554) -> V554 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Flags: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V555) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_DefFlag'(V555)) end, fun (V556) -> fun (V557) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_DefFlag'(V556, V557)) end end}, case V5 of {'Idris.Core.Context.MkGlobalDef', E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237} -> (fun (V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578) -> V569 end(E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))(V527))), {'Idris.Prelude.Types.Right', V579} end end, V6))), case V580 of {'Idris.Prelude.Types.Left', E238} -> (fun (V581) -> {'Idris.Prelude.Types.Left', V581} end(E238)); {'Idris.Prelude.Types.Right', E239} -> (fun (V582) -> begin (V612 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V583) -> fun (V584) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V585) -> fun (V586) -> fun (V587) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_SCCall'(V585, V586, V587)) end end end, fun (V588) -> fun (V589) -> fun (V590) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_SCCall'(V588, V589, V590)) end end end}, V583, V584)) end end, case V5 of {'Idris.Core.Context.MkGlobalDef', E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260} -> (fun (V591, V592, V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611) -> V611 end(E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V6))), case V612 of {'Idris.Prelude.Types.Left', E261} -> (fun (V613) -> {'Idris.Prelude.Types.Left', V613} end(E261)); {'Idris.Prelude.Types.Right', E262} -> (fun (V614) -> case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Data.List':'un--isNil'('erased', case V5 of {'Idris.Core.Context.MkGlobalDef', E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289} -> (fun (V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635) -> V635 end(E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) of 0 -> ((begin (V674 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V636) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V636 of {'Idris.Core.Context.MkSCCall', E263, E264} -> (fun (V637, V638) -> V637 end(E263, E264)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V639) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V640) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V641) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V641)) end, fun (V642) -> fun (V643) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V642, V643)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V644) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_SizeChange'(V644)) end, fun (V645) -> fun (V646) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_SizeChange'(V645, V646)) end end}}, V640)) end, fun (V647) -> fun (V648) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V649) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V649)) end, fun (V650) -> fun (V651) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V650, V651)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V652) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_SizeChange'(V652)) end, fun (V653) -> fun (V654) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_SizeChange'(V653, V654)) end end}}, V647, V648)) end end}, V639)) end, fun (V655) -> fun (V656) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V657) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V658) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V658)) end, fun (V659) -> fun (V660) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V659, V660)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V661) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_SizeChange'(V661)) end, fun (V662) -> fun (V663) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_SizeChange'(V662, V663)) end end}}, V657)) end, fun (V664) -> fun (V665) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V666) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V666)) end, fun (V667) -> fun (V668) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V667, V668)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V669) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_SizeChange'(V669)) end, fun (V670) -> fun (V671) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_SizeChange'(V670, V671)) end end}}, V664, V665)) end end}, V655, V656)) end end}, case V636 of {'Idris.Core.Context.MkSCCall', E265, E266} -> (fun (V672, V673) -> V673 end(E265, E266)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))) end, V614))), fun () -> fun (V675) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V676) -> case V676 of {'Idris.Prelude.Types.Left', E267} -> (fun (V677) -> {'Idris.Prelude.Types.Left', V677} end(E267)); {'Idris.Prelude.Types.Right', E268} -> (fun (V678) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E268)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V679) -> begin (V707 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V680) -> fun (V681) -> fun (V682) -> fun (V683) -> fun (V684) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V682, V683, V684)) end end end end end, fun (V685) -> fun (V686) -> fun (V687) -> V686 end end end, fun (V688) -> fun (V689) -> fun (V690) -> fun (V691) -> fun (V692) -> begin (V693 = (V690(V692))), begin (V694 = (V691(V692))), (V693(V694)) end end end end end end end}, fun (V695) -> fun (V696) -> fun (V697) -> fun (V698) -> fun (V699) -> begin (V700 = (V697(V699))), ((V698(V700))(V699)) end end end end end end, fun (V701) -> fun (V702) -> fun (V703) -> begin (V704 = (V702(V703))), (V704(V703)) end end end end}, fun (V705) -> fun (V706) -> V706 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Size change: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V674))))))(V679))), {'Idris.Prelude.Types.Right', V707} end end, V675)) end end end())(V6)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E262)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--setOpt'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, case V7 of {'Idris.Core.Options.MkPPOpts', E3, E4, E5} -> (fun (V8, V9, V10) -> {'Idris.Core.Options.MkPPOpts', V3, V9, V10} end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E6} -> (fun (V11) -> fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V12))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, case V15 of {'Idris.Core.Options.MkPPOpts', E9, E10, E11} -> (fun (V16, V17, V18) -> {'Idris.Core.Options.MkPPOpts', V16, V17, V11} end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6)); {'Idris.Idris.Syntax.ShowTypes', E12} -> (fun (V19) -> fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V24) -> begin (V41 = ('erlang':'put'(V1, case V24 of {'Idris.Idris.REPLOpts.MkREPLOpts', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V19, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); {'Idris.Idris.Syntax.EvalMode', E31} -> (fun (V42) -> fun (V43) -> begin (V45 = begin (V44 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E32} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V47) -> begin (V64 = ('erlang':'put'(V1, case V47 of {'Idris.Idris.REPLOpts.MkREPLOpts', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V48, V42, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V64} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); {'Idris.Idris.Syntax.Editor', E50} -> (fun (V65) -> fun (V66) -> begin (V68 = begin (V67 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E51} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V70) -> begin (V87 = ('erlang':'put'(V1, case V70 of {'Idris.Idris.REPLOpts.MkREPLOpts', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V71, V72, V73, V74, V75, V65, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86} end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V87} end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E50)); {'Idris.Idris.Syntax.CG', E69} -> (fun (V88) -> fun (V89) -> begin (V91 = begin (V90 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V90} end), case V91 of {'Idris.Prelude.Types.Left', E70} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V93) -> (('case--setOpt-4068'(V88, V1, V0, V93, ('Idris.Idris2.Core.Options':'un--getCG'(case V93 of {'Idris.Core.Context.MkDefs', E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> V98 end(E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V88))))(V89)) end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rtrim'(V0) -> ('Idris.Idris2.Prelude.Types':'un--reverse'(('Idris.Idris2.Data.String':'un--ltrim'(('Idris.Idris2.Prelude.Types':'un--reverse'(V0)))))).
'un--replCmd'(V0, V1, V2, V3, V4, V5) -> case V5 of <<""/utf8>> -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> fun (V7) -> begin (V8 = ('un--interpret'(V0, V1, V2, V3, V4, V5, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('un--displayResult'(V0, V1, V2, V3, V4, V10))(V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--repl'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--getNS'(V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V61 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V16) -> begin (V60 = (('Idris.Idris2.Prelude.IO':'un--putStr'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--36989-12403--in--un--prompt'(V4, V3, V2, V1, V0, case V12 of {'Idris.Idris.REPLOpts.MkREPLOpts', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V45 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V8)), <<"> "/utf8>>))))))(V16))), {'Idris.Prelude.Types.Right', V60} end end, V5))), case V61 of {'Idris.Prelude.Types.Left', E22} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V63) -> begin (V96 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V64) -> case V64 of {'Idris.Prelude.Types.Left', E24} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V67) -> begin (V95 = (('Idris.Idris2.Erlang.System.File':'un--fflush'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> V74 end end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), begin (V82 = (V79(V80))), (V81(V82)) end end end end end end end}, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> begin (V88 = (V85(V87))), ((V86(V88))(V87)) end end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> begin (V92 = (V90(V91))), (V92(V91)) end end end end}, fun (V93) -> fun (V94) -> V94 end end}, ('Idris.Idris2.Erlang.System.File':'un--stdout'())))(V67))), {'Idris.Prelude.Types.Right', V95} end end, V5))), case V96 of {'Idris.Prelude.Types.Left', E26} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V98) -> begin (V127 = begin (V126 = (('Idris.Idris2.Prelude.IO':'un--getLine'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V101, V102, V103)) end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> V105 end end end, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> begin (V112 = (V109(V111))), begin (V113 = (V110(V111))), (V112(V113)) end end end end end end end}, fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> begin (V119 = (V116(V118))), ((V117(V119))(V118)) end end end end end end, fun (V120) -> fun (V121) -> fun (V122) -> begin (V123 = (V121(V122))), (V123(V122)) end end end end}, fun (V124) -> fun (V125) -> V125 end end}))(V5))), {'Idris.Prelude.Types.Right', V126} end), case V127 of {'Idris.Prelude.Types.Left', E28} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V129) -> (('case--repl-12460'(V4, V3, V2, V1, V0, V8, V12, V129, 1))(V5)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--proofSearch'(V0, V1, V2, V3) -> case V2 of 0 -> case V3 of [E2 | E3] -> (fun (V4, V5) -> [('nested--28200-4614--in--un--replaceStr'(V4, V5, V1, V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"?"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)))), V1, V4)) | V5] end(E2, E3)); _ -> case V3 of [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V6 = (V2 - 1)), case V3 of [E0 | E1] -> (fun (V7, V8) -> [V7 | ('un--proofSearch'(V0, V1, V6, V8))] end(E0, E1)); _ -> case V3 of [] -> []; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--processLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.TTImp.Elab.Local':'un--localHelper'('erased', V0, V1, V2, V3, V4, V6, V7, V8, fun (V11) -> ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V12) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V0, V1, V2, V3, V5, V11, V7, V12)) end, V9)) end, V10)).
'un--processEdit'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.TypeAt', E0, E1, E2} -> (fun (V6, V7, V8) -> fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V8, case V13 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V14 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V41 of {'Idris.Prelude.Types.Left', E32} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V43) -> begin (V48 = case V43 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> begin (V45 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V44) -> ('un--displayType'(V0, V2, V13, V44)) end, V43, []))(V9))), case V45 of {'Idris.Prelude.Types.Left', E34} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V47))}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V48 of {'Idris.Prelude.Types.Left', E36} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V50) -> begin (V54 = ('Idris.Idris2.Core.Metadata':'un--findTypeAt'(V3, fun (V51) -> fun (V52) -> ('un--anyAt'('erased', 'erased', fun (V53) -> ('Idris.Idris2.Core.FC':'un--within'({'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V6, 1)), ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V7, 1))}, V53)) end, V51, V52)) end end, V9))), case V54 of {'Idris.Prelude.Types.Left', E38} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V56) -> (('case--processEdit-5397'(V8, V7, V6, V4, V3, V2, V1, V0, V13, V43, V50, V56, {'Idris.Builtin.MkPair', V50, V56}))(V9)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.Idris.Syntax.CaseSplit', E40, E41, E42, E43} -> (fun (V57, V58, V59, V60) -> begin (V61 = ('case--processEdit-5596'(V60, V59, V58, V57, V4, V3, V2, V1, V0, ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V59, 0))))), fun (V62) -> begin (V65 = ('Idris.Idris2.TTImp.Interactive.CaseSplit':'un--getSplits'(V0, V3, V1, fun (V63) -> fun (V64) -> ('un--anyAt'('erased', 'erased', V61, V63, V64)) end end, V60, V62))), case V65 of {'Idris.Prelude.Types.Left', E44} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V67) -> case V67 of {'Idris.TTImp.Interactive.CaseSplit.OK', E46} -> (fun (V68) -> begin (V69 = ('Idris.Idris2.Idris.IDEMode.CaseSplit':'un--updateCase'(V0, V2, V4, V68, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V58, 1)), ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V59, 1)), V62))), case V69 of {'Idris.Prelude.Types.Left', E47} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V71) -> case V57 of 0 -> ('un--updateFile'(V4, fun (V72) -> ('un--caseSplit'(('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(V71)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V58, 1)))))), V72)) end, V62)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V75, V76)) end end end end, fun (V77) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V77)) end, V71))))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E49} -> (fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.TTImp.Interactive.CaseSplit':'dn--un--show_Show_SplitError'(V78))))}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E40, E41, E42, E43)); {'Idris.Idris.Syntax.AddClause', E50, E51, E52} -> (fun (V79, V80, V81) -> fun (V82) -> begin (V83 = ('Idris.Idris2.Idris.IDEMode.CaseSplit':'un--getClause'(V0, V3, V4, V80, V81, V82))), case V83 of {'Idris.Prelude.Types.Left', E53} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V85) -> case V85 of {'Idris.Prelude.Types.Just', E55} -> (fun (V86) -> case V79 of 0 -> ('un--updateFile'(V4, fun (V87) -> ('un--addClause'(V86, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V80)))), V87)) end, V82)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V86))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V81)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"not defined here"/utf8>>))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E50, E51, E52)); {'Idris.Idris.Syntax.ExprSearch', E56, E57, E58, E59} -> (fun (V88, V89, V90, V91) -> fun (V92) -> begin (V94 = begin (V93 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V93} end), case V94 of {'Idris.Prelude.Types.Left', E60} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V96) -> begin (V98 = begin (V97 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E62} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V100) -> begin (V112 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V101)), ('Idris.Idris2.Core.Name':'un--dropNS'(V102)))) end end, V90, case V100 of {'Idris.Idris.Syntax.MkSyntax', E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V109 end(E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V140 = ('Idris.Idris2.Core.Context':'un--lookupDefName'(V90, case V96 of {'Idris.Core.Context.MkDefs', E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139) -> V113 end(E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V92))), case V140 of {'Idris.Prelude.Types.Left', E100} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V142) -> case V142 of [E102 | E103] -> (fun (V143, V144) -> case V143 of {'Idris.Builtin.MkPair', E104, E105} -> (fun (V145, V146) -> case V146 of {'Idris.Builtin.MkPair', E106, E107} -> (fun (V147, V148) -> case V148 of {'Idris.Core.Context.Hole', E108, E109} -> (fun (V149, V150) -> case V144 of [] -> begin (V152 = fun (V151) -> ('Idris.Idris2.TTImp.Interactive.ExprSearch':'un--exprSearch'(V0, V3, V1, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V90, [], V151)) end), begin (V154 = begin (V153 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V153} end), case V154 of {'Idris.Prelude.Types.Left', E110} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V156) -> begin (V174 = begin (V173 = ('erlang':'put'(V4, case V156 of {'Idris.Idris.REPLOpts.MkREPLOpts', E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V157, V158, V159, V160, V161, V162, V163, V164, V165, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V90, V152}}, V167, V168, V169, V170, V171, V172} end(E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V173} end), case V174 of {'Idris.Prelude.Types.Left', E128} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V176) -> begin (V178 = begin (V177 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V177} end), case V178 of {'Idris.Prelude.Types.Left', E130} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V180) -> begin (V181 = ('un--nextProofSearch'(V0, V1, V4, V92))), case V181 of {'Idris.Prelude.Types.Left', E132} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V183) -> case V183 of {'Idris.Prelude.Types.Just', E134} -> (fun (V184) -> case V184 of {'Idris.Builtin.MkPair', E135, E136} -> (fun (V185, V186) -> begin (V187 = ('un--dropLams'(V149, V186))), begin (V188 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V2, V187, V92))), case V188 of {'Idris.Prelude.Types.Left', E137} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V190) -> begin (V191 = case V112 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V190)); 1 -> V190; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V88 of 0 -> ('un--updateFile'(V4, fun (V192) -> ('un--proofSearch'(V90, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V191)), ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V89, 1)))))), V192)) end, V92)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V191))}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E134)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V193) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V193)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No search results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No search results"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V194) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V194)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E108, E109)); {'Idris.Core.Context.PMDef', E139, E140, E141, E142, E143} -> (fun (V195, V196, V197, V198, V199) -> case V196 of [] -> case V197 of {'Idris.Core.CaseTree.STerm', E144, E145} -> (fun (V200, V201) -> case V144 of [] -> begin (V202 = [{'Idris.Builtin.MkPair', V145, {'Idris.Builtin.MkPair', V147, {'Idris.Core.Context.PMDef', V195, [], {'Idris.Core.CaseTree.STerm', V200, V201}, V198, V199}}} | []]), (('case--case block in processEdit-6475'(V91, V90, V89, V88, V4, V3, V2, V1, V0, V96, V100, V112, V198, V199, V200, V145, V147, V201, V195, V202, case V195 of {'Idris.Core.Context.MkPMDefInfo', E146, E147} -> (fun (V203, V204) -> V203 end(E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V92)) end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V205) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V205)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E144, E145)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V206) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V206)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V207) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V207)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E139, E140, E141, E142, E143)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V208) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V208)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E106, E107)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V209) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V209)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E104, E105)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V210) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V210)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E102, E103)); [] -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"Unknown name"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V90))))}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V211) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V211)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E56, E57, E58, E59)); {'Idris.Idris.Syntax.ExprSearchNext'} -> (fun () -> fun (V212) -> begin (V214 = begin (V213 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V213} end), case V214 of {'Idris.Prelude.Types.Left', E148} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V216) -> begin (V218 = begin (V217 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V217} end), case V218 of {'Idris.Prelude.Types.Left', E150} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V220) -> begin (V221 = ('un--nextProofSearch'(V0, V1, V4, V212))), case V221 of {'Idris.Prelude.Types.Left', E152} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V223) -> case V223 of {'Idris.Prelude.Types.Just', E154} -> (fun (V224) -> case V224 of {'Idris.Builtin.MkPair', E155, E156} -> (fun (V225, V226) -> begin (V254 = ('Idris.Idris2.Core.Context':'un--lookupDefName'(V225, case V216 of {'Idris.Core.Context.MkDefs', E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183} -> (fun (V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253) -> V227 end(E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V212))), case V254 of {'Idris.Prelude.Types.Left', E184} -> (fun (V255) -> {'Idris.Prelude.Types.Left', V255} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V256) -> case V256 of [E186 | E187] -> (fun (V257, V258) -> case V257 of {'Idris.Builtin.MkPair', E188, E189} -> (fun (V259, V260) -> case V260 of {'Idris.Builtin.MkPair', E190, E191} -> (fun (V261, V262) -> case V262 of {'Idris.Core.Context.Hole', E192, E193} -> (fun (V263, V264) -> case V258 of [] -> begin (V276 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V265) -> fun (V266) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V265)), ('Idris.Idris2.Core.Name':'un--dropNS'(V266)))) end end, V225, case V220 of {'Idris.Idris.Syntax.MkSyntax', E194, E195, E196, E197, E198, E199, E200, E201, E202} -> (fun (V267, V268, V269, V270, V271, V272, V273, V274, V275) -> V273 end(E194, E195, E196, E197, E198, E199, E200, E201, E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V277 = ('un--dropLams'(V263, V226))), begin (V278 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V2, V277, V212))), case V278 of {'Idris.Prelude.Types.Left', E203} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E203)); {'Idris.Prelude.Types.Right', E204} -> (fun (V280) -> begin (V281 = case V276 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V280)); 1 -> V280; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V281))}} end end(E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V282) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V282)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E192, E193)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V283) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V283)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E190, E191)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V284) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V284)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E188, E189)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V285) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V285)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E186, E187)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V286) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V286)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Not a searchable hole"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Not a searchable hole"/utf8>>))))))))))))}} end end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155, E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E154)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V287) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V287)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No more results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No more results"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.GenerateDef', E205, E206, E207, E208} -> (fun (V288, V289, V290, V291) -> fun (V292) -> begin (V294 = begin (V293 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V293} end), case V294 of {'Idris.Prelude.Types.Left', E209} -> (fun (V295) -> {'Idris.Prelude.Types.Left', V295} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V296) -> begin (V299 = ('Idris.Idris2.Core.Metadata':'un--findTyDeclAt'(V3, fun (V297) -> fun (V298) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V289, 1)), V297)) end end, V292))), case V299 of {'Idris.Prelude.Types.Left', E211} -> (fun (V300) -> {'Idris.Prelude.Types.Left', V300} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V301) -> case V301 of {'Idris.Prelude.Types.Just', E213} -> (fun (V302) -> case V302 of {'Idris.Builtin.MkPair', E214, E215} -> (fun (V303, V304) -> case V304 of {'Idris.Builtin.MkPair', E216, E217} -> (fun (V305, V306) -> case V306 of {'Idris.Builtin.MkPair', E218, E219} -> (fun (V307, V308) -> begin (V336 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V305, case V296 of {'Idris.Core.Context.MkDefs', E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246} -> (fun (V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335) -> V309 end(E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V292))), case V336 of {'Idris.Prelude.Types.Left', E247} -> (fun (V337) -> {'Idris.Prelude.Types.Left', V337} end(E247)); {'Idris.Prelude.Types.Right', E248} -> (fun (V338) -> begin (V339 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V303, {'Idris.Builtin.MkPair', V305, {'Idris.Builtin.MkPair', V307, V308}}}}), case V338 of {'Idris.Prelude.Types.Just', E249} -> (fun (V340) -> case V340 of {'Idris.Core.Context.None'} -> (fun () -> begin (V346 = fun (V341) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--makeDefSort'(V0, V3, V1, fun (V342) -> fun (V343) -> ('Idris.Idris2.Core.FC':'un--onLine'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V289, 1)), V342)) end end, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), fun (V344) -> fun (V345) -> ('Idris.Idris2.TTImp.Interactive.GenerateDef':'un--mostUsed'(V344, V345)) end end, V305, V341)) end), begin (V348 = begin (V347 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V347} end), case V348 of {'Idris.Prelude.Types.Left', E250} -> (fun (V349) -> {'Idris.Prelude.Types.Left', V349} end(E250)); {'Idris.Prelude.Types.Right', E251} -> (fun (V350) -> begin (V368 = begin (V367 = ('erlang':'put'(V4, case V350 of {'Idris.Idris.REPLOpts.MkREPLOpts', E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267} -> (fun (V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V289, V346}}, V362, V363, V364, V365, V366} end(E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V367} end), case V368 of {'Idris.Prelude.Types.Left', E268} -> (fun (V369) -> {'Idris.Prelude.Types.Left', V369} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V370) -> begin (V371 = ('un--nextGenDef'(V0, V1, V4, V291, V292))), case V371 of {'Idris.Prelude.Types.Left', E270} -> (fun (V372) -> {'Idris.Prelude.Types.Left', V372} end(E270)); {'Idris.Prelude.Types.Right', E271} -> (fun (V373) -> begin (V374 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.None'}}), case V373 of {'Idris.Prelude.Types.Just', E272} -> (fun (V375) -> case V375 of {'Idris.Builtin.MkPair', E273, E274} -> (fun (V376, V377) -> case V377 of {'Idris.Builtin.MkPair', E275, E276} -> (fun (V378, V379) -> begin (V380 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Core.FC':'un--startCol'(('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V378))))))))), begin (V381 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V289, V292))), case V381 of {'Idris.Prelude.Types.Left', E277} -> (fun (V382) -> {'Idris.Prelude.Types.Left', V382} end(E277)); {'Idris.Prelude.Types.Right', E278} -> (fun (V383) -> begin (V384 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V376, {'Idris.Builtin.MkPair', V378, V379}}}), case V383 of {'Idris.Prelude.Types.Just', E279} -> (fun (V385) -> begin (V386 = {'Idris.Prelude.Types.Just', V385}), (('case--case block in case block in case block in case block in processEdit-7412'(V291, V290, V289, V288, V4, V3, V2, V1, V0, V296, V308, V307, V303, V305, V339, V374, V346, V350, V376, V378, V379, V384, V380, V385, V386, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V385))))(V292)) end end(E279)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V387) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V387)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E275, E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E273, E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E272)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V388) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V388)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No search results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No search results"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E271)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V389) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V389)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Already defined"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Already defined"/utf8>>))))))))))))}} end end(E249)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V290))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E248)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E214, E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E213)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"Can\x{27}t find declaration for"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V290)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"on line"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Int'('erased', V289))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E205, E206, E207, E208)); {'Idris.Idris.Syntax.GenerateDefNext'} -> (fun () -> fun (V390) -> begin (V391 = ('un--nextGenDef'(V0, V1, V4, 0, V390))), case V391 of {'Idris.Prelude.Types.Left', E280} -> (fun (V392) -> {'Idris.Prelude.Types.Left', V392} end(E280)); {'Idris.Prelude.Types.Right', E281} -> (fun (V393) -> case V393 of {'Idris.Prelude.Types.Just', E282} -> (fun (V394) -> case V394 of {'Idris.Builtin.MkPair', E283, E284} -> (fun (V395, V396) -> case V396 of {'Idris.Builtin.MkPair', E285, E286} -> (fun (V397, V398) -> begin (V399 = ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(('Idris.Idris2.Core.FC':'un--startCol'(('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V397))))))))), begin (V400 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V395, V390))), case V400 of {'Idris.Prelude.Types.Left', E287} -> (fun (V401) -> {'Idris.Prelude.Types.Left', V401} end(E287)); {'Idris.Prelude.Types.Right', E288} -> (fun (V402) -> begin (V403 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V395, {'Idris.Builtin.MkPair', V397, V398}}}), case V402 of {'Idris.Prelude.Types.Just', E289} -> (fun (V404) -> begin (V405 = {'Idris.Prelude.Types.Just', V404}), (('case--case block in case block in processEdit-7956'(V4, V3, V2, V1, V0, V395, V397, V398, V403, V399, V404, V405, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V404))))(V390)) end end(E289)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V406) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V406)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E288)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E285, E286)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E283, E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E282)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V407) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V407)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"No more results"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"No more results"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.MakeLemma', E290, E291, E292} -> (fun (V408, V409, V410) -> fun (V411) -> begin (V413 = begin (V412 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V412} end), case V413 of {'Idris.Prelude.Types.Left', E293} -> (fun (V414) -> {'Idris.Prelude.Types.Left', V414} end(E293)); {'Idris.Prelude.Types.Right', E294} -> (fun (V415) -> begin (V417 = begin (V416 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V416} end), case V417 of {'Idris.Prelude.Types.Left', E295} -> (fun (V418) -> {'Idris.Prelude.Types.Left', V418} end(E295)); {'Idris.Prelude.Types.Right', E296} -> (fun (V419) -> begin (V431 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V420) -> fun (V421) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V420)), ('Idris.Idris2.Core.Name':'un--dropNS'(V421)))) end end, V410, case V419 of {'Idris.Idris.Syntax.MkSyntax', E297, E298, E299, E300, E301, E302, E303, E304, E305} -> (fun (V422, V423, V424, V425, V426, V427, V428, V429, V430) -> V428 end(E297, E298, E299, E300, E301, E302, E303, E304, E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V459 = ('un--lookupDefTyName'(V410, case V415 of {'Idris.Core.Context.MkDefs', E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332} -> (fun (V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458) -> V432 end(E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331, E332)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V411))), case V459 of {'Idris.Prelude.Types.Left', E333} -> (fun (V460) -> {'Idris.Prelude.Types.Left', V460} end(E333)); {'Idris.Prelude.Types.Right', E334} -> (fun (V461) -> case V461 of [E335 | E336] -> (fun (V462, V463) -> case V462 of {'Idris.Builtin.MkPair', E337, E338} -> (fun (V464, V465) -> case V465 of {'Idris.Builtin.MkPair', E339, E340} -> (fun (V466, V467) -> case V467 of {'Idris.Builtin.MkPair', E341, E342} -> (fun (V468, V469) -> case V468 of {'Idris.Core.Context.Hole', E343, E344} -> (fun (V470, V471) -> case V463 of [] -> begin (V472 = ('Idris.Idris2.TTImp.Interactive.MakeLemma':'un--makeLemma'(V3, V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V410, V470, V469, V411))), case V472 of {'Idris.Prelude.Types.Left', E345} -> (fun (V473) -> {'Idris.Prelude.Types.Left', V473} end(E345)); {'Idris.Prelude.Types.Right', E346} -> (fun (V474) -> begin (V475 = [{'Idris.Builtin.MkPair', V464, {'Idris.Builtin.MkPair', V466, {'Idris.Builtin.MkPair', {'Idris.Core.Context.Hole', V470, V471}, V469}}} | []]), case V474 of {'Idris.Builtin.MkPair', E347, E348} -> (fun (V476, V477) -> begin (V478 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V2, V476, V411))), case V478 of {'Idris.Prelude.Types.Left', E349} -> (fun (V479) -> {'Idris.Prelude.Types.Left', V479} end(E349)); {'Idris.Prelude.Types.Right', E350} -> (fun (V480) -> begin (V481 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V2, V477, V411))), case V481 of {'Idris.Prelude.Types.Left', E351} -> (fun (V482) -> {'Idris.Prelude.Types.Left', V482} end(E351)); {'Idris.Prelude.Types.Right', E352} -> (fun (V483) -> begin (V485 = begin (V484 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V484} end), case V485 of {'Idris.Prelude.Types.Left', E353} -> (fun (V486) -> {'Idris.Prelude.Types.Left', V486} end(E353)); {'Idris.Prelude.Types.Right', E354} -> (fun (V487) -> begin (V488 = ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(case V431 of 0 -> ('Idris.Idris2.Idris.Resugar':'un--addBracket'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V483)); 1 -> V483; _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V489 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V409, V411))), case V489 of {'Idris.Prelude.Types.Left', E355} -> (fun (V490) -> {'Idris.Prelude.Types.Left', V490} end(E355)); {'Idris.Prelude.Types.Right', E356} -> (fun (V491) -> begin (V492 = {'Idris.Builtin.MkPair', V476, V477}), case V491 of {'Idris.Prelude.Types.Just', E357} -> (fun (V493) -> begin (V494 = {'Idris.Prelude.Types.Just', V493}), (('case--case block in case block in case block in processEdit-8358'(V410, V409, V408, V4, V3, V2, V1, V0, V415, V419, V431, V471, V464, V466, V470, V469, V475, V476, V477, V492, V480, V483, V487, V488, V493, V494, ('Idris.Idris2.Parser.Unlit':'un--isLitLine'(V493))))(V411)) end end(E357)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V495) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V495)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not found"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not found"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E356)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E354)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E352)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E350)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E347, E348)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E346)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V496) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V496)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end(E343, E344)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V497) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V497)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end(E341, E342)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V498) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V498)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end(E339, E340)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V499) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V499)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end(E337, E338)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V500) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V500)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end(E335, E336)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V501) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V501)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Can\x{27}t make lifted definition"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Can\x{27}t make lifted definition"/utf8>>))))))))))))}} end end(E334)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E296)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E294)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E290, E291, E292)); {'Idris.Idris.Syntax.MakeCase', E358, E359, E360} -> (fun (V502, V503, V504) -> fun (V505) -> begin (V506 = ('Idris.Idris2.Idris.REPLOpts':'un--getLitStyle'(V4, V505))), case V506 of {'Idris.Prelude.Types.Left', E361} -> (fun (V507) -> {'Idris.Prelude.Types.Left', V507} end(E361)); {'Idris.Prelude.Types.Right', E362} -> (fun (V508) -> begin (V510 = begin (V509 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V509} end), case V510 of {'Idris.Prelude.Types.Left', E363} -> (fun (V511) -> {'Idris.Prelude.Types.Left', V511} end(E363)); {'Idris.Prelude.Types.Right', E364} -> (fun (V512) -> begin (V524 = ('Idris.Idris2.Data.List':'un--elemBy'('erased', fun (V513) -> fun (V514) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V513)), ('Idris.Idris2.Core.Name':'un--dropNS'(V514)))) end end, V504, case V512 of {'Idris.Idris.Syntax.MkSyntax', E365, E366, E367, E368, E369, E370, E371, E372, E373} -> (fun (V515, V516, V517, V518, V519, V520, V521, V522, V523) -> V521 end(E365, E366, E367, E368, E369, E370, E371, E372, E373)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V525 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V503, V505))), case V525 of {'Idris.Prelude.Types.Left', E374} -> (fun (V526) -> {'Idris.Prelude.Types.Left', V526} end(E374)); {'Idris.Prelude.Types.Right', E375} -> (fun (V527) -> case V527 of {'Idris.Prelude.Types.Just', E376} -> (fun (V528) -> begin (V529 = {'Idris.Prelude.Types.Just', V528}), (('case--case block in processEdit-8698'(V504, V503, V502, V4, V3, V2, V1, V0, V508, V512, V524, V528, V529, ('Idris.Idris2.Parser.Unlit':'un--unlit'(V508, V528))))(V505)) end end(E376)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V530) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V530)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not available"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not available"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E375)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E364)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E362)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E358, E359, E360)); {'Idris.Idris.Syntax.MakeWith', E377, E378, E379} -> (fun (V531, V532, V533) -> fun (V534) -> begin (V535 = ('Idris.Idris2.Idris.REPLOpts':'un--getLitStyle'(V4, V534))), case V535 of {'Idris.Prelude.Types.Left', E380} -> (fun (V536) -> {'Idris.Prelude.Types.Left', V536} end(E380)); {'Idris.Prelude.Types.Right', E381} -> (fun (V537) -> begin (V538 = ('Idris.Idris2.Idris.REPLOpts':'un--getSourceLine'(V4, V532, V534))), case V538 of {'Idris.Prelude.Types.Left', E382} -> (fun (V539) -> {'Idris.Prelude.Types.Left', V539} end(E382)); {'Idris.Prelude.Types.Right', E383} -> (fun (V540) -> case V540 of {'Idris.Prelude.Types.Just', E384} -> (fun (V541) -> begin (V542 = {'Idris.Prelude.Types.Just', V541}), (('case--case block in processEdit-8960'(V533, V532, V531, V4, V3, V2, V1, V0, V537, V541, V542, ('Idris.Idris2.Parser.Unlit':'un--unlit'(V537, V541))))(V534)) end end(E384)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.EditError', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V543) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--unsafeTextWithoutNewLines'('erased', V543)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'case--pretty-5439'('erased', <<"Source line not available"/utf8>>, ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<"\x{a}"/utf8>>, <<"Source line not available"/utf8>>))))))))))))}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E383)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E381)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E377, E378, E379)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processCatch'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V22) -> begin (V23 = (('un--process'(V0, V1, V2, V3, V4, V5))(V22))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'un--commit'(V0, V22))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', V25} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V29) -> fun (V30) -> begin (V32 = begin (V31 = ('erlang':'put'(V0, V9))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'put'(V1, V13))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'put'(V2, V17))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V4, V21))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Idris.Error':'un--display'(V0, V2, V4, V29, V30))), case V47 of {'Idris.Prelude.Types.Left', E20} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.REPLError', V49}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--process'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.NewDefn', E0} -> (fun (V6) -> fun (V7) -> ('un--execDecls'(V0, V1, V2, V3, V4, V6, V7)) end end(E0)); {'Idris.Idris.Syntax.Eval', E1} -> (fun (V8) -> fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> (('case--process-10205'(V8, V4, V3, V2, V1, V0, V13, case V13 of {'Idris.Idris.REPLOpts.MkREPLOpts', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V15 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); {'Idris.Idris.Syntax.Check', E20} -> (fun (V30) -> case V30 of {'Idris.Idris.Syntax.PRef', E43, E44} -> (fun (V31, V32) -> case V32 of {'Idris.Core.Name.UN', E78} -> (fun (V33) -> case V33 of <<"it"/utf8>> -> fun (V34) -> begin (V36 = begin (V35 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E112} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V38) -> (('case--process-10649'(V31, V4, V3, V2, V1, V0, V38, case V38 of {'Idris.Idris.REPLOpts.MkREPLOpts', E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V50 end(E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V34)) end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V55) -> begin (V57 = begin (V56 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V56} end), case V57 of {'Idris.Prelude.Types.Left', E79} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V59) -> begin (V87 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V32, case V59 of {'Idris.Core.Context.MkDefs', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V60 end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V55))), case V87 of {'Idris.Prelude.Types.Left', E108} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V89) -> case V89 of [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V31, V32, V55)); _ -> begin (V91 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V90) -> ('un--displayType'(V0, V2, V59, V90)) end, V89, []))(V55))), case V91 of {'Idris.Prelude.Types.Left', E110} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V93))}} end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E78)); _ -> fun (V94) -> begin (V96 = begin (V95 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V95} end), case V96 of {'Idris.Prelude.Types.Left', E45} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V98) -> begin (V126 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V32, case V98 of {'Idris.Core.Context.MkDefs', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V99 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V94))), case V126 of {'Idris.Prelude.Types.Left', E74} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V128) -> case V128 of [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V31, V32, V94)); _ -> begin (V130 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V129) -> ('un--displayType'(V0, V2, V98, V129)) end, V128, []))(V94))), case V130 of {'Idris.Prelude.Types.Left', E76} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V132) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V132))}} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E43, E44)); _ -> fun (V133) -> begin (V134 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[input]"/utf8>>}))(V133))), case V134 of {'Idris.Prelude.Types.Left', E21} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V136) -> begin (V137 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V2, V0, V3, V1, {'Idris.Idris.Desugar.AnyExpr'}, [], V30, V133))), case V137 of {'Idris.Prelude.Types.Left', E23} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V139) -> begin (V140 = ('un--getItDecls'(V4, V133))), case V140 of {'Idris.Prelude.Types.Left', E25} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V142) -> begin (V143 = {'Idris.TTImp.TTImp.ILocal', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V142, V139}), begin (V144 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V3, V1, V136, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V143, {'Idris.Prelude.Types.Nothing'}))(V133))), case V144 of {'Idris.Prelude.Types.Left', E27} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V146) -> case V146 of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V147, V148) -> begin (V150 = begin (V149 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V149} end), case V150 of {'Idris.Prelude.Types.Left', E31} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V152) -> begin (V156 = begin (V153 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V152, {'Idris.Core.Env.Nil'}, V147, V133))), case V153 of {'Idris.Prelude.Types.Left', E33} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V155) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V2, {'Idris.Core.Env.Nil'}, V155, V133)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V156 of {'Idris.Prelude.Types.Left', E35} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V158) -> begin (V159 = (('Idris.Idris2.Core.Normalise':'un--getTerm'('erased', V148))(V133))), case V159 of {'Idris.Prelude.Types.Left', E37} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V161) -> begin (V165 = begin (V162 = (('Idris.Idris2.Core.Normalise':'un--normaliseScope'(V0, [], V152, {'Idris.Core.Env.Nil'}, V161))(V133))), case V162 of {'Idris.Prelude.Types.Left', E39} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V164) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V2, {'Idris.Core.Env.Nil'}, V164, V133)) end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V165 of {'Idris.Prelude.Types.Left', E41} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V167) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.TermChecked', V158, V167}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E20)); {'Idris.Idris.Syntax.PrintDef', E130} -> (fun (V168) -> fun (V169) -> begin (V171 = begin (V170 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V170} end), case V171 of {'Idris.Prelude.Types.Left', E131} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V173) -> begin (V201 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V168, case V173 of {'Idris.Core.Context.MkDefs', E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159} -> (fun (V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200) -> V174 end(E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V169))), case V201 of {'Idris.Prelude.Types.Left', E160} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V203) -> case V203 of [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V168, V169)); _ -> begin (V205 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V204) -> ('un--displayPats'(V0, V2, V173, V204)) end, V203, []))(V169))), case V205 of {'Idris.Prelude.Types.Left', E162} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V207) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V207))}} end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E130)); {'Idris.Idris.Syntax.Reload'} -> (fun () -> fun (V208) -> begin (V210 = begin (V209 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V209} end), case V210 of {'Idris.Prelude.Types.Left', E164} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E164)); {'Idris.Prelude.Types.Right', E165} -> (fun (V212) -> (('case--process-10962'(V4, V3, V2, V1, V0, V212, case V212 of {'Idris.Idris.REPLOpts.MkREPLOpts', E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181} -> (fun (V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228) -> V215 end(E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V208)) end(E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.Load', E182} -> (fun (V229) -> fun (V230) -> begin (V232 = begin (V231 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V231} end), case V232 of {'Idris.Prelude.Types.Left', E183} -> (fun (V233) -> {'Idris.Prelude.Types.Left', V233} end(E183)); {'Idris.Prelude.Types.Right', E184} -> (fun (V234) -> begin (V252 = begin (V251 = ('erlang':'put'(V4, case V234 of {'Idris.Idris.REPLOpts.MkREPLOpts', E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200} -> (fun (V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V235, V236, {'Idris.Prelude.Types.Just', V229}, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250} end(E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V251} end), case V252 of {'Idris.Prelude.Types.Left', E201} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V254) -> ('un--loadMainFile'(V0, V1, V2, V3, V4, V229, V230)) end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E182)); {'Idris.Idris.Syntax.ImportMod', E203} -> (fun (V255) -> fun (V256) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V257) -> begin (V258 = ('Idris.Idris2.Idris.ProcessIdr':'un--addImport'(V0, V1, V2, {'Idris.Idris.Syntax.MkImport', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 1, V255, ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V255))}, V257))), case V258 of {'Idris.Prelude.Types.Left', E204} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V260) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ModuleLoaded', ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V255))}} end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V261) -> fun (V262) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorLoadingModule', ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V255)), V261}} end end, V256)) end end(E203)); {'Idris.Idris.Syntax.CD', E206} -> (fun (V263) -> fun (V264) -> begin (V265 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V0, V263, V264))), case V265 of {'Idris.Prelude.Types.Left', E207} -> (fun (V266) -> {'Idris.Prelude.Types.Left', V266} end(E207)); {'Idris.Prelude.Types.Right', E208} -> (fun (V267) -> begin (V268 = ('Idris.Idris2.Core.Context':'un--getWorkingDir'(V264))), case V268 of {'Idris.Prelude.Types.Left', E209} -> (fun (V269) -> {'Idris.Prelude.Types.Left', V269} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V270) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CurrentDirectory', V270}} end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E206)); {'Idris.Idris.Syntax.CWD'} -> (fun () -> fun (V271) -> begin (V272 = ('Idris.Idris2.Core.Context':'un--getWorkingDir'(V271))), case V272 of {'Idris.Prelude.Types.Left', E211} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V274) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CurrentDirectory', V274}} end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.Edit'} -> (fun () -> fun (V275) -> begin (V277 = begin (V276 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V276} end), case V277 of {'Idris.Prelude.Types.Left', E213} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V279) -> (('case--process-11108'(V4, V3, V2, V1, V0, V279, case V279 of {'Idris.Idris.REPLOpts.MkREPLOpts', E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230} -> (fun (V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295) -> V282 end(E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V275)) end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.Compile', E231, E232} -> (fun (V296, V297) -> fun (V298) -> ('un--compileExp'(V0, V1, V2, V3, V4, V296, V297, V298)) end end(E231, E232)); {'Idris.Idris.Syntax.Exec', E233} -> (fun (V299) -> fun (V300) -> ('un--execExp'(V0, V1, V2, V3, V4, V299, V300)) end end(E233)); {'Idris.Idris.Syntax.Help'} -> (fun () -> fun (V301) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.RequestedHelp'}} end end()); {'Idris.Idris.Syntax.TypeSearch', E234} -> (fun (V302) -> fun (V303) -> begin (V304 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V303))), case V304 of {'Idris.Prelude.Types.Left', E235} -> (fun (V305) -> {'Idris.Prelude.Types.Left', V305} end(E235)); {'Idris.Prelude.Types.Right', E236} -> (fun (V306) -> begin (V334 = case V306 of {'Idris.Core.Context.MkDefs', E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263} -> (fun (V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333) -> V309 end(E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V362 = case V306 of {'Idris.Core.Context.MkDefs', E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290} -> (fun (V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361) -> V335 end(E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V363 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V2, V0, V3, V1, {'Idris.Idris.Desugar.AnyExpr'}, [], V302, V303))), case V363 of {'Idris.Prelude.Types.Left', E291} -> (fun (V364) -> {'Idris.Prelude.Types.Left', V364} end(E291)); {'Idris.Prelude.Types.Right', E292} -> (fun (V365) -> begin (V366 = ('Idris.Idris2.TTImp.BindImplicits':'un--piBindNames'(('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), [], V365))), begin (V367 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V3, V1, 0, {'Idris.TTImp.Elab.Check.InType'}, [], [], {'Idris.Core.Env.Nil'}, V366, {'Idris.Prelude.Types.Nothing'}))(V303))), case V367 of {'Idris.Prelude.Types.Left', E293} -> (fun (V368) -> {'Idris.Prelude.Types.Left', V368} end(E293)); {'Idris.Prelude.Types.Right', E294} -> (fun (V369) -> case V369 of {'Idris.Builtin.MkPair', E295, E296} -> (fun (V370, V371) -> begin (V376 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V372) -> fun (V373) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V372, V373)) end end, fun (V374) -> fun (V375) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V374, V375)) end end}, V370, V303))), case V376 of {'Idris.Prelude.Types.Left', E297} -> (fun (V377) -> {'Idris.Prelude.Types.Left', V377} end(E297)); {'Idris.Prelude.Types.Right', E298} -> (fun (V378) -> begin (V492 = begin (V379 = (('Idris.Idris2.Core.Context':'un--allNames'(V362))(V303))), case V379 of {'Idris.Prelude.Types.Left', E299} -> (fun (V380) -> {'Idris.Prelude.Types.Left', V380} end(E299)); {'Idris.Prelude.Types.Right', E300} -> (fun (V381) -> begin (V385 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V382) -> ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V383) -> fun (V384) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V383, V384)) end end, V362, V382)) end, V381, []))(V303))), case V385 of {'Idris.Prelude.Types.Left', E301} -> (fun (V386) -> {'Idris.Prelude.Types.Left', V386} end(E301)); {'Idris.Prelude.Types.Right', E302} -> (fun (V387) -> begin (V464 = ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V388) -> fun (V389) -> ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', V388, V389)) end end, V387, fun (V390) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V390, fun (V391) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V392) -> fun (V393) -> fun (V394) -> fun (V395) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V394, V395)) end end end end, fun (V396) -> fun (V397) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V397)) end end, fun (V398) -> fun (V399) -> fun (V400) -> fun (V401) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V400, V401)) end end end end}, fun (V402) -> fun (V403) -> fun (V404) -> fun (V405) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V404, V405)) end end end end, fun (V406) -> fun (V407) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V407)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V408) -> fun (V409) -> fun (V410) -> fun (V411) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V410, V411)) end end end end, fun (V412) -> fun (V413) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V413)) end end, fun (V414) -> fun (V415) -> fun (V416) -> fun (V417) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V416, V417)) end end end end}, fun (V418) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V419) -> fun (V420) -> fun (V421) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V420, V421)) end end end}, ('Idris.Idris2.Core.Context':'un--visibleIn'(V334, case V391 of {'Idris.Core.Context.MkGlobalDef', E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323} -> (fun (V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442) -> V423 end(E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V391 of {'Idris.Core.Context.MkGlobalDef', E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344} -> (fun (V443, V444, V445, V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463) -> V452 end(E324, E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V391)) end)) end)) end))), begin (V467 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V465) -> fun (V466) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_GlobalDef'(V362, V465, V466)) end end, V464, []))(V303))), case V467 of {'Idris.Prelude.Types.Left', E345} -> (fun (V468) -> {'Idris.Prelude.Types.Left', V468} end(E345)); {'Idris.Prelude.Types.Right', E346} -> (fun (V469) -> (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V470) -> ('un--equivTypes'(V0, case V470 of {'Idris.Core.Context.MkGlobalDef', E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367} -> (fun (V471, V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491) -> V473 end(E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V378)) end, V469))(V303)) end(E346)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E300)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V492 of {'Idris.Prelude.Types.Left', E368} -> (fun (V493) -> {'Idris.Prelude.Types.Left', V493} end(E368)); {'Idris.Prelude.Types.Right', E369} -> (fun (V494) -> begin (V496 = begin (V495 = ('erlang':'put'(V0, V306))), {'Idris.Prelude.Types.Right', V495} end), case V496 of {'Idris.Prelude.Types.Left', E370} -> (fun (V497) -> {'Idris.Prelude.Types.Left', V497} end(E370)); {'Idris.Prelude.Types.Right', E371} -> (fun (V498) -> begin (V527 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V499) -> fun (V500) -> ('un--docsOrSignature'(V0, V2, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V499, V500)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V503, V504)) end end end end, fun (V505) -> case V505 of {'Idris.Core.Context.MkGlobalDef', E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392} -> (fun (V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526) -> V507 end(E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V494)), []))(V303))), case V527 of {'Idris.Prelude.Types.Left', E393} -> (fun (V528) -> {'Idris.Prelude.Types.Left', V528} end(E393)); {'Idris.Prelude.Types.Right', E394} -> (fun (V529) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V530) -> fun (V531) -> fun (V532) -> fun (V533) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V532, V533)) end end end end, fun (V534) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V534)) end, ('Idris.Idris2.Data.List':'un--intersperse'('erased', <<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_List'('erased', V529))))))))}} end(E394)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E371)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E369)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E298)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E295, E296)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E294)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E292)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E234)); {'Idris.Idris.Syntax.Missing', E395} -> (fun (V535) -> fun (V536) -> begin (V538 = begin (V537 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V537} end), case V538 of {'Idris.Prelude.Types.Left', E396} -> (fun (V539) -> {'Idris.Prelude.Types.Left', V539} end(E396)); {'Idris.Prelude.Types.Right', E397} -> (fun (V540) -> begin (V568 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V535, case V540 of {'Idris.Core.Context.MkDefs', E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424} -> (fun (V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560, V561, V562, V563, V564, V565, V566, V567) -> V541 end(E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V536))), case V568 of {'Idris.Prelude.Types.Left', E425} -> (fun (V569) -> {'Idris.Prelude.Types.Left', V569} end(E425)); {'Idris.Prelude.Types.Right', E426} -> (fun (V570) -> case V570 of [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V535, V536)); _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V571) -> case V571 of {'Idris.Prelude.Types.Left', E427} -> (fun (V572) -> {'Idris.Prelude.Types.Left', V572} end(E427)); {'Idris.Prelude.Types.Right', E428} -> (fun (V573) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Missed', V573}} end(E428)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V574) -> fun (V575) -> begin (V576 = ('Idris.Idris2.Core.Context':'un--getTotality'(V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V574, V575))), case V576 of {'Idris.Prelude.Types.Left', E429} -> (fun (V577) -> {'Idris.Prelude.Types.Left', V577} end(E429)); {'Idris.Prelude.Types.Right', E430} -> (fun (V578) -> begin (V579 = V570), (('case--case block in process-11468'(V535, V4, V3, V2, V1, V0, V540, V570, V579, V574, V578, case V578 of {'Idris.Core.TT.MkTotality', E431, E432} -> (fun (V580, V581) -> V581 end(E431, E432)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V575)) end end(E430)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V582) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V582)) end, V570)), [])), V536)) end end(E426)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E397)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E395)); {'Idris.Idris.Syntax.Total', E433} -> (fun (V583) -> fun (V584) -> begin (V586 = begin (V585 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V585} end), case V586 of {'Idris.Prelude.Types.Left', E434} -> (fun (V587) -> {'Idris.Prelude.Types.Left', V587} end(E434)); {'Idris.Prelude.Types.Right', E435} -> (fun (V588) -> begin (V616 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V583, case V588 of {'Idris.Core.Context.MkDefs', E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462} -> (fun (V589, V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615) -> V589 end(E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V584))), case V616 of {'Idris.Prelude.Types.Left', E463} -> (fun (V617) -> {'Idris.Prelude.Types.Left', V617} end(E463)); {'Idris.Prelude.Types.Right', E464} -> (fun (V618) -> case V618 of [] -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V583, V584)); _ -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V619) -> case V619 of {'Idris.Prelude.Types.Left', E465} -> (fun (V620) -> {'Idris.Prelude.Types.Left', V620} end(E465)); {'Idris.Prelude.Types.Right', E466} -> (fun (V621) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CheckedTotal', V621}} end(E466)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V622) -> fun (V623) -> begin (V628 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V624) -> case V624 of {'Idris.Prelude.Types.Left', E467} -> (fun (V625) -> {'Idris.Prelude.Types.Left', V625} end(E467)); {'Idris.Prelude.Types.Right', E468} -> (fun (V626) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E468)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V627) -> ('Idris.Idris2.Core.Termination':'un--checkTotal'(V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V622, V627)) end, V623))), case V628 of {'Idris.Prelude.Types.Left', E469} -> (fun (V629) -> {'Idris.Prelude.Types.Left', V629} end(E469)); {'Idris.Prelude.Types.Right', E470} -> (fun (V630) -> begin (V638 = begin (V631 = ('Idris.Idris2.Core.Context':'un--getTotality'(V0, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V622, V623))), case V631 of {'Idris.Prelude.Types.Left', E471} -> (fun (V632) -> {'Idris.Prelude.Types.Left', V632} end(E471)); {'Idris.Prelude.Types.Right', E472} -> (fun (V633) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V634) -> fun (V635) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Totality'(V634, V635)) end end, fun (V636) -> fun (V637) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Totality'(V636, V637)) end end}, V633, V623)) end(E472)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V638 of {'Idris.Prelude.Types.Left', E473} -> (fun (V639) -> {'Idris.Prelude.Types.Left', V639} end(E473)); {'Idris.Prelude.Types.Right', E474} -> (fun (V640) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V622, V640}} end(E474)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E470)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V641) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V641)) end, V618)), [])), V584)) end end(E464)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E435)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E433)); {'Idris.Idris.Syntax.Doc', E475} -> (fun (V642) -> fun (V643) -> begin (V644 = (('Idris.Idris2.Idris.DocString':'un--getDocsForPTerm'(V0, V2, V642))(V643))), case V644 of {'Idris.Prelude.Types.Left', E476} -> (fun (V645) -> {'Idris.Prelude.Types.Left', V645} end(E476)); {'Idris.Prelude.Types.Right', E477} -> (fun (V646) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V647) -> fun (V648) -> fun (V649) -> fun (V650) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V649, V650)) end end end end, fun (V651) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V651)) end, V646))))}} end(E477)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E475)); {'Idris.Idris.Syntax.Browse', E478} -> (fun (V652) -> fun (V653) -> begin (V654 = ('Idris.Idris2.Idris.DocString':'un--getContents'(V0, V2, V652, V653))), case V654 of {'Idris.Prelude.Types.Left', E479} -> (fun (V655) -> {'Idris.Prelude.Types.Left', V655} end(E479)); {'Idris.Prelude.Types.Right', E480} -> (fun (V656) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V657) -> fun (V658) -> fun (V659) -> fun (V660) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V659, V660)) end end end end, fun (V661) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V661)) end, V656))))}} end(E480)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E478)); {'Idris.Idris.Syntax.DebugInfo', E481} -> (fun (V662) -> fun (V663) -> begin (V665 = begin (V664 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V664} end), case V665 of {'Idris.Prelude.Types.Left', E482} -> (fun (V666) -> {'Idris.Prelude.Types.Left', V666} end(E482)); {'Idris.Prelude.Types.Right', E483} -> (fun (V667) -> begin (V699 = begin (V695 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V662, case V667 of {'Idris.Core.Context.MkDefs', E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510} -> (fun (V668, V669, V670, V671, V672, V673, V674, V675, V676, V677, V678, V679, V680, V681, V682, V683, V684, V685, V686, V687, V688, V689, V690, V691, V692, V693, V694) -> V668 end(E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V663))), case V695 of {'Idris.Prelude.Types.Left', E511} -> (fun (V696) -> {'Idris.Prelude.Types.Left', V696} end(E511)); {'Idris.Prelude.Types.Right', E512} -> (fun (V697) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V698) -> ('un--showInfo'(V0, V698)) end, V697))(V663)) end(E512)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V699 of {'Idris.Prelude.Types.Left', E513} -> (fun (V700) -> {'Idris.Prelude.Types.Left', V700} end(E513)); {'Idris.Prelude.Types.Right', E514} -> (fun (V701) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E514)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E483)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E481)); {'Idris.Idris.Syntax.SetOpt', E515} -> (fun (V702) -> fun (V703) -> begin (V704 = (('un--setOpt'(V0, V4, V702))(V703))), case V704 of {'Idris.Prelude.Types.Left', E516} -> (fun (V705) -> {'Idris.Prelude.Types.Left', V705} end(E516)); {'Idris.Prelude.Types.Right', E517} -> (fun (V706) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E517)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E515)); {'Idris.Idris.Syntax.GetOpts'} -> (fun () -> fun (V707) -> begin (V708 = ('un--getOptions'(V0, V4, V707))), case V708 of {'Idris.Prelude.Types.Left', E518} -> (fun (V709) -> {'Idris.Prelude.Types.Left', V709} end(E518)); {'Idris.Prelude.Types.Right', E519} -> (fun (V710) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.OptionsSet', V710}} end(E519)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.SetLog', E520} -> (fun (V711) -> fun (V712) -> begin (V713 = ('Idris.Idris2.Core.Context':'un--addLogLevel'(V0, V711, V712))), case V713 of {'Idris.Prelude.Types.Left', E521} -> (fun (V714) -> {'Idris.Prelude.Types.Left', V714} end(E521)); {'Idris.Prelude.Types.Right', E522} -> (fun (V715) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.LogLevelSet', V711}} end(E522)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E520)); {'Idris.Idris.Syntax.SetConsoleWidth', E523} -> (fun (V716) -> fun (V717) -> begin (V718 = ('Idris.Idris2.Idris.REPLOpts':'un--setConsoleWidth'(V4, V716, V717))), case V718 of {'Idris.Prelude.Types.Left', E524} -> (fun (V719) -> {'Idris.Prelude.Types.Left', V719} end(E524)); {'Idris.Prelude.Types.Right', E525} -> (fun (V720) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ConsoleWidthSet', V716}} end(E525)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E523)); {'Idris.Idris.Syntax.SetColor', E526} -> (fun (V721) -> fun (V722) -> begin (V723 = ('Idris.Idris2.Idris.REPLOpts':'un--setColor'(V4, V721, V722))), case V723 of {'Idris.Prelude.Types.Left', E527} -> (fun (V724) -> {'Idris.Prelude.Types.Left', V724} end(E527)); {'Idris.Prelude.Types.Right', E528} -> (fun (V725) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ColorSet', V721}} end(E528)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E526)); {'Idris.Idris.Syntax.Metavars'} -> (fun () -> fun (V726) -> begin (V728 = begin (V727 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V727} end), case V728 of {'Idris.Prelude.Types.Left', E529} -> (fun (V729) -> {'Idris.Prelude.Types.Left', V729} end(E529)); {'Idris.Prelude.Types.Right', E530} -> (fun (V730) -> begin (V758 = case V730 of {'Idris.Core.Context.MkDefs', E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552, E553, E554, E555, E556, E557} -> (fun (V731, V732, V733, V734, V735, V736, V737, V738, V739, V740, V741, V742, V743, V744, V745, V746, V747, V748, V749, V750, V751, V752, V753, V754, V755, V756, V757) -> V731 end(E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549, E550, E551, E552, E553, E554, E555, E556, E557)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V759 = ('Idris.Idris2.Core.Context':'un--getUserHoles'(V0, V726))), case V759 of {'Idris.Prelude.Types.Left', E558} -> (fun (V760) -> {'Idris.Prelude.Types.Left', V760} end(E558)); {'Idris.Prelude.Types.Right', E559} -> (fun (V761) -> begin (V763 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V762) -> ('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V762, V758)) end, V761, []))(V726))), case V763 of {'Idris.Prelude.Types.Left', E560} -> (fun (V764) -> {'Idris.Prelude.Types.Left', V764} end(E560)); {'Idris.Prelude.Types.Right', E561} -> (fun (V765) -> begin (V780 = (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V766) -> fun (V767) -> fun (V768) -> fun (V769) -> fun (V770) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V768, V769, V770)) end end end end end, fun (V771) -> fun (V772) -> fun (V773) -> fun (V774) -> fun (V775) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V773, V774, V775)) end end end end end, fun (V776) -> fun (V777) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V777)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V778) -> fun (V779) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V778, V779)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V765))), begin (V787 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V781) -> case V781 of {'Idris.Builtin.MkPair', E562, E563} -> (fun (V782, V783) -> case V783 of {'Idris.Builtin.MkPair', E564, E565} -> (fun (V784, V785) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('Idris.Idris2.Idris.IDEMode.Holes':'un--isHole'(V785)), fun (V786) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Builtin.MkPair', V782, {'Idris.Builtin.MkPair', V785, V786}})) end)) end(E564, E565)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E562, E563)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V780))), begin (V789 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V788) -> ('case--process-11808'(V4, V3, V2, V1, V0, V730, V758, V761, V765, V780, V787, V788, V788)) end, V787, []))(V726))), case V789 of {'Idris.Prelude.Types.Left', E566} -> (fun (V790) -> {'Idris.Prelude.Types.Left', V790} end(E566)); {'Idris.Prelude.Types.Right', E567} -> (fun (V791) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FoundHoles', V791}} end(E567)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E561)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E559)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E530)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.Syntax.Editing', E568} -> (fun (V792) -> fun (V793) -> begin (V794 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V793))), case V794 of {'Idris.Prelude.Types.Left', E569} -> (fun (V795) -> {'Idris.Prelude.Types.Left', V795} end(E569)); {'Idris.Prelude.Types.Right', E570} -> (fun (V796) -> begin (V800 = ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, case V796 of {'Idris.Core.Options.MkPPOpts', E571, E572, E573} -> (fun (V797, V798, V799) -> {'Idris.Core.Options.MkPPOpts', V797, 1, V799} end(E571, E572, E573)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V793))), case V800 of {'Idris.Prelude.Types.Left', E574} -> (fun (V801) -> {'Idris.Prelude.Types.Left', V801} end(E574)); {'Idris.Prelude.Types.Right', E575} -> (fun (V802) -> begin (V803 = (('un--processEdit'(V0, V1, V2, V3, V4, V792))(V793))), case V803 of {'Idris.Prelude.Types.Left', E576} -> (fun (V804) -> {'Idris.Prelude.Types.Left', V804} end(E576)); {'Idris.Prelude.Types.Right', E577} -> (fun (V805) -> begin (V806 = ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, V796, V793))), case V806 of {'Idris.Prelude.Types.Left', E578} -> (fun (V807) -> {'Idris.Prelude.Types.Left', V807} end(E578)); {'Idris.Prelude.Types.Right', E579} -> (fun (V808) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Edited', V805}} end(E579)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E577)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E575)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E570)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E568)); {'Idris.Idris.Syntax.CGDirective', E580} -> (fun (V809) -> fun (V810) -> begin (V829 = begin (V811 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V810))), case V811 of {'Idris.Prelude.Types.Left', E581} -> (fun (V812) -> {'Idris.Prelude.Types.Left', V812} end(E581)); {'Idris.Prelude.Types.Right', E582} -> (fun (V813) -> ('Idris.Idris2.Core.Context':'un--setSession'(V0, case V813 of {'Idris.Core.Options.MkSessionOpts', E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597} -> (fun (V814, V815, V816, V817, V818, V819, V820, V821, V822, V823, V824, V825, V826, V827, V828) -> {'Idris.Core.Options.MkSessionOpts', V814, V815, V816, V817, [V809 | V818], V819, V820, V821, V822, V823, V824, V825, V826, V827, V828} end(E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V810)) end(E582)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V829 of {'Idris.Prelude.Types.Left', E598} -> (fun (V830) -> {'Idris.Prelude.Types.Left', V830} end(E598)); {'Idris.Prelude.Types.Right', E599} -> (fun (V831) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E599)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E580)); {'Idris.Idris.Syntax.RunShellCommand', E600} -> (fun (V832) -> fun (V833) -> begin (V866 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V834) -> case V834 of {'Idris.Prelude.Types.Left', E601} -> (fun (V835) -> {'Idris.Prelude.Types.Left', V835} end(E601)); {'Idris.Prelude.Types.Right', E602} -> (fun (V836) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E602)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V837) -> begin (V865 = (('Idris.Idris2.Erlang.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V838) -> fun (V839) -> fun (V840) -> fun (V841) -> fun (V842) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V840, V841, V842)) end end end end end, fun (V843) -> fun (V844) -> fun (V845) -> V844 end end end, fun (V846) -> fun (V847) -> fun (V848) -> fun (V849) -> fun (V850) -> begin (V851 = (V848(V850))), begin (V852 = (V849(V850))), (V851(V852)) end end end end end end end}, fun (V853) -> fun (V854) -> fun (V855) -> fun (V856) -> fun (V857) -> begin (V858 = (V855(V857))), ((V856(V858))(V857)) end end end end end end, fun (V859) -> fun (V860) -> fun (V861) -> begin (V862 = (V860(V861))), (V862(V861)) end end end end}, fun (V863) -> fun (V864) -> V864 end end}, V832))(V837))), {'Idris.Prelude.Types.Right', V865} end end, V833))), case V866 of {'Idris.Prelude.Types.Left', E603} -> (fun (V867) -> {'Idris.Prelude.Types.Left', V867} end(E603)); {'Idris.Prelude.Types.Right', E604} -> (fun (V868) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end(E604)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E600)); {'Idris.Idris.Syntax.Quit'} -> (fun () -> fun (V869) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Exited'}} end end()); {'Idris.Idris.Syntax.NOP'} -> (fun () -> fun (V870) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Done'}} end end()); {'Idris.Idris.Syntax.ShowVersion'} -> (fun () -> fun (V871) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.VersionIs', ('Idris.Idris2.Idris.Version':'un--version'())}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--printClause'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V5, V6, V7) -> fun (V8) -> begin (V9 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V6, V8))), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V7, V8))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Parser.Unlit':'un--relit'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', V3, $ )))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V14))))))))))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E7, E8, E9, E10, E11, E12} -> (fun (V15, V16, V17, V18, V19, V20) -> fun (V21) -> begin (V22 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V16, V21))), case V22 of {'Idris.Prelude.Types.Left', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V17, V21))), case V25 of {'Idris.Prelude.Types.Left', E15} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V27) -> begin (V29 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V28) -> ('un--printClause'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V3, (1 + (1 + 0)))), V28)) end, V20, []))(V21))), case V29 of {'Idris.Prelude.Types.Left', E17} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Parser.Unlit':'un--relit'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', V3, $ )))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V32) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" proof "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V32)))) end end, V18)), <<"\x{a}"/utf8>>)))))))))))))), ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, V31))))} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.ImpossibleClause', E19, E20} -> (fun (V33, V34) -> fun (V35) -> begin (V36 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V0, V1, V34, V35))), case V36 of {'Idris.Prelude.Types.Left', E21} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V38) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Parser.Unlit':'un--relit'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', V3, $ )))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V38)), <<" impossible"/utf8>>))))))} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prepareExp'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Idris.Desugar':'un--desugar'(V2, V0, V3, V1, {'Idris.Idris.Desugar.AnyExpr'}, [], {'Idris.Idris.Syntax.PApp', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.UN', <<"unsafePerformIO"/utf8>>}}, V5}, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('un--getItDecls'(V4, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = {'Idris.TTImp.TTImp.ILocal', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V12, V9}), begin (V14 = (('Idris.Idris2.Core.Context':'un--resolveName'(V0, {'Idris.Core.Name.UN', <<"[input]"/utf8>>}))(V6))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V3, V1, V16, {'Idris.TTImp.Elab.Check.InExpr'}, [], [], {'Idris.Core.Env.Nil'}, V13, {'Idris.Prelude.Types.Nothing'}))(V6))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V20, V21) -> begin (V26 = ('Idris.Idris2.Core.LinearCheck':'un--linearCheck'([], V0, V1, ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V24) -> fun (V25) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V24, V25)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), 0, {'Idris.Core.Env.Nil'}, V20, V6))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Compiler.Inline':'un--compileAndInlineAll'(V0, V6))), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> {'Idris.Prelude.Types.Right', V28} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--parseRepl'(V0) -> ('case--parseRepl-12246'(V0, ('nested--36768-12149--in--un--fnameCmd'(V0, [{'Idris.Builtin.MkPair', <<":load "/utf8>>, fun (V1) -> {'Idris.Idris.Syntax.Load', V1} end} | [{'Idris.Builtin.MkPair', <<":l "/utf8>>, fun (V2) -> {'Idris.Idris.Syntax.Load', V2} end} | [{'Idris.Builtin.MkPair', <<":cd "/utf8>>, fun (V3) -> {'Idris.Idris.Syntax.CD', V3} end} | [{'Idris.Builtin.MkPair', <<":!"/utf8>>, fun (V4) -> {'Idris.Idris.Syntax.RunShellCommand', V4} end} | []]]]], V0)))).
'un--parseEmptyCmd'() -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, fun (V0) -> fun (V1) -> V1 end end, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()))), fun (V2) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 1, V2, {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Nothing'}})) end}.
'un--parseCmd'() -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Idris.Parser':'un--command'()), fun (V0) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Source':'un--eoi'()), {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Prelude.Types.Just', V0}}} end}.
'un--nextProofSearch'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--nextProofSearch-4856'(V2, V1, V0, V7, case V7 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V17 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nextGenDef'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('case--nextGenDef-5044'(V3, V2, V1, V0, V8, case V8 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V19 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupDefTyName'(V0, V1, V2) -> ('Idris.Idris2.Core.Context':'un--lookupNameBy'('erased', fun (V3) -> {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V27 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V0, V1, V2)).
'un--loadMainFile'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V28 = begin (V27 = ('erlang':'put'(V4, case V10 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, {'Idris.Prelude.Types.Nothing'}, V23, V24, V25, V26} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Idris.REPLCommon':'un--resetContext'(V0, V1, V2, V3, V6))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> begin (V62 = begin (V61 = (('Idris.Idris2.Erlang.System.File':'un--readFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V36, V37, V38)) end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> V40 end end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), begin (V48 = (V45(V46))), (V47(V48)) end end end end end end end}, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), ((V52(V54))(V53)) end end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V56(V57))), (V58(V57)) end end end end}, fun (V59) -> fun (V60) -> V60 end end}, V5))(V6))), {'Idris.Prelude.Types.Right', V61} end), case V62 of {'Idris.Prelude.Types.Left', E22} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V64) -> case V64 of {'Idris.Prelude.Types.Right', E24} -> (fun (V65) -> begin (V67 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"+ Build deps"/utf8>> end, fun (V66) -> ('Idris.Idris2.Idris.ModTree':'un--buildDeps'(V0, V2, V3, V1, V4, V5, V66)) end, V6))), case V67 of {'Idris.Prelude.Types.Left', E25} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V69) -> begin (V70 = (('Idris.Idris2.Idris.REPLCommon':'un--updateErrorLine'(V4, V69))(V6))), case V70 of {'Idris.Prelude.Types.Left', E27} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V72) -> begin (V73 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V4, V65, V6))), case V73 of {'Idris.Prelude.Types.Left', E29} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V75) -> begin (V76 = ('Idris.Idris2.Idris.REPLOpts':'un--resetProofState'(V4, V6))), case V76 of {'Idris.Prelude.Types.Left', E31} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V78) -> case V69 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.FileLoaded', V5}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorsBuildingFile', V5, V69}} end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); {'Idris.Prelude.Types.Left', E33} -> (fun (V79) -> begin (V80 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V4, <<""/utf8>>, V6))), case V80 of {'Idris.Prelude.Types.Left', E34} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.ErrorLoadingFile', V5, V79}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--interpret'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Idris.REPLOpts':'un--setCurrentElabSource'(V4, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('case--interpret-12284'(V5, V4, V3, V2, V1, V0, ('un--parseRepl'(V5))))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--handleResult'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPL.Exited'} -> (fun () -> fun (V6) -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Bye for now!"/utf8>>)), V6)) end end()); _ -> fun (V7) -> begin (V8 = (('un--displayResult'(V0, V1, V2, V3, V4, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> ('un--repl'(V0, V1, V2, V3, V4, V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--handleMissing\x{27}'(V0) -> case V0 of {'Idris.Idris.REPL.CasesMissing', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, V2)))))) end(E0, E1)); {'Idris.Idris.REPL.CallsNonCovering', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": Calls non covering function"/utf8>>, case V4 of [E4 | E5] -> (fun (V5, V6) -> case V6 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)))); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, V4)))))) end end(E4, E5)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)) end, V4)))))) end)))) end(E2, E3)); {'Idris.Idris.REPL.AllCasesCovered', E6} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)), <<": All cases covered"/utf8>>)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--handleMissing'(V0) -> case V0 of {'Idris.Idris.REPL.CasesMissing', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V1)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V5, V6)) end end end end, fun (V7) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V7)))) end, V2)))))) end(E0, E1)); {'Idris.Idris.REPL.CallsNonCovering', E2, E3} -> (fun (V8, V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V8)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Calls non covering"/utf8>>)), case V9 of [E4 | E5] -> (fun (V10, V11) -> case V11 of [] -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"function"/utf8>>)), ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V10)))))); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"functions:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V12) -> fun (V13) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V12, V13)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V16, V17)) end end end end, fun (V18) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V18)))) end, V9)))))) end end(E4, E5)); _ -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--fromString_FromString_(Doc $ann)'('erased', <<"functions:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V19) -> fun (V20) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--comma'('erased')), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'('erased')))), V19, V20)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V23, V24)) end end end end, fun (V25) -> ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V25)))) end, V9)))))) end)))) end(E2, E3)); {'Idris.Idris.REPL.AllCasesCovered', E6} -> (fun (V26) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V26)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"All cases covered"/utf8>>)))) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getOptions'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', [{'Idris.Idris.Syntax.ShowImplicits', case V5 of {'Idris.Core.Options.MkPPOpts', E4, E5, E6} -> (fun (V10, V11, V12) -> V10 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | [{'Idris.Idris.Syntax.ShowNamespace', case V5 of {'Idris.Core.Options.MkPPOpts', E7, E8, E9} -> (fun (V13, V14, V15) -> V15 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | [{'Idris.Idris.Syntax.ShowTypes', case V9 of {'Idris.Idris.REPLOpts.MkREPLOpts', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V16 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | [{'Idris.Idris.Syntax.EvalMode', case V9 of {'Idris.Idris.REPLOpts.MkREPLOpts', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V33 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | [{'Idris.Idris.Syntax.Editor', case V9 of {'Idris.Idris.REPLOpts.MkREPLOpts', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V53 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} | []]]]]]} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getItDecls'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (('case--getItDecls-9201'(V0, V5, case V5 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V17 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findCG'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--findCG-4144'(V1, V0, V6, case case case V6 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V11 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V36 end(E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V46 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--execExp'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--prepareExp'(V0, V1, V2, V3, V4, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V13 = begin (V10 = ('un--findCG'(V4, V0, V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> ('Idris.Idris2.Compiler.Common':'un--cgExecuteExpr'(V0, V12, V9, V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Executed', V5}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--execDecls'(V0, V1, V2, V3, V4, V5, V6) -> begin (V9 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V7) -> fun (V8) -> ('nested--33785-9400--in--un--execDecl'(V5, V4, V3, V2, V1, V0, V7, V8)) end end, V5))(V6))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.DefDeclared'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--equivTypes'(V0, V1, V2) -> ('case--equivTypes-9964'(V2, V1, V0, ('Idris.Idris2.Core.TT':'un--isErased'('erased', V1)))).
'un--dropLamsTm'(V0, V1, V2, V3) -> case V1 of 0 -> {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, V3}}; _ -> begin (V4 = (V1 - 1)), case V3 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> ('un--dropLamsTm'([V6 | V0], V4, {'Idris.Core.Env.::', V7, V2}, V8)) end(E0, E1, E2, E3)); _ -> {'Idris.Builtin.DPair.MkDPair', V0, {'Idris.Builtin.MkPair', V2, V3}} end end end.
'un--dropLams'(V0, V1) -> case V0 of 0 -> V1; _ -> begin (V2 = (V0 - 1)), case V1 of {'Idris.TTImp.TTImp.ILam', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> ('un--dropLams'(V2, V8)) end(E0, E1, E2, E3, E4, E5)); _ -> V1 end end end.
'un--docsOrSignature'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V3, case V12 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V13 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V40 of {'Idris.Prelude.Types.Left', E31} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V42) -> case V42 of [E33 | E34] -> (fun (V43, V44) -> begin (V45 = [V43 | V44]), begin (V46 = [V43 | V44]), (('case--case block in docsOrSignature-9892'(V3, V2, V1, V0, V8, V12, V44, V43, V45, V46, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V59)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V60, V61)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V62) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V62, case V8 of {'Idris.Idris.Syntax.MkSyntax', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V67 end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V47) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V47)) end, V46))))))(V4)) end end end(E33, E34)); _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V2, V3, V4)) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--displayType'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V8) -> begin (V33 = begin (V30 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V2, {'Idris.Core.Env.Nil'}, case V7 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V30 of {'Idris.Prelude.Types.Left', E25} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V32) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V32, V8)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V33 of {'Idris.Prelude.Types.Left', E27} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V35) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--aliasName'(V0, case V7 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V37 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V57 of {'Idris.Prelude.Types.Left', E50} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V59) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V59)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V35))))))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Idris.IDEMode.Holes':'un--prettyHole'([], V0, V1, V2, {'Idris.Core.Env.Nil'}, V4, V60, case V7 of {'Idris.Core.Context.MkGlobalDef', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V64 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V61)) end end end, ('Idris.Idris2.Idris.IDEMode.Holes':'un--isHole'(V7)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--displayTerm'(V0, V1, V2, V3, V4) -> begin (V8 = begin (V5 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V2, {'Idris.Core.Env.Nil'}, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V10))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--displayResult'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPL.REPLError', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, V6, V7)) end end(E0)); {'Idris.Idris.REPL.Evaluated', E1, E2} -> (fun (V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V8)), V10)) end end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V11) -> fun (V12) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V8)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V11)))))))), V12)) end end(E3)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E1, E2)); {'Idris.Idris.REPL.Printed', E4} -> (fun (V14) -> fun (V15) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, V14, V15)) end end(E4)); {'Idris.Idris.REPL.TermChecked', E5, E6} -> (fun (V16, V17) -> fun (V18) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V16)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')), ('Idris.Idris2.Idris.Pretty':'un--code'(('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V17)))))))), V18)) end end(E5, E6)); {'Idris.Idris.REPL.FileLoaded', E7} -> (fun (V19) -> fun (V20) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Loaded file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V19)))), V20)) end end(E7)); {'Idris.Idris.REPL.ModuleLoaded', E8} -> (fun (V21) -> fun (V22) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Imported module"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V21)))), V22)) end end(E8)); {'Idris.Idris.REPL.ErrorLoadingModule', E9, E10} -> (fun (V23, V24) -> fun (V25) -> begin (V26 = (('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V24))(V25))), case V26 of {'Idris.Prelude.Types.Left', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V28) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error loading module"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V23)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), V28)))), V25)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10)); {'Idris.Idris.REPL.ErrorLoadingFile', E13, E14} -> (fun (V29, V30) -> fun (V31) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error loading file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V29)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V30)))))))), V31)) end end(E13, E14)); {'Idris.Idris.REPL.ErrorsBuildingFile', E15, E16} -> (fun (V32, V33) -> fun (V34) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error(s) building file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V32)))), V34)) end end(E15, E16)); {'Idris.Idris.REPL.NoFileLoaded'} -> (fun () -> fun (V35) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"No file can be reloaded"/utf8>>)), V35)) end end()); {'Idris.Idris.REPL.CurrentDirectory', E17} -> (fun (V36) -> fun (V37) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Current working directory is"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--dquotes'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V36)))))), V37)) end end(E17)); {'Idris.Idris.REPL.CompilationFailed'} -> (fun () -> fun (V38) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Compilation failed"/utf8>>)), V38)) end end()); {'Idris.Idris.REPL.Compiled', E18} -> (fun (V39) -> fun (V40) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"File"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V39)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"written"/utf8>>)))))), V40)) end end(E18)); {'Idris.Idris.REPL.CompiledLibrary', E19} -> (fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V42, V43) -> fun (V44) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"Compiled"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V42)))), V44)) end end(E20, E21)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E19)); {'Idris.Idris.REPL.ProofFound', E22} -> (fun (V46) -> fun (V47) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V46)), V47)) end end(E22)); {'Idris.Idris.REPL.Missed', E23} -> (fun (V48) -> fun (V49) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V52, V53)) end end end end, fun (V54) -> ('un--handleMissing'(V54)) end, V48)))), V49)) end end(E23)); {'Idris.Idris.REPL.CheckedTotal', E24} -> (fun (V55) -> fun (V56) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E25, E26} -> (fun (V58, V59) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V58)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"is"/utf8>>)), ('Idris.Idris2.Core.TT':'dn--un--pretty_Pretty_Totality'('erased', V59)))))) end(E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V55)))), V56)) end end(E24)); {'Idris.Idris.REPL.FoundHoles', E27} -> (fun (V60) -> case V60 of [] -> fun (V61) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"No holes"/utf8>>)), V61)) end; [E31 | E32] -> (fun (V62, V63) -> case V63 of [] -> fun (V64) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"1 hole"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', case V62 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E36, E37, E38} -> (fun (V65, V66, V67) -> V65 end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), V64)) end; _ -> begin (V78 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V68) -> fun (V69) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<", "/utf8>>)), V68, V69)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V72, V73)) end end end end, fun (V74) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', case V74 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E33, E34, E35} -> (fun (V75, V76, V77) -> V75 end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V60))))), fun (V79) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V60)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"holes"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), V78)))), V79)) end end end end(E31, E32)); _ -> begin (V90 = ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--concatWith'('erased', fun (V80) -> fun (V81) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--surround'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<", "/utf8>>)), V80, V81)) end end, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V84, V85)) end end end end, fun (V86) -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', case V86 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E28, E29, E30} -> (fun (V87, V88, V89) -> V87 end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V60))))), fun (V91) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V60)))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"holes"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), V90)))), V91)) end end end end(E27)); {'Idris.Idris.REPL.LogLevelSet', E39} -> (fun (V92) -> case V92 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V93) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Logging turned off"/utf8>>)), V93)) end end()); {'Idris.Prelude.Types.Just', E40} -> (fun (V94) -> fun (V95) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Set log level to"/utf8>>)), ('Idris.Idris2.Core.Options.Log':'dn--un--pretty_Pretty_LogLevel'('erased', V94)))), V95)) end end(E40)); _ -> fun (V96) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E39)); {'Idris.Idris.REPL.ConsoleWidthSet', E41} -> (fun (V97) -> case V97 of {'Idris.Prelude.Types.Just', E42} -> (fun (V98) -> fun (V99) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Set consolewidth to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Nat'('erased', V98)))), V99)) end end(E42)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V100) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Set consolewidth to auto"/utf8>>)), V100)) end end()); _ -> fun (V101) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E41)); {'Idris.Idris.REPL.ColorSet', E43} -> (fun (V102) -> fun (V103) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', case V102 of 0 -> <<"Set color on"/utf8>>; 1 -> <<"Set color off"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V103)) end end(E43)); {'Idris.Idris.REPL.VersionIs', E44} -> (fun (V104) -> fun (V105) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Idris.Version':'un--showVersion'(0, V104)))), V105)) end end(E44)); {'Idris.Idris.REPL.RequestedHelp'} -> (fun () -> fun (V106) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('un--displayHelp'()))), V106)) end end()); {'Idris.Idris.REPL.Edited', E45} -> (fun (V107) -> case V107 of {'Idris.Idris.REPL.DisplayEdit', E46} -> (fun (V108) -> case V108 of {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.Empty'} -> (fun () -> fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> fun (V110) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, V108, V110)) end end end(E46)); {'Idris.Idris.REPL.EditError', E47} -> (fun (V111) -> fun (V112) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, V111, V112)) end end(E47)); {'Idris.Idris.REPL.MadeLemma', E48, E49, E50, E51} -> (fun (V113, V114, V115, V116) -> fun (V117) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Parser.Unlit':'un--relit'(V113, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V114)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V115)), <<"\x{a}"/utf8>>)))))))), V116)))), V117)) end end(E48, E49, E50, E51)); {'Idris.Idris.REPL.MadeWith', E52, E53} -> (fun (V118, V119) -> fun (V120) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V121) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V118, V121)) end, V119)))))), V120)) end end(E52, E53)); {'Idris.Idris.REPL.MadeCase', E54, E55} -> (fun (V122, V123) -> fun (V124) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V125) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V122, V125)) end, V123)))))), V124)) end end(E54, E55)); _ -> fun (V126) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E45)); {'Idris.Idris.REPL.OptionsSet', E56} -> (fun (V127) -> fun (V128) -> ('Idris.Idris2.Idris.REPLCommon':'un--printResult'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V131, V132)) end end end end, fun (V133) -> ('Idris.Idris2.Idris.Syntax':'dn--un--pretty_Pretty_REPLOpt'('erased', V133)) end, V127)))), V128)) end end(E56)); _ -> fun (V134) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--displayPats'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> ('case--displayPats-3808'(V4, V6, V7, V2, V1, V0, case V7 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--displayPatTerm'(V0, V1, V2, V3, V4) -> begin (V8 = begin (V5 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V2, {'Idris.Core.Env.Nil'}, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('Idris.Idris2.Idris.Resugar':'un--resugarNoPatvars'([], V0, V1, {'Idris.Core.Env.Nil'}, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V10))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--displayHelp'() -> ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V0) -> ('nested--37009-13152--in--un--cmdInfo'(V0)) end, ('Idris.Idris2.Idris.Parser':'un--help'()))))).
'un--displayErrors'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPL.ErrorLoadingFile', E0, E1} -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"File error in"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V6)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V7)))))))), V8)) end end(E0, E1)); _ -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--displayClause'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> fun (V10) -> begin (V14 = begin (V11 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V4, V2, V6, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'(V4, V0, V1, V6, V13, V10)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V20 = begin (V17 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, V4, V2, V6, V9, V10))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'(V4, V0, V1, V6, V19, V10)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V16)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--equals'('erased')), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(V22))))))} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--compileLib'(V0, V1, V2, V3, V4) -> begin (V8 = begin (V5 = ('un--findCG'(V1, V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('Idris.Idris2.Compiler.Common':'un--cgCompileLibrary'(V0, V7, V2, V3, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CompilationFailed'}} end end, fun () -> fun (V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CompiledLibrary', V12}} end end end, V10))(V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileExp'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('un--prepareExp'(V0, V1, V2, V3, V4, V5, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V14 = begin (V11 = ('un--findCG'(V4, V0, V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> ('Idris.Idris2.Compiler.Common':'un--cgCompileExpr'(V0, V13, V10, V6, V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.CompilationFailed'}} end end, fun () -> fun (V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.REPL.Compiled', V18}} end end end, V16))(V7)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--caseSplit'(V0, V1, V2) -> case V1 of 0 -> case V2 of [E2 | E3] -> (fun (V3, V4) -> [('un--rtrim'(V0)) | V4] end(E2, E3)); _ -> case V2 of [] -> [V0 | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V5 = (V1 - 1)), case V2 of [E0 | E1] -> (fun (V6, V7) -> [V6 | ('un--caseSplit'(V0, V5, V7))] end(E0, E1)); _ -> case V2 of [] -> [V0 | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--anyAt'(V0, V1, V2, V3, V4) -> (V2(V3)).
'un--addMadeLemma'(V0, V1, V2, V3, V4, V5) -> ('nested--28281-4686--in--un--addApp'(V5, V4, V3, V2, V1, V0, V0, V4, [], ('un--proofSearch'(V1, V3, V4, V5)))).
'un--addMadeCase'(V0, V1, V2, V3) -> ('nested--28412-4802--in--un--addW'(V3, V2, V1, V0, V2, [], V3)).
'un--addClause'(V0, V1, V2) -> case V1 of 0 -> case V2 of [] -> [('un--rtrim'(V0)) | []]; [E2 | E3] -> (fun (V3, V4) -> ('case--addClause-4547'(V3, V4, V0, (('Idris.Idris2.Prelude.Interfaces':'un--all'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V16)) end end}, fun (V17) -> ('Idris.Idris2.Prelude.Types':'un--isSpace'(V17)) end))(('Idris.Idris2.Prelude.Types':'un--unpack'(V3)))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V18 = (V1 - 1)), case V2 of [E0 | E1] -> (fun (V19, V20) -> [V19 | ('un--addClause'(V0, V18, V20))] end(E0, E1)); [] -> [V0 | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
