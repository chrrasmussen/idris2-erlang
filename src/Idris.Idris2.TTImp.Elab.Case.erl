-module('Idris.Idris2.TTImp.Elab.Case').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--checkCase,guessScrType-9258'/19,
  'nested--9292-6892--in--un--usedIn'/17,
  'nested--9292-6895--in--un--updateClause'/21,
  'nested--9292-6890--in--un--replace'/19,
  'nested--9292-6893--in--un--nestLHS'/18,
  'nested--9292-6891--in--un--mkSplit'/19,
  'nested--11866-8999--in--un--guessScrType'/15,
  'nested--11866-8998--in--un--getRetTy'/17,
  'nested--9157-6772--in--un--getNameFrom'/8,
  'nested--9292-6888--in--un--getBindName'/19,
  'nested--9157-6771--in--un--getArg'/9,
  'nested--11866-8996--in--un--checkConcrete'/16,
  'nested--11866-8997--in--un--applyTo'/17,
  'nested--9292-6894--in--un--applyNested'/18,
  'nested--9292-6889--in--un--addEnv'/20,
  'un--updateMults'/2,
  'un--toRig1'/2,
  'un--toRig0'/2,
  'un--getNestData'/1,
  'un--findScrutinee'/3,
  'un--findImpsIn'/5,
  'un--explicitPi'/1,
  'un--checkCase'/15,
  'un--changeVar'/3,
  'un--caseBlock'/17,
  'un--bindCaseLocals'/4,
  'un--allow'/2
]).
'case--checkCase,guessScrType-9258'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V54 = ('Idris.Idris2.Core.Context':'un--lookupTyName'(V20, case V25 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V26 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V21))), case V54 of {'Idris.Prelude.Types.Left', E32} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V56) -> case V56 of [E34 | E35] -> (fun (V57, V58) -> case V57 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V59, V60) -> case V60 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V61, V62) -> case V58 of [] -> begin (V66 = begin (V63 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [], V25, {'Idris.Core.Env.Nil'}, V62))(V21))), case V63 of {'Idris.Prelude.Types.Left', E40} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V65) -> ('nested--11866-8998--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25, V65, V21)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V66 of {'Idris.Prelude.Types.Left', E42} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V68) -> case V68 of {'Idris.Prelude.Types.Just', E44} -> (fun (V69) -> case V69 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V70, V71) -> (('nested--11866-8997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V25, {'Idris.TTImp.TTImp.IVar', V5, V70}, V71))(V21)) end(E45, E46)); _ -> (('nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E44)); _ -> (('nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> (('nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E38, E39)); _ -> (('nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E36, E37)); _ -> (('nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E34, E35)); _ -> (('nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17))(V21)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end.
'nested--9292-6892--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.TTImp.TTImp.IBindVar', E0, E1} -> (fun (V17, V18) -> [{'Idris.Core.Name.UN', V18} | []] end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('nested--9292-6892--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V20)), ('nested--9292-6892--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V21)))) end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAs', E5, E6, E7, E8, E9} -> (fun (V22, V23, V24, V25, V26) -> [V25 | ('nested--9292-6892--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V26))] end(E5, E6, E7, E8, E9)); {'Idris.TTImp.TTImp.IAlternative', E10, E11, E12} -> (fun (V27, V28, V29) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V37, V38, V39)) end end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V41)) end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V45, V46, V47, V48)) end end end end end end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V50)) end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V53, V54, V55)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V56, V57)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V58) -> ('nested--9292-6892--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V58)) end, V29)) end(E10, E11, E12)); _ -> [] end.
'nested--9292-6895--in--un--updateClause'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V21, V22, V23) -> case ('nested--9292-6889--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--9292-6892--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V22)))) of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V24, V25) -> begin (V26 = ('nested--9292-6891--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V22, V25))), begin (V27 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V21, V16}, V26))), {'Idris.TTImp.TTImp.PatClause', V21, ('nested--9292-6894--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V27)), ('un--bindCaseLocals'(V21, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V28) -> ('un--getNestData'(V28)) end, V18)), V24, V23))} end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E5, E6, E7, E8, E9, E10} -> (fun (V29, V30, V31, V32, V33, V34) -> case ('nested--9292-6889--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--9292-6892--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V30)))) of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V35, V36) -> begin (V37 = ('nested--9292-6891--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V30, V36))), begin (V38 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V29, V16}, V37))), {'Idris.TTImp.TTImp.WithClause', V29, ('nested--9292-6894--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V38)), V31, V32, V33, V34} end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9, E10)); {'Idris.TTImp.TTImp.ImpossibleClause', E13, E14} -> (fun (V39, V40) -> case ('nested--9292-6889--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, 0, V19, ('nested--9292-6892--in--un--usedIn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V40)))) of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V41, V42) -> begin (V43 = ('nested--9292-6891--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V40, V42))), begin (V44 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V39, V16}, V43))), {'Idris.TTImp.TTImp.ImpossibleClause', V39, ('nested--9292-6894--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V44))} end end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9292-6890--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of 0 -> case V18 of [E2 | E3] -> (fun (V19, V20) -> begin (V26 = case V19 of {'Idris.TTImp.TTImp.IAs', E4, E5, E6, E7, E8} -> (fun (V21, V22, V23, V24, V25) -> {'Idris.TTImp.TTImp.IAs', V21, V22, V23, V24, V17} end(E4, E5, E6, E7, E8)); _ -> V17 end), [V26 | V20] end end(E2, E3)); _ -> V18 end; _ -> begin (V27 = (V16 - 1)), case V18 of [E0 | E1] -> (fun (V28, V29) -> [V28 | ('nested--9292-6890--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V27, V17, V29))] end(E0, E1)); _ -> V18 end end end.
'nested--9292-6893--in--un--nestLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V22, V23) -> {'Idris.Builtin.MkPair', V18, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V16, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V18 end, V20))}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> {'Idris.TTImp.TTImp.Implicit', V16, 0} end, V22))))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9292-6891--in--un--mkSplit'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V16 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Data.List':'un--reverse'([V17 | V18])) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> ('Idris.Idris2.Data.List':'un--reverse'(('nested--9292-6890--in--un--replace'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V19, V17, V18)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of [] -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', V5, 0}} end; [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.TTImp.TTImp.PatClause', E2, E3, E4} -> (fun (V18, V19, V20) -> ('case--checkCase,guessScrType-9258'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V18, V20, V19, V17, ('Idris.Idris2.TTImp.TTImp':'un--getFn'(V19)))) end(E2, E3, E4)); _ -> ('nested--11866-8999--in--un--guessScrType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V17)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11866-8998--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V15 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V17, V18, V19, V20) -> case V19 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V21, V22, V23, V24) -> begin (V25 = (((V20(V14))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V17, 0}))))(V16))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> ('nested--11866-8998--in--un--getRetTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V27, V16)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V28, V29, V30, V31, V32) -> begin (V61 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V29, case V14 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V33 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16))), case V61 of {'Idris.Prelude.Types.Left', E43} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V63) -> case V63 of {'Idris.Prelude.Types.Just', E45} -> (fun (V64) -> begin (V65 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [], V14, {'Idris.Core.Env.Nil'}, V64))(V16))), case V65 of {'Idris.Prelude.Types.Left', E46} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V29, V67}}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13, E14)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end.
'nested--9157-6772--in--un--getNameFrom'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('nested--9157-6771--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V5, V7)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> V8 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9292-6888--in--un--getBindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Core.Name.UN', E0} -> (fun (V19) -> begin (V20 = {'Idris.Core.Name.UN', V19}), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V23, V24)) end end}, V20, V18)) of 1 -> {'Idris.Builtin.MkPair', V20, {'Idris.Core.Name.MN', V19, V16}}; 0 -> {'Idris.Builtin.MkPair', V20, V20}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V27, V28)) end end}, V17, V18)) of 1 -> {'Idris.Builtin.MkPair', V17, {'Idris.Core.Name.MN', <<"_cn"/utf8>>, V16}}; 0 -> {'Idris.Builtin.MkPair', V17, V17}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9157-6771--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V8 of 0 -> {'Idris.Prelude.Types.Just', V12}; _ -> case V8 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V13 = (V8 - 1)), ('nested--9157-6771--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V10, V13)) end end end end(E2, E3)); _ -> case V8 of 0 -> ('erlang':'throw'("Nat case not covered")); _ -> begin (V14 = (V8 - 1)), ('nested--9157-6771--in--un--getArg'(V0, V1, V2, V3, V4, V5, V6, V10, V14)) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11866-8996--in--un--checkConcrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Core.Value.NApp', E0, E1, E2} -> (fun (V16, V17, V18) -> case V17 of {'Idris.Core.Value.NMeta', E3, E4, E5} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V4)), <<"Can\x{27}t infer type for case scrutinee"/utf8>>}, V15)) end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'nested--11866-8997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V17, V18, V19, V20) -> fun (V21) -> case V19 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V22, V23, V24, V25) -> case V24 of {'Idris.Core.TT.Explicit'} -> (fun () -> begin (V26 = (((V20(V14))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V17, 0}))))(V21))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> (('nested--11866-8997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.TTImp.TTImp.IApp', V17, V15, {'Idris.TTImp.TTImp.Implicit', V17, 0}}, V28))(V21)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V29 = (((V20(V14))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 0}))))(V21))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> (('nested--11866-8997--in--un--applyTo'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, {'Idris.TTImp.TTImp.INamedApp', V5, V15, V18, {'Idris.TTImp.TTImp.Implicit', V5, 0}}, V31))(V21)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', V15} end end end(E0, E1, E2, E3)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', V15} end end.
'nested--9292-6894--in--un--applyNested'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> begin (V18 = ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V17))), ('Idris.Idris2.TTImp.Utils':'un--substNames'([], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> ('nested--9292-6893--in--un--nestLHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V18, V19)) end, V16)), V17)) end.
'nested--9292-6889--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V16 of [] -> case V18 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Builtin.MkPair', [], []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V20, V21) -> case V18 of {'Idris.Core.Env.::', E2, E3} -> (fun (V22, V23) -> begin (V24 = ('nested--9292-6888--in--un--getBindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V20, V19))), case ('nested--9292-6889--in--un--addEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V21, ((V17 + 1) rem 9223372036854775808), V23, [('Idris.Idris2.Builtin':'un--snd'(V24)) | V19])) of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V25, V26) -> begin (V27 = [V24 | V25]), {'Idris.Builtin.MkPair', V27, [{'Idris.TTImp.TTImp.IAs', V9, {'Idris.Core.FC.EmptyFC'}, 0, ('Idris.Idris2.Builtin':'un--snd'(V24)), {'Idris.TTImp.TTImp.Implicit', V9, 1}} | V26]} end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateMults'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> ('un--updateMults'(V3, ('un--toRig0'(V2, V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toRig1'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V2, V3) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V10, V11)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'(V2)))) of 1 -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V2, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), V3}; 0 -> {'Idris.Core.Env.::', V2, V3}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V16 = (V0 - 1)), case V1 of {'Idris.Core.Env.::', E0, E1} -> (fun (V17, V18) -> {'Idris.Core.Env.::', V17, ('un--toRig1'(V16, V18))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--toRig0'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V2, V3) -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'(V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V4) -> fun (V5) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V4, V5)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), V3} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V8 = (V0 - 1)), case V1 of {'Idris.Core.Env.::', E0, E1} -> (fun (V9, V10) -> {'Idris.Core.Env.::', V9, ('un--toRig0'(V8, V10))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--getNestData'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V5, V6) -> {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V3, V5}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findScrutinee'(V0, V1, V2) -> case V0 of [E0 | E1] -> (fun (V3, V4) -> case V1 of {'Idris.Core.Env.::', E2, E3} -> (fun (V5, V6) -> case V2 of {'Idris.TTImp.TTImp.IVar', E4, E5} -> (fun (V7, V8) -> case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V8)) of 1 -> case ('Idris.Idris2.Core.TT':'un--isLet'(V5)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--findScrutinee'(V4, V6, {'Idris.TTImp.TTImp.IVar', V7, V8})), fun (V9) -> {'Idris.Prelude.Types.Just', (1 + V9)} end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--findImpsIn'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, [{'Idris.Builtin.MkPair', V6, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V12))} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V13) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V13)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V13))))} end, V3))], V8)) end()); _ -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V14)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V14))))} end, V3)), V8)) end end(E4, E5, E6, E7)); _ -> ('un--findImpsIn'([V6 | V0], V1, {'Idris.Core.Env.::', V7, V2}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V15) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V15)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(('Idris.Idris2.Builtin':'un--snd'(V15))))} end, V3)), V8)) end end(E0, E1, E2, E3)); _ -> fun (V16) -> case ('Idris.Idris2.Data.List':'un--isNil'(V3)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.TryWithImplicits', V0, V1, V2, ('Idris.Idris2.Data.List':'un--reverse'(V3))}, V16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--explicitPi'(V0) -> case V0 of {'Idris.Core.Env.::', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Core.TT.Pi', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> {'Idris.Core.Env.::', {'Idris.Core.TT.Pi', V3, V4, {'Idris.Core.TT.Explicit'}, V6}, ('un--explicitPi'(V2))} end(E2, E3, E4, E5)); _ -> {'Idris.Core.Env.::', V1, ('un--explicitPi'(V2))} end end(E0, E1)); {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--delayElab'(V0, V1, V2, V3, V4, V9, V5, V8, V13, 0, fun (V15) -> begin (V18 = case V11 of {'Idris.TTImp.TTImp.Implicit', E0, E1} -> (fun (V16, V17) -> (('nested--11866-8999--in--un--guessScrType'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V12))(V15)) end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', V11} end), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V25 = ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V6, V7, V8, V20, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'(V9))}, V15))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"Expected scrutinee type"/utf8>> end, V28, V15))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V45 = case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V39, V40)) end end}}, V5)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V41, V42)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V43, V44)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V46 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V45)))))))) end, V15))), case V46 of {'Idris.Prelude.Types.Left', E10} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V48) -> begin (V82 = ('Idris.Idris2.TTImp.Elab.Check':'un--handle'(V0, V1, V2, V3, V4, fun (V49) -> begin (V51 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V50) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V45, V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V28))}, V50)) end, V49))), case V51 of {'Idris.Prelude.Types.Left', E12} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V53)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V53)), V45}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V54) -> case V54 of {'Idris.Core.Core.LinearMisuse', E14, E15, E16, E17} -> (fun (V55, V56, V57, V58) -> ('Idris.Idris2.Algebra.Semiring':'un--branchOne'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V59) -> fun (V60) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V59, V60)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V61, V62)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V65, V66)) end end}}, fun () -> fun (V67) -> begin (V73 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V68) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V69) -> fun (V70) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V69, V70)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V71) -> fun (V72) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V71, V72)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V28))}, V68)) end, V67))), case V73 of {'Idris.Prelude.Types.Left', E18} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V75)), {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--snd'(V75)), ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V76) -> fun (V77) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V76, V77)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V78) -> fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V78, V79)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V80) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V54, V80)) end end, V57)) end(E14, E15, E16, E17)); _ -> fun (V81) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V54, V81)) end end end, V15))), case V82 of {'Idris.Prelude.Types.Left', E20} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V84) -> case V84 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V85, V86) -> case V86 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V87, V88) -> begin (V89 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V87))(V15))), case V89 of {'Idris.Prelude.Types.Left', E26} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V91) -> begin (V92 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Scrutinee type"/utf8>> end, V8, V91, V15))), case V92 of {'Idris.Prelude.Types.Left', E28} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V94) -> begin (V96 = begin (V95 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V95} end), case V96 of {'Idris.Prelude.Types.Left', E30} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V98) -> begin (V102 = begin (V99 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V98, V8, V91))(V15))), case V99 of {'Idris.Prelude.Types.Left', E32} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V101) -> ('nested--11866-8996--in--un--checkConcrete'(V0, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V101, V15)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V102 of {'Idris.Prelude.Types.Left', E34} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V104) -> ('un--caseBlock'(V0, V1, V2, V3, V4, V5, V6, V9, V7, V8, V10, V85, V91, V88, V12, V13, V15)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V14)).
'un--changeVar'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Local', E25, E26, E27} -> (fun (V3, V4, V5) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V5)) of 1 -> {'Idris.Core.TT.Local', V3, V4, V1}; 0 -> {'Idris.Core.TT.Local', V3, V4, V5}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26, E27)); _ -> case V2 of {'Idris.Core.TT.Meta', E21, E22, E23, E24} -> (fun (V6, V7, V8, V9) -> {'Idris.Core.TT.Meta', V6, V7, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('un--changeVar'(V0, V1, V10)) end, V9))} end(E21, E22, E23, E24)); _ -> case V2 of {'Idris.Core.TT.Bind', E17, E18, E19, E20} -> (fun (V11, V12, V13, V14) -> {'Idris.Core.TT.Bind', V11, V12, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'(fun (V15) -> ('un--changeVar'(V0, V1, V15)) end, V13)), ('un--changeVar'((1 + V0), (1 + V1), V14))} end(E17, E18, E19, E20)); _ -> case V2 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V16, V17, V18) -> {'Idris.Core.TT.App', V16, ('un--changeVar'(V0, V1, V17)), ('un--changeVar'(V0, V1, V18))} end(E0, E1, E2)); {'Idris.Core.TT.As', E3, E4, E5, E6} -> (fun (V19, V20, V21, V22) -> {'Idris.Core.TT.As', V19, V20, ('un--changeVar'(V0, V1, V21)), ('un--changeVar'(V0, V1, V22))} end(E3, E4, E5, E6)); {'Idris.Core.TT.TDelayed', E7, E8, E9} -> (fun (V23, V24, V25) -> {'Idris.Core.TT.TDelayed', V23, V24, ('un--changeVar'(V0, V1, V25))} end(E7, E8, E9)); {'Idris.Core.TT.TDelay', E10, E11, E12, E13} -> (fun (V26, V27, V28, V29) -> {'Idris.Core.TT.TDelay', V26, V27, ('un--changeVar'(V0, V1, V28)), ('un--changeVar'(V0, V1, V29))} end(E10, E11, E12, E13)); {'Idris.Core.TT.TForce', E14, E15, E16} -> (fun (V30, V31, V32) -> {'Idris.Core.TT.TForce', V30, V31, ('un--changeVar'(V0, V1, V32))} end(E14, E15, E16)); _ -> V2 end end end end.
'un--caseBlock'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V33 = ('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--getToBind'(V0, V1, V4, V3, V7, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E2, E3, E4, E5, E6, E7} -> (fun (V21, V22, V23, V24, V25, V26) -> V21 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E8, E9, E10, E11, E12, E13} -> (fun (V27, V28, V29, V30, V31, V32) -> V28 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, [], V16))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V51 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Doing a case under unbound implicits "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V38, V39)) end end}, {'Idris.Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V41, V42)) end end}}, V36)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V46, V47)) end end}, {'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--show_Show_(ImplBinding $vars)'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--showPrec_Show_(ImplBinding $vars)'(V49, V50)) end end}}, V43, V44)) end end}, V35)))) end, V16))), case V51 of {'Idris.Prelude.Types.Left', E16} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V1, V3, <<"scr"/utf8>>, V16))), case V54 of {'Idris.Prelude.Types.Left', E18} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V56) -> begin (V83 = begin (V77 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V57, V58, V59)) end end end, fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V60, V61, V62)) end end end}, {'Idris.Core.Name.Resolved', case V20 of {'Idris.TTImp.Elab.Check.MkEState', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> V64 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V16))), case V77 of {'Idris.Prelude.Types.Left', E34} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V79) -> begin (V80 = (('Idris.Idris2.Core.Context':'un--prettyName'(V1, V79))(V16))), case V80 of {'Idris.Prelude.Types.Left', E36} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V82) -> ('Idris.Idris2.Core.UnifyState':'un--genCaseName'(V1, V3, V82, V16)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V83 of {'Idris.Prelude.Types.Left', E38} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V85) -> begin (V100 = ('un--updateMults'(case V20 of {'Idris.TTImp.Elab.Check.MkEState', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V97 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), begin (V102 = begin (V101 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V101} end), case V102 of {'Idris.Prelude.Types.Left', E54} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V104) -> begin (V147 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', case V20 of {'Idris.TTImp.Elab.Check.MkEState', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69} -> (fun (V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V106 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, case V104 of {'Idris.Core.Context.MkDefs', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146) -> V119 end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V147 of {'Idris.Prelude.Types.Left', E98} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V149) -> begin (V172 = case V149 of {'Idris.Prelude.Types.Just', E100} -> (fun (V150) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(case V150 of {'Idris.Core.Context.MkGlobalDef', E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121} -> (fun (V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171) -> V160 end(E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 2)) of 1 -> 2; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E100)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> 2 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V173 = ('un--findScrutinee'(V0, V100, V10))), begin (V182 = case V15 of {'Idris.Prelude.Types.Just', E124} -> (fun (V174) -> (('Idris.Idris2.Core.Normalise':'un--getTerm'(V174))(V16)) end(E124)); _ -> begin (V175 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V1, V3, <<"caseTy"/utf8>>, V16))), case V175 of {'Idris.Prelude.Types.Left', E122} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V177) -> ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V1, V3, V7, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V178) -> fun (V179) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V178, V179)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V180) -> fun (V181) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V180, V181)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V100, V177, {'Idris.Core.TT.TType', V7}, V16)) end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V182 of {'Idris.Prelude.Types.Left', E125} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V184) -> begin (V191 = ('Idris.Idris2.TTImp.Elab.ImplicitBind':'un--bindImplicits'(V1, V0, V7, case V6 of {'Idris.TTImp.Elab.Check.MkElabInfo', E127, E128, E129, E130, E131, E132} -> (fun (V185, V186, V187, V188, V189, V190) -> V186 end(E127, E128, E129, E130, E131, E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V104, V100, V35, V184, {'Idris.Core.TT.TType', V7}, V16))), case V191 of {'Idris.Prelude.Types.Left', E133} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V193) -> case V193 of {'Idris.Builtin.MkPair', E135, E136} -> (fun (V194, V195) -> begin (V197 = ('Idris.Idris2.Core.Env':'un--abstractFullEnvType'(V0, V7, ('un--allow'(V173, ('un--explicitPi'(V100)))), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.TT.Bind', V7, V56, {'Idris.Core.TT.Pi', V7, V13, {'Idris.Core.TT.Explicit'}, V12}, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V194))} end, fun () -> fun (V196) -> V194 end end, V173))))), begin (V198 = ('Idris.Idris2.TTImp.Elab.Utils':'un--findErased'(V1, V197, V16))), case V198 of {'Idris.Prelude.Types.Left', E137} -> (fun (V199) -> {'Idris.Prelude.Types.Left', V199} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V200) -> case V200 of {'Idris.Builtin.MkPair', E139, E140} -> (fun (V201, V202) -> begin (V203 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), <<"Case env"/utf8>>, V100, V16))), case V203 of {'Idris.Prelude.Types.Left', E141} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V205) -> begin (V206 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Case function type: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V85)))) end, {'Idris.Core.Env.Nil'}, V197, V16))), case V206 of {'Idris.Prelude.Types.Left', E143} -> (fun (V207) -> {'Idris.Prelude.Types.Left', V207} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V208) -> begin (V209 = case ('Idris.Idris2.Data.List':'un--isNil'(V35)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> (('un--findImpsIn'([], V7, {'Idris.Core.Env.Nil'}, [], V197))(V16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V209 of {'Idris.Prelude.Types.Left', E145} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E145)); {'Idris.Prelude.Types.Right', E146} -> (fun (V211) -> begin (V245 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V85, case ('Idris.Idris2.Core.Context':'un--newDef'(V7, V85, case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V212) -> fun (V213) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V212, V213)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V214) -> fun (V215) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V214, V215)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V216) -> fun (V217) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V216, V217)) end end, fun (V218) -> fun (V219) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V218, V219)) end end}}, V5)) of 1 -> ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V220) -> fun (V221) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V220, V221)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V222) -> fun (V223) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V222, V223)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})); 0 -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V197, V172, {'Idris.Core.Context.None'})) of {'Idris.Core.Context.MkGlobalDef', E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167} -> (fun (V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244) -> {'Idris.Core.Context.MkGlobalDef', V224, V225, V226, V201, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244} end(E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V16))), case V245 of {'Idris.Prelude.Types.Left', E168} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E168)); {'Idris.Prelude.Types.Right', E169} -> (fun (V247) -> begin (V248 = ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, {'Idris.Core.Name.Resolved', V247}, {'Idris.Core.Context.SetTotal', 2}, V16))), case V248 of {'Idris.Prelude.Types.Left', E170} -> (fun (V249) -> {'Idris.Prelude.Types.Left', V249} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V250) -> begin (V251 = {'Idris.Core.TT.Ref', V7, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.Resolved', V247}}), begin (V252 = ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V0, V7, V251, V100))), begin (V254 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Core.TT.App', V7, V252, V11} end, fun () -> fun (V253) -> V252 end end, V173))), begin (V256 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V255) -> ('nested--9292-6895--in--un--updateClause'(V0, V15, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V85, V173, V8, V100, V255)) end, V14))), begin (V345 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Nested: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V257) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V258) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V258)) end, fun (V259) -> fun (V260) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V259, V260)) end end}, {'Idris.Prelude.Show.MkShow', fun (V261) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V262) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V263) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V263)) end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V264, V265)) end end}, V262)) end, fun (V266) -> fun (V267) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V268) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V268)) end, fun (V269) -> fun (V270) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V269, V270)) end end}, V266, V267)) end end}, {'Idris.Prelude.Show.MkShow', fun (V271) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V272) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V272)) end, fun (V273) -> fun (V274) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V273, V274)) end end}, V271)) end, fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V277) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V277)) end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V278, V279)) end end}, V275, V276)) end end}}, V261)) end, fun (V280) -> fun (V281) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V282) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V283) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V283)) end, fun (V284) -> fun (V285) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V284, V285)) end end}, V282)) end, fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V288) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V288)) end, fun (V289) -> fun (V290) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V289, V290)) end end}, V286, V287)) end end}, {'Idris.Prelude.Show.MkShow', fun (V291) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V292) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V292)) end, fun (V293) -> fun (V294) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V293, V294)) end end}, V291)) end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V297) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V297)) end, fun (V298) -> fun (V299) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V298, V299)) end end}, V295, V296)) end end}}, V280, V281)) end end}}, V257)) end, fun (V300) -> fun (V301) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V302) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V302)) end, fun (V303) -> fun (V304) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V303, V304)) end end}, {'Idris.Prelude.Show.MkShow', fun (V305) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V306) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V307) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V307)) end, fun (V308) -> fun (V309) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V308, V309)) end end}, V306)) end, fun (V310) -> fun (V311) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V312) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V312)) end, fun (V313) -> fun (V314) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V313, V314)) end end}, V310, V311)) end end}, {'Idris.Prelude.Show.MkShow', fun (V315) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V316) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V316)) end, fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V317, V318)) end end}, V315)) end, fun (V319) -> fun (V320) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V321) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V321)) end, fun (V322) -> fun (V323) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V322, V323)) end end}, V319, V320)) end end}}, V305)) end, fun (V324) -> fun (V325) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V326) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V327) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V327)) end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V328, V329)) end end}, V326)) end, fun (V330) -> fun (V331) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V332) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V332)) end, fun (V333) -> fun (V334) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V333, V334)) end end}, V330, V331)) end end}, {'Idris.Prelude.Show.MkShow', fun (V335) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V336) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V336)) end, fun (V337) -> fun (V338) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V337, V338)) end end}, V335)) end, fun (V339) -> fun (V340) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V341) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'(V341)) end, fun (V342) -> fun (V343) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'(V342, V343)) end end}, V339, V340)) end end}}, V324, V325)) end end}}, V300, V301)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V344) -> ('un--getNestData'(V344)) end, V8)))))) end, V16))), case V345 of {'Idris.Prelude.Types.Left', E172} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V347) -> begin (V351 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated alts: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V348) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpClause'(V348)) end, fun (V349) -> fun (V350) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpClause'(V349, V350)) end end}, V256)))) end, V16))), case V351 of {'Idris.Prelude.Types.Left', E174} -> (fun (V352) -> {'Idris.Prelude.Types.Left', V352} end(E174)); {'Idris.Prelude.Types.Right', E175} -> (fun (V353) -> begin (V354 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.case"/utf8>>, (1 + (1 + 0)), fun () -> <<"Case application"/utf8>> end, V100, V254, V16))), case V354 of {'Idris.Prelude.Types.Left', E176} -> (fun (V355) -> {'Idris.Prelude.Types.Left', V355} end(E176)); {'Idris.Prelude.Types.Right', E177} -> (fun (V356) -> begin (V357 = []), begin (V359 = begin (V358 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V358} end), case V359 of {'Idris.Prelude.Types.Left', E178} -> (fun (V360) -> {'Idris.Prelude.Types.Left', V360} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V361) -> begin (V374 = case V361 of {'Idris.Core.UnifyState.MkUState', E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191} -> (fun (V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373) -> V372 end(E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V388 = begin (V387 = ('erlang':'put'(V3, case V361 of {'Idris.Core.UnifyState.MkUState', E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203} -> (fun (V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386) -> {'Idris.Core.UnifyState.MkUState', V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, [], V386} end(E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V387} end), case V388 of {'Idris.Prelude.Types.Left', E204} -> (fun (V389) -> {'Idris.Prelude.Types.Left', V389} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V390) -> begin (V391 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V1, V2, V3, [1 | []], V357, {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IDef', V7, V85, V256}))(V16))), case V391 of {'Idris.Prelude.Types.Left', E206} -> (fun (V392) -> {'Idris.Prelude.Types.Left', V392} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V393) -> begin (V395 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> 0 end, fun () -> fun (V394) -> 1 end end, V173))), begin (V396 = case V395 of 1 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V1, V7, V85, {'Idris.Core.Context.Inline'}, V16)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V396 of {'Idris.Prelude.Types.Left', E208} -> (fun (V397) -> {'Idris.Prelude.Types.Left', V397} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V398) -> begin (V400 = begin (V399 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V399} end), case V400 of {'Idris.Prelude.Types.Left', E210} -> (fun (V401) -> {'Idris.Prelude.Types.Left', V401} end(E210)); {'Idris.Prelude.Types.Right', E211} -> (fun (V402) -> begin (V416 = begin (V415 = ('erlang':'put'(V3, case V402 of {'Idris.Core.UnifyState.MkUState', E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223} -> (fun (V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414) -> {'Idris.Core.UnifyState.MkUState', V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V374, V414} end(E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V415} end), case V416 of {'Idris.Prelude.Types.Left', E224} -> (fun (V417) -> {'Idris.Prelude.Types.Left', V417} end(E224)); {'Idris.Prelude.Types.Right', E225} -> (fun (V418) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V254, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V100, V194))}} end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139, E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindCaseLocals'(V0, V1, V2, V3) -> case V1 of [] -> V3; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> {'Idris.TTImp.TTImp.ICaseLocal', V0, V6, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V6 end, V8)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('nested--9157-6772--in--un--getNameFrom'(V6, V8, V9, V5, V3, V2, V0, V10)) end, V9)), ('un--bindCaseLocals'(V0, V5, V2, V3))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--allow'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> ('un--toRig1'(V2, V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
