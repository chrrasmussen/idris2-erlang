-module('Idris.Idris2.Idris.Elab.Interface').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--elabInterface-2894'/26,
  'case--elabInterface-2761'/27,
  'case--elabInterface,elabDefault-2437'/23,
  'case--elabInterface,elabDefault-2254'/23,
  'case--elabInterface,elabDefault,changeNameTerm-2119'/24,
  'case--updateIfaceSyn-1692'/12,
  'case--getMethToplevel-1328'/16,
  'case--getMethDecl,stripParams-1073'/18,
  'case--mkIfaceData-966'/12,
  'nested--15507-1632--in--un--totMeth'/10,
  'nested--14874-1059--in--un--stripParams'/12,
  'nested--15652-1763--in--un--paramNames'/15,
  'nested--15652-1764--in--un--nameCons'/17,
  'nested--14606-800--in--un--mkTy'/14,
  'nested--15050-1202--in--un--mkLam'/12,
  'nested--15050-1204--in--un--methName'/11,
  'nested--14606-797--in--un--jname'/12,
  'nested--15326-1465--in--un--impsBind'/14,
  'nested--15050-1201--in--un--getExplicitArgs'/12,
  'nested--15507-1631--in--un--findSetTotal'/10,
  'nested--15050-1198--in--un--fc'/10,
  'nested--15652-1766--in--un--elabMethods'/19,
  'nested--15652-1767--in--un--elabDefault'/17,
  'nested--15652-1768--in--un--elabConstraintHints'/17,
  'nested--15652-1765--in--un--elabAsData'/19,
  'nested--15326-1464--in--un--constName'/13,
  'nested--15677-2077--in--un--changeNameTerm'/22,
  'nested--15677-2078--in--un--changeName'/22,
  'nested--14606-798--in--un--bname'/12,
  'nested--15677-2075--in--un--bindPs'/22,
  'nested--15050-1199--in--un--bindPs'/12,
  'nested--15326-1463--in--un--bindName'/13,
  'nested--15050-1203--in--un--bindName'/11,
  'nested--14606-799--in--un--bhere'/12,
  'nested--15677-2076--in--un--applyParams'/22,
  'nested--15050-1200--in--un--applyCon'/11,
  'un--updateIfaceSyn'/10,
  'un--sigToDecl'/1,
  'un--namePis'/2,
  'un--mkIfaceData'/11,
  'un--mkDataTy'/2,
  'un--mkCon'/2,
  'un--getSig'/1,
  'un--getMethToplevel'/10,
  'un--getMethDecl'/8,
  'un--getImplParams'/2,
  'un--getDefault'/1,
  'un--getConstraintHint'/11,
  'un--elabInterface'/16,
  'un--bindIFace'/3
]).
'case--elabInterface-2894'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V24 of {'Idris.Idris.Elab.Interface.MkDeclaration', E0, E1, E2, E3, E4} -> (fun (V26, V27, V28, V29, V30) -> {'Idris.Idris.Elab.Interface.MkDeclaration', V25, V27, V28, V29, V30} end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabInterface-2761'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Prelude.Types.Just', E0} -> (fun (V27) -> begin (V28 = ('un--getImplParams'('erased', V27))), fun (V29) -> ('un--updateIfaceSyn'(V14, V12, V16, V18, V28, ('nested--15652-1763--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V30) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V30)) end, V5)), V24, V23, V29)) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V14, V10, V4, V31)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabInterface,elabDefault-2437'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Prelude.Types.Just', E0} -> (fun (V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', case V23 of {'Idris.Idris.Elab.Interface.MkDeclaration', E1, E2, E3, E4, E5} -> (fun (V25, V26, V27, V28, V29) -> V26 end(E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V23 of {'Idris.Idris.Elab.Interface.MkDeclaration', E6, E7, E8, E9, E10} -> (fun (V30, V31, V32, V33, V34) -> V34 end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No method named "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in interface "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))))}, V35)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabInterface,elabDefault-2254'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V23, V24) -> begin (V26 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V15, V4}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V25) -> {'Idris.TTImp.TTImp.IVar', V15, V25} end, ('nested--15652-1763--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14))))))), fun (V27) -> begin (V39 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V28) -> begin (V34 = case V28 of {'Idris.Idris.Elab.Interface.MkDeclaration', E2, E3, E4, E5, E6} -> (fun (V29, V30, V31, V32, V33) -> V29 end(E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V35) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V34))(V35))), case V36 of {'Idris.Prelude.Types.Left', E7} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V34, ('nested--15677-2076--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, {'Idris.TTImp.TTImp.IVar', V15, V38}, ('nested--15652-1763--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14))))}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V19, []))(V27))), case V39 of {'Idris.Prelude.Types.Left', E9} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V41) -> begin (V42 = ('nested--15677-2075--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V3, ('un--bindIFace'(V15, V26, ('Idris.Idris2.TTImp.Utils':'un--substNames'(V6, V41, V24))))))), begin (V49 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V14, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V43) -> case V43 of {'Idris.Idris.Elab.Interface.MkDeclaration', E11, E12, E13, E14, E15} -> (fun (V44, V45, V46, V47, V48) -> V44 end(E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V19)), V6)), V42, V27))), case V49 of {'Idris.Prelude.Types.Left', E16} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V51) -> begin (V52 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface.default"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Default method "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V51)))))))) end))(V27))), case V52 of {'Idris.Prelude.Types.Left', E18} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V54) -> begin (V55 = {'Idris.TTImp.TTImp.IClaim', V15, V23, V9, [], {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V21, V51}}), begin (V56 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, V55))(V27))), case V56 of {'Idris.Prelude.Types.Left', E20} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V58) -> begin (V60 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V59) -> ('nested--15677-2078--in--un--changeName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V59)) end, V18))), begin (V64 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface.default"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Default method body "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V61) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpClause'(V61)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpClause'(V62, V63)) end end}, V60)))) end))(V27))), case V64 of {'Idris.Prelude.Types.Left', E22} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V66) -> begin (V67 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, {'Idris.TTImp.TTImp.IDef', V15, V21, V60}))(V27))), case V67 of {'Idris.Prelude.Types.Left', E24} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V17, V18}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--elabInterface,elabDefault,changeNameTerm-2119'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> {'Idris.TTImp.TTImp.IVar', V21, V22}; 1 -> {'Idris.TTImp.TTImp.IVar', V21, V20}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateIfaceSyn-1692'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V9 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Idris.Syntax.MkSyntax', V12, V13, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'('erased', V6, V11, V14)), [V6 | V15], V16, V17, V18, V19, V20} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getMethToplevel-1328'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> [{'Idris.TTImp.TTImp.Inline'} | [{'Idris.TTImp.TTImp.Invertible'} | []]]; 1 -> [{'Idris.TTImp.TTImp.Inline'} | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getMethDecl,stripParams-1073'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> ('nested--14874-1059--in--un--stripParams'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V16, V10)); 1 -> {'Idris.TTImp.TTImp.IPi', V15, V14, V13, V12, V11, ('nested--14874-1059--in--un--stripParams'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V16, V10))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkIfaceData-966'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> [{'Idris.TTImp.TTImp.NoHints'} | [{'Idris.TTImp.TTImp.UniqueSearch'} | []]]; 1 -> [{'Idris.TTImp.TTImp.NoHints'} | [{'Idris.TTImp.TTImp.UniqueSearch'} | [{'Idris.TTImp.TTImp.SearchBy', V1} | []]]]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15507-1632--in--un--totMeth'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V15 = ('nested--15507-1631--in--un--findSetTotal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, case V9 of {'Idris.Idris.Elab.Interface.MkDeclaration', E0, E1, E2, E3, E4} -> (fun (V10, V11, V12, V13, V14) -> V12 end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkMethod', case V9 of {'Idris.Idris.Elab.Interface.MkDeclaration', E5, E6, E7, E8, E9} -> (fun (V17, V18, V19, V20, V21) -> V17 end(E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V9 of {'Idris.Idris.Elab.Interface.MkDeclaration', E10, E11, E12, E13, E14} -> (fun (V22, V23, V24, V25, V26) -> V23 end(E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, case V9 of {'Idris.Idris.Elab.Interface.MkDeclaration', E15, E16, E17, E18, E19} -> (fun (V27, V28, V29, V30, V31) -> V31 end(E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end.
'nested--14874-1059--in--un--stripParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16, V17) -> ('case--getMethDecl,stripParams-1073'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V17, V16, V15, V14, V13, V12, V10, ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> 1 end, fun () -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V21, V22)) end end}, V18, V10)) end end, V15)))) end(E0, E1, E2, E3, E4, E5)); _ -> V11 end.
'nested--15652-1763--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V15)) end, V3)).
'nested--15652-1764--in--un--nameCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> []; [E0 | E1] -> (fun (V17, V18) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V19, V20) -> [{'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__con"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V15))))}, V20} | ('nested--15652-1764--in--un--nameCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ((V15 + 1) rem 9223372036854775808), V18))] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14606-800--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of [] -> V13; [E0 | E1] -> (fun (V14, V15) -> case V14 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V18, V19) -> {'Idris.TTImp.TTImp.IPi', V9, V18, V11, V16, V19, ('nested--14606-800--in--un--mkTy'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V15, V13))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15050-1202--in--un--mkLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> {'Idris.TTImp.TTImp.ILam', {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V12}, {'Idris.TTImp.TTImp.Implicit', ('nested--15050-1198--in--un--fc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)), 1}, ('nested--15050-1202--in--un--mkLam'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15050-1204--in--un--methName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Core.Name.UN', ('nested--15050-1203--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10))}.
'nested--14606-797--in--un--jname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V12}, {'Idris.Builtin.MkPair', V14, V15}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15326-1465--in--un--impsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of [] -> V12; [E0 | E1] -> (fun (V14, V15) -> ('nested--15326-1465--in--un--impsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, {'Idris.TTImp.TTImp.IAutoApp', V10, V12, {'Idris.TTImp.TTImp.IBindVar', V10, V14}}, V15)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15050-1201--in--un--getExplicitArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16, V17) -> case V14 of {'Idris.Core.TT.Explicit'} -> (fun () -> [{'Idris.Core.Name.MN', <<"arg"/utf8>>, V10} | ('nested--15050-1201--in--un--getExplicitArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ((V10 + 1) rem 9223372036854775808), V17))] end()); _ -> ('nested--15050-1201--in--un--getExplicitArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17)) end end(E0, E1, E2, E3, E4, E5)); _ -> [] end.
'nested--15507-1631--in--un--findSetTotal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.TTImp.TTImp.Totality', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Just', V12} end(E2)); _ -> ('nested--15507-1631--in--un--findSetTotal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V11)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15050-1198--in--un--fc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E0, E1, E2, E3, E4, E5, E6} -> (fun (V10, V11, V12, V13, V14, V15, V16) -> V10 end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15652-1766--in--un--elabMethods'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V19) -> ('un--getMethToplevel'(V6, V14, V8, V9, V4, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V20)) end, V5)), V16, V3, V19)) end, V17, []))(V18))), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> begin (V38 = (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V35)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V36, V37)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V23))), begin (V42 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Top level methods: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpDecl'(V40, V41)) end end}, V38)))) end))(V18))), case V42 of {'Idris.Prelude.Types.Left', E2} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V44) -> begin (V46 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V45) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, V45)) end, V38))(V18))), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V49) -> fun (V50) -> begin (V51 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V49))(V50))), case V51 of {'Idris.Prelude.Types.Left', E6} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Context':'un--setFlag'(V14, V10, V53, {'Idris.Core.Context.Inline'}, V50))), case V54 of {'Idris.Prelude.Types.Left', E8} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V56) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--setFlag'(V14, V10, V53, {'Idris.Core.Context.TCInline'}, V50))), case V57 of {'Idris.Prelude.Types.Left', E10} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V59) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V14, V10, V53, {'Idris.Core.Context.Overloadable'}, V50)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V16))(V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--15652-1767--in--un--elabDefault'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V21, V22) -> begin (V23 = {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Default implementation of "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21)))), 0}), fun (V24) -> begin (V25 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V23))(V24))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V52 = (('case--elabInterface,elabDefault-2437'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15, V23, V27, ('Idris.Idris2.Libraries.Data.List.Extra':'un--findBy'('erased', 'erased', fun (V28) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$'('erased', 'erased', 'erased', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V31, V32)) end end end end, V28, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V35, V36)) end end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V38)) end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V41, V42)) end end end end}, fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V45, V46)) end end end}, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V21, case V28 of {'Idris.Idris.Elab.Interface.MkDeclaration', E8, E9, E10, E11, E12} -> (fun (V47, V48, V49, V50, V51) -> V47 end(E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))) end, V15))))(V24))), case V52 of {'Idris.Prelude.Types.Left', E13} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V54) -> case V54 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V55, V56) -> begin (V58 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V17, V4}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V57) -> {'Idris.TTImp.TTImp.IVar', V17, V57} end, ('nested--15652-1763--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14))))))), begin (V70 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V59) -> begin (V65 = case V59 of {'Idris.Idris.Elab.Interface.MkDeclaration', E17, E18, E19, E20, E21} -> (fun (V60, V61, V62, V63, V64) -> V60 end(E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V66) -> begin (V67 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V65))(V66))), case V67 of {'Idris.Prelude.Types.Left', E22} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V65, ('nested--15677-2076--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15, {'Idris.TTImp.TTImp.IVar', V17, V69}, ('nested--15652-1763--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14))))}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V15, []))(V24))), case V70 of {'Idris.Prelude.Types.Left', E24} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V72) -> begin (V73 = ('nested--15677-2075--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15, V3, ('un--bindIFace'(V17, V58, ('Idris.Idris2.TTImp.Utils':'un--substNames'(V6, V72, V56))))))), begin (V80 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V14, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V74) -> case V74 of {'Idris.Idris.Elab.Interface.MkDeclaration', E26, E27, E28, E29, E30} -> (fun (V75, V76, V77, V78, V79) -> V75 end(E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15)), V6)), V73, V24))), case V80 of {'Idris.Prelude.Types.Left', E31} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V82) -> begin (V83 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface.default"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Default method "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V82)))))))) end))(V24))), case V83 of {'Idris.Prelude.Types.Left', E33} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V85) -> begin (V86 = {'Idris.TTImp.TTImp.IClaim', V17, V55, V9, [], {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V27, V82}}), begin (V87 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, V86))(V24))), case V87 of {'Idris.Prelude.Types.Left', E35} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V89) -> begin (V91 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V90) -> ('nested--15677-2078--in--un--changeName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V17, V19, V21, V22, V15, V27, V90)) end, V22))), begin (V95 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface.default"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Default method body "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V92) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpClause'(V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpClause'(V93, V94)) end end}, V91)))) end))(V24))), case V95 of {'Idris.Prelude.Types.Left', E37} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V97) -> begin (V98 = (('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, {'Idris.TTImp.TTImp.IDef', V17, V27, V91}))(V24))), case V98 of {'Idris.Prelude.Types.Left', E39} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V21, V22}} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15652-1768--in--un--elabConstraintHints'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V17 = ('nested--15652-1764--in--un--nameCons'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, 0, V5))), fun (V18) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V19) -> ('un--getConstraintHint'(V6, V14, V10, V8, V9, V4, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V20)) end, V17)), V16, ('nested--15652-1763--in--un--paramNames'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14)), V19)) end, V17, []))(V18))), case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> begin (V78 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraint hints from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V27, V28)) end end}, V25)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V31) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V32, V33)) end end}, V29, V30)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V34) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V34)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V35, V36)) end end}}, V24)) end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V40) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V41, V42)) end end}, V39)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V46, V47)) end end}, V43, V44)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V49, V50)) end end}}, V37, V38)) end end}, V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V51) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V53, V54)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V55) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V56) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V56)) end, fun (V57) -> fun (V58) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpDecl'(V57, V58)) end end}, V55)) end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V61) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V61)) end, fun (V62) -> fun (V63) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpDecl'(V62, V63)) end end}, V59, V60)) end end}}, V51)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V66) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V66)) end, fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V67, V68)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V69) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V70)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpDecl'(V71, V72)) end end}, V69)) end, fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V75) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V75)) end, fun (V76) -> fun (V77) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpDecl'(V76, V77)) end end}, V73, V74)) end end}}, V64, V65)) end end}, V23)))))))) end))(V18))), case V78 of {'Idris.Prelude.Types.Left', E2} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V80) -> begin (V97 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V81) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V6, V14, V11, V13, [], V7, V8, V81)) end, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V84, V85, V86)) end end end end end, fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V89, V90, V91)) end end end end end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V93)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V94) -> fun (V95) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V94, V95)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V96) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V96)) end))(V23))))(V18))), case V97 of {'Idris.Prelude.Types.Left', E4} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V99) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V100) -> fun (V101) -> begin (V102 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V14, V100))(V101))), case V102 of {'Idris.Prelude.Types.Left', E6} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V104) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V14, V10, V104, {'Idris.Core.Context.TCInline'}, V101)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V105) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V105)) end, V23))))(V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--15652-1765--in--un--elabAsData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> begin (V41 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V19) -> ('un--getMethDecl'('erased', V6, V14, V8, V7, V3, V16, {'Idris.Builtin.MkPair', case V19 of {'Idris.Idris.Elab.Interface.MkSignature', E0, E1, E2, E3, E4, E5, E6} -> (fun (V20, V21, V22, V23, V24, V25, V26) -> V21 end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', case V19 of {'Idris.Idris.Elab.Interface.MkSignature', E7, E8, E9, E10, E11, E12, E13} -> (fun (V27, V28, V29, V30, V31, V32, V33) -> V30 end(E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V19 of {'Idris.Idris.Elab.Interface.MkSignature', E14, E15, E16, E17, E18, E19, E20} -> (fun (V34, V35, V36, V37, V38, V39, V40) -> V40 end(E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}})) end, V17, []))(V18))), case V41 of {'Idris.Prelude.Types.Left', E21} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V43) -> begin (V83 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Method declarations: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V45) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)) end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V46, V47)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V50, V51)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V53, V54)) end end}}, V48)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V57) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V57)) end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V58, V59)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V60) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V60)) end, fun (V61) -> fun (V62) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V61, V62)) end end}}, V55, V56)) end end}}, V44)) end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V65) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V66, V67)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V69) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V69)) end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V70, V71)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V72) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V72)) end, fun (V73) -> fun (V74) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V73, V74)) end end}}, V68)) end, fun (V75) -> fun (V76) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V77) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V77)) end, fun (V78) -> fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V78, V79)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V80) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V80)) end, fun (V81) -> fun (V82) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V81, V82)) end end}}, V75, V76)) end end}}, V63, V64)) end end}, V43)))) end))(V18))), case V83 of {'Idris.Prelude.Types.Left', E23} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V85) -> begin (V87 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V86) -> ('un--getMethDecl'('erased', V6, V14, V8, V7, V3, V16, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V86})) end, V5, []))(V18))), case V87 of {'Idris.Prelude.Types.Left', E25} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V89) -> begin (V141 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraints: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V90) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V91) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V92) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V92)) end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V93, V94)) end end}, V91)) end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V98, V99)) end end}, V95, V96)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V100) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V101) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V101)) end, fun (V102) -> fun (V103) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V102, V103)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V104) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V104)) end, fun (V105) -> fun (V106) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V105, V106)) end end}}, V100)) end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V109) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V109)) end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V110, V111)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V112) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V113, V114)) end end}}, V107, V108)) end end}}, V90)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V117) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V118) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V118)) end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V119, V120)) end end}, V117)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V123) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V123)) end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V124, V125)) end end}, V121, V122)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V126) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V127) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V127)) end, fun (V128) -> fun (V129) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V128, V129)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V130) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V130)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V131, V132)) end end}}, V126)) end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V135) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V135)) end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V136, V137)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V138) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V138)) end, fun (V139) -> fun (V140) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V139, V140)) end end}}, V133, V134)) end end}}, V115, V116)) end end}, V89)))) end))(V18))), case V141 of {'Idris.Prelude.Types.Left', E27} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V143) -> begin (V144 = (('un--mkIfaceData'(V6, V14, V10, V9, V8, V89, V4, V15, V3, V2, V43))(V18))), case V144 of {'Idris.Prelude.Types.Left', E29} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V146) -> begin (V186 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Methods: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V147) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V148) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V148)) end, fun (V149) -> fun (V150) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V149, V150)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V151) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V152) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V152)) end, fun (V153) -> fun (V154) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V153, V154)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V155) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V155)) end, fun (V156) -> fun (V157) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V156, V157)) end end}}, V151)) end, fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V160) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V160)) end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V161, V162)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V163) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V163)) end, fun (V164) -> fun (V165) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V164, V165)) end end}}, V158, V159)) end end}}, V147)) end, fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V168) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V168)) end, fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V169, V170)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V171) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V172) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V172)) end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V173, V174)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V175) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V175)) end, fun (V176) -> fun (V177) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V176, V177)) end end}}, V171)) end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V180) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V180)) end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--showPrec_Show_ZeroOneOmega'(V181, V182)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V183) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V183)) end, fun (V184) -> fun (V185) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V184, V185)) end end}}, V178, V179)) end end}}, V166, V167)) end end}, V43)))) end))(V18))), case V186 of {'Idris.Prelude.Types.Left', E31} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V188) -> begin (V189 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.interface"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Making interface data type "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V146)))) end))(V18))), case V189 of {'Idris.Prelude.Types.Left', E33} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V191) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V192) -> case V192 of {'Idris.Prelude.Types.Left', E35} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V194) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V195) -> ('Idris.Idris2.TTImp.ProcessDecls':'un--processDecls'(V6, V14, V11, V13, V7, V8, [V146 | []], V195)) end, V18)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--15326-1464--in--un--constName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Name.UN', ('nested--15326-1463--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12))}.
'nested--15677-2077--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V22, V23) -> ('case--elabInterface,elabDefault,changeNameTerm-2119'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23, V22, V20, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V17, V23)))) end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V24, V25, V26) -> {'Idris.TTImp.TTImp.IApp', V24, ('nested--15677-2077--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V25)), V26} end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V27, V28, V29) -> {'Idris.TTImp.TTImp.IAutoApp', V27, ('nested--15677-2077--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V28)), V29} end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V30, V31, V32, V33) -> {'Idris.TTImp.TTImp.INamedApp', V30, ('nested--15677-2077--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V31)), V32, V33} end(E8, E9, E10, E11)); _ -> V21 end.
'nested--15677-2078--in--un--changeName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V22, V23, V24) -> {'Idris.TTImp.TTImp.PatClause', V22, ('nested--15677-2077--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V23)), V24} end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E3, E4, E5, E6, E7, E8} -> (fun (V25, V26, V27, V28, V29, V30) -> {'Idris.TTImp.TTImp.WithClause', V25, ('nested--15677-2077--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V26)), V27, V28, V29, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V31) -> ('nested--15677-2078--in--un--changeName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V31)) end, V30))} end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ImpossibleClause', E9, E10} -> (fun (V32, V33) -> {'Idris.TTImp.TTImp.ImpossibleClause', V32, ('nested--15677-2077--in--un--changeNameTerm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V33))} end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14606-798--in--un--bname'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V12}, {'Idris.Builtin.MkPair', V14, {'Idris.TTImp.TTImp.IBindHere', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V15)), {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V15}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15677-2075--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V20 of [] -> V21; [E0 | E1] -> (fun (V22, V23) -> case V22 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V26, V27) -> {'Idris.TTImp.TTImp.IPi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V27)), V26, {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', V24}, V27, ('nested--15677-2075--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V23, V21))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15050-1199--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of [] -> V11; [E0 | E1] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V16, V17) -> {'Idris.TTImp.TTImp.IPi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V17)), V16, {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', V14}, V17, ('nested--15050-1199--in--un--bindPs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13, V11))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15326-1463--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Name.UN', E0} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__bind_"/utf8>>, V13)) end(E0)); {'Idris.Core.Name.NS', E1, E2} -> (fun (V14, V15) -> ('nested--15326-1463--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V15)) end(E1, E2)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)) end.
'nested--15050-1203--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.Name.UN', E0} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__bind_"/utf8>>, V11)) end(E0)); {'Idris.Core.Name.NS', E1, E2} -> (fun (V12, V13) -> ('nested--15050-1203--in--un--bindName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13)) end(E1, E2)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)) end.
'nested--14606-799--in--un--bhere'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V14, V15) -> {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V14, {'Idris.TTImp.TTImp.IBindHere', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V15)), {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V15}}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15677-2076--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of [] -> V20; [E0 | E1] -> (fun (V22, V23) -> case V22 of {'Idris.Core.Name.UN', E2} -> (fun (V24) -> ('nested--15677-2076--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, {'Idris.TTImp.TTImp.INamedApp', V15, V20, {'Idris.Core.Name.UN', V24}, {'Idris.TTImp.TTImp.IBindVar', V15, V24}}, V23)) end(E2)); _ -> ('nested--15677-2076--in--un--applyParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V23)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15050-1200--in--un--applyCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = {'Idris.Core.Name.UN', <<"__con"/utf8>>}), {'Idris.Builtin.MkPair', V10, {'Idris.TTImp.TTImp.INamedApp', ('nested--15050-1198--in--un--fc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)), {'Idris.TTImp.TTImp.IVar', ('nested--15050-1198--in--un--fc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)), V10}, V11, {'Idris.TTImp.TTImp.IVar', ('nested--15050-1198--in--un--fc'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9)), V11}}} end.
'un--updateIfaceSyn'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V15 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V14) -> ('nested--15507-1632--in--un--totMeth'(V8, V7, V6, V5, V4, V3, V2, V1, V0, V14)) end, V7, []))(V9))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = {'Idris.Idris.Syntax.MkIFaceInfo', V3, V4, V5, V6, V17, V8}), begin (V28 = ('erlang':'put'(V1, case V13 of {'Idris.Idris.Syntax.MkSyntax', E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Idris.Syntax.MkSyntax', V19, V20, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'('erased', V2, V18, V21)), [V2 | V22], V23, V24, V25, V26, V27} end(E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V28} end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sigToDecl'(V0) -> {'Idris.Idris.Elab.Interface.MkDeclaration', case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E0, E1, E2, E3, E4, E5, E6} -> (fun (V1, V2, V3, V4, V5, V6, V7) -> V4 end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14) -> V9 end(E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E14, E15, E16, E17, E18, E19, E20} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V17 end(E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E21, E22, E23, E24, E25, E26, E27} -> (fun (V22, V23, V24, V25, V26, V27, V28) -> V27 end(E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V0 of {'Idris.Idris.Elab.Interface.MkSignature', E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35) -> V35 end(E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--namePis'(V0, V1) -> case V1 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6, V7) -> case V4 of {'Idris.Core.TT.AutoImplicit'} -> (fun () -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.TTImp.TTImp.IPi', V2, V3, {'Idris.Core.TT.AutoImplicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"i_con"/utf8>>, V0}}, V6, ('un--namePis'(((V0 + 1) rem 9223372036854775808), V7))} end()); _ -> {'Idris.TTImp.TTImp.IPi', V2, V3, V4, V5, V6, ('un--namePis'(V0, V7))} end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.TTImp.TTImp.IPi', V2, V3, {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.MN', <<"i_imp"/utf8>>, V0}}, V6, ('un--namePis'(((V0 + 1) rem 9223372036854775808), V7))} end()); _ -> {'Idris.TTImp.TTImp.IPi', V2, V3, V4, V5, V6, ('un--namePis'(V0, V7))} end end()); _ -> {'Idris.TTImp.TTImp.IPi', V2, V3, V4, V5, V6, ('un--namePis'(V0, V7))} end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.IBindHere', E6, E7, E8} -> (fun (V8, V9, V10) -> {'Idris.TTImp.TTImp.IBindHere', V8, V9, ('un--namePis'(V0, V10))} end(E6, E7, E8)); _ -> V1 end.
'un--mkIfaceData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('case--mkIfaceData-966'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, ('Idris.Idris2.Data.List':'un--isNil'('erased', V9))))), begin (V13 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V12)) end, V8))), begin (V15 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V2, V6}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V14} end, V13))))), begin (V19 = ('nested--14606-800--in--un--mkTy'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, {'Idris.Core.TT.Implicit'}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> ('nested--14606-797--in--un--jname'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, V16)) end, V8)), ('nested--14606-800--in--un--mkTy'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, {'Idris.Core.TT.AutoImplicit'}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> ('nested--14606-799--in--un--bhere'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, V17)) end, V5)), ('nested--14606-800--in--un--mkTy'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> ('nested--14606-798--in--un--bname'(V10, V9, V8, V7, V6, V5, V0, V4, V3, V2, V1, V18)) end, V10)), V15))))))), fun (V20) -> begin (V22 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V13, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V21)) end, V10)), V0)))), V19, V20))), case V22 of {'Idris.Prelude.Types.Left', E0} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V24) -> begin (V25 = {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V7, V24}), begin (V27 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V13, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V26) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V26)) end, V10)), V0)))), ('un--mkDataTy'(V2, V8)), V20))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IData', V2, V3, {'Idris.TTImp.TTImp.MkImpData', V2, V6, V29, V11, [V25 | []]}}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end.
'un--mkDataTy'(V0, V1) -> case V1 of [] -> {'Idris.TTImp.TTImp.IType', V0}; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> {'Idris.TTImp.TTImp.IPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Just', V4}, V7, ('un--mkDataTy'(V0, V3))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkCon'(V0, V1) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.UN', E2} -> (fun (V4) -> {'Idris.Core.Name.NS', V2, {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V0)))))), {'Idris.Core.Name.UN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, V4))}}} end(E2)); _ -> {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V0)))))), {'Idris.Core.Name.UN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}} end end(E0, E1)); _ -> {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" at "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V0)))))), {'Idris.Core.Name.UN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__mk"/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))))}} end.
'un--getSig'(V0) -> case V0 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> case V5 of {'Idris.TTImp.TTImp.MkImpTy', E5, E6, E7, E8} -> (fun (V6, V7, V8, V9) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Elab.Interface.MkSignature', V6, V2, V4, V8, V7, 1, ('un--namePis'(0, V9))}} end(E5, E6, E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E9, E10, E11} -> (fun (V10, V11, V12) -> case V12 of {'Idris.TTImp.TTImp.MkImpLater', E12, E13, E14} -> (fun (V13, V14, V15) -> {'Idris.Prelude.Types.Just', {'Idris.Idris.Elab.Interface.MkSignature', V13, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), [{'Idris.TTImp.TTImp.Invertible'} | []], V14, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0, ('un--namePis'(0, V15))}} end(E12, E13, E14)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getMethToplevel'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V10)) end, V8))), begin (V13 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', ('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V4}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V12) -> {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V12} end, V11))))), begin (V22 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('nested--15050-1200--in--un--applyCon'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V14)) end, V7)), case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E0, E1, E2, E3, E4, E5, E6} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V21 end(E0, E1, E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V23) -> begin (V24 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, [], V0, ('nested--15050-1199--in--un--bindPs'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V8, ('un--bindIFace'(('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V13, V22)))), V23))), case V24 of {'Idris.Prelude.Types.Left', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V26) -> begin (V34 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E9, E10, E11, E12, E13, E14, E15} -> (fun (V27, V28, V29, V30, V31, V32, V33) -> V30 end(E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23))), case V34 of {'Idris.Prelude.Types.Left', E16} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V36) -> begin (V58 = {'Idris.TTImp.TTImp.IClaim', ('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E18, E19, E20, E21, E22, E23, E24} -> (fun (V37, V38, V39, V40, V41, V42, V43) -> V38 end(E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, ('case--getMethToplevel-1328'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V11, V13, V22, V26, V36, case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E25, E26, E27, E28, E29, E30, E31} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> V49 end(E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), {'Idris.TTImp.TTImp.MkImpTy', ('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E32, E33, E34, E35, E36, E37, E38} -> (fun (V51, V52, V53, V54, V55, V56, V57) -> V55 end(E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V36, V26}}), begin (V61 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', ('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V59) -> {'Idris.TTImp.TTImp.IBindVar', {'Idris.Core.FC.EmptyFC'}, V59} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V60) -> ('nested--15050-1203--in--un--bindName'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V60)) end, V7))))))), begin (V69 = ('nested--15050-1201--in--un--getExplicitArgs'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, 0, case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E39, E40, E41, E42, E43, E44, E45} -> (fun (V62, V63, V64, V65, V66, V67, V68) -> V68 end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V78 = {'Idris.TTImp.TTImp.PatClause', ('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), {'Idris.TTImp.TTImp.INamedApp', ('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), {'Idris.TTImp.TTImp.IVar', ('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V36}, {'Idris.Core.Name.UN', <<"__con"/utf8>>}, V61}, ('nested--15050-1202--in--un--mkLam'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, V69, ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, ('nested--15050-1204--in--un--methName'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1, case V9 of {'Idris.Idris.Elab.Interface.MkSignature', E46, E47, E48, E49, E50, E51, E52} -> (fun (V70, V71, V72, V73, V74, V75, V76) -> V73 end(E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V77) -> {'Idris.TTImp.TTImp.IVar', {'Idris.Core.FC.EmptyFC'}, V77} end, V69))))))}), begin (V79 = {'Idris.TTImp.TTImp.IDef', ('nested--15050-1198--in--un--fc'(V9, V8, V7, V6, V5, V4, V3, V0, V2, V1)), V36, [V78 | []]}), {'Idris.Prelude.Types.Right', [V58 | [V79 | []]]} end end end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
'un--getMethDecl'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> begin (V13 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V12)) end, V5))), fun (V14) -> begin (V15 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V2, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V13, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V6, V1)))), V11, V14))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V8, ('nested--14874-1059--in--un--stripParams'('erased', V2, V8, V10, V11, V6, V5, V1, V4, V3, V13, V17))}}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getImplParams'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.Implicit'} -> (fun () -> [V3 | ('un--getImplParams'('erased', V5))] end()); _ -> [] end end(E4, E5, E6, E7)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'un--getDefault'(V0) -> case V0 of {'Idris.TTImp.TTImp.IDef', E0, E1, E2} -> (fun (V1, V2, V3) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', [], {'Idris.Builtin.MkPair', V2, V3}}}} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--getConstraintHint'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> begin (V14 = ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V2, V5}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> {'Idris.TTImp.TTImp.IVar', V2, V13} end, V9))))), begin (V15 = {'Idris.TTImp.TTImp.IPi', V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.Explicit'}, {'Idris.Prelude.Types.Nothing'}, V14, V12}), fun (V16) -> begin (V17 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, [], ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V8, V0)), V15, V16))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V20 = {'Idris.Core.Name.DN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraint "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V12)))), {'Idris.Core.Name.UN', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V12))))))))}}), begin (V21 = {'Idris.TTImp.TTImp.IClaim', V2, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V4, [{'Idris.TTImp.TTImp.Inline'} | [{'Idris.TTImp.TTImp.Hint', 1} | []]], {'Idris.TTImp.TTImp.MkImpTy', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.FC.EmptyFC'}, V20, V19}}), begin (V24 = ('Idris.Idris2.TTImp.TTImp':'un--apply'(('nested--15326-1465--in--un--impsBind'(V11, V12, V9, V8, V7, V6, V5, V4, V0, V3, V2, V1, {'Idris.TTImp.TTImp.IVar', V2, V6}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V22) -> ('nested--15326-1463--in--un--bindName'(V11, V12, V9, V8, V7, V6, V5, V4, V0, V3, V2, V1, V22)) end, V7)))), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V23) -> {'Idris.TTImp.TTImp.Implicit', V2, 0} end, V8))))), begin (V25 = {'Idris.TTImp.TTImp.PatClause', V2, {'Idris.TTImp.TTImp.IApp', V2, {'Idris.TTImp.TTImp.IVar', V2, V20}, V24}, {'Idris.TTImp.TTImp.IVar', V2, ('nested--15326-1464--in--un--constName'(V11, V12, V9, V8, V7, V6, V5, V4, V0, V3, V2, V1, V11))}}), begin (V26 = {'Idris.TTImp.TTImp.IDef', V2, V20, [V25 | []]}), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V20, [V21 | [V26 | []]]}} end end end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--elabInterface'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V16 = (('Idris.Idris2.Core.Context':'un--getFullName'(V1, V10))(V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V18))(V15))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V23 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('un--mkCon'(V5, V18)) end, fun () -> fun (V22) -> V22 end end, V13))), begin (V24 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V23))(V15))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> begin (V28 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V27) -> ('un--getSig'(V27)) end, V14))), begin (V30 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V29) -> ('un--sigToDecl'(V29)) end, V28))), begin (V37 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V31) -> case V31 of {'Idris.Idris.Elab.Interface.MkDeclaration', E6, E7, E8, E9, E10} -> (fun (V32, V33, V34, V35, V36) -> V32 end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V30))), begin (V39 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V38) -> ('un--getDefault'(V38)) end, V14))), begin (V40 = ('nested--15652-1765--in--un--elabAsData'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V26, V37, V28, V15))), case V40 of {'Idris.Prelude.Types.Left', E11} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V42) -> begin (V43 = (('nested--15652-1768--in--un--elabConstraintHints'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V26, V37))(V15))), case V43 of {'Idris.Prelude.Types.Left', E13} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V45) -> begin (V46 = ('nested--15652-1766--in--un--elabMethods'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V26, V37, V28, V15))), case V46 of {'Idris.Prelude.Types.Left', E15} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V48) -> begin (V50 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V49) -> ('nested--15652-1767--in--un--elabDefault'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1, V30, V49)) end, V39, []))(V15))), case V50 of {'Idris.Prelude.Types.Left', E17} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V52) -> begin (V68 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V53) -> fun (V54) -> begin (V60 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, case V53 of {'Idris.Idris.Elab.Interface.MkDeclaration', E19, E20, E21, E22, E23} -> (fun (V55, V56, V57, V58, V59) -> V55 end(E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V54))), case V60 of {'Idris.Prelude.Types.Left', E24} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V62) -> {'Idris.Prelude.Types.Right', case V53 of {'Idris.Idris.Elab.Interface.MkDeclaration', E26, E27, E28, E29, E30} -> (fun (V63, V64, V65, V66, V67) -> {'Idris.Idris.Elab.Interface.MkDeclaration', V62, V64, V65, V66, V67} end(E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V30, []))(V15))), case V68 of {'Idris.Prelude.Types.Left', E31} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V70) -> begin (V72 = begin (V71 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V71} end), case V72 of {'Idris.Prelude.Types.Left', E33} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V74) -> begin (V102 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V21, case V74 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> V75 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15))), case V102 of {'Idris.Prelude.Types.Left', E62} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V104) -> case V104 of {'Idris.Prelude.Types.Just', E64} -> (fun (V105) -> begin (V106 = ('un--getImplParams'('erased', V105))), ('un--updateIfaceSyn'(V1, V3, V21, V26, V106, ('nested--15652-1763--in--un--paramNames'(V14, V13, V12, V11, V10, V9, V0, V8, V7, V6, V5, V4, V3, V2, V1)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V107) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V107)) end, V9)), V70, V52, V15)) end end(E64)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V1, V5, V10, V15)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindIFace'(V0, V1, V2) -> {'Idris.TTImp.TTImp.IPi', V0, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Core.TT.AutoImplicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', <<"__con"/utf8>>}}, V1, V2}.
