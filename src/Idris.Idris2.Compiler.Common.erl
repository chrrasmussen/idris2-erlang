-module('Idris.Idris2.Compiler.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--castInt-4140'/5,
  'case--getExtraRuntime,getArg-3754'/3,
  'case--locate-3524'/3,
  'case--case block in parseCC,findTarget-3393'/7,
  'case--parseCC,getOpts-3290'/5,
  'case--case block in getNamedDef-1120'/7,
  'nested--7790-566--in--un--tag'/3,
  'nested--11431-3743--in--un--readPath'/3,
  'nested--11431-3742--in--un--paths'/1,
  'nested--10909-3274--in--un--hasTarget'/5,
  'nested--10909-3273--in--un--getOpts'/4,
  'nested--11431-3741--in--un--getArg'/2,
  'nested--8948-1523--in--un--fullShow'/3,
  'nested--8864-1444--in--un--fullShow'/3,
  'nested--8780-1365--in--un--fullShow'/3,
  'nested--8613-1214--in--un--fullShow'/4,
  'nested--10909-3275--in--un--findTarget'/5,
  'nested--8948-1524--in--un--dumpDef'/3,
  'nested--8864-1445--in--un--dumpDef'/3,
  'nested--8780-1366--in--un--dumpDef'/3,
  'nested--8613-1215--in--un--dumpCase'/5,
  'dn--un--compare_Ord_UsePhase'/2,
  'dn--un-->=_Ord_UsePhase'/2,
  'un--warnIfHole'/3,
  'un--skipUnusedNames'/1,
  'un--replaceEntry'/2,
  'un--pathLookup'/2,
  'un--parseCC'/2,
  'un--nonErased'/3,
  'un--natHackNames'/0,
  'un--locate'/2,
  'un--isExported'/1,
  'un--getNamedDef'/3,
  'un--getMinimalDef'/2,
  'un--getExtraRuntime'/2,
  'un--getExportedCompileData'/6,
  'un--getCompileData'/5,
  'un--getAllDesc'/4,
  'un--exportedName'/1,
  'un--exists'/2,
  'un--dylib_suffix'/0,
  'un--dumpVMCode'/2,
  'un--dumpLifted'/2,
  'un--dumpCases'/4,
  'un--dumpANF'/2,
  'un--copyLib'/2,
  'un--cgExecuteExpr'/4,
  'un--cgCompileLibrary'/5,
  'un--cgCompileExpr'/5,
  'un--castInt'/4
]).
'case--castInt-4140'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V7 of {'Idris.Core.TT.CharType'} -> (fun () -> case V6 of {'Idris.Builtin.MkPair', E68, E69} -> (fun (V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E102} -> (fun (V11) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E103, E104, E105, E106, E107, E108, E109} -> (fun (V12, V13, V14, V15, V16, V17, V18) -> ((V12(V11))(V0)) end(E103, E104, E105, E106, E107, E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E102)); _ -> case V8 of {'Idris.Prelude.Types.Just', E70} -> (fun (V19) -> case V6 of {'Idris.Builtin.MkPair', E71, E72} -> (fun (V20, V21) -> case V20 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E81, E82, E83, E84, E85, E86, E87} -> (fun (V22, V23, V24, V25, V26, V27, V28) -> ((V23(V19))(V0)) end(E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E88, E89, E90, E91, E92, E93, E94} -> (fun (V29, V30, V31, V32, V33, V34, V35) -> ((V32(V19))(V0)) end(E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E95, E96, E97, E98, E99, E100, E101} -> (fun (V36, V37, V38, V39, V40, V41, V42) -> ((V41(V19))(V0)) end(E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V21 of {'Idris.Prelude.Types.Just', E73} -> (fun (V43) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E74, E75, E76, E77, E78, E79, E80} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> (((V50(V19))(V43))(V0)) end(E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73)); _ -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V51)) end end end end(E71, E72)); _ -> fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V52)) end end end(E70)); _ -> fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V53)) end end end end(E68, E69)); _ -> case V8 of {'Idris.Prelude.Types.Just', E36} -> (fun (V54) -> case V6 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V55, V56) -> case V55 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E47, E48, E49, E50, E51, E52, E53} -> (fun (V57, V58, V59, V60, V61, V62, V63) -> ((V58(V54))(V0)) end(E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E54, E55, E56, E57, E58, E59, E60} -> (fun (V64, V65, V66, V67, V68, V69, V70) -> ((V67(V54))(V0)) end(E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E61, E62, E63, E64, E65, E66, E67} -> (fun (V71, V72, V73, V74, V75, V76, V77) -> ((V76(V54))(V0)) end(E61, E62, E63, E64, E65, E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V56 of {'Idris.Prelude.Types.Just', E39} -> (fun (V78) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E40, E41, E42, E43, E44, E45, E46} -> (fun (V79, V80, V81, V82, V83, V84, V85) -> (((V85(V54))(V78))(V0)) end(E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> fun (V86) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V86)) end end end end(E37, E38)); _ -> fun (V87) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V87)) end end end(E36)); _ -> fun (V88) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V88)) end end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V6 of {'Idris.Builtin.MkPair', E142, E143} -> (fun (V89, V90) -> case V90 of {'Idris.Prelude.Types.Just', E176} -> (fun (V91) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E177, E178, E179, E180, E181, E182, E183} -> (fun (V92, V93, V94, V95, V96, V97, V98) -> ((V94(V91))(V0)) end(E177, E178, E179, E180, E181, E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E176)); _ -> case V8 of {'Idris.Prelude.Types.Just', E144} -> (fun (V99) -> case V6 of {'Idris.Builtin.MkPair', E145, E146} -> (fun (V100, V101) -> case V100 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E155, E156, E157, E158, E159, E160, E161} -> (fun (V102, V103, V104, V105, V106, V107, V108) -> ((V103(V99))(V0)) end(E155, E156, E157, E158, E159, E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E162, E163, E164, E165, E166, E167, E168} -> (fun (V109, V110, V111, V112, V113, V114, V115) -> ((V112(V99))(V0)) end(E162, E163, E164, E165, E166, E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E169, E170, E171, E172, E173, E174, E175} -> (fun (V116, V117, V118, V119, V120, V121, V122) -> ((V121(V99))(V0)) end(E169, E170, E171, E172, E173, E174, E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V101 of {'Idris.Prelude.Types.Just', E147} -> (fun (V123) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E148, E149, E150, E151, E152, E153, E154} -> (fun (V124, V125, V126, V127, V128, V129, V130) -> (((V130(V99))(V123))(V0)) end(E148, E149, E150, E151, E152, E153, E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E147)); _ -> fun (V131) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V131)) end end end end(E145, E146)); _ -> fun (V132) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V132)) end end end(E144)); _ -> fun (V133) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V133)) end end end end(E142, E143)); _ -> case V8 of {'Idris.Prelude.Types.Just', E110} -> (fun (V134) -> case V6 of {'Idris.Builtin.MkPair', E111, E112} -> (fun (V135, V136) -> case V135 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E121, E122, E123, E124, E125, E126, E127} -> (fun (V137, V138, V139, V140, V141, V142, V143) -> ((V138(V134))(V0)) end(E121, E122, E123, E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E128, E129, E130, E131, E132, E133, E134} -> (fun (V144, V145, V146, V147, V148, V149, V150) -> ((V147(V134))(V0)) end(E128, E129, E130, E131, E132, E133, E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E135, E136, E137, E138, E139, E140, E141} -> (fun (V151, V152, V153, V154, V155, V156, V157) -> ((V156(V134))(V0)) end(E135, E136, E137, E138, E139, E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V136 of {'Idris.Prelude.Types.Just', E113} -> (fun (V158) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E114, E115, E116, E117, E118, E119, E120} -> (fun (V159, V160, V161, V162, V163, V164, V165) -> (((V165(V134))(V158))(V0)) end(E114, E115, E116, E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E113)); _ -> fun (V166) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V166)) end end end end(E111, E112)); _ -> fun (V167) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V167)) end end end(E110)); _ -> fun (V168) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V168)) end end end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V6 of {'Idris.Builtin.MkPair', E216, E217} -> (fun (V169, V170) -> case V170 of {'Idris.Prelude.Types.Just', E250} -> (fun (V171) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E251, E252, E253, E254, E255, E256, E257} -> (fun (V172, V173, V174, V175, V176, V177, V178) -> ((V176(V171))(V0)) end(E251, E252, E253, E254, E255, E256, E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E250)); _ -> case V8 of {'Idris.Prelude.Types.Just', E218} -> (fun (V179) -> case V6 of {'Idris.Builtin.MkPair', E219, E220} -> (fun (V180, V181) -> case V180 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E229, E230, E231, E232, E233, E234, E235} -> (fun (V182, V183, V184, V185, V186, V187, V188) -> ((V183(V179))(V0)) end(E229, E230, E231, E232, E233, E234, E235)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E236, E237, E238, E239, E240, E241, E242} -> (fun (V189, V190, V191, V192, V193, V194, V195) -> ((V192(V179))(V0)) end(E236, E237, E238, E239, E240, E241, E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E243, E244, E245, E246, E247, E248, E249} -> (fun (V196, V197, V198, V199, V200, V201, V202) -> ((V201(V179))(V0)) end(E243, E244, E245, E246, E247, E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V181 of {'Idris.Prelude.Types.Just', E221} -> (fun (V203) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E222, E223, E224, E225, E226, E227, E228} -> (fun (V204, V205, V206, V207, V208, V209, V210) -> (((V210(V179))(V203))(V0)) end(E222, E223, E224, E225, E226, E227, E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E221)); _ -> fun (V211) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V211)) end end end end(E219, E220)); _ -> fun (V212) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V212)) end end end(E218)); _ -> fun (V213) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V213)) end end end end(E216, E217)); _ -> case V8 of {'Idris.Prelude.Types.Just', E184} -> (fun (V214) -> case V6 of {'Idris.Builtin.MkPair', E185, E186} -> (fun (V215, V216) -> case V215 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E195, E196, E197, E198, E199, E200, E201} -> (fun (V217, V218, V219, V220, V221, V222, V223) -> ((V218(V214))(V0)) end(E195, E196, E197, E198, E199, E200, E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E202, E203, E204, E205, E206, E207, E208} -> (fun (V224, V225, V226, V227, V228, V229, V230) -> ((V227(V214))(V0)) end(E202, E203, E204, E205, E206, E207, E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E209, E210, E211, E212, E213, E214, E215} -> (fun (V231, V232, V233, V234, V235, V236, V237) -> ((V236(V214))(V0)) end(E209, E210, E211, E212, E213, E214, E215)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V216 of {'Idris.Prelude.Types.Just', E187} -> (fun (V238) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E188, E189, E190, E191, E192, E193, E194} -> (fun (V239, V240, V241, V242, V243, V244, V245) -> (((V245(V214))(V238))(V0)) end(E188, E189, E190, E191, E192, E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E187)); _ -> fun (V246) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V246)) end end end end(E185, E186)); _ -> fun (V247) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V247)) end end end(E184)); _ -> fun (V248) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V248)) end end end end()); _ -> case V8 of {'Idris.Prelude.Types.Just', E4} -> (fun (V249) -> case V6 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V250, V251) -> case V250 of {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E15, E16, E17, E18, E19, E20, E21} -> (fun (V252, V253, V254, V255, V256, V257, V258) -> ((V253(V249))(V0)) end(E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E22, E23, E24, E25, E26, E27, E28} -> (fun (V259, V260, V261, V262, V263, V264, V265) -> ((V262(V249))(V0)) end(E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E29, E30, E31, E32, E33, E34, E35} -> (fun (V266, V267, V268, V269, V270, V271, V272) -> ((V271(V249))(V0)) end(E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V251 of {'Idris.Prelude.Types.Just', E7} -> (fun (V273) -> case V3 of {'Idris.Compiler.Common.MkConstantPrimitives', E8, E9, E10, E11, E12, E13, E14} -> (fun (V274, V275, V276, V277, V278, V279, V280) -> (((V280(V249))(V273))(V0)) end(E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> fun (V281) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V281)) end end end end(E5, E6)); _ -> fun (V282) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V282)) end end end(E4)); _ -> fun (V283) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V283)) end end end end(E2, E3)); _ -> fun (V284) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V284)) end end end(E0, E1)); _ -> fun (V285) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid cast: + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + \x{27} -> \x{27} + "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))))))}, V285)) end end.
'case--getExtraRuntime,getArg-3754'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Data.String':'un--trim'(V3)), <<"extraRuntime"/utf8>>)) of 1 -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'((1 + 0), ('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), V4))))}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--locate-3524'(V0, V1, V2) -> case V2 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V7, V8)) end end}, $., ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V3)))) of 1 -> V3; 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('un--dylib_suffix'()))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E2 | E3] -> (fun (V9, V10) -> ('Idris.Idris2.Core.Core':'un--cond'([{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('un--dylib_suffix'()), <<"dll"/utf8>>)) end, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<".dll"/utf8>>)))))) end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('un--dylib_suffix'()), <<"dylib"/utf8>>)) end, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<".dylib"/utf8>>)))))) end} | []]], ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--dylib_suffix'()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, V9)))))))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in parseCC,findTarget-3393'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V8 of <<""/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V7)), []}}; _ -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V7)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> ('Idris.Idris2.Data.String':'un--trim'(V9)) end, ('nested--10909-3273--in--un--getOpts'(V0, V1, V2, ('Idris.Idris2.Data.String':'un--strTail'(V8))))))}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseCC,getOpts-3290'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> case V6 of <<""/utf8>> -> [V5 | []]; _ -> [V5 | ('nested--10909-3273--in--un--getOpts'(V0, V1, V2, ('Idris.Idris2.Data.String':'un--strTail'(V6))))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getNamedDef-1120'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V8 = ('un--warnIfHole'(V0, V7, V6))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V11 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7}}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7790-566--in--un--tag'(V0, V1, V2) -> case V2 of 0 -> 0; 1 -> 1; 2 -> 2; 3 -> 3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11431-3743--in--un--readPath'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Right', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Right', V34} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V1, V35}, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11431-3742--in--un--paths'(V0) -> ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V3, V4)) end end}, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V5) -> ('nested--11431-3741--in--un--getArg'(V0, V5)) end, ('Idris.Idris2.Data.List':'un--reverse'(V0)))))).
'nested--10909-3274--in--un--hasTarget'(V0, V1, V2, V3, V4) -> case ('Idris.Idris2.Data.String':'un--span'(fun (V5) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V5, $:)) end, V4)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V6, V3)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10909-3273--in--un--getOpts'(V0, V1, V2, V3) -> case V3 of <<""/utf8>> -> []; _ -> ('case--parseCC,getOpts-3290'(V0, V1, V2, V3, ('Idris.Idris2.Data.String':'un--span'(fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V4, $,)) end, V3)))) end.
'nested--11431-3741--in--un--getArg'(V0, V1) -> ('case--getExtraRuntime,getArg-3754'(V0, V1, ('Idris.Idris2.Data.String':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $=)) end, V1)))).
'nested--8948-1523--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--8864-1444--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--8780-1365--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--8613-1214--in--un--fullShow'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) end.
'nested--10909-3275--in--un--findTarget'(V0, V1, V2, V3, V4) -> case V4 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V5, V6) -> case ('nested--10909-3274--in--un--hasTarget'(V0, V1, V2, V3, V5)) of 1 -> ('case--case block in parseCC,findTarget-3393'(V0, V1, V2, V5, V6, V3, ('Idris.Idris2.Data.String':'un--span'(fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V7, $:)) end, V5)))); 0 -> ('nested--10909-3275--in--un--findTarget'(V0, V1, V2, V3, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8948-1524--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--8948-1523--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.VMCode':'dn--un--show_Show_VMDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8864-1445--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--8864-1444--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.ANF':'dn--un--show_Show_ANFDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8780-1366--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--8780-1365--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.LambdaLift':'dn--un--show_Show_LiftedDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8613-1215--in--un--dumpCase'(V0, V1, V2, V3, V4) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end()); {'Idris.Prelude.Types.Just', E30} -> (fun (V36) -> case V36 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> case V56 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end()); {'Idris.Prelude.Types.Just', E52} -> (fun (V58) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--8613-1214--in--un--fullShow'(V0, V1, V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedDef'(V58)), <<"\x{a}"/utf8>>))))))} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--compare_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--7790-566--in--un--tag'(V1, V0, V0)), ('nested--7790-566--in--un--tag'(V1, V0, V1)))).
'dn--un-->=_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 0)).
'un--warnIfHole'(V0, V1, V2) -> case V1 of {'Idris.Core.CompileExpr.MkNmError', E0} -> (fun (V3) -> begin (V31 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Warning: compiling hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))))))(V2))), {'Idris.Prelude.Types.Right', V31} end end(E0)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--skipUnusedNames'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('un--skipUnusedNames'(V2)) end(E0, E1)); {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> 0 end(E2, E3)); {'Idris.Core.Name.Resolved', E4} -> (fun (V5) -> 0 end(E4)); _ -> 1 end.
'un--replaceEntry'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> fun (V4) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', 0} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('Idris.Idris2.Core.Context':'un--addContextEntry'(V0, V6, {'Idris.Core.Name.Resolved', V2}, V7, V11)) end, V4)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pathLookup'(V0, V1) -> begin (V29 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, <<"PATH"/utf8>>, 0))(V1))), begin (V30 = case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> [<<".exe"/utf8>> | [<<".cmd"/utf8>> | [<<".bat"/utf8>> | [<<""/utf8>> | []]]]]; 0 -> [<<""/utf8>> | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V32 = ('Idris.Idris2.Data.List1':'un--forget'(('Idris.Idris2.Data.String':'un--split'(fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V31, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> <<"/usr/bin:/usr/local/bin"/utf8>> end, V29))))))), begin (V36 = ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V32, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V0, fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'(V30, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'(('Idris.Idris2.Prelude.Types.String':'un--++'(V33, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V34, V35)))))))) end)) end)) end))), (('Idris.Idris2.Erlang.System.File':'un--firstExists'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, V36))(V1)) end end end end.
'un--parseCC'(V0, V1) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(('nested--10909-3275--in--un--findTarget'(V2, V3, V1, V2, V1)), fun () -> ('un--parseCC'(V3, V1)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nonErased'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V38 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V46 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V60) -> fun (V61) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V60, V61)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V62) -> fun (V63) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V62, V63)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))} end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--natHackNames'() -> [{'Idris.Core.Name.UN', <<"prim__add_Integer"/utf8>>} | [{'Idris.Core.Name.UN', <<"prim__sub_Integer"/utf8>>} | [{'Idris.Core.Name.UN', <<"prim__mul_Integer"/utf8>>} | [{'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Idris.Core.Name.UN', <<"prim__integerToNat"/utf8>>}} | []]]]].
'un--locate'(V0, V1) -> begin (V2 = ('case--locate-3524'(V1, V0, ('Idris.Idris2.Data.String':'un--words'(V1))))), fun (V3) -> begin (V7 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V4) -> ('Idris.Idris2.Core.Directory':'un--findLibraryFile'(V0, V2, V4)) end, fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', V2} end end, V3))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, V9}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--isExported'(V0) -> case V0 of 2 -> 1; 1 -> 1; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNamedDef'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E32} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Just', V38}), ('case--case block in getNamedDef-1120'(V1, V0, V6, V38, V39, case V38 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V59 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getMinimalDef'(V0, V1) -> case V0 of {'Idris.Core.Context.Decoded', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, {'Idris.Prelude.Types.Nothing'}}} end(E0)); {'Idris.Core.Context.Coded', E1, E2} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Libraries.Utils.Binary.Bin'}, V4, V1))), case V5 of {'Idris.Prelude.Types.Left', E3} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V7) -> begin (V13 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CDef'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CDef'(V11, V12)) end end}, V7, V1))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V71 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(Maybe $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V22, V23, V24)) end end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V25, V26)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V27, V28, V29)) end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V30, V31)) end end}}, V19, V20, V21)) end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V34, V35, V36)) end end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V37, V38)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V39, V40, V41)) end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V42, V43)) end end}}, V32, V33)) end end}, V16, V17, V18)) end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'({'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V52, V53)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V54, V55, V56)) end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V57, V58)) end end}}, V46, V47, V48)) end end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V61) -> fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V61, V62, V63)) end end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V64, V65)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V66, V67, V68)) end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V69, V70)) end end}}, V59, V60)) end end}, V44, V45)) end end}, V7, V1))), case V71 of {'Idris.Prelude.Types.Left', E7} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V73) -> begin (V75 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V74) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'(V74)) end, V73))), begin (V76 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V7, V1))), case V76 of {'Idris.Prelude.Types.Left', E9} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V78) -> begin (V79 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V7, V1))), case V79 of {'Idris.Prelude.Types.Left', E11} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V81) -> begin (V82 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V7, V1))), case V82 of {'Idris.Prelude.Types.Left', E13} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V84) -> begin (V85 = {'Idris.Core.Context.MkGlobalDef', V78, V84, {'Idris.Core.TT.Erased', V78, 0}, [], [], [], [], V81, [], 2, {'Idris.Core.TT.MkTotality', {'Idris.Core.TT.Unchecked'}, {'Idris.Core.TT.IsCovering'}}, [], {'Idris.Prelude.Types.Nothing'}, V75, 0, 0, 1, {'Idris.Core.Context.None'}, V15, {'Idris.Prelude.Types.Nothing'}, []}), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V85, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V4}}}} end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getExtraRuntime'(V0, V1) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V2) -> fun (V3) -> ('nested--11431-3743--in--un--readPath'(V0, V2, V3)) end end, ('nested--11431-3742--in--un--paths'(V0)), [], V1))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V33, V34)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, ('Idris.Idris2.Data.List':'un--intersperse'(<<"\x{a}"/utf8>>, V6))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getExportedCompileData'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0, V5))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V44 = begin (V43 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, V15))(V5))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E6} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V46) -> begin (V76 = ('Idris.Idris2.Data.List':'un--filter'(V3, ('Idris.Idris2.Data.List':'un--filter'(fun (V47) -> ('un--skipUnusedNames'(V47)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.Context':'un--getResolvedAs'(case V9 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V48 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))), begin (V110 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V77) -> fun (V78) -> begin (V107 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V77, case V9 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V79 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V78))), case V107 of {'Idris.Prelude.Types.Left', E64} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V77, V109}} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V76, [], V5))), case V110 of {'Idris.Prelude.Types.Left', E66} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V112) -> begin (V114 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V113) -> ('un--exportedName'(V113)) end, V112))), begin (V123 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V117, V118, V119)) end end end, fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V120, V121, V122)) end end end}, V115, V116)) end end, ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--natHackNames'()), ('Idris.Idris2.Prelude.Types.List':'un--++'(V114, V4)))), [], V5))), case V123 of {'Idris.Prelude.Types.Left', E68} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V125) -> begin (V126 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Get names"/utf8>> end, ('un--getAllDesc'(V0, V125, V46, V9)), V5))), case V126 of {'Idris.Prelude.Types.Left', E70} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V128) -> begin (V157 = begin (V156 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V131, V132, V133)) end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> V135 end end end, fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> begin (V142 = (V139(V141))), begin (V143 = (V140(V141))), (V142(V143)) end end end end end end end}, fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> begin (V149 = (V146(V148))), ((V147(V149))(V148)) end end end end end end, fun (V150) -> fun (V151) -> fun (V152) -> begin (V153 = (V151(V152))), (V153(V152)) end end end end}, fun (V154) -> fun (V155) -> V155 end end}, V46))(V5))), {'Idris.Prelude.Types.Right', V156} end), case V157 of {'Idris.Prelude.Types.Left', E72} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V159) -> begin (V161 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V160) -> V160 end, V159))), begin (V163 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V162) -> {'Idris.Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'(V162))} end, V161))), begin (V172 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V164) -> fun (V165) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V166, V167, V168)) end end end, fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V169, V170, V171)) end end end}, V164, V165)) end end, V163, [], V5))), case V172 of {'Idris.Prelude.Types.Left', E74} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V174) -> begin (V182 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V175) -> fun (V176) -> ('un--nonErased'(V0, V175, V176)) end end, ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V177, V178)) end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V179, V180)) end end}, ('Idris.Idris2.Data.List':'un--filter'(fun (V181) -> ('un--skipUnusedNames'(V181)) end, V174)))), V5))), case V182 of {'Idris.Prelude.Types.Left', E76} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V184) -> begin (V188 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Merge lambda"/utf8>> end, fun (V185) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V186) -> fun (V187) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V186, V187)) end end, V184, V185)) end, V5))), case V188 of {'Idris.Prelude.Types.Left', E78} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V190) -> begin (V194 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Fix arity"/utf8>> end, fun (V191) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V192) -> fun (V193) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V192, V193)) end end, V184, V191)) end, V5))), case V194 of {'Idris.Prelude.Types.Left', E80} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V196) -> begin (V200 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Forget names"/utf8>> end, fun (V197) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V198) -> fun (V199) -> ('Idris.Idris2.Compiler.CompileExpr':'un--mkForgetDef'(V0, V198, V199)) end end, V184, V197)) end, V5))), case V200 of {'Idris.Prelude.Types.Left', E82} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V202) -> begin (V203 = (('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, {'Idris.Core.CompileExpr.CErased', {'Idris.Core.FC.EmptyFC'}}))(V5))), case V203 of {'Idris.Prelude.Types.Left', E84} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V205) -> begin (V206 = {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}), begin (V207 = ('Idris.Idris2.Compiler.LambdaLift':'un--liftBody'([], V1, V206, V205, V5))), case V207 of {'Idris.Prelude.Types.Left', E86} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V209) -> case V209 of {'Idris.Builtin.MkPair', E88, E89} -> (fun (V210, V211) -> begin (V214 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V212) -> fun (V213) -> ('un--getNamedDef'(V0, V212, V213)) end end, V184, [], V5))), case V214 of {'Idris.Prelude.Types.Left', E90} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V216) -> begin (V220 = case ('dn--un-->=_Ord_UsePhase'(V2, 1)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Lambda lift"/utf8>> end, fun (V217) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V218) -> fun (V219) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V0, V1, V218, V219)) end end, V184, [], V217)) end, V5)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V220 of {'Idris.Prelude.Types.Left', E92} -> (fun (V221) -> {'Idris.Prelude.Types.Left', V221} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V222) -> begin (V251 = [{'Idris.Builtin.MkPair', V206, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V210}} | ('Idris.Idris2.Prelude.Types.List':'un--++'(V211, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V225, V226, V227)) end end end end end, fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V230, V231, V232)) end end end end end, fun (V233) -> fun (V234) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V234)) end end, fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V238, V239, V240, V241)) end end end end end end end, fun (V242) -> fun (V243) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V243)) end end, fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V246, V247, V248)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V249, V250)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V222))))]), begin (V260 = case ('dn--un-->=_Ord_UsePhase'(V2, 2)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Get ANF"/utf8>> end, fun (V252) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V253) -> fun (V254) -> case V253 of {'Idris.Builtin.MkPair', E94, E95} -> (fun (V255, V256) -> begin (V257 = ('Idris.Idris2.Compiler.ANF':'un--toANF'(V256, V254))), case V257 of {'Idris.Prelude.Types.Left', E96} -> (fun (V258) -> {'Idris.Prelude.Types.Left', V258} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V259) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V255, V259}} end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V251, [], V252)) end, V5)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V260 of {'Idris.Prelude.Types.Left', E98} -> (fun (V261) -> {'Idris.Prelude.Types.Left', V261} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V262) -> begin (V264 = case ('dn--un-->=_Ord_UsePhase'(V2, 3)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Get VM Code"/utf8>> end, fun (V263) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V262))} end, V5)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V264 of {'Idris.Prelude.Types.Left', E100} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V266) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V205, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V267) -> V267 end, V216)), V251, V262, V266}} end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getCompileData'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.TT':'un--getRefs'({'Idris.Core.Name.Resolved', -1}, V3))), begin (V19 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V13, V14, V15)) end end end, fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V16, V17, V18)) end end end}, V3, V4))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V30 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V24, V25, V26)) end end end, fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V27, V28, V29)) end end end}, V22, V23)) end end, ('un--natHackNames'()), [], V4))), case V30 of {'Idris.Prelude.Types.Left', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0, V4))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> begin (V64 = begin (V63 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, V35))(V4))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E10} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V66) -> begin (V67 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get names"/utf8>> end, ('un--getAllDesc'(V0, ('Idris.Idris2.Prelude.Types.List':'un--++'(V32, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V12)))), V66, V8)), V4))), case V67 of {'Idris.Prelude.Types.Left', E12} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V69) -> begin (V98 = begin (V97 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> V76 end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), begin (V84 = (V81(V82))), (V83(V84)) end end end end end end end}, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> begin (V90 = (V87(V89))), ((V88(V90))(V89)) end end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V92(V93))), (V94(V93)) end end end end}, fun (V95) -> fun (V96) -> V96 end end}, V66))(V4))), {'Idris.Prelude.Types.Right', V97} end), case V98 of {'Idris.Prelude.Types.Left', E14} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V100) -> begin (V102 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V101) -> V101 end, V100))), begin (V104 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V103) -> {'Idris.Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'(V103))} end, V102))), begin (V113 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V107, V108, V109)) end end end, fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V110, V111, V112)) end end end}, V105, V106)) end end, V104, [], V4))), case V113 of {'Idris.Prelude.Types.Left', E16} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V115) -> begin (V118 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V116) -> fun (V117) -> ('un--nonErased'(V0, V116, V117)) end end, V115, V4))), case V118 of {'Idris.Prelude.Types.Left', E18} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V120) -> begin (V124 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Merge lambda"/utf8>> end, fun (V121) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V122) -> fun (V123) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V122, V123)) end end, V120, V121)) end, V4))), case V124 of {'Idris.Prelude.Types.Left', E20} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V126) -> begin (V130 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Fix arity"/utf8>> end, fun (V127) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V128) -> fun (V129) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V128, V129)) end end, V120, V127)) end, V4))), case V130 of {'Idris.Prelude.Types.Left', E22} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V132) -> begin (V136 = ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Forget names"/utf8>> end, fun (V133) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V134) -> fun (V135) -> ('Idris.Idris2.Compiler.CompileExpr':'un--mkForgetDef'(V0, V134, V135)) end end, V120, V133)) end, V4))), case V136 of {'Idris.Prelude.Types.Left', E24} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V138) -> begin (V142 = begin (V139 = ('Idris.Idris2.Compiler.CompileExpr':'un--compileExp'(V0, V21, V4))), case V139 of {'Idris.Prelude.Types.Left', E26} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V141) -> (('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, V141))(V4)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V142 of {'Idris.Prelude.Types.Left', E28} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V144) -> begin (V145 = {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}), begin (V146 = ('Idris.Idris2.Compiler.LambdaLift':'un--liftBody'([], V1, V145, V144, V4))), case V146 of {'Idris.Prelude.Types.Left', E30} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V148) -> case V148 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V149, V150) -> begin (V153 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V151) -> fun (V152) -> ('un--getNamedDef'(V0, V151, V152)) end end, V120, [], V4))), case V153 of {'Idris.Prelude.Types.Left', E34} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V155) -> begin (V159 = case ('dn--un-->=_Ord_UsePhase'(V2, 1)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Lambda lift"/utf8>> end, fun (V156) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V157) -> fun (V158) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V0, V1, V157, V158)) end end, V120, [], V156)) end, V4)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V159 of {'Idris.Prelude.Types.Left', E36} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V161) -> begin (V190 = [{'Idris.Builtin.MkPair', V145, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V149}} | ('Idris.Idris2.Prelude.Types.List':'un--++'(V150, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V164, V165, V166)) end end end end end, fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V169, V170, V171)) end end end end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V173)) end end, fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V177, V178, V179, V180)) end end end end end end end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V182)) end end, fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V185, V186, V187)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V188) -> fun (V189) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V188, V189)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V161))))]), begin (V199 = case ('dn--un-->=_Ord_UsePhase'(V2, 2)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get ANF"/utf8>> end, fun (V191) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V192) -> fun (V193) -> case V192 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V194, V195) -> begin (V196 = ('Idris.Idris2.Compiler.ANF':'un--toANF'(V195, V193))), case V196 of {'Idris.Prelude.Types.Left', E40} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V198) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V194, V198}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V190, [], V191)) end, V4)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V199 of {'Idris.Prelude.Types.Left', E42} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V201) -> begin (V203 = case ('dn--un-->=_Ord_UsePhase'(V2, 3)) of 1 -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"++ Get VM Code"/utf8>> end, fun (V202) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V201))} end, V4)); 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V203 of {'Idris.Prelude.Types.Left', E44} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V205) -> begin (V207 = begin (V206 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V206} end), case V207 of {'Idris.Prelude.Types.Left', E46} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V209) -> begin (V263 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V210) -> {'Idris.Prelude.Types.Right', 0} end end, fun () -> fun (V211) -> fun (V212) -> begin (V241 = begin (V240 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V215, V216, V217)) end end end end end, fun (V218) -> fun (V219) -> fun (V220) -> V219 end end end, fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> begin (V226 = (V223(V225))), begin (V227 = (V224(V225))), (V226(V227)) end end end end end end end}, fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> begin (V233 = (V230(V232))), ((V231(V233))(V232)) end end end end end end, fun (V234) -> fun (V235) -> fun (V236) -> begin (V237 = (V235(V236))), (V237(V236)) end end end end}, fun (V238) -> fun (V239) -> V239 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping case trees to "/utf8>>, V211))))(V212))), {'Idris.Prelude.Types.Right', V240} end), case V241 of {'Idris.Prelude.Types.Left', E48} -> (fun (V242) -> {'Idris.Prelude.Types.Left', V242} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V243) -> ('un--dumpCases'(V209, V211, V120, V212)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V11 of {'Idris.Core.Options.MkSessionOpts', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262) -> V256 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V263 of {'Idris.Prelude.Types.Left', E69} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V265) -> begin (V319 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V266) -> {'Idris.Prelude.Types.Right', 0} end end, fun () -> fun (V267) -> fun (V268) -> begin (V297 = begin (V296 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> fun (V273) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V271, V272, V273)) end end end end end, fun (V274) -> fun (V275) -> fun (V276) -> V275 end end end, fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> begin (V282 = (V279(V281))), begin (V283 = (V280(V281))), (V282(V283)) end end end end end end end}, fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> begin (V289 = (V286(V288))), ((V287(V289))(V288)) end end end end end end, fun (V290) -> fun (V291) -> fun (V292) -> begin (V293 = (V291(V292))), (V293(V292)) end end end end}, fun (V294) -> fun (V295) -> V295 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping lambda lifted defs to "/utf8>>, V267))))(V268))), {'Idris.Prelude.Types.Right', V296} end), case V297 of {'Idris.Prelude.Types.Left', E71} -> (fun (V298) -> {'Idris.Prelude.Types.Left', V298} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V299) -> (('un--dumpLifted'(V267, V190))(V268)) end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V11 of {'Idris.Core.Options.MkSessionOpts', E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318) -> V313 end(E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V319 of {'Idris.Prelude.Types.Left', E92} -> (fun (V320) -> {'Idris.Prelude.Types.Left', V320} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V321) -> begin (V375 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V322) -> {'Idris.Prelude.Types.Right', 0} end end, fun () -> fun (V323) -> fun (V324) -> begin (V353 = begin (V352 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V327, V328, V329)) end end end end end, fun (V330) -> fun (V331) -> fun (V332) -> V331 end end end, fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> begin (V338 = (V335(V337))), begin (V339 = (V336(V337))), (V338(V339)) end end end end end end end}, fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> begin (V345 = (V342(V344))), ((V343(V345))(V344)) end end end end end end, fun (V346) -> fun (V347) -> fun (V348) -> begin (V349 = (V347(V348))), (V349(V348)) end end end end}, fun (V350) -> fun (V351) -> V351 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping ANF defs to "/utf8>>, V323))))(V324))), {'Idris.Prelude.Types.Right', V352} end), case V353 of {'Idris.Prelude.Types.Left', E94} -> (fun (V354) -> {'Idris.Prelude.Types.Left', V354} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V355) -> (('un--dumpANF'(V323, V201))(V324)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V11 of {'Idris.Core.Options.MkSessionOpts', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114} -> (fun (V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374) -> V370 end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V375 of {'Idris.Prelude.Types.Left', E115} -> (fun (V376) -> {'Idris.Prelude.Types.Left', V376} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V377) -> begin (V431 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V378) -> {'Idris.Prelude.Types.Right', 0} end end, fun () -> fun (V379) -> fun (V380) -> begin (V409 = begin (V408 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V381) -> fun (V382) -> fun (V383) -> fun (V384) -> fun (V385) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V383, V384, V385)) end end end end end, fun (V386) -> fun (V387) -> fun (V388) -> V387 end end end, fun (V389) -> fun (V390) -> fun (V391) -> fun (V392) -> fun (V393) -> begin (V394 = (V391(V393))), begin (V395 = (V392(V393))), (V394(V395)) end end end end end end end}, fun (V396) -> fun (V397) -> fun (V398) -> fun (V399) -> fun (V400) -> begin (V401 = (V398(V400))), ((V399(V401))(V400)) end end end end end end, fun (V402) -> fun (V403) -> fun (V404) -> begin (V405 = (V403(V404))), (V405(V404)) end end end end}, fun (V406) -> fun (V407) -> V407 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping VM defs to "/utf8>>, V379))))(V380))), {'Idris.Prelude.Types.Right', V408} end), case V409 of {'Idris.Prelude.Types.Left', E117} -> (fun (V410) -> {'Idris.Prelude.Types.Left', V410} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V411) -> (('un--dumpVMCode'(V379, V205))(V380)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V11 of {'Idris.Core.Options.MkSessionOpts', E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137} -> (fun (V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430) -> V427 end(E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V431 of {'Idris.Prelude.Types.Left', E138} -> (fun (V432) -> {'Idris.Prelude.Types.Left', V432} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V433) -> begin (V435 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V434) -> ('un--replaceEntry'(V0, V434)) end, V102, V4))), case V435 of {'Idris.Prelude.Types.Left', E140} -> (fun (V436) -> {'Idris.Prelude.Types.Left', V436} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V437) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V144, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V438) -> V438 end, V155)), V190, V201, V205}} end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAllDesc'(V0, V1, V2, V3) -> case V1 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Name.Resolved', E2} -> (fun (V7) -> fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V2, V7))(V8))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E3} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V39) -> begin (V40 = {'Idris.Core.Name.Resolved', V7}), case V39 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V69 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V40, case V3 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V41 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V69 of {'Idris.Prelude.Types.Left', E33} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V71) -> case V71 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)) end()); {'Idris.Prelude.Types.Just', E35} -> (fun (V72) -> case V72 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V73, V74) -> begin (V75 = ('un--getMinimalDef'(V74, V8))), case V75 of {'Idris.Prelude.Types.Left', E38} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V77) -> case V77 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V78, V79) -> begin (V84 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V80) -> case V80 of {'Idris.Prelude.Types.Left', E42} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V82) -> {'Idris.Prelude.Types.Right', 0} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V83) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V40, V78, V83)) end, V8))), case V84 of {'Idris.Prelude.Types.Left', E44} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V86) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V78 of {'Idris.Core.Context.MkGlobalDef', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> V94 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V108) -> fun (V109) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V108, V109)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V110) -> fun (V111) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V110, V111)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))) of 1 -> begin (V140 = begin (V139 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V114, V115, V116)) end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> V118 end end end, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> begin (V125 = (V122(V124))), begin (V126 = (V123(V124))), (V125(V126)) end end end end end end end}, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), ((V130(V132))(V131)) end end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> begin (V136 = (V134(V135))), (V136(V135)) end end end end}, fun (V137) -> fun (V138) -> V138 end end}, V2, V7, {'Idris.Builtin.MkPair', V7, V79}))(V8))), {'Idris.Prelude.Types.Right', V139} end), case V140 of {'Idris.Prelude.Types.Left', E46} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V142) -> begin (V143 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V78))), begin (V152 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V144) -> fun (V145) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V146) -> fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V146, V147, V148)) end end end, fun (V149) -> fun (V150) -> fun (V151) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V149, V150, V151)) end end end}, V144, V145)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(V143)), [], V8))), case V152 of {'Idris.Prelude.Types.Left', E48} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V154) -> (('un--getAllDesc'(V0, ('Idris.Idris2.Prelude.Types.List':'un--++'(V154, V6)), V2, V3))(V8)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E71} -> (fun (V155) -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)) end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--getAllDesc'(V0, V6, V2, V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--exportedName'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E2} -> (fun (V3) -> case ('un--isExported'(case V3 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V13 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> {'Idris.Prelude.Types.Just', V1}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--exists'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--openFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0, 0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, ('Idris.Idris2.Erlang.System.File':'un--closeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}, V30)), fun () -> fun (V83) -> 1 end end))(V1)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V84) -> 0 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dylib_suffix'() -> ('Idris.Idris2.Core.Core':'un--cond'([{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V2, V3)) end end}, ('Idris.Idris2.System.Info':'un--os'()), [<<"windows"/utf8>> | [<<"mingw32"/utf8>> | [<<"cygwin32"/utf8>> | []]]])) end, fun () -> <<"dll"/utf8>> end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.System.Info':'un--os'()), <<"darwin"/utf8>>)) end, fun () -> <<"dylib"/utf8>> end} | []]], <<"so"/utf8>>)).
'un--dumpVMCode'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('nested--8948-1524--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--dumpLifted'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('nested--8780-1366--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--dumpCases'(V0, V1, V2, V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('nested--8613-1215--in--un--dumpCase'(V2, V1, V0, V4, V5)) end end, V2, [], V3))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V1, ('Idris.Idris2.Data.String':'un--fastAppend'(V8))))(V3))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E2} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Right', E4} -> (fun (V40) -> case V40 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V1, V41}, V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpANF'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('nested--8864-1445--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--copyLib'(V0, V1) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V3)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V5 = begin (V4 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V3, V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of {'Idris.Prelude.Types.Right', E4} -> (fun (V8) -> begin (V10 = begin (V9 = (('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V2, V8))(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', 0} end(E7)); {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V2, V14}, V1)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Right', 0} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cgExecuteExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V6))), begin (V8 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V7, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V1 of {'Idris.Compiler.Common.MkCG', E4, E5, E6} -> (fun (V11, V12, V13) -> ((((V12(V0))(V7))(V2))(V3)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgCompileLibrary'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V7))), begin (V9 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V7))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V8, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"Code generation overall"/utf8>> end, case V1 of {'Idris.Compiler.Common.MkCG', E6, E7, E8} -> (fun (V16, V17, V18) -> (((((V18(V0))(V8))(V9))(V2))(V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgCompileExpr'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V7))), begin (V9 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V7))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V8, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'(V0, fun () -> <<"+ Code generation overall"/utf8>> end, case V1 of {'Idris.Compiler.Common.MkCG', E6, E7, E8} -> (fun (V16, V17, V18) -> (((((V16(V0))(V8))(V9))(V2))(V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--castInt'(V0, V1, V2, V3) -> ('case--castInt-4140'(V3, V2, V1, V0, {'Idris.Builtin.MkPair', {'Idris.Builtin.MkPair', V1, ('Idris.Idris2.Core.TT':'un--intKind'(V1))}, {'Idris.Builtin.MkPair', V2, ('Idris.Idris2.Core.TT':'un--intKind'(V2))}})).
