-module('Idris.Idris2.Compiler.Common').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--pathLookup-3760'/3,
  'case--getExtraRuntime,readPath-3662'/3,
  'case--case block in getExtraRuntime,getArg-3614'/5,
  'case--getExtraRuntime,getArg-3596'/3,
  'case--case block in case block in copyLib-3542'/5,
  'case--case block in copyLib-3524'/3,
  'case--copyLib-3501'/3,
  'case--case block in locate-3391'/4,
  'case--locate-3368'/3,
  'case--parseCC-3278'/2,
  'case--parseCC,getOpts-3241'/3,
  'case--exists-3194'/2,
  'case--case block in getExportedCompileData-3051'/28,
  'case--case block in case block in getExportedCompileData-2920'/27,
  'case--case block in getExportedCompileData-2852'/27,
  'case--case block in getExportedCompileData-2728'/25,
  'case--getExportedCompileData-2623'/21,
  'case--exportedName-2404'/3,
  'case--case block in getCompileData-2232'/26,
  'case--case block in case block in getCompileData-2111'/25,
  'case--case block in getCompileData-2048'/25,
  'case--case block in getCompileData-1934'/23,
  'case--getCompileData-1783'/19,
  'case--nonErased-1586'/4,
  'case--dumpVMCode-1543'/4,
  'case--dumpANF-1468'/4,
  'case--dumpLifted-1393'/4,
  'case--dumpCases-1314'/5,
  'case--case block in dumpCases,dumpCase-1247'/7,
  'case--dumpCases,dumpCase-1220'/5,
  'case--case block in getNamedDef-1113'/6,
  'case--getNamedDef-1091'/4,
  'case--case block in case block in case block in getAllDesc-947'/15,
  'case--case block in case block in getAllDesc-909'/11,
  'case--case block in getAllDesc-862'/8,
  'case--getAllDesc-840'/7,
  'case--max-550'/3,
  'case--min-536'/3,
  'nested--11128-585--in--un--tag'/3,
  'nested--14531-3585--in--un--readPath'/3,
  'nested--14531-3584--in--un--paths'/1,
  'nested--14148-3226--in--un--getOpts'/2,
  'nested--14531-3583--in--un--getArg'/2,
  'nested--12222-1495--in--un--fullShow'/3,
  'nested--12143-1420--in--un--fullShow'/3,
  'nested--12064-1345--in--un--fullShow'/3,
  'nested--11903-1199--in--un--fullShow'/4,
  'nested--12222-1496--in--un--dumpDef'/3,
  'nested--12143-1421--in--un--dumpDef'/3,
  'nested--12064-1346--in--un--dumpDef'/3,
  'nested--11903-1200--in--un--dumpCase'/5,
  'dn--un--min_Ord_UsePhase'/2,
  'dn--un--max_Ord_UsePhase'/2,
  'dn--un--compare_Ord_UsePhase'/2,
  'dn--un--__Impl_Ord_UsePhase'/0,
  'dn--un--__Impl_Eq_UsePhase'/0,
  'dn--un-->_Ord_UsePhase'/2,
  'dn--un-->=_Ord_UsePhase'/2,
  'dn--un--==_Eq_UsePhase'/2,
  'dn--un--<_Ord_UsePhase'/2,
  'dn--un--<=_Ord_UsePhase'/2,
  'dn--un--/=_Eq_UsePhase'/2,
  'un--warnIfHole'/2,
  'un--skipUnusedNames'/1,
  'un--replaceEntry'/2,
  'un--pathLookup'/2,
  'un--parseCC'/1,
  'un--nonErased'/3,
  'un--natHackNames'/0,
  'un--locate'/2,
  'un--isExported'/1,
  'un--getNamedDef'/3,
  'un--getMinimalDef'/1,
  'un--getExtraRuntime'/2,
  'un--getExportedCompileData'/6,
  'un--getCompileData'/5,
  'un--getAllDesc'/4,
  'un--exportedName'/1,
  'un--exists'/2,
  'un--dylib_suffix'/0,
  'un--dumpVMCode'/2,
  'un--dumpLifted'/2,
  'un--dumpCases'/4,
  'un--dumpANF'/2,
  'un--copyLib'/1,
  'un--cgExecuteExpr'/4,
  'un--cgCompileLibrary'/5,
  'un--cgCompileExpr'/5
]).
'case--pathLookup-3760'(V0, V1, V2) -> case V2 of 0 -> [<<".exe"/utf8>> | [<<".cmd"/utf8>> | [<<".bat"/utf8>> | [<<""/utf8>> | []]]]]; 1 -> [<<""/utf8>> | []]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getExtraRuntime,readPath-3662'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', V3} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V5}, V6)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getExtraRuntime,getArg-3614'(V0, V1, V2, V3, V4) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.String':'un--trim'(('Idris.Idris2.Prelude.Types':'un--substr'((1 + 0), ('Idris.Idris2.Prelude.Types.String':'un--length'(V3)), V3))))}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getExtraRuntime,getArg-3596'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('case--case block in getExtraRuntime,getArg-3614'(V0, V1, V3, V4, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Data.String':'un--trim'(V3)), <<"extraRuntime"/utf8>>)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in copyLib-3542'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V7}, V8)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in copyLib-3524'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = begin (V5 = (('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V0, V3))(V4))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V10}, V4)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--copyLib-3501'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V4) -> begin (V6 = begin (V5 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V1, V4))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V11 = begin (V10 = (('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V0, V9))(V4))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V15}, V4)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in locate-3391'(V0, V1, V2, V3) -> case V3 of 0 -> V2; 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('un--dylib_suffix'()))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--locate-3368'(V0, V1, V2) -> case V2 of [] -> <<""/utf8>>; [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> ('case--case block in locate-3391'(V0, V1, V3, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V7, V8)) end end}, $., ('Idris.Idris2.Prelude.Types':'un--unpack'(V3)))))); [E2 | E3] -> (fun (V9, V10) -> ('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('un--dylib_suffix'()), <<"dll"/utf8>>)) end, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<".dll"/utf8>>)))))) end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('un--dylib_suffix'()), <<"dylib"/utf8>>)) end, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<".dylib"/utf8>>)))))) end} | []]], ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--dylib_suffix'()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"."/utf8>>, V9)))))))))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseCC-3278'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of <<""/utf8>> -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V2)), []}}; _ -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.String':'un--trim'(V2)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Data.String':'un--trim'(V4)) end, ('nested--14148-3226--in--un--getOpts'(V0, ('Idris.Idris2.Data.String':'un--strTail'(V3))))))}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parseCC,getOpts-3241'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of <<""/utf8>> -> [V3 | []]; _ -> [V3 | ('nested--14148-3226--in--un--getOpts'(V0, ('Idris.Idris2.Data.String':'un--strTail'(V4))))] end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--exists-3194'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, ('Idris.Idris2.Erlang.System.File':'un--closeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> V34 end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), begin (V42 = (V39(V40))), (V41(V42)) end end end end end end end}, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V45(V47))), ((V46(V48))(V47)) end end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V50(V51))), (V52(V51)) end end end end}, fun (V53) -> fun (V54) -> V54 end end}, V2)), fun () -> fun (V55) -> 0 end end)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V56) -> fun (V57) -> 1 end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getExportedCompileData-3051'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V27 of 0 -> fun (V28) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V4, fun () -> <<"Get VM Code"/utf8>> end, fun (V29) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V26))} end, V28)) end; 1 -> fun (V30) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getExportedCompileData-2920'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V27, V28) -> fun (V29) -> begin (V30 = (('Idris.Idris2.Compiler.ANF':'un--toANF'(V28))(V29))), case V30 of {'Idris.Prelude.Types.Left', E2} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V27, V32}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getExportedCompileData-2852'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> case V26 of 0 -> fun (V27) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V4, fun () -> <<"Get ANF"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V29, V30) -> fun (V31) -> begin (V32 = (('Idris.Idris2.Compiler.ANF':'un--toANF'(V30))(V31))), case V32 of {'Idris.Prelude.Types.Left', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V29, V34}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V25, [])), V27)) end; 1 -> fun (V35) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getExportedCompileData-2728'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> fun (V25) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V4, fun () -> <<"Lambda lift"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V26) -> fun (V27) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V4, V3, V26, V27)) end end, V17, [])), V25)) end; 1 -> fun (V28) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getExportedCompileData-2623'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V21, V22) -> fun (V23) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> fun (V25) -> ('un--getNamedDef'(V4, V24, V25)) end end, V17, []))(V23))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V30 = begin (V29 = {'Idris.Builtin.MkPair', V21, V22}), (('case--case block in getExportedCompileData-2728'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V22, V29, V28, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.Lifted'}))))(V23)) end), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> begin (V47 = [{'Idris.Builtin.MkPair', V19, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V21}} | ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V22, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V44)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V45, V46)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V32))))]), begin (V49 = begin (V48 = {'Idris.Builtin.MkPair', V21, V22}), (('case--case block in getExportedCompileData-2852'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V22, V48, V28, V32, V47, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.ANF'}))))(V23)) end), case V49 of {'Idris.Prelude.Types.Left', E6} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V51) -> begin (V53 = begin (V52 = {'Idris.Builtin.MkPair', V21, V22}), (('case--case block in getExportedCompileData-3051'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V21, V22, V52, V28, V32, V47, V51, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.VMCode'}))))(V23)) end), case V53 of {'Idris.Prelude.Types.Left', E8} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V18, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V56) -> V56 end, V28)), V47, V51, V55}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--exportedName-2404'(V0, V1, V2) -> case V2 of 0 -> {'Idris.Prelude.Types.Just', V0}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getCompileData-2232'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of 0 -> fun (V26) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V3, fun () -> <<"Get VM Code"/utf8>> end, fun (V27) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.VMCode':'un--allDefs'(V24))} end, V26)) end; 1 -> fun (V28) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getCompileData-2111'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V25, V26) -> fun (V27) -> begin (V28 = (('Idris.Idris2.Compiler.ANF':'un--toANF'(V26))(V27))), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V25, V30}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getCompileData-2048'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V24 of 0 -> fun (V25) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V3, fun () -> <<"Get ANF"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V27, V28) -> fun (V29) -> begin (V30 = (('Idris.Idris2.Compiler.ANF':'un--toANF'(V28))(V29))), case V30 of {'Idris.Prelude.Types.Left', E2} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V27, V32}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V23, [])), V25)) end; 1 -> fun (V33) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getCompileData-1934'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V3, fun () -> <<"Lambda lift"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> fun (V25) -> ('Idris.Idris2.Compiler.LambdaLift':'un--lambdaLift'(V3, V2, V24, V25)) end end, V15, [])), V23)) end; 1 -> fun (V26) -> {'Idris.Prelude.Types.Right', []} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getCompileData-1783'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V19, V20) -> fun (V21) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V22) -> fun (V23) -> ('un--getNamedDef'(V3, V22, V23)) end end, V15, []))(V21))), case V24 of {'Idris.Prelude.Types.Left', E2} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V26) -> begin (V28 = begin (V27 = {'Idris.Builtin.MkPair', V19, V20}), (('case--case block in getCompileData-1934'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V20, V27, V26, ('dn--un-->=_Ord_UsePhase'(V1, {'Idris.Compiler.Common.Lifted'}))))(V21)) end), case V28 of {'Idris.Prelude.Types.Left', E4} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V30) -> begin (V45 = [{'Idris.Builtin.MkPair', V17, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V19}} | ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V20, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V42)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V43, V44)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V30))))]), begin (V47 = begin (V46 = {'Idris.Builtin.MkPair', V19, V20}), (('case--case block in getCompileData-2048'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V20, V46, V26, V30, V45, ('dn--un-->=_Ord_UsePhase'(V1, {'Idris.Compiler.Common.ANF'}))))(V21)) end), case V47 of {'Idris.Prelude.Types.Left', E6} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V49) -> begin (V51 = begin (V50 = {'Idris.Builtin.MkPair', V19, V20}), (('case--case block in getCompileData-2232'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V19, V20, V50, V26, V30, V45, V49, ('dn--un-->=_Ord_UsePhase'(V1, {'Idris.Compiler.Common.VMCode'}))))(V21)) end), case V51 of {'Idris.Prelude.Types.Left', E8} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V53) -> begin (V55 = begin (V54 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V54} end), case V55 of {'Idris.Prelude.Types.Left', E10} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V57) -> begin (V107 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V59) -> fun (V60) -> begin (V89 = begin (V88 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V63, V64, V65)) end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> V67 end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V71(V73))), begin (V75 = (V72(V73))), (V74(V75)) end end end end end end end}, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), ((V79(V81))(V80)) end end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V83(V84))), (V85(V84)) end end end end}, fun (V86) -> fun (V87) -> V87 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping case trees to "/utf8>>, V59))))(V60))), {'Idris.Prelude.Types.Right', V88} end), case V89 of {'Idris.Prelude.Types.Left', E12} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V91) -> ('un--dumpCases'(V57, V59, V15, V60)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V5 of {'Idris.Core.Options.MkSessionOpts', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V103 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V107 of {'Idris.Prelude.Types.Left', E29} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V109) -> begin (V159 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V110) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V111) -> fun (V112) -> begin (V141 = begin (V140 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V115, V116, V117)) end end end end end, fun (V118) -> fun (V119) -> fun (V120) -> V119 end end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V123(V125))), begin (V127 = (V124(V125))), (V126(V127)) end end end end end end end}, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V130(V132))), ((V131(V133))(V132)) end end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> begin (V137 = (V135(V136))), (V137(V136)) end end end end}, fun (V138) -> fun (V139) -> V139 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping lambda lifted defs to "/utf8>>, V111))))(V112))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E31} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V143) -> (('un--dumpLifted'(V111, V45))(V112)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V5 of {'Idris.Core.Options.MkSessionOpts', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158) -> V156 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V159 of {'Idris.Prelude.Types.Left', E48} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V161) -> begin (V211 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V162) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V163) -> fun (V164) -> begin (V193 = begin (V192 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V167, V168, V169)) end end end end end, fun (V170) -> fun (V171) -> fun (V172) -> V171 end end end, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> begin (V178 = (V175(V177))), begin (V179 = (V176(V177))), (V178(V179)) end end end end end end end}, fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> begin (V185 = (V182(V184))), ((V183(V185))(V184)) end end end end end end, fun (V186) -> fun (V187) -> fun (V188) -> begin (V189 = (V187(V188))), (V189(V188)) end end end end}, fun (V190) -> fun (V191) -> V191 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping ANF defs to "/utf8>>, V163))))(V164))), {'Idris.Prelude.Types.Right', V192} end), case V193 of {'Idris.Prelude.Types.Left', E50} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V195) -> (('un--dumpANF'(V163, V49))(V164)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V5 of {'Idris.Core.Options.MkSessionOpts', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210) -> V209 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V211 of {'Idris.Prelude.Types.Left', E67} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V213) -> begin (V263 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V214) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V215) -> fun (V216) -> begin (V245 = begin (V244 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V219, V220, V221)) end end end end end, fun (V222) -> fun (V223) -> fun (V224) -> V223 end end end, fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> begin (V230 = (V227(V229))), begin (V231 = (V228(V229))), (V230(V231)) end end end end end end end}, fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> begin (V237 = (V234(V236))), ((V235(V237))(V236)) end end end end end end, fun (V238) -> fun (V239) -> fun (V240) -> begin (V241 = (V239(V240))), (V241(V240)) end end end end}, fun (V242) -> fun (V243) -> V243 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping VM defs to "/utf8>>, V215))))(V216))), {'Idris.Prelude.Types.Right', V244} end), case V245 of {'Idris.Prelude.Types.Left', E69} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V247) -> (('un--dumpVMCode'(V215, V53))(V216)) end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V5 of {'Idris.Core.Options.MkSessionOpts', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262) -> V262 end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V263 of {'Idris.Prelude.Types.Left', E86} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V265) -> begin (V267 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V266) -> ('un--replaceEntry'(V3, V266)) end, V12))(V21))), case V267 of {'Idris.Prelude.Types.Left', E88} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V269) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V16, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V270) -> V270 end, V26)), V45, V49, V53}} end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nonErased-1586'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V13 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V27, V28)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V29, V30)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpVMCode-1543'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V6}, V7)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpANF-1468'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V6}, V7)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpLifted-1393'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V6}, V7)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpCases-1314'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V7}, V8)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in dumpCases,dumpCase-1247'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--11903-1199--in--un--fullShow'(V0, V1, V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedDef'(V8)), <<"\x{a}"/utf8>>))))))} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dumpCases,dumpCase-1220'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in dumpCases,dumpCase-1247'(V0, V1, V2, V3, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V27 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getNamedDef-1113'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V9 = (('un--warnIfHole'(V0, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V12 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7}}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getNamedDef-1091'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> begin (V6 = {'Idris.Prelude.Types.Just', V5}), ('case--case block in getNamedDef-1113'(V0, V1, V2, V5, V6, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V26 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in getAllDesc-947'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> fun (V15) -> begin (V17 = begin (V16 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V4, V0, {'Idris.Builtin.MkPair', V0, V11}))(V15))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V10))), begin (V27 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V5, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V25, V26)) end end}, V21, V22)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V20)), []))(V15))), case V27 of {'Idris.Prelude.Types.Left', E2} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V29) -> (('un--getAllDesc'(V5, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V29, V2)), V4, V3))(V15)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('un--getAllDesc'(V5, V2, V4, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getAllDesc-909'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> begin (V18 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V17) -> ('Idris.Idris2.Core.Context':'un--addDef'(V5, V1, V11, V17)) end, V13))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V11))), begin (V22 = {'Idris.Builtin.MkPair', V11, V12}), (('case--case block in case block in case block in getAllDesc-947'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, V22, V21, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V11 of {'Idris.Core.Context.MkGlobalDef', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V30 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V44) -> fun (V45) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V44, V45)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V46) -> fun (V47) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V46, V47)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))))(V13)) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getAllDesc-862'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--getAllDesc'(V5, V2, V4, V3)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--getMinimalDef'(V10))(V11))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> begin (V15 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V9, V10}}), case V14 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V16, V17) -> begin (V22 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V18) -> case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V21) -> ('Idris.Idris2.Core.Context':'un--addDef'(V5, V1, V16, V21)) end, V11))), case V22 of {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V16))), begin (V26 = {'Idris.Builtin.MkPair', V16, V17}), (('case--case block in case block in case block in getAllDesc-947'(V0, V1, V2, V3, V4, V5, V6, V9, V10, V15, V16, V17, V26, V25, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V16 of {'Idris.Core.Context.MkGlobalDef', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V34 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V48) -> fun (V49) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V48, V49)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V50) -> fun (V51) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V50, V51)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))))(V11)) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getAllDesc-840'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V1, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V35 of {'Idris.Prelude.Types.Left', E27} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V37) -> begin (V38 = {'Idris.Prelude.Types.Nothing'}), case V37 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('un--getAllDesc'(V5, V2, V4, V3))(V7)) end()); {'Idris.Prelude.Types.Just', E29} -> (fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E30, E31} -> (fun (V40, V41) -> begin (V42 = (('un--getMinimalDef'(V41))(V7))), case V42 of {'Idris.Prelude.Types.Left', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V44) -> begin (V45 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V40, V41}}), case V44 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V46, V47) -> begin (V52 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V48) -> case V48 of {'Idris.Prelude.Types.Left', E36} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V51) -> ('Idris.Idris2.Core.Context':'un--addDef'(V5, V1, V46, V51)) end, V7))), case V52 of {'Idris.Prelude.Types.Left', E38} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V54) -> begin (V55 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V46))), begin (V56 = {'Idris.Builtin.MkPair', V46, V47}), (('case--case block in case block in case block in getAllDesc-947'(V0, V1, V2, V3, V4, V5, V38, V40, V41, V45, V46, V47, V56, V55, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V46 of {'Idris.Core.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V64 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V78) -> fun (V79) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V78, V79)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V80) -> fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V80, V81)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))))(V7)) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E61} -> (fun (V82) -> ('un--getAllDesc'(V5, V2, V4, V3)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--max-550'(V0, V1, V2) -> case V2 of 0 -> V1; 1 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-536'(V0, V1, V2) -> case V2 of 0 -> V1; 1 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11128-585--in--un--tag'(V0, V1, V2) -> case V2 of {'Idris.Compiler.Common.Cases'} -> (fun () -> 0 end()); {'Idris.Compiler.Common.Lifted'} -> (fun () -> 0 end()); {'Idris.Compiler.Common.ANF'} -> (fun () -> 0 end()); {'Idris.Compiler.Common.VMCode'} -> (fun () -> 0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14531-3585--in--un--readPath'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--readFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Right', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Right', V34} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V35}, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--14531-3584--in--un--paths'(V0) -> ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V1) -> fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)) end end, fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V3, V4)) end end}, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V5) -> ('nested--14531-3583--in--un--getArg'(V0, V5)) end, ('Idris.Idris2.Data.List':'un--reverse'('erased', V0)))))).
'nested--14148-3226--in--un--getOpts'(V0, V1) -> case V1 of <<""/utf8>> -> []; _ -> ('case--parseCC,getOpts-3241'(V0, V1, ('Idris.Idris2.Data.String':'un--span'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V2, $,)) end, V1)))) end.
'nested--14531-3583--in--un--getArg'(V0, V1) -> ('case--getExtraRuntime,getArg-3596'(V0, V1, ('Idris.Idris2.Data.String':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, $=)) end, V1)))).
'nested--12222-1495--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--12143-1420--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--12064-1345--in--un--fullShow'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)) end.
'nested--11903-1199--in--un--fullShow'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.DN', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3)) end.
'nested--12222-1496--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--12222-1495--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.VMCode':'dn--un--show_Show_VMDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12143-1421--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--12143-1420--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.ANF':'dn--un--show_Show_ANFDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12064-1346--in--un--dumpDef'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--12064-1345--in--un--fullShow'(V0, V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Compiler.LambdaLift':'dn--un--show_Show_LiftedDef'(V4)), <<"\x{a}"/utf8>>)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11903-1200--in--un--dumpCase'(V0, V1, V2, V3, V4) -> begin (V32 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V32 of {'Idris.Prelude.Types.Left', E27} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V34) -> case V34 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end()); {'Idris.Prelude.Types.Just', E29} -> (fun (V35) -> begin (V36 = {'Idris.Prelude.Types.Just', V35}), (('case--case block in dumpCases,dumpCase-1247'(V0, V1, V2, V3, V35, V36, case V35 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V56 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--min_Ord_UsePhase'(V0, V1) -> ('case--min-536'(V1, V0, ('dn--un--<_Ord_UsePhase'(V0, V1)))).
'dn--un--max_Ord_UsePhase'(V0, V1) -> ('case--max-550'(V1, V0, ('dn--un-->_Ord_UsePhase'(V0, V1)))).
'dn--un--compare_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(('nested--11128-585--in--un--tag'(V1, V0, V0)), ('nested--11128-585--in--un--tag'(V1, V0, V1)))).
'dn--un--__Impl_Ord_UsePhase'() -> {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UsePhase'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UsePhase'(V2, V3)) end end}, fun (V4) -> fun (V5) -> ('dn--un--compare_Ord_UsePhase'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('dn--un--<_Ord_UsePhase'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('dn--un-->_Ord_UsePhase'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--<=_Ord_UsePhase'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un-->=_Ord_UsePhase'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('dn--un--max_Ord_UsePhase'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--min_Ord_UsePhase'(V16, V17)) end end}.
'dn--un--__Impl_Eq_UsePhase'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_UsePhase'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_UsePhase'(V2, V3)) end end}.
'dn--un-->_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 2)).
'dn--un-->=_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 0)).
'dn--un--==_Eq_UsePhase'(V0, V1) -> case V0 of {'Idris.Compiler.Common.Cases'} -> (fun () -> case V1 of {'Idris.Compiler.Common.Cases'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Compiler.Common.Lifted'} -> (fun () -> case V1 of {'Idris.Compiler.Common.Lifted'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Compiler.Common.ANF'} -> (fun () -> case V1 of {'Idris.Compiler.Common.ANF'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Compiler.Common.VMCode'} -> (fun () -> case V1 of {'Idris.Compiler.Common.VMCode'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--<_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 0)).
'dn--un--<=_Ord_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_UsePhase'(V0, V1)), 2)).
'dn--un--/=_Eq_UsePhase'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_UsePhase'(V0, V1)))).
'un--warnIfHole'(V0, V1) -> case V1 of {'Idris.Core.CompileExpr.MkNmError', E0} -> (fun (V2) -> fun (V3) -> begin (V31 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, fun (V29) -> fun (V30) -> V30 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Warning: compiling hole "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0))))))(V3))), {'Idris.Prelude.Types.Right', V31} end end end(E0)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--skipUnusedNames'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('un--skipUnusedNames'(V2)) end(E0, E1)); {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> 1 end(E2, E3)); {'Idris.Core.Name.Resolved', E4} -> (fun (V5) -> 1 end(E4)); _ -> 0 end.
'un--replaceEntry'(V0, V1) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('Idris.Idris2.Core.Context':'un--addContextEntry'(V0, {'Idris.Core.Name.Resolved', V2}, V5, V10)) end, V6)) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pathLookup'(V0, V1) -> begin (V29 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, <<"PATH"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), begin (V30 = ('case--pathLookup-3760'(V0, V29, ('Idris.Idris2.System.Info':'un--isWindows'())))), begin (V32 = ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Data.String':'un--split'(fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V31, ('Idris.Idris2.Libraries.Utils.Path':'un--pathSeparator'()))) end, ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> <<"/usr/bin:/usr/local/bin"/utf8>> end, V29))))))), begin (V36 = ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'('erased', 'erased', V32, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'('erased', 'erased', V0, fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_List'('erased', 'erased', V30, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', ('Idris.Idris2.Prelude.Types.String':'un--++'(V33, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V34, V35)))))))) end)) end)) end))), (('Idris.Idris2.Erlang.System.File':'un--firstExists'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, V36))(V1)) end end end end.
'un--parseCC'(V0) -> case V0 of <<""/utf8>> -> {'Idris.Prelude.Types.Nothing'}; _ -> ('case--parseCC-3278'(V0, ('Idris.Idris2.Data.String':'un--span'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $:)) end, V0)))) end.
'un--nonErased'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V34 of {'Idris.Prelude.Types.Left', E29} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Just', E31} -> (fun (V37) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V37 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V45 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V59) -> fun (V60) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V59, V60)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V61, V62)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))} end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--natHackNames'() -> [{'Idris.Core.Name.UN', <<"prim__add_Integer"/utf8>>} | [{'Idris.Core.Name.UN', <<"prim__sub_Integer"/utf8>>} | [{'Idris.Core.Name.UN', <<"prim__mul_Integer"/utf8>>} | [{'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Idris.Core.Name.UN', <<"prim__integerToNat"/utf8>>}} | []]]]].
'un--locate'(V0, V1) -> begin (V2 = ('case--locate-3368'(V1, V0, ('Idris.Idris2.Data.String':'un--words'(V1))))), fun (V3) -> begin (V7 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V4) -> ('Idris.Idris2.Core.Directory':'un--findLibraryFile'(V0, V2, V4)) end, fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', V2} end end, V3))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, V9}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--isExported'(V0) -> case V0 of {'Idris.Core.TT.Public'} -> (fun () -> 0 end()); {'Idris.Core.TT.Export'} -> (fun () -> 0 end()); {'Idris.Core.TT.Private'} -> (fun () -> 1 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNamedDef'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V34 of {'Idris.Prelude.Types.Left', E29} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E31} -> (fun (V37) -> begin (V38 = {'Idris.Prelude.Types.Just', V37}), (('case--case block in getNamedDef-1113'(V1, V0, V6, V37, V38, case V37 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getMinimalDef'(V0) -> case V0 of {'Idris.Core.Context.Decoded', E0} -> (fun (V1) -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V1, {'Idris.Prelude.Types.Nothing'}}} end end(E0)); {'Idris.Core.Context.Coded', E1} -> (fun (V3) -> fun (V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Libraries.Utils.Binary.Bin'}, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V12 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(Maybe $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_CDef'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_CDef'(V10, V11)) end end}, V7, V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V60 = ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(Maybe $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V18) -> fun (V19) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V22, V23)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V24) -> fun (V25) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V26, V27)) end end}}, V18, V19)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V32, V33)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V34) -> fun (V35) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V36, V37)) end end}}, V28, V29)) end end}, V15, V16, V17)) end end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(List $a)'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V40) -> fun (V41) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V44, V45)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V46) -> fun (V47) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V48, V49)) end end}}, V40, V41)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.TTC':'dn--un--toBuf_TTC_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V54, V55)) end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V56) -> fun (V57) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_Bool'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_Bool'(V58, V59)) end end}}, V50, V51)) end end}, V38, V39)) end end}, V7, V4))), case V60 of {'Idris.Prelude.Types.Left', E6} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V62) -> begin (V64 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V63) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--fromList'('erased', V63)) end, V62))), begin (V65 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_FC'(V7, V4))), case V65 of {'Idris.Prelude.Types.Left', E8} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V67) -> begin (V68 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_RigCount'(V7, V4))), case V68 of {'Idris.Prelude.Types.Left', E10} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V70) -> begin (V71 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_Name'(V7, V4))), case V71 of {'Idris.Prelude.Types.Left', E12} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V73) -> begin (V74 = {'Idris.Core.Context.MkGlobalDef', V67, V73, {'Idris.Core.TT.Erased', V67, 1}, [], [], [], [], V70, [], {'Idris.Core.TT.Public'}, {'Idris.Core.TT.MkTotality', {'Idris.Core.TT.Unchecked'}, {'Idris.Core.TT.IsCovering'}}, [], {'Idris.Prelude.Types.Nothing'}, V64, 1, 1, 0, {'Idris.Core.Context.None'}, V14, {'Idris.Prelude.Types.Nothing'}, []}), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V74, {'Idris.Prelude.Types.Just', V3}}} end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getExtraRuntime'(V0, V1) -> begin (V4 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V2) -> fun (V3) -> ('nested--14531-3585--in--un--readPath'(V0, V2, V3)) end end, ('nested--14531-3584--in--un--paths'(V0)), []))(V1))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V18)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V19, V20)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}))(('Idris.Idris2.Data.List':'un--intersperse'('erased', <<"\x{a}"/utf8>>, V6))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getExportedCompileData'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0, V5))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V17 = begin (V16 = ('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'('erased', V15, V5))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V48 = ('Idris.Idris2.Data.List':'un--filter'('erased', V3, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V20) -> ('un--skipUnusedNames'(V20)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--getResolvedAs'(case V9 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V21 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))), begin (V81 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V49) -> fun (V50) -> begin (V78 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V49, case V9 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V51 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V50))), case V78 of {'Idris.Prelude.Types.Left', E62} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V49, V80}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V48, []))(V5))), case V81 of {'Idris.Prelude.Types.Left', E64} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V83) -> begin (V85 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V84) -> ('un--exportedName'(V84)) end, V83))), begin (V92 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V88, V89)) end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V90, V91)) end end}, V86, V87)) end end, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('un--natHackNames'()), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V85, V4)))), []))(V5))), case V92 of {'Idris.Prelude.Types.Left', E66} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V94) -> begin (V95 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Get names"/utf8>> end, ('un--getAllDesc'(V0, V94, V19, V9)), V5))), case V95 of {'Idris.Prelude.Types.Left', E68} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V97) -> begin (V99 = begin (V98 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'('erased', V19))(V5))), {'Idris.Prelude.Types.Right', V98} end), case V99 of {'Idris.Prelude.Types.Left', E70} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V101) -> begin (V103 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V102) -> V102 end, V101))), begin (V105 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V104) -> {'Idris.Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V104))} end, V103))), begin (V112 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V108, V109)) end end, fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V110, V111)) end end}, V106, V107)) end end, V105, []))(V5))), case V112 of {'Idris.Prelude.Types.Left', E72} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V114) -> begin (V122 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V115) -> fun (V116) -> ('un--nonErased'(V0, V115, V116)) end end, ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V117, V118)) end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V119, V120)) end end}, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V121) -> ('un--skipUnusedNames'(V121)) end, V114))))))(V5))), case V122 of {'Idris.Prelude.Types.Left', E74} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V124) -> begin (V127 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Merge lambda"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V125) -> fun (V126) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V125, V126)) end end, V124)), V5))), case V127 of {'Idris.Prelude.Types.Left', E76} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V129) -> begin (V132 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Fix arity"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V130) -> fun (V131) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V130, V131)) end end, V124)), V5))), case V132 of {'Idris.Prelude.Types.Left', E78} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V134) -> begin (V137 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Forget names"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V135) -> fun (V136) -> ('Idris.Idris2.Compiler.CompileExpr':'un--mkForgetDef'(V0, V135, V136)) end end, V124)), V5))), case V137 of {'Idris.Prelude.Types.Left', E80} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V139) -> begin (V140 = (('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, {'Idris.Core.CompileExpr.CErased', {'Idris.Core.FC.EmptyFC'}}))(V5))), case V140 of {'Idris.Prelude.Types.Left', E82} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V142) -> begin (V143 = {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}), begin (V144 = ('Idris.Idris2.Compiler.LambdaLift':'un--liftBody'([], V1, V143, V142, V5))), case V144 of {'Idris.Prelude.Types.Left', E84} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V146) -> case V146 of {'Idris.Builtin.MkPair', E86, E87} -> (fun (V147, V148) -> begin (V151 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V149) -> fun (V150) -> ('un--getNamedDef'(V0, V149, V150)) end end, V124, []))(V5))), case V151 of {'Idris.Prelude.Types.Left', E88} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V153) -> begin (V155 = begin (V154 = {'Idris.Builtin.MkPair', V147, V148}), (('case--case block in getExportedCompileData-2728'(V4, V3, V2, V1, V0, V9, V12, V15, V19, V48, V83, V85, V94, V101, V103, V105, V114, V124, V142, V143, V147, V148, V154, V153, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.Lifted'}))))(V5)) end), case V155 of {'Idris.Prelude.Types.Left', E90} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V157) -> begin (V172 = [{'Idris.Builtin.MkPair', V143, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V147}} | ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V148, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V160, V161, V162)) end end end end end, fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V165, V166, V167)) end end end end end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V169)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V170) -> fun (V171) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V170, V171)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V157))))]), begin (V174 = begin (V173 = {'Idris.Builtin.MkPair', V147, V148}), (('case--case block in getExportedCompileData-2852'(V4, V3, V2, V1, V0, V9, V12, V15, V19, V48, V83, V85, V94, V101, V103, V105, V114, V124, V142, V143, V147, V148, V173, V153, V157, V172, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.ANF'}))))(V5)) end), case V174 of {'Idris.Prelude.Types.Left', E92} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V176) -> begin (V178 = begin (V177 = {'Idris.Builtin.MkPair', V147, V148}), (('case--case block in getExportedCompileData-3051'(V4, V3, V2, V1, V0, V9, V12, V15, V19, V48, V83, V85, V94, V101, V103, V105, V114, V124, V142, V143, V147, V148, V177, V153, V157, V172, V176, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.VMCode'}))))(V5)) end), case V178 of {'Idris.Prelude.Types.Left', E94} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V180) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V142, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V181) -> V181 end, V153)), V172, V176, V180}} end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getCompileData'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.TT':'un--getRefs'('erased', {'Idris.Core.Name.Resolved', ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg_Int'(1))}, V3))), begin (V17 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V15, V16)) end end}, V3, V4))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V26 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V24, V25)) end end}, V20, V21)) end end, ('un--natHackNames'()), []))(V4))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Core.Context':'un--getNextEntry'(V0, V4))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> begin (V33 = begin (V32 = ('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'('erased', V31, V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Get names"/utf8>> end, ('un--getAllDesc'(V0, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V28, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V12)))), V35, V8)), V4))), case V36 of {'Idris.Prelude.Types.Left', E12} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V38) -> begin (V40 = begin (V39 = (('Idris.Idris2.Erlang.Data.IOArray':'un--toList'('erased', V35))(V4))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E14} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V42) -> begin (V44 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V43) -> V43 end, V42))), begin (V46 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V45) -> {'Idris.Core.Name.Resolved', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V45))} end, V44))), begin (V53 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V51, V52)) end end}, V47, V48)) end end, V46, []))(V4))), case V53 of {'Idris.Prelude.Types.Left', E16} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V55) -> begin (V58 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V56) -> fun (V57) -> ('un--nonErased'(V0, V56, V57)) end end, V55))(V4))), case V58 of {'Idris.Prelude.Types.Left', E18} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V60) -> begin (V63 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Merge lambda"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V61) -> fun (V62) -> ('Idris.Idris2.Compiler.Inline':'un--mergeLamDef'(V0, V61, V62)) end end, V60)), V4))), case V63 of {'Idris.Prelude.Types.Left', E20} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V65) -> begin (V68 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Fix arity"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V66) -> fun (V67) -> ('Idris.Idris2.Compiler.Inline':'un--fixArityDef'(V0, V66, V67)) end end, V60)), V4))), case V68 of {'Idris.Prelude.Types.Left', E22} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V70) -> begin (V73 = ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Forget names"/utf8>> end, ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V71) -> fun (V72) -> ('Idris.Idris2.Compiler.CompileExpr':'un--mkForgetDef'(V0, V71, V72)) end end, V60)), V4))), case V73 of {'Idris.Prelude.Types.Left', E24} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V75) -> begin (V79 = begin (V76 = ('Idris.Idris2.Compiler.CompileExpr':'un--compileExp'(V0, V19, V4))), case V76 of {'Idris.Prelude.Types.Left', E26} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V78) -> (('Idris.Idris2.Compiler.Inline':'un--fixArityExp'([], V0, V78))(V4)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V79 of {'Idris.Prelude.Types.Left', E28} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V81) -> begin (V82 = {'Idris.Core.Name.MN', <<"__mainExpression"/utf8>>, 0}), begin (V83 = ('Idris.Idris2.Compiler.LambdaLift':'un--liftBody'([], V1, V82, V81, V4))), case V83 of {'Idris.Prelude.Types.Left', E30} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V85) -> case V85 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V86, V87) -> begin (V90 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V88) -> fun (V89) -> ('un--getNamedDef'(V0, V88, V89)) end end, V60, []))(V4))), case V90 of {'Idris.Prelude.Types.Left', E34} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V92) -> begin (V94 = begin (V93 = {'Idris.Builtin.MkPair', V86, V87}), (('case--case block in getCompileData-1934'(V3, V2, V1, V0, V8, V11, V12, V19, V28, V31, V35, V42, V44, V46, V55, V60, V81, V82, V86, V87, V93, V92, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.Lifted'}))))(V4)) end), case V94 of {'Idris.Prelude.Types.Left', E36} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V96) -> begin (V111 = [{'Idris.Builtin.MkPair', V82, {'Idris.Compiler.LambdaLift.MkLFun', [], [], V86}} | ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V87, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V99, V100, V101)) end end end end end, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V104, V105, V106)) end end end end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V108)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V109, V110)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V96))))]), begin (V113 = begin (V112 = {'Idris.Builtin.MkPair', V86, V87}), (('case--case block in getCompileData-2048'(V3, V2, V1, V0, V8, V11, V12, V19, V28, V31, V35, V42, V44, V46, V55, V60, V81, V82, V86, V87, V112, V92, V96, V111, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.ANF'}))))(V4)) end), case V113 of {'Idris.Prelude.Types.Left', E38} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V115) -> begin (V117 = begin (V116 = {'Idris.Builtin.MkPair', V86, V87}), (('case--case block in getCompileData-2232'(V3, V2, V1, V0, V8, V11, V12, V19, V28, V31, V35, V42, V44, V46, V55, V60, V81, V82, V86, V87, V116, V92, V96, V111, V115, ('dn--un-->=_Ord_UsePhase'(V2, {'Idris.Compiler.Common.VMCode'}))))(V4)) end), case V117 of {'Idris.Prelude.Types.Left', E40} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V119) -> begin (V121 = begin (V120 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V120} end), case V121 of {'Idris.Prelude.Types.Left', E42} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V123) -> begin (V173 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V124) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V125) -> fun (V126) -> begin (V155 = begin (V154 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V129, V130, V131)) end end end end end, fun (V132) -> fun (V133) -> fun (V134) -> V133 end end end, fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> begin (V140 = (V137(V139))), begin (V141 = (V138(V139))), (V140(V141)) end end end end end end end}, fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> begin (V147 = (V144(V146))), ((V145(V147))(V146)) end end end end end end, fun (V148) -> fun (V149) -> fun (V150) -> begin (V151 = (V149(V150))), (V151(V150)) end end end end}, fun (V152) -> fun (V153) -> V153 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping case trees to "/utf8>>, V125))))(V126))), {'Idris.Prelude.Types.Right', V154} end), case V155 of {'Idris.Prelude.Types.Left', E44} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V157) -> ('un--dumpCases'(V123, V125, V60, V126)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V11 of {'Idris.Core.Options.MkSessionOpts', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172) -> V169 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V173 of {'Idris.Prelude.Types.Left', E61} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V175) -> begin (V225 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V176) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V177) -> fun (V178) -> begin (V207 = begin (V206 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V181, V182, V183)) end end end end end, fun (V184) -> fun (V185) -> fun (V186) -> V185 end end end, fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> begin (V192 = (V189(V191))), begin (V193 = (V190(V191))), (V192(V193)) end end end end end end end}, fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> begin (V199 = (V196(V198))), ((V197(V199))(V198)) end end end end end end, fun (V200) -> fun (V201) -> fun (V202) -> begin (V203 = (V201(V202))), (V203(V202)) end end end end}, fun (V204) -> fun (V205) -> V205 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping lambda lifted defs to "/utf8>>, V177))))(V178))), {'Idris.Prelude.Types.Right', V206} end), case V207 of {'Idris.Prelude.Types.Left', E63} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V209) -> (('un--dumpLifted'(V177, V111))(V178)) end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V11 of {'Idris.Core.Options.MkSessionOpts', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224) -> V222 end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V225 of {'Idris.Prelude.Types.Left', E80} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V227) -> begin (V277 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V228) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V229) -> fun (V230) -> begin (V259 = begin (V258 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V233, V234, V235)) end end end end end, fun (V236) -> fun (V237) -> fun (V238) -> V237 end end end, fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> begin (V244 = (V241(V243))), begin (V245 = (V242(V243))), (V244(V245)) end end end end end end end}, fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> begin (V251 = (V248(V250))), ((V249(V251))(V250)) end end end end end end, fun (V252) -> fun (V253) -> fun (V254) -> begin (V255 = (V253(V254))), (V255(V254)) end end end end}, fun (V256) -> fun (V257) -> V257 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping ANF defs to "/utf8>>, V229))))(V230))), {'Idris.Prelude.Types.Right', V258} end), case V259 of {'Idris.Prelude.Types.Left', E82} -> (fun (V260) -> {'Idris.Prelude.Types.Left', V260} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V261) -> (('un--dumpANF'(V229, V115))(V230)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V11 of {'Idris.Core.Options.MkSessionOpts', E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98} -> (fun (V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276) -> V275 end(E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V277 of {'Idris.Prelude.Types.Left', E99} -> (fun (V278) -> {'Idris.Prelude.Types.Left', V278} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V279) -> begin (V329 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V280) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V281) -> fun (V282) -> begin (V311 = begin (V310 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V285, V286, V287)) end end end end end, fun (V288) -> fun (V289) -> fun (V290) -> V289 end end end, fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> begin (V296 = (V293(V295))), begin (V297 = (V294(V295))), (V296(V297)) end end end end end end end}, fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> begin (V303 = (V300(V302))), ((V301(V303))(V302)) end end end end end end, fun (V304) -> fun (V305) -> fun (V306) -> begin (V307 = (V305(V306))), (V307(V306)) end end end end}, fun (V308) -> fun (V309) -> V309 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Dumping VM defs to "/utf8>>, V281))))(V282))), {'Idris.Prelude.Types.Right', V310} end), case V311 of {'Idris.Prelude.Types.Left', E101} -> (fun (V312) -> {'Idris.Prelude.Types.Left', V312} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V313) -> (('un--dumpVMCode'(V281, V119))(V282)) end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, case V11 of {'Idris.Core.Options.MkSessionOpts', E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117} -> (fun (V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328) -> V328 end(E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V329 of {'Idris.Prelude.Types.Left', E118} -> (fun (V330) -> {'Idris.Prelude.Types.Left', V330} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V331) -> begin (V333 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V332) -> ('un--replaceEntry'(V0, V332)) end, V44))(V4))), case V333 of {'Idris.Prelude.Types.Left', E120} -> (fun (V334) -> {'Idris.Prelude.Types.Left', V334} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V335) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Common.MkCompileData', V81, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V336) -> V336 end, V92)), V111, V115, V119}} end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAllDesc'(V0, V1, V2, V3) -> case V1 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Name.Resolved', E2} -> (fun (V7) -> fun (V8) -> begin (V10 = begin (V9 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'('erased', V2, V7))(V8))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> begin (V13 = {'Idris.Core.Name.Resolved', V7}), case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V41 = (('Idris.Idris2.Core.Context':'un--lookupContextEntry'(V13, case V3 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V14 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V41 of {'Idris.Prelude.Types.Left', E32} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V43) -> begin (V44 = {'Idris.Prelude.Types.Nothing'}), case V43 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)) end()); {'Idris.Prelude.Types.Just', E34} -> (fun (V45) -> case V45 of {'Idris.Builtin.MkPair', E35, E36} -> (fun (V46, V47) -> begin (V48 = (('un--getMinimalDef'(V47))(V8))), case V48 of {'Idris.Prelude.Types.Left', E37} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V50) -> begin (V51 = {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V46, V47}}), case V50 of {'Idris.Builtin.MkPair', E39, E40} -> (fun (V52, V53) -> begin (V58 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V54) -> case V54 of {'Idris.Prelude.Types.Left', E41} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V57) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V13, V52, V57)) end, V8))), case V58 of {'Idris.Prelude.Types.Left', E43} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V60) -> begin (V61 = ('Idris.Idris2.Core.Context':'un--refersToRuntime'(V52))), begin (V62 = {'Idris.Builtin.MkPair', V52, V53}), (('case--case block in case block in case block in getAllDesc-947'(V7, V13, V6, V3, V2, V0, V44, V46, V47, V51, V52, V53, V62, V61, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(case V52 of {'Idris.Core.Context.MkGlobalDef', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V70 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V84) -> fun (V85) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V84, V85)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V86) -> fun (V87) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V86, V87)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))))))(V8)) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E66} -> (fun (V88) -> (('un--getAllDesc'(V0, V6, V2, V3))(V8)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('un--getAllDesc'(V0, V6, V2, V3)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--exportedName'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E2} -> (fun (V3) -> ('case--exportedName-2404'(V1, V3, ('un--isExported'(case V3 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V13 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--exists'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--openFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0, {'Idris.Erlang.System.File.Read'}))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, ('Idris.Idris2.Erlang.System.File':'un--closeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}, V30)), fun () -> fun (V83) -> 0 end end))(V1)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V84) -> 1 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dylib_suffix'() -> ('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V2, V3)) end end}, ('Idris.Idris2.System.Info':'un--os'()), [<<"windows"/utf8>> | [<<"mingw32"/utf8>> | [<<"cygwin32"/utf8>> | []]]])) end, fun () -> <<"dll"/utf8>> end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.System.Info':'un--os'()), <<"darwin"/utf8>>)) end, fun () -> <<"dylib"/utf8>> end} | []]], <<"so"/utf8>>)).
'un--dumpVMCode'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V2) -> ('nested--12222-1496--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--dumpLifted'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V2) -> ('nested--12064-1346--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--dumpCases'(V0, V1, V2, V3) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V4) -> fun (V5) -> ('nested--11903-1200--in--un--dumpCase'(V2, V1, V0, V4, V5)) end end, V2, []))(V3))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V1, ('Idris.Idris2.Data.String':'un--fastAppend'(V8))))(V3))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E2} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Right', E4} -> (fun (V40) -> case V40 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V1, V41}, V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpANF'(V0, V1) -> begin (V3 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V2) -> ('nested--12143-1421--in--un--dumpDef'(V1, V0, V2)) end, V1))), fun (V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V0, ('Idris.Idris2.Data.String':'un--fastAppend'(V3))))(V4))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E0} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Right', E2} -> (fun (V36) -> case V36 of {'Idris.Builtin.MkUnit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.FileErr', V0, V37}, V4)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--copyLib'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> ('case--copyLib-3501'(V1, V2, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V1, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cgExecuteExpr'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V6))), begin (V8 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V7, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V1 of {'Idris.Compiler.Common.MkCG', E4, E5, E6} -> (fun (V11, V12, V13) -> ((((V12(V0))(V7))(V2))(V3)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgCompileLibrary'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V7))), begin (V9 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V7))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V8, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Code generation overall"/utf8>> end, case V1 of {'Idris.Compiler.Common.MkCG', E6, E7, E8} -> (fun (V16, V17, V18) -> (((((V18(V0))(V8))(V9))(V2))(V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cgCompileExpr'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Context':'un--getDirs'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Options':'un--execBuildDir'(V7))), begin (V9 = ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V7))), begin (V10 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V8, V4))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Directory':'un--ensureDirectoryExists'(V9, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('Idris.Idris2.Core.Context.Log':'un--logTime'('erased', V0, fun () -> <<"Code generation overall"/utf8>> end, case V1 of {'Idris.Compiler.Common.MkCG', E6, E7, E8} -> (fun (V16, V17, V18) -> (((((V16(V0))(V8))(V9))(V2))(V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
