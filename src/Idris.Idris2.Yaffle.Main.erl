-module('Idris.Idris2.Yaffle.Main').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--yaffleMain-2276'/9,
  'dn--un--resolved_HasNames_(|Unit,MkUnit|)'/3,
  'dn--un--full_HasNames_(|Unit,MkUnit|)'/3,
  'dn--un--__Impl_HasNames_(|Unit,MkUnit|)'/0,
  'un--yaffleMain'/3,
  'un--usage'/0,
  'un--processArgs'/1
]).
'case--yaffleMain-2276'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E36} -> (fun (V9) -> case V9 of <<"ttc"/utf8>> -> fun (V10) -> begin (V43 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E73} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V14) -> begin (V42 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, <<"Processing as TTC"/utf8>>))(V14))), {'Idris.Prelude.Types.Right', V42} end end, V10))), case V43 of {'Idris.Prelude.Types.Left', E75} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V45) -> begin (V54 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E77} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V49) -> ('Idris.Idris2.Core.Binary':'un--readFromTTC'('erased', {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V50) -> fun (V51) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V52, V53)) end end}, V3, V5, 0, ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0, {'Idris.Core.Directory.LocalFile', V1}, ('Idris.Idris2.Core.Name.Namespace':'un--nsAsModuleIdent'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()))), ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V49)) end, V10))), case V54 of {'Idris.Prelude.Types.Left', E79} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V57) -> case V57 of {'Idris.Prelude.Types.Left', E81} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V60) -> begin (V88 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V63, V64, V65)) end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> V67 end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V71(V73))), begin (V75 = (V72(V73))), (V74(V75)) end end end end end end end}, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), ((V79(V81))(V80)) end end end end end end, fun (V82) -> fun (V83) -> fun (V84) -> begin (V85 = (V83(V84))), (V85(V84)) end end end end}, fun (V86) -> fun (V87) -> V87 end end}, <<"Read TTC"/utf8>>))(V60))), {'Idris.Prelude.Types.Right', V88} end end, V10)) end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V89) -> begin (V122 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V90) -> case V90 of {'Idris.Prelude.Types.Left', E37} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V93) -> begin (V121 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V96, V97, V98)) end end end end end, fun (V99) -> fun (V100) -> fun (V101) -> V100 end end end, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V104(V106))), begin (V108 = (V105(V106))), (V107(V108)) end end end end end end end}, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> begin (V114 = (V111(V113))), ((V112(V114))(V113)) end end end end end end, fun (V115) -> fun (V116) -> fun (V117) -> begin (V118 = (V116(V117))), (V118(V117)) end end end end}, fun (V119) -> fun (V120) -> V120 end end}, <<"Processing as TTImp"/utf8>>))(V93))), {'Idris.Prelude.Types.Right', V121} end end, V89))), case V122 of {'Idris.Prelude.Types.Left', E39} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V124) -> begin (V125 = ('Idris.Idris2.TTImp.ProcessDecls':'un--processTTImpFile'(V3, V4, V5, V1, V89))), case V125 of {'Idris.Prelude.Types.Left', E41} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V127) -> case V127 of 0 -> begin (V148 = (('Idris.Idris2.Core.Directory':'un--pathToNS'(case V6 of {'Idris.Core.Options.MkDirs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V128 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.Core.Options.MkDirs', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V138, V139, V140, V141, V142, V143, V144, V145, V146, V147) -> V139 end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V89))), case V148 of {'Idris.Prelude.Types.Left', E63} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V150) -> begin (V151 = ('Idris.Idris2.Core.Directory':'un--makeBuildDirectory'(V3, V150, V89))), case V151 of {'Idris.Prelude.Types.Left', E65} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V153) -> begin (V167 = begin (V154 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V3, V1, <<"ttc"/utf8>>, V89))), case V154 of {'Idris.Prelude.Types.Left', E67} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V156) -> ('Idris.Idris2.Core.Binary':'un--writeToTTC'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V157) -> fun (V158) -> fun (V159) -> ('dn--un--full_HasNames_(|Unit,MkUnit|)'(V157, V158, V159)) end end end, fun (V160) -> fun (V161) -> fun (V162) -> ('dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V160, V161, V162)) end end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V163) -> fun (V164) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V163, V164)) end end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V165, V166)) end end}}, V3, V5, {'Idris.Builtin.MkUnit'}, V156, V89)) end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V167 of {'Idris.Prelude.Types.Left', E69} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V169) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V170) -> case V170 of {'Idris.Prelude.Types.Left', E71} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V172) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V173) -> begin (V201 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V176, V177, V178)) end end end end end, fun (V179) -> fun (V180) -> fun (V181) -> V180 end end end, fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> fun (V186) -> begin (V187 = (V184(V186))), begin (V188 = (V185(V186))), (V187(V188)) end end end end end end end}, fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> begin (V194 = (V191(V193))), ((V192(V194))(V193)) end end end end end end, fun (V195) -> fun (V196) -> fun (V197) -> begin (V198 = (V196(V197))), (V198(V197)) end end end end}, fun (V199) -> fun (V200) -> V200 end end}, <<"Written TTC"/utf8>>))(V173))), {'Idris.Prelude.Types.Right', V201} end end, V89)) end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E36)); _ -> fun (V202) -> begin (V235 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V203) -> case V203 of {'Idris.Prelude.Types.Left', E0} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V205) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V206) -> begin (V234 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V209, V210, V211)) end end end end end, fun (V212) -> fun (V213) -> fun (V214) -> V213 end end end, fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> begin (V220 = (V217(V219))), begin (V221 = (V218(V219))), (V220(V221)) end end end end end end end}, fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> begin (V227 = (V224(V226))), ((V225(V227))(V226)) end end end end end end, fun (V228) -> fun (V229) -> fun (V230) -> begin (V231 = (V229(V230))), (V231(V230)) end end end end}, fun (V232) -> fun (V233) -> V233 end end}, <<"Processing as TTImp"/utf8>>))(V206))), {'Idris.Prelude.Types.Right', V234} end end, V202))), case V235 of {'Idris.Prelude.Types.Left', E2} -> (fun (V236) -> {'Idris.Prelude.Types.Left', V236} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V237) -> begin (V238 = ('Idris.Idris2.TTImp.ProcessDecls':'un--processTTImpFile'(V3, V4, V5, V1, V202))), case V238 of {'Idris.Prelude.Types.Left', E4} -> (fun (V239) -> {'Idris.Prelude.Types.Left', V239} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V240) -> case V240 of 0 -> begin (V261 = (('Idris.Idris2.Core.Directory':'un--pathToNS'(case V6 of {'Idris.Core.Options.MkDirs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V241, V242, V243, V244, V245, V246, V247, V248, V249, V250) -> V241 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.Core.Options.MkDirs', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V251, V252, V253, V254, V255, V256, V257, V258, V259, V260) -> V252 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V202))), case V261 of {'Idris.Prelude.Types.Left', E26} -> (fun (V262) -> {'Idris.Prelude.Types.Left', V262} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V263) -> begin (V264 = ('Idris.Idris2.Core.Directory':'un--makeBuildDirectory'(V3, V263, V202))), case V264 of {'Idris.Prelude.Types.Left', E28} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V266) -> begin (V280 = begin (V267 = ('Idris.Idris2.Core.Directory':'un--getTTCFileName'(V3, V1, <<"ttc"/utf8>>, V202))), case V267 of {'Idris.Prelude.Types.Left', E30} -> (fun (V268) -> {'Idris.Prelude.Types.Left', V268} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V269) -> ('Idris.Idris2.Core.Binary':'un--writeToTTC'('erased', {'Idris.Builtin.MkPair', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V270) -> fun (V271) -> fun (V272) -> ('dn--un--full_HasNames_(|Unit,MkUnit|)'(V270, V271, V272)) end end end, fun (V273) -> fun (V274) -> fun (V275) -> ('dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V273, V274, V275)) end end end}, {'Idris.Libraries.Utils.Binary.dn--un--__mkTTC', fun (V276) -> fun (V277) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--toBuf_TTC_(|Unit,MkUnit|)'(V276, V277)) end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Libraries.Utils.Binary':'dn--un--fromBuf_TTC_(|Unit,MkUnit|)'(V278, V279)) end end}}, V3, V5, {'Idris.Builtin.MkUnit'}, V269, V202)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V280 of {'Idris.Prelude.Types.Left', E32} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V282) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V283) -> case V283 of {'Idris.Prelude.Types.Left', E34} -> (fun (V284) -> {'Idris.Prelude.Types.Left', V284} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V285) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V286) -> begin (V314 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V289, V290, V291)) end end end end end, fun (V292) -> fun (V293) -> fun (V294) -> V293 end end end, fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> fun (V299) -> begin (V300 = (V297(V299))), begin (V301 = (V298(V299))), (V300(V301)) end end end end end end end}, fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> fun (V306) -> begin (V307 = (V304(V306))), ((V305(V307))(V306)) end end end end end end, fun (V308) -> fun (V309) -> fun (V310) -> begin (V311 = (V309(V310))), (V311(V310)) end end end end}, fun (V312) -> fun (V313) -> V313 end end}, <<"Written TTC"/utf8>>))(V286))), {'Idris.Prelude.Types.Right', V314} end end, V202)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}.
'dn--un--full_HasNames_(|Unit,MkUnit|)'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}.
'dn--un--__Impl_HasNames_(|Unit,MkUnit|)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(|Unit,MkUnit|)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(|Unit,MkUnit|)'(V3, V4, V5)) end end end}.
'un--yaffleMain'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--initDefs'(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Context.Ctxt'}, V5, V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--getDirs'(V8, V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V18 = (('un--processArgs'(V1))(V2))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--setLogTimings'(V8, V20, V2))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> begin (V24 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V8))(V2))), case V24 of {'Idris.Prelude.Types.Left', E14} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V26) -> begin (V27 = (('case--yaffleMain-2276'(V1, V0, V5, V8, V11, V14, V17, V20, ('Idris.Idris2.Libraries.Utils.Path':'un--extension'(V0))))(V2))), case V27 of {'Idris.Prelude.Types.Left', E16} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V29) -> begin (V31 = begin (V30 = ('erlang':'get'(V14))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E18} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V33) -> ('Idris.Idris2.Yaffle.REPL':'un--repl'(V8, V11, V14, V2)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--usage'() -> <<"Usage: yaffle <input file> [--timing]"/utf8>>.
'un--processArgs'(V0) -> case V0 of [] -> fun (V1) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of <<"--timing"/utf8>> -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end; _ -> fun (V5) -> begin (V90 = (('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V33, V34, V35)) end end end end end, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, ('un--usage'()))))), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> V69 end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), begin (V77 = (V74(V75))), (V76(V77)) end end end end end end end}, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), ((V81(V83))(V82)) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V85(V86))), (V87(V86)) end end end end}, fun (V88) -> fun (V89) -> V89 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end))(V5))), {'Idris.Prelude.Types.Right', V90} end end end; _ -> fun (V91) -> begin (V176 = (('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V94, V95, V96)) end end end end end, fun (V97) -> fun (V98) -> fun (V99) -> V98 end end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V102(V104))), begin (V106 = (V103(V104))), (V105(V106)) end end end end end end end}, fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> begin (V112 = (V109(V111))), ((V110(V112))(V111)) end end end end end end, fun (V113) -> fun (V114) -> fun (V115) -> begin (V116 = (V114(V115))), (V116(V115)) end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V119, V120, V121)) end end end end end, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V124, V125, V126)) end end end end end, fun (V127) -> fun (V128) -> fun (V129) -> V128 end end end, fun (V130) -> fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> begin (V135 = (V132(V134))), begin (V136 = (V133(V134))), (V135(V136)) end end end end end end end}, fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> begin (V142 = (V139(V141))), ((V140(V142))(V141)) end end end end end end, fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V144(V145))), (V146(V145)) end end end end}, fun (V147) -> fun (V148) -> V148 end end}, ('un--usage'()))))), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V151, V152, V153)) end end end end end, fun (V154) -> fun (V155) -> fun (V156) -> V155 end end end, fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> begin (V162 = (V159(V161))), begin (V163 = (V160(V161))), (V162(V163)) end end end end end end end}, fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> begin (V169 = (V166(V168))), ((V167(V169))(V168)) end end end end end end, fun (V170) -> fun (V171) -> fun (V172) -> begin (V173 = (V171(V172))), (V173(V172)) end end end end}, fun (V174) -> fun (V175) -> V175 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end))(V91))), {'Idris.Prelude.Types.Right', V176} end end end end(E0, E1)); _ -> fun (V177) -> begin (V262 = (('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V180, V181, V182)) end end end end end, fun (V183) -> fun (V184) -> fun (V185) -> V184 end end end, fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> begin (V191 = (V188(V190))), begin (V192 = (V189(V190))), (V191(V192)) end end end end end end end}, fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> begin (V198 = (V195(V197))), ((V196(V198))(V197)) end end end end end end, fun (V199) -> fun (V200) -> fun (V201) -> begin (V202 = (V200(V201))), (V202(V201)) end end end end}, ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V205, V206, V207)) end end end end end, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V210, V211, V212)) end end end end end, fun (V213) -> fun (V214) -> fun (V215) -> V214 end end end, fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> begin (V221 = (V218(V220))), begin (V222 = (V219(V220))), (V221(V222)) end end end end end end end}, fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> begin (V228 = (V225(V227))), ((V226(V228))(V227)) end end end end end end, fun (V229) -> fun (V230) -> fun (V231) -> begin (V232 = (V230(V231))), (V232(V231)) end end end end}, fun (V233) -> fun (V234) -> V234 end end}, ('un--usage'()))))), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V237, V238, V239)) end end end end end, fun (V240) -> fun (V241) -> fun (V242) -> V241 end end end, fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> begin (V248 = (V245(V247))), begin (V249 = (V246(V247))), (V248(V249)) end end end end end end end}, fun (V250) -> fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> begin (V255 = (V252(V254))), ((V253(V255))(V254)) end end end end end end, fun (V256) -> fun (V257) -> fun (V258) -> begin (V259 = (V257(V258))), (V259(V258)) end end end end}, fun (V260) -> fun (V261) -> V261 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end))(V177))), {'Idris.Prelude.Types.Right', V262} end end end.
