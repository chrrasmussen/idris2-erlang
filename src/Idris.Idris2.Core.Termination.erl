-module('Idris.Idris2.Core.Termination').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in checkTotal-6198'/9,
  'case--case block in checkTotal-6172'/9,
  'case--checkTotal-6121'/5,
  'case--case block in checkPositive-6066'/6,
  'case--checkPositive-6045'/6,
  'case--case block in calcPositive-5894'/15,
  'case--calcPositive-5859'/5,
  'case--checkData-5792'/6,
  'case--case block in checkCon-5735'/7,
  'case--checkCon-5705'/5,
  'case--checkPosArgs-5634'/11,
  'case--posArg-5553'/11,
  'case--posArg-5487'/12,
  'case--posArg-5393'/9,
  'case--posArg,dropParams-5330'/13,
  'case--nameIn-5207'/9,
  'case--nameIn-5123'/8,
  'case--checkTerminating-5077'/5,
  'case--case block in calcTerminating-4985'/8,
  'case--calcTerminating-4948'/5,
  'case--case block in case block in calcTerminating,addCases\x{27}-4843'/9,
  'case--case block in calcTerminating,addCases\x{27}-4817'/9,
  'case--calcTerminating,addCases\x{27}-4774'/8,
  'case--case block in checkSC-4666'/8,
  'case--checkSC-4591'/8,
  'case--case block in case block in case block in checkSC,checkCall-4288'/12,
  'case--case block in case block in checkSC,checkCall-4260'/13,
  'case--case block in checkSC,checkCall-4206'/12,
  'case--checkSC,checkCall-4183'/10,
  'case--checkSC,mkArgs-4114'/10,
  'case--calculateSizeChange-3910'/5,
  'case--case block in findSCcall-3596'/15,
  'case--findSCcall-3466'/11,
  'case--getCasePats-3398'/6,
  'case--getCasePats,updateRHS-3278'/10,
  'case--getCasePats,updateRHS,lookupTm-3218'/14,
  'case--getCasePats,updateRHS,lookupTm-3117'/17,
  'case--case block in asserted-2844'/11,
  'case--asserted-2804'/4,
  'case--case block in smallerArg-2765'/7,
  'case--smallerArg-2720'/7,
  'case--case block in case block in case block in findSC-2484'/16,
  'case--case block in case block in findSC-2200'/12,
  'case--case block in findSC-2164'/10,
  'case--findSC-2136'/8,
  'case--case block in findSC,conIfGuarded-2045'/13,
  'case--findSC,conIfGuarded-2017'/11,
  'case--findSC,handleCase-1926'/13,
  'case--findSC-1846'/12,
  'case--delazy-1686'/5,
  'case--delazy-1648'/8,
  'case--delazy-1614'/6,
  'case--checkIfGuarded-1343'/5,
  'case--checkIfGuarded,allGuarded-1269'/9,
  'case--case block in checkIfGuarded,guarded-1168'/11,
  'case--checkIfGuarded,guarded-1141'/10,
  'case--case block in checkIfGuarded,checkNotFn-1043'/8,
  'case--checkIfGuarded,checkNotFn-1028'/6,
  'case--checkIfGuarded,guardedNF-961'/11,
  'case--case block in case block in totRefs-843'/8,
  'case--case block in totRefs-768'/8,
  'case--totRefs-753'/6,
  'nested--10746-2981--in--un--urhs'/10,
  'nested--9409-2974--in--un--updateRHS'/9,
  'nested--9409-2975--in--un--updatePat'/9,
  'nested--11858-3989--in--un--updateArg'/8,
  'nested--11858-3990--in--un--mkArgs'/7,
  'nested--9409-2976--in--un--matchArgs'/6,
  'nested--10746-2982--in--un--lookupTm'/11,
  'nested--9395-1910--in--un--handleCase'/9,
  'nested--8447-920--in--un--guardedNF'/7,
  'nested--8447-922--in--un--guarded'/7,
  'nested--11858-3992--in--un--getWorst'/8,
  'nested--11858-3988--in--un--getPos'/9,
  'nested--9395-1804--in--un--findSCbinder'/11,
  'nested--13285-5313--in--un--dropParams'/11,
  'nested--11858-3993--in--un--continue'/9,
  'nested--9395-1911--in--un--conIfGuarded'/8,
  'nested--8447-921--in--un--checkNotFn'/6,
  'nested--11858-3987--in--un--checkDesc'/8,
  'nested--11858-3991--in--un--checkCall'/8,
  'nested--8447-923--in--un--allGuarded'/4,
  'nested--12695-4757--in--un--addCases\x{27}'/6,
  'nested--12695-4758--in--un--addCases'/5,
  'un--totRefsIn'/4,
  'un--totRefs'/3,
  'un--smallerArg'/6,
  'un--smaller'/6,
  'un--scEq'/3,
  'un--posArg'/4,
  'un--nextArg'/1,
  'un--nameIn'/4,
  'un--mkChange'/5,
  'un--initArgs'/2,
  'un--getSC'/3,
  'un--getCasePats'/6,
  'un--firstArg'/0,
  'un--findSCcall'/11,
  'un--findSC'/7,
  'un--findInCase'/4,
  'un--findCalls'/3,
  'un--expandToArity'/2,
  'un--delazy'/3,
  'un--checkTotal'/4,
  'un--checkTerminating'/4,
  'un--checkSC'/7,
  'un--checkPositive'/4,
  'un--checkPosArgs'/4,
  'un--checkIfGuarded'/4,
  'un--checkData'/4,
  'un--checkCon'/5,
  'un--caseFn'/1,
  'un--calculateSizeChange'/4,
  'un--calcTerminating'/4,
  'un--calcPositive'/4,
  'un--assertedSmaller'/3,
  'un--asserted'/3
]).
'case--case block in case block in checkTotal-6198'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17) -> fun (V18) -> ('un--checkPositive'(V2, V1, V5, V18)) end end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> fun (V19) -> ('un--checkTerminating'(V2, V1, V5, V19)) end end end(E0)); _ -> fun (V20) -> ('un--checkTerminating'(V2, V1, V5, V20)) end end.
'case--case block in checkTotal-6172'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.TT.Unchecked'} -> (fun () -> fun (V9) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V5, case V7 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V10 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V37 of {'Idris.Prelude.Types.Left', E27} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E29} -> (fun (V40) -> case V40 of {'Idris.Core.Context.TCon', E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48) -> ('un--checkPositive'(V2, V1, V5, V9)) end(E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('un--checkTerminating'(V2, V1, V5, V9)) end end(E29)); _ -> ('un--checkTerminating'(V2, V1, V5, V9)) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', V8} end end.
'case--checkTotal-6121'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> begin (V6 = {'Idris.Core.Name.Resolved', V5}), fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--getTotality'(V2, V1, V6, V7))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> begin (V18 = begin (V15 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V13, V14)) end end}, V6, V7))), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"totality"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking totality: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)))) end))(V7)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V18 of {'Idris.Prelude.Types.Left', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V20) -> begin (V22 = begin (V21 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V21} end), case V22 of {'Idris.Prelude.Types.Left', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V24) -> (('case--case block in checkTotal-6172'(V0, V1, V2, V3, V5, V6, V10, V24, case V10 of {'Idris.Core.TT.MkTotality', E9, E10} -> (fun (V25, V26) -> V25 end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V2, V1, V0, V27)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkPositive-6066'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--setTerminating'(V2, V1, V3, V6, V8))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V14 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'un--setTerminating'(V2, V1, V12, V6, V13)) end end, V7))(V8))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Right', V6} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkPositive-6045'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Unchecked'} -> (fun () -> fun (V6) -> begin (V7 = ('un--calcPositive'(V2, V1, V3, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--setTerminating'(V2, V1, V3, V10, V6))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V17 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'un--setTerminating'(V2, V1, V15, V10, V16)) end end, V11))(V6))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Right', V10} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', V5} end end.
'case--case block in calcPositive-5894'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> fun (V15) -> begin (V16 = (('un--checkData'(V2, V3, [V0 | V11], V10))(V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, V10}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V14, V10}} end end.
'case--calcPositive-5859'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V6, V7) -> case V6 of {'Idris.Core.Context.TCon', E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> fun (V16) -> begin (V17 = (('un--totRefsIn'('erased', V2, V3, V7))(V16))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> case V19 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> begin (V20 = (('un--checkData'(V2, V3, [V0 | V13], V14))(V16))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V22, V14}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V19, V14}} end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5, E6, E7, E8, E9, E10)); _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)), <<" not a data type"/utf8>>))}, V23)) end end end(E1, E2)); _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)), <<" not a data type"/utf8>>))}, V24)) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V25) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V2, V1, V0, V25)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkData-5792'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> ('un--checkData'(V0, V4, V3, V2)) end()); _ -> fun (V6) -> {'Idris.Prelude.Types.Right', V5} end end.
'case--case block in checkCon-5735'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> fun (V7) -> begin (V8 = (('Idris.Idris2.Core.Normalise':'un--nf'(V3, [], V2, {'Idris.Core.Env.Nil'}, V4))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('un--checkPosArgs'(V3, V2, V1, V10))(V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V11) -> {'Idris.Prelude.Types.Right', V6} end end.
'case--checkCon-5705'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Unchecked'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V8 = (('un--totRefsIn'('erased', V3, V2, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> case V10 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> begin (V11 = (('Idris.Idris2.Core.Normalise':'un--nf'(V3, [], V2, {'Idris.Core.Env.Nil'}, V6))(V7))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> (('un--checkPosArgs'(V3, V2, V1, V13))(V7)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', V10} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkPosArgs-5634'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> fun (V11) -> begin (V12 = (((V4(V8))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> (('un--checkPosArgs'(V9, V8, V7, V14))(V11)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', V10} end end.
'case--posArg-5553'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.NotStrictlyPositive'}}} end; 1 -> fun (V12) -> begin (V13 = (((V4(V8))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> (('un--posArg'(V9, V8, V7, V15))(V12)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--posArg-5487'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of 0 -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.NotStrictlyPositive'}}} end; 1 -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--posArg-5393'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17) -> ('nested--13285-5313--in--un--dropParams'(V0, V1, V2, V3, V4, V5, V6, V7, 0, V12, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V18)) end, V3)))) end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V19)) end, V3)) end end(E0)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V20)) end, V3)) end.
'case--posArg,dropParams-5330'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> ('nested--13285-5313--in--un--dropParams'(V0, V1, V2, V3, V4, V5, V6, V7, (1 + V11), V10, V9)); 1 -> [V8 | ('nested--13285-5313--in--un--dropParams'(V0, V1, V2, V3, V4, V5, V6, V7, (1 + V11), V10, V9))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nameIn-5207'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V7, [], V6, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V11)))) end, V3, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> (('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V15) -> ('un--nameIn'(V7, V6, V5, V15)) end, V14))(V10)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--nameIn-5123'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V9) -> begin (V10 = (((V0(V5))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 1}))))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> (('un--nameIn'(V6, V5, V4, V12))(V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkTerminating-5077'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Unchecked'} -> (fun () -> fun (V5) -> begin (V6 = ('un--calcTerminating'(V2, V1, V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context':'un--setTerminating'(V2, V1, V0, V8, V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Right', V8} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V12) -> {'Idris.Prelude.Types.Right', V4} end end.
'case--case block in calcTerminating-4985'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> begin (V29 = case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V10 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Termination.APos'}, ('un--firstArg'()), V30))), case V31 of {'Idris.Prelude.Types.Left', E21} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V33) -> begin (V37 = begin (V34 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V2, [], V3, {'Idris.Core.Env.Nil'}, V29, V30))), case V34 of {'Idris.Prelude.Types.Left', E23} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V36) -> (('un--initArgs'(V33, V36))(V30)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V37 of {'Idris.Prelude.Types.Left', E25} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V39) -> ('un--checkSC'(V33, V2, V3, V0, V39, [], V30)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun (V40) -> {'Idris.Prelude.Types.Right', V7} end end.
'case--calcTerminating-4948'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V2, V1, V0, V5)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V8 = (('nested--12695-4758--in--un--addCases'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V6))))))(V7))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> begin (V15 = (('un--totRefs'(V2, V3, ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V10))))(V7))), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> case V17 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> begin (V39 = case V6 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V20 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V40 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Termination.APos'}, ('un--firstArg'()), V7))), case V40 of {'Idris.Prelude.Types.Left', E26} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V42) -> begin (V46 = begin (V43 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V2, [], V3, {'Idris.Core.Env.Nil'}, V39, V7))), case V43 of {'Idris.Prelude.Types.Left', E28} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V45) -> (('un--initArgs'(V42, V45))(V7)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V46 of {'Idris.Prelude.Types.Left', E30} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V48) -> ('un--checkSC'(V42, V2, V3, V0, V48, [], V7)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> {'Idris.Prelude.Types.Right', V17} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in calcTerminating,addCases\x{27}-4843'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> ('nested--12695-4757--in--un--addCases\x{27}'(V0, V1, V2, V6, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V5)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V9)))), V4)))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--12695-4757--in--un--addCases\x{27}'(V0, V1, V2, V6, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V5)), V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in calcTerminating,addCases\x{27}-4817'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V3, case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V10 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V9))), case V37 of {'Idris.Prelude.Types.Left', E27} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E29} -> (fun (V40) -> (('nested--12695-4757--in--un--addCases\x{27}'(V0, V1, V2, V6, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V5)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V40)))), V4))))(V9)) end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--12695-4757--in--un--addCases\x{27}'(V0, V1, V2, V6, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V5)), V4))(V9)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('nested--12695-4757--in--un--addCases\x{27}'(V0, V1, V2, V6, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V5)), V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--calcTerminating,addCases\x{27}-4774'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> ('nested--12695-4757--in--un--addCases\x{27}'(V0, V1, V2, V6, V5, V4)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> begin (V10 = (('Idris.Idris2.Core.Context':'un--getFullName'(V2, V3))(V9))), case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> (('case--case block in calcTerminating,addCases\x{27}-4817'(V0, V1, V2, V3, V4, V5, V6, V12, ('un--caseFn'(V12))))(V9)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkSC-4666'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> begin (V16 = begin (V13 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V11, V12)) end end}, V2, V8))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.isTerminating"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Size Change Graph is Terminating for: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)))) end))(V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V19) -> fun (V20) -> begin (V28 = begin (V25 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V23, V24)) end end}, V2, V20))), case V25 of {'Idris.Prelude.Types.Left', E5} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V27) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.needsChecking"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Size Change Graph needs traversing: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)))) end))(V20)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> ('nested--11858-3993--in--un--continue'(V0, V1, V2, V3, V4, V5, case V19 of {'Idris.Core.Context.MkGlobalDef', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V51 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [V6 | V0], V20)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkSC-4591'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> begin (V16 = begin (V13 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V11, V12)) end end}, V2, V8))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.inPath"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking arguments: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)))) end))(V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V21, V22)) end end}, ('nested--11858-3987--in--un--checkDesc'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V24)) end, V23)) end, V1)), V0)), V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V25) -> begin (V53 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V3 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V26 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V25))), case V53 of {'Idris.Prelude.Types.Left', E31} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V55) -> case V55 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V63 = begin (V60 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V58, V59)) end end}, V2, V25))), case V60 of {'Idris.Prelude.Types.Left', E33} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V62) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.isTerminating"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Size Change Graph is Terminating for: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V62)))) end))(V25)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V63 of {'Idris.Prelude.Types.Left', E35} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E37} -> (fun (V66) -> begin (V74 = begin (V71 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V67) -> fun (V68) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V67, V68)) end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V69, V70)) end end}, V2, V25))), case V71 of {'Idris.Prelude.Types.Left', E38} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V73) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.needsChecking"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Size Change Graph needs traversing: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V73)))) end))(V25)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V74 of {'Idris.Prelude.Types.Left', E40} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V76) -> ('nested--11858-3993--in--un--continue'(V0, V1, V2, V3, V4, V5, case V66 of {'Idris.Core.Context.MkGlobalDef', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97) -> V97 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [V6 | V0], V25)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in checkSC,checkCall-4288'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.TT.NotTerminating', E6} -> (fun (V12) -> case V12 of {'Idris.Core.TT.RecPath', E13} -> (fun (V13) -> fun (V14) -> begin (V24 = begin (V21 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V17, V18)) end end}, case V6 of {'Idris.Core.Context.MkSCCall', E14, E15} -> (fun (V19, V20) -> V19 end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14))), case V21 of {'Idris.Prelude.Types.Left', E16} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V23) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.checkCall.inPathNot.restart"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"ReChecking Size Change Graph: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)))) end))(V14)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V24 of {'Idris.Prelude.Types.Left', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V26) -> begin (V29 = (('un--initArgs'(V5, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', case V6 of {'Idris.Core.Context.MkSCCall', E20, E21} -> (fun (V27, V28) -> V28 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V14))), case V29 of {'Idris.Prelude.Types.Left', E22} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V31) -> ('un--checkSC'(V5, V4, V3, case V6 of {'Idris.Core.Context.MkSCCall', E24, E25} -> (fun (V32, V33) -> V32 end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V31, V7, V14)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> fun (V34) -> begin (V44 = begin (V41 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V37, V38)) end end}, case V6 of {'Idris.Core.Context.MkSCCall', E7, E8} -> (fun (V39, V40) -> V39 end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34))), case V41 of {'Idris.Prelude.Types.Left', E9} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V43) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.checkCall.inPathNot.return"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Have result: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43)))) end))(V34)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V44 of {'Idris.Prelude.Types.Left', E11} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V46) -> {'Idris.Prelude.Types.Right', V11} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6)); _ -> fun (V47) -> begin (V57 = begin (V54 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V50, V51)) end end}, case V6 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V52, V53) -> V52 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V47))), case V54 of {'Idris.Prelude.Types.Left', E2} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V56) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.checkCall.inPathNot.return"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Have result: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V56)))) end))(V47)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V57 of {'Idris.Prelude.Types.Left', E4} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V59) -> {'Idris.Prelude.Types.Right', V11} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in checkSC,checkCall-4260'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> case V11 of {'Idris.Core.TT.NotTerminating', E6} -> (fun (V13) -> case V13 of {'Idris.Core.TT.RecPath', E13} -> (fun (V14) -> fun (V15) -> begin (V25 = begin (V22 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V18, V19)) end end}, case V6 of {'Idris.Core.Context.MkSCCall', E14, E15} -> (fun (V20, V21) -> V20 end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15))), case V22 of {'Idris.Prelude.Types.Left', E16} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V24) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.checkCall.inPathNot.restart"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"ReChecking Size Change Graph: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V24)))) end))(V15)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V25 of {'Idris.Prelude.Types.Left', E18} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V27) -> begin (V30 = (('un--initArgs'(V5, ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', case V6 of {'Idris.Core.Context.MkSCCall', E20, E21} -> (fun (V28, V29) -> V29 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V15))), case V30 of {'Idris.Prelude.Types.Left', E22} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V32) -> ('un--checkSC'(V5, V4, V3, case V6 of {'Idris.Core.Context.MkSCCall', E24, E25} -> (fun (V33, V34) -> V33 end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V32, V7, V15)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> fun (V35) -> begin (V45 = begin (V42 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V38, V39)) end end}, case V6 of {'Idris.Core.Context.MkSCCall', E7, E8} -> (fun (V40, V41) -> V40 end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V35))), case V42 of {'Idris.Prelude.Types.Left', E9} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V44) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.checkCall.inPathNot.return"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Have result: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V44)))) end))(V35)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V45 of {'Idris.Prelude.Types.Left', E11} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Right', V11} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6)); _ -> fun (V48) -> begin (V58 = begin (V55 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V51, V52)) end end}, case V6 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V53, V54) -> V53 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V48))), case V55 of {'Idris.Prelude.Types.Left', E2} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V57) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.checkCall.inPathNot.return"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Have result: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V57)))) end))(V48)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V58 of {'Idris.Prelude.Types.Left', E4} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V60) -> {'Idris.Prelude.Types.Right', V11} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; 1 -> fun (V61) -> begin (V71 = begin (V68 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V62, V63)) end end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V64, V65)) end end}, case V6 of {'Idris.Core.Context.MkSCCall', E26, E27} -> (fun (V66, V67) -> V66 end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V61))), case V68 of {'Idris.Prelude.Types.Left', E28} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V70) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.checkCall.inPath"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Have Result: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V70)))) end))(V61)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V71 of {'Idris.Prelude.Types.Left', E30} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V73) -> {'Idris.Prelude.Types.Right', V11} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkSC,checkCall-4206'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.TT.Unchecked'} -> (fun () -> fun (V12) -> begin (V22 = begin (V19 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V4, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V15, V16)) end end}, case V6 of {'Idris.Core.Context.MkSCCall', E2, E3} -> (fun (V17, V18) -> V17 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"totality.termination.sizechange.checkCall"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"CheckCall Size Change Graph: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V21)))) end))(V12)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> begin (V29 = ('un--checkSC'(V5, V4, V3, case V6 of {'Idris.Core.Context.MkSCCall', E8, E9} -> (fun (V25, V26) -> V25 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('nested--11858-3990--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, case V6 of {'Idris.Core.Context.MkSCCall', E10, E11} -> (fun (V27, V28) -> V28 end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V7, V12))), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> (('case--case block in case block in checkSC,checkCall-4260'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V31, ('Idris.Idris2.Prelude.Basics':'un--not'(V8))))(V12)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IsTerminating'} -> (fun () -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end end()); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.BadCall', [case V6 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V34, V35) -> V34 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | []]}}} end end.
'case--checkSC,checkCall-4183'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> begin (V11 = {'Idris.Prelude.Types.Just', V10}), ('case--case block in checkSC,checkCall-4206'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, V11, case case V10 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V22 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.TT.MkTotality', E1, E2} -> (fun (V33, V34) -> V33 end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkSC,mkArgs-4114'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [{'Idris.Prelude.Types.Nothing'} | ('nested--11858-3990--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V8))] end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> [('nested--11858-3989--in--un--updateArg'(V0, V1, V2, V3, V4, V5, V7, V10)) | ('nested--11858-3990--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V8))] end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--calculateSizeChange-3910'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('un--getSC'(V2, V3, case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V23 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V2, V1, V0, V27)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findSCcall-3596'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V15) -> {'Idris.Prelude.Types.Right', []} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> fun (V17) -> begin (V19 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V18) -> ('un--findInCase'(V9, V8, V6, V18)) end, V16, []))(V17))), case V19 of {'Idris.Prelude.Types.Left', E1} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V33)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V34, V35)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V21))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findSCcall-3466'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V33 = case V11 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V13 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V34) -> begin (V42 = begin (V39 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V9, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V35, V36)) end end, fun (V37) -> fun (V38) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V37, V38)) end end}, V33, V34))), case V39 of {'Idris.Prelude.Types.Left', E22} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V41) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V9, <<"totality.termination.sizechange"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Looking under "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41)))) end))(V34)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V42 of {'Idris.Prelude.Types.Left', E24} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V44) -> begin (V72 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(case V8 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V45 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"assert_smaller"/utf8>>}}))(V34))), case V72 of {'Idris.Prelude.Types.Left', E53} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V74) -> (('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V33, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"assert_total"/utf8>>}})) end, fun () -> fun (V75) -> {'Idris.Prelude.Types.Right', []} end end} | [{'Idris.Builtin.MkPair', fun () -> ('un--caseFn'(V33)) end, fun () -> fun (V76) -> begin (V77 = ('un--getCasePats'(V0, V8, V33, V5, V1, V76))), case V77 of {'Idris.Prelude.Types.Left', E55} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V79) -> case V79 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E57} -> (fun (V80) -> begin (V82 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V81) -> ('un--findInCase'(V9, V8, V6, V81)) end, V80, []))(V76))), case V82 of {'Idris.Prelude.Types.Left', E58} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V84) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V92, V93, V94)) end end end end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V96)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V97) -> fun (V98) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V97, V98)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V84))} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end} | []]], fun (V99) -> begin (V101 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V100) -> ('un--findSC'(V0, V9, V8, V7, V6, V5, V100)) end, V1, []))(V99))), case V101 of {'Idris.Prelude.Types.Left', E60} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V103) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', [{'Idris.Core.Context.MkSCCall', V33, ('un--expandToArity'(V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V104) -> ('un--mkChange'('erased', V8, V74, V5, V104)) end, V1))))} | []], (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V107, V108, V109)) end end end end end, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V112, V113, V114)) end end end end end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V116)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V117, V118)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V103))))} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))(V34)) end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V119) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V9, V4, V3, V119)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getCasePats-3398'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Core.Context.PMDef', E1, E2, E3, E4, E5} -> (fun (V7, V8, V9, V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> ('nested--9409-2976--in--un--matchArgs'(V0, V1, V2, V3, V4, V13)) end, V11))}} end end(E1, E2, E3, E4, E5)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--getCasePats,updateRHS-3278'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--10746-2981--in--un--urhs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V6)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> V10 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getCasePats,updateRHS,lookupTm-3218'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> {'Idris.Prelude.Types.Just', V10}; 1 -> ('nested--10746-2982--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V12, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getCasePats,updateRHS,lookupTm-3117'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of 0 -> {'Idris.Prelude.Types.Just', V13}; 1 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--10746-2982--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, [{'Idris.Builtin.MkPair', V9, V13} | V14])), fun (V17) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.As', V12, V11, ('nested--10746-2981--in--un--urhs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10)), V17}} end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in asserted-2844'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> {'Idris.Prelude.Types.Just', V9}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--asserted-2804'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Core.TT.Ref', E2, E3, E4} -> (fun (V6, V7, V8) -> case V5 of [E5 | E6] -> (fun (V9, V10) -> case V10 of [E7 | E8] -> (fun (V11, V12) -> case V12 of [E9 | E10] -> (fun (V13, V14) -> case V14 of [E11 | E12] -> (fun (V15, V16) -> case V16 of [] -> ('case--case block in asserted-2844'('erased', V1, V2, V15, V11, V9, V6, V8, V7, V13, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V2)))); _ -> {'Idris.Prelude.Types.Nothing'} end end(E11, E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9, E10)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in smallerArg-2765'(V0, V1, V2, V3, V4, V5, V6) -> case V2 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V7, V8, V9) -> fun () -> ('un--smaller'('erased', V5, V4, V3, V8, V1)) end end(E0, E1, E2)); _ -> fun () -> 1 end end.
'case--smallerArg-2720'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V7, V8) -> case V7 of {'Idris.Core.TT.Ref', E8, E9, E10} -> (fun (V9, V10, V11) -> case V10 of {'Idris.Core.TT.DataCon', E14, E15} -> (fun (V12, V13) -> fun () -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V25)) end end}, fun (V26) -> ('un--smaller'('erased', 0, V4, V3, V2, V26)) end))(V8)) end end(E14, E15)); _ -> case V2 of {'Idris.Core.TT.App', E11, E12, E13} -> (fun (V27, V28, V29) -> fun () -> ('un--smaller'('erased', V5, V4, V3, V28, V1)) end end(E11, E12, E13)); _ -> fun () -> 1 end end end end(E8, E9, E10)); _ -> case V2 of {'Idris.Core.TT.App', E5, E6, E7} -> (fun (V30, V31, V32) -> fun () -> ('un--smaller'('erased', V5, V4, V3, V31, V1)) end end(E5, E6, E7)); _ -> fun () -> 1 end end end end(E3, E4)); _ -> case V2 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V33, V34, V35) -> fun () -> ('un--smaller'('erased', V5, V4, V3, V34, V1)) end end(E0, E1, E2)); _ -> fun () -> 1 end end end.
'case--case block in case block in case block in findSC-2484'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V16, V17))), case V18 of {'Idris.Prelude.Types.Left', E1} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V20) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V13, V12, V20, V14, V17)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V13, V12, 0, V14, V21)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in findSC-2200'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> case V12 of {'Idris.Core.Termination.InDelay'} -> (fun () -> case V13 of {'Idris.Builtin.MkPair', E84, E85} -> (fun (V14, V15) -> case V14 of {'Idris.Core.TT.Ref', E88, E89, E90} -> (fun (V16, V17, V18) -> case V17 of {'Idris.Core.TT.DataCon', E93, E94} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V22) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.InDelay'}, V2, V22)) end, V15, []))(V21))), case V23 of {'Idris.Prelude.Types.Left', E95} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V25) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V37)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V38, V39)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V25))} end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93, E94)); _ -> fun (V40) -> begin (V42 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V41) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V41)) end, V15, []))(V40))), case V42 of {'Idris.Prelude.Types.Left', E91} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V44) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V56)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V57, V58)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V44))} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E88, E89, E90)); _ -> fun (V59) -> begin (V61 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V60) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V60)) end, V15, []))(V59))), case V61 of {'Idris.Prelude.Types.Left', E86} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V63) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V66, V67, V68)) end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V71, V72, V73)) end end end end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V75)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V76, V77)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V63))} end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E84, E85)); _ -> case V13 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V78, V79) -> case V78 of {'Idris.Core.TT.Ref', E47, E48, E49} -> (fun (V80, V81, V82) -> case V81 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V83) -> begin (V111 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V82, case V5 of {'Idris.Core.Context.MkDefs', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110) -> V84 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V83))), case V111 of {'Idris.Prelude.Types.Left', E79} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V113) -> case V113 of {'Idris.Prelude.Types.Just', E81} -> (fun (V114) -> begin (V115 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V114, V83))), case V115 of {'Idris.Prelude.Types.Left', E82} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V117) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V80, V82, V117, V79, V83)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V80, V82, 0, V79, V83)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V118) -> begin (V120 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V119) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V119)) end, V79, []))(V118))), case V120 of {'Idris.Prelude.Types.Left', E50} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V122) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V125, V126, V127)) end end end end end, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V130, V131, V132)) end end end end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V134)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V135, V136)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V122))} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E47, E48, E49)); _ -> fun (V137) -> begin (V139 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V138) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V138)) end, V79, []))(V137))), case V139 of {'Idris.Prelude.Types.Left', E45} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V141) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V144, V145, V146)) end end end end end, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V149, V150, V151)) end end end end end, fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V153)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V154) -> fun (V155) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V154, V155)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V141))} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.Termination.Guarded'} -> (fun () -> case V13 of {'Idris.Builtin.MkPair', E138, E139} -> (fun (V156, V157) -> case V156 of {'Idris.Core.TT.Ref', E181, E182, E183} -> (fun (V158, V159, V160) -> case V159 of {'Idris.Core.TT.DataCon', E225, E226} -> (fun (V161, V162) -> fun (V163) -> begin (V165 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V164) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Guarded'}, V2, V164)) end, V157, []))(V163))), case V165 of {'Idris.Prelude.Types.Left', E227} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E227)); {'Idris.Prelude.Types.Right', E228} -> (fun (V167) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V170, V171, V172)) end end end end end, fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V175, V176, V177)) end end end end end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V179)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V180) -> fun (V181) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V180, V181)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V167))} end(E228)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E225, E226)); _ -> case V13 of {'Idris.Builtin.MkPair', E184, E185} -> (fun (V182, V183) -> case V182 of {'Idris.Core.TT.Ref', E188, E189, E190} -> (fun (V184, V185, V186) -> case V185 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V187) -> begin (V215 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V186, case V5 of {'Idris.Core.Context.MkDefs', E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219} -> (fun (V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214) -> V188 end(E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V187))), case V215 of {'Idris.Prelude.Types.Left', E220} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V217) -> case V217 of {'Idris.Prelude.Types.Just', E222} -> (fun (V218) -> begin (V219 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V218, V187))), case V219 of {'Idris.Prelude.Types.Left', E223} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E223)); {'Idris.Prelude.Types.Right', E224} -> (fun (V221) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V184, V186, V221, V183, V187)) end(E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E222)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V184, V186, 0, V183, V187)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V222) -> begin (V224 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V223) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V223)) end, V183, []))(V222))), case V224 of {'Idris.Prelude.Types.Left', E191} -> (fun (V225) -> {'Idris.Prelude.Types.Left', V225} end(E191)); {'Idris.Prelude.Types.Right', E192} -> (fun (V226) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V229, V230, V231)) end end end end end, fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V234, V235, V236)) end end end end end, fun (V237) -> fun (V238) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V238)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V239) -> fun (V240) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V239, V240)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V226))} end(E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E188, E189, E190)); _ -> fun (V241) -> begin (V243 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V242) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V242)) end, V183, []))(V241))), case V243 of {'Idris.Prelude.Types.Left', E186} -> (fun (V244) -> {'Idris.Prelude.Types.Left', V244} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V245) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V248, V249, V250)) end end end end end, fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> fun (V255) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V253, V254, V255)) end end end end end, fun (V256) -> fun (V257) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V257)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V258) -> fun (V259) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V258, V259)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V245))} end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E184, E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E181, E182, E183)); _ -> case V13 of {'Idris.Builtin.MkPair', E140, E141} -> (fun (V260, V261) -> case V260 of {'Idris.Core.TT.Ref', E144, E145, E146} -> (fun (V262, V263, V264) -> case V263 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V265) -> begin (V293 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V264, case V5 of {'Idris.Core.Context.MkDefs', E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175} -> (fun (V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292) -> V266 end(E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V265))), case V293 of {'Idris.Prelude.Types.Left', E176} -> (fun (V294) -> {'Idris.Prelude.Types.Left', V294} end(E176)); {'Idris.Prelude.Types.Right', E177} -> (fun (V295) -> case V295 of {'Idris.Prelude.Types.Just', E178} -> (fun (V296) -> begin (V297 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V296, V265))), case V297 of {'Idris.Prelude.Types.Left', E179} -> (fun (V298) -> {'Idris.Prelude.Types.Left', V298} end(E179)); {'Idris.Prelude.Types.Right', E180} -> (fun (V299) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V262, V264, V299, V261, V265)) end(E180)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E178)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V262, V264, 0, V261, V265)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V300) -> begin (V302 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V301) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V301)) end, V261, []))(V300))), case V302 of {'Idris.Prelude.Types.Left', E147} -> (fun (V303) -> {'Idris.Prelude.Types.Left', V303} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V304) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V307, V308, V309)) end end end end end, fun (V310) -> fun (V311) -> fun (V312) -> fun (V313) -> fun (V314) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V312, V313, V314)) end end end end end, fun (V315) -> fun (V316) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V316)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V317) -> fun (V318) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V317, V318)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V304))} end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E144, E145, E146)); _ -> fun (V319) -> begin (V321 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V320) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V320)) end, V261, []))(V319))), case V321 of {'Idris.Prelude.Types.Left', E142} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V323) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V324) -> fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V326, V327, V328)) end end end end end, fun (V329) -> fun (V330) -> fun (V331) -> fun (V332) -> fun (V333) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V331, V332, V333)) end end end end end, fun (V334) -> fun (V335) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V335)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V336) -> fun (V337) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V336, V337)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V323))} end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138, E139)); _ -> case V13 of {'Idris.Builtin.MkPair', E97, E98} -> (fun (V338, V339) -> case V338 of {'Idris.Core.TT.Ref', E101, E102, E103} -> (fun (V340, V341, V342) -> case V341 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V343) -> begin (V371 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V342, case V5 of {'Idris.Core.Context.MkDefs', E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132} -> (fun (V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370) -> V344 end(E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V343))), case V371 of {'Idris.Prelude.Types.Left', E133} -> (fun (V372) -> {'Idris.Prelude.Types.Left', V372} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V373) -> case V373 of {'Idris.Prelude.Types.Just', E135} -> (fun (V374) -> begin (V375 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V374, V343))), case V375 of {'Idris.Prelude.Types.Left', E136} -> (fun (V376) -> {'Idris.Prelude.Types.Left', V376} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V377) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V340, V342, V377, V339, V343)) end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V340, V342, 0, V339, V343)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V378) -> begin (V380 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V379) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V379)) end, V339, []))(V378))), case V380 of {'Idris.Prelude.Types.Left', E104} -> (fun (V381) -> {'Idris.Prelude.Types.Left', V381} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V382) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V383) -> fun (V384) -> fun (V385) -> fun (V386) -> fun (V387) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V385, V386, V387)) end end end end end, fun (V388) -> fun (V389) -> fun (V390) -> fun (V391) -> fun (V392) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V390, V391, V392)) end end end end end, fun (V393) -> fun (V394) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V394)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V395) -> fun (V396) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V395, V396)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V382))} end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E101, E102, E103)); _ -> fun (V397) -> begin (V399 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V398) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V398)) end, V339, []))(V397))), case V399 of {'Idris.Prelude.Types.Left', E99} -> (fun (V400) -> {'Idris.Prelude.Types.Left', V400} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V401) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V402) -> fun (V403) -> fun (V404) -> fun (V405) -> fun (V406) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V404, V405, V406)) end end end end end, fun (V407) -> fun (V408) -> fun (V409) -> fun (V410) -> fun (V411) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V409, V410, V411)) end end end end end, fun (V412) -> fun (V413) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V413)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V414) -> fun (V415) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V414, V415)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V401))} end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.Termination.Toplevel'} -> (fun () -> case V13 of {'Idris.Builtin.MkPair', E270, E271} -> (fun (V416, V417) -> case V416 of {'Idris.Core.TT.Ref', E313, E314, E315} -> (fun (V418, V419, V420) -> case V419 of {'Idris.Core.TT.DataCon', E357, E358} -> (fun (V421, V422) -> fun (V423) -> begin (V425 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V424) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Guarded'}, V2, V424)) end, V417, []))(V423))), case V425 of {'Idris.Prelude.Types.Left', E359} -> (fun (V426) -> {'Idris.Prelude.Types.Left', V426} end(E359)); {'Idris.Prelude.Types.Right', E360} -> (fun (V427) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V428) -> fun (V429) -> fun (V430) -> fun (V431) -> fun (V432) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V430, V431, V432)) end end end end end, fun (V433) -> fun (V434) -> fun (V435) -> fun (V436) -> fun (V437) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V435, V436, V437)) end end end end end, fun (V438) -> fun (V439) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V439)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V440) -> fun (V441) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V440, V441)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V427))} end(E360)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E357, E358)); _ -> case V13 of {'Idris.Builtin.MkPair', E316, E317} -> (fun (V442, V443) -> case V442 of {'Idris.Core.TT.Ref', E320, E321, E322} -> (fun (V444, V445, V446) -> case V445 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V447) -> begin (V475 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V446, case V5 of {'Idris.Core.Context.MkDefs', E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351} -> (fun (V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474) -> V448 end(E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V447))), case V475 of {'Idris.Prelude.Types.Left', E352} -> (fun (V476) -> {'Idris.Prelude.Types.Left', V476} end(E352)); {'Idris.Prelude.Types.Right', E353} -> (fun (V477) -> case V477 of {'Idris.Prelude.Types.Just', E354} -> (fun (V478) -> begin (V479 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V478, V447))), case V479 of {'Idris.Prelude.Types.Left', E355} -> (fun (V480) -> {'Idris.Prelude.Types.Left', V480} end(E355)); {'Idris.Prelude.Types.Right', E356} -> (fun (V481) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V444, V446, V481, V443, V447)) end(E356)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E354)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V444, V446, 0, V443, V447)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V482) -> begin (V484 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V483) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V483)) end, V443, []))(V482))), case V484 of {'Idris.Prelude.Types.Left', E323} -> (fun (V485) -> {'Idris.Prelude.Types.Left', V485} end(E323)); {'Idris.Prelude.Types.Right', E324} -> (fun (V486) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V487) -> fun (V488) -> fun (V489) -> fun (V490) -> fun (V491) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V489, V490, V491)) end end end end end, fun (V492) -> fun (V493) -> fun (V494) -> fun (V495) -> fun (V496) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V494, V495, V496)) end end end end end, fun (V497) -> fun (V498) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V498)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V499) -> fun (V500) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V499, V500)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V486))} end(E324)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E320, E321, E322)); _ -> fun (V501) -> begin (V503 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V502) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V502)) end, V443, []))(V501))), case V503 of {'Idris.Prelude.Types.Left', E318} -> (fun (V504) -> {'Idris.Prelude.Types.Left', V504} end(E318)); {'Idris.Prelude.Types.Right', E319} -> (fun (V505) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V506) -> fun (V507) -> fun (V508) -> fun (V509) -> fun (V510) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V508, V509, V510)) end end end end end, fun (V511) -> fun (V512) -> fun (V513) -> fun (V514) -> fun (V515) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V513, V514, V515)) end end end end end, fun (V516) -> fun (V517) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V517)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V518) -> fun (V519) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V518, V519)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V505))} end(E319)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E316, E317)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E313, E314, E315)); _ -> case V13 of {'Idris.Builtin.MkPair', E272, E273} -> (fun (V520, V521) -> case V520 of {'Idris.Core.TT.Ref', E276, E277, E278} -> (fun (V522, V523, V524) -> case V523 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V525) -> begin (V553 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V524, case V5 of {'Idris.Core.Context.MkDefs', E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307} -> (fun (V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552) -> V526 end(E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305, E306, E307)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V525))), case V553 of {'Idris.Prelude.Types.Left', E308} -> (fun (V554) -> {'Idris.Prelude.Types.Left', V554} end(E308)); {'Idris.Prelude.Types.Right', E309} -> (fun (V555) -> case V555 of {'Idris.Prelude.Types.Just', E310} -> (fun (V556) -> begin (V557 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V556, V525))), case V557 of {'Idris.Prelude.Types.Left', E311} -> (fun (V558) -> {'Idris.Prelude.Types.Left', V558} end(E311)); {'Idris.Prelude.Types.Right', E312} -> (fun (V559) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V522, V524, V559, V521, V525)) end(E312)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E310)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V522, V524, 0, V521, V525)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V560) -> begin (V562 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V561) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V561)) end, V521, []))(V560))), case V562 of {'Idris.Prelude.Types.Left', E279} -> (fun (V563) -> {'Idris.Prelude.Types.Left', V563} end(E279)); {'Idris.Prelude.Types.Right', E280} -> (fun (V564) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V565) -> fun (V566) -> fun (V567) -> fun (V568) -> fun (V569) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V567, V568, V569)) end end end end end, fun (V570) -> fun (V571) -> fun (V572) -> fun (V573) -> fun (V574) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V572, V573, V574)) end end end end end, fun (V575) -> fun (V576) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V576)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V577) -> fun (V578) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V577, V578)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V564))} end(E280)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E276, E277, E278)); _ -> fun (V579) -> begin (V581 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V580) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V580)) end, V521, []))(V579))), case V581 of {'Idris.Prelude.Types.Left', E274} -> (fun (V582) -> {'Idris.Prelude.Types.Left', V582} end(E274)); {'Idris.Prelude.Types.Right', E275} -> (fun (V583) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V584) -> fun (V585) -> fun (V586) -> fun (V587) -> fun (V588) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V586, V587, V588)) end end end end end, fun (V589) -> fun (V590) -> fun (V591) -> fun (V592) -> fun (V593) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V591, V592, V593)) end end end end end, fun (V594) -> fun (V595) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V595)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V596) -> fun (V597) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V596, V597)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V583))} end(E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E272, E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E270, E271)); _ -> case V13 of {'Idris.Builtin.MkPair', E229, E230} -> (fun (V598, V599) -> case V598 of {'Idris.Core.TT.Ref', E233, E234, E235} -> (fun (V600, V601, V602) -> case V601 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V603) -> begin (V631 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V602, case V5 of {'Idris.Core.Context.MkDefs', E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264} -> (fun (V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630) -> V604 end(E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V603))), case V631 of {'Idris.Prelude.Types.Left', E265} -> (fun (V632) -> {'Idris.Prelude.Types.Left', V632} end(E265)); {'Idris.Prelude.Types.Right', E266} -> (fun (V633) -> case V633 of {'Idris.Prelude.Types.Just', E267} -> (fun (V634) -> begin (V635 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V634, V603))), case V635 of {'Idris.Prelude.Types.Left', E268} -> (fun (V636) -> {'Idris.Prelude.Types.Left', V636} end(E268)); {'Idris.Prelude.Types.Right', E269} -> (fun (V637) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V600, V602, V637, V599, V603)) end(E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E267)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V600, V602, 0, V599, V603)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E266)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V638) -> begin (V640 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V639) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V639)) end, V599, []))(V638))), case V640 of {'Idris.Prelude.Types.Left', E236} -> (fun (V641) -> {'Idris.Prelude.Types.Left', V641} end(E236)); {'Idris.Prelude.Types.Right', E237} -> (fun (V642) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V643) -> fun (V644) -> fun (V645) -> fun (V646) -> fun (V647) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V645, V646, V647)) end end end end end, fun (V648) -> fun (V649) -> fun (V650) -> fun (V651) -> fun (V652) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V650, V651, V652)) end end end end end, fun (V653) -> fun (V654) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V654)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V655) -> fun (V656) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V655, V656)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V642))} end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E233, E234, E235)); _ -> fun (V657) -> begin (V659 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V658) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V658)) end, V599, []))(V657))), case V659 of {'Idris.Prelude.Types.Left', E231} -> (fun (V660) -> {'Idris.Prelude.Types.Left', V660} end(E231)); {'Idris.Prelude.Types.Right', E232} -> (fun (V661) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V662) -> fun (V663) -> fun (V664) -> fun (V665) -> fun (V666) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V664, V665, V666)) end end end end end, fun (V667) -> fun (V668) -> fun (V669) -> fun (V670) -> fun (V671) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V669, V670, V671)) end end end end end, fun (V672) -> fun (V673) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V673)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V674) -> fun (V675) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V674, V675)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V661))} end(E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E229, E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V676, V677) -> case V676 of {'Idris.Core.TT.Ref', E6, E7, E8} -> (fun (V678, V679, V680) -> case V679 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V681) -> begin (V709 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V680, case V5 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V682, V683, V684, V685, V686, V687, V688, V689, V690, V691, V692, V693, V694, V695, V696, V697, V698, V699, V700, V701, V702, V703, V704, V705, V706, V707, V708) -> V682 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V681))), case V709 of {'Idris.Prelude.Types.Left', E38} -> (fun (V710) -> {'Idris.Prelude.Types.Left', V710} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V711) -> case V711 of {'Idris.Prelude.Types.Just', E40} -> (fun (V712) -> begin (V713 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V6, [], V5, {'Idris.Core.Env.Nil'}, V712, V681))), case V713 of {'Idris.Prelude.Types.Left', E41} -> (fun (V714) -> {'Idris.Prelude.Types.Left', V714} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V715) -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V678, V680, V715, V677, V681)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--findSCcall'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V678, V680, 0, V677, V681)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V716) -> begin (V718 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V717) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V717)) end, V677, []))(V716))), case V718 of {'Idris.Prelude.Types.Left', E9} -> (fun (V719) -> {'Idris.Prelude.Types.Left', V719} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V720) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V721) -> fun (V722) -> fun (V723) -> fun (V724) -> fun (V725) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V723, V724, V725)) end end end end end, fun (V726) -> fun (V727) -> fun (V728) -> fun (V729) -> fun (V730) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V728, V729, V730)) end end end end end, fun (V731) -> fun (V732) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V732)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V733) -> fun (V734) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V733, V734)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V720))} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E6, E7, E8)); _ -> fun (V735) -> begin (V737 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V736) -> ('un--findSC'(V0, V6, V5, V4, {'Idris.Core.Termination.Unguarded'}, V2, V736)) end, V677, []))(V735))), case V737 of {'Idris.Prelude.Types.Left', E4} -> (fun (V738) -> {'Idris.Prelude.Types.Left', V738} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V739) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V740) -> fun (V741) -> fun (V742) -> fun (V743) -> fun (V744) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V742, V743, V744)) end end end end end, fun (V745) -> fun (V746) -> fun (V747) -> fun (V748) -> fun (V749) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V747, V748, V749)) end end end end end, fun (V750) -> fun (V751) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V751)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V752) -> fun (V753) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V752, V753)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V739))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findSC-2164'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> begin (V11 = (('nested--9395-1911--in--un--conIfGuarded'(V0, V1, V2, V3, V4, V5, V6, V7))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = {'Idris.Prelude.Types.Nothing'}), (('case--case block in case block in findSC-2200'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V13, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V13, V8}}))(V10)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', V15} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findSC-2136'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('nested--9395-1910--in--un--handleCase'(V0, V1, V2, V3, V4, V5, V6, V8, V9))(V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V14 = (('nested--9395-1911--in--un--conIfGuarded'(V0, V1, V2, V3, V4, V5, V6, V8))(V10))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = {'Idris.Prelude.Types.Nothing'}), (('case--case block in case block in findSC-2200'(V0, V1, V2, V3, V4, V5, V6, V8, V9, V17, V16, {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V16, V9}}))(V10)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Right', V18} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findSC,conIfGuarded-2045'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.DataCon', 0, 0}, V7}} end; 1 -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Func'}, V7}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findSC,conIfGuarded-2017'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V12 = {'Idris.Prelude.Types.Just', V11}), ('case--case block in findSC,conIfGuarded-2045'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V12, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--==_Eq_DefFlag'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--/=_Eq_DefFlag'(V15, V16)) end end}, {'Idris.Core.Context.AllGuarded'}, case V11 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V28 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Func'}, V7}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findSC,handleCase-1926'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of 0 -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V16}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V17) -> ('un--findSCcall'(V0, V6, V5, V4, V3, V2, V9, V7, (1 + (1 + (1 + (1 + 0)))), V10, V17)) end, V13)) end; 1 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findSC-1846'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V12, V13) -> {'Idris.Builtin.MkPair', V12, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V13))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--delazy-1686'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Core.TT.LInf'} -> (fun () -> {'Idris.Core.TT.TForce', V3, V2, ('un--delazy'('erased', V4, V1))} end()); _ -> ('un--delazy'('erased', V4, V1)) end.
'case--delazy-1648'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V3 of {'Idris.Core.TT.LInf'} -> (fun () -> {'Idris.Core.TT.TDelay', V4, V3, V6, V7} end()); _ -> V7 end.
'case--delazy-1614'(V0, V1, V2, V3, V4, V5) -> case V2 of {'Idris.Core.TT.LInf'} -> (fun () -> {'Idris.Core.TT.TDelayed', V3, V2, V5} end()); _ -> V5 end.
'case--checkIfGuarded-1343'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Core.Context.PMDef', E1, E2, E3, E4, E5} -> (fun (V6, V7, V8, V9, V10) -> fun (V11) -> begin (V12 = (('nested--8447-923--in--un--allGuarded'(V0, V1, V2, V10))(V11))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> case V14 of 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V2, V1, V0, {'Idris.Core.Context.AllGuarded'}, V11)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3, E4, E5)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--checkIfGuarded,allGuarded-1269'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> ('nested--8447-923--in--un--allGuarded'(V0, V1, V2, V7)); 1 -> fun (V9) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkIfGuarded,guarded-1168'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> ('Idris.Idris2.Core.Core':'un--allM'('erased', fun (V12) -> fun (V13) -> ('nested--8447-921--in--un--checkNotFn'(V0, V1, V2, V6, V12, V13)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V11)))))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', 1} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkIfGuarded,guarded-1141'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V0, case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V11 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V38 of {'Idris.Prelude.Types.Left', E27} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E29} -> (fun (V41) -> (('Idris.Idris2.Core.Core':'un--allM'('erased', fun (V42) -> fun (V43) -> ('nested--8447-921--in--un--checkNotFn'(V0, V1, V2, V6, V42, V43)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V41))))))(V10)) end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V44) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkIfGuarded,checkNotFn-1043'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.DCon', E42, E43, E44} -> (fun (V8, V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', 0} end end(E42, E43, E44)); _ -> fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V34) -> fun (V35) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V34, V35)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V36) -> fun (V37) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V36, V37)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), fun () -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Context':'dn--un--==_Eq_DefFlag'(V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--/=_Eq_DefFlag'(V40, V41)) end end}, {'Idris.Core.Context.AllGuarded'}, case V5 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V53 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))} end end.
'case--checkIfGuarded,checkNotFn-1028'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in checkIfGuarded,checkNotFn-1043'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V29) -> {'Idris.Prelude.Types.Right', 1} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkIfGuarded,guardedNF-961'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--==_Eq_DefFlag'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--/=_Eq_DefFlag'(V15, V16)) end end}, {'Idris.Core.Context.AllGuarded'}, case V11 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V28 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V38) -> {'Idris.Prelude.Types.Right', 1} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in totRefs-843'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V8) -> case V8 of {'Idris.Core.TT.BadCall', E1} -> (fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V13, V14)) end end}, {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.BadCall', [V0 | V9]}}, V10)) end end(E1)); _ -> fun (V15) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V18, V19)) end end}, {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.BadCall', [V0 | []]}}, V15)) end end end(E0)); _ -> fun (V20) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V23, V24)) end end}, {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.BadCall', [V0 | []]}}, V20)) end end.
'case--case block in totRefs-768'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', V4} end end()); {'Idris.Core.TT.Unchecked'} -> (fun () -> fun (V9) -> begin (V17 = begin (V14 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V12, V13)) end end}, V0, V9))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V3, <<"totality"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Totality unchecked for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)))) end))(V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Right', V4} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> case V4 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V20) -> case V20 of {'Idris.Core.TT.BadCall', E1} -> (fun (V21) -> fun (V22) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V25, V26)) end end}, {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.BadCall', [V0 | V21]}}, V22)) end end(E1)); _ -> fun (V27) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V30, V31)) end end}, {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.BadCall', [V0 | []]}}, V27)) end end end(E0)); _ -> fun (V32) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V33) -> fun (V34) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Terminating'(V33, V34)) end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Terminating'(V35, V36)) end end}, {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.BadCall', [V0 | []]}}, V32)) end end end.
'case--totRefs-753'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in totRefs-768'(V0, V1, V2, V3, V4, V6, V7, case case V6 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V18 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.TT.MkTotality', E1, E2} -> (fun (V29, V30) -> V29 end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', V4} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10746-2981--in--un--urhs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V10, V11, V12) -> {'Idris.Core.TT.Erased', V10, 1} end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V13, V14, V15) -> {'Idris.Core.TT.Ref', V13, V14, V15} end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V16, V17, V18, V19) -> {'Idris.Core.TT.Meta', V16, V17, V18, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V20)) end, V19))} end(E6, E7, E8, E9)); {'Idris.Core.TT.App', E10, E11, E12} -> (fun (V21, V22, V23) -> {'Idris.Core.TT.App', V21, ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V22)), ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V23))} end(E10, E11, E12)); {'Idris.Core.TT.As', E13, E14, E15, E16} -> (fun (V24, V25, V26, V27) -> {'Idris.Core.TT.As', V24, V25, ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V26)), ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V27))} end(E13, E14, E15, E16)); {'Idris.Core.TT.TDelayed', E17, E18, E19} -> (fun (V28, V29, V30) -> {'Idris.Core.TT.TDelayed', V28, V29, ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V30))} end(E17, E18, E19)); {'Idris.Core.TT.TDelay', E20, E21, E22, E23} -> (fun (V31, V32, V33, V34) -> {'Idris.Core.TT.TDelay', V31, V32, ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V33)), ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V34))} end(E20, E21, E22, E23)); {'Idris.Core.TT.TForce', E24, E25, E26} -> (fun (V35, V36, V37) -> {'Idris.Core.TT.TForce', V35, V36, ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V37))} end(E24, E25, E26)); {'Idris.Core.TT.Bind', E27, E28, E29, E30} -> (fun (V38, V39, V40, V41) -> {'Idris.Core.TT.Bind', V38, V39, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'('erased', 'erased', fun (V42) -> ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V7, V8, V42)) end, V40)), ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, [V39 | V5], [V39 | V7], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V43) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V43)))), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V43))))} end, V8)), V41))} end(E27, E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V44, V45) -> {'Idris.Core.TT.PrimVal', V44, V45} end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V46, V47) -> {'Idris.Core.TT.Erased', V46, V47} end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V48) -> {'Idris.Core.TT.TType', V48} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('case--getCasePats,updateRHS-3278'(V0, V1, V2, V3, V4, V5, V8, V6, V7, ('nested--10746-2982--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V8, V6, V7, V8, V7)))).
'nested--9409-2975--in--un--updatePat'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', V9, ('nested--9409-2974--in--un--updateRHS'(V0, V1, V2, V3, V4, V5, V6, V7, V10))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11858-3989--in--un--updateArg'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Prelude.Types.Just', E12} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E25, E26} -> (fun (V9, V10) -> case V10 of {'Idris.Core.Context.Unknown'} -> (fun () -> V7 end()); _ -> case V6 of {'Idris.Core.Context.Unknown'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Just', E33} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E37, E38} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V12, {'Idris.Core.Context.Unknown'}}} end(E37, E38)); _ -> case V7 of {'Idris.Prelude.Types.Just', E34} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E35, E36} -> (fun (V15, V16) -> case V16 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V15, V6}} end()); _ -> V7 end end(E35, E36)); _ -> V7 end end(E34)); _ -> V7 end end end(E33)); _ -> case V7 of {'Idris.Prelude.Types.Just', E30} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V18, V19) -> case V19 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V18, V6}} end()); _ -> V7 end end(E31, E32)); _ -> V7 end end(E30)); _ -> V7 end end end()); _ -> case V7 of {'Idris.Prelude.Types.Just', E27} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V21, V22) -> case V22 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V21, V6}} end()); _ -> V7 end end(E28, E29)); _ -> V7 end end(E27)); _ -> V7 end end end end(E25, E26)); _ -> case V6 of {'Idris.Core.Context.Unknown'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Just', E19} -> (fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E23, E24} -> (fun (V24, V25) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V24, {'Idris.Core.Context.Unknown'}}} end(E23, E24)); _ -> case V7 of {'Idris.Prelude.Types.Just', E20} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V27, V28) -> case V28 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V27, V6}} end()); _ -> V7 end end(E21, E22)); _ -> V7 end end(E20)); _ -> V7 end end end(E19)); _ -> case V7 of {'Idris.Prelude.Types.Just', E16} -> (fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E17, E18} -> (fun (V30, V31) -> case V31 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V30, V6}} end()); _ -> V7 end end(E17, E18)); _ -> V7 end end(E16)); _ -> V7 end end end()); _ -> case V7 of {'Idris.Prelude.Types.Just', E13} -> (fun (V32) -> case V32 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V33, V34) -> case V34 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V33, V6}} end()); _ -> V7 end end(E14, E15)); _ -> V7 end end(E13)); _ -> V7 end end end end(E12)); _ -> case V6 of {'Idris.Core.Context.Unknown'} -> (fun () -> case V7 of {'Idris.Prelude.Types.Just', E6} -> (fun (V35) -> case V35 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V36, V37) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V36, {'Idris.Core.Context.Unknown'}}} end(E10, E11)); _ -> case V7 of {'Idris.Prelude.Types.Just', E7} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V39, V40) -> case V40 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V39, V6}} end()); _ -> V7 end end(E8, E9)); _ -> V7 end end(E7)); _ -> V7 end end end(E6)); _ -> case V7 of {'Idris.Prelude.Types.Just', E3} -> (fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V42, V6}} end()); _ -> V7 end end(E4, E5)); _ -> V7 end end(E3)); _ -> V7 end end end()); _ -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V45, V46) -> case V46 of {'Idris.Core.Context.Same'} -> (fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V45, V6}} end()); _ -> V7 end end(E1, E2)); _ -> V7 end end(E0)); _ -> V7 end end end.
'nested--11858-3990--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> []; [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> [{'Idris.Prelude.Types.Nothing'} | ('nested--11858-3990--in--un--mkArgs'(V0, V1, V2, V3, V4, V5, V8))] end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> ('case--checkSC,mkArgs-4114'(V0, V1, V2, V3, V4, V5, V10, V11, V8, ('nested--11858-3988--in--un--getPos'(V0, V1, V2, V3, V4, V5, 'erased', V1, V10)))) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9409-2976--in--un--matchArgs'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> begin (V12 = ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', V1, ('Idris.Idris2.Core.TT':'un--getArgs'('erased', V10))))))), {'Idris.Builtin.DPair.MkDPair', V6, {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> ('nested--9409-2975--in--un--updatePat'(V0, V1, V2, V3, V4, V0, V6, V12, V13)) end, V2)), V11}}} end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10746-2982--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> case V9 of {'Idris.Core.TT.As', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('nested--10746-2982--in--un--lookupTm'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14, V10)), fun (V15) -> {'Idris.Prelude.Types.Just', {'Idris.Core.TT.As', V11, V12, V15, ('nested--10746-2981--in--un--urhs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V14))}} end)) end(E8, E9, E10, E11)); _ -> case V10 of [E0 | E1] -> (fun (V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> case V18 of {'Idris.Core.TT.As', E4, E5, E6, E7} -> (fun (V20, V21, V22, V23) -> ('case--getCasePats,updateRHS,lookupTm-3117'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V23, V22, V21, V20, V19, V17, V9, ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'('erased', V9, V22)))) end(E4, E5, E6, E7)); _ -> ('case--getCasePats,updateRHS,lookupTm-3218'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V18, V19, V17, V9, ('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'('erased', V9, V18)))) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--9395-1910--in--un--handleCase'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V9, V10, V11) -> fun (V12) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V6, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V15, V16)) end end}, V11, V12))), case V17 of {'Idris.Prelude.Types.Left', E3} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> (('case--findSC,handleCase-1926'(V0, V1, V2, V3, V4, V5, V6, V11, V10, V9, V8, V19, ('un--caseFn'(V19))))(V12)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'nested--8447-920--in--un--guardedNF'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NApp', E5, E6, E7} -> (fun (V13, V14, V15) -> case V14 of {'Idris.Core.Value.NRef', E8, E9} -> (fun (V16, V17) -> fun (V18) -> begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V17, case V4 of {'Idris.Core.Context.MkDefs', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V19 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V18))), case V46 of {'Idris.Prelude.Types.Left', E37} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E39} -> (fun (V49) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'dn--un--==_Eq_DefFlag'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Context':'dn--un--/=_Eq_DefFlag'(V52, V53)) end end}, {'Idris.Core.Context.AllGuarded'}, case V49 of {'Idris.Core.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V65 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E39)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> fun (V75) -> {'Idris.Prelude.Types.Right', 1} end end end(E5, E6, E7)); _ -> fun (V76) -> {'Idris.Prelude.Types.Right', 1} end end.
'nested--8447-922--in--un--guarded'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V10, V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Normalise':'un--nf'(V2, V3, V13, V4, V5))(V6))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = (('nested--8447-920--in--un--guardedNF'(V0, V1, V2, V3, V10, V4, V16))(V6))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> case V19 of 0 -> begin (V47 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V0, case V10 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V20 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V47 of {'Idris.Prelude.Types.Left', E35} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V49) -> case V49 of {'Idris.Prelude.Types.Just', E37} -> (fun (V50) -> (('Idris.Idris2.Core.Core':'un--allM'('erased', fun (V51) -> fun (V52) -> ('nested--8447-921--in--un--checkNotFn'(V0, V1, V2, V10, V51, V52)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V50))))))(V6)) end(E37)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11858-3992--in--un--getWorst'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> V6; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> ('nested--11858-3992--in--un--getWorst'(V0, V1, V2, V3, V4, V5, V6, V9)) end()); {'Idris.Core.TT.Unchecked'} -> (fun () -> ('nested--11858-3992--in--un--getWorst'(V0, V1, V2, V3, V4, V5, {'Idris.Core.TT.Unchecked'}, V9)) end()); _ -> V8 end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11858-3988--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V9, V10) -> case V8 of 0 -> {'Idris.Prelude.Types.Just', V9}; _ -> begin (V11 = (V8 - 1)), ('nested--11858-3988--in--un--getPos'(V0, V1, V2, V3, V4, V5, 'erased', V10, V11)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9395-1804--in--un--findSCbinder'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.TT.Let', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> ('un--findSC'(V1, V9, V8, V7, V6, V5, V13)) end(E0, E1, E2, E3)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', []} end end.
'nested--13285-5313--in--un--dropParams'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> []; [E0 | E1] -> (fun (V11, V12) -> ('case--posArg,dropParams-5330'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V12, V9, V8, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V15, V16)) end end}, V8, V9)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11858-3993--in--un--continue'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> ('nested--11858-3991--in--un--checkCall'(V0, V1, V2, V3, V4, V5, V7, V9)) end, V6, []))(V8))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('nested--11858-3992--in--un--getWorst'(V0, V1, V2, V3, V4, V5, {'Idris.Core.TT.IsTerminating'}, V12))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--9395-1911--in--un--conIfGuarded'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V8, V9, V10) -> case V9 of {'Idris.Core.TT.Func'} -> (fun () -> fun (V11) -> begin (V13 = begin (V12 = ('erlang':'get'(V6))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> begin (V43 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V10, case V15 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V16 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V43 of {'Idris.Prelude.Types.Left', E32} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V45) -> case V45 of {'Idris.Prelude.Types.Just', E34} -> (fun (V46) -> begin (V47 = {'Idris.Prelude.Types.Just', V46}), (('case--case block in findSC,conIfGuarded-2045'(V0, V1, V2, V3, V4, V5, V6, V10, V8, V15, V46, V47, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Context':'dn--un--==_Eq_DefFlag'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'dn--un--/=_Eq_DefFlag'(V50, V51)) end end}, {'Idris.Core.Context.AllGuarded'}, case V46 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V63 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V11)) end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V8, {'Idris.Core.TT.Func'}, V10}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V73) -> {'Idris.Prelude.Types.Right', V7} end end end(E0, E1, E2)); _ -> fun (V74) -> {'Idris.Prelude.Types.Right', V7} end end.
'nested--8447-921--in--un--checkNotFn'(V0, V1, V2, V3, V4, V5) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V33 of {'Idris.Prelude.Types.Left', E27} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E29} -> (fun (V36) -> begin (V37 = {'Idris.Prelude.Types.Just', V36}), (('case--case block in checkIfGuarded,checkNotFn-1043'(V0, V1, V2, V4, V3, V36, V37, case V36 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V55 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11858-3987--in--un--checkDesc'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.RecPath', ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V8)) end, V7))))}}; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Core.Context.Smaller'} -> (fun () -> {'Idris.Core.TT.IsTerminating'} end()); _ -> ('nested--11858-3987--in--un--checkDesc'(V0, V1, V2, V3, V4, V5, V10, V7)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11858-3991--in--un--checkCall'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V15 = ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V10, V11)) end end}, case V7 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V12, V13) -> V12 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V14)) end, V6))))), fun (V16) -> begin (V46 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(case V7 of {'Idris.Core.Context.MkSCCall', E2, E3} -> (fun (V17, V18) -> V17 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V19 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V46 of {'Idris.Prelude.Types.Left', E31} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V48) -> case V48 of {'Idris.Prelude.Types.Just', E33} -> (fun (V49) -> begin (V50 = {'Idris.Prelude.Types.Just', V49}), (('case--case block in checkSC,checkCall-4206'(V0, V1, V2, V3, V4, V5, V7, V6, V15, V49, V50, case case V49 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V61 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.TT.MkTotality', E34, E35} -> (fun (V72, V73) -> V72 end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16)) end end(E33)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--8447-923--in--un--allGuarded'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.DPair.MkDPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = ('nested--8447-922--in--un--guarded'(V0, V1, V2, V7, V9, V12, V13))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> case V16 of 0 -> (('nested--8447-923--in--un--allGuarded'(V0, V1, V2, V6))(V13)); 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12695-4757--in--un--addCases\x{27}'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', V4))} end; [E0 | E1] -> (fun (V7, V8) -> ('case--calcTerminating,addCases\x{27}-4774'(V0, V1, V2, V7, V8, V4, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V7, V4)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12695-4758--in--un--addCases'(V0, V1, V2, V3, V4) -> ('nested--12695-4757--in--un--addCases\x{27}'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), V4)).
'un--totRefsIn'(V0, V1, V2, V3) -> ('un--totRefs'(V1, V2, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getRefs'('erased', {'Idris.Core.Name.Resolved', ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg_Int'(1))}, V3)))))).
'un--totRefs'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end; [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> begin (V7 = (('un--totRefs'(V0, V1, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V1 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V10 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V37 of {'Idris.Prelude.Types.Left', E31} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E33} -> (fun (V40) -> begin (V41 = {'Idris.Prelude.Types.Just', V40}), (('case--case block in totRefs-768'(V4, V5, V1, V0, V9, V40, V41, case case V40 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V52 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.TT.MkTotality', E34, E35} -> (fun (V63, V64) -> V63 end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6)) end end(E33)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V9} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--smallerArg'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.As', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> ('un--smallerArg'('erased', V1, V2, V3, V9, V5)) end(E0, E1, E2, E3)); _ -> ('Idris.Idris2.Prelude.Basics':'un--||'(('un--assertedSmaller'('erased', V3, V5)), ('case--smallerArg-2720'('erased', V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V5)))))) end.
'un--smaller'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Erased', E0, E1} -> (fun (V6, V7) -> 1 end(E0, E1)); {'Idris.Core.TT.As', E2, E3, E4, E5} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Basics':'un--||'(('un--smaller'('erased', V1, V2, V3, V4, V10)), fun () -> ('un--smaller'('erased', V1, V2, V3, V4, V11)) end)) end(E2, E3, E4, E5)); _ -> case V1 of 0 -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.TT':'dn--un--==_Eq_(Term $vars)'('erased', V4, V5)), fun () -> ('un--smallerArg'('erased', 0, V2, V3, V4, V5)) end)); _ -> ('un--smallerArg'('erased', V1, V2, V3, V4, V5)) end end.
'un--scEq'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Local', E124, E125, E126} -> (fun (V3, V4, V5) -> case V2 of {'Idris.Core.TT.Local', E251, E252, E253} -> (fun (V6, V7, V8) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V5, V8)) end(E251, E252, E253)); _ -> case V2 of {'Idris.Core.TT.Meta', E247, E248, E249, E250} -> (fun (V9, V10, V11, V12) -> 0 end(E247, E248, E249, E250)); _ -> case V1 of {'Idris.Core.TT.Bind', E161, E162, E163, E164} -> (fun (V13, V14, V15, V16) -> case V2 of {'Idris.Core.TT.Bind', E199, E200, E201, E202} -> (fun (V17, V18, V19, V20) -> 1 end(E199, E200, E201, E202)); _ -> case V2 of {'Idris.Core.TT.As', E195, E196, E197, E198} -> (fun (V21, V22, V23, V24) -> ('un--scEq'('erased', V1, V24)) end(E195, E196, E197, E198)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E165, E166, E167} -> (fun (V25, V26, V27) -> case V2 of {'Idris.Core.TT.TDelayed', E168, E169, E170} -> (fun (V28, V29, V30) -> ('un--scEq'('erased', V27, V30)) end(E168, E169, E170)); _ -> 1 end end(E165, E166, E167)); {'Idris.Core.TT.TDelay', E171, E172, E173, E174} -> (fun (V31, V32, V33, V34) -> case V2 of {'Idris.Core.TT.TDelay', E175, E176, E177, E178} -> (fun (V35, V36, V37, V38) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V33, V37)), fun () -> ('un--scEq'('erased', V34, V38)) end)) end(E175, E176, E177, E178)); _ -> 1 end end(E171, E172, E173, E174)); {'Idris.Core.TT.TForce', E179, E180, E181} -> (fun (V39, V40, V41) -> case V2 of {'Idris.Core.TT.TForce', E182, E183, E184} -> (fun (V42, V43, V44) -> ('un--scEq'('erased', V41, V44)) end(E182, E183, E184)); _ -> 1 end end(E179, E180, E181)); {'Idris.Core.TT.PrimVal', E185, E186} -> (fun (V45, V46) -> case V2 of {'Idris.Core.TT.PrimVal', E187, E188} -> (fun (V47, V48) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V46, V48)) end(E187, E188)); _ -> 1 end end(E185, E186)); {'Idris.Core.TT.Erased', E189, E190} -> (fun (V49, V50) -> case V2 of {'Idris.Core.TT.Erased', E191, E192} -> (fun (V51, V52) -> 0 end(E191, E192)); _ -> 1 end end(E189, E190)); {'Idris.Core.TT.TType', E193} -> (fun (V53) -> case V2 of {'Idris.Core.TT.TType', E194} -> (fun (V54) -> 0 end(E194)); _ -> 1 end end(E193)); _ -> 1 end end end end(E161, E162, E163, E164)); {'Idris.Core.TT.App', E203, E204, E205} -> (fun (V55, V56, V57) -> case V2 of {'Idris.Core.TT.App', E240, E241, E242} -> (fun (V58, V59, V60) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V56, V59)), fun () -> ('un--scEq'('erased', V57, V60)) end)) end(E240, E241, E242)); _ -> case V2 of {'Idris.Core.TT.As', E236, E237, E238, E239} -> (fun (V61, V62, V63, V64) -> ('un--scEq'('erased', V1, V64)) end(E236, E237, E238, E239)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E206, E207, E208} -> (fun (V65, V66, V67) -> case V2 of {'Idris.Core.TT.TDelayed', E209, E210, E211} -> (fun (V68, V69, V70) -> ('un--scEq'('erased', V67, V70)) end(E209, E210, E211)); _ -> 1 end end(E206, E207, E208)); {'Idris.Core.TT.TDelay', E212, E213, E214, E215} -> (fun (V71, V72, V73, V74) -> case V2 of {'Idris.Core.TT.TDelay', E216, E217, E218, E219} -> (fun (V75, V76, V77, V78) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V73, V77)), fun () -> ('un--scEq'('erased', V74, V78)) end)) end(E216, E217, E218, E219)); _ -> 1 end end(E212, E213, E214, E215)); {'Idris.Core.TT.TForce', E220, E221, E222} -> (fun (V79, V80, V81) -> case V2 of {'Idris.Core.TT.TForce', E223, E224, E225} -> (fun (V82, V83, V84) -> ('un--scEq'('erased', V81, V84)) end(E223, E224, E225)); _ -> 1 end end(E220, E221, E222)); {'Idris.Core.TT.PrimVal', E226, E227} -> (fun (V85, V86) -> case V2 of {'Idris.Core.TT.PrimVal', E228, E229} -> (fun (V87, V88) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V86, V88)) end(E228, E229)); _ -> 1 end end(E226, E227)); {'Idris.Core.TT.Erased', E230, E231} -> (fun (V89, V90) -> case V2 of {'Idris.Core.TT.Erased', E232, E233} -> (fun (V91, V92) -> 0 end(E232, E233)); _ -> 1 end end(E230, E231)); {'Idris.Core.TT.TType', E234} -> (fun (V93) -> case V2 of {'Idris.Core.TT.TType', E235} -> (fun (V94) -> 0 end(E235)); _ -> 1 end end(E234)); _ -> 1 end end end end(E203, E204, E205)); {'Idris.Core.TT.As', E243, E244, E245, E246} -> (fun (V95, V96, V97, V98) -> ('un--scEq'('erased', V98, V2)) end(E243, E244, E245, E246)); _ -> case V2 of {'Idris.Core.TT.As', E157, E158, E159, E160} -> (fun (V99, V100, V101, V102) -> ('un--scEq'('erased', V1, V102)) end(E157, E158, E159, E160)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E127, E128, E129} -> (fun (V103, V104, V105) -> case V2 of {'Idris.Core.TT.TDelayed', E130, E131, E132} -> (fun (V106, V107, V108) -> ('un--scEq'('erased', V105, V108)) end(E130, E131, E132)); _ -> 1 end end(E127, E128, E129)); {'Idris.Core.TT.TDelay', E133, E134, E135, E136} -> (fun (V109, V110, V111, V112) -> case V2 of {'Idris.Core.TT.TDelay', E137, E138, E139, E140} -> (fun (V113, V114, V115, V116) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V111, V115)), fun () -> ('un--scEq'('erased', V112, V116)) end)) end(E137, E138, E139, E140)); _ -> 1 end end(E133, E134, E135, E136)); {'Idris.Core.TT.TForce', E141, E142, E143} -> (fun (V117, V118, V119) -> case V2 of {'Idris.Core.TT.TForce', E144, E145, E146} -> (fun (V120, V121, V122) -> ('un--scEq'('erased', V119, V122)) end(E144, E145, E146)); _ -> 1 end end(E141, E142, E143)); {'Idris.Core.TT.PrimVal', E147, E148} -> (fun (V123, V124) -> case V2 of {'Idris.Core.TT.PrimVal', E149, E150} -> (fun (V125, V126) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V124, V126)) end(E149, E150)); _ -> 1 end end(E147, E148)); {'Idris.Core.TT.Erased', E151, E152} -> (fun (V127, V128) -> case V2 of {'Idris.Core.TT.Erased', E153, E154} -> (fun (V129, V130) -> 0 end(E153, E154)); _ -> 1 end end(E151, E152)); {'Idris.Core.TT.TType', E155} -> (fun (V131) -> case V2 of {'Idris.Core.TT.TType', E156} -> (fun (V132) -> 0 end(E156)); _ -> 1 end end(E155)); _ -> 1 end end end end end end(E124, E125, E126)); {'Idris.Core.TT.Ref', E254, E255, E256} -> (fun (V133, V134, V135) -> case V2 of {'Idris.Core.TT.Ref', E381, E382, E383} -> (fun (V136, V137, V138) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V135, V138)) end(E381, E382, E383)); _ -> case V2 of {'Idris.Core.TT.Meta', E377, E378, E379, E380} -> (fun (V139, V140, V141, V142) -> 0 end(E377, E378, E379, E380)); _ -> case V1 of {'Idris.Core.TT.Bind', E291, E292, E293, E294} -> (fun (V143, V144, V145, V146) -> case V2 of {'Idris.Core.TT.Bind', E329, E330, E331, E332} -> (fun (V147, V148, V149, V150) -> 1 end(E329, E330, E331, E332)); _ -> case V2 of {'Idris.Core.TT.As', E325, E326, E327, E328} -> (fun (V151, V152, V153, V154) -> ('un--scEq'('erased', V1, V154)) end(E325, E326, E327, E328)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E295, E296, E297} -> (fun (V155, V156, V157) -> case V2 of {'Idris.Core.TT.TDelayed', E298, E299, E300} -> (fun (V158, V159, V160) -> ('un--scEq'('erased', V157, V160)) end(E298, E299, E300)); _ -> 1 end end(E295, E296, E297)); {'Idris.Core.TT.TDelay', E301, E302, E303, E304} -> (fun (V161, V162, V163, V164) -> case V2 of {'Idris.Core.TT.TDelay', E305, E306, E307, E308} -> (fun (V165, V166, V167, V168) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V163, V167)), fun () -> ('un--scEq'('erased', V164, V168)) end)) end(E305, E306, E307, E308)); _ -> 1 end end(E301, E302, E303, E304)); {'Idris.Core.TT.TForce', E309, E310, E311} -> (fun (V169, V170, V171) -> case V2 of {'Idris.Core.TT.TForce', E312, E313, E314} -> (fun (V172, V173, V174) -> ('un--scEq'('erased', V171, V174)) end(E312, E313, E314)); _ -> 1 end end(E309, E310, E311)); {'Idris.Core.TT.PrimVal', E315, E316} -> (fun (V175, V176) -> case V2 of {'Idris.Core.TT.PrimVal', E317, E318} -> (fun (V177, V178) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V176, V178)) end(E317, E318)); _ -> 1 end end(E315, E316)); {'Idris.Core.TT.Erased', E319, E320} -> (fun (V179, V180) -> case V2 of {'Idris.Core.TT.Erased', E321, E322} -> (fun (V181, V182) -> 0 end(E321, E322)); _ -> 1 end end(E319, E320)); {'Idris.Core.TT.TType', E323} -> (fun (V183) -> case V2 of {'Idris.Core.TT.TType', E324} -> (fun (V184) -> 0 end(E324)); _ -> 1 end end(E323)); _ -> 1 end end end end(E291, E292, E293, E294)); {'Idris.Core.TT.App', E333, E334, E335} -> (fun (V185, V186, V187) -> case V2 of {'Idris.Core.TT.App', E370, E371, E372} -> (fun (V188, V189, V190) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V186, V189)), fun () -> ('un--scEq'('erased', V187, V190)) end)) end(E370, E371, E372)); _ -> case V2 of {'Idris.Core.TT.As', E366, E367, E368, E369} -> (fun (V191, V192, V193, V194) -> ('un--scEq'('erased', V1, V194)) end(E366, E367, E368, E369)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E336, E337, E338} -> (fun (V195, V196, V197) -> case V2 of {'Idris.Core.TT.TDelayed', E339, E340, E341} -> (fun (V198, V199, V200) -> ('un--scEq'('erased', V197, V200)) end(E339, E340, E341)); _ -> 1 end end(E336, E337, E338)); {'Idris.Core.TT.TDelay', E342, E343, E344, E345} -> (fun (V201, V202, V203, V204) -> case V2 of {'Idris.Core.TT.TDelay', E346, E347, E348, E349} -> (fun (V205, V206, V207, V208) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V203, V207)), fun () -> ('un--scEq'('erased', V204, V208)) end)) end(E346, E347, E348, E349)); _ -> 1 end end(E342, E343, E344, E345)); {'Idris.Core.TT.TForce', E350, E351, E352} -> (fun (V209, V210, V211) -> case V2 of {'Idris.Core.TT.TForce', E353, E354, E355} -> (fun (V212, V213, V214) -> ('un--scEq'('erased', V211, V214)) end(E353, E354, E355)); _ -> 1 end end(E350, E351, E352)); {'Idris.Core.TT.PrimVal', E356, E357} -> (fun (V215, V216) -> case V2 of {'Idris.Core.TT.PrimVal', E358, E359} -> (fun (V217, V218) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V216, V218)) end(E358, E359)); _ -> 1 end end(E356, E357)); {'Idris.Core.TT.Erased', E360, E361} -> (fun (V219, V220) -> case V2 of {'Idris.Core.TT.Erased', E362, E363} -> (fun (V221, V222) -> 0 end(E362, E363)); _ -> 1 end end(E360, E361)); {'Idris.Core.TT.TType', E364} -> (fun (V223) -> case V2 of {'Idris.Core.TT.TType', E365} -> (fun (V224) -> 0 end(E365)); _ -> 1 end end(E364)); _ -> 1 end end end end(E333, E334, E335)); {'Idris.Core.TT.As', E373, E374, E375, E376} -> (fun (V225, V226, V227, V228) -> ('un--scEq'('erased', V228, V2)) end(E373, E374, E375, E376)); _ -> case V2 of {'Idris.Core.TT.As', E287, E288, E289, E290} -> (fun (V229, V230, V231, V232) -> ('un--scEq'('erased', V1, V232)) end(E287, E288, E289, E290)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E257, E258, E259} -> (fun (V233, V234, V235) -> case V2 of {'Idris.Core.TT.TDelayed', E260, E261, E262} -> (fun (V236, V237, V238) -> ('un--scEq'('erased', V235, V238)) end(E260, E261, E262)); _ -> 1 end end(E257, E258, E259)); {'Idris.Core.TT.TDelay', E263, E264, E265, E266} -> (fun (V239, V240, V241, V242) -> case V2 of {'Idris.Core.TT.TDelay', E267, E268, E269, E270} -> (fun (V243, V244, V245, V246) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V241, V245)), fun () -> ('un--scEq'('erased', V242, V246)) end)) end(E267, E268, E269, E270)); _ -> 1 end end(E263, E264, E265, E266)); {'Idris.Core.TT.TForce', E271, E272, E273} -> (fun (V247, V248, V249) -> case V2 of {'Idris.Core.TT.TForce', E274, E275, E276} -> (fun (V250, V251, V252) -> ('un--scEq'('erased', V249, V252)) end(E274, E275, E276)); _ -> 1 end end(E271, E272, E273)); {'Idris.Core.TT.PrimVal', E277, E278} -> (fun (V253, V254) -> case V2 of {'Idris.Core.TT.PrimVal', E279, E280} -> (fun (V255, V256) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V254, V256)) end(E279, E280)); _ -> 1 end end(E277, E278)); {'Idris.Core.TT.Erased', E281, E282} -> (fun (V257, V258) -> case V2 of {'Idris.Core.TT.Erased', E283, E284} -> (fun (V259, V260) -> 0 end(E283, E284)); _ -> 1 end end(E281, E282)); {'Idris.Core.TT.TType', E285} -> (fun (V261) -> case V2 of {'Idris.Core.TT.TType', E286} -> (fun (V262) -> 0 end(E286)); _ -> 1 end end(E285)); _ -> 1 end end end end end end(E254, E255, E256)); {'Idris.Core.TT.Meta', E384, E385, E386, E387} -> (fun (V263, V264, V265, V266) -> 0 end(E384, E385, E386, E387)); _ -> case V2 of {'Idris.Core.TT.Meta', E120, E121, E122, E123} -> (fun (V267, V268, V269, V270) -> 0 end(E120, E121, E122, E123)); _ -> case V1 of {'Idris.Core.TT.Bind', E34, E35, E36, E37} -> (fun (V271, V272, V273, V274) -> case V2 of {'Idris.Core.TT.Bind', E72, E73, E74, E75} -> (fun (V275, V276, V277, V278) -> 1 end(E72, E73, E74, E75)); _ -> case V2 of {'Idris.Core.TT.As', E68, E69, E70, E71} -> (fun (V279, V280, V281, V282) -> ('un--scEq'('erased', V1, V282)) end(E68, E69, E70, E71)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E38, E39, E40} -> (fun (V283, V284, V285) -> case V2 of {'Idris.Core.TT.TDelayed', E41, E42, E43} -> (fun (V286, V287, V288) -> ('un--scEq'('erased', V285, V288)) end(E41, E42, E43)); _ -> 1 end end(E38, E39, E40)); {'Idris.Core.TT.TDelay', E44, E45, E46, E47} -> (fun (V289, V290, V291, V292) -> case V2 of {'Idris.Core.TT.TDelay', E48, E49, E50, E51} -> (fun (V293, V294, V295, V296) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V291, V295)), fun () -> ('un--scEq'('erased', V292, V296)) end)) end(E48, E49, E50, E51)); _ -> 1 end end(E44, E45, E46, E47)); {'Idris.Core.TT.TForce', E52, E53, E54} -> (fun (V297, V298, V299) -> case V2 of {'Idris.Core.TT.TForce', E55, E56, E57} -> (fun (V300, V301, V302) -> ('un--scEq'('erased', V299, V302)) end(E55, E56, E57)); _ -> 1 end end(E52, E53, E54)); {'Idris.Core.TT.PrimVal', E58, E59} -> (fun (V303, V304) -> case V2 of {'Idris.Core.TT.PrimVal', E60, E61} -> (fun (V305, V306) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V304, V306)) end(E60, E61)); _ -> 1 end end(E58, E59)); {'Idris.Core.TT.Erased', E62, E63} -> (fun (V307, V308) -> case V2 of {'Idris.Core.TT.Erased', E64, E65} -> (fun (V309, V310) -> 0 end(E64, E65)); _ -> 1 end end(E62, E63)); {'Idris.Core.TT.TType', E66} -> (fun (V311) -> case V2 of {'Idris.Core.TT.TType', E67} -> (fun (V312) -> 0 end(E67)); _ -> 1 end end(E66)); _ -> 1 end end end end(E34, E35, E36, E37)); {'Idris.Core.TT.App', E76, E77, E78} -> (fun (V313, V314, V315) -> case V2 of {'Idris.Core.TT.App', E113, E114, E115} -> (fun (V316, V317, V318) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V314, V317)), fun () -> ('un--scEq'('erased', V315, V318)) end)) end(E113, E114, E115)); _ -> case V2 of {'Idris.Core.TT.As', E109, E110, E111, E112} -> (fun (V319, V320, V321, V322) -> ('un--scEq'('erased', V1, V322)) end(E109, E110, E111, E112)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E79, E80, E81} -> (fun (V323, V324, V325) -> case V2 of {'Idris.Core.TT.TDelayed', E82, E83, E84} -> (fun (V326, V327, V328) -> ('un--scEq'('erased', V325, V328)) end(E82, E83, E84)); _ -> 1 end end(E79, E80, E81)); {'Idris.Core.TT.TDelay', E85, E86, E87, E88} -> (fun (V329, V330, V331, V332) -> case V2 of {'Idris.Core.TT.TDelay', E89, E90, E91, E92} -> (fun (V333, V334, V335, V336) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V331, V335)), fun () -> ('un--scEq'('erased', V332, V336)) end)) end(E89, E90, E91, E92)); _ -> 1 end end(E85, E86, E87, E88)); {'Idris.Core.TT.TForce', E93, E94, E95} -> (fun (V337, V338, V339) -> case V2 of {'Idris.Core.TT.TForce', E96, E97, E98} -> (fun (V340, V341, V342) -> ('un--scEq'('erased', V339, V342)) end(E96, E97, E98)); _ -> 1 end end(E93, E94, E95)); {'Idris.Core.TT.PrimVal', E99, E100} -> (fun (V343, V344) -> case V2 of {'Idris.Core.TT.PrimVal', E101, E102} -> (fun (V345, V346) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V344, V346)) end(E101, E102)); _ -> 1 end end(E99, E100)); {'Idris.Core.TT.Erased', E103, E104} -> (fun (V347, V348) -> case V2 of {'Idris.Core.TT.Erased', E105, E106} -> (fun (V349, V350) -> 0 end(E105, E106)); _ -> 1 end end(E103, E104)); {'Idris.Core.TT.TType', E107} -> (fun (V351) -> case V2 of {'Idris.Core.TT.TType', E108} -> (fun (V352) -> 0 end(E108)); _ -> 1 end end(E107)); _ -> 1 end end end end(E76, E77, E78)); {'Idris.Core.TT.As', E116, E117, E118, E119} -> (fun (V353, V354, V355, V356) -> ('un--scEq'('erased', V356, V2)) end(E116, E117, E118, E119)); _ -> case V2 of {'Idris.Core.TT.As', E30, E31, E32, E33} -> (fun (V357, V358, V359, V360) -> ('un--scEq'('erased', V1, V360)) end(E30, E31, E32, E33)); _ -> case V1 of {'Idris.Core.TT.TDelayed', E0, E1, E2} -> (fun (V361, V362, V363) -> case V2 of {'Idris.Core.TT.TDelayed', E3, E4, E5} -> (fun (V364, V365, V366) -> ('un--scEq'('erased', V363, V366)) end(E3, E4, E5)); _ -> 1 end end(E0, E1, E2)); {'Idris.Core.TT.TDelay', E6, E7, E8, E9} -> (fun (V367, V368, V369, V370) -> case V2 of {'Idris.Core.TT.TDelay', E10, E11, E12, E13} -> (fun (V371, V372, V373, V374) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('un--scEq'('erased', V369, V373)), fun () -> ('un--scEq'('erased', V370, V374)) end)) end(E10, E11, E12, E13)); _ -> 1 end end(E6, E7, E8, E9)); {'Idris.Core.TT.TForce', E14, E15, E16} -> (fun (V375, V376, V377) -> case V2 of {'Idris.Core.TT.TForce', E17, E18, E19} -> (fun (V378, V379, V380) -> ('un--scEq'('erased', V377, V380)) end(E17, E18, E19)); _ -> 1 end end(E14, E15, E16)); {'Idris.Core.TT.PrimVal', E20, E21} -> (fun (V381, V382) -> case V2 of {'Idris.Core.TT.PrimVal', E22, E23} -> (fun (V383, V384) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V382, V384)) end(E22, E23)); _ -> 1 end end(E20, E21)); {'Idris.Core.TT.Erased', E24, E25} -> (fun (V385, V386) -> case V2 of {'Idris.Core.TT.Erased', E26, E27} -> (fun (V387, V388) -> 0 end(E26, E27)); _ -> 1 end end(E24, E25)); {'Idris.Core.TT.TType', E28} -> (fun (V389) -> case V2 of {'Idris.Core.TT.TType', E29} -> (fun (V390) -> 0 end(E29)); _ -> 1 end end(E28)); _ -> 1 end end end end end.
'un--posArg'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> fun (V9) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V5, case V1 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> begin (V52 = case V39 of {'Idris.Prelude.Types.Just', E34} -> (fun (V40) -> case V40 of {'Idris.Core.Context.TCon', E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48) -> ('nested--13285-5313--in--un--dropParams'(V4, V6, V7, V8, V5, V2, V1, V0, 0, V43, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V49) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V49)) end, V8)))) end(E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V50) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V50)) end, V8)) end end(E34)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V51) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V51)) end, V8)) end), begin (V54 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V53) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, [], V1, V53)) end, V52, []))(V9))), case V54 of {'Idris.Prelude.Types.Left', E43} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V56) -> begin (V58 = (('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V57) -> ('un--nameIn'(V0, V1, V2, V57)) end, V56))(V9))), case V58 of {'Idris.Prelude.Types.Left', E45} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V60) -> case V60 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.NotStrictlyPositive'}}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NBind', E47, E48, E49, E50} -> (fun (V61, V62, V63, V64) -> case V63 of {'Idris.Core.TT.Pi', E51, E52, E53, E54} -> (fun (V65, V66, V67, V68) -> fun (V69) -> begin (V70 = (('un--nameIn'(V0, V1, V2, V68))(V69))), case V70 of {'Idris.Prelude.Types.Left', E55} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V72) -> case V72 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', {'Idris.Core.TT.NotStrictlyPositive'}}}; 1 -> begin (V73 = (((V64(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V61, 1}))))(V69))), case V73 of {'Idris.Prelude.Types.Left', E57} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V75) -> (('un--posArg'(V0, V1, V2, V75))(V69)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51, E52, E53, E54)); _ -> fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end end end(E47, E48, E49, E50)); _ -> fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end end.
'un--nextArg'(V0) -> ((V0 + 1) rem 9223372036854775808).
'un--nameIn'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('un--nameIn'(V0, V1, V2, ('Idris.Idris2.Core.TT':'un--binderType'('erased', V6))))(V8))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> case V11 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> begin (V12 = (((V7(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V4, 1}))))(V8))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> (('un--nameIn'(V0, V1, V2, V14))(V8)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E8, E9, E10} -> (fun (V15, V16, V17) -> fun (V18) -> begin (V20 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V19)))) end, V17, []))(V18))), case V20 of {'Idris.Prelude.Types.Left', E11} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V22) -> (('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V23) -> ('un--nameIn'(V0, V1, V2, V23)) end, V22))(V18)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10)); {'Idris.Core.Value.NTCon', E13, E14, E15, E16, E17} -> (fun (V24, V25, V26, V27, V28) -> ('case--nameIn-5207'(V24, V26, V27, V28, V25, V2, V1, V0, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V31, V32)) end end}, V25, V2)))) end(E13, E14, E15, E16, E17)); {'Idris.Core.Value.NDCon', E18, E19, E20, E21, E22} -> (fun (V33, V34, V35, V36, V37) -> fun (V38) -> begin (V40 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V39)))) end, V37, []))(V38))), case V40 of {'Idris.Prelude.Types.Left', E23} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V42) -> (('Idris.Idris2.Core.Core':'un--anyM'('erased', fun (V43) -> ('un--nameIn'(V0, V1, V2, V43)) end, V42))(V38)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20, E21, E22)); _ -> fun (V44) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--mkChange'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Core.TT.As', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> ('un--mkChange'('erased', V1, V2, [{'Idris.Builtin.MkPair', V7, V11} | [{'Idris.Builtin.MkPair', V7, V12} | V6]], V4)) end(E4, E5, E6, E7)); _ -> ('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('un--scEq'('erased', V4, V8)) end, fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, {'Idris.Core.Context.Same'}}} end} | [{'Idris.Builtin.MkPair', fun () -> ('un--smaller'('erased', 1, V1, ('un--asserted'('erased', V2, V4)), V4, V8)) end, fun () -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V7, {'Idris.Core.Context.Smaller'}}} end} | []]], ('un--mkChange'('erased', V1, V2, V6, V4)))) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--initArgs'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', []} end; _ -> begin (V3 = (V1 - 1)), fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('erlang':'put'(V0, ('un--nextArg'(V8))))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = (('un--initArgs'(V0, V3))(V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', [{'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V8, {'Idris.Core.Context.Same'}}} | V15]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--getSC'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V10 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> ('un--findCalls'(V0, V1, V9)) end, V7, []))(V8))), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Context':'dn--un--==_Eq_SCCall'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'dn--un--/=_Eq_SCCall'(V15, V16)) end end}, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V28)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V29, V30)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V12))))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', []} end end.
'un--getCasePats'(V0, V1, V2, V3, V4, V5) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V2, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V33 of {'Idris.Prelude.Types.Left', E27} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E29} -> (fun (V36) -> case V36 of {'Idris.Core.Context.PMDef', E30, E31, E32, E33, E34} -> (fun (V37, V38, V39, V40, V41) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V42) -> ('nested--9409-2976--in--un--matchArgs'(V0, V4, V3, V2, V1, V42)) end, V41))}} end(E30, E31, E32, E33, E34)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E29)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--firstArg'() -> 0.
'un--findSCcall'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V38 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V7, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V11 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V38 of {'Idris.Prelude.Types.Left', E27} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E29} -> (fun (V41) -> begin (V63 = case V41 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V43 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V71 = begin (V68 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V66, V67)) end end}, V63, V10))), case V68 of {'Idris.Prelude.Types.Left', E51} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V70) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"totality.termination.sizechange"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Looking under "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V70)))) end))(V10)) end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V71 of {'Idris.Prelude.Types.Left', E53} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V73) -> begin (V101 = (('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V74 end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"assert_smaller"/utf8>>}}))(V10))), case V101 of {'Idris.Prelude.Types.Left', E82} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V103) -> (('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V63, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', <<"assert_total"/utf8>>}})) end, fun () -> fun (V104) -> {'Idris.Prelude.Types.Right', []} end end} | [{'Idris.Builtin.MkPair', fun () -> ('un--caseFn'(V63)) end, fun () -> fun (V105) -> begin (V106 = ('un--getCasePats'(V0, V2, V63, V5, V9, V105))), case V106 of {'Idris.Prelude.Types.Left', E84} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V108) -> case V108 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E86} -> (fun (V109) -> begin (V111 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V110) -> ('un--findInCase'(V1, V2, V4, V110)) end, V109, []))(V105))), case V111 of {'Idris.Prelude.Types.Left', E87} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V113) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V116, V117, V118)) end end end end end, fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V121, V122, V123)) end end end end end, fun (V124) -> fun (V125) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V125)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V126) -> fun (V127) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V126, V127)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V113))} end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end} | []]], fun (V128) -> begin (V130 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V129) -> ('un--findSC'(V0, V1, V2, V3, V4, V5, V129)) end, V9, []))(V128))), case V130 of {'Idris.Prelude.Types.Left', E89} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V132) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', [{'Idris.Core.Context.MkSCCall', V63, ('un--expandToArity'(V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V133) -> ('un--mkChange'('erased', V2, V103, V5, V133)) end, V9))))} | []], (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V136, V137, V138)) end end end end end, fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V141, V142, V143)) end end end end end, fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V145)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V146) -> fun (V147) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V146, V147)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V132))))} end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end))(V10)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V1, V6, V7, V10)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findSC'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Bind', E12, E13, E14, E15} -> (fun (V7, V8, V9, V10) -> fun (V11) -> begin (V12 = (('nested--9395-1804--in--un--findSCbinder'(V8, V0, V10, V9, V7, V5, V4, V3, V2, V1, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E16} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V14) -> begin (V18 = (('un--findSC'([V8 | V0], V1, V2, {'Idris.Core.Env.::', V9, V3}, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E18, E19} -> (fun (V16, V17) -> {'Idris.Builtin.MkPair', V16, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'('erased', 'erased', V17))} end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V5)), V10))(V11))), case V18 of {'Idris.Prelude.Types.Left', E20} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V14, V20))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14, E15)); _ -> case V4 of {'Idris.Core.Termination.Guarded'} -> (fun () -> case V6 of {'Idris.Core.TT.TDelay', E8, E9, E10, E11} -> (fun (V21, V22, V23, V24) -> ('un--findSC'(V0, V1, V2, V3, {'Idris.Core.Termination.InDelay'}, V5, V24)) end(E8, E9, E10, E11)); _ -> case V6 of {'Idris.Core.TT.TDelay', E4, E5, E6, E7} -> (fun (V25, V26, V27, V28) -> ('un--findSC'(V0, V1, V2, V3, V4, V5, V28)) end(E4, E5, E6, E7)); _ -> ('case--findSC-2136'(V0, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V6)))) end end end()); _ -> case V6 of {'Idris.Core.TT.TDelay', E0, E1, E2, E3} -> (fun (V29, V30, V31, V32) -> ('un--findSC'(V0, V1, V2, V3, V4, V5, V32)) end(E0, E1, E2, E3)); _ -> ('case--findSC-2136'(V0, V6, V5, V4, V3, V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V6)))) end end end.
'un--findInCase'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> fun (V10) -> begin (V25 = ('Idris.Idris2.Core.Context.Log':'un--logC'(V0, <<"totality"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun (V11) -> begin (V19 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V16, V17)) end end}, V12, V13)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V18)) end, V8)), []))(V11))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Looking in case args "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V22) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V4, V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V4, V23, V24)) end end}, V21))))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V10))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> begin (V28 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V4, V0, <<"totality"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"        ="/utf8>> end, V6, V9))(V10))), case V28 of {'Idris.Prelude.Types.Left', E10} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V30) -> begin (V31 = ('Idris.Idris2.Core.Normalise':'un--normaliseOpts'(V0, V4, ('Idris.Idris2.Core.Value':'un--tcOnly'()), V1, V6, V9, V10))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> (('un--findSC'(V4, V0, V1, V6, V2, V8, ('un--delazy'('erased', V1, V33))))(V10)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findCalls'(V0, V1, V2) -> case V2 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V7, V8) -> begin (V9 = ('Idris.Idris2.Core.TT':'un--getArgs'('erased', ('un--delazy'('erased', V1, V7))))), fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Normalise':'un--normaliseOpts'(V0, V3, ('Idris.Idris2.Core.Value':'un--tcOnly'()), V1, V5, V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> (('un--findSC'(V3, V0, V1, V5, {'Idris.Core.Termination.Toplevel'}, ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'('erased', 'erased', ('Idris.Idris2.Prelude.Types':'un--take'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V9)), ('Idris.Idris2.Prelude.Types':'dn--un--rangeFrom_Range_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))))), V9)), ('un--delazy'('erased', V1, V13))))(V10)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--expandToArity'(V0, V1) -> case V0 of 0 -> V1; _ -> begin (V2 = (V0 - 1)), case V1 of [E0 | E1] -> (fun (V3, V4) -> [V3 | ('un--expandToArity'(V2, V4))] end(E0, E1)); [] -> [{'Idris.Prelude.Types.Nothing'} | ('un--expandToArity'(V2, []))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--delazy'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.TDelayed', E0, E1, E2} -> (fun (V3, V4, V5) -> begin (V6 = ('un--delazy'('erased', V1, V5))), case V4 of {'Idris.Core.TT.LInf'} -> (fun () -> {'Idris.Core.TT.TDelayed', V3, V4, V6} end()); _ -> V6 end end end(E0, E1, E2)); {'Idris.Core.TT.TDelay', E3, E4, E5, E6} -> (fun (V7, V8, V9, V10) -> begin (V11 = ('un--delazy'('erased', V1, V9))), begin (V12 = ('un--delazy'('erased', V1, V10))), case V8 of {'Idris.Core.TT.LInf'} -> (fun () -> {'Idris.Core.TT.TDelay', V7, V8, V11, V12} end()); _ -> V12 end end end end(E3, E4, E5, E6)); {'Idris.Core.TT.TForce', E7, E8, E9} -> (fun (V13, V14, V15) -> case V14 of {'Idris.Core.TT.LInf'} -> (fun () -> {'Idris.Core.TT.TForce', V13, V14, ('un--delazy'('erased', V1, V15))} end()); _ -> ('un--delazy'('erased', V1, V15)) end end(E7, E8, E9)); {'Idris.Core.TT.Meta', E10, E11, E12, E13} -> (fun (V16, V17, V18, V19) -> {'Idris.Core.TT.Meta', V16, V17, V18, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> ('un--delazy'('erased', V1, V20)) end, V19))} end(E10, E11, E12, E13)); {'Idris.Core.TT.Bind', E14, E15, E16, E17} -> (fun (V21, V22, V23, V24) -> {'Idris.Core.TT.Bind', V21, V22, ('Idris.Idris2.Core.TT':'dn--un--map_Functor_Binder'('erased', 'erased', fun (V25) -> ('un--delazy'('erased', V1, V25)) end, V23)), ('un--delazy'('erased', V1, V24))} end(E14, E15, E16, E17)); {'Idris.Core.TT.App', E18, E19, E20} -> (fun (V26, V27, V28) -> {'Idris.Core.TT.App', V26, ('un--delazy'('erased', V1, V27)), ('un--delazy'('erased', V1, V28))} end(E18, E19, E20)); {'Idris.Core.TT.As', E21, E22, E23, E24} -> (fun (V29, V30, V31, V32) -> {'Idris.Core.TT.As', V29, V30, ('un--delazy'('erased', V1, V31)), ('un--delazy'('erased', V1, V32))} end(E21, E22, E23, E24)); _ -> V2 end.
'un--checkTotal'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--checkTotal-6121'(V2, V1, V0, V7, ('Idris.Idris2.Core.Context':'un--getNameID'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkTerminating'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getTotality'(V0, V1, V2, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V14 = begin (V11 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V9, V10)) end end}, V2, V3))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.termination"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking termination: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)))) end))(V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> (('case--checkTerminating-5077'(V2, V1, V0, V6, case V6 of {'Idris.Core.TT.MkTotality', E6, E7} -> (fun (V17, V18) -> V17 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkSC'(V0, V1, V2, V3, V4, V5, V6) -> begin (V14 = begin (V11 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V9, V10)) end end}, V3, V6))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"totality.termination.sizechange"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking Size Change Graph: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V13)))) end))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V19 = {'Idris.Builtin.MkPair', V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)) end, V17)) end, V4))}), (('case--checkSC-4591'(V5, V4, V3, V2, V1, V0, V19, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V24, V25)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V32, V33)) end end}, V28, V29)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V38, V39)) end end}, V34, V35)) end end}, V26, V27)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V44, V45)) end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V46, V47)) end end}, V42, V43)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V50, V51)) end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V52, V53)) end end}, V48, V49)) end end}, V40, V41)) end end}, V20, V21)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V56, V57)) end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V58, V59)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V64, V65)) end end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V66, V67)) end end}, V62, V63)) end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V70) -> fun (V71) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V70, V71)) end end, fun (V72) -> fun (V73) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V72, V73)) end end}, V68, V69)) end end}, V60, V61)) end end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(List $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V78, V79)) end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V80, V81)) end end}, V76, V77)) end end, fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V84, V85)) end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V86, V87)) end end}, V82, V83)) end end}, V74, V75)) end end}, V54, V55)) end end}, V19, V5))))(V6)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkPositive'(V0, V1, V2, V3) -> begin (V8 = ('Idris.Idris2.Core.Context':'un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V6, V7)) end end}, V2, V3))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getTotality'(V0, V1, V10, V3))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V21 = begin (V18 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V16, V17)) end end}, V10, V3))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.positivity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking positivity: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)))) end))(V3)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> (('case--checkPositive-6045'(V2, V1, V0, V10, V13, case V13 of {'Idris.Core.TT.MkTotality', E8, E9} -> (fun (V24, V25) -> V24 end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkPosArgs'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V13 = (('un--posArg'(V0, V1, V2, V11))(V12))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> case V15 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> begin (V16 = (((V7(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V4, 1}))))(V12))), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> (('un--checkPosArgs'(V0, V1, V2, V18))(V12)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', V15} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end end end(E0, E1, E2, E3)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end end.
'un--checkIfGuarded'(V0, V1, V2, V3) -> begin (V11 = begin (V8 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V6, V7)) end end}, V2, V3))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.termination.guarded"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Check if Guarded: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)))) end))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V2, case V17 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V45 of {'Idris.Prelude.Types.Left', E33} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E35} -> (fun (V48) -> case V48 of {'Idris.Core.Context.PMDef', E36, E37, E38, E39, E40} -> (fun (V49, V50, V51, V52, V53) -> begin (V54 = (('nested--8447-923--in--un--allGuarded'(V2, V1, V0, V53))(V3))), case V54 of {'Idris.Prelude.Types.Left', E41} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V56) -> case V56 of 0 -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V2, {'Idris.Core.Context.AllGuarded'}, V3)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38, E39, E40)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E35)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkData'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsTerminating'}} end; [E0 | E1] -> (fun (V5, V6) -> fun (V7) -> begin (V8 = ('un--checkCon'(V0, V1, V2, V5, V7))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V10 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> (('un--checkData'(V0, V1, V2, V6))(V7)) end()); _ -> {'Idris.Prelude.Types.Right', V10} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkCon'(V0, V1, V2, V3, V4) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V32 of {'Idris.Prelude.Types.Left', E27} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V34) -> case V34 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Unchecked'}} end()); {'Idris.Prelude.Types.Just', E29} -> (fun (V35) -> begin (V36 = (('un--totRefsIn'('erased', V0, V1, V35))(V4))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> begin (V39 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V1, {'Idris.Core.Env.Nil'}, V35))(V4))), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> (('un--checkPosArgs'(V0, V1, V2, V41))(V4)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', V38} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--caseFn'(V0) -> case V0 of {'Idris.Core.Name.CaseBlock', E0, E1} -> (fun (V1, V2) -> 0 end(E0, E1)); {'Idris.Core.Name.DN', E2, E3} -> (fun (V3, V4) -> ('un--caseFn'(V4)) end(E2, E3)); {'Idris.Core.Name.NS', E4, E5} -> (fun (V5, V6) -> ('un--caseFn'(V6)) end(E4, E5)); _ -> 1 end.
'un--calculateSizeChange'(V0, V1, V2, V3) -> begin (V11 = begin (V8 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V4, V5)) end end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V6, V7)) end end}, V2, V3))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.termination.sizechange"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Calculating Size Change: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)))) end))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V45 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V17 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V45 of {'Idris.Prelude.Types.Left', E33} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E35} -> (fun (V48) -> (('un--getSC'(V0, V17, case V48 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V66 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E35)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--calcTerminating'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V15 = begin (V12 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V10, V11)) end end}, V2, V3))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.termination.calc"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Calculating termination: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end))(V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V45 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V45 of {'Idris.Prelude.Types.Left', E33} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V2, V3)) end()); {'Idris.Prelude.Types.Just', E35} -> (fun (V48) -> begin (V49 = (('nested--12695-4758--in--un--addCases'(V2, V1, V0, V7, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.Context':'un--refersTo'(V48))))))(V3))), case V49 of {'Idris.Prelude.Types.Left', E36} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V51) -> begin (V56 = (('un--totRefs'(V0, V7, ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V52, V53)) end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V54, V55)) end end}, V51))))(V3))), case V56 of {'Idris.Prelude.Types.Left', E38} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V58) -> case V58 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> begin (V80 = case V48 of {'Idris.Core.Context.MkGlobalDef', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79) -> V61 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V81 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Termination.APos'}, ('un--firstArg'()), V3))), case V81 of {'Idris.Prelude.Types.Left', E61} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V83) -> begin (V87 = begin (V84 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V0, [], V7, {'Idris.Core.Env.Nil'}, V80, V3))), case V84 of {'Idris.Prelude.Types.Left', E63} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V86) -> (('un--initArgs'(V83, V86))(V3)) end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V87 of {'Idris.Prelude.Types.Left', E65} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V89) -> ('un--checkSC'(V83, V0, V7, V2, V89, [], V3)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> {'Idris.Prelude.Types.Right', V58} end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--calcPositive'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V15 = begin (V12 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V10, V11)) end end}, V2, V3))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"totality.positivity"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Calculating positivity: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end))(V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V45 = ('Idris.Idris2.Core.Context':'un--lookupDefTyExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V45 of {'Idris.Prelude.Types.Left', E33} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E35} -> (fun (V48) -> case V48 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V49, V50) -> case V49 of {'Idris.Core.Context.TCon', E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58) -> begin (V59 = (('un--totRefsIn'('erased', V0, V7, V50))(V3))), case V59 of {'Idris.Prelude.Types.Left', E46} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V61) -> case V61 of {'Idris.Core.TT.IsTerminating'} -> (fun () -> begin (V62 = (('un--checkData'(V0, V7, [V2 | V56], V57))(V3))), case V62 of {'Idris.Prelude.Types.Left', E48} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V64, V57}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V61, V57}} end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<" not a data type"/utf8>>))}, V3)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), <<" not a data type"/utf8>>))}, V3)) end end(E35)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--assertedSmaller'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('un--scEq'('erased', V3, V2)) end(E0)); _ -> 1 end.
'un--asserted'(V0, V1, V2) -> ('case--asserted-2804'('erased', V2, V1, ('Idris.Idris2.Core.TT':'un--getFnArgs'('erased', V2)))).
