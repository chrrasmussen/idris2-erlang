-module('Idris.Idris2.TTImp.Elab.RunElab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8252-2536--in--un--unelabType'/18,
  'nested--8224-1527--in--un--scriptRet'/17,
  'nested--8252-2142--in--un--quotePi'/20,
  'nested--10042-3171--in--un--mkExpected'/14,
  'nested--8224-1526--in--un--failWith'/17,
  'nested--8224-1528--in--un--elabCon'/17,
  'un--elabScript'/10,
  'un--checkRunElab'/13
]).
'nested--8252-2536--in--un--unelabType'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> begin (V22 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'([], V13, {'Idris.Core.Env.Nil'}, V21, V17))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, V24}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = (((((((V14(V0))(V10))(V20))(0))(V8))(V15))(V16))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> (('Idris.Idris2.Core.Normalise':'un--nfOpts'(V13, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V20, V8, V23))(V16)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8252-2142--in--un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V20) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, <<"Can\x{27}t add default lambda"/utf8>>}, V19)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10042-3171--in--un--mkExpected'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V14))(V13))), case V15 of {'Idris.Prelude.Types.Left', E1} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Right', V17} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V18 = ('Idris.Idris2.Core.UnifyState':'un--genName'(V11, V9, <<"scriptTy"/utf8>>, V13))), case V18 of {'Idris.Prelude.Types.Left', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V20) -> ('Idris.Idris2.TTImp.Elab.Check':'un--metaVar'(V0, V11, V9, V3, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V4, V20, {'Idris.Core.TT.TType', V3}, V13)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V17 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V13, V0, V19, V8, V6, V16))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadRunElab', V0, V10, V8, V22, V15}, V16)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8224-1528--in--un--elabCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V15 of <<"Pure"/utf8>> -> case V16 of [E0 | E1] -> (fun (V17, V18) -> case V18 of [E2 | E3] -> (fun (V19, V20) -> fun (V21) -> case V20 of [] -> begin (V22 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V21))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V24, V19))(V21)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V21)) end end end(E2, E3)); _ -> fun (V25) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V25)) end end end(E0, E1)); _ -> fun (V26) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V26)) end end; <<"Bind"/utf8>> -> case V16 of [E6 | E7] -> (fun (V27, V28) -> case V28 of [E8 | E9] -> (fun (V29, V30) -> case V30 of [E10 | E11] -> (fun (V31, V32) -> case V32 of [E12 | E13] -> (fun (V33, V34) -> fun (V35) -> case V34 of [] -> begin (V39 = begin (V36 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V31))(V35))), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> ('un--elabScript'(V0, V13, V12, V11, V10, V9, V8, V38, V7, V35)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V39 of {'Idris.Prelude.Types.Left', E16} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V41) -> begin (V42 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V33))(V35))), case V42 of {'Idris.Prelude.Types.Left', E18} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V44) -> begin (V45 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), case V44 of {'Idris.Core.Value.NBind', E20, E21, E22, E23} -> (fun (V46, V47, V48, V49) -> case V48 of {'Idris.Core.TT.Lam', E24, E25, E26, E27} -> (fun (V50, V51, V52, V53) -> begin (V54 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V13, V0, V14, V8, V41, V35))), case V54 of {'Idris.Prelude.Types.Left', E28} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V56) -> begin (V57 = (((V49(V14))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--withAll'()), V8, V56))))(V35))), case V57 of {'Idris.Prelude.Types.Left', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V59) -> ('un--elabScript'(V0, V13, V12, V11, V10, V9, V8, V59, V7, V35)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25, E26, E27)); _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V45, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"non-function RHS of a Bind: "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V0, V44)))), V35)) end end(E20, E21, E22, E23)); _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V45, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"non-function RHS of a Bind: "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V0, V44)))), V35)) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V35)) end end end(E12, E13)); _ -> fun (V60) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V60)) end end end(E10, E11)); _ -> fun (V61) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V61)) end end end(E8, E9)); _ -> fun (V62) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V62)) end end end(E6, E7)); _ -> fun (V63) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V63)) end end; <<"Fail"/utf8>> -> case V16 of [E32 | E33] -> (fun (V64, V65) -> case V65 of [E34 | E35] -> (fun (V66, V67) -> fun (V68) -> case V67 of [] -> begin (V69 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V66))(V68))), case V69 of {'Idris.Prelude.Types.Left', E36} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V71) -> begin (V72 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V71))(V68))), case V72 of {'Idris.Prelude.Types.Left', E38} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V74) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error during reflection: "/utf8>>, V74))}, V68)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V68)) end end end(E34, E35)); _ -> fun (V75) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V75)) end end end(E32, E33)); _ -> fun (V76) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V76)) end end; <<"LogMsg"/utf8>> -> case V16 of [E40 | E41] -> (fun (V77, V78) -> case V78 of [E42 | E43] -> (fun (V79, V80) -> case V80 of [E44 | E45] -> (fun (V81, V82) -> fun (V83) -> case V82 of [] -> begin (V84 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V77))(V83))), case V84 of {'Idris.Prelude.Types.Left', E46} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V86) -> begin (V87 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V79))(V83))), case V87 of {'Idris.Prelude.Types.Left', E48} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V89) -> begin (V100 = begin (V90 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V86))(V83))), case V90 of {'Idris.Prelude.Types.Left', E50} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V92) -> begin (V93 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Nat'(V13, V0, V14, V89, V83))), case V93 of {'Idris.Prelude.Types.Left', E52} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V95) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V13, V92, V95, fun (V96) -> begin (V97 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V81))(V96))), case V97 of {'Idris.Prelude.Types.Left', E54} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V99) -> (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V99))(V96)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V83)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V100 of {'Idris.Prelude.Types.Left', E56} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V102) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V103, V104, V105, V106, V107, V108, V109)) end end end end end end end, 0, V83)) end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V83)) end end end(E44, E45)); _ -> fun (V110) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V110)) end end end(E42, E43)); _ -> fun (V111) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V111)) end end end(E40, E41)); _ -> fun (V112) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V112)) end end; <<"LogTerm"/utf8>> -> case V16 of [E58 | E59] -> (fun (V113, V114) -> case V114 of [E60 | E61] -> (fun (V115, V116) -> case V116 of [E62 | E63] -> (fun (V117, V118) -> case V118 of [E64 | E65] -> (fun (V119, V120) -> fun (V121) -> case V120 of [] -> begin (V122 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V113))(V121))), case V122 of {'Idris.Prelude.Types.Left', E66} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V124) -> begin (V125 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V115))(V121))), case V125 of {'Idris.Prelude.Types.Left', E68} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V127) -> begin (V147 = begin (V128 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V124))(V121))), case V128 of {'Idris.Prelude.Types.Left', E70} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V130) -> begin (V131 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Nat'(V13, V0, V14, V127, V121))), case V131 of {'Idris.Prelude.Types.Left', E72} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V133) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V13, V130, V133, fun (V134) -> begin (V135 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V117))(V134))), case V135 of {'Idris.Prelude.Types.Left', E74} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V137) -> begin (V138 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V119))(V134))), case V138 of {'Idris.Prelude.Types.Left', E76} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V140) -> begin (V141 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V137))(V134))), case V141 of {'Idris.Prelude.Types.Left', E78} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V143) -> begin (V144 = ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_RawImp'(V13, V0, V14, V140, V134))), case V144 of {'Idris.Prelude.Types.Left', E80} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V146) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V143, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V146))))))} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V121)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V147 of {'Idris.Prelude.Types.Left', E82} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V149) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V150, V151, V152, V153, V154, V155, V156)) end end end end end end end, 0, V121)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V121)) end end end(E64, E65)); _ -> fun (V157) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V157)) end end end(E62, E63)); _ -> fun (V158) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V158)) end end end(E60, E61)); _ -> fun (V159) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V159)) end end end(E58, E59)); _ -> fun (V160) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V160)) end end; <<"Check"/utf8>> -> case V16 of [E84 | E85] -> (fun (V161, V162) -> case V162 of [E86 | E87] -> (fun (V163, V164) -> fun (V165) -> case V164 of [] -> begin (V166 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V161))(V165))), case V166 of {'Idris.Prelude.Types.Left', E88} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V168) -> begin (V169 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V163))(V165))), case V169 of {'Idris.Prelude.Types.Left', E90} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V171) -> begin (V172 = ('Idris.Idris2.Core.Context':'un--resolveName'(V13, {'Idris.Core.Name.UN', <<"[elaborator script]"/utf8>>}, V165))), case V172 of {'Idris.Prelude.Types.Left', E92} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V174) -> begin (V175 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.TTImp.Elab.Check.EST'}, ('Idris.Idris2.TTImp.Elab.Check':'un--initEState'(V0, V174, V8)), V165))), case V175 of {'Idris.Prelude.Types.Left', E94} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V177) -> begin (V182 = begin (V178 = ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_RawImp'(V13, V0, V14, V171, V165))), case V178 of {'Idris.Prelude.Types.Left', E96} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V180) -> ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V13, V12, V11, V177, 0, fun (V181) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V13, V12, V11, V177, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), ('Idris.Idris2.TTImp.Elab.Check':'un--initElabInfo'({'Idris.TTImp.Elab.Check.InExpr'})), V9, V8, V180, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--glueBack'(V13, V0, V14, V8, V168))}, V181)) end, V165)) end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V182 of {'Idris.Prelude.Types.Left', E98} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V184) -> case V184 of {'Idris.Builtin.MkPair', E100, E101} -> (fun (V185, V186) -> begin (V187 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V165))), case V187 of {'Idris.Prelude.Types.Left', E102} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V189) -> (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V0, V189, V8, V185))(V165)) end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V165)) end end end(E86, E87)); _ -> fun (V190) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V190)) end end end(E84, E85)); _ -> fun (V191) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V191)) end end; <<"Quote"/utf8>> -> case V16 of [E104 | E105] -> (fun (V192, V193) -> case V193 of [E106 | E107] -> (fun (V194, V195) -> fun (V196) -> case V195 of [] -> begin (V197 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V194))(V196))), case V197 of {'Idris.Prelude.Types.Left', E108} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V199) -> begin (V201 = begin (V200 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V200} end), case V201 of {'Idris.Prelude.Types.Left', E110} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V203) -> begin (V204 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V203, V196))), case V204 of {'Idris.Prelude.Types.Left', E112} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V206) -> begin (V207 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V13, V0, V206, V8, V199, V196))), case V207 of {'Idris.Prelude.Types.Left', E114} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V209) -> begin (V210 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V13, V8, V209, V196))), case V210 of {'Idris.Prelude.Types.Left', E116} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V212) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V213, V214, V215, V216, V217, V218)) end end end end end end, V212, V196)) end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V196)) end end end(E106, E107)); _ -> fun (V219) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V219)) end end end(E104, E105)); _ -> fun (V220) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V220)) end end; <<"Lambda"/utf8>> -> case V16 of [E118 | E119] -> (fun (V221, V222) -> case V222 of [E120 | E121] -> (fun (V223, V224) -> case V224 of [E122 | E123] -> (fun (V225, V226) -> fun (V227) -> case V226 of [] -> begin (V228 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V14, V227))), case V228 of {'Idris.Prelude.Types.Left', E124} -> (fun (V229) -> {'Idris.Prelude.Types.Left', V229} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V230) -> begin (V231 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V225))(V227))), case V231 of {'Idris.Prelude.Types.Left', E126} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V233) -> begin (V234 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), case V233 of {'Idris.Core.Value.NBind', E128, E129, E130, E131} -> (fun (V235, V236, V237, V238) -> case V237 of {'Idris.Core.TT.Lam', E132, E133, E134, E135} -> (fun (V239, V240, V241, V242) -> begin (V243 = ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V13, V11, <<"x"/utf8>>, V227))), case V243 of {'Idris.Prelude.Types.Left', E136} -> (fun (V244) -> {'Idris.Prelude.Types.Left', V244} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V245) -> begin (V246 = (((V238(V14))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--withAll'()), V8, {'Idris.Core.TT.Ref', V235, {'Idris.Core.TT.Bound'}, V245}))))(V227))), case V246 of {'Idris.Prelude.Types.Left', E138} -> (fun (V247) -> {'Idris.Prelude.Types.Left', V247} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V248) -> begin (V249 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V13, V0, V230, V8, V248, V227))), case V249 of {'Idris.Prelude.Types.Left', E140} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V251) -> begin (V252 = ('Idris.Idris2.Core.TT':'un--refToLocal'(V245, V236, V251))), begin (V253 = ('nested--8252-2142--in--un--quotePi'(V0, V1, V2, V3, V4, V5, V234, V7, V8, V9, V10, V11, V12, V13, V223, V221, V225, V14, V241, V227))), case V253 of {'Idris.Prelude.Types.Left', E142} -> (fun (V254) -> {'Idris.Prelude.Types.Left', V254} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V255) -> begin (V256 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V13, V0, V230, V8, V242, V227))), case V256 of {'Idris.Prelude.Types.Left', E144} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V258) -> begin (V259 = {'Idris.Core.Env.::', {'Idris.Core.TT.Lam', V239, V240, V255, V258}, V8}), begin (V263 = begin (V260 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, [V236 | V0], V14, V259, V252))(V227))), case V260 of {'Idris.Prelude.Types.Left', E146} -> (fun (V261) -> {'Idris.Prelude.Types.Left', V261} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V262) -> ('un--elabScript'([V236 | V0], V13, V12, V11, V10, ('Idris.Idris2.TTImp.TTImp':'dn--un--weaken_Weaken_NestedNames'(V9)), V259, V262, {'Idris.Prelude.Types.Nothing'}, V227)) end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V263 of {'Idris.Prelude.Types.Left', E148} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E148)); {'Idris.Prelude.Types.Right', E149} -> (fun (V265) -> begin (V266 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V13, [V236 | V0], V230, V259, V265, V227))), case V266 of {'Idris.Prelude.Types.Left', E150} -> (fun (V267) -> {'Idris.Prelude.Types.Left', V267} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V268) -> (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V0, V230, V8, {'Idris.Core.TT.Bind', V235, V236, {'Idris.Core.TT.Lam', V239, V240, V255, V258}, V268}))(V227)) end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132, E133, E134, E135)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, <<"Not a lambda"/utf8>>}, V227)) end end(E128, E129, E130, E131)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, <<"Not a lambda"/utf8>>}, V227)) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V227)) end end end(E122, E123)); _ -> fun (V269) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V269)) end end end(E120, E121)); _ -> fun (V270) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V270)) end end end(E118, E119)); _ -> fun (V271) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V271)) end end; <<"Goal"/utf8>> -> case V16 of [] -> begin (V272 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), fun (V273) -> case V7 of {'Idris.Prelude.Types.Just', E152} -> (fun (V274) -> begin (V275 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V274))(V273))), case V275 of {'Idris.Prelude.Types.Left', E153} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V277) -> begin (V278 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V13, V8, V277, V273))), case V278 of {'Idris.Prelude.Types.Left', E155} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V280) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V272, V7, V8, V9, V10, V11, V12, V13, fun (V281) -> fun (V282) -> fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(Maybe $a)'(fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> fun (V292) -> fun (V293) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V288, V289, V290, V291, V292, V293)) end end end end end end, V281, V282, V283, V284, V285, V286, V287)) end end end end end end end, {'Idris.Prelude.Types.Just', V280}, V273)) end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E152)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V300 = ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(Maybe $a)'(fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> fun (V299) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V294, V295, V296, V297, V298, V299)) end end end end end end, V0, V10, V14, 0, V8, {'Idris.Prelude.Types.Nothing'}, V273))), case V300 of {'Idris.Prelude.Types.Left', E157} -> (fun (V301) -> {'Idris.Prelude.Types.Left', V301} end(E157)); {'Idris.Prelude.Types.Right', E158} -> (fun (V302) -> (('Idris.Idris2.Core.Normalise':'un--nfOpts'(V13, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V14, V8, V302))(V273)) end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V303) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V303)) end end; <<"LocalVars"/utf8>> -> fun (V304) -> case V16 of [] -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> fun (V317) -> fun (V318) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V312, V313, V314, V315, V316, V317, V318)) end end end end end end end, V305, V306, V307, V308, V309, V310, V311)) end end end end end end end, V0, V304)); _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V304)) end end; <<"GenSym"/utf8>> -> case V16 of [E159 | E160] -> (fun (V319, V320) -> fun (V321) -> case V320 of [] -> begin (V322 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V319))(V321))), case V322 of {'Idris.Prelude.Types.Left', E161} -> (fun (V323) -> {'Idris.Prelude.Types.Left', V323} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V324) -> begin (V328 = begin (V325 = (('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_String'(V13, V0, V14, V324))(V321))), case V325 of {'Idris.Prelude.Types.Left', E163} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E163)); {'Idris.Prelude.Types.Right', E164} -> (fun (V327) -> ('Idris.Idris2.Core.UnifyState':'un--genVarName'(V13, V11, V327, V321)) end(E164)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V328 of {'Idris.Prelude.Types.Left', E165} -> (fun (V329) -> {'Idris.Prelude.Types.Left', V329} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V330) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V331) -> fun (V332) -> fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V331, V332, V333, V334, V335, V336, V337)) end end end end end end end, V330, V321)) end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V321)) end end end(E159, E160)); _ -> fun (V338) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V338)) end end; <<"InCurrentNS"/utf8>> -> case V16 of [E167 | E168] -> (fun (V339, V340) -> fun (V341) -> case V340 of [] -> begin (V342 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V339))(V341))), case V342 of {'Idris.Prelude.Types.Left', E169} -> (fun (V343) -> {'Idris.Prelude.Types.Left', V343} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V344) -> begin (V348 = begin (V345 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V13, V0, V14, V344, V341))), case V345 of {'Idris.Prelude.Types.Left', E171} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V347) -> ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V13, V347, V341)) end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V348 of {'Idris.Prelude.Types.Left', E173} -> (fun (V349) -> {'Idris.Prelude.Types.Left', V349} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V350) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V351) -> fun (V352) -> fun (V353) -> fun (V354) -> fun (V355) -> fun (V356) -> fun (V357) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V351, V352, V353, V354, V355, V356, V357)) end end end end end end end, V350, V341)) end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V341)) end end end(E167, E168)); _ -> fun (V358) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V358)) end end; <<"GetType"/utf8>> -> case V16 of [E175 | E176] -> (fun (V359, V360) -> fun (V361) -> case V360 of [] -> begin (V362 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V359))(V361))), case V362 of {'Idris.Prelude.Types.Left', E177} -> (fun (V363) -> {'Idris.Prelude.Types.Left', V363} end(E177)); {'Idris.Prelude.Types.Right', E178} -> (fun (V364) -> begin (V396 = begin (V365 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V13, V0, V14, V364, V361))), case V365 of {'Idris.Prelude.Types.Left', E179} -> (fun (V366) -> {'Idris.Prelude.Types.Left', V366} end(E179)); {'Idris.Prelude.Types.Right', E180} -> (fun (V367) -> ('Idris.Idris2.Core.Context':'un--lookupTyName'(V367, case V14 of {'Idris.Core.Context.MkDefs', E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208} -> (fun (V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395) -> V368 end(E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V361)) end(E180)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V396 of {'Idris.Prelude.Types.Left', E209} -> (fun (V397) -> {'Idris.Prelude.Types.Left', V397} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V398) -> begin (V402 = begin (V399 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V400) -> fun (V401) -> ('nested--8252-2536--in--un--unelabType'(V0, V1, V2, V3, V4, V5, V399, V7, V8, V9, V10, V11, V12, V13, V359, V14, V400, V401)) end end, V398, [], V361)) end), case V402 of {'Idris.Prelude.Types.Left', E211} -> (fun (V403) -> {'Idris.Prelude.Types.Left', V403} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V404) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V405) -> fun (V406) -> fun (V407) -> fun (V408) -> fun (V409) -> fun (V410) -> fun (V411) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V412) -> fun (V413) -> fun (V414) -> fun (V415) -> fun (V416) -> fun (V417) -> fun (V418) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V419) -> fun (V420) -> fun (V421) -> fun (V422) -> fun (V423) -> fun (V424) -> fun (V425) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V419, V420, V421, V422, V423, V424, V425)) end end end end end end end, fun (V426) -> fun (V427) -> fun (V428) -> fun (V429) -> fun (V430) -> fun (V431) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V426, V427, V428, V429, V430, V431)) end end end end end end}, V412, V413, V414, V415, V416, V417, V418)) end end end end end end end, V405, V406, V407, V408, V409, V410, V411)) end end end end end end end, V404, V361)) end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V361)) end end end(E175, E176)); _ -> fun (V432) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V432)) end end; <<"GetLocalType"/utf8>> -> case V16 of [E213 | E214] -> (fun (V433, V434) -> fun (V435) -> case V434 of [] -> begin (V436 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V433))(V435))), case V436 of {'Idris.Prelude.Types.Left', E215} -> (fun (V437) -> {'Idris.Prelude.Types.Left', V437} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V438) -> begin (V439 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V13, V0, V14, V438, V435))), case V439 of {'Idris.Prelude.Types.Left', E217} -> (fun (V440) -> {'Idris.Prelude.Types.Left', V440} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V441) -> begin (V442 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), case ('Idris.Idris2.Core.Env':'un--defined'(V0, V441, V8)) of {'Idris.Prelude.Types.Just', E219} -> (fun (V443) -> case V443 of {'Idris.Core.Env.MkIsDefined', E220, E221} -> (fun (V444, V445) -> begin (V453 = ('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V446) -> fun (V447) -> fun (V448) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V448)) end end end, fun (V449) -> fun (V450) -> fun (V451) -> fun (V452) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V451, V452)) end end end end}, V0, V444, V8))), begin (V454 = ('Idris.Idris2.Core.TT':'un--binderType'(V453))), begin (V455 = ('Idris.Idris2.TTImp.Unelab':'un--unelabUniqueBinders'(V0, V13, V8, V454, V435))), case V455 of {'Idris.Prelude.Types.Left', E222} -> (fun (V456) -> {'Idris.Prelude.Types.Left', V456} end(E222)); {'Idris.Prelude.Types.Right', E223} -> (fun (V457) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V442, V7, V8, V9, V10, V11, V12, V13, fun (V458) -> fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> fun (V463) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reflect_Reflect_RawImp'(V458, V459, V460, V461, V462, V463)) end end end end end end, V457, V435)) end(E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E220, E221)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V441)), <<" is not a local variable"/utf8>>))}, V435)) end end(E219)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V441)), <<" is not a local variable"/utf8>>))}, V435)) end end end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V435)) end end end(E213, E214)); _ -> fun (V464) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V464)) end end; <<"GetCons"/utf8>> -> case V16 of [E224 | E225] -> (fun (V465, V466) -> fun (V467) -> case V466 of [] -> begin (V468 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V465))(V467))), case V468 of {'Idris.Prelude.Types.Left', E226} -> (fun (V469) -> {'Idris.Prelude.Types.Left', V469} end(E226)); {'Idris.Prelude.Types.Right', E227} -> (fun (V470) -> begin (V471 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_Name'(V13, V0, V14, V470, V467))), case V471 of {'Idris.Prelude.Types.Left', E228} -> (fun (V472) -> {'Idris.Prelude.Types.Left', V472} end(E228)); {'Idris.Prelude.Types.Right', E229} -> (fun (V473) -> begin (V502 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V473, case V14 of {'Idris.Core.Context.MkDefs', E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257} -> (fun (V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501) -> V474 end(E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249, E250, E251, E252, E253, E254, E255, E256, E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V467))), case V502 of {'Idris.Prelude.Types.Left', E258} -> (fun (V503) -> {'Idris.Prelude.Types.Left', V503} end(E258)); {'Idris.Prelude.Types.Right', E259} -> (fun (V504) -> begin (V505 = {'Idris.Core.Value.NDCon', V5, V4, V3, V2, V1}), case V504 of {'Idris.Prelude.Types.Just', E260} -> (fun (V506) -> case V506 of {'Idris.Core.Context.TCon', E261, E262, E263, E264, E265, E266, E267, E268} -> (fun (V507, V508, V509, V510, V511, V512, V513, V514) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V505, V7, V8, V9, V10, V11, V12, V13, fun (V515) -> fun (V516) -> fun (V517) -> fun (V518) -> fun (V519) -> fun (V520) -> fun (V521) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(List $a)'(fun (V522) -> fun (V523) -> fun (V524) -> fun (V525) -> fun (V526) -> fun (V527) -> fun (V528) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_Name'(V522, V523, V524, V525, V526, V527, V528)) end end end end end end end, V515, V516, V517, V518, V519, V520, V521)) end end end end end end end, V513, V467)) end(E261, E262, E263, E264, E265, E266, E267, E268)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V473)), <<" is not a type"/utf8>>))}, V467)) end end(E260)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V473)), <<" is not a type"/utf8>>))}, V467)) end end end(E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V467)) end end end(E224, E225)); _ -> fun (V529) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V529)) end end; <<"Declare"/utf8>> -> case V16 of [E269 | E270] -> (fun (V530, V531) -> fun (V532) -> case V531 of [] -> begin (V533 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V13, V0, V14, V530))(V532))), case V533 of {'Idris.Prelude.Types.Left', E271} -> (fun (V534) -> {'Idris.Prelude.Types.Left', V534} end(E271)); {'Idris.Prelude.Types.Right', E272} -> (fun (V535) -> begin (V541 = ('Idris.Idris2.Core.Reflect':'dn--un--reify_Reify_(List $a)'(fun (V536) -> fun (V537) -> fun (V538) -> fun (V539) -> fun (V540) -> ('Idris.Idris2.TTImp.Reflect':'dn--un--reify_Reify_ImpDecl'(V536, V537, V538, V539, V540)) end end end end end, V13, V0, V14, V535, V532))), case V541 of {'Idris.Prelude.Types.Left', E273} -> (fun (V542) -> {'Idris.Prelude.Types.Left', V542} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V543) -> begin (V545 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V544) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'([], V13, V12, V11, [], [], {'Idris.Core.Env.Nil'}, V544)) end, V543, V532))), case V545 of {'Idris.Prelude.Types.Left', E275} -> (fun (V546) -> {'Idris.Prelude.Types.Left', V546} end(E275)); {'Idris.Prelude.Types.Right', E276} -> (fun (V547) -> ('nested--8224-1527--in--un--scriptRet'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, fun (V548) -> fun (V549) -> fun (V550) -> fun (V551) -> fun (V552) -> fun (V553) -> fun (V554) -> ('Idris.Idris2.Core.Reflect':'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V548, V549, V550, V551, V552, V553, V554)) end end end end end end end, 0, V532)) end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V532)) end end end(E269, E270)); _ -> fun (V555) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V555)) end end; _ -> fun (V556) -> ('nested--8224-1526--in--un--failWith'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unexpected Elab constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", or incorrect count of arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V16)))))))))), V556)) end end.
'un--elabScript'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Core.Value.NDCon', E6, E7, E8, E9, E10} -> (fun (V10, V11, V12, V13, V14) -> begin (V16 = begin (V15 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E11} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V18) -> begin (V25 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V19, V20, V21)) end end end, fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V22, V23, V24)) end end end}, V11, V9))), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> begin (V28 = {'Idris.Core.Value.NDCon', V10, V11, V12, V13, V14}), case V27 of {'Idris.Core.Name.NS', E15, E16} -> (fun (V29, V30) -> case V30 of {'Idris.Core.Name.UN', E17} -> (fun (V31) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V29, ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()))) of 1 -> (('nested--8224-1528--in--un--elabCon'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, V31, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V32) -> ('Idris.Idris2.Builtin':'un--snd'(V32)) end, V14))))(V9)); 0 -> ('nested--8224-1526--in--un--failWith'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"bad reflection namespace "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V29)))), V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17)); _ -> ('nested--8224-1526--in--un--failWith'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"bad fullnames "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)))), V9)) end end(E15, E16)); _ -> ('nested--8224-1526--in--un--failWith'(V0, V14, V13, V12, V11, V10, V28, V8, V6, V5, V4, V3, V2, V1, V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"bad fullnames "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)))), V9)) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9, E10)); _ -> begin (V34 = begin (V33 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V36, V9))), case V37 of {'Idris.Prelude.Types.Left', E2} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V39, V6, V7, V9))), case V40 of {'Idris.Prelude.Types.Left', E4} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V42) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadRunElab', V0, V4, V6, V42, <<"script is not a data value"/utf8>>}, V9)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--checkRunElab'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('nested--10042-3171--in--un--mkExpected'(V0, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V11, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V20 = case ('Idris.Idris2.Core.Context':'un--isExtension'(0, V19)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V9, <<"%language ElabReflection not enabled"/utf8>>}, V12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()), {'Idris.Core.Name.UN', <<"Elab"/utf8>>}}), begin (V24 = ('Idris.Idris2.Core.Reflect':'un--appCon'(V0, V9, V19, V23, [V15 | []], V12))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V28 = ('Idris.Idris2.TTImp.Elab.Delayed':'un--runDelays'(V0, V1, V2, V3, V4, 0, fun (V27) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V10, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V26))}, V27)) end, V12))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> case V30 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V31, V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E12} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V36) -> begin (V40 = begin (V37 = (('Idris.Idris2.Core.Normalise':'un--nfOpts'(V1, V0, ('Idris.Idris2.Core.Value':'un--withAll'()), V36, V8, V31))(V12))), case V37 of {'Idris.Prelude.Types.Left', E14} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V39) -> ('un--elabScript'(V0, V1, V2, V3, V9, V7, V8, V39, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V15))}, V12)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V46, V12))), case V47 of {'Idris.Prelude.Types.Left', E20} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Core.Normalise':'dn--un--quote_Quote_NF'(V1, V0, V49, V8, V42, V12))), case V50 of {'Idris.Prelude.Types.Left', E22} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V52, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V8, V15))}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
