-module('Idris.Idris2.TTImp.BindImplicits').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--6364-4341--in--un--tag'/4,
  'nested--5338-3786--in--un--renameAlt'/7,
  'nested--6543-4507--in--un--piBind'/6,
  'un--renameIBinds'/3,
  'un--piBindNames'/5,
  'un--getUsings'/2,
  'un--getUsing'/2,
  'un--doBind'/2,
  'un--bindUsings'/2,
  'un--bindTypeNamesUsed'/6,
  'un--bindTypeNames'/6,
  'un--bindNames'/4,
  'un--addUsing'/2
]).
'nested--6364-4341--in--un--tag'(V0, V1, V2, V3) -> ('Idris.Idris2.Data.List':'dn--un--zip_Zippable_List'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ((V4 + V2) rem 9223372036854775808) end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V5) -> fun (V6) -> ((V5 + V6) rem 9223372036854775808) end end, fun (V7) -> fun (V8) -> ((V7 * V8) rem 9223372036854775808) end end, fun (V9) -> V9 end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V12, V13)) end end}, {'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V16, V17)) end end}, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V30, V31)) end end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V32) -> fun (V33) -> ((V32 + V33) rem 9223372036854775808) end end, fun (V34) -> fun (V35) -> ((V34 * V35) rem 9223372036854775808) end end, fun (V36) -> V36 end}, fun (V37) -> ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg_Int'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V38, V39)) end end}}}, 0, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.List':'un--length'(V3)))))))), V3)).
'nested--5338-3786--in--un--renameAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.TTImp.TTImp.UniqueDefault', E0} -> (fun (V7) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V10, V11)) end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V16, V17)) end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V20, V21)) end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V23)) end end}, ('un--renameIBinds'(V4, V3, V7)), fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V28, V29)) end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V34, V35)) end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V38, V39)) end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V41)) end end}, {'Idris.TTImp.TTImp.UniqueDefault', V24}, V25)) end end, V6)) end(E0)); _ -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V44, V45)) end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V50, V51)) end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V54, V55)) end end end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V57)) end end}, V5, V6)) end.
'nested--6543-4507--in--un--piBind'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> V5; [E0 | E1] -> (fun (V6, V7) -> {'Idris.TTImp.TTImp.IPi', V2, ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Core.TT.Implicit'}, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', V6}}, {'Idris.TTImp.TTImp.Implicit', V2, 0}, ('nested--6543-4507--in--un--piBind'(V0, V1, V2, V3, V7, V5))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--renameIBinds'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> case V6 of {'Idris.Prelude.Types.Just', E6} -> (fun (V9) -> case V9 of {'Idris.Core.Name.UN', E7} -> (fun (V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V13, V14)) end end}, V10, V0)) of 1 -> begin (V15 = ('Idris.Idris2.TTImp.Utils':'un--getUnique'(('Idris.Idris2.Prelude.Types.List':'un--++'(V0, V1)), V10))), begin (V18 = ('Idris.Idris2.TTImp.Utils':'un--substNames'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V16) -> {'Idris.Core.Name.UN', V16} end, ('Idris.Idris2.Data.List':'un--filter'(fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V17, V10)) end, V1)))), [{'Idris.Builtin.MkPair', {'Idris.Core.Name.UN', V10}, {'Idris.TTImp.TTImp.IVar', V3, {'Idris.Core.Name.UN', V15}}} | []], V8))), fun (V19) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V22, V23)) end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V28, V29)) end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V32, V33)) end end end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V35)) end end}, ('un--renameIBinds'(V0, [V15 | V1], V18)), fun (V36) -> fun (V37) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V40, V41)) end end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V43)) end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V46, V47)) end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V50, V51)) end end end end, fun (V52) -> fun (V53) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V53)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V54) -> fun (V55) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V58, V59)) end end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V61)) end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V64, V65)) end end end end}, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V68, V69)) end end end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V71)) end end}, fun (V72) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'({'Idris.Builtin.MkPair', V72, V72})) end, fun (V73) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V81, V82)) end end end end, V76, V77, V78)) end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V88, V89)) end end end end, fun (V90) -> fun (V91) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V91)) end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V94, V95)) end end end end}, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V98, V99)) end end end end, fun (V100) -> fun (V101) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V101)) end end}, V84, V85)) end end end, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V109, V110)) end end end end, fun (V111) -> fun (V112) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V112)) end end, fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V115, V116)) end end end end}, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V119, V120)) end end end end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V122)) end end}, V104, V105, V106)) end end end end end}, fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V130, V131)) end end end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V133)) end end, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V136, V137)) end end end end}, fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V140, V141)) end end end end, fun (V142) -> fun (V143) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V143)) end end}, V125, V126, V127)) end end end end end, fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V149, V150)) end end end end, fun (V151) -> fun (V152) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V152)) end end, fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V155, V156)) end end end end}, fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V159, V160)) end end end end, fun (V161) -> fun (V162) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V162)) end end}, V145, V146)) end end end}, fun (V163) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'({'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V10, V15} | V73], 0})) end, fun () -> fun (V164) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V167, V168)) end end end end, fun (V169) -> fun (V170) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V170)) end end, fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V173, V174)) end end end end}, fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V177, V178)) end end end end, fun (V179) -> fun (V180) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V180)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', V15}}, V54, V36}, V164)) end end)) end, V55)) end end, V37)) end end, V19)) end end end; 0 -> fun (V181) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V184, V185)) end end end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V187)) end end, fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V190, V191)) end end end end}, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V194, V195)) end end end end, fun (V196) -> fun (V197) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V197)) end end}, ('un--renameIBinds'(V0, V1, V8)), fun (V198) -> fun (V199) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V202, V203)) end end end end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V205)) end end, fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V208, V209)) end end end end}, fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V212, V213)) end end end end, fun (V214) -> fun (V215) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V215)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V216) -> fun (V217) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V220, V221)) end end end end, fun (V222) -> fun (V223) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V223)) end end, fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V226, V227)) end end end end}, fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V230, V231)) end end end end, fun (V232) -> fun (V233) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V233)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', V10}}, V216, V198}, V217)) end end, V199)) end end, V181)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> fun (V234) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V237, V238)) end end end end, fun (V239) -> fun (V240) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V240)) end end, fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V243, V244)) end end end end}, fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V247, V248)) end end end end, fun (V249) -> fun (V250) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V250)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V251) -> fun (V252) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V255, V256)) end end end end, fun (V257) -> fun (V258) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V258)) end end, fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V261, V262)) end end end end}, fun (V263) -> fun (V264) -> fun (V265) -> fun (V266) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V265, V266)) end end end end, fun (V267) -> fun (V268) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V268)) end end}, ('un--renameIBinds'(V0, V1, V8)), fun (V269) -> fun (V270) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V271) -> fun (V272) -> fun (V273) -> fun (V274) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V273, V274)) end end end end, fun (V275) -> fun (V276) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V276)) end end, fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V279, V280)) end end end end}, fun (V281) -> fun (V282) -> fun (V283) -> fun (V284) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V283, V284)) end end end end, fun (V285) -> fun (V286) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V286)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V251, V269}, V270)) end end, V252)) end end, V234)) end end end(E6)); _ -> fun (V287) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V290, V291)) end end end end, fun (V292) -> fun (V293) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V293)) end end, fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V296, V297)) end end end end}, fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V300, V301)) end end end end, fun (V302) -> fun (V303) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V303)) end end}, ('un--renameIBinds'(V0, V1, V7)), fun (V304) -> fun (V305) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V308, V309)) end end end end, fun (V310) -> fun (V311) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V311)) end end, fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V314, V315)) end end end end}, fun (V316) -> fun (V317) -> fun (V318) -> fun (V319) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V318, V319)) end end end end, fun (V320) -> fun (V321) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V321)) end end}, ('un--renameIBinds'(V0, V1, V8)), fun (V322) -> fun (V323) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V324) -> fun (V325) -> fun (V326) -> fun (V327) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V326, V327)) end end end end, fun (V328) -> fun (V329) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V329)) end end, fun (V330) -> fun (V331) -> fun (V332) -> fun (V333) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V332, V333)) end end end end}, fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V336, V337)) end end end end, fun (V338) -> fun (V339) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V339)) end end}, {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V304, V322}, V323)) end end, V305)) end end, V287)) end end end(E0, E1, E2, E3, E4, E5)); {'Idris.TTImp.TTImp.ILam', E8, E9, E10, E11, E12, E13} -> (fun (V340, V341, V342, V343, V344, V345) -> fun (V346) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V347) -> fun (V348) -> fun (V349) -> fun (V350) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V349, V350)) end end end end, fun (V351) -> fun (V352) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V352)) end end, fun (V353) -> fun (V354) -> fun (V355) -> fun (V356) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V355, V356)) end end end end}, fun (V357) -> fun (V358) -> fun (V359) -> fun (V360) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V359, V360)) end end end end, fun (V361) -> fun (V362) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V362)) end end}, ('un--renameIBinds'(V0, V1, V344)), fun (V363) -> fun (V364) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V365) -> fun (V366) -> fun (V367) -> fun (V368) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V367, V368)) end end end end, fun (V369) -> fun (V370) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V370)) end end, fun (V371) -> fun (V372) -> fun (V373) -> fun (V374) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V373, V374)) end end end end}, fun (V375) -> fun (V376) -> fun (V377) -> fun (V378) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V377, V378)) end end end end, fun (V379) -> fun (V380) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V380)) end end}, ('un--renameIBinds'(V0, V1, V345)), fun (V381) -> fun (V382) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V383) -> fun (V384) -> fun (V385) -> fun (V386) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V385, V386)) end end end end, fun (V387) -> fun (V388) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V388)) end end, fun (V389) -> fun (V390) -> fun (V391) -> fun (V392) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V391, V392)) end end end end}, fun (V393) -> fun (V394) -> fun (V395) -> fun (V396) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V395, V396)) end end end end, fun (V397) -> fun (V398) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V398)) end end}, {'Idris.TTImp.TTImp.ILam', V340, V341, V342, V343, V363, V381}, V382)) end end, V364)) end end, V346)) end end(E8, E9, E10, E11, E12, E13)); {'Idris.TTImp.TTImp.IApp', E14, E15, E16} -> (fun (V399, V400, V401) -> fun (V402) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V403) -> fun (V404) -> fun (V405) -> fun (V406) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V405, V406)) end end end end, fun (V407) -> fun (V408) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V408)) end end, fun (V409) -> fun (V410) -> fun (V411) -> fun (V412) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V411, V412)) end end end end}, fun (V413) -> fun (V414) -> fun (V415) -> fun (V416) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V415, V416)) end end end end, fun (V417) -> fun (V418) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V418)) end end}, ('un--renameIBinds'(V0, V1, V400)), fun (V419) -> fun (V420) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V421) -> fun (V422) -> fun (V423) -> fun (V424) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V423, V424)) end end end end, fun (V425) -> fun (V426) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V426)) end end, fun (V427) -> fun (V428) -> fun (V429) -> fun (V430) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V429, V430)) end end end end}, fun (V431) -> fun (V432) -> fun (V433) -> fun (V434) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V433, V434)) end end end end, fun (V435) -> fun (V436) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V436)) end end}, ('un--renameIBinds'(V0, V1, V401)), fun (V437) -> fun (V438) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V439) -> fun (V440) -> fun (V441) -> fun (V442) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V441, V442)) end end end end, fun (V443) -> fun (V444) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V444)) end end, fun (V445) -> fun (V446) -> fun (V447) -> fun (V448) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V447, V448)) end end end end}, fun (V449) -> fun (V450) -> fun (V451) -> fun (V452) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V451, V452)) end end end end, fun (V453) -> fun (V454) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V454)) end end}, {'Idris.TTImp.TTImp.IApp', V399, V419, V437}, V438)) end end, V420)) end end, V402)) end end(E14, E15, E16)); {'Idris.TTImp.TTImp.IAutoApp', E17, E18, E19} -> (fun (V455, V456, V457) -> fun (V458) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V461, V462)) end end end end, fun (V463) -> fun (V464) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V464)) end end, fun (V465) -> fun (V466) -> fun (V467) -> fun (V468) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V467, V468)) end end end end}, fun (V469) -> fun (V470) -> fun (V471) -> fun (V472) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V471, V472)) end end end end, fun (V473) -> fun (V474) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V474)) end end}, ('un--renameIBinds'(V0, V1, V456)), fun (V475) -> fun (V476) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V477) -> fun (V478) -> fun (V479) -> fun (V480) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V479, V480)) end end end end, fun (V481) -> fun (V482) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V482)) end end, fun (V483) -> fun (V484) -> fun (V485) -> fun (V486) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V485, V486)) end end end end}, fun (V487) -> fun (V488) -> fun (V489) -> fun (V490) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V489, V490)) end end end end, fun (V491) -> fun (V492) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V492)) end end}, ('un--renameIBinds'(V0, V1, V457)), fun (V493) -> fun (V494) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V495) -> fun (V496) -> fun (V497) -> fun (V498) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V497, V498)) end end end end, fun (V499) -> fun (V500) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V500)) end end, fun (V501) -> fun (V502) -> fun (V503) -> fun (V504) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V503, V504)) end end end end}, fun (V505) -> fun (V506) -> fun (V507) -> fun (V508) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V507, V508)) end end end end, fun (V509) -> fun (V510) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V510)) end end}, {'Idris.TTImp.TTImp.IAutoApp', V455, V475, V493}, V494)) end end, V476)) end end, V458)) end end(E17, E18, E19)); {'Idris.TTImp.TTImp.INamedApp', E20, E21, E22, E23} -> (fun (V511, V512, V513, V514) -> fun (V515) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V516) -> fun (V517) -> fun (V518) -> fun (V519) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V518, V519)) end end end end, fun (V520) -> fun (V521) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V521)) end end, fun (V522) -> fun (V523) -> fun (V524) -> fun (V525) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V524, V525)) end end end end}, fun (V526) -> fun (V527) -> fun (V528) -> fun (V529) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V528, V529)) end end end end, fun (V530) -> fun (V531) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V531)) end end}, ('un--renameIBinds'(V0, V1, V512)), fun (V532) -> fun (V533) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V534) -> fun (V535) -> fun (V536) -> fun (V537) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V536, V537)) end end end end, fun (V538) -> fun (V539) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V539)) end end, fun (V540) -> fun (V541) -> fun (V542) -> fun (V543) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V542, V543)) end end end end}, fun (V544) -> fun (V545) -> fun (V546) -> fun (V547) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V546, V547)) end end end end, fun (V548) -> fun (V549) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V549)) end end}, ('un--renameIBinds'(V0, V1, V514)), fun (V550) -> fun (V551) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V552) -> fun (V553) -> fun (V554) -> fun (V555) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V554, V555)) end end end end, fun (V556) -> fun (V557) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V557)) end end, fun (V558) -> fun (V559) -> fun (V560) -> fun (V561) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V560, V561)) end end end end}, fun (V562) -> fun (V563) -> fun (V564) -> fun (V565) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V564, V565)) end end end end, fun (V566) -> fun (V567) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V567)) end end}, {'Idris.TTImp.TTImp.INamedApp', V511, V532, V513, V550}, V551)) end end, V533)) end end, V515)) end end(E20, E21, E22, E23)); {'Idris.TTImp.TTImp.IWithApp', E24, E25, E26} -> (fun (V568, V569, V570) -> fun (V571) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V572) -> fun (V573) -> fun (V574) -> fun (V575) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V574, V575)) end end end end, fun (V576) -> fun (V577) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V577)) end end, fun (V578) -> fun (V579) -> fun (V580) -> fun (V581) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V580, V581)) end end end end}, fun (V582) -> fun (V583) -> fun (V584) -> fun (V585) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V584, V585)) end end end end, fun (V586) -> fun (V587) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V587)) end end}, ('un--renameIBinds'(V0, V1, V569)), fun (V588) -> fun (V589) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V590) -> fun (V591) -> fun (V592) -> fun (V593) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V592, V593)) end end end end, fun (V594) -> fun (V595) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V595)) end end, fun (V596) -> fun (V597) -> fun (V598) -> fun (V599) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V598, V599)) end end end end}, fun (V600) -> fun (V601) -> fun (V602) -> fun (V603) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V602, V603)) end end end end, fun (V604) -> fun (V605) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V605)) end end}, ('un--renameIBinds'(V0, V1, V570)), fun (V606) -> fun (V607) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V608) -> fun (V609) -> fun (V610) -> fun (V611) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V610, V611)) end end end end, fun (V612) -> fun (V613) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V613)) end end, fun (V614) -> fun (V615) -> fun (V616) -> fun (V617) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V616, V617)) end end end end}, fun (V618) -> fun (V619) -> fun (V620) -> fun (V621) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V620, V621)) end end end end, fun (V622) -> fun (V623) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V623)) end end}, {'Idris.TTImp.TTImp.IWithApp', V568, V588, V606}, V607)) end end, V589)) end end, V571)) end end(E24, E25, E26)); {'Idris.TTImp.TTImp.IAs', E27, E28, E29, E30, E31} -> (fun (V624, V625, V626, V627, V628) -> fun (V629) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V630) -> fun (V631) -> fun (V632) -> fun (V633) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V632, V633)) end end end end, fun (V634) -> fun (V635) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V635)) end end, fun (V636) -> fun (V637) -> fun (V638) -> fun (V639) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V638, V639)) end end end end}, fun (V640) -> fun (V641) -> fun (V642) -> fun (V643) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V642, V643)) end end end end, fun (V644) -> fun (V645) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V645)) end end}, ('un--renameIBinds'(V0, V1, V628)), fun (V646) -> fun (V647) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V648) -> fun (V649) -> fun (V650) -> fun (V651) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V650, V651)) end end end end, fun (V652) -> fun (V653) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V653)) end end, fun (V654) -> fun (V655) -> fun (V656) -> fun (V657) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V656, V657)) end end end end}, fun (V658) -> fun (V659) -> fun (V660) -> fun (V661) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V660, V661)) end end end end, fun (V662) -> fun (V663) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V663)) end end}, {'Idris.TTImp.TTImp.IAs', V624, V625, V626, V627, V646}, V647)) end end, V629)) end end(E27, E28, E29, E30, E31)); {'Idris.TTImp.TTImp.IMustUnify', E32, E33, E34} -> (fun (V664, V665, V666) -> fun (V667) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V668) -> fun (V669) -> fun (V670) -> fun (V671) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V670, V671)) end end end end, fun (V672) -> fun (V673) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V673)) end end, fun (V674) -> fun (V675) -> fun (V676) -> fun (V677) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V676, V677)) end end end end}, fun (V678) -> fun (V679) -> fun (V680) -> fun (V681) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V680, V681)) end end end end, fun (V682) -> fun (V683) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V683)) end end}, ('un--renameIBinds'(V0, V1, V666)), fun (V684) -> fun (V685) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V686) -> fun (V687) -> fun (V688) -> fun (V689) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V688, V689)) end end end end, fun (V690) -> fun (V691) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V691)) end end, fun (V692) -> fun (V693) -> fun (V694) -> fun (V695) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V694, V695)) end end end end}, fun (V696) -> fun (V697) -> fun (V698) -> fun (V699) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V698, V699)) end end end end, fun (V700) -> fun (V701) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V701)) end end}, {'Idris.TTImp.TTImp.IMustUnify', V664, V665, V684}, V685)) end end, V667)) end end(E32, E33, E34)); {'Idris.TTImp.TTImp.IDelayed', E35, E36, E37} -> (fun (V702, V703, V704) -> fun (V705) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V706) -> fun (V707) -> fun (V708) -> fun (V709) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V708, V709)) end end end end, fun (V710) -> fun (V711) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V711)) end end, fun (V712) -> fun (V713) -> fun (V714) -> fun (V715) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V714, V715)) end end end end}, fun (V716) -> fun (V717) -> fun (V718) -> fun (V719) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V718, V719)) end end end end, fun (V720) -> fun (V721) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V721)) end end}, ('un--renameIBinds'(V0, V1, V704)), fun (V722) -> fun (V723) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V724) -> fun (V725) -> fun (V726) -> fun (V727) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V726, V727)) end end end end, fun (V728) -> fun (V729) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V729)) end end, fun (V730) -> fun (V731) -> fun (V732) -> fun (V733) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V732, V733)) end end end end}, fun (V734) -> fun (V735) -> fun (V736) -> fun (V737) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V736, V737)) end end end end, fun (V738) -> fun (V739) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V739)) end end}, {'Idris.TTImp.TTImp.IDelayed', V702, V703, V722}, V723)) end end, V705)) end end(E35, E36, E37)); {'Idris.TTImp.TTImp.IDelay', E38, E39} -> (fun (V740, V741) -> fun (V742) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V743) -> fun (V744) -> fun (V745) -> fun (V746) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V745, V746)) end end end end, fun (V747) -> fun (V748) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V748)) end end, fun (V749) -> fun (V750) -> fun (V751) -> fun (V752) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V751, V752)) end end end end}, fun (V753) -> fun (V754) -> fun (V755) -> fun (V756) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V755, V756)) end end end end, fun (V757) -> fun (V758) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V758)) end end}, ('un--renameIBinds'(V0, V1, V741)), fun (V759) -> fun (V760) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V761) -> fun (V762) -> fun (V763) -> fun (V764) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V763, V764)) end end end end, fun (V765) -> fun (V766) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V766)) end end, fun (V767) -> fun (V768) -> fun (V769) -> fun (V770) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V769, V770)) end end end end}, fun (V771) -> fun (V772) -> fun (V773) -> fun (V774) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V773, V774)) end end end end, fun (V775) -> fun (V776) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V776)) end end}, {'Idris.TTImp.TTImp.IDelay', V740, V759}, V760)) end end, V742)) end end(E38, E39)); {'Idris.TTImp.TTImp.IForce', E40, E41} -> (fun (V777, V778) -> fun (V779) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V780) -> fun (V781) -> fun (V782) -> fun (V783) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V782, V783)) end end end end, fun (V784) -> fun (V785) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V785)) end end, fun (V786) -> fun (V787) -> fun (V788) -> fun (V789) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V788, V789)) end end end end}, fun (V790) -> fun (V791) -> fun (V792) -> fun (V793) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V792, V793)) end end end end, fun (V794) -> fun (V795) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V795)) end end}, ('un--renameIBinds'(V0, V1, V778)), fun (V796) -> fun (V797) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V798) -> fun (V799) -> fun (V800) -> fun (V801) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V800, V801)) end end end end, fun (V802) -> fun (V803) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V803)) end end, fun (V804) -> fun (V805) -> fun (V806) -> fun (V807) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V806, V807)) end end end end}, fun (V808) -> fun (V809) -> fun (V810) -> fun (V811) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V810, V811)) end end end end, fun (V812) -> fun (V813) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V813)) end end}, {'Idris.TTImp.TTImp.IForce', V777, V796}, V797)) end end, V779)) end end(E40, E41)); {'Idris.TTImp.TTImp.IAlternative', E42, E43, E44} -> (fun (V814, V815, V816) -> fun (V817) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V818) -> fun (V819) -> fun (V820) -> fun (V821) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V820, V821)) end end end end, fun (V822) -> fun (V823) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V823)) end end, fun (V824) -> fun (V825) -> fun (V826) -> fun (V827) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V826, V827)) end end end end}, fun (V828) -> fun (V829) -> fun (V830) -> fun (V831) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V830, V831)) end end end end, fun (V832) -> fun (V833) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V833)) end end}, fun (V834) -> ('nested--5338-3786--in--un--renameAlt'(V816, V815, V814, V1, V0, V815, V834)) end, fun (V835) -> fun (V836) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V837) -> fun (V838) -> fun (V839) -> fun (V840) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V839, V840)) end end end end, fun (V841) -> fun (V842) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V842)) end end, fun (V843) -> fun (V844) -> fun (V845) -> fun (V846) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V845, V846)) end end end end}, fun (V847) -> fun (V848) -> fun (V849) -> fun (V850) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V849, V850)) end end end end, fun (V851) -> fun (V852) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V852)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V853) -> fun (V854) -> fun (V855) -> fun (V856) -> fun (V857) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(fun (V858) -> fun (V859) -> fun (V860) -> fun (V861) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V860, V861)) end end end end, V855, V856, V857)) end end end end end, fun (V862) -> fun (V863) -> fun (V864) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V865) -> fun (V866) -> fun (V867) -> fun (V868) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V867, V868)) end end end end, fun (V869) -> fun (V870) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V870)) end end, fun (V871) -> fun (V872) -> fun (V873) -> fun (V874) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V873, V874)) end end end end}, fun (V875) -> fun (V876) -> fun (V877) -> fun (V878) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V877, V878)) end end end end, fun (V879) -> fun (V880) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V880)) end end}, V863, V864)) end end end, fun (V881) -> fun (V882) -> fun (V883) -> fun (V884) -> fun (V885) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V886) -> fun (V887) -> fun (V888) -> fun (V889) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V888, V889)) end end end end, fun (V890) -> fun (V891) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V891)) end end, fun (V892) -> fun (V893) -> fun (V894) -> fun (V895) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V894, V895)) end end end end}, fun (V896) -> fun (V897) -> fun (V898) -> fun (V899) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V898, V899)) end end end end, fun (V900) -> fun (V901) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V901)) end end}, V883, V884, V885)) end end end end end}, fun (V902) -> ('un--renameIBinds'(V0, V1, V902)) end, V816)), fun (V903) -> fun (V904) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V905) -> fun (V906) -> fun (V907) -> fun (V908) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V907, V908)) end end end end, fun (V909) -> fun (V910) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V910)) end end, fun (V911) -> fun (V912) -> fun (V913) -> fun (V914) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V913, V914)) end end end end}, fun (V915) -> fun (V916) -> fun (V917) -> fun (V918) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V917, V918)) end end end end, fun (V919) -> fun (V920) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V920)) end end}, {'Idris.TTImp.TTImp.IAlternative', V814, V835, V903}, V904)) end end, V836)) end end, V817)) end end(E42, E43, E44)); {'Idris.TTImp.TTImp.IBindVar', E45, E46} -> (fun (V921, V922) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V923) -> fun (V924) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V923, V924)) end end, fun (V925) -> fun (V926) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V925, V926)) end end}, V922, V0)) of 1 -> begin (V927 = ('Idris.Idris2.TTImp.Utils':'un--getUnique'(('Idris.Idris2.Prelude.Types.List':'un--++'(V0, V1)), V922))), fun (V928) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V929) -> fun (V930) -> fun (V931) -> fun (V932) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V931, V932)) end end end end, fun (V933) -> fun (V934) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V934)) end end, fun (V935) -> fun (V936) -> fun (V937) -> fun (V938) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V937, V938)) end end end end}, fun (V939) -> fun (V940) -> fun (V941) -> fun (V942) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V941, V942)) end end end end, fun (V943) -> fun (V944) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V944)) end end}, fun (V945) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'({'Idris.Builtin.MkPair', V945, V945})) end, fun (V946) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V947) -> fun (V948) -> fun (V949) -> fun (V950) -> fun (V951) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--map_Functor_((StateT $stateType) $f)'(fun (V952) -> fun (V953) -> fun (V954) -> fun (V955) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V954, V955)) end end end end, V949, V950, V951)) end end end end end, fun (V956) -> fun (V957) -> fun (V958) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V959) -> fun (V960) -> fun (V961) -> fun (V962) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V961, V962)) end end end end, fun (V963) -> fun (V964) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V964)) end end, fun (V965) -> fun (V966) -> fun (V967) -> fun (V968) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V967, V968)) end end end end}, fun (V969) -> fun (V970) -> fun (V971) -> fun (V972) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V971, V972)) end end end end, fun (V973) -> fun (V974) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V974)) end end}, V957, V958)) end end end, fun (V975) -> fun (V976) -> fun (V977) -> fun (V978) -> fun (V979) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--<*>_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V980) -> fun (V981) -> fun (V982) -> fun (V983) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V982, V983)) end end end end, fun (V984) -> fun (V985) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V985)) end end, fun (V986) -> fun (V987) -> fun (V988) -> fun (V989) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V988, V989)) end end end end}, fun (V990) -> fun (V991) -> fun (V992) -> fun (V993) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V992, V993)) end end end end, fun (V994) -> fun (V995) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V995)) end end}, V977, V978, V979)) end end end end end}, fun (V996) -> fun (V997) -> fun (V998) -> fun (V999) -> fun (V1000) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un-->>=_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1001) -> fun (V1002) -> fun (V1003) -> fun (V1004) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1003, V1004)) end end end end, fun (V1005) -> fun (V1006) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1006)) end end, fun (V1007) -> fun (V1008) -> fun (V1009) -> fun (V1010) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1009, V1010)) end end end end}, fun (V1011) -> fun (V1012) -> fun (V1013) -> fun (V1014) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1013, V1014)) end end end end, fun (V1015) -> fun (V1016) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1016)) end end}, V998, V999, V1000)) end end end end end, fun (V1017) -> fun (V1018) -> fun (V1019) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--join_Monad_((StateT $stateType) $m)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1020) -> fun (V1021) -> fun (V1022) -> fun (V1023) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1022, V1023)) end end end end, fun (V1024) -> fun (V1025) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1025)) end end, fun (V1026) -> fun (V1027) -> fun (V1028) -> fun (V1029) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1028, V1029)) end end end end}, fun (V1030) -> fun (V1031) -> fun (V1032) -> fun (V1033) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1032, V1033)) end end end end, fun (V1034) -> fun (V1035) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1035)) end end}, V1018, V1019)) end end end}, fun (V1036) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'({'Idris.Builtin.MkPair', [{'Idris.Builtin.MkPair', V922, V927} | V946], 0})) end, fun () -> fun (V1037) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1038) -> fun (V1039) -> fun (V1040) -> fun (V1041) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1040, V1041)) end end end end, fun (V1042) -> fun (V1043) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1043)) end end, fun (V1044) -> fun (V1045) -> fun (V1046) -> fun (V1047) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1046, V1047)) end end end end}, fun (V1048) -> fun (V1049) -> fun (V1050) -> fun (V1051) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1050, V1051)) end end end end, fun (V1052) -> fun (V1053) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1053)) end end}, {'Idris.TTImp.TTImp.IBindVar', V921, V927}, V1037)) end end)) end, V928)) end end; 0 -> fun (V1054) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1055) -> fun (V1056) -> fun (V1057) -> fun (V1058) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1057, V1058)) end end end end, fun (V1059) -> fun (V1060) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1060)) end end, fun (V1061) -> fun (V1062) -> fun (V1063) -> fun (V1064) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1063, V1064)) end end end end}, fun (V1065) -> fun (V1066) -> fun (V1067) -> fun (V1068) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1067, V1068)) end end end end, fun (V1069) -> fun (V1070) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1070)) end end}, {'Idris.TTImp.TTImp.IBindVar', V921, V922}, V1054)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46)); _ -> fun (V1071) -> ('Idris.Idris2.Control.Monad.State.State':'dn--un--pure_Applicative_((StateT $stateType) $f)'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1072) -> fun (V1073) -> fun (V1074) -> fun (V1075) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--map_Functor_Identity'(V1074, V1075)) end end end end, fun (V1076) -> fun (V1077) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--pure_Applicative_Identity'(V1077)) end end, fun (V1078) -> fun (V1079) -> fun (V1080) -> fun (V1081) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--<*>_Applicative_Identity'(V1080, V1081)) end end end end}, fun (V1082) -> fun (V1083) -> fun (V1084) -> fun (V1085) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un-->>=_Monad_Identity'(V1084, V1085)) end end end end, fun (V1086) -> fun (V1087) -> ('Idris.Idris2.Control.Monad.Identity':'dn--un--join_Monad_Identity'(V1087)) end end}, V2, V1071)) end end.
'un--piBindNames'(V0, V1, V2, V3, V4) -> begin (V5 = (('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V0, V1, 1, V2, [], V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('nested--6543-4507--in--un--piBind'(V3, V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Builtin':'un--fst'(V8)) end, V7)), V3))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getUsings'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V28, V29)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, fun (V30) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V31) -> fun (V32) -> ('un--getUsing'(V31, V32)) end end, V1, V30)) end, V0)).
'un--getUsing'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V6 of {'Idris.Prelude.Types.Just', E6} -> (fun (V8) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V8)) of 1 -> [{'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V9, V10)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V11, V12)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), {'Idris.Builtin.MkPair', {'Idris.Core.TT.Implicit'}, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V0}, V7}}}} | ('un--getUsing'(V0, V3))]; 0 -> ('un--getUsing'(V0, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V17 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, ('Idris.Idris2.TTImp.Utils':'un--findIBindVars'(V7))))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V21)) end end}, V0, V17)) of 1 -> [{'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), {'Idris.Builtin.MkPair', {'Idris.Core.TT.AutoImplicit'}, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V7}}}} | ('un--getUsing'(V0, V3))]; 0 -> ('un--getUsing'(V0, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--doBind'(V0, V1) -> case V0 of [] -> V1; _ -> case V1 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.UN', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.TTImp.TTImp.IVar', V2, {'Idris.Core.Name.UN', V4}} end, fun () -> fun (V5) -> {'Idris.TTImp.TTImp.IBindVar', V2, V5} end end, ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V8, V9)) end end}, V4, V0)))) end(E2)); _ -> V1 end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E3, E4, E5, E6, E7, E8} -> (fun (V10, V11, V12, V13, V14, V15) -> begin (V19 = case V13 of {'Idris.Prelude.Types.Just', E9} -> (fun (V16) -> case V16 of {'Idris.Core.Name.UN', E10} -> (fun (V17) -> ('Idris.Idris2.Data.List':'un--filter'(fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(('Idris.Idris2.Builtin':'un--fst'(V18)), V17)) end, V0)) end(E10)); _ -> V0 end end(E9)); _ -> V0 end), {'Idris.TTImp.TTImp.IPi', V10, V11, V12, V13, ('un--doBind'(V19, V14)), ('un--doBind'(V19, V15))} end end(E3, E4, E5, E6, E7, E8)); {'Idris.TTImp.TTImp.ILam', E11, E12, E13, E14, E15, E16} -> (fun (V20, V21, V22, V23, V24, V25) -> begin (V29 = case V23 of {'Idris.Prelude.Types.Just', E17} -> (fun (V26) -> case V26 of {'Idris.Core.Name.UN', E18} -> (fun (V27) -> ('Idris.Idris2.Data.List':'un--filter'(fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(('Idris.Idris2.Builtin':'un--fst'(V28)), V27)) end, V0)) end(E18)); _ -> V0 end end(E17)); _ -> V0 end), {'Idris.TTImp.TTImp.ILam', V20, V21, V22, V23, ('un--doBind'(V29, V24)), ('un--doBind'(V29, V25))} end end(E11, E12, E13, E14, E15, E16)); {'Idris.TTImp.TTImp.IApp', E19, E20, E21} -> (fun (V30, V31, V32) -> {'Idris.TTImp.TTImp.IApp', V30, ('un--doBind'(V0, V31)), ('un--doBind'(V0, V32))} end(E19, E20, E21)); {'Idris.TTImp.TTImp.IAutoApp', E22, E23, E24} -> (fun (V33, V34, V35) -> {'Idris.TTImp.TTImp.IAutoApp', V33, ('un--doBind'(V0, V34)), ('un--doBind'(V0, V35))} end(E22, E23, E24)); {'Idris.TTImp.TTImp.INamedApp', E25, E26, E27, E28} -> (fun (V36, V37, V38, V39) -> {'Idris.TTImp.TTImp.INamedApp', V36, ('un--doBind'(V0, V37)), V38, ('un--doBind'(V0, V39))} end(E25, E26, E27, E28)); {'Idris.TTImp.TTImp.IWithApp', E29, E30, E31} -> (fun (V40, V41, V42) -> {'Idris.TTImp.TTImp.IWithApp', V40, ('un--doBind'(V0, V41)), ('un--doBind'(V0, V42))} end(E29, E30, E31)); {'Idris.TTImp.TTImp.IAs', E32, E33, E34, E35, E36} -> (fun (V43, V44, V45, V46, V47) -> {'Idris.TTImp.TTImp.IAs', V43, V44, V45, V46, ('un--doBind'(V0, V47))} end(E32, E33, E34, E35, E36)); {'Idris.TTImp.TTImp.IMustUnify', E37, E38, E39} -> (fun (V48, V49, V50) -> {'Idris.TTImp.TTImp.IMustUnify', V48, V49, ('un--doBind'(V0, V50))} end(E37, E38, E39)); {'Idris.TTImp.TTImp.IDelayed', E40, E41, E42} -> (fun (V51, V52, V53) -> {'Idris.TTImp.TTImp.IDelayed', V51, V52, ('un--doBind'(V0, V53))} end(E40, E41, E42)); {'Idris.TTImp.TTImp.IDelay', E43, E44} -> (fun (V54, V55) -> {'Idris.TTImp.TTImp.IDelay', V54, ('un--doBind'(V0, V55))} end(E43, E44)); {'Idris.TTImp.TTImp.IForce', E45, E46} -> (fun (V56, V57) -> {'Idris.TTImp.TTImp.IForce', V56, ('un--doBind'(V0, V57))} end(E45, E46)); {'Idris.TTImp.TTImp.IQuote', E47, E48} -> (fun (V58, V59) -> {'Idris.TTImp.TTImp.IQuote', V58, ('un--doBind'(V0, V59))} end(E47, E48)); {'Idris.TTImp.TTImp.IUnquote', E49, E50} -> (fun (V60, V61) -> {'Idris.TTImp.TTImp.IUnquote', V60, ('un--doBind'(V0, V61))} end(E49, E50)); {'Idris.TTImp.TTImp.IAlternative', E51, E52, E53} -> (fun (V62, V63, V64) -> {'Idris.TTImp.TTImp.IAlternative', V62, ('Idris.Idris2.TTImp.TTImp':'un--mapAltType'(fun (V65) -> ('un--doBind'(V0, V65)) end, V63)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V66) -> ('un--doBind'(V0, V66)) end, V64))} end(E51, E52, E53)); _ -> V1 end end.
'un--bindUsings'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V8, V9) -> {'Idris.TTImp.TTImp.IPi', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V9)), V4, V6, V8, V9, ('un--bindUsings'(V3, V1))} end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--bindTypeNamesUsed'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of 1 -> begin (V9 = (('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V0, V1, 1, V3, V2, V4))(V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Right', ('un--doBind'(V11, V4))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindTypeNames'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of 1 -> begin (V9 = (('Idris.Idris2.TTImp.Utils':'un--findUniqueBindableNames'(V0, V1, 1, V3, [], V4))(V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('un--doBind'(V11, V4))), {'Idris.Prelude.Types.Right', ('un--addUsing'(V2, V12))} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', V4}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindNames'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--isUnboundImplicits'(V0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of 1 -> begin (V27 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V11, V12)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V15, V16)) end end}, V7, V8)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V21, V22)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V25, V26)) end end}, V17, V18)) end end}, ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(V1, [], [], V2))))), begin (V43 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"elab.bindnames"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found names :"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V28) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V29)) end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V30, V31)) end end}, {'Idris.Prelude.Show.MkShow', fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V32)) end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V33, V34)) end end}}, V28)) end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V38, V39)) end end}, {'Idris.Prelude.Show.MkShow', fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V40)) end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V41, V42)) end end}}, V35, V36)) end end}, V27)))) end, V3))), case V43 of {'Idris.Prelude.Types.Left', E2} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> {'Idris.Core.Name.UN', V46} end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('Idris.Idris2.Builtin':'un--snd'(V47)) end, V27)))), ('un--doBind'(V27, V2))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], V2}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addUsing'(V0, V1) -> begin (V6 = ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V2) -> fun (V3) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, V3)) end end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V4, V5)) end end}, ('Idris.Idris2.TTImp.Utils':'un--findIBindVars'(V1))))), begin (V9 = ('Idris.Idris2.Data.List':'un--nubBy'(fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(('Idris.Idris2.Builtin':'un--fst'(V7)), ('Idris.Idris2.Builtin':'un--fst'(V8)))) end end, ('un--getUsings'(V6, ('nested--6364-4341--in--un--tag'(V1, V0, 0, V0))))))), ('un--bindUsings'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> ('Idris.Idris2.Builtin':'un--snd'(V10)) end, V9)), V1)) end end.
