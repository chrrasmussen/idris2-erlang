-module('Idris.Idris2.Core.Normalise').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in normalisePrims-13697'/15,
  'case--case block in normalisePrims-13662'/12,
  'case--getMatchingVars-8980'/11,
  'case--case block in getMatchingVarAlt-8580'/15,
  'case--case block in evalDef-4810'/19,
  'case--evalOp-4642'/9,
  'nested--13003-8355--in--un--weakenP'/18,
  'nested--12450-7519--in--un--weakenP'/9,
  'nested--12450-7517--in--un--tryUpdatePi'/8,
  'nested--12450-7518--in--un--tryUpdateB'/8,
  'nested--10269-6243--in--un--toHolesOnly'/12,
  'nested--6413-4477--in--un--takeStk'/7,
  'nested--6237-1826--in--un--set'/5,
  'nested--18958-13061--in--un--repSub'/10,
  'nested--18958-13060--in--un--repArg'/10,
  'nested--12995-8026--in--un--quickConvHead'/6,
  'nested--12995-8027--in--un--quickConvArg'/6,
  'nested--13030-9622--in--un--getScrutinee'/14,
  'nested--13024-9134--in--un--getArgPos'/11,
  'nested--10242-5604--in--un--findName'/11,
  'nested--12450-7349--in--un--findIdx'/8,
  'nested--13030-9621--in--un--findArgPos'/13,
  'nested--13003-8356--in--un--extend'/16,
  'nested--6415-4607--in--un--evalAll'/10,
  'nested--18833-12948--in--un--dumpEnv'/8,
  'nested--13003-8357--in--un--dropV'/15,
  'nested--13003-8358--in--un--dropP'/16,
  'nested--13024-9135--in--un--convertMatches'/12,
  'nested--6410-3940--in--un--concrete'/13,
  'nested--6402-2131--in--un--closeArgs'/13,
  'nested--17128-11697--in--un--args2'/11,
  'nested--17128-11696--in--un--args1'/11,
  'nested--6403-2582--in--un--applyToStack'/11,
  'nested--10242-5474--in--un--addLater'/12,
  'nested--12054-6961--in--un--act'/6,
  'dn--un--quote_Quote_Term'/6,
  'dn--un--quote_Quote_NF'/6,
  'dn--un--quote_Quote_Closure'/6,
  'dn--un--quoteGen_Quote_Term'/7,
  'dn--un--quoteGen_Quote_NF'/7,
  'dn--un--quoteGen_Quote_Closure'/7,
  'dn--un--convert_Convert_Term'/7,
  'dn--un--convert_Convert_NF'/7,
  'dn--un--convert_Convert_Closure'/7,
  'dn--un--convGen_Convert_Term'/8,
  'dn--un--convGen_Convert_NF'/7,
  'dn--un--convGen_Convert_Closure'/8,
  'dn--un--__Impl_Quote_Term'/0,
  'dn--un--__Impl_Quote_NF'/0,
  'dn--un--__Impl_Quote_Closure'/0,
  'dn--un--__Impl_Convert_Term'/0,
  'dn--un--__Impl_Convert_NF'/0,
  'dn--un--__Impl_Convert_Closure'/0,
  'un--updateLocal'/5,
  'un--updateLimit'/3,
  'un--tryUpdate'/4,
  'un--tryAlt'/12,
  'un--toClosure'/3,
  'un--takeFromStack'/4,
  'un--replace\x{27}'/9,
  'un--replace'/8,
  'un--quotePi'/9,
  'un--quoteHead'/9,
  'un--quoteGenNF'/9,
  'un--quoteGen'/6,
  'un--quoteBinder'/9,
  'un--quoteArgsWithFC'/9,
  'un--quoteArgs'/9,
  'un--quoteArgWithFC'/9,
  'un--quoteArg'/9,
  'un--quote'/6,
  'un--quickConv'/2,
  'un--normaliseScope'/6,
  'un--normalisePrims'/11,
  'un--normaliseOpts'/7,
  'un--normaliseLHS'/6,
  'un--normaliseHoles'/6,
  'un--normaliseErr'/3,
  'un--normaliseArgHoles'/6,
  'un--normaliseAll'/6,
  'un--normalise'/6,
  'un--nfOpts'/6,
  'un--nf'/5,
  'un--logTermNF\x{27}'/8,
  'un--logTermNF'/8,
  'un--logNF'/8,
  'un--logGlueNF'/8,
  'un--logGlue'/8,
  'un--logEnv'/7,
  'un--isFromTerm'/1,
  'un--gnfOpts'/4,
  'un--gnf'/3,
  'un--glueBack'/5,
  'un--getValArity'/4,
  'un--getTerm'/1,
  'un--getNF'/2,
  'un--getMatchingVars'/7,
  'un--getMatchingVarAlts'/8,
  'un--getMatchingVarAlt'/7,
  'un--getCaseBound'/5,
  'un--getArity'/6,
  'un--genName'/3,
  'un--gType'/1,
  'un--gErased'/1,
  'un--findAlt'/13,
  'un--evalWithOpts'/9,
  'un--evalTree'/11,
  'un--evalRef'/12,
  'un--evalOp'/8,
  'un--evalMeta'/10,
  'un--evalLocal'/10,
  'un--evalLocClosure'/9,
  'un--evalDef'/13,
  'un--evalConAlt'/13,
  'un--evalClosure'/4,
  'un--evalArg'/4,
  'un--eval'/9,
  'un--etaContract'/4,
  'un--convert'/6,
  'un--convGen'/6,
  'un--convBinders'/7,
  'un--continueNF'/5,
  'un--chkSameDefs'/10,
  'un--chkConvHead'/7,
  'un--chkConvCaseBlock'/11,
  'un--argsFromStack'/4,
  'un--allConvNF'/8,
  'un--allConv'/8
]).
'case--case block in case block in normalisePrims-13697'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> case (V8(V15)) of 1 -> begin (V17 = begin (V16 = ('erlang':'get'(V9))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E1} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V19) -> begin (V20 = case V6 of 1 -> ('un--normaliseAll'(V9, V0, V19, V1, V2, V14)); 0 -> ('un--normalise'(V9, V0, V19, V1, V2, V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V20 of {'Idris.Prelude.Types.Left', E3} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V22}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E0)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end.
'case--case block in normalisePrims-13662'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [E0 | E1] -> (fun (V12, V13) -> fun (V14) -> ('case--case block in case block in normalisePrims-13697'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13, V12, (V7(V12)), V14)) end end(E0, E1)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--getMatchingVars-8980'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> begin (V12 = ('dn--un--convert_Convert_Term'(V8, V1, V7, ('Idris.Idris2.Core.Env':'un--mkEnv'(('Idris.Idris2.Core.TT':'un--getLoc'(V2)), V1)), V11, V4, V10))), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> case V14 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V6}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getMatchingVarAlt-8580'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> begin (V16 = (('un--getMatchingVars'(V12, ('Idris.Idris2.Prelude.Types.List':'un--++'(V2, V0)), ('Idris.Idris2.Prelude.Types.List':'un--++'(V6, V1)), V11, V15, V3, V7))(V14))), case V16 of {'Idris.Prelude.Types.Left', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V20) -> ('nested--13003-8358--in--un--dropP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V2, V6, V20)) end, V19))}} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in evalDef-4810'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', (V8())} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V20, V21) -> begin (V22 = (('un--evalTree'(V0, V1, V16, V3, V2, V15, V20, V14, V12, V21, V6))(V18))), case V22 of {'Idris.Prelude.Types.Left', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V24) -> case V24 of {'Idris.Core.Normalise.Result', E5} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V25} end(E5)); _ -> {'Idris.Prelude.Types.Right', (V8())} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--evalOp-4642'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> fun (V10) -> case V9 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V11, V12) -> case V12 of [] -> begin (V13 = ('nested--6415-4607--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V10))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> case (V6(V15)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', (V3())} end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Right', V16} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', (V3())} end end(E1, E2)); _ -> {'Idris.Prelude.Types.Right', (V3())} end end end(E0)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', (V3())} end end.
'nested--13003-8355--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V18)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V19))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12450-7519--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V9)), ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Var'(V10))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12450-7517--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Explicit'})) end()); {'Idris.Core.TT.Implicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Implicit'})) end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.AutoImplicit'})) end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V8)), fun (V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.DefImplicit', V9})) end)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12450-7518--in--un--tryUpdateB'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--12450-7517--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V10)), fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V11)), fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Lam', V8, V9, V12, V13})) end)) end)) end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V16)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V17)), fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Let', V14, V15, V18, V19})) end)) end)) end(E4, E5, E6, E7)); {'Idris.Core.TT.Pi', E8, E9, E10, E11} -> (fun (V20, V21, V22, V23) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--12450-7517--in--un--tryUpdatePi'(V0, V1, V2, V3, V4, V5, V6, V22)), fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V6, V23)), fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Pi', V20, V21, V24, V25})) end)) end)) end(E8, E9, E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--10269-6243--in--un--toHolesOnly'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Value.MkClosure', E0, E1, E2, E3, E4} -> (fun (V12, V13, V14, V15, V16) -> {'Idris.Core.Value.MkClosure', V12, case V13 of {'Idris.Core.Value.MkEvalOpts', E5, E6, E7, E8, E9, E10, E11} -> (fun (V17, V18, V19, V20, V21, V22, V23) -> {'Idris.Core.Value.MkEvalOpts', 1, 1, V19, V20, V21, V22, V23} end(E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14, V15, V16} end(E0, E1, E2, E3, E4)); _ -> V11 end.
'nested--6413-4477--in--un--takeStk'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.Vect':'un--reverse'(V6)), V5}}; _ -> begin (V7 = (V4 - 1)), case V5 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> ('nested--6413-4477--in--un--takeStk'(V0, V1, V2, V3, V7, V9, {'Idris.Data.Vect.::', ('Idris.Idris2.Builtin':'un--snd'(V8)), V6})) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--6237-1826--in--un--set'(V0, V1, V2, V3, V4) -> case V4 of [] -> []; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V2)) of 1 -> [{'Idris.Builtin.MkPair', V7, V3} | V6]; 0 -> [{'Idris.Builtin.MkPair', V7, V8} | ('nested--6237-1826--in--un--set'(V0, V1, V2, V3, V6))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18958-13061--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Core.Value.NBind', E2, E3, E4, E5} -> (fun (V10, V11, V12, V13) -> begin (V16 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V14) -> fun (V15) -> ('nested--18958-13061--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V14, V15)) end end, V12, V9))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = {'Idris.Core.Name.MN', <<"tmp"/utf8>>, V6}), begin (V23 = begin (V20 = (((V13(V5))(('un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, {'Idris.Core.TT.Ref', V10, {'Idris.Core.TT.Bound'}, V19}))))(V9))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> ('un--replace\x{27}'(V7, V0, ((V6 + 1) rem 9223372036854775808), V5, V4, V3, V2, V22, V9)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V10, V11, V18, ('Idris.Idris2.Core.TT':'un--refsToLocals'({'Idris.Core.TT.Bounds.Add', V11, V19, {'Idris.Core.TT.Bounds.None'}}, V25))}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5)); {'Idris.Core.Value.NApp', E12, E13, E14} -> (fun (V26, V27, V28) -> case V28 of [] -> begin (V29 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V29 of {'Idris.Prelude.Types.Left', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V31) -> ('dn--un--quote_Quote_NF'(V7, V0, V31, V4, {'Idris.Core.Value.NApp', V26, V27, []}, V9)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V34) -> fun (V35) -> ('nested--18958-13060--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V34, V35)) end end, V32, V33)) end end, V28, [], V9))), case V36 of {'Idris.Prelude.Types.Left', E15} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V38) -> begin (V39 = ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, {'Idris.Core.Value.NApp', V26, V27, []}, V9))), case V39 of {'Idris.Prelude.Types.Left', E17} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V41) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V41, V38))} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13, E14)); {'Idris.Core.Value.NDCon', E21, E22, E23, E24, E25} -> (fun (V42, V43, V44, V45, V46) -> begin (V51 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V49) -> fun (V50) -> ('nested--18958-13060--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V49, V50)) end end, V47, V48)) end end, V46, [], V9))), case V51 of {'Idris.Prelude.Types.Left', E26} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V53) -> begin (V54 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V54 of {'Idris.Prelude.Types.Left', E28} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V56) -> begin (V57 = ('dn--un--quote_Quote_NF'(V7, V0, V56, V4, {'Idris.Core.Value.NDCon', V42, V43, V44, V45, []}, V9))), case V57 of {'Idris.Prelude.Types.Left', E30} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V59) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V59, V53))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22, E23, E24, E25)); {'Idris.Core.Value.NTCon', E32, E33, E34, E35, E36} -> (fun (V60, V61, V62, V63, V64) -> begin (V69 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V67) -> fun (V68) -> ('nested--18958-13060--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V67, V68)) end end, V65, V66)) end end, V64, [], V9))), case V69 of {'Idris.Prelude.Types.Left', E37} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V71) -> begin (V72 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V72 of {'Idris.Prelude.Types.Left', E39} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V74) -> begin (V75 = ('dn--un--quote_Quote_NF'(V7, V0, V74, V4, {'Idris.Core.Value.NTCon', V60, V61, V62, V63, []}, V9))), case V75 of {'Idris.Prelude.Types.Left', E41} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V77) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V77, V71))} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33, E34, E35, E36)); {'Idris.Core.Value.NAs', E43, E44, E45, E46} -> (fun (V78, V79, V80, V81) -> begin (V82 = ('nested--18958-13061--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V80, V9))), case V82 of {'Idris.Prelude.Types.Left', E47} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V84) -> begin (V85 = ('nested--18958-13061--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V81, V9))), case V85 of {'Idris.Prelude.Types.Left', E49} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V78, V79, V84, V87}} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43, E44, E45, E46)); {'Idris.Core.Value.NDelayed', E51, E52, E53} -> (fun (V88, V89, V90) -> begin (V91 = ('nested--18958-13061--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V90, V9))), case V91 of {'Idris.Prelude.Types.Left', E54} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V88, V89, V93}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51, E52, E53)); {'Idris.Core.Value.NDelay', E56, E57, E58, E59} -> (fun (V94, V95, V96, V97) -> begin (V101 = begin (V98 = (('un--evalClosure'(V7, V0, V5, V96))(V9))), case V98 of {'Idris.Prelude.Types.Left', E60} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V100) -> ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V100, V9)) end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V101 of {'Idris.Prelude.Types.Left', E62} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V103) -> begin (V107 = begin (V104 = (('un--evalClosure'(V7, V0, V5, V97))(V9))), case V104 of {'Idris.Prelude.Types.Left', E64} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V106) -> ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V106, V9)) end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V107 of {'Idris.Prelude.Types.Left', E66} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V94, V95, V103, V109}} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56, E57, E58, E59)); {'Idris.Core.Value.NForce', E68, E69, E70, E71} -> (fun (V110, V111, V112, V113) -> begin (V118 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V114) -> fun (V115) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V116) -> fun (V117) -> ('nested--18958-13060--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V116, V117)) end end, V114, V115)) end end, V113, [], V9))), case V118 of {'Idris.Prelude.Types.Left', E72} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V120) -> begin (V121 = ('nested--18958-13061--in--un--repSub'(V0, V1, V2, V3, V4, V5, V6, V7, V112, V9))), case V121 of {'Idris.Prelude.Types.Left', E74} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V123) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.TForce', V110, V111, V123}, V120))} end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68, E69, E70, E71)); _ -> begin (V124 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V5, V9))), case V124 of {'Idris.Prelude.Types.Left', E0} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V126) -> ('dn--un--quote_Quote_NF'(V7, V0, V126, V4, V8, V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--18958-13060--in--un--repArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V10 = (('un--evalClosure'(V7, V0, V5, V8))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> ('un--replace\x{27}'(V7, V0, V6, V5, V4, V3, V2, V12, V9)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--12995-8026--in--un--quickConvHead'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NLocal', E0, E1} -> (fun (V6, V7) -> case V5 of {'Idris.Core.Value.NLocal', E2, E3} -> (fun (V8, V9) -> 1 end(E2, E3)); _ -> 0 end end(E0, E1)); {'Idris.Core.Value.NRef', E4, E5} -> (fun (V10, V11) -> case V5 of {'Idris.Core.Value.NRef', E6, E7} -> (fun (V12, V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V13)) end(E6, E7)); _ -> 0 end end(E4, E5)); {'Idris.Core.Value.NMeta', E8, E9, E10} -> (fun (V14, V15, V16) -> case V5 of {'Idris.Core.Value.NMeta', E11, E12, E13} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V17)) end(E11, E12, E13)); _ -> 0 end end(E8, E9, E10)); _ -> 0 end.
'nested--12995-8027--in--un--quickConvArg'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NBind', E88, E89, E90, E91} -> (fun (V6, V7, V8, V9) -> 1 end(E88, E89, E90, E91)); _ -> case V5 of {'Idris.Core.Value.NBind', E84, E85, E86, E87} -> (fun (V10, V11, V12, V13) -> 1 end(E84, E85, E86, E87)); _ -> case V4 of {'Idris.Core.Value.NApp', E2, E3, E4} -> (fun (V14, V15, V16) -> case V5 of {'Idris.Core.Value.NApp', E7, E8, E9} -> (fun (V17, V18, V19) -> ('nested--12995-8026--in--un--quickConvHead'(V0, V1, V2, V3, V15, V18)) end(E7, E8, E9)); _ -> case V5 of {'Idris.Core.Value.NErased', E5, E6} -> (fun (V20, V21) -> 1 end(E5, E6)); _ -> 0 end end end(E2, E3, E4)); {'Idris.Core.Value.NDCon', E10, E11, E12, E13, E14} -> (fun (V22, V23, V24, V25, V26) -> case V5 of {'Idris.Core.Value.NDCon', E17, E18, E19, E20, E21} -> (fun (V27, V28, V29, V30, V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V24, V29)) end(E17, E18, E19, E20, E21)); _ -> case V5 of {'Idris.Core.Value.NErased', E15, E16} -> (fun (V32, V33) -> 1 end(E15, E16)); _ -> 0 end end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NTCon', E22, E23, E24, E25, E26} -> (fun (V34, V35, V36, V37, V38) -> case V5 of {'Idris.Core.Value.NTCon', E29, E30, E31, E32, E33} -> (fun (V39, V40, V41, V42, V43) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V35, V40)) end(E29, E30, E31, E32, E33)); _ -> case V5 of {'Idris.Core.Value.NErased', E27, E28} -> (fun (V44, V45) -> 1 end(E27, E28)); _ -> 0 end end end(E22, E23, E24, E25, E26)); {'Idris.Core.Value.NAs', E34, E35, E36, E37} -> (fun (V46, V47, V48, V49) -> case V5 of {'Idris.Core.Value.NAs', E40, E41, E42, E43} -> (fun (V50, V51, V52, V53) -> ('nested--12995-8027--in--un--quickConvArg'(V0, V1, V2, V3, V49, V53)) end(E40, E41, E42, E43)); _ -> case V5 of {'Idris.Core.Value.NErased', E38, E39} -> (fun (V54, V55) -> 1 end(E38, E39)); _ -> 0 end end end(E34, E35, E36, E37)); {'Idris.Core.Value.NDelayed', E44, E45, E46} -> (fun (V56, V57, V58) -> case V5 of {'Idris.Core.Value.NDelayed', E49, E50, E51} -> (fun (V59, V60, V61) -> ('nested--12995-8027--in--un--quickConvArg'(V0, V1, V2, V3, V58, V61)) end(E49, E50, E51)); _ -> case V5 of {'Idris.Core.Value.NErased', E47, E48} -> (fun (V62, V63) -> 1 end(E47, E48)); _ -> 0 end end end(E44, E45, E46)); {'Idris.Core.Value.NDelay', E52, E53, E54, E55} -> (fun (V64, V65, V66, V67) -> case V5 of {'Idris.Core.Value.NDelay', E58, E59, E60, E61} -> (fun (V68, V69, V70, V71) -> 1 end(E58, E59, E60, E61)); _ -> case V5 of {'Idris.Core.Value.NErased', E56, E57} -> (fun (V72, V73) -> 1 end(E56, E57)); _ -> 0 end end end(E52, E53, E54, E55)); {'Idris.Core.Value.NForce', E62, E63, E64, E65} -> (fun (V74, V75, V76, V77) -> case V5 of {'Idris.Core.Value.NForce', E68, E69, E70, E71} -> (fun (V78, V79, V80, V81) -> ('nested--12995-8027--in--un--quickConvArg'(V0, V1, V2, V3, V76, V80)) end(E68, E69, E70, E71)); _ -> case V5 of {'Idris.Core.Value.NErased', E66, E67} -> (fun (V82, V83) -> 1 end(E66, E67)); _ -> 0 end end end(E62, E63, E64, E65)); {'Idris.Core.Value.NPrimVal', E72, E73} -> (fun (V84, V85) -> case V5 of {'Idris.Core.Value.NPrimVal', E76, E77} -> (fun (V86, V87) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V85, V87)) end(E76, E77)); _ -> case V5 of {'Idris.Core.Value.NErased', E74, E75} -> (fun (V88, V89) -> 1 end(E74, E75)); _ -> 0 end end end(E72, E73)); {'Idris.Core.Value.NType', E78} -> (fun (V90) -> case V5 of {'Idris.Core.Value.NType', E81} -> (fun (V91) -> 1 end(E81)); _ -> case V5 of {'Idris.Core.Value.NErased', E79, E80} -> (fun (V92, V93) -> 1 end(E79, E80)); _ -> 0 end end end(E78)); {'Idris.Core.Value.NErased', E82, E83} -> (fun (V94, V95) -> 1 end(E82, E83)); _ -> case V5 of {'Idris.Core.Value.NErased', E0, E1} -> (fun (V96, V97) -> 1 end(E0, E1)); _ -> 0 end end end end.
'nested--13030-9622--in--un--getScrutinee'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V12 of 0 -> case V13 of [E2 | E3] -> (fun (V14, V15) -> {'Idris.Prelude.Types.Just', V14} end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> begin (V16 = (V12 - 1)), case V13 of [E0 | E1] -> (fun (V17, V18) -> ('nested--13030-9622--in--un--getScrutinee'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V16, V18)) end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end end.
'nested--13024-9134--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> {'Idris.Prelude.Types.Nothing'}; _ -> case V9 of 0 -> case V10 of [E2 | E3] -> (fun (V11, V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V11)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V13 = (V9 - 1)), case V10 of [E0 | E1] -> (fun (V14, V15) -> ('nested--13024-9134--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V15)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--10242-5604--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.TT.Bounds.None'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.TT.Bounds.Add', E0, E1, E2} -> (fun (V11, V12, V13) -> case V12 of {'Idris.Core.Name.MN', E3, E4} -> (fun (V14, V15) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V2, V15)) of 1 -> {'Idris.Prelude.Types.Just', 0}; 0 -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--10242-5604--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13)), fun (V16) -> {'Idris.Prelude.Types.Just', (1 + V16)} end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--10242-5604--in--un--findName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V13)), fun (V17) -> {'Idris.Prelude.Types.Just', (1 + V17)} end)) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12450-7349--in--un--findIdx'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V10, V7)) of 1 -> {'Idris.Prelude.Types.Just', V11}; 0 -> ('nested--12450-7349--in--un--findIdx'(V0, V1, V2, V3, V4, V5, V9, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13030-9621--in--un--findArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V13, V14, V15, V16) -> {'Idris.Prelude.Types.Just', V14} end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--13003-8356--in--un--extend'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V13 of [] -> case V14 of [] -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V15)); _ -> {'Idris.Prelude.Types.Nothing'} end; [E0 | E1] -> (fun (V16, V17) -> case V14 of [E2 | E3] -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--13003-8356--in--un--extend'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V17, V19, V15)), fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'([{'Idris.Builtin.MkPair', 0, 0} | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('nested--13003-8355--in--un--weakenP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V18, ('Idris.Idris2.Prelude.Types.List':'un--++'(V17, V0)), ('Idris.Idris2.Prelude.Types.List':'un--++'(V19, V1)), V21)) end, V20))])) end)) end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--6415-4607--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V10, V11) -> begin (V12 = (('un--evalClosure'(V7, V2, V0, V10))(V9))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('nested--6415-4607--in--un--evalAll'(V0, V1, V2, V3, V4, V5, V6, V7, V11, V9))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', V14, V17}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18833-12948--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> fun (V8) -> case V7 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E0 | E1] -> (fun (V9, V10) -> fun (V11) -> case V7 of {'Idris.Core.Env.::', E2, E3} -> (fun (V12, V13) -> case V12 of {'Idris.Core.TT.Let', E6, E7, E8, E9} -> (fun (V14, V15, V16, V17) -> begin (V18 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": let "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))))) end, V13, V16, V11))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))))))))) end, V13, V17, V11))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> (('nested--18833-12948--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V10, V13))(V11)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9)); _ -> begin (V27 = ('un--logTermNF\x{27}'(V10, V5, V1, V4, fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--show_Show_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V12)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PiInfo $t)'({'Idris.Prelude.Show.MkShow', fun (V24) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V10, V24)) end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V10, V25, V26)) end end}, ('Idris.Idris2.Core.TT':'un--piInfo'(V12)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)))))))))))))) end, V13, ('Idris.Idris2.Core.TT':'un--binderType'(V12)), V11))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> (('nested--18833-12948--in--un--dumpEnv'(V0, V1, V2, V3, V4, V5, V10, V13))(V11)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13003-8357--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> {'Idris.Prelude.Types.Just', V14}; [E0 | E1] -> (fun (V15, V16) -> case V14 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> begin (V17 = (V14 - 1)), ('nested--13003-8357--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V16, V17)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13003-8358--in--un--dropP'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V16, V17) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--13003-8357--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V16)), fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--13003-8357--in--un--dropV'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V14, V17)), fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V18, V19})) end)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13024-9135--in--un--convertMatches'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', 1} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> fun (V17) -> case ('nested--13024-9134--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V15, V2)) of {'Idris.Prelude.Types.Just', E4} -> (fun (V18) -> case ('nested--13024-9134--in--un--getArgPos'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V16, V1)) of {'Idris.Prelude.Types.Just', E5} -> (fun (V19) -> begin (V20 = ('dn--un--convGen_Convert_Closure'(V8, V0, V7, V6, V5, V18, V19, V17))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = (('nested--13024-9135--in--un--convertMatches'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14))(V17))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> {'Idris.Prelude.Types.Right', case V22 of 1 -> V25; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6410-3940--in--un--concrete'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V13, V14, V15, V16, V17) -> 1 end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NTCon', E5, E6, E7, E8, E9} -> (fun (V18, V19, V20, V21, V22) -> 1 end(E5, E6, E7, E8, E9)); {'Idris.Core.Value.NPrimVal', E10, E11} -> (fun (V23, V24) -> 1 end(E10, E11)); {'Idris.Core.Value.NBind', E12, E13, E14, E15} -> (fun (V25, V26, V27, V28) -> 1 end(E12, E13, E14, E15)); {'Idris.Core.Value.NType', E16} -> (fun (V29) -> 1 end(E16)); _ -> 0 end.
'nested--6402-2131--in--un--closeArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> []; [E0 | E1] -> (fun (V13, V14) -> [{'Idris.Core.Value.MkClosure', V2, V1, V9, V10, V13} | ('nested--6402-2131--in--un--closeArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V14))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--17128-11697--in--un--args2'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Builtin':'un--snd'(V11)) end, V5)).
'nested--17128-11696--in--un--args1'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('Idris.Idris2.Builtin':'un--snd'(V11)) end, V2)).
'nested--6403-2582--in--un--applyToStack'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> fun (V15) -> case V13 of {'Idris.Core.TT.Lam', E4, E5, E6, E7} -> (fun (V16, V17, V18, V19) -> case V10 of [E8 | E9] -> (fun (V20, V21) -> begin (V22 = (((V14(V0))(('Idris.Idris2.Builtin':'un--snd'(V20))))(V15))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> (('nested--6403-2582--in--un--applyToStack'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V24, V21))(V15)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', V9} end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', V9} end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E12, E13, E14} -> (fun (V25, V26, V27) -> case V26 of {'Idris.Core.Value.NRef', E15, E16} -> (fun (V28, V29) -> fun (V30) -> ('un--evalRef'(V0, V1, V8, V2, V7, 0, V25, V28, V29, ('Idris.Idris2.Prelude.Types.List':'un--++'(V27, V10)), fun () -> {'Idris.Core.Value.NApp', V25, {'Idris.Core.Value.NRef', V28, V29}, V27} end, V30)) end end(E15, E16)); {'Idris.Core.Value.NLocal', E17, E18} -> (fun (V31, V32) -> ('un--evalLocal'(V0, V1, V8, V2, V7, V25, V31, V32, ('Idris.Idris2.Prelude.Types.List':'un--++'(V27, V10)), {'Idris.Core.Value.Nil'})) end(E17, E18)); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', V9} end end end(E12, E13, E14)); {'Idris.Core.Value.NDCon', E19, E20, E21, E22, E23} -> (fun (V34, V35, V36, V37, V38) -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDCon', V34, V35, V36, V37, ('Idris.Idris2.Prelude.Types.List':'un--++'(V38, V10))}} end end(E19, E20, E21, E22, E23)); {'Idris.Core.Value.NTCon', E24, E25, E26, E27, E28} -> (fun (V40, V41, V42, V43, V44) -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NTCon', V40, V41, V42, V43, ('Idris.Idris2.Prelude.Types.List':'un--++'(V44, V10))}} end end(E24, E25, E26, E27, E28)); _ -> fun (V46) -> {'Idris.Prelude.Types.Right', V9} end end.
'nested--10242-5474--in--un--addLater'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> V10; [E0 | E1] -> (fun (V12, V13) -> (1 + ('nested--10242-5474--in--un--addLater'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12054-6961--in--un--act'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V3, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  Considering"/utf8>> end, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V4 of {'Idris.Core.TT.Bind', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> case V11 of {'Idris.Core.TT.Lam', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> case V12 of {'Idris.Core.TT.App', E10, E11, E12} -> (fun (V17, V18, V19) -> case V19 of {'Idris.Core.TT.Local', E13, E14, E15} -> (fun (V20, V21, V22) -> case V22 of 0 -> begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([V10 | V3], V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  Shrinking candidate"/utf8>> end, V18, V5))), case V23 of {'Idris.Prelude.Types.Left', E16} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.TT':'un--shrinkTerm'(V18, {'Idris.Core.TT.DropCons', {'Idris.Core.TT.SubRefl'}}))), begin (V27 = {'Idris.Core.TT.Bind', V9, V10, {'Idris.Core.TT.Lam', V13, V14, V15, V16}, {'Idris.Core.TT.App', V17, V18, {'Idris.Core.TT.Local', V20, V21, 0}}}), case V26 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V28 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  Failure!"/utf8>> end, V5))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Right', V27} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E20} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V3, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> <<"  Success!"/utf8>> end, V31, V5))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Right', V31} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V4} end end(E13, E14, E15)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E10, E11, E12)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E2, E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', V4} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quote_Quote_Term'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_Term'(V0, V1, V8, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quote_Quote_NF'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_NF'(V0, V1, V8, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quote_Quote_Closure'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.QVar'}, 0, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quoteGen_Quote_Closure'(V0, V1, V8, V2, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--quoteGen_Quote_Term'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Right', V5}.
'dn--un--quoteGen_Quote_NF'(V0, V1, V2, V3, V4, V5, V6) -> ('un--quoteGenNF'(V0, [], V1, V2, V3, {'Idris.Core.TT.Bounds.None'}, V4, V5, V6)).
'dn--un--quoteGen_Quote_Closure'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('un--evalClosure'(V0, V1, V3, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--quoteGen_Quote_NF'(V0, V1, V2, V3, V4, V9, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convert_Convert_Term'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--convGen_Convert_Term'(V0, V1, V9, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convert_Convert_NF'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('dn--un--convGen_Convert_NF'(V0, V1, V9, V2, V3, V4, V5))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convert_Convert_Closure'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Normalise.QVar'}, 0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V9, V2, V3, V4, V5, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convGen_Convert_Term'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (('un--nf'(V0, V1, V3, V4, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('un--nf'(V0, V1, V3, V4, V6))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V10, V13))(V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Value.NBind', E226, E227, E228, E229} -> (fun (V7, V8, V9, V10) -> case V6 of {'Idris.Core.Value.NBind', E470, E471, E472, E473} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = ('un--genName'(V2, <<"conv"/utf8>>, V15))), case V16 of {'Idris.Prelude.Types.Left', E474} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E474)); {'Idris.Prelude.Types.Right', E475} -> (fun (V18) -> begin (V19 = {'Idris.Core.Value.MkClosure', [], ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Value.Nil'}, V4, {'Idris.Core.TT.Ref', V7, {'Idris.Core.TT.Bound'}, V18}}), begin (V20 = (('un--convBinders'(V0, V1, V2, V3, V4, V9, V13))(V15))), case V20 of {'Idris.Prelude.Types.Left', E476} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E476)); {'Idris.Prelude.Types.Right', E477} -> (fun (V22) -> case V22 of 1 -> begin (V23 = (((V10(V3))(V19))(V15))), case V23 of {'Idris.Prelude.Types.Left', E478} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E478)); {'Idris.Prelude.Types.Right', E479} -> (fun (V25) -> begin (V26 = (((V14(V3))(V19))(V15))), case V26 of {'Idris.Prelude.Types.Left', E480} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E480)); {'Idris.Prelude.Types.Right', E481} -> (fun (V28) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V25, V28))(V15)) end(E481)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E479)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E477)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E475)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E470, E471, E472, E473)); _ -> case V9 of {'Idris.Core.TT.Lam', E456, E457, E458, E459} -> (fun (V29, V30, V31, V32) -> fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V3, V33))), case V34 of {'Idris.Prelude.Types.Left', E460} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E460)); {'Idris.Prelude.Types.Right', E461} -> (fun (V36) -> begin (V48 = begin (V39 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V37) -> fun (V38) -> ('dn--un--quote_Quote_NF'(V0, V1, V36, V4, V37, V38)) end end, V31, V33))), case V39 of {'Idris.Prelude.Types.Left', E462} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E462)); {'Idris.Prelude.Types.Right', E463} -> (fun (V41) -> begin (V42 = ('dn--un--quote_Quote_NF'(V0, V1, V36, V4, V32, V33))), case V42 of {'Idris.Prelude.Types.Left', E464} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E464)); {'Idris.Prelude.Types.Right', E465} -> (fun (V44) -> begin (V45 = ('dn--un--quote_Quote_NF'(V0, V1, V36, V4, V6, V33))), case V45 of {'Idris.Prelude.Types.Left', E466} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E466)); {'Idris.Prelude.Types.Right', E467} -> (fun (V47) -> (('un--nf'(V0, V1, V3, V4, {'Idris.Core.TT.Bind', V7, V8, {'Idris.Core.TT.Lam', V29, V30, V41, V44}, {'Idris.Core.TT.App', V7, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V47)), {'Idris.Core.TT.Local', V7, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V33)) end(E467)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E465)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E463)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V48 of {'Idris.Prelude.Types.Left', E468} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E468)); {'Idris.Prelude.Types.Right', E469} -> (fun (V50) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V5, V50))(V33)) end(E469)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E461)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E456, E457, E458, E459)); _ -> case V6 of {'Idris.Core.Value.NBind', E334, E335, E336, E337} -> (fun (V51, V52, V53, V54) -> case V53 of {'Idris.Core.TT.Lam', E442, E443, E444, E445} -> (fun (V55, V56, V57, V58) -> fun (V59) -> begin (V60 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V3, V59))), case V60 of {'Idris.Prelude.Types.Left', E446} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E446)); {'Idris.Prelude.Types.Right', E447} -> (fun (V62) -> begin (V74 = begin (V65 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V63) -> fun (V64) -> ('dn--un--quote_Quote_NF'(V0, V1, V62, V4, V63, V64)) end end, V57, V59))), case V65 of {'Idris.Prelude.Types.Left', E448} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E448)); {'Idris.Prelude.Types.Right', E449} -> (fun (V67) -> begin (V68 = ('dn--un--quote_Quote_NF'(V0, V1, V62, V4, V58, V59))), case V68 of {'Idris.Prelude.Types.Left', E450} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E450)); {'Idris.Prelude.Types.Right', E451} -> (fun (V70) -> begin (V71 = ('dn--un--quote_Quote_NF'(V0, V1, V62, V4, V5, V59))), case V71 of {'Idris.Prelude.Types.Left', E452} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E452)); {'Idris.Prelude.Types.Right', E453} -> (fun (V73) -> (('un--nf'(V0, V1, V3, V4, {'Idris.Core.TT.Bind', V51, V52, {'Idris.Core.TT.Lam', V55, V56, V67, V70}, {'Idris.Core.TT.App', V51, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V73)), {'Idris.Core.TT.Local', V51, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V59)) end(E453)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E451)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E449)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V74 of {'Idris.Prelude.Types.Left', E454} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E454)); {'Idris.Prelude.Types.Right', E455} -> (fun (V76) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V76, V6))(V59)) end(E455)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E447)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E442, E443, E444, E445)); _ -> case V5 of {'Idris.Core.Value.NApp', E342, E343, E344} -> (fun (V77, V78, V79) -> case V6 of {'Idris.Core.Value.NApp', E349, E350, E351} -> (fun (V80, V81, V82) -> fun (V83) -> begin (V84 = (('un--chkConvHead'(V0, V1, V2, V3, V4, V78, V81))(V83))), case V84 of {'Idris.Prelude.Types.Left', E352} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E352)); {'Idris.Prelude.Types.Right', E353} -> (fun (V86) -> case V86 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('nested--17128-11696--in--un--args1'(V1, V80, V79, V78, V77, V82, V81, V4, V3, V2, V0)), ('nested--17128-11697--in--un--args2'(V1, V80, V79, V78, V77, V82, V81, V4, V3, V2, V0)), V83)); 0 -> ('un--chkConvCaseBlock'(V0, V1, V77, V2, V3, V4, V78, ('nested--17128-11696--in--un--args1'(V1, V80, V79, V78, V77, V82, V81, V4, V3, V2, V0)), V81, ('nested--17128-11697--in--un--args2'(V1, V80, V79, V78, V77, V82, V81, V4, V3, V2, V0)), V83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E349, E350, E351)); _ -> case V6 of {'Idris.Core.Value.NErased', E347, E348} -> (fun (V87, V88) -> fun (V89) -> {'Idris.Prelude.Types.Right', 1} end end(E347, E348)); _ -> fun (V90) -> case V5 of {'Idris.Core.Value.NType', E345} -> (fun (V91) -> case V6 of {'Idris.Core.Value.NType', E346} -> (fun (V92) -> {'Idris.Prelude.Types.Right', 1} end(E346)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E345)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E342, E343, E344)); {'Idris.Core.Value.NDCon', E354, E355, E356, E357, E358} -> (fun (V93, V94, V95, V96, V97) -> case V6 of {'Idris.Core.Value.NDCon', E363, E364, E365, E366, E367} -> (fun (V98, V99, V100, V101, V102) -> fun (V103) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V95, V100)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V104) -> ('Idris.Idris2.Builtin':'un--snd'(V104)) end, V97)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V105) -> ('Idris.Idris2.Builtin':'un--snd'(V105)) end, V102)), V103)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E363, E364, E365, E366, E367)); _ -> case V6 of {'Idris.Core.Value.NErased', E361, E362} -> (fun (V106, V107) -> fun (V108) -> {'Idris.Prelude.Types.Right', 1} end end(E361, E362)); _ -> fun (V109) -> case V5 of {'Idris.Core.Value.NType', E359} -> (fun (V110) -> case V6 of {'Idris.Core.Value.NType', E360} -> (fun (V111) -> {'Idris.Prelude.Types.Right', 1} end(E360)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E359)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E354, E355, E356, E357, E358)); {'Idris.Core.Value.NTCon', E368, E369, E370, E371, E372} -> (fun (V112, V113, V114, V115, V116) -> case V6 of {'Idris.Core.Value.NTCon', E377, E378, E379, E380, E381} -> (fun (V117, V118, V119, V120, V121) -> fun (V122) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V113, V118)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V123) -> ('Idris.Idris2.Builtin':'un--snd'(V123)) end, V116)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V124) -> ('Idris.Idris2.Builtin':'un--snd'(V124)) end, V121)), V122)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E377, E378, E379, E380, E381)); _ -> case V6 of {'Idris.Core.Value.NErased', E375, E376} -> (fun (V125, V126) -> fun (V127) -> {'Idris.Prelude.Types.Right', 1} end end(E375, E376)); _ -> fun (V128) -> case V5 of {'Idris.Core.Value.NType', E373} -> (fun (V129) -> case V6 of {'Idris.Core.Value.NType', E374} -> (fun (V130) -> {'Idris.Prelude.Types.Right', 1} end(E374)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E373)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E368, E369, E370, E371, E372)); {'Idris.Core.Value.NAs', E382, E383, E384, E385} -> (fun (V131, V132, V133, V134) -> case V6 of {'Idris.Core.Value.NAs', E390, E391, E392, E393} -> (fun (V135, V136, V137, V138) -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V134, V138)) end(E390, E391, E392, E393)); _ -> case V6 of {'Idris.Core.Value.NErased', E388, E389} -> (fun (V139, V140) -> fun (V141) -> {'Idris.Prelude.Types.Right', 1} end end(E388, E389)); _ -> fun (V142) -> case V5 of {'Idris.Core.Value.NType', E386} -> (fun (V143) -> case V6 of {'Idris.Core.Value.NType', E387} -> (fun (V144) -> {'Idris.Prelude.Types.Right', 1} end(E387)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E386)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E382, E383, E384, E385)); {'Idris.Core.Value.NDelayed', E394, E395, E396} -> (fun (V145, V146, V147) -> case V6 of {'Idris.Core.Value.NDelayed', E401, E402, E403} -> (fun (V148, V149, V150) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V146, V149)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V147, V150)); 0 -> fun (V151) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E401, E402, E403)); _ -> case V6 of {'Idris.Core.Value.NErased', E399, E400} -> (fun (V152, V153) -> fun (V154) -> {'Idris.Prelude.Types.Right', 1} end end(E399, E400)); _ -> fun (V155) -> case V5 of {'Idris.Core.Value.NType', E397} -> (fun (V156) -> case V6 of {'Idris.Core.Value.NType', E398} -> (fun (V157) -> {'Idris.Prelude.Types.Right', 1} end(E398)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E397)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E394, E395, E396)); {'Idris.Core.Value.NDelay', E404, E405, E406, E407} -> (fun (V158, V159, V160, V161) -> case V6 of {'Idris.Core.Value.NDelay', E412, E413, E414, E415} -> (fun (V162, V163, V164, V165) -> fun (V166) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V159, V163)) of 1 -> begin (V167 = case V159 of 1 -> {'Idris.Prelude.Types.Right', V3}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V3, V166)) end), case V167 of {'Idris.Prelude.Types.Left', E416} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E416)); {'Idris.Prelude.Types.Right', E417} -> (fun (V169) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V169, V4, V161, V165, V166)) end(E417)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E412, E413, E414, E415)); _ -> case V6 of {'Idris.Core.Value.NErased', E410, E411} -> (fun (V170, V171) -> fun (V172) -> {'Idris.Prelude.Types.Right', 1} end end(E410, E411)); _ -> fun (V173) -> case V5 of {'Idris.Core.Value.NType', E408} -> (fun (V174) -> case V6 of {'Idris.Core.Value.NType', E409} -> (fun (V175) -> {'Idris.Prelude.Types.Right', 1} end(E409)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E408)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E404, E405, E406, E407)); {'Idris.Core.Value.NForce', E418, E419, E420, E421} -> (fun (V176, V177, V178, V179) -> case V6 of {'Idris.Core.Value.NForce', E426, E427, E428, E429} -> (fun (V180, V181, V182, V183) -> fun (V184) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V177, V181)) of 1 -> begin (V185 = (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V178, V182))(V184))), case V185 of {'Idris.Prelude.Types.Left', E430} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E430)); {'Idris.Prelude.Types.Right', E431} -> (fun (V187) -> case V187 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V188) -> ('Idris.Idris2.Builtin':'un--snd'(V188)) end, V179)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V189) -> ('Idris.Idris2.Builtin':'un--snd'(V189)) end, V183)), V184)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E431)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E426, E427, E428, E429)); _ -> case V6 of {'Idris.Core.Value.NErased', E424, E425} -> (fun (V190, V191) -> fun (V192) -> {'Idris.Prelude.Types.Right', 1} end end(E424, E425)); _ -> fun (V193) -> case V5 of {'Idris.Core.Value.NType', E422} -> (fun (V194) -> case V6 of {'Idris.Core.Value.NType', E423} -> (fun (V195) -> {'Idris.Prelude.Types.Right', 1} end(E423)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E422)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E418, E419, E420, E421)); {'Idris.Core.Value.NPrimVal', E432, E433} -> (fun (V196, V197) -> case V6 of {'Idris.Core.Value.NPrimVal', E438, E439} -> (fun (V198, V199) -> fun (V200) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V197, V199))} end end(E438, E439)); _ -> case V6 of {'Idris.Core.Value.NErased', E436, E437} -> (fun (V201, V202) -> fun (V203) -> {'Idris.Prelude.Types.Right', 1} end end(E436, E437)); _ -> fun (V204) -> case V5 of {'Idris.Core.Value.NType', E434} -> (fun (V205) -> case V6 of {'Idris.Core.Value.NType', E435} -> (fun (V206) -> {'Idris.Prelude.Types.Right', 1} end(E435)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E434)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E432, E433)); {'Idris.Core.Value.NErased', E440, E441} -> (fun (V207, V208) -> fun (V209) -> {'Idris.Prelude.Types.Right', 1} end end(E440, E441)); _ -> case V6 of {'Idris.Core.Value.NErased', E340, E341} -> (fun (V210, V211) -> fun (V212) -> {'Idris.Prelude.Types.Right', 1} end end(E340, E341)); _ -> fun (V213) -> case V5 of {'Idris.Core.Value.NType', E338} -> (fun (V214) -> case V6 of {'Idris.Core.Value.NType', E339} -> (fun (V215) -> {'Idris.Prelude.Types.Right', 1} end(E339)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E338)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end end(E334, E335, E336, E337)); _ -> case V5 of {'Idris.Core.Value.NApp', E234, E235, E236} -> (fun (V216, V217, V218) -> case V6 of {'Idris.Core.Value.NApp', E241, E242, E243} -> (fun (V219, V220, V221) -> fun (V222) -> begin (V223 = (('un--chkConvHead'(V0, V1, V2, V3, V4, V217, V220))(V222))), case V223 of {'Idris.Prelude.Types.Left', E244} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E244)); {'Idris.Prelude.Types.Right', E245} -> (fun (V225) -> case V225 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('nested--17128-11696--in--un--args1'(V1, V219, V218, V217, V216, V221, V220, V4, V3, V2, V0)), ('nested--17128-11697--in--un--args2'(V1, V219, V218, V217, V216, V221, V220, V4, V3, V2, V0)), V222)); 0 -> ('un--chkConvCaseBlock'(V0, V1, V216, V2, V3, V4, V217, ('nested--17128-11696--in--un--args1'(V1, V219, V218, V217, V216, V221, V220, V4, V3, V2, V0)), V220, ('nested--17128-11697--in--un--args2'(V1, V219, V218, V217, V216, V221, V220, V4, V3, V2, V0)), V222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E241, E242, E243)); _ -> case V6 of {'Idris.Core.Value.NErased', E239, E240} -> (fun (V226, V227) -> fun (V228) -> {'Idris.Prelude.Types.Right', 1} end end(E239, E240)); _ -> fun (V229) -> case V5 of {'Idris.Core.Value.NType', E237} -> (fun (V230) -> case V6 of {'Idris.Core.Value.NType', E238} -> (fun (V231) -> {'Idris.Prelude.Types.Right', 1} end(E238)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E237)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E234, E235, E236)); {'Idris.Core.Value.NDCon', E246, E247, E248, E249, E250} -> (fun (V232, V233, V234, V235, V236) -> case V6 of {'Idris.Core.Value.NDCon', E255, E256, E257, E258, E259} -> (fun (V237, V238, V239, V240, V241) -> fun (V242) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V234, V239)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V243) -> ('Idris.Idris2.Builtin':'un--snd'(V243)) end, V236)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V244) -> ('Idris.Idris2.Builtin':'un--snd'(V244)) end, V241)), V242)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E255, E256, E257, E258, E259)); _ -> case V6 of {'Idris.Core.Value.NErased', E253, E254} -> (fun (V245, V246) -> fun (V247) -> {'Idris.Prelude.Types.Right', 1} end end(E253, E254)); _ -> fun (V248) -> case V5 of {'Idris.Core.Value.NType', E251} -> (fun (V249) -> case V6 of {'Idris.Core.Value.NType', E252} -> (fun (V250) -> {'Idris.Prelude.Types.Right', 1} end(E252)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E251)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E246, E247, E248, E249, E250)); {'Idris.Core.Value.NTCon', E260, E261, E262, E263, E264} -> (fun (V251, V252, V253, V254, V255) -> case V6 of {'Idris.Core.Value.NTCon', E269, E270, E271, E272, E273} -> (fun (V256, V257, V258, V259, V260) -> fun (V261) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V252, V257)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V262) -> ('Idris.Idris2.Builtin':'un--snd'(V262)) end, V255)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V263) -> ('Idris.Idris2.Builtin':'un--snd'(V263)) end, V260)), V261)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E269, E270, E271, E272, E273)); _ -> case V6 of {'Idris.Core.Value.NErased', E267, E268} -> (fun (V264, V265) -> fun (V266) -> {'Idris.Prelude.Types.Right', 1} end end(E267, E268)); _ -> fun (V267) -> case V5 of {'Idris.Core.Value.NType', E265} -> (fun (V268) -> case V6 of {'Idris.Core.Value.NType', E266} -> (fun (V269) -> {'Idris.Prelude.Types.Right', 1} end(E266)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E265)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E260, E261, E262, E263, E264)); {'Idris.Core.Value.NAs', E274, E275, E276, E277} -> (fun (V270, V271, V272, V273) -> case V6 of {'Idris.Core.Value.NAs', E282, E283, E284, E285} -> (fun (V274, V275, V276, V277) -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V273, V277)) end(E282, E283, E284, E285)); _ -> case V6 of {'Idris.Core.Value.NErased', E280, E281} -> (fun (V278, V279) -> fun (V280) -> {'Idris.Prelude.Types.Right', 1} end end(E280, E281)); _ -> fun (V281) -> case V5 of {'Idris.Core.Value.NType', E278} -> (fun (V282) -> case V6 of {'Idris.Core.Value.NType', E279} -> (fun (V283) -> {'Idris.Prelude.Types.Right', 1} end(E279)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E278)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E274, E275, E276, E277)); {'Idris.Core.Value.NDelayed', E286, E287, E288} -> (fun (V284, V285, V286) -> case V6 of {'Idris.Core.Value.NDelayed', E293, E294, E295} -> (fun (V287, V288, V289) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V285, V288)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V286, V289)); 0 -> fun (V290) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E293, E294, E295)); _ -> case V6 of {'Idris.Core.Value.NErased', E291, E292} -> (fun (V291, V292) -> fun (V293) -> {'Idris.Prelude.Types.Right', 1} end end(E291, E292)); _ -> fun (V294) -> case V5 of {'Idris.Core.Value.NType', E289} -> (fun (V295) -> case V6 of {'Idris.Core.Value.NType', E290} -> (fun (V296) -> {'Idris.Prelude.Types.Right', 1} end(E290)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E289)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E286, E287, E288)); {'Idris.Core.Value.NDelay', E296, E297, E298, E299} -> (fun (V297, V298, V299, V300) -> case V6 of {'Idris.Core.Value.NDelay', E304, E305, E306, E307} -> (fun (V301, V302, V303, V304) -> fun (V305) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V298, V302)) of 1 -> begin (V306 = case V298 of 1 -> {'Idris.Prelude.Types.Right', V3}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V3, V305)) end), case V306 of {'Idris.Prelude.Types.Left', E308} -> (fun (V307) -> {'Idris.Prelude.Types.Left', V307} end(E308)); {'Idris.Prelude.Types.Right', E309} -> (fun (V308) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V308, V4, V300, V304, V305)) end(E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E304, E305, E306, E307)); _ -> case V6 of {'Idris.Core.Value.NErased', E302, E303} -> (fun (V309, V310) -> fun (V311) -> {'Idris.Prelude.Types.Right', 1} end end(E302, E303)); _ -> fun (V312) -> case V5 of {'Idris.Core.Value.NType', E300} -> (fun (V313) -> case V6 of {'Idris.Core.Value.NType', E301} -> (fun (V314) -> {'Idris.Prelude.Types.Right', 1} end(E301)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E300)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E296, E297, E298, E299)); {'Idris.Core.Value.NForce', E310, E311, E312, E313} -> (fun (V315, V316, V317, V318) -> case V6 of {'Idris.Core.Value.NForce', E318, E319, E320, E321} -> (fun (V319, V320, V321, V322) -> fun (V323) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V316, V320)) of 1 -> begin (V324 = (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V317, V321))(V323))), case V324 of {'Idris.Prelude.Types.Left', E322} -> (fun (V325) -> {'Idris.Prelude.Types.Left', V325} end(E322)); {'Idris.Prelude.Types.Right', E323} -> (fun (V326) -> case V326 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V327) -> ('Idris.Idris2.Builtin':'un--snd'(V327)) end, V318)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V328) -> ('Idris.Idris2.Builtin':'un--snd'(V328)) end, V322)), V323)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E318, E319, E320, E321)); _ -> case V6 of {'Idris.Core.Value.NErased', E316, E317} -> (fun (V329, V330) -> fun (V331) -> {'Idris.Prelude.Types.Right', 1} end end(E316, E317)); _ -> fun (V332) -> case V5 of {'Idris.Core.Value.NType', E314} -> (fun (V333) -> case V6 of {'Idris.Core.Value.NType', E315} -> (fun (V334) -> {'Idris.Prelude.Types.Right', 1} end(E315)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E314)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E310, E311, E312, E313)); {'Idris.Core.Value.NPrimVal', E324, E325} -> (fun (V335, V336) -> case V6 of {'Idris.Core.Value.NPrimVal', E330, E331} -> (fun (V337, V338) -> fun (V339) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V336, V338))} end end(E330, E331)); _ -> case V6 of {'Idris.Core.Value.NErased', E328, E329} -> (fun (V340, V341) -> fun (V342) -> {'Idris.Prelude.Types.Right', 1} end end(E328, E329)); _ -> fun (V343) -> case V5 of {'Idris.Core.Value.NType', E326} -> (fun (V344) -> case V6 of {'Idris.Core.Value.NType', E327} -> (fun (V345) -> {'Idris.Prelude.Types.Right', 1} end(E327)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E326)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E324, E325)); {'Idris.Core.Value.NErased', E332, E333} -> (fun (V346, V347) -> fun (V348) -> {'Idris.Prelude.Types.Right', 1} end end(E332, E333)); _ -> case V6 of {'Idris.Core.Value.NErased', E232, E233} -> (fun (V349, V350) -> fun (V351) -> {'Idris.Prelude.Types.Right', 1} end end(E232, E233)); _ -> fun (V352) -> case V5 of {'Idris.Core.Value.NType', E230} -> (fun (V353) -> case V6 of {'Idris.Core.Value.NType', E231} -> (fun (V354) -> {'Idris.Prelude.Types.Right', 1} end(E231)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E230)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end end end end(E226, E227, E228, E229)); _ -> case V6 of {'Idris.Core.Value.NBind', E104, E105, E106, E107} -> (fun (V355, V356, V357, V358) -> case V357 of {'Idris.Core.TT.Lam', E212, E213, E214, E215} -> (fun (V359, V360, V361, V362) -> fun (V363) -> begin (V364 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V3, V363))), case V364 of {'Idris.Prelude.Types.Left', E216} -> (fun (V365) -> {'Idris.Prelude.Types.Left', V365} end(E216)); {'Idris.Prelude.Types.Right', E217} -> (fun (V366) -> begin (V378 = begin (V369 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V367) -> fun (V368) -> ('dn--un--quote_Quote_NF'(V0, V1, V366, V4, V367, V368)) end end, V361, V363))), case V369 of {'Idris.Prelude.Types.Left', E218} -> (fun (V370) -> {'Idris.Prelude.Types.Left', V370} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V371) -> begin (V372 = ('dn--un--quote_Quote_NF'(V0, V1, V366, V4, V362, V363))), case V372 of {'Idris.Prelude.Types.Left', E220} -> (fun (V373) -> {'Idris.Prelude.Types.Left', V373} end(E220)); {'Idris.Prelude.Types.Right', E221} -> (fun (V374) -> begin (V375 = ('dn--un--quote_Quote_NF'(V0, V1, V366, V4, V5, V363))), case V375 of {'Idris.Prelude.Types.Left', E222} -> (fun (V376) -> {'Idris.Prelude.Types.Left', V376} end(E222)); {'Idris.Prelude.Types.Right', E223} -> (fun (V377) -> (('un--nf'(V0, V1, V3, V4, {'Idris.Core.TT.Bind', V355, V356, {'Idris.Core.TT.Lam', V359, V360, V371, V374}, {'Idris.Core.TT.App', V355, ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V377)), {'Idris.Core.TT.Local', V355, {'Idris.Prelude.Types.Nothing'}, 0}}}))(V363)) end(E223)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V378 of {'Idris.Prelude.Types.Left', E224} -> (fun (V379) -> {'Idris.Prelude.Types.Left', V379} end(E224)); {'Idris.Prelude.Types.Right', E225} -> (fun (V380) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V380, V6))(V363)) end(E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E212, E213, E214, E215)); _ -> case V5 of {'Idris.Core.Value.NApp', E112, E113, E114} -> (fun (V381, V382, V383) -> case V6 of {'Idris.Core.Value.NApp', E119, E120, E121} -> (fun (V384, V385, V386) -> fun (V387) -> begin (V388 = (('un--chkConvHead'(V0, V1, V2, V3, V4, V382, V385))(V387))), case V388 of {'Idris.Prelude.Types.Left', E122} -> (fun (V389) -> {'Idris.Prelude.Types.Left', V389} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V390) -> case V390 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('nested--17128-11696--in--un--args1'(V1, V384, V383, V382, V381, V386, V385, V4, V3, V2, V0)), ('nested--17128-11697--in--un--args2'(V1, V384, V383, V382, V381, V386, V385, V4, V3, V2, V0)), V387)); 0 -> ('un--chkConvCaseBlock'(V0, V1, V381, V2, V3, V4, V382, ('nested--17128-11696--in--un--args1'(V1, V384, V383, V382, V381, V386, V385, V4, V3, V2, V0)), V385, ('nested--17128-11697--in--un--args2'(V1, V384, V383, V382, V381, V386, V385, V4, V3, V2, V0)), V387)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120, E121)); _ -> case V6 of {'Idris.Core.Value.NErased', E117, E118} -> (fun (V391, V392) -> fun (V393) -> {'Idris.Prelude.Types.Right', 1} end end(E117, E118)); _ -> fun (V394) -> case V5 of {'Idris.Core.Value.NType', E115} -> (fun (V395) -> case V6 of {'Idris.Core.Value.NType', E116} -> (fun (V396) -> {'Idris.Prelude.Types.Right', 1} end(E116)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E115)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E112, E113, E114)); {'Idris.Core.Value.NDCon', E124, E125, E126, E127, E128} -> (fun (V397, V398, V399, V400, V401) -> case V6 of {'Idris.Core.Value.NDCon', E133, E134, E135, E136, E137} -> (fun (V402, V403, V404, V405, V406) -> fun (V407) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V399, V404)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V408) -> ('Idris.Idris2.Builtin':'un--snd'(V408)) end, V401)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V409) -> ('Idris.Idris2.Builtin':'un--snd'(V409)) end, V406)), V407)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133, E134, E135, E136, E137)); _ -> case V6 of {'Idris.Core.Value.NErased', E131, E132} -> (fun (V410, V411) -> fun (V412) -> {'Idris.Prelude.Types.Right', 1} end end(E131, E132)); _ -> fun (V413) -> case V5 of {'Idris.Core.Value.NType', E129} -> (fun (V414) -> case V6 of {'Idris.Core.Value.NType', E130} -> (fun (V415) -> {'Idris.Prelude.Types.Right', 1} end(E130)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E129)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E124, E125, E126, E127, E128)); {'Idris.Core.Value.NTCon', E138, E139, E140, E141, E142} -> (fun (V416, V417, V418, V419, V420) -> case V6 of {'Idris.Core.Value.NTCon', E147, E148, E149, E150, E151} -> (fun (V421, V422, V423, V424, V425) -> fun (V426) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V417, V422)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V427) -> ('Idris.Idris2.Builtin':'un--snd'(V427)) end, V420)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V428) -> ('Idris.Idris2.Builtin':'un--snd'(V428)) end, V425)), V426)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E147, E148, E149, E150, E151)); _ -> case V6 of {'Idris.Core.Value.NErased', E145, E146} -> (fun (V429, V430) -> fun (V431) -> {'Idris.Prelude.Types.Right', 1} end end(E145, E146)); _ -> fun (V432) -> case V5 of {'Idris.Core.Value.NType', E143} -> (fun (V433) -> case V6 of {'Idris.Core.Value.NType', E144} -> (fun (V434) -> {'Idris.Prelude.Types.Right', 1} end(E144)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E143)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E138, E139, E140, E141, E142)); {'Idris.Core.Value.NAs', E152, E153, E154, E155} -> (fun (V435, V436, V437, V438) -> case V6 of {'Idris.Core.Value.NAs', E160, E161, E162, E163} -> (fun (V439, V440, V441, V442) -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V438, V442)) end(E160, E161, E162, E163)); _ -> case V6 of {'Idris.Core.Value.NErased', E158, E159} -> (fun (V443, V444) -> fun (V445) -> {'Idris.Prelude.Types.Right', 1} end end(E158, E159)); _ -> fun (V446) -> case V5 of {'Idris.Core.Value.NType', E156} -> (fun (V447) -> case V6 of {'Idris.Core.Value.NType', E157} -> (fun (V448) -> {'Idris.Prelude.Types.Right', 1} end(E157)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E156)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E152, E153, E154, E155)); {'Idris.Core.Value.NDelayed', E164, E165, E166} -> (fun (V449, V450, V451) -> case V6 of {'Idris.Core.Value.NDelayed', E171, E172, E173} -> (fun (V452, V453, V454) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V450, V453)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V451, V454)); 0 -> fun (V455) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E171, E172, E173)); _ -> case V6 of {'Idris.Core.Value.NErased', E169, E170} -> (fun (V456, V457) -> fun (V458) -> {'Idris.Prelude.Types.Right', 1} end end(E169, E170)); _ -> fun (V459) -> case V5 of {'Idris.Core.Value.NType', E167} -> (fun (V460) -> case V6 of {'Idris.Core.Value.NType', E168} -> (fun (V461) -> {'Idris.Prelude.Types.Right', 1} end(E168)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E167)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E164, E165, E166)); {'Idris.Core.Value.NDelay', E174, E175, E176, E177} -> (fun (V462, V463, V464, V465) -> case V6 of {'Idris.Core.Value.NDelay', E182, E183, E184, E185} -> (fun (V466, V467, V468, V469) -> fun (V470) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V463, V467)) of 1 -> begin (V471 = case V463 of 1 -> {'Idris.Prelude.Types.Right', V3}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V3, V470)) end), case V471 of {'Idris.Prelude.Types.Left', E186} -> (fun (V472) -> {'Idris.Prelude.Types.Left', V472} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V473) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V473, V4, V465, V469, V470)) end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E182, E183, E184, E185)); _ -> case V6 of {'Idris.Core.Value.NErased', E180, E181} -> (fun (V474, V475) -> fun (V476) -> {'Idris.Prelude.Types.Right', 1} end end(E180, E181)); _ -> fun (V477) -> case V5 of {'Idris.Core.Value.NType', E178} -> (fun (V478) -> case V6 of {'Idris.Core.Value.NType', E179} -> (fun (V479) -> {'Idris.Prelude.Types.Right', 1} end(E179)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E178)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E174, E175, E176, E177)); {'Idris.Core.Value.NForce', E188, E189, E190, E191} -> (fun (V480, V481, V482, V483) -> case V6 of {'Idris.Core.Value.NForce', E196, E197, E198, E199} -> (fun (V484, V485, V486, V487) -> fun (V488) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V481, V485)) of 1 -> begin (V489 = (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V482, V486))(V488))), case V489 of {'Idris.Prelude.Types.Left', E200} -> (fun (V490) -> {'Idris.Prelude.Types.Left', V490} end(E200)); {'Idris.Prelude.Types.Right', E201} -> (fun (V491) -> case V491 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V492) -> ('Idris.Idris2.Builtin':'un--snd'(V492)) end, V483)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V493) -> ('Idris.Idris2.Builtin':'un--snd'(V493)) end, V487)), V488)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E196, E197, E198, E199)); _ -> case V6 of {'Idris.Core.Value.NErased', E194, E195} -> (fun (V494, V495) -> fun (V496) -> {'Idris.Prelude.Types.Right', 1} end end(E194, E195)); _ -> fun (V497) -> case V5 of {'Idris.Core.Value.NType', E192} -> (fun (V498) -> case V6 of {'Idris.Core.Value.NType', E193} -> (fun (V499) -> {'Idris.Prelude.Types.Right', 1} end(E193)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E192)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E188, E189, E190, E191)); {'Idris.Core.Value.NPrimVal', E202, E203} -> (fun (V500, V501) -> case V6 of {'Idris.Core.Value.NPrimVal', E208, E209} -> (fun (V502, V503) -> fun (V504) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V501, V503))} end end(E208, E209)); _ -> case V6 of {'Idris.Core.Value.NErased', E206, E207} -> (fun (V505, V506) -> fun (V507) -> {'Idris.Prelude.Types.Right', 1} end end(E206, E207)); _ -> fun (V508) -> case V5 of {'Idris.Core.Value.NType', E204} -> (fun (V509) -> case V6 of {'Idris.Core.Value.NType', E205} -> (fun (V510) -> {'Idris.Prelude.Types.Right', 1} end(E205)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E204)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E202, E203)); {'Idris.Core.Value.NErased', E210, E211} -> (fun (V511, V512) -> fun (V513) -> {'Idris.Prelude.Types.Right', 1} end end(E210, E211)); _ -> case V6 of {'Idris.Core.Value.NErased', E110, E111} -> (fun (V514, V515) -> fun (V516) -> {'Idris.Prelude.Types.Right', 1} end end(E110, E111)); _ -> fun (V517) -> case V5 of {'Idris.Core.Value.NType', E108} -> (fun (V518) -> case V6 of {'Idris.Core.Value.NType', E109} -> (fun (V519) -> {'Idris.Prelude.Types.Right', 1} end(E109)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E108)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end end(E104, E105, E106, E107)); _ -> case V5 of {'Idris.Core.Value.NApp', E4, E5, E6} -> (fun (V520, V521, V522) -> case V6 of {'Idris.Core.Value.NApp', E11, E12, E13} -> (fun (V523, V524, V525) -> fun (V526) -> begin (V527 = (('un--chkConvHead'(V0, V1, V2, V3, V4, V521, V524))(V526))), case V527 of {'Idris.Prelude.Types.Left', E14} -> (fun (V528) -> {'Idris.Prelude.Types.Left', V528} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V529) -> case V529 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('nested--17128-11696--in--un--args1'(V1, V523, V522, V521, V520, V525, V524, V4, V3, V2, V0)), ('nested--17128-11697--in--un--args2'(V1, V523, V522, V521, V520, V525, V524, V4, V3, V2, V0)), V526)); 0 -> ('un--chkConvCaseBlock'(V0, V1, V520, V2, V3, V4, V521, ('nested--17128-11696--in--un--args1'(V1, V523, V522, V521, V520, V525, V524, V4, V3, V2, V0)), V524, ('nested--17128-11697--in--un--args2'(V1, V523, V522, V521, V520, V525, V524, V4, V3, V2, V0)), V526)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13)); _ -> case V6 of {'Idris.Core.Value.NErased', E9, E10} -> (fun (V530, V531) -> fun (V532) -> {'Idris.Prelude.Types.Right', 1} end end(E9, E10)); _ -> fun (V533) -> case V5 of {'Idris.Core.Value.NType', E7} -> (fun (V534) -> case V6 of {'Idris.Core.Value.NType', E8} -> (fun (V535) -> {'Idris.Prelude.Types.Right', 1} end(E8)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E4, E5, E6)); {'Idris.Core.Value.NDCon', E16, E17, E18, E19, E20} -> (fun (V536, V537, V538, V539, V540) -> case V6 of {'Idris.Core.Value.NDCon', E25, E26, E27, E28, E29} -> (fun (V541, V542, V543, V544, V545) -> fun (V546) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V538, V543)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V547) -> ('Idris.Idris2.Builtin':'un--snd'(V547)) end, V540)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V548) -> ('Idris.Idris2.Builtin':'un--snd'(V548)) end, V545)), V546)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25, E26, E27, E28, E29)); _ -> case V6 of {'Idris.Core.Value.NErased', E23, E24} -> (fun (V549, V550) -> fun (V551) -> {'Idris.Prelude.Types.Right', 1} end end(E23, E24)); _ -> fun (V552) -> case V5 of {'Idris.Core.Value.NType', E21} -> (fun (V553) -> case V6 of {'Idris.Core.Value.NType', E22} -> (fun (V554) -> {'Idris.Prelude.Types.Right', 1} end(E22)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E21)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E16, E17, E18, E19, E20)); {'Idris.Core.Value.NTCon', E30, E31, E32, E33, E34} -> (fun (V555, V556, V557, V558, V559) -> case V6 of {'Idris.Core.Value.NTCon', E39, E40, E41, E42, E43} -> (fun (V560, V561, V562, V563, V564) -> fun (V565) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V556, V561)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V566) -> ('Idris.Idris2.Builtin':'un--snd'(V566)) end, V559)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V567) -> ('Idris.Idris2.Builtin':'un--snd'(V567)) end, V564)), V565)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40, E41, E42, E43)); _ -> case V6 of {'Idris.Core.Value.NErased', E37, E38} -> (fun (V568, V569) -> fun (V570) -> {'Idris.Prelude.Types.Right', 1} end end(E37, E38)); _ -> fun (V571) -> case V5 of {'Idris.Core.Value.NType', E35} -> (fun (V572) -> case V6 of {'Idris.Core.Value.NType', E36} -> (fun (V573) -> {'Idris.Prelude.Types.Right', 1} end(E36)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E35)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E30, E31, E32, E33, E34)); {'Idris.Core.Value.NAs', E44, E45, E46, E47} -> (fun (V574, V575, V576, V577) -> case V6 of {'Idris.Core.Value.NAs', E52, E53, E54, E55} -> (fun (V578, V579, V580, V581) -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V577, V581)) end(E52, E53, E54, E55)); _ -> case V6 of {'Idris.Core.Value.NErased', E50, E51} -> (fun (V582, V583) -> fun (V584) -> {'Idris.Prelude.Types.Right', 1} end end(E50, E51)); _ -> fun (V585) -> case V5 of {'Idris.Core.Value.NType', E48} -> (fun (V586) -> case V6 of {'Idris.Core.Value.NType', E49} -> (fun (V587) -> {'Idris.Prelude.Types.Right', 1} end(E49)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E48)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E44, E45, E46, E47)); {'Idris.Core.Value.NDelayed', E56, E57, E58} -> (fun (V588, V589, V590) -> case V6 of {'Idris.Core.Value.NDelayed', E63, E64, E65} -> (fun (V591, V592, V593) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V589, V592)) of 1 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V590, V593)); 0 -> fun (V594) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E63, E64, E65)); _ -> case V6 of {'Idris.Core.Value.NErased', E61, E62} -> (fun (V595, V596) -> fun (V597) -> {'Idris.Prelude.Types.Right', 1} end end(E61, E62)); _ -> fun (V598) -> case V5 of {'Idris.Core.Value.NType', E59} -> (fun (V599) -> case V6 of {'Idris.Core.Value.NType', E60} -> (fun (V600) -> {'Idris.Prelude.Types.Right', 1} end(E60)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E59)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E56, E57, E58)); {'Idris.Core.Value.NDelay', E66, E67, E68, E69} -> (fun (V601, V602, V603, V604) -> case V6 of {'Idris.Core.Value.NDelay', E74, E75, E76, E77} -> (fun (V605, V606, V607, V608) -> fun (V609) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V602, V606)) of 1 -> begin (V610 = case V602 of 1 -> {'Idris.Prelude.Types.Right', V3}; _ -> ('Idris.Idris2.Core.Context':'un--clearDefs'(V3, V609)) end), case V610 of {'Idris.Prelude.Types.Left', E78} -> (fun (V611) -> {'Idris.Prelude.Types.Left', V611} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V612) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V2, V612, V4, V604, V608, V609)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74, E75, E76, E77)); _ -> case V6 of {'Idris.Core.Value.NErased', E72, E73} -> (fun (V613, V614) -> fun (V615) -> {'Idris.Prelude.Types.Right', 1} end end(E72, E73)); _ -> fun (V616) -> case V5 of {'Idris.Core.Value.NType', E70} -> (fun (V617) -> case V6 of {'Idris.Core.Value.NType', E71} -> (fun (V618) -> {'Idris.Prelude.Types.Right', 1} end(E71)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E70)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E66, E67, E68, E69)); {'Idris.Core.Value.NForce', E80, E81, E82, E83} -> (fun (V619, V620, V621, V622) -> case V6 of {'Idris.Core.Value.NForce', E88, E89, E90, E91} -> (fun (V623, V624, V625, V626) -> fun (V627) -> case ('Idris.Idris2.Core.TT':'un--compatible'(V620, V624)) of 1 -> begin (V628 = (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V621, V625))(V627))), case V628 of {'Idris.Prelude.Types.Left', E92} -> (fun (V629) -> {'Idris.Prelude.Types.Left', V629} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V630) -> case V630 of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V631) -> ('Idris.Idris2.Builtin':'un--snd'(V631)) end, V622)), ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V632) -> ('Idris.Idris2.Builtin':'un--snd'(V632)) end, V626)), V627)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E88, E89, E90, E91)); _ -> case V6 of {'Idris.Core.Value.NErased', E86, E87} -> (fun (V633, V634) -> fun (V635) -> {'Idris.Prelude.Types.Right', 1} end end(E86, E87)); _ -> fun (V636) -> case V5 of {'Idris.Core.Value.NType', E84} -> (fun (V637) -> case V6 of {'Idris.Core.Value.NType', E85} -> (fun (V638) -> {'Idris.Prelude.Types.Right', 1} end(E85)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E84)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E80, E81, E82, E83)); {'Idris.Core.Value.NPrimVal', E94, E95} -> (fun (V639, V640) -> case V6 of {'Idris.Core.Value.NPrimVal', E100, E101} -> (fun (V641, V642) -> fun (V643) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V640, V642))} end end(E100, E101)); _ -> case V6 of {'Idris.Core.Value.NErased', E98, E99} -> (fun (V644, V645) -> fun (V646) -> {'Idris.Prelude.Types.Right', 1} end end(E98, E99)); _ -> fun (V647) -> case V5 of {'Idris.Core.Value.NType', E96} -> (fun (V648) -> case V6 of {'Idris.Core.Value.NType', E97} -> (fun (V649) -> {'Idris.Prelude.Types.Right', 1} end(E97)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E96)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end(E94, E95)); {'Idris.Core.Value.NErased', E102, E103} -> (fun (V650, V651) -> fun (V652) -> {'Idris.Prelude.Types.Right', 1} end end(E102, E103)); _ -> case V6 of {'Idris.Core.Value.NErased', E2, E3} -> (fun (V653, V654) -> fun (V655) -> {'Idris.Prelude.Types.Right', 1} end end(E2, E3)); _ -> fun (V656) -> case V5 of {'Idris.Core.Value.NType', E0} -> (fun (V657) -> case V6 of {'Idris.Core.Value.NType', E1} -> (fun (V658) -> {'Idris.Prelude.Types.Right', 1} end(E1)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0)); _ -> {'Idris.Prelude.Types.Right', 0} end end end end end end.
'dn--un--convGen_Convert_Closure'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (('un--evalClosure'(V0, V1, V3, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('un--evalClosure'(V0, V1, V3, V6))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V10, V13))(V7)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--__Impl_Quote_Term'() -> {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--quote_Quote_Term'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--quoteGen_Quote_Term'(V6, V7, V8, V9, V10, V11, V12)) end end end end end end end}.
'dn--un--__Impl_Quote_NF'() -> {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--quote_Quote_NF'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--quoteGen_Quote_NF'(V6, V7, V8, V9, V10, V11, V12)) end end end end end end end}.
'dn--un--__Impl_Quote_Closure'() -> {'Idris.Core.Normalise.dn--un--__mkQuote', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--quote_Quote_Closure'(V0, V1, V2, V3, V4, V5)) end end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--quoteGen_Quote_Closure'(V6, V7, V8, V9, V10, V11, V12)) end end end end end end end}.
'dn--un--__Impl_Convert_Term'() -> {'Idris.Core.Normalise.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--convert_Convert_Term'(V0, V1, V2, V3, V4, V5, V6)) end end end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--convGen_Convert_Term'(V7, V8, V9, V10, V11, V12, V13, V14)) end end end end end end end end}.
'dn--un--__Impl_Convert_NF'() -> {'Idris.Core.Normalise.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--convert_Convert_NF'(V0, V1, V2, V3, V4, V5, V6)) end end end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--convGen_Convert_NF'(V7, V8, V9, V10, V11, V12, V13)) end end end end end end end}.
'dn--un--__Impl_Convert_Closure'() -> {'Idris.Core.Normalise.dn--un--__mkConvert', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--convert_Convert_Closure'(V0, V1, V2, V3, V4, V5, V6)) end end end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--convGen_Convert_Closure'(V7, V8, V9, V10, V11, V12, V13, V14)) end end end end end end end end}.
'un--updateLocal'(V0, V1, V2, V3, V4) -> case V2 of 0 -> case V3 of {'Idris.Core.Value.::', E2, E3} -> (fun (V5, V6) -> {'Idris.Core.Value.::', {'Idris.Core.Value.MkNFClosure', V4}, V6} end(E2, E3)); _ -> V3 end; _ -> begin (V7 = (V2 - 1)), case V3 of {'Idris.Core.Value.::', E0, E1} -> (fun (V8, V9) -> {'Idris.Core.Value.::', V8, ('un--updateLocal'(V0, V1, V7, V9, V4))} end(E0, E1)); _ -> V3 end end end.
'un--updateLimit'(V0, V1, V2) -> case V0 of {'Idris.Core.TT.Func'} -> (fun () -> case ('Idris.Idris2.Data.List':'un--isNil'(case V2 of {'Idris.Core.Value.MkEvalOpts', E15, E16, E17, E18, E19, E20, E21} -> (fun (V3, V4, V5, V6, V7, V8, V9) -> V9 end(E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V2}} end; 0 -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, V1, case V2 of {'Idris.Core.Value.MkEvalOpts', E8, E9, E10, E11, E12, E13, E14} -> (fun (V15, V16, V17, V18, V19, V20, V21) -> V21 end(E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V23) -> case V23 of 0 -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> begin (V25 = (V23 - 1)), fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', case V2 of {'Idris.Core.Value.MkEvalOpts', E1, E2, E3, E4, E5, E6, E7} -> (fun (V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Value.MkEvalOpts', V27, V28, V29, V30, V31, V32, ('nested--6237-1826--in--un--set'(V2, V1, V1, V25, V33))} end(E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V2}} end end.
'un--tryUpdate'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--12450-7349--in--un--findIdx'(V0, V1, V6, V5, V4, V2, V2, V6)), fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Local', V4, V5, V7})) end)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V8, V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Ref', V8, V9, V10})) end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_List'({'Idris.Prelude.Interfaces.MkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V17, V18)) end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V20)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V23, V24)) end end end end}, fun (V25) -> ('un--tryUpdate'(V0, V1, V2, V25)) end, V14)), fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Meta', V11, V12, V13, V26})) end)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V27, V28, V29, V30) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('nested--12450-7518--in--un--tryUpdateB'(V0, V1, V28, V30, V29, V27, V2, V29)), fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'([V28 | V0], [V28 | V1], ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V32) -> ('nested--12450-7519--in--un--weakenP'(V0, V1, V28, V30, V29, V27, V2, V28, V32)) end, V2)), V30)), fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Bind', V27, V28, V31, V33})) end)) end)) end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E14, E15, E16} -> (fun (V34, V35, V36) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V35)), fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V36)), fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.App', V34, V37, V38})) end)) end)) end(E14, E15, E16)); {'Idris.Core.TT.As', E17, E18, E19, E20} -> (fun (V39, V40, V41, V42) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V41)), fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V42)), fun (V44) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.As', V39, V40, V43, V44})) end)) end)) end(E17, E18, E19, E20)); {'Idris.Core.TT.TDelayed', E21, E22, E23} -> (fun (V45, V46, V47) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V47)), fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TDelayed', V45, V46, V48})) end)) end(E21, E22, E23)); {'Idris.Core.TT.TDelay', E24, E25, E26, E27} -> (fun (V49, V50, V51, V52) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V51)), fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V52)), fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TDelay', V49, V50, V53, V54})) end)) end)) end(E24, E25, E26, E27)); {'Idris.Core.TT.TForce', E28, E29, E30} -> (fun (V55, V56, V57) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--tryUpdate'(V0, V1, V2, V57)), fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TForce', V55, V56, V58})) end)) end(E28, E29, E30)); {'Idris.Core.TT.PrimVal', E31, E32} -> (fun (V59, V60) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.PrimVal', V59, V60})) end(E31, E32)); {'Idris.Core.TT.Erased', E33, E34} -> (fun (V61, V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.Erased', V61, V62})) end(E33, E34)); {'Idris.Core.TT.TType', E35} -> (fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Core.TT.TType', V63})) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tryAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.Core.Value.NDCon', E1, E2, E3, E4, E5} -> (fun (V12, V13, V14, V15, V16) -> case V11 of {'Idris.Core.CaseTree.ConCase', E7, E8, E9, E10} -> (fun (V17, V18, V19, V20) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V18, V14)) of 1 -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V19, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Builtin':'un--snd'(V21)) end, V16)), V20)); 0 -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8, E9, E10)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E6} -> (fun (V23) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V23, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V23)); 0 -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E1, E2, E3, E4, E5)); {'Idris.Core.Value.NTCon', E11, E12, E13, E14, E15} -> (fun (V26, V27, V28, V29, V30) -> case V11 of {'Idris.Core.CaseTree.ConCase', E17, E18, E19, E20} -> (fun (V31, V32, V33, V34) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V27, V31)) of 1 -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V33, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V35) -> ('Idris.Idris2.Builtin':'un--snd'(V35)) end, V30)), V34)); 0 -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19, E20)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E16} -> (fun (V37) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V37, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V37)); 0 -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E11, E12, E13, E14, E15)); {'Idris.Core.Value.NPrimVal', E21, E22} -> (fun (V40, V41) -> case V11 of {'Idris.Core.CaseTree.ConCase', E24, E25, E26, E27} -> (fun (V42, V43, V44, V45) -> case V44 of [] -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'({'Idris.Core.Name.UN', ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V41))}, V42)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V45)); 0 -> fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.NoMatch'}} end end end(E24, E25, E26, E27)); {'Idris.Core.CaseTree.ConstCase', E28, E29} -> (fun (V48, V49) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V48, V41)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V49)); 0 -> fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.NoMatch'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E23} -> (fun (V51) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V51, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V51)); 0 -> fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E21, E22)); {'Idris.Core.Value.NType', E30} -> (fun (V54) -> case V11 of {'Idris.Core.CaseTree.ConCase', E32, E33, E34, E35} -> (fun (V55, V56, V57, V58) -> case V55 of {'Idris.Core.Name.UN', E37} -> (fun (V59) -> case V59 of <<"Type"/utf8>> -> case V57 of [] -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V58)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E39} -> (fun (V60) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V60, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V60)); 0 -> fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> fun (V62) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end; _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E38} -> (fun (V63) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V63, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V63)); 0 -> fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E37)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E36} -> (fun (V66) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V66, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V66)); 0 -> fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36)); _ -> fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E32, E33, E34, E35)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E31} -> (fun (V69) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V69, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V69)); 0 -> fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E30)); {'Idris.Core.Value.NBind', E40, E41, E42, E43} -> (fun (V72, V73, V74, V75) -> case V74 of {'Idris.Core.TT.Pi', E45, E46, E47, E48} -> (fun (V76, V77, V78, V79) -> case V11 of {'Idris.Core.CaseTree.ConCase', E50, E51, E52, E53} -> (fun (V80, V81, V82, V83) -> case V80 of {'Idris.Core.Name.UN', E55} -> (fun (V84) -> case V84 of <<"->"/utf8>> -> case V82 of [E58 | E59] -> (fun (V85, V86) -> case V86 of [E61 | E62] -> (fun (V87, V88) -> case V88 of [] -> ('un--evalConAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, [V85 | [V87 | []]], [{'Idris.Core.Value.MkNFClosure', V79} | [{'Idris.Core.Value.MkNFClosure', {'Idris.Core.Value.NBind', V72, V73, {'Idris.Core.TT.Lam', V76, V77, V78, V79}, V75}} | []]], V83)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E63} -> (fun (V89) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V89, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V89)); 0 -> fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E63)); _ -> fun (V91) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E61, E62)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E60} -> (fun (V92) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V92, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V92)); 0 -> fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60)); _ -> fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E58, E59)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E57} -> (fun (V95) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V95, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V95)); 0 -> fun (V96) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E57)); _ -> fun (V97) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end; _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E56} -> (fun (V98) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V98, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V98)); 0 -> fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); _ -> fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E55)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E54} -> (fun (V101) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V101, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V101)); 0 -> fun (V102) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54)); _ -> fun (V103) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E50, E51, E52, E53)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E49} -> (fun (V104) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V104, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V104)); 0 -> fun (V105) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49)); _ -> fun (V106) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E45, E46, E47, E48)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E44} -> (fun (V107) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V107, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V107)); 0 -> fun (V108) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44)); _ -> fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E40, E41, E42, E43)); {'Idris.Core.Value.NDelay', E64, E65, E66, E67} -> (fun (V110, V111, V112, V113) -> case V11 of {'Idris.Core.CaseTree.DelayCase', E69, E70, E71} -> (fun (V114, V115, V116) -> ('un--evalTree'(V0, V1, V2, [V114 | [V115 | V4]], V3, V5, {'Idris.Core.Value.::', V112, {'Idris.Core.Value.::', V113, V6}}, V7, V8, V9, V116)) end(E69, E70, E71)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E68} -> (fun (V117) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V117, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V117)); 0 -> fun (V118) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68)); _ -> fun (V119) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end end(E64, E65, E66, E67)); _ -> case V11 of {'Idris.Core.CaseTree.DefaultCase', E0} -> (fun (V120) -> case ('nested--6410-3940--in--un--concrete'(V0, V1, V3, V4, V120, V10, V9, V8, V7, V6, V5, V2, V10)) of 1 -> ('un--evalTree'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V120)); 0 -> fun (V121) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> fun (V122) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end end.
'un--toClosure'(V0, V1, V2) -> {'Idris.Core.Value.MkClosure', [], V0, {'Idris.Core.Value.Nil'}, V1, V2}.
'un--takeFromStack'(V0, V1, V2, V3) -> ('nested--6413-4477--in--un--takeStk'(V0, V1, V3, V2, V2, V3, {'Idris.Data.Vect.Nil'})).
'un--replace\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('dn--un--convert_Convert_NF'(V0, V1, V3, V4, V5, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of 1 -> {'Idris.Prelude.Types.Right', V6}; 0 -> ('nested--18958-13061--in--un--repSub'(V1, V7, V6, V5, V4, V3, V2, V0, V7, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--replace'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('un--replace\x{27}'(V0, V1, 0, V2, V3, V4, V5, V6, V7)).
'un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V9) -> begin (V10 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V9, V8))), case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V12}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteHead'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.NLocal', E0, E1} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Local', V5, V9, ('nested--10242-5474--in--un--addLater'(V2, V10, V9, V7, V1, V6, V5, V4, V3, V0, V10, V1))}} end end(E0, E1)); {'Idris.Core.Value.NRef', E2, E3} -> (fun (V12, V13) -> case V12 of {'Idris.Core.TT.Bound'} -> (fun () -> fun (V14) -> case V13 of {'Idris.Core.Name.MN', E4, E5} -> (fun (V15, V16) -> case ('nested--10242-5604--in--un--findName'(V1, V2, V16, V15, V7, V6, V5, V4, V3, V0, V6)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Nothing'}, V17}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V5, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', V15, V16}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V5, V12, V13}} end end end()); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V5, V12, V13}} end end end(E2, E3)); {'Idris.Core.Value.NMeta', E7, E8, E9} -> (fun (V19, V20, V21) -> fun (V22) -> begin (V23 = ('un--quoteArgs'(V0, V1, V2, V3, V4, V6, V7, V21, V22))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V5, V19, V20, V25}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> begin (V13 = ('un--genName'(V3, <<"qv"/utf8>>, V8))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V19 = begin (V16 = (((V12(V4))(('un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V6, {'Idris.Core.TT.Ref', V9, {'Idris.Core.TT.Bound'}, V15}))))(V8))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> ('un--quoteGenNF'(V0, [V10 | V1], V2, V3, V4, {'Idris.Core.TT.Bounds.Add', V10, V15, V5}, V6, V18, V8)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('un--quoteBinder'(V0, V1, V2, V3, V4, V5, V6, V11, V8))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V9, V10, V24, V21}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NApp', E12, E13, E14} -> (fun (V25, V26, V27) -> begin (V28 = (('un--quoteHead'(V0, V1, V2, V3, V4, V25, V5, V6, V26))(V8))), case V28 of {'Idris.Prelude.Types.Left', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V30) -> begin (V31 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V27, V8))), case V31 of {'Idris.Prelude.Types.Left', E17} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V33) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V30, V33))} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13, E14)); {'Idris.Core.Value.NDCon', E19, E20, E21, E22, E23} -> (fun (V34, V35, V36, V37, V38) -> begin (V39 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V38, V8))), case V39 of {'Idris.Prelude.Types.Left', E24} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V41) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.Ref', V34, {'Idris.Core.TT.DataCon', V36, V37}, V35}, V41))} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20, E21, E22, E23)); {'Idris.Core.Value.NTCon', E26, E27, E28, E29, E30} -> (fun (V42, V43, V44, V45, V46) -> begin (V47 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V46, V8))), case V47 of {'Idris.Prelude.Types.Left', E31} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V49) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.Ref', V42, {'Idris.Core.TT.TyCon', V44, V45}, V43}, V49))} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27, E28, E29, E30)); {'Idris.Core.Value.NAs', E33, E34, E35, E36} -> (fun (V50, V51, V52, V53) -> begin (V54 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V52, V8))), case V54 of {'Idris.Prelude.Types.Left', E37} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V56) -> begin (V57 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V53, V8))), case V57 of {'Idris.Prelude.Types.Left', E39} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V50, V51, V56, V59}} end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34, E35, E36)); {'Idris.Core.Value.NDelayed', E41, E42, E43} -> (fun (V60, V61, V62) -> begin (V63 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V62, V8))), case V63 of {'Idris.Prelude.Types.Left', E44} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V60, V61, V65}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41, E42, E43)); {'Idris.Core.Value.NDelay', E46, E47, E48, E49} -> (fun (V66, V67, V68, V69) -> begin (V70 = (('un--evalClosure'(V0, V2, V4, ('nested--10269-6243--in--un--toHolesOnly'(V1, V2, V69, V68, V67, V66, V6, V5, V4, V3, V0, V69))))(V8))), case V70 of {'Idris.Prelude.Types.Left', E50} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V72) -> begin (V73 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V72, V8))), case V73 of {'Idris.Prelude.Types.Left', E52} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V75) -> begin (V76 = (('un--evalClosure'(V0, V2, V4, ('nested--10269-6243--in--un--toHolesOnly'(V1, V2, V69, V68, V67, V66, V6, V5, V4, V3, V0, V68))))(V8))), case V76 of {'Idris.Prelude.Types.Left', E54} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V78) -> begin (V79 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V78, V8))), case V79 of {'Idris.Prelude.Types.Left', E56} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V81) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V66, V67, V81, V75}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47, E48, E49)); {'Idris.Core.Value.NForce', E58, E59, E60, E61} -> (fun (V82, V83, V84, V85) -> begin (V86 = ('un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V85, V8))), case V86 of {'Idris.Prelude.Types.Left', E62} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V88) -> case V84 of {'Idris.Core.Value.NDelay', E66, E67, E68, E69} -> (fun (V89, V90, V91, V92) -> begin (V93 = (('un--evalClosure'(V0, V2, V4, V92))(V8))), case V93 of {'Idris.Prelude.Types.Left', E70} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V95) -> begin (V96 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V95, V8))), case V96 of {'Idris.Prelude.Types.Left', E72} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V98) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'(V98, V88))} end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66, E67, E68, E69)); _ -> begin (V99 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V84, V8))), case V99 of {'Idris.Prelude.Types.Left', E64} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V101) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'un--applyWithFC'({'Idris.Core.TT.TForce', V82, V83, V101}, V88))} end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58, E59, E60, E61)); {'Idris.Core.Value.NPrimVal', E74, E75} -> (fun (V102, V103) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V102, V103}} end(E74, E75)); {'Idris.Core.Value.NErased', E76, E77} -> (fun (V104, V105) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Erased', V104, V105}} end(E76, E77)); {'Idris.Core.Value.NType', E78} -> (fun (V106) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TType', V106}} end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteGen'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.dn--un--__mkQuote', E0, E1} -> (fun (V6, V7) -> fun (V8) -> ((((((V7(V1))(V2))(V3))(V4))(V5))(V8)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteBinder'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> begin (V13 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V12, V8))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V11, V8))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Lam', V9, V10, V18, V15}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E8, E9, E10, E11} -> (fun (V19, V20, V21, V22) -> begin (V23 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V21, V8))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> begin (V26 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V22, V8))), case V26 of {'Idris.Prelude.Types.Left', E14} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Let', V19, V20, V25, V28}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11)); {'Idris.Core.TT.Pi', E16, E17, E18, E19} -> (fun (V29, V30, V31, V32) -> begin (V33 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V32, V8))), case V33 of {'Idris.Prelude.Types.Left', E20} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V35) -> begin (V36 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V31, V8))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Pi', V29, V30, V38, V35}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17, E18, E19)); {'Idris.Core.TT.PVar', E24, E25, E26, E27} -> (fun (V39, V40, V41, V42) -> begin (V43 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V42, V8))), case V43 of {'Idris.Prelude.Types.Left', E28} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V45) -> begin (V46 = ('un--quotePi'(V0, V1, V2, V3, V4, V5, V6, V41, V8))), case V46 of {'Idris.Prelude.Types.Left', E30} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PVar', V39, V40, V48, V45}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25, E26, E27)); {'Idris.Core.TT.PLet', E32, E33, E34, E35} -> (fun (V49, V50, V51, V52) -> begin (V53 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V51, V8))), case V53 of {'Idris.Prelude.Types.Left', E36} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V55) -> begin (V56 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V52, V8))), case V56 of {'Idris.Prelude.Types.Left', E38} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PLet', V49, V50, V55, V58}} end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33, E34, E35)); {'Idris.Core.TT.PVTy', E40, E41, E42} -> (fun (V59, V60, V61) -> begin (V62 = ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V61, V8))), case V62 of {'Idris.Prelude.Types.Left', E43} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PVTy', V59, V60, V64}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quoteArgsWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> fun (V10) -> ('un--quoteArgWithFC'(V0, V1, V2, V3, V4, V5, V6, V9, V10)) end end, V7, [], V8)).
'un--quoteArgs'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> fun (V10) -> ('un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V9, V10)) end end, V7, [], V8)).
'un--quoteArgWithFC'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--traversePair'(fun (V9) -> fun (V10) -> ('un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V9, V10)) end end, V7, V8)).
'un--quoteArg'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('un--evalClosure'(V0, V2, V4, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> ('un--quoteGenNF'(V0, V1, V2, V3, V4, V5, V6, V11, V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--quote'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.dn--un--__mkQuote', E0, E1} -> (fun (V6, V7) -> (((((V6(V1))(V2))(V3))(V4))(V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--quickConv'(V0, V1) -> case V0 of [] -> case V1 of [] -> 1; _ -> 0 end; [E0 | E1] -> (fun (V2, V3) -> case V1 of [E2 | E3] -> (fun (V4, V5) -> case ('nested--12995-8027--in--un--quickConvArg'(V2, V3, V4, V5, V2, V4)) of 1 -> ('un--quickConv'(V3, V5)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--normaliseScope'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> begin (V10 = ('un--normaliseScope'(V0, [V7 | V1], V2, {'Idris.Core.Env.::', V8, V3}, V9, V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V6, V7, V8, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('un--normalise'(V0, V1, V2, V3, V4, V5)) end.
'un--normalisePrims'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V6, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V16, V17)) end end}, ('Idris.Idris2.Core.Name':'un--dropNS'(V13)), V5)) of 1 -> (('case--case block in normalisePrims-13662'(V1, V9, V8, V7, V6, V5, V4, V3, V2, V0, V13, ('Idris.Idris2.Data.List':'un--reverse'(V7))))(V10)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normaliseOpts'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = (('un--nfOpts'(V0, V1, V2, V3, V4, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> ('dn--un--quote_Quote_NF'(V0, V1, V3, V4, V9, V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normaliseLHS'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Bind', E2, E3, E4, E5} -> (fun (V6, V7, V8, V9) -> begin (V10 = ('un--normaliseLHS'(V0, [V7 | V1], V2, {'Idris.Core.Env.::', V8, V3}, V9, V5))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V6, V7, V8, V12}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5)); _ -> begin (V13 = (('un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--onLHS'()), V2, V3, V4))(V5))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> ('dn--un--quote_Quote_NF'(V0, V1, V2, V3, V15, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--normaliseHoles'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withHoles'()), V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quote_Quote_NF'(V0, V1, V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normaliseErr'(V0, V1, V2) -> case V1 of {'Idris.Core.Core.CantConvert', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V21 = begin (V12 = ('un--normaliseHoles'(V0, V3, V11, V5, V6, V2))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V15, V16, V17)) end end end, fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V18, V19, V20)) end end end}, V14, V2)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V21 of {'Idris.Prelude.Types.Left', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V23) -> begin (V33 = begin (V24 = ('un--normaliseHoles'(V0, V3, V11, V5, V7, V2))), case V24 of {'Idris.Prelude.Types.Left', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V26) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V27, V28, V29)) end end end, fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V30, V31, V32)) end end end}, V26, V2)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V33 of {'Idris.Prelude.Types.Left', E13} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.CantConvert', V3, V4, V5, V23, V35}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Core.CantSolveEq', E15, E16, E17, E18, E19} -> (fun (V36, V37, V38, V39, V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E20} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V44) -> begin (V54 = begin (V45 = ('un--normaliseHoles'(V0, V36, V44, V38, V39, V2))), case V45 of {'Idris.Prelude.Types.Left', E22} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V47) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V48, V49, V50)) end end end, fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V51, V52, V53)) end end end}, V47, V2)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V54 of {'Idris.Prelude.Types.Left', E24} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V56) -> begin (V66 = begin (V57 = ('un--normaliseHoles'(V0, V36, V44, V38, V40, V2))), case V57 of {'Idris.Prelude.Types.Left', E26} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V59) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V60, V61, V62)) end end end, fun (V63) -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V63, V64, V65)) end end end}, V59, V2)) end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V66 of {'Idris.Prelude.Types.Left', E28} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V68) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.CantSolveEq', V36, V37, V38, V56, V68}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16, E17, E18, E19)); {'Idris.Core.Core.WhenUnifying', E30, E31, E32, E33, E34, E35} -> (fun (V69, V70, V71, V72, V73, V74) -> begin (V76 = begin (V75 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V75} end), case V76 of {'Idris.Prelude.Types.Left', E36} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V78) -> begin (V88 = begin (V79 = ('un--normaliseHoles'(V0, V69, V78, V71, V72, V2))), case V79 of {'Idris.Prelude.Types.Left', E38} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V81) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V82, V83, V84)) end end end, fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V85, V86, V87)) end end end}, V81, V2)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V88 of {'Idris.Prelude.Types.Left', E40} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V90) -> begin (V100 = begin (V91 = ('un--normaliseHoles'(V0, V69, V78, V71, V73, V2))), case V91 of {'Idris.Prelude.Types.Left', E42} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V93) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V94) -> fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V94, V95, V96)) end end end, fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V97, V98, V99)) end end end}, V93, V2)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V100 of {'Idris.Prelude.Types.Left', E44} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V102) -> begin (V103 = ('un--normaliseErr'(V0, V74, V2))), case V103 of {'Idris.Prelude.Types.Left', E46} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V105) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.WhenUnifying', V69, V70, V71, V90, V102, V105}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31, E32, E33, E34, E35)); {'Idris.Core.Core.CantSolveGoal', E48, E49, E50, E51} -> (fun (V106, V107, V108, V109) -> begin (V111 = begin (V110 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V110} end), case V111 of {'Idris.Prelude.Types.Left', E52} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V113) -> begin (V123 = begin (V114 = ('un--normaliseHoles'(V0, V106, V113, V108, V109, V2))), case V114 of {'Idris.Prelude.Types.Left', E54} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V116) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V117, V118, V119)) end end end, fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V120, V121, V122)) end end end}, V116, V2)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V123 of {'Idris.Prelude.Types.Left', E56} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V125) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.CantSolveGoal', V106, V107, V108, V125}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48, E49, E50, E51)); {'Idris.Core.Core.AllFailed', E58} -> (fun (V126) -> begin (V132 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V127) -> fun (V128) -> begin (V129 = ('un--normaliseErr'(V0, ('Idris.Idris2.Builtin':'un--snd'(V127)), V128))), case V129 of {'Idris.Prelude.Types.Left', E59} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V127)), V131}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V126, [], V2))), case V132 of {'Idris.Prelude.Types.Left', E61} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V134) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.AllFailed', V134}} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); {'Idris.Core.Core.InType', E63, E64, E65} -> (fun (V135, V136, V137) -> begin (V138 = ('un--normaliseErr'(V0, V137, V2))), case V138 of {'Idris.Prelude.Types.Left', E66} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V140) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.InType', V135, V136, V140}} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63, E64, E65)); {'Idris.Core.Core.InCon', E68, E69, E70} -> (fun (V141, V142, V143) -> begin (V144 = ('un--normaliseErr'(V0, V143, V2))), case V144 of {'Idris.Prelude.Types.Left', E71} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V146) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.InCon', V141, V142, V146}} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68, E69, E70)); {'Idris.Core.Core.InLHS', E73, E74, E75} -> (fun (V147, V148, V149) -> begin (V150 = ('un--normaliseErr'(V0, V149, V2))), case V150 of {'Idris.Prelude.Types.Left', E76} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V152) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.InLHS', V147, V148, V152}} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73, E74, E75)); {'Idris.Core.Core.InRHS', E78, E79, E80} -> (fun (V153, V154, V155) -> begin (V156 = ('un--normaliseErr'(V0, V155, V2))), case V156 of {'Idris.Prelude.Types.Left', E81} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V158) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Core.InRHS', V153, V154, V158}} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78, E79, E80)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'un--normaliseArgHoles'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withArgHoles'()), V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quote_Quote_NF'(V0, V1, V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normaliseAll'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('un--nfOpts'(V0, V1, ('Idris.Idris2.Core.Value':'un--withAll'()), V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quote_Quote_NF'(V0, V1, V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--normalise'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('un--nf'(V0, V1, V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quote_Quote_NF'(V0, V1, V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--nfOpts'(V0, V1, V2, V3, V4, V5) -> ('un--eval'(V3, V2, V0, V1, [], V4, {'Idris.Core.Value.Nil'}, V5, [])).
'un--nf'(V0, V1, V2, V3, V4) -> ('un--eval'(V2, ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V0, V1, [], V3, {'Idris.Core.Value.Nil'}, V4, [])).
'un--logTermNF\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('un--normaliseHoles'(V1, V0, V11, V5, V6, V7))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V15, V16, V17)) end end end, fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V18, V19, V20)) end end end}, V14, V7))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> case V2 of <<""/utf8>> -> begin (V51 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V23))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V51} end; _ -> begin (V79 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> V58 end end end, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V62(V64))), begin (V66 = (V63(V64))), (V65(V66)) end end end end end end end}, fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V69(V71))), ((V70(V72))(V71)) end end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V74(V75))), (V76(V75)) end end end end}, fun (V77) -> fun (V78) -> V78 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V23))))))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V79} end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logTermNF'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of 1 -> ('un--logTermNF\x{27}'(V0, V1, V2, V3, V4, V5, V6, V7)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logNF'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of 1 -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('dn--un--quote_Quote_NF'(V1, V0, V14, V5, V6, V7))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V21, V22, V23)) end end end}, V17, V7))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> case V2 of <<""/utf8>> -> begin (V54 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> V33 end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), begin (V41 = (V38(V39))), (V40(V41)) end end end end end end end}, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), ((V45(V47))(V46)) end end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V49(V50))), (V51(V50)) end end end end}, fun (V52) -> fun (V53) -> V53 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V54} end; _ -> begin (V82 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))))))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V82} end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logGlueNF'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of 1 -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = (('un--getTerm'(V6))(V7))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V18 = ('un--normaliseHoles'(V1, V0, V14, V5, V17, V7))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V27 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V21, V22, V23)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V24, V25, V26)) end end end}, V20, V7))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> case V2 of <<""/utf8>> -> begin (V57 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> V36 end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), begin (V44 = (V41(V42))), (V43(V44)) end end end end end end end}, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), ((V48(V50))(V49)) end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V52(V53))), (V54(V53)) end end end end}, fun (V55) -> fun (V56) -> V56 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V29))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V57} end; _ -> begin (V85 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> V64 end end end, fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> begin (V71 = (V68(V70))), begin (V72 = (V69(V70))), (V71(V72)) end end end end end end end}, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V75(V77))), ((V76(V78))(V77)) end end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V80(V81))), (V82(V81)) end end end end}, fun (V83) -> fun (V84) -> V84 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V29))))))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V85} end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logGlue'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of 1 -> begin (V12 = begin (V11 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = (('un--getTerm'(V6))(V7))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V1, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V18, V19, V20)) end end end, fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V21, V22, V23)) end end end}, V17, V7))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> case V2 of <<""/utf8>> -> begin (V54 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> V33 end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), begin (V41 = (V38(V39))), (V40(V41)) end end end end end end end}, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), ((V45(V47))(V46)) end end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V49(V50))), (V51(V50)) end end end end}, fun (V52) -> fun (V53) -> V53 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V54} end; _ -> begin (V82 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'((V4()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V0, V26))))))))))))))))))(V7))), {'Idris.Prelude.Types.Right', V82} end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--logEnv'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogging'(V1, V2, V3, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of 1 -> begin (V66 = case V2 of <<""/utf8>> -> begin (V37 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, V4))))))))(V6))), {'Idris.Prelude.Types.Right', V37} end; _ -> begin (V65 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"LOG "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, V4))))))))))))(V6))), {'Idris.Prelude.Types.Right', V65} end end), case V66 of {'Idris.Prelude.Types.Left', E2} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V68) -> (('nested--18833-12948--in--un--dumpEnv'(V0, V2, V5, V4, V3, V1, V0, V5))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isFromTerm'(V0) -> case V0 of {'Idris.Core.Normalise.MkGlue', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--gnfOpts'(V0, V1, V2, V3) -> {'Idris.Core.Normalise.MkGlue', 1, fun (V4) -> {'Idris.Prelude.Types.Right', V3} end, fun (V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('un--nfOpts'(V5, V0, V1, V10, V2, V3))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'un--gnf'(V0, V1, V2) -> {'Idris.Core.Normalise.MkGlue', 1, fun (V3) -> {'Idris.Prelude.Types.Right', V2} end, fun (V4) -> fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('un--nf'(V4, V0, V9, V1, V2))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end}.
'un--glueBack'(V0, V1, V2, V3, V4) -> {'Idris.Core.Normalise.MkGlue', 0, fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V2, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('dn--un--quote_Quote_NF'(V0, V1, V8, V3, V4, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', V4} end end}.
'un--getValArity'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> begin (V12 = (((V7(V0))(('un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Idris.Core.TT.Erased', V4, 0}))))(V3))), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> begin (V15 = ('un--getValArity'(V0, V1, V14, V3))), case V15 of {'Idris.Prelude.Types.Left', E10} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V17) -> {'Idris.Prelude.Types.Right', (1 + V17)} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--getTerm'(V0) -> case V0 of {'Idris.Core.Normalise.MkGlue', E0, E1, E2} -> (fun (V1, V2, V3) -> V2 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getNF'(V0, V1) -> case V1 of {'Idris.Core.Normalise.MkGlue', E0, E1, E2} -> (fun (V2, V3, V4) -> (V4(V0)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getMatchingVars'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V6 of {'Idris.Core.CaseTree.Case', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> fun (V15) -> ('un--getMatchingVarAlts'(V0, V1, V2, V3, [{'Idris.Builtin.MkPair', V8, V12} | V4], V10, V14, V15)) end end(E4, E5, E6, E7)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V17, V18) -> case V6 of {'Idris.Core.CaseTree.STerm', E10, E11} -> (fun (V19, V20) -> fun (V21) -> ('case--getMatchingVars-8980'(V1, V2, V18, V17, V20, V19, V4, V3, V0, ('un--tryUpdate'(V1, V2, V4, V18)), V21)) end end(E10, E11)); _ -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E8, E9)); {'Idris.Core.CaseTree.Unmatched', E12} -> (fun (V23) -> fun (V24) -> case V6 of {'Idris.Core.CaseTree.Unmatched', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}} end(E13)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E12)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> fun (V26) -> case V6 of {'Idris.Core.CaseTree.Impossible'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}} end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end()); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--getMatchingVarAlts'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> case V6 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V8, V9) -> case V6 of [E2 | E3] -> (fun (V10, V11) -> begin (V12 = (('un--getMatchingVarAlt'(V0, V1, V2, V3, V4, V8, V10))(V7))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of {'Idris.Prelude.Types.Just', E6} -> (fun (V15) -> ('un--getMatchingVarAlts'(V0, V1, V2, V3, V15, V9, V11, V7)) end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end.
'un--getMatchingVarAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V6 of {'Idris.Core.CaseTree.ConCase', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V11)) of 1 -> fun (V15) -> ('case--case block in getMatchingVarAlt-8580'(V1, V2, V9, V10, V8, V7, V13, V14, V12, V11, V4, V3, V0, ('nested--13003-8356--in--un--extend'(V1, V2, V9, V10, V8, V7, V13, V14, V12, V11, V4, V3, V0, V9, V13, V4)), V15)) end; 0 -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.ConstCase', E8, E9} -> (fun (V18, V19) -> case V6 of {'Idris.Core.CaseTree.ConstCase', E10, E11} -> (fun (V20, V21) -> case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Constant'(V18, V20)) of 1 -> ('un--getMatchingVars'(V0, V1, V2, V3, V4, V19, V21)); 0 -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E8, E9)); {'Idris.Core.CaseTree.DefaultCase', E12} -> (fun (V24) -> case V6 of {'Idris.Core.CaseTree.DefaultCase', E13} -> (fun (V25) -> ('un--getMatchingVars'(V0, V1, V2, V3, V4, V24, V25)) end(E13)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E12)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--getCaseBound'(V0, V1, V2, V3, V4) -> case V2 of [] -> case V3 of [] -> {'Idris.Prelude.Types.Just', V4}; [E0 | E1] -> (fun (V5, V6) -> {'Idris.Prelude.Types.Nothing'} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E2 | E3] -> (fun (V7, V8) -> case V3 of [] -> {'Idris.Prelude.Types.Nothing'}; [E4 | E5] -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V13, V14)) end end end end, fun (V15) -> {'Idris.Core.Value.::', V7, V15} end, ('un--getCaseBound'(V0, V1, V8, V10, V4)))) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getArity'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('un--nf'(V0, V1, V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--getValArity'(V2, V3, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--genName'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V8 = begin (V7 = ('erlang':'put'(V0, ((V6 + 1) rem 9223372036854775808)))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', V1, V6}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--gType'(V0) -> {'Idris.Core.Normalise.MkGlue', 1, fun (V1) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TType', V0}} end, fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NType', V0}} end end}.
'un--gErased'(V0) -> {'Idris.Core.Normalise.MkGlue', 1, fun (V1) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Erased', V0, 0}} end, fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NErased', V0, 0}} end end}.
'un--findAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of [] -> begin (V13 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"eval.casetree.stuck"/utf8>>, (1 + (1 + 0)), fun () -> <<"Ran out of alternatives"/utf8>> end, V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E2 | E3] -> (fun (V16, V17) -> begin (V18 = (('un--tryAlt'(V0, V1, V2, V4, V3, V5, V6, V7, V8, V9, V10, V16))(V12))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> case V20 of {'Idris.Core.Normalise.Result', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Result', V21}} end(E6)); {'Idris.Core.Normalise.NoMatch'} -> (fun () -> ('un--findAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17, V12)) end()); {'Idris.Core.Normalise.GotStuck'} -> (fun () -> begin (V32 = begin (V28 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V22) -> fun (V23) -> fun (V24) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(CaseAlt $vars)'(V22, V23, V24)) end end end, fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(CaseAlt $vars)'(V25, V26, V27)) end end end}, V16, V12))), case V28 of {'Idris.Prelude.Types.Left', E7} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V30) -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, <<"eval.casetree.stuck"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Got stuck matching "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V4, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" against "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseAlt $vars)'(V3, V30))))))))} end, V12)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V32 of {'Idris.Prelude.Types.Left', E9} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalWithOpts'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> ('un--eval'(V3, V4, V0, V1, V2, V5, V6, V7, V8)).
'un--evalTree'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('un--evalLocal'(V0, V1, V2, V4, V5, V8, {'Idris.Prelude.Types.Nothing'}, V12, [], V6))(V15))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"eval.casetree"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Evaluated "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, ('Idris.Idris2.Core.Value':'dn--un--show_Show_(NF $free)'(V4, V18)))))))) end, V15))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V22 = ('un--updateLocal'(V0, V1, V12, V6, V18))), ('un--findAlt'(V0, V1, V2, V3, V4, V5, V22, V7, V8, V9, V18, V14, V15)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V23, V24) -> case V7 of {'Idris.Core.Value.MkEvalOpts', E10, E11, E12, E13, E14, E15, E16} -> (fun (V25, V26, V27, V28, V29, V30, V31) -> case V30 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> begin (V33 = (('un--evalWithOpts'(V2, V4, V3, V0, V7, V5, V6, ('Idris.Idris2.Core.TT':'un--embed'(V24)), V9))(V32))), case V33 of {'Idris.Prelude.Types.Left', E17} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Result', V35}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E19} -> (fun (V36) -> case V36 of 0 -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end; _ -> begin (V38 = (V36 - 1)), begin (V46 = case V7 of {'Idris.Core.Value.MkEvalOpts', E20, E21, E22, E23, E24, E25, E26} -> (fun (V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Value.MkEvalOpts', V39, V40, V41, V42, V43, {'Idris.Prelude.Types.Just', V38}, V45} end(E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V47) -> begin (V48 = (('un--evalWithOpts'(V2, V4, V3, V0, V46, V5, V6, ('Idris.Idris2.Core.TT':'un--embed'(V24)), V9))(V47))), case V48 of {'Idris.Prelude.Types.Left', E27} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.Result', V50}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end.
'un--evalRef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V7 of {'Idris.Core.TT.DataCon', E0, E1} -> (fun (V12, V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDCon', V6, V8, V12, V13, V9}} end(E0, E1)); {'Idris.Core.TT.TyCon', E2, E3} -> (fun (V14, V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Value':'un--ntCon'(V6, V8, V14, V15, V9))} end(E2, E3)); {'Idris.Core.TT.Bound'} -> (fun () -> {'Idris.Prelude.Types.Right', (V10())} end()); {'Idris.Core.TT.Func'} -> (fun () -> begin (V44 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V8, case V0 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V16 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V44 of {'Idris.Prelude.Types.Left', E32} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V46) -> begin (V47 = {'Idris.Core.TT.Func'}), case V46 of {'Idris.Prelude.Types.Just', E34} -> (fun (V48) -> begin (V56 = case V1 of {'Idris.Core.Value.MkEvalOpts', E35, E36, E37, E38, E39, E40, E41} -> (fun (V49, V50, V51, V52, V53, V54, V55) -> V52 end(E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V155 = ('Idris.Idris2.Core.Context':'un--reducibleInAny'([case V0 of {'Idris.Core.Context.MkDefs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> V59 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end | case V0 of {'Idris.Core.Context.MkDefs', E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112) -> V88 end(E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end], case V48 of {'Idris.Core.Context.MkGlobalDef', E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118} -> (fun (V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133) -> V114 end(E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V48 of {'Idris.Core.Context.MkGlobalDef', E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139} -> (fun (V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154) -> V143 end(E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V156 = case V56 of 1 -> 1; 0 -> V155; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V167 = case V155 of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Context.Log':'un--unverifiedLogC'(V2, <<"eval.stuck"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V157) -> begin (V164 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V158) -> fun (V159) -> fun (V160) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V158, V159, V160)) end end end, fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V161, V162, V163)) end end end}, V8, V157))), case V164 of {'Idris.Prelude.Types.Left', E140} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V166) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Stuck function: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V166))))} end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V167 of {'Idris.Prelude.Types.Left', E142} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V169) -> case V156 of 1 -> begin (V170 = (('un--updateLimit'(V47, V8, V1))(V11))), case V170 of {'Idris.Prelude.Types.Left', E144} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V172) -> case V172 of {'Idris.Prelude.Types.Just', E146} -> (fun (V173) -> (('un--evalDef'(V0, V1, V2, V3, V4, V173, V5, V6, case V48 of {'Idris.Core.Context.MkGlobalDef', E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167} -> (fun (V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194) -> V181 end(E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V48 of {'Idris.Core.Context.MkGlobalDef', E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188} -> (fun (V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215) -> V212 end(E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V48 of {'Idris.Core.Context.MkGlobalDef', E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209} -> (fun (V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236) -> V227 end(E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9, V10))(V11)) end(E146)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V237 = ('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"eval.stuck"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Function "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), <<" past reduction limit"/utf8>>)))) end, V11))), case V237 of {'Idris.Prelude.Types.Left', E210} -> (fun (V238) -> {'Idris.Prelude.Types.Left', V238} end(E210)); {'Idris.Prelude.Types.Right', E211} -> (fun (V239) -> {'Idris.Prelude.Types.Right', (V10())} end(E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', (V10())}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E34)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', (V10())} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalOp'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--evalOp-4642'(V0, V1, V4, V7, V6, V3, V5, V2, ('un--takeFromStack'(V0, V1, V3, V6)))).
'un--evalMeta'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V12 = case ('Idris.Idris2.Data.List':'un--isNil'(V9)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V10} end, V8)); 0 -> ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> {'Idris.Builtin.MkPair', {'Idris.Core.FC.EmptyFC'}, V11} end, V8)), V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V13) -> ('un--evalRef'(V0, V1, V2, V3, V4, 1, V5, {'Idris.Core.TT.Func'}, {'Idris.Core.Name.Resolved', V7}, V12, fun () -> {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NMeta', V6, V7, V8}, V9} end, V13)) end end.
'un--evalLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Core.Value.Nil'} -> (fun () -> case case case case V1 of {'Idris.Core.Value.MkEvalOpts', E15, E16, E17, E18, E19, E20, E21} -> (fun (V10, V11, V12, V13, V14, V15, V16) -> V10 end(E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case V1 of {'Idris.Core.Value.MkEvalOpts', E8, E9, E10, E11, E12, E13, E14} -> (fun (V17, V18, V19, V20, V21, V22, V23) -> V18 end(E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> 1 end, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case ('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V26)) end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V29, V30)) end end end end}, V3, V7, V4)) of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V31, V32, V33, V34) -> ('un--eval'(V0, V1, V2, V3, [], V4, {'Idris.Core.Value.Nil'}, V33, V8)) end(E4, E5, E6, E7)); _ -> fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NLocal', V6, V7}, V8}} end end; 0 -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NApp', V5, {'Idris.Core.Value.NLocal', V6, V7}, V8}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> case V7 of 0 -> case V9 of {'Idris.Core.Value.::', E2, E3} -> (fun (V37, V38) -> ('un--evalLocClosure'(V0, V1, V2, V3, V4, V5, V6, V8, V37)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V39 = (V7 - 1)), case V9 of {'Idris.Core.Value.::', E0, E1} -> (fun (V40, V41) -> ('un--evalLocal'(V0, V1, V2, V3, V4, V5, V6, V39, V8, V41)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--evalLocClosure'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Value.MkClosure', E0, E1, E2, E3, E4} -> (fun (V9, V10, V11, V12, V13) -> ('un--evalWithOpts'(V2, V3, V9, V0, V10, V12, V11, V13, V7)) end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.MkNFClosure', E5} -> (fun (V14) -> ('nested--6403-2582--in--un--applyToStack'(V0, V1, V3, V14, V7, V6, V5, V4, V2, V14, V7)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalDef'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V9 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V13, V14, V15, V16, V17) -> case case case V13 of {'Idris.Core.Context.MkPMDefInfo', E40, E41} -> (fun (V18, V19) -> V19 end(E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case case V5 of {'Idris.Core.Value.MkEvalOpts', E33, E34, E35, E36, E37, E38, E39} -> (fun (V20, V21, V22, V23, V24, V25, V26) -> V20 end(E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V5 of {'Idris.Core.Value.MkEvalOpts', E26, E27, E28, E29, E30, E31, E32} -> (fun (V27, V28, V29, V30, V31, V32, V33) -> V28 end(E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case V5 of {'Idris.Core.Value.MkEvalOpts', E19, E20, E21, E22, E23, E24, E25} -> (fun (V34, V35, V36, V37, V38, V39, V40) -> V38 end(E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case case V6 of 1 -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V41) -> fun (V42) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V41, V42)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V43, V44)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V47, V48)) end end}}, V8)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V6 of 1 -> case V5 of {'Idris.Core.Value.MkEvalOpts', E12, E13, E14, E15, E16, E17, E18} -> (fun (V49, V50, V51, V52, V53, V54, V55) -> V49 end(E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case case V5 of {'Idris.Core.Value.MkEvalOpts', E5, E6, E7, E8, E9, E10, E11} -> (fun (V56, V57, V58, V59, V60, V61, V62) -> V60 end(E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Context':'dn--un--==_Eq_DefFlag'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Context':'dn--un--/=_Eq_DefFlag'(V65, V66)) end end}, {'Idris.Core.Context.TCInline'}, V10)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> fun (V67) -> ('case--case block in evalDef-4810'(V0, V1, V3, V14, V16, V17, V15, V13, V12, V11, V10, V8, V7, V6, V5, V4, V2, ('un--argsFromStack'(V0, V1, V14, V11)), V67)) end; 0 -> fun (V68) -> {'Idris.Prelude.Types.Right', (V12())} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.Builtin', E42, E43} -> (fun (V69, V70) -> ('un--evalOp'(V0, V1, V2, V69, V3, ('Idris.Idris2.Core.Primitives':'un--getOp'(V70, V3)), V11, V12)) end(E42, E43)); _ -> fun (V71) -> {'Idris.Prelude.Types.Right', (V12())} end end.
'un--evalConAlt'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case ('un--getCaseBound'(V0, V1, V11, V10, V6)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> ('un--evalTree'(V0, V1, V2, ('Idris.Idris2.Prelude.Types.List':'un--++'(V10, V3)), V4, V5, V13, V7, V8, V9, V12)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Normalise.GotStuck'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalClosure'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.MkClosure', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> ('un--eval'(V2, V5, V0, V1, V4, V7, V6, V8, [])) end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.MkNFClosure', E5} -> (fun (V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', V9} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--evalArg'(V0, V1, V2, V3) -> ('un--evalClosure'(V0, V1, V2, V3)).
'un--eval'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V9, V10, V11) -> ('un--evalLocal'(V0, V1, V2, V3, V5, V9, V10, V11, V8, V6)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V12, V13, V14) -> fun (V15) -> ('un--evalRef'(V0, V1, V2, V3, V5, 0, V12, V13, V14, V8, fun () -> {'Idris.Core.Value.NApp', V12, {'Idris.Core.Value.NRef', V13, V14}, V8} end, V15)) end end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V16, V17, V18, V19) -> ('un--evalMeta'(V0, V1, V2, V3, V5, V16, V17, V18, ('nested--6402-2131--in--un--closeArgs'(V0, V1, V4, V3, V19, V18, V17, V16, V8, V6, V5, V2, V19)), V8)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E10, E11, E12, E13} -> (fun (V20, V21, V22, V23) -> case V22 of {'Idris.Core.TT.Lam', E16, E17, E18, E19} -> (fun (V24, V25, V26, V27) -> case V8 of [E22 | E23] -> (fun (V28, V29) -> ('un--eval'(V0, V1, V2, V3, [V21 | V4], V5, {'Idris.Core.Value.::', ('Idris.Idris2.Builtin':'un--snd'(V28)), V6}, V23, V29)) end(E22, E23)); _ -> fun (V30) -> begin (V32 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V31) -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V31, [])) end, V22, V30))), case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V20, V21, V34, fun (V35) -> fun (V36) -> ('un--evalWithOpts'(V2, V3, [V21 | V4], V35, V1, V5, {'Idris.Core.Value.::', V36, V6}, V23, V8)) end end}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E16, E17, E18, E19)); {'Idris.Core.TT.Let', E24, E25, E26, E27} -> (fun (V37, V38, V39, V40) -> begin (V41 = {'Idris.Core.TT.Let', V37, V38, V39, V40}), case case case case V1 of {'Idris.Core.Value.MkEvalOpts', E44, E45, E46, E47, E48, E49, E50} -> (fun (V42, V43, V44, V45, V46, V47, V48) -> V42 end(E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 1; 0 -> case V1 of {'Idris.Core.Value.MkEvalOpts', E37, E38, E39, E40, E41, E42, E43} -> (fun (V49, V50, V51, V52, V53, V54, V55) -> V50 end(E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> case case V1 of {'Idris.Core.Value.MkEvalOpts', E30, E31, E32, E33, E34, E35, E36} -> (fun (V56, V57, V58, V59, V60, V61, V62) -> V60 end(E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> fun (V63) -> begin (V65 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V64) -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V64, [])) end, V41, V63))), case V65 of {'Idris.Prelude.Types.Left', E28} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V20, V21, V67, fun (V68) -> fun (V69) -> ('un--evalWithOpts'(V2, V3, [V21 | V4], V68, V1, V5, {'Idris.Core.Value.::', V69, V6}, V23, V8)) end end}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> ('un--eval'(V0, V1, V2, V3, [V21 | V4], V5, {'Idris.Core.Value.::', {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V39}, V6}, V23, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25, E26, E27)); _ -> fun (V70) -> begin (V72 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V71) -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V71, [])) end, V22, V70))), case V72 of {'Idris.Prelude.Types.Left', E14} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NBind', V20, V21, V74, fun (V75) -> fun (V76) -> ('un--evalWithOpts'(V2, V3, [V21 | V4], V75, V1, V5, {'Idris.Core.Value.::', V76, V6}, V23, V8)) end end}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E10, E11, E12, E13)); {'Idris.Core.TT.App', E51, E52, E53} -> (fun (V77, V78, V79) -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V78, [{'Idris.Builtin.MkPair', V77, {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V79}} | V8])) end(E51, E52, E53)); {'Idris.Core.TT.As', E54, E55, E56, E57} -> (fun (V80, V81, V82, V83) -> case case V1 of {'Idris.Core.Value.MkEvalOpts', E62, E63, E64, E65, E66, E67, E68} -> (fun (V84, V85, V86, V87, V88, V89, V90) -> V86 end(E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('un--eval'(V0, V1, V2, V3, V4, V5, V6, V83, V8)); 0 -> fun (V91) -> begin (V92 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V82, V8))(V91))), case V92 of {'Idris.Prelude.Types.Left', E58} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V94) -> begin (V95 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V83, V8))(V91))), case V95 of {'Idris.Prelude.Types.Left', E60} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V97) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NAs', V80, V81, V94, V97}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55, E56, E57)); {'Idris.Core.TT.TDelayed', E69, E70, E71} -> (fun (V98, V99, V100) -> fun (V101) -> begin (V102 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V100, V8))(V101))), case V102 of {'Idris.Prelude.Types.Left', E72} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V104) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDelayed', V98, V99, V104}} end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E69, E70, E71)); {'Idris.Core.TT.TDelay', E74, E75, E76, E77} -> (fun (V105, V106, V107, V108) -> fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NDelay', V105, V106, {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V107}, {'Idris.Core.Value.MkClosure', V4, V1, V6, V5, V108}}} end end(E74, E75, E76, E77)); {'Idris.Core.TT.TForce', E78, E79, E80} -> (fun (V110, V111, V112) -> fun (V113) -> begin (V114 = (('un--eval'(V0, V1, V2, V3, V4, V5, V6, V112, []))(V113))), case V114 of {'Idris.Prelude.Types.Left', E81} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V116) -> case V116 of {'Idris.Core.Value.NDelay', E83, E84, E85, E86} -> (fun (V117, V118, V119, V120) -> (('un--eval'(V0, V1, V2, V3, [{'Idris.Core.Name.UN', <<"fvar"/utf8>>} | V4], V5, {'Idris.Core.Value.::', V120, V6}, {'Idris.Core.TT.Local', V117, {'Idris.Prelude.Types.Nothing'}, 0}, V8))(V113)) end(E83, E84, E85, E86)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NForce', V110, V111, V116, V8}} end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E78, E79, E80)); {'Idris.Core.TT.PrimVal', E87, E88} -> (fun (V121, V122) -> fun (V123) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NPrimVal', V121, V122}} end end(E87, E88)); {'Idris.Core.TT.Erased', E89, E90} -> (fun (V124, V125) -> fun (V126) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NErased', V124, V125}} end end(E89, E90)); {'Idris.Core.TT.TType', E91} -> (fun (V127) -> fun (V128) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Value.NType', V127}} end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--etaContract'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Attempting to eta contract subterms of"/utf8>> end, V2, V3))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('un--normalise'(V0, V1, V7, ('Idris.Idris2.Core.Env':'un--mkEnv'({'Idris.Core.FC.EmptyFC'}, V1)), V2, V3))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Evaluated to"/utf8>> end, V13, V3))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V20 = (('Idris.Idris2.Core.Core':'un--mapTermM'(fun (V17) -> fun (V18) -> fun (V19) -> ('nested--12054-6961--in--un--act'(V0, V1, V2, V17, V18, V19)) end end end, V1, V2))(V3))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V1, V0, <<"eval.eta"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"Result of eta-contraction"/utf8>> end, V22, V3))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', V22} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--convert'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.dn--un--__mkConvert', E0, E1} -> (fun (V6, V7) -> fun (V8) -> ((((((V6(V1))(V2))(V3))(V4))(V5))(V8)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--convGen'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Core.Normalise.dn--un--__mkConvert', E0, E1} -> (fun (V6, V7) -> fun (V8) -> fun (V9) -> (((((((V7(V1))(V2))(V3))(V4))(V5))(V8))(V9)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--convBinders'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.Pi', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V8, V12)) of 1 -> fun (V15) -> {'Idris.Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V10, V14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V5)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)))) of 1 -> fun (V16) -> {'Idris.Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, ('Idris.Idris2.Core.TT':'un--binderType'(V5)), ('Idris.Idris2.Core.TT':'un--binderType'(V6)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Lam', E8, E9, E10, E11} -> (fun (V17, V18, V19, V20) -> case V6 of {'Idris.Core.TT.Lam', E12, E13, E14, E15} -> (fun (V21, V22, V23, V24) -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V18, V22)) of 1 -> fun (V25) -> {'Idris.Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V20, V24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14, E15)); _ -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V5)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)))) of 1 -> fun (V26) -> {'Idris.Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, ('Idris.Idris2.Core.TT':'un--binderType'(V5)), ('Idris.Idris2.Core.TT':'un--binderType'(V6)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11)); _ -> case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(('Idris.Idris2.Core.TT':'un--multiplicity'(V5)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V6)))) of 1 -> fun (V27) -> {'Idris.Prelude.Types.Right', 0} end; 0 -> ('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, ('Idris.Idris2.Core.TT':'un--binderType'(V5)), ('Idris.Idris2.Core.TT':'un--binderType'(V6)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--continueNF'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.NApp', E4, E5, E6} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Core.Value.NRef', E11, E12} -> (fun (V8, V9) -> fun (V10) -> ('un--evalRef'(V2, ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V0, V1, V3, 0, V5, V8, V9, V7, fun () -> V4 end, V10)) end end(E11, E12)); {'Idris.Core.Value.NMeta', E13, E14, E15} -> (fun (V11, V12, V13) -> ('un--evalMeta'(V2, ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V0, V1, V3, V5, V11, V12, V13, V7)) end(E13, E14, E15)); _ -> fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V2, V14))), case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> begin (V18 = ('dn--un--quote_Quote_NF'(V0, V1, V17, V3, V4, V14))), case V18 of {'Idris.Prelude.Types.Left', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V20) -> (('un--nf'(V0, V1, V2, V3, V20))(V14)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6)); {'Idris.Core.Value.NDCon', E16, E17, E18, E19, E20} -> (fun (V21, V22, V23, V24, V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', V4} end end(E16, E17, E18, E19, E20)); {'Idris.Core.Value.NTCon', E21, E22, E23, E24, E25} -> (fun (V27, V28, V29, V30, V31) -> fun (V32) -> {'Idris.Prelude.Types.Right', V4} end end(E21, E22, E23, E24, E25)); {'Idris.Core.Value.NPrimVal', E26, E27} -> (fun (V33, V34) -> fun (V35) -> {'Idris.Prelude.Types.Right', V4} end end(E26, E27)); {'Idris.Core.Value.NErased', E28, E29} -> (fun (V36, V37) -> fun (V38) -> {'Idris.Prelude.Types.Right', V4} end end(E28, E29)); {'Idris.Core.Value.NType', E30} -> (fun (V39) -> fun (V40) -> {'Idris.Prelude.Types.Right', V4} end end(E30)); _ -> fun (V41) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--clearDefs'(V2, V41))), case V42 of {'Idris.Prelude.Types.Left', E0} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V44) -> begin (V45 = ('dn--un--quote_Quote_NF'(V0, V1, V44, V3, V4, V41))), case V45 of {'Idris.Prelude.Types.Left', E2} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V47) -> (('un--nf'(V0, V1, V2, V3, V47))(V41)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--chkSameDefs'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V5, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V38 of {'Idris.Prelude.Types.Left', E28} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V40) -> case V40 of {'Idris.Prelude.Types.Just', E30} -> (fun (V41) -> case V41 of {'Idris.Core.Context.PMDef', E31, E32, E33, E34, E35} -> (fun (V42, V43, V44, V45, V46) -> begin (V75 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V6, case V3 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V47 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V75 of {'Idris.Prelude.Types.Left', E64} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V77) -> case V77 of {'Idris.Prelude.Types.Just', E66} -> (fun (V78) -> case V78 of {'Idris.Core.Context.PMDef', E67, E68, E69, E70, E71} -> (fun (V79, V80, V81, V82, V83) -> begin (V84 = (('un--getMatchingVars'(V0, V43, V80, V3, [], V44, V81))(V9))), case V84 of {'Idris.Prelude.Types.Left', E72} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V86) -> case V86 of {'Idris.Prelude.Types.Just', E74} -> (fun (V87) -> (('nested--13024-9135--in--un--convertMatches'(V1, V8, V7, V6, V5, V4, V3, V2, V0, V43, V80, V87))(V9)) end(E74)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67, E68, E69, E70, E71)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E66)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32, E33, E34, E35)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E30)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--chkConvHead'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Value.NLocal', E0, E1} -> (fun (V7, V8) -> fun (V9) -> case V6 of {'Idris.Core.Value.NLocal', E2, E3} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V8, V11))} end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1)); {'Idris.Core.Value.NRef', E4, E5} -> (fun (V12, V13) -> fun (V14) -> case V6 of {'Idris.Core.Value.NRef', E6, E7} -> (fun (V15, V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V16))} end(E6, E7)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E4, E5)); {'Idris.Core.Value.NMeta', E8, E9, E10} -> (fun (V17, V18, V19) -> case V6 of {'Idris.Core.Value.NMeta', E11, E12, E13} -> (fun (V20, V21, V22) -> fun (V23) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V18, V21)) of 1 -> ('un--allConv'(V0, V1, V2, V3, V4, V19, V22, V23)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', 0} end end end(E8, E9, E10)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--chkConvCaseBlock'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V6 of {'Idris.Core.Value.NRef', E0, E1} -> (fun (V11, V12) -> case V8 of {'Idris.Core.Value.NRef', E2, E3} -> (fun (V13, V14) -> begin (V43 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V4 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V15 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12, V10))), case V43 of {'Idris.Prelude.Types.Left', E32} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V45) -> case V45 of {'Idris.Core.Name.NS', E34, E35} -> (fun (V46, V47) -> case V47 of {'Idris.Core.Name.CaseBlock', E36, E37} -> (fun (V48, V49) -> begin (V78 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V4 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V50 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14, V10))), case V78 of {'Idris.Prelude.Types.Left', E66} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V80) -> case V80 of {'Idris.Core.Name.NS', E68, E69} -> (fun (V81, V82) -> case V82 of {'Idris.Core.Name.CaseBlock', E70, E71} -> (fun (V83, V84) -> begin (V85 = ('un--chkSameDefs'(V0, V1, V3, V4, V5, V12, V14, V7, V9, V10))), case V85 of {'Idris.Prelude.Types.Left', E72} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V87) -> case V87 of 0 -> begin (V116 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V12, case V4 of {'Idris.Core.Context.MkDefs', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> V88 end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V116 of {'Idris.Prelude.Types.Left', E102} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V118) -> case V118 of {'Idris.Prelude.Types.Just', E104} -> (fun (V119) -> begin (V148 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V14, case V4 of {'Idris.Core.Context.MkDefs', E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132} -> (fun (V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147) -> V120 end(E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V148 of {'Idris.Prelude.Types.Left', E133} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V150) -> case V150 of {'Idris.Prelude.Types.Just', E135} -> (fun (V151) -> case V119 of {'Idris.Core.Context.MkGlobalDef', E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156} -> (fun (V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172) -> case V169 of {'Idris.Core.Context.PMDef', E157, E158, E159, E160, E161} -> (fun (V173, V174, V175, V176, V177) -> case V151 of {'Idris.Core.Context.MkGlobalDef', E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182} -> (fun (V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198) -> case V195 of {'Idris.Core.Context.PMDef', E183, E184, E185, E186, E187} -> (fun (V199, V200, V201, V202, V203) -> case ('nested--13030-9621--in--un--findArgPos'(V1, V13, V11, V12, V14, V9, V7, V5, V4, V3, V2, V0, V175)) of {'Idris.Prelude.Types.Just', E188} -> (fun (V204) -> case ('nested--13030-9621--in--un--findArgPos'(V1, V13, V11, V12, V14, V9, V7, V5, V4, V3, V2, V0, V201)) of {'Idris.Prelude.Types.Just', E189} -> (fun (V205) -> case ('nested--13030-9622--in--un--getScrutinee'(V1, V13, V11, V12, V14, V9, V7, V5, V4, V3, V2, V0, V204, V7)) of {'Idris.Prelude.Types.Just', E190} -> (fun (V206) -> case ('nested--13030-9622--in--un--getScrutinee'(V1, V13, V11, V12, V14, V9, V7, V5, V4, V3, V2, V0, V205, V9)) of {'Idris.Prelude.Types.Just', E191} -> (fun (V207) -> begin (V212 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V208) -> case V208 of {'Idris.Prelude.Types.Left', E192} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E192)); {'Idris.Prelude.Types.Right', E193} -> (fun (V210) -> {'Idris.Prelude.Types.Right', 0} end(E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V211) -> ('dn--un--convGen_Convert_Closure'(V0, V1, V3, V4, V5, V206, V207, V211)) end, V10))), case V212 of {'Idris.Prelude.Types.Left', E194} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E194)); {'Idris.Prelude.Types.Right', E195} -> (fun (V214) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.FC':'dn--un--==_Eq_FC'(case V119 of {'Idris.Core.Context.MkGlobalDef', E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216} -> (fun (V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235) -> V215 end(E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V151 of {'Idris.Core.Context.MkGlobalDef', E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237} -> (fun (V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256) -> V236 end(E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E191)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E190)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E189)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E188)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E183, E184, E185, E186, E187)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E157, E158, E159, E160, E161)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E135)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E68, E69)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E34, E35)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--argsFromStack'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', {'Idris.Core.Value.Nil'}, V3}}; [E0 | E1] -> (fun (V4, V5) -> case V3 of [] -> {'Idris.Prelude.Types.Nothing'}; [E2 | E3] -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('un--argsFromStack'(V0, V1, V5, V7)), fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', {'Idris.Core.Value.::', ('Idris.Idris2.Builtin':'un--snd'(V6)), V9}, V10})) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--allConvNF'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> case V6 of [] -> {'Idris.Prelude.Types.Right', 1}; _ -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V8, V9) -> case V6 of [E2 | E3] -> (fun (V10, V11) -> begin (V12 = ('un--allConvNF'(V0, V1, V2, V3, V4, V9, V11, V7))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 1 -> (('dn--un--convGen_Convert_NF'(V0, V1, V2, V3, V4, V8, V10))(V7)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--allConv'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V8) -> ('un--evalClosure'(V0, V1, V3, V8)) end, V5, [], V7))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> ('un--evalClosure'(V0, V1, V3, V12)) end, V6, [], V7))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> case ('un--quickConv'(V11, V15)) of 1 -> ('un--allConvNF'(V0, V1, V2, V3, V4, V11, V15, V7)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
