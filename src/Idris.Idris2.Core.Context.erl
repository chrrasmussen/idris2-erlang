-module('Idris.Idris2.Core.Context').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--addTransform-16655'/6,
  'case--case block in setExternal-15931'/8,
  'case--case block in setUniqueSearch-15795'/8,
  'case--aliasName-11852'/4,
  'case--getSimilarNames-11471'/3,
  'case--commitCtxt-6583'/2,
  'case--lookupCtxtName-6426'/3,
  'case--lookupCtxtExact-5826'/4,
  'case--returnDef-5661'/3,
  'case--addAlias-5166'/5,
  'case--addPossible-5105'/4,
  'nested--22579-17955--in--un--visible'/3,
  'nested--12386-8597--in--un--trimNSpat'/7,
  'nested--15298-11373--in--un--showNames'/5,
  'nested--12387-8650--in--un--restoreNSpat'/7,
  'nested--12061-8442--in--un--resolvedNamesPat'/7,
  'nested--9699-6121--in--un--resn'/3,
  'nested--15170-11251--in--un--resetElab'/2,
  'nested--23895-19235--in--un--resetCtxt'/2,
  'nested--19069-14771--in--un--notHidden'/7,
  'nested--9699-6122--in--un--lookupPossibles'/4,
  'nested--16136-12141--in--un--isHole'/4,
  'nested--19069-14772--in--un--isDefault'/5,
  'nested--12600-8826--in--un--insertAll'/5,
  'nested--12599-8794--in--un--insertAll'/5,
  'nested--19752-15406--in--un--getPos'/7,
  'nested--21869-17287--in--un--getDir'/3,
  'nested--12060-8302--in--un--fullNamesPat'/7,
  'nested--15756-11792--in--un--findAlias'/3,
  'nested--19069-14773--in--un--direct'/5,
  'nested--10187-6553--in--un--commitStaged'/3,
  'dn--un--trimNS_StripNamespace_GlobalDef'/2,
  'dn--un--trimNS_StripNamespace_Def'/2,
  'dn--un--show_Show_SizeChange'/1,
  'dn--un--show_Show_SCCall'/1,
  'dn--un--show_Show_DefFlag'/1,
  'dn--un--show_Show_Def'/1,
  'dn--un--show_Show_Clause'/1,
  'dn--un--show_Show_BuiltinType'/1,
  'dn--un--showPrec_Show_SizeChange'/2,
  'dn--un--showPrec_Show_SCCall'/2,
  'dn--un--showPrec_Show_DefFlag'/2,
  'dn--un--showPrec_Show_Def'/2,
  'dn--un--showPrec_Show_Clause'/2,
  'dn--un--showPrec_Show_BuiltinType'/2,
  'dn--un--restoreNS_StripNamespace_GlobalDef'/2,
  'dn--un--restoreNS_StripNamespace_Def'/2,
  'dn--un--resolved_HasNames_Transform'/3,
  'dn--un--resolved_HasNames_Totality'/3,
  'dn--un--resolved_HasNames_Terminating'/3,
  'dn--un--resolved_HasNames_SCCall'/3,
  'dn--un--resolved_HasNames_Pat'/3,
  'dn--un--resolved_HasNames_PartialReason'/3,
  'dn--un--resolved_HasNames_Name'/3,
  'dn--un--resolved_HasNames_GlobalDef'/3,
  'dn--un--resolved_HasNames_Def'/3,
  'dn--un--resolved_HasNames_Covering'/3,
  'dn--un--resolved_HasNames_Clause'/3,
  'dn--un--resolved_HasNames_(Term $vars)'/3,
  'dn--un--resolved_HasNames_(NameMap $a)'/2,
  'dn--un--resolved_HasNames_(Maybe $a)'/4,
  'dn--un--resolved_HasNames_(CaseTree $vars)'/3,
  'dn--un--resolved_HasNames_(CaseAlt $vars)'/3,
  'dn--un--resolved_HasNames_((Env Term) $vars)'/3,
  'dn--un--full_HasNames_Transform'/3,
  'dn--un--full_HasNames_Totality'/3,
  'dn--un--full_HasNames_Terminating'/3,
  'dn--un--full_HasNames_SCCall'/3,
  'dn--un--full_HasNames_Pat'/3,
  'dn--un--full_HasNames_PartialReason'/3,
  'dn--un--full_HasNames_Name'/3,
  'dn--un--full_HasNames_GlobalDef'/3,
  'dn--un--full_HasNames_Def'/3,
  'dn--un--full_HasNames_Covering'/3,
  'dn--un--full_HasNames_Clause'/3,
  'dn--un--full_HasNames_(Term $vars)'/3,
  'dn--un--full_HasNames_(NameMap $a)'/2,
  'dn--un--full_HasNames_(Maybe $a)'/4,
  'dn--un--full_HasNames_(CaseTree $vars)'/3,
  'dn--un--full_HasNames_(CaseAlt $vars)'/3,
  'dn--un--full_HasNames_((Env Term) $vars)'/3,
  'dn--un--__Impl_StripNamespace_GlobalDef'/0,
  'dn--un--__Impl_StripNamespace_Def'/0,
  'dn--un--__Impl_Show_SizeChange'/0,
  'dn--un--__Impl_Show_SCCall'/0,
  'dn--un--__Impl_Show_DefFlag'/0,
  'dn--un--__Impl_Show_Def'/0,
  'dn--un--__Impl_Show_Clause'/0,
  'dn--un--__Impl_Show_BuiltinType'/0,
  'dn--un--__Impl_HasNames_Transform'/0,
  'dn--un--__Impl_HasNames_Totality'/0,
  'dn--un--__Impl_HasNames_Terminating'/0,
  'dn--un--__Impl_HasNames_SCCall'/0,
  'dn--un--__Impl_HasNames_Pat'/0,
  'dn--un--__Impl_HasNames_PartialReason'/0,
  'dn--un--__Impl_HasNames_Name'/0,
  'dn--un--__Impl_HasNames_GlobalDef'/0,
  'dn--un--__Impl_HasNames_Def'/0,
  'dn--un--__Impl_HasNames_Covering'/0,
  'dn--un--__Impl_HasNames_Clause'/0,
  'dn--un--__Impl_HasNames_(Term $vars)'/0,
  'dn--un--__Impl_HasNames_(Maybe $a)'/1,
  'dn--un--__Impl_HasNames_(CaseTree $vars)'/0,
  'dn--un--__Impl_HasNames_(CaseAlt $vars)'/0,
  'dn--un--__Impl_HasNames_((Env Term) $vars)'/0,
  'dn--un--__Impl_Eq_SizeChange'/0,
  'dn--un--__Impl_Eq_SCCall'/0,
  'dn--un--__Impl_Eq_DefFlag'/0,
  'dn--un--==_Eq_SizeChange'/2,
  'dn--un--==_Eq_SCCall'/2,
  'dn--un--==_Eq_DefFlag'/2,
  'dn--un--/=_Eq_SizeChange'/2,
  'dn--un--/=_Eq_SCCall'/2,
  'dn--un--/=_Eq_DefFlag'/2,
  'un--withLogLevel'/4,
  'un--withExtendedNS'/4,
  'un--withCtxt'/3,
  'un--visibleInAny'/3,
  'un--visibleIn'/3,
  'un--updateTy'/4,
  'un--updateDef'/4,
  'un--unsetFlag'/5,
  'un--undefinedName'/4,
  'un--toResolvedNames'/4,
  'un--toFullNames'/4,
  'un--sndName'/2,
  'un--setWorkingDir'/3,
  'un--setVisible'/3,
  'un--setVisibility'/5,
  'un--setUniqueSearch'/5,
  'un--setUnboundImplicits'/3,
  'un--setTotality'/5,
  'un--setTerminating'/5,
  'un--setSourceDir'/3,
  'un--setSizeChange'/5,
  'un--setSession'/3,
  'un--setRewrite'/5,
  'un--setPrefixRecordProjections'/3,
  'un--setPrefix'/3,
  'un--setPair'/6,
  'un--setPPrint'/3,
  'un--setOutputDir'/3,
  'un--setOpenHints'/3,
  'un--setNextEntry'/3,
  'un--setNestedNS'/3,
  'un--setNamedCompiled'/4,
  'un--setNameFlag'/5,
  'un--setNS'/3,
  'un--setNFThreshold'/3,
  'un--setMutWith'/5,
  'un--setLogTimings'/3,
  'un--setLinearCheck'/4,
  'un--setFromString'/3,
  'un--setFromInteger'/3,
  'un--setFromDouble'/3,
  'un--setFromChar'/3,
  'un--setFlag'/5,
  'un--setExternal'/5,
  'un--setExtension'/3,
  'un--setDetermining'/5,
  'un--setDetags'/5,
  'un--setDependsDir'/3,
  'un--setDefaultTotalityOption'/3,
  'un--setDebugElabCheck'/3,
  'un--setCtxt'/3,
  'un--setCovering'/5,
  'un--setCompiled'/4,
  'un--setCG'/3,
  'un--setBuildDir'/3,
  'un--setAutoImplicitLimit'/3,
  'un--setAmbigLimit'/3,
  'un--setAllPublic'/3,
  'un--returnDef'/3,
  'un--resolved'/3,
  'un--resolveName'/3,
  'un--resetFirstEntry'/2,
  'un--refersToRuntime'/1,
  'un--refersTo'/1,
  'un--reducibleInAny'/3,
  'un--reducibleIn'/3,
  'un--recordWarning'/3,
  'un--prettyName'/2,
  'un--noDeclaration'/4,
  'un--newEntry'/2,
  'un--newDef'/7,
  'un--newAlias'/4,
  'un--namesResolvedAs'/1,
  'un--maybeMisspelling'/4,
  'un--lookupTyName'/3,
  'un--lookupTyExact'/3,
  'un--lookupNameBy'/4,
  'un--lookupExactBy'/4,
  'un--lookupDefTyExact'/3,
  'un--lookupDefName'/3,
  'un--lookupDefExact'/3,
  'un--lookupCtxtName'/2,
  'un--lookupCtxtExactI'/2,
  'un--lookupCtxtExact'/2,
  'un--lookupContextEntry'/2,
  'un--lazyActive'/3,
  'un--isVisible'/3,
  'un--isUnboundImplicits'/2,
  'un--isPrefixRecordProjections'/2,
  'un--isPairType'/3,
  'un--isLazyActive'/2,
  'un--isHidden'/2,
  'un--isExtension'/2,
  'un--isEqualTy'/3,
  'un--isAllPublic'/2,
  'un--initSize'/0,
  'un--initHash'/2,
  'un--initDefs'/1,
  'un--initCtxtS'/2,
  'un--initCtxt'/1,
  'un--initBuiltinTransforms'/0,
  'un--inCurrentNS'/3,
  'un--holeInit'/1,
  'un--hideName'/2,
  'un--hide'/4,
  'un--hasFlag'/5,
  'un--getWorkingDir'/1,
  'un--getVisible'/2,
  'un--getVisibility'/4,
  'un--getUserHoles'/2,
  'un--getTotality'/4,
  'un--getSizeChange'/4,
  'un--getSimilarNames'/2,
  'un--getSession'/2,
  'un--getSearchData'/5,
  'un--getRewrite'/2,
  'un--getResolvedAs'/1,
  'un--getPrimitiveNames'/2,
  'un--getPrimNames'/2,
  'un--getPosition'/2,
  'un--getPPrint'/2,
  'un--getNextTypeTag'/2,
  'un--getNextEntry'/2,
  'un--getNestedNS'/2,
  'un--getNameID'/2,
  'un--getNS'/2,
  'un--getImported'/2,
  'un--getFullName'/3,
  'un--getFnName'/1,
  'un--getFieldNames'/2,
  'un--getDirs'/2,
  'un--getDirectives'/3,
  'un--getDefaultTotalityOption'/2,
  'un--getContent'/1,
  'un--getAutoImplicitLimit'/2,
  'un--getAmbigLimit'/2,
  'un--full'/3,
  'un--fstName'/2,
  'un--fromStringName'/2,
  'un--fromIntegerName'/2,
  'un--fromDoubleName'/2,
  'un--fromCharName'/2,
  'un--findSetTotal'/1,
  'un--extendNS'/3,
  'un--dumpStaging'/2,
  'un--dropOpenHint'/3,
  'un--dropMutData'/3,
  'un--depth'/2,
  'un--defaultPI'/0,
  'un--defaultFlags'/0,
  'un--decode'/5,
  'un--commitCtxt'/1,
  'un--commit'/2,
  'un--clearUserHole'/3,
  'un--clearSavedHints'/2,
  'un--clearDefs'/2,
  'un--clearCtxt'/2,
  'un--checkUnambig'/4,
  'un--canonicalName'/4,
  'un--branchCtxt'/2,
  'un--branch'/2,
  'un--allNames'/2,
  'un--aliasName'/3,
  'un--addUserHole'/3,
  'un--addTransform'/4,
  'un--addToSave'/3,
  'un--addPossible'/3,
  'un--addPkg'/3,
  'un--addPackageDir'/3,
  'un--addOpenHint'/3,
  'un--addNameDirective'/5,
  'un--addName'/3,
  'un--addMutData'/3,
  'un--addLogLevel'/3,
  'un--addLocalHint'/3,
  'un--addLibDir'/3,
  'un--addImported'/3,
  'un--addHintFor'/7,
  'un--addHashWithNames'/5,
  'un--addHash'/4,
  'un--addGlobalHint'/4,
  'un--addExtraDir'/3,
  'un--addEntry'/4,
  'un--addDirective'/4,
  'un--addDef'/4,
  'un--addDataDir'/3,
  'un--addCtxt'/4,
  'un--addContextEntry'/5,
  'un--addContextAlias'/4,
  'un--addBuiltin'/7,
  'un--addAlias'/4,
  'un--Grow'/0
]).
'case--addTransform-16655'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V13 = ('un--toResolvedNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V6, V5))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> begin (V22 = ('un--toResolvedNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--full_HasNames_Transform'(V16, V17, V18)) end end end, fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--resolved_HasNames_Transform'(V19, V20, V21)) end end end}, V0, V5))), case V22 of {'Idris.Prelude.Types.Left', E3} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V24) -> begin (V31 = ('un--toFullNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--full_HasNames_Name'(V25, V26, V27)) end end end, fun (V28) -> fun (V29) -> fun (V30) -> ('dn--un--resolved_HasNames_Name'(V28, V29, V30)) end end end}, V6, V5))), case V31 of {'Idris.Prelude.Types.Left', E5} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V33) -> begin (V40 = ('un--toFullNames'(V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V34) -> fun (V35) -> fun (V36) -> ('dn--un--full_HasNames_Transform'(V34, V35, V36)) end end end, fun (V37) -> fun (V38) -> fun (V39) -> ('dn--un--resolved_HasNames_Transform'(V37, V38, V39)) end end end}, V0, V5))), case V40 of {'Idris.Prelude.Types.Left', E7} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V42) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V15, case V3 of {'Idris.Core.Context.MkDefs', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V56 end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V99 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> {'Idris.Core.Context.MkDefs', V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, [V24 | []], V84)), [{'Idris.Builtin.MkPair', V33, V42} | V85], V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98} end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V99} end end()); {'Idris.Prelude.Types.Just', E37} -> (fun (V100) -> begin (V129 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128) -> {'Idris.Core.Context.MkDefs', V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, [V24 | V100], V114)), [{'Idris.Builtin.MkPair', V33, V42} | V115], V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V129} end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, <<"LHS of a transformation must be a function application"/utf8>>}, V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setExternal-15931'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V18 = case V12 of {'Idris.Core.Context.MkTypeFlags', E29, E30} -> (fun (V16, V17) -> {'Idris.Core.Context.MkTypeFlags', V16, V0} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V19) -> ('un--updateDef'(V3, V1, fun (V20) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end, V19)) end end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V21)) end end.
'case--case block in setUniqueSearch-15795'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V18 = case V12 of {'Idris.Core.Context.MkTypeFlags', E29, E30} -> (fun (V16, V17) -> {'Idris.Core.Context.MkTypeFlags', V0, V17} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V19) -> ('un--updateDef'(V3, V1, fun (V20) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end, V19)) end end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V21)) end end.
'case--aliasName-11852'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V4, case V2 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V5 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V36 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E1} -> (fun (V44) -> ('nested--15756-11792--in--un--findAlias'(V0, V1, V44)) end(E1)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V45) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V46) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getSimilarNames-11471'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), (1 + 0))) of 1 -> fun (V5) -> {'Idris.Prelude.Types.Right', []} end; 0 -> begin (V6 = ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'((1 + 0), ('Idris.Idris2.Data.Nat':'un--divNat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), (1 + (1 + (1 + 0)))))))), begin (V56 = fun (V7) -> fun (V8) -> case ('Idris.Idris2.Core.Name':'un--userNameRoot'(V7)) of {'Idris.Prelude.Types.Just', E1} -> (fun (V9) -> begin (V37 = (('Idris.Idris2.Libraries.Text.Distance.Levenshtein':'un--compute'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V4, V9))(V8))), ('Idris.Idris2.Prelude.Interfaces':'un--<$'(fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V40, V41)) end end end end, V37, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V44, V45)) end end end end, fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V47)) end end, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V50, V51)) end end end end}, fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V54, V55)) end end end}, ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V37, V6)))))) end end(E1)); _ -> {'Idris.Prelude.Types.Nothing'} end end end), fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E2} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V61) -> begin (V127 = begin (V126 = (('Idris.Idris2.Libraries.Data.NameMap':'un--mapMaybeM'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V64, V65, V66)) end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> V68 end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), begin (V76 = (V73(V74))), (V75(V76)) end end end end end end end}, fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> begin (V82 = (V79(V81))), ((V80(V82))(V81)) end end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> begin (V86 = (V84(V85))), (V86(V85)) end end end end}, V56, case V61 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114) -> case V87 of {'Idris.Core.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V117 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V57))), {'Idris.Prelude.Types.Right', V126} end), case V127 of {'Idris.Prelude.Types.Left', E43} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V129) -> begin (V132 = ('Idris.Idris2.Data.List':'un--sortBy'(fun (V130) -> fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_Nat'(('Idris.Idris2.Builtin':'un--snd'(V130)), ('Idris.Idris2.Builtin':'un--snd'(V131)))) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V129))))), begin (V134 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V133) -> ('nested--15298-11373--in--un--showNames'(V0, V1, V0, V4, ('Idris.Idris2.Builtin':'un--fst'(V133)))) end, V132))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V135, V136)) end end, fun (V137) -> fun (V138) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V137, V138)) end end}, V134))} end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--commitCtxt-6583'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', V0} end; _ -> begin (V3 = (V1 - 1)), case V3 of 0 -> begin (V15 = case V0 of {'Idris.Core.Context.MkContext', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V8 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V15))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E22} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V20) -> begin (V33 = begin (V32 = (('nested--10187-6553--in--un--commitStaged'(V0, ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'(case V0 of {'Idris.Core.Context.MkContext', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V27 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V20))(V16))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E35} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V35) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkContext', V36, V37, V38, V39, V40, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), V43, V44, V45, V46} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V47) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.MkContext', V48, V49, V50, V51, V52, V3, V54, V55, V56, V57, V58} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end end.
'case--lookupCtxtName-6426'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> begin (V4 = (('un--lookupCtxtExactI'(V1, V0))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V8, V9}} | []]} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V10) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V10, case V0 of {'Idris.Core.Context.MkContext', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V14 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V22) -> ('nested--9699-6122--in--un--lookupPossibles'(V0, V1, [], V22)) end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExact-5826'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = ('un--decode'(V1, V0, 1, V4, V3))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> case ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V17 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V7)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V20, V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V21}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V34 = begin (V33 = ('erlang':'get'(case V1 of {'Idris.Core.Context.MkContext', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V26 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E28} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V36) -> begin (V65 = begin (V64 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> V43 end end end, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), begin (V51 = (V48(V49))), (V50(V51)) end end end end end end end}, fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V54(V56))), ((V55(V57))(V56)) end end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V59(V60))), (V61(V60)) end end end end}, fun (V62) -> fun (V63) -> V63 end end}, V36, V0))(V3))), {'Idris.Prelude.Types.Right', V64} end), case V65 of {'Idris.Prelude.Types.Left', E30} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V67) -> case V67 of {'Idris.Prelude.Types.Just', E32} -> (fun (V68) -> begin (V69 = ('un--decode'(V1, V0, 1, V68, V3))), case V69 of {'Idris.Prelude.Types.Left', E33} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V71) -> case ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V81 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V71)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E35} -> (fun (V83) -> case V83 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V84, V85) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V85}} end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--returnDef-5661'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> case case V3 of {'Idris.Core.Context.MkPMDefInfo', E5, E6} -> (fun (V8, V9) -> V9 end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--addAlias-5166'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V5, V0)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V5, [{'Idris.Core.Context.Alias', V3, V2, V1} | []], V0)) end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V6) -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V5, [{'Idris.Core.Context.Alias', V3, V2, V1} | V6], V0)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addPossible-5105'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(V4, V0)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V4, [{'Idris.Core.Context.Direct', V2, V1} | []], V0)) end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V5) -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'(V4, [{'Idris.Core.Context.Direct', V2, V1} | V5], V0)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--22579-17955--in--un--visible'(V0, V1, V2) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V2, V0)).
'nested--12386-8597--in--un--trimNSpat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V5, V11)), ('Idris.Idris2.Core.TT':'dn--un--trimNS_StripNamespace_(Term $vars)'(V5, V12))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15298-11373--in--un--showNames'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V4))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, V5)) of 1 -> begin (V6 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))), case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, V6)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V6)) end end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V5)) end end.
'nested--12387-8650--in--un--restoreNSpat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V5, V11)), ('Idris.Idris2.Core.TT':'dn--un--restoreNS_StripNamespace_(Term $vars)'(V5, V12))}}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12061-8442--in--un--resolvedNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> fun (V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> begin (V14 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V5, V10, V9))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = ('dn--un--resolved_HasNames_(Term $vars)'(V5, V12, V9))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = ('dn--un--resolved_HasNames_(Term $vars)'(V5, V13, V9))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V19, V22}}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9699-6121--in--un--resn'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> V5 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15170-11251--in--un--resetElab'(V0, V1) -> case V1 of {'Idris.Core.Options.MkOptions', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Core.Options.MkOptions', V2, V3, V4, ('Idris.Idris2.Core.Options':'un--defaultElab'()), V6, V7, V8, V9, V10} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--23895-19235--in--un--resetCtxt'(V0, V1) -> begin (V49 = case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V6 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V39 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V51) -> case V51 of {'Idris.Prelude.Types.Left', E47} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V53) -> {'Idris.Prelude.Types.Right', 0} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V54) -> begin (V82 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, V49))(V54))), {'Idris.Prelude.Types.Right', V82} end end, V50)) end end.
'nested--19069-14771--in--un--notHidden'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> begin (V15 = ('un--toFullNames'(V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_Name'(V9, V10, V11)) end end end, fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--resolved_HasNames_Name'(V12, V13, V14)) end end end}, V7, V6))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Right', case ('un--isHidden'(V17, V5)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9699-6122--in--un--lookupPossibles'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'(V2))} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Context.Direct', E2, E3} -> (fun (V7, V8) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V7, case V0 of {'Idris.Core.Context.MkContext', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V19 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> begin (V21 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V8}, V0))(V20))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> case V23 of {'Idris.Prelude.Types.Just', E6} -> (fun (V24) -> case case ('Idris.Idris2.Core.Name':'un--matches'(V1, V7)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V27, V28)) end end}, V8, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V29) -> ('nested--9699-6121--in--un--resn'(V0, V1, V29)) end, V2)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> (('nested--9699-6122--in--un--lookupPossibles'(V0, V1, [{'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V8, V24}} | V2], V6))(V20)); 0 -> (('nested--9699-6122--in--un--lookupPossibles'(V0, V1, V2, V6))(V20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--9699-6122--in--un--lookupPossibles'(V0, V1, V2, V6))(V20)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('nested--9699-6122--in--un--lookupPossibles'(V0, V1, V2, V6)) end end(E2, E3)); {'Idris.Core.Context.Alias', E18, E19, E20} -> (fun (V30, V31, V32) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V31, case V0 of {'Idris.Core.Context.MkContext', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V43 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V44) -> begin (V45 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V32}, V0))(V44))), case V45 of {'Idris.Prelude.Types.Left', E21} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Just', E23} -> (fun (V48) -> case case ('Idris.Idris2.Core.Name':'un--matches'(V1, V30)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V49, V50)) end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V51, V52)) end end}, V32, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V53) -> ('nested--9699-6121--in--un--resn'(V0, V1, V53)) end, V2)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> (('nested--9699-6122--in--un--lookupPossibles'(V0, V1, [{'Idris.Builtin.MkPair', V31, {'Idris.Builtin.MkPair', V32, V48}} | V2], V6))(V44)); 0 -> (('nested--9699-6122--in--un--lookupPossibles'(V0, V1, V2, V6))(V44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--9699-6122--in--un--lookupPossibles'(V0, V1, V2, V6))(V44)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('nested--9699-6122--in--un--lookupPossibles'(V0, V1, V2, V6)) end end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--16136-12141--in--un--isHole'(V0, V1, V2, V3) -> begin (V32 = (('un--lookupCtxtExact'(V2, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V32 of {'Idris.Prelude.Types.Left', E28} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V34) -> case V34 of {'Idris.Prelude.Types.Just', E30} -> (fun (V35) -> case V35 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> case V53 of {'Idris.Core.Context.None'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); {'Idris.Core.Context.Hole', E52, E53} -> (fun (V57, V58) -> {'Idris.Prelude.Types.Right', 1} end(E52, E53)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--19069-14772--in--un--isDefault'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'(V4)).
'nested--12600-8826--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Right', V2}; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> begin (V9 = ('dn--un--resolved_HasNames_Name'(V1, V7, V4))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> ('nested--12600-8826--in--un--insertAll'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, V8, V2)), V6, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12599-8794--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Right', V2}; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> begin (V9 = ('dn--un--full_HasNames_Name'(V1, V7, V4))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> ('nested--12599-8794--in--un--insertAll'(V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, V8, V2)), V6, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19752-15406--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V17, V18)) end end}, V8, V5)) of 1 -> fun (V19) -> begin (V21 = (('nested--19752-15406--in--un--getPos'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), V4)), ('Idris.Idris2.Data.List':'un--filter'(fun (V20) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V8)) end, V5)), V10))(V19))), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Right', [V4 | V23]} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> ('nested--19752-15406--in--un--getPos'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), V4)), V5, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> fun (V24) -> case V5 of [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown determining arguments: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V25)) end, V5))))))}, V24)) end end end end(E0, E1, E2, E3)); _ -> fun (V26) -> case V5 of [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown determining arguments: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V27) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V27)) end, V5))))))}, V26)) end end end.
'nested--21869-17287--in--un--getDir'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> case ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V0, V5)) of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V6}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12060-8302--in--un--fullNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> fun (V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> begin (V14 = ('dn--un--full_HasNames_((Env Term) $vars)'(V5, V10, V9))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = ('dn--un--full_HasNames_(Term $vars)'(V5, V12, V9))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = ('dn--un--full_HasNames_(Term $vars)'(V5, V13, V9))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V19, V22}}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15756-11792--in--un--findAlias'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', V0} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Core.Context.Alias', E2, E3, E4} -> (fun (V6, V7, V8) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V0)) of 1 -> fun (V9) -> {'Idris.Prelude.Types.Right', V6} end; 0 -> ('nested--15756-11792--in--un--findAlias'(V0, V1, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('nested--15756-11792--in--un--findAlias'(V0, V1, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19069-14773--in--un--direct'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'(V4)).
'nested--10187-6553--in--un--commitStaged'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> 0 end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, ('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V2, V6, V7)), fun () -> ('nested--10187-6553--in--un--commitStaged'(V0, V5, V2)) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--trimNS_StripNamespace_GlobalDef'(V0, V1) -> case V1 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Core.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('dn--un--trimNS_StripNamespace_Def'(V0, V19)), V20, V21, V22} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--trimNS_StripNamespace_Def'(V0, V1) -> case V1 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Core.Context.PMDef', V2, V3, ('Idris.Idris2.Core.CaseTree':'dn--un--trimNS_StripNamespace_(CaseTree $vars)'(V0, V4)), V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('nested--12386-8597--in--un--trimNSpat'(V6, V3, V5, V4, V2, V0, V7)) end, V6))} end(E0, E1, E2, E3, E4)); _ -> V1 end.
'dn--un--show_Show_SizeChange'(V0) -> case V0 of 0 -> <<"Smaller"/utf8>>; 1 -> <<"Same"/utf8>>; 2 -> <<"Unknown"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_SCCall'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V6, V7)) end end}, {'Idris.Prelude.Show.MkShow', fun (V8) -> ('dn--un--show_Show_SizeChange'(V8)) end, fun (V9) -> fun (V10) -> ('dn--un--showPrec_Show_SizeChange'(V9, V10)) end end}}, V4)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V14, V15)) end end}, {'Idris.Prelude.Show.MkShow', fun (V16) -> ('dn--un--show_Show_SizeChange'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--showPrec_Show_SizeChange'(V17, V18)) end end}}, V11, V12)) end end}, V3)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V23, V24)) end end}, {'Idris.Prelude.Show.MkShow', fun (V25) -> ('dn--un--show_Show_SizeChange'(V25)) end, fun (V26) -> fun (V27) -> ('dn--un--showPrec_Show_SizeChange'(V26, V27)) end end}}, V21)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V31, V32)) end end}, {'Idris.Prelude.Show.MkShow', fun (V33) -> ('dn--un--show_Show_SizeChange'(V33)) end, fun (V34) -> fun (V35) -> ('dn--un--showPrec_Show_SizeChange'(V34, V35)) end end}}, V28, V29)) end end}, V19, V20)) end end}, case V0 of {'Idris.Core.Context.MkSCCall', E2, E3} -> (fun (V36, V37) -> V37 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'dn--un--show_Show_DefFlag'(V0) -> case V0 of {'Idris.Core.Context.Inline'} -> (fun () -> <<"inline"/utf8>> end()); {'Idris.Core.Context.Invertible'} -> (fun () -> <<"invertible"/utf8>> end()); {'Idris.Core.Context.Overloadable'} -> (fun () -> <<"overloadable"/utf8>> end()); {'Idris.Core.Context.TCInline'} -> (fun () -> <<"tcinline"/utf8>> end()); {'Idris.Core.Context.SetTotal', E0} -> (fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V1)) end(E0)); {'Idris.Core.Context.BlockedHint'} -> (fun () -> <<"blockedhint"/utf8>> end()); {'Idris.Core.Context.Macro'} -> (fun () -> <<"macro"/utf8>> end()); {'Idris.Core.Context.PartialEval', E1} -> (fun (V2) -> <<"partialeval"/utf8>> end(E1)); {'Idris.Core.Context.AllGuarded'} -> (fun () -> <<"allguarded"/utf8>> end()); {'Idris.Core.Context.ConType', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"contype "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_ConInfo'(V3)))) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Def'(V0) -> case V0 of {'Idris.Core.Context.None'} -> (fun () -> <<"undefined"/utf8>> end()); {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V7, V8)) end end}, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<";\x{a}Compile time tree: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Run time tree: "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V2, V4)))))))))) end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"DataCon "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V10)), ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> <<""/utf8>> end, fun () -> fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (newtype by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Bool'(V14, V15)) end end}, {'Idris.Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V17, V18)) end end}}, V12)), <<")"/utf8>>)))) end end, V11)))))))))) end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TyCon "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" params: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V28, V29)) end end}, V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" constructors: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V31, V32)) end end}, V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" mutual with: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V34, V35)) end end}, V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" detaggable by: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V38, V39)) end end}, V36)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V43, V44)) end end}, V40, V41)) end end}, V26)))))))))))))))))))))))) end(E8, E9, E10, E11, E12, E13, E14, E15)); {'Idris.Core.Context.ExternDef', E16} -> (fun (V45) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<external def with arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V45)), <<">"/utf8>>)))) end(E16)); {'Idris.Core.Context.ForeignDef', E17, E18} -> (fun (V46, V47) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<foreign def with arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V49, V50)) end end}, V47)), <<">"/utf8>>)))))))) end(E17, E18)); {'Idris.Core.Context.Builtin', E19, E20} -> (fun (V51, V52) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<builtin with arith "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V51)), <<">"/utf8>>)))) end(E19, E20)); {'Idris.Core.Context.Hole', E21, E22} -> (fun (V53, V54) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Hole"/utf8>>, case case V54 of {'Idris.Core.Context.MkHoleFlags', E23, E24} -> (fun (V55, V56) -> V55 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> <<" [impl]"/utf8>>; 0 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E21, E22)); {'Idris.Core.Context.BySearch', E25, E26, E27} -> (fun (V57, V58, V59) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59)))) end(E25, E26, E27)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V60, V61, V62) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Guess "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V60)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" when "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V64, V65)) end end}, V62)))))))) end(E28, E29, E30)); {'Idris.Core.Context.ImpBind'} -> (fun () -> <<"Bound name"/utf8>> end()); {'Idris.Core.Context.Delayed'} -> (fun () -> <<"Delayed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Clause'(V0) -> case V0 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V6, V7)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V4)))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_BuiltinType'(V0) -> case V0 of 0 -> <<"Natural"/utf8>>; 1 -> <<"NaturalToInteger"/utf8>>; 2 -> <<"IntegerToNatural"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_SizeChange'(V0, V1) -> ('dn--un--show_Show_SizeChange'(V1)).
'dn--un--showPrec_Show_SCCall'(V0, V1) -> ('dn--un--show_Show_SCCall'(V1)).
'dn--un--showPrec_Show_DefFlag'(V0, V1) -> ('dn--un--show_Show_DefFlag'(V1)).
'dn--un--showPrec_Show_Def'(V0, V1) -> ('dn--un--show_Show_Def'(V1)).
'dn--un--showPrec_Show_Clause'(V0, V1) -> ('dn--un--show_Show_Clause'(V1)).
'dn--un--showPrec_Show_BuiltinType'(V0, V1) -> ('dn--un--show_Show_BuiltinType'(V1)).
'dn--un--restoreNS_StripNamespace_GlobalDef'(V0, V1) -> case V1 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Core.Context.MkGlobalDef', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, ('dn--un--restoreNS_StripNamespace_Def'(V0, V19)), V20, V21, V22} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--restoreNS_StripNamespace_Def'(V0, V1) -> case V1 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Core.Context.PMDef', V2, V3, ('Idris.Idris2.Core.CaseTree':'dn--un--restoreNS_StripNamespace_(CaseTree $vars)'(V0, V4)), V5, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> ('nested--12387-8650--in--un--restoreNSpat'(V6, V3, V5, V4, V2, V0, V7)) end, V6))} end(E0, E1, E2, E3, E4)); _ -> V1 end.
'dn--un--resolved_HasNames_Transform'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('dn--un--resolved_HasNames_Name'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V5, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V6, V2))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V7, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V3, V10, V13, V16, V19}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Totality'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('dn--un--resolved_HasNames_Terminating'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--resolved_HasNames_Covering'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Terminating'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V3) -> begin (V4 = ('dn--un--resolved_HasNames_PartialReason'(V0, V3, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--resolved_HasNames_SCCall'(V0, V1, V2) -> begin (V5 = ('dn--un--resolved_HasNames_Name'(V0, case V1 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.Context.MkSCCall', V7, V9} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_Pat'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Core.CaseTree.PAs', V9, V10, V11} end end end} end, fun (V12) -> {'Idris.Prelude.Types.Right', V3} end, V7)) end, fun (V13) -> ('dn--un--resolved_HasNames_Name'(V0, V4, V13)) end, V6)) end, fun (V14) -> ('dn--un--resolved_HasNames_Pat'(V0, V5, V14)) end, V2)) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V15, V16, V17, V18, V19) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V23) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V24) -> {'Idris.Prelude.Types.Right', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> {'Idris.Core.CaseTree.PCon', V25, V26, V27, V28, V29} end end end end end} end, fun (V30) -> {'Idris.Prelude.Types.Right', V15} end, V23)) end, fun (V31) -> ('dn--un--resolved_HasNames_Name'(V0, V16, V31)) end, V22)) end, fun (V32) -> {'Idris.Prelude.Types.Right', V17} end, V21)) end, fun (V33) -> {'Idris.Prelude.Types.Right', V18} end, V20)) end, fun (V34) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> fun (V36) -> ('dn--un--resolved_HasNames_Pat'(V0, V35, V36)) end end, V19, [], V34)) end, V2)) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V37, V38, V39, V40) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V41) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V42) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V43) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V44) -> {'Idris.Prelude.Types.Right', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> {'Idris.Core.CaseTree.PTyCon', V45, V46, V47, V48} end end end end} end, fun (V49) -> {'Idris.Prelude.Types.Right', V37} end, V43)) end, fun (V50) -> ('dn--un--resolved_HasNames_Name'(V0, V38, V50)) end, V42)) end, fun (V51) -> {'Idris.Prelude.Types.Right', V39} end, V41)) end, fun (V52) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> fun (V54) -> ('dn--un--resolved_HasNames_Pat'(V0, V53, V54)) end end, V40, [], V52)) end, V2)) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V55, V56) -> {'Idris.Prelude.Types.Right', V1} end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V57, V58, V59, V60) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V61) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V62) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V63) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V64) -> {'Idris.Prelude.Types.Right', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> {'Idris.Core.CaseTree.PArrow', V65, V66, V67, V68} end end end end} end, fun (V69) -> {'Idris.Prelude.Types.Right', V57} end, V63)) end, fun (V70) -> ('dn--un--resolved_HasNames_Name'(V0, V58, V70)) end, V62)) end, fun (V71) -> ('dn--un--resolved_HasNames_Pat'(V0, V59, V71)) end, V61)) end, fun (V72) -> ('dn--un--resolved_HasNames_Pat'(V0, V60, V72)) end, V2)) end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V73, V74, V75, V76) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V77) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V78) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V79) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V80) -> {'Idris.Prelude.Types.Right', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> {'Idris.Core.CaseTree.PDelay', V81, V82, V83, V84} end end end end} end, fun (V85) -> {'Idris.Prelude.Types.Right', V73} end, V79)) end, fun (V86) -> {'Idris.Prelude.Types.Right', V74} end, V78)) end, fun (V87) -> ('dn--un--resolved_HasNames_Pat'(V0, V75, V87)) end, V77)) end, fun (V88) -> ('dn--un--resolved_HasNames_Pat'(V0, V76, V88)) end, V2)) end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V89, V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V91) -> case V91 of {'Idris.Prelude.Types.Left', E24} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V89, V93}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V94) -> ('dn--un--resolved_HasNames_Name'(V0, V90, V94)) end, V2)) end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E26, E27} -> (fun (V95, V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E28} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V95, V99}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V100) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V96, V100)) end, V2)) end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_PartialReason'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}} end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Name'(V0, V4, V5)) end end, V3, [], V2))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--resolved_HasNames_Name'(V0, V10, V11)) end end, V9, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Name'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V3}} end(E1)); _ -> case ('un--getNameID'(V1, V0)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V4}} end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_GlobalDef'(V0, V1, V2) -> begin (V24 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V24 of {'Idris.Prelude.Types.Left', E21} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V26) -> begin (V48 = ('dn--un--resolved_HasNames_Def'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V44 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V48 of {'Idris.Prelude.Types.Left', E44} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V50) -> begin (V72 = ('dn--un--resolved_HasNames_Totality'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V61 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V72 of {'Idris.Prelude.Types.Left', E67} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V74) -> begin (V100 = ('dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V75) -> fun (V76) -> ('dn--un--full_HasNames_(NameMap $a)'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V77, V78)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V91 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V100 of {'Idris.Prelude.Types.Left', E90} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V102) -> begin (V128 = ('dn--un--resolved_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('dn--un--full_HasNames_(NameMap $a)'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V105, V106)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V120 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V128 of {'Idris.Prelude.Types.Left', E113} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V130) -> begin (V154 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V131) -> fun (V132) -> ('dn--un--resolved_HasNames_SCCall'(V0, V131, V132)) end end, case V1 of {'Idris.Core.Context.MkGlobalDef', E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V153 end(E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V2))), case V154 of {'Idris.Prelude.Types.Left', E136} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V156) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkGlobalDef', E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177) -> {'Idris.Core.Context.MkGlobalDef', V157, V158, V26, V160, V161, V162, V163, V164, V165, V166, V74, V168, V102, V130, V171, V172, V173, V50, V175, V176, V156} end(E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_Def'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V5, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V6, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('nested--12061-8442--in--un--resolvedNamesPat'(V7, V4, V6, V5, V3, V0, V14)) end, V7, [], V2))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.PMDef', V3, V4, V10, V13, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('dn--un--resolved_HasNames_Name'(V0, V26, V27)) end end, V23, [], V2))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V31) -> fun (V32) -> ('dn--un--resolved_HasNames_Name'(V0, V31, V32)) end end, V24, [], V2))), case V33 of {'Idris.Prelude.Types.Left', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.TCon', V18, V19, V20, V21, V22, V30, V35, V25}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13, E14, E15, E16, E17, E18)); {'Idris.Core.Context.BySearch', E23, E24, E25} -> (fun (V36, V37, V38) -> begin (V39 = ('dn--un--resolved_HasNames_Name'(V0, V38, V2))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.BySearch', V36, V37, V41}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24, E25)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V42, V43, V44) -> begin (V45 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V42, V2))), case V45 of {'Idris.Prelude.Types.Left', E31} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Guess', V47, V43, V44}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29, E30)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--resolved_HasNames_Covering'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V4, V5)) end end, V3, [], V2))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--resolved_HasNames_Name'(V0, V10, V11)) end end, V9, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Clause'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> fun (V11) -> fun (V12) -> {'Idris.Core.Context.MkClause', V3, V10, V11, V12} end end end} end, fun (V13) -> ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V4, V13)) end, V8)) end, fun (V14) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5, V14)) end, V7)) end, fun (V15) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V6, V15)) end, V2)) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(Term $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> case ('un--getNameID'(V5, V0)) of {'Idris.Prelude.Types.Just', E3} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, {'Idris.Core.Name.Resolved', V6}}} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, V5}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> begin (V13 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V11, V12)) end end, V10, [], V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> case ('un--getNameID'(V8, V0)) of {'Idris.Prelude.Types.Just', E10} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V7, V8, V16, V15}} end(E10)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V7, V8, V9, V15}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); {'Idris.Core.TT.Bind', E11, E12, E13, E14} -> (fun (V17, V18, V19, V20) -> begin (V23 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V21) -> fun (V22) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V21, V22)) end end, V19, V2))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V26 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V20, V2))), case V26 of {'Idris.Prelude.Types.Left', E17} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V17, V18, V25, V28}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13, E14)); {'Idris.Core.TT.App', E19, E20, E21} -> (fun (V29, V30, V31) -> begin (V32 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V30, V2))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> begin (V35 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V31, V2))), case V35 of {'Idris.Prelude.Types.Left', E24} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', V29, V34, V37}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20, E21)); {'Idris.Core.TT.As', E26, E27, E28, E29} -> (fun (V38, V39, V40, V41) -> begin (V42 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V40, V2))), case V42 of {'Idris.Prelude.Types.Left', E30} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V44) -> begin (V45 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V41, V2))), case V45 of {'Idris.Prelude.Types.Left', E32} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V38, V39, V44, V47}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26, E27, E28, E29)); {'Idris.Core.TT.TDelayed', E34, E35, E36} -> (fun (V48, V49, V50) -> begin (V51 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V50, V2))), case V51 of {'Idris.Prelude.Types.Left', E37} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V48, V49, V53}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35, E36)); {'Idris.Core.TT.TDelay', E39, E40, E41, E42} -> (fun (V54, V55, V56, V57) -> begin (V58 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V56, V2))), case V58 of {'Idris.Prelude.Types.Left', E43} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V60) -> begin (V61 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V57, V2))), case V61 of {'Idris.Prelude.Types.Left', E45} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V54, V55, V60, V63}} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40, E41, E42)); {'Idris.Core.TT.TForce', E47, E48, E49} -> (fun (V64, V65, V66) -> begin (V67 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V66, V2))), case V67 of {'Idris.Prelude.Types.Left', E50} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V64, V65, V69}} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47, E48, E49)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--resolved_HasNames_(NameMap $a)'(V0, V1) -> fun (V2) -> ('nested--12600-8826--in--un--insertAll'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V1)), V2)) end.
'dn--un--resolved_HasNames_(Maybe $a)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V7 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E1, E2} -> (fun (V5, V6) -> (((V6(V1))(V4))(V3)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V9}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--resolved_HasNames_(CaseAlt $vars)'(V0, V10, V11)) end end, V6, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V3, V4, V9, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> begin (V17 = ('dn--un--resolved_HasNames_(Term $vars)'(V0, V16, V2))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V15, V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--resolved_HasNames_(CaseAlt $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V6, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> case ('un--getNameID'(V3, V0)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', {'Idris.Core.Name.Resolved', V10}, V4, V5, V9}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V3, V4, V5, V9}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E7, E8, E9} -> (fun (V11, V12, V13) -> begin (V14 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V13, V2))), case V14 of {'Idris.Prelude.Types.Left', E10} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V11, V12, V16}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9)); {'Idris.Core.CaseTree.ConstCase', E12, E13} -> (fun (V17, V18) -> begin (V19 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V18, V2))), case V19 of {'Idris.Prelude.Types.Left', E14} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V17, V21}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); {'Idris.Core.CaseTree.DefaultCase', E16} -> (fun (V22) -> begin (V23 = ('dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V22, V2))), case V23 of {'Idris.Prelude.Types.Left', E17} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V25}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V3, V4) -> begin (V7 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V5) -> fun (V6) -> ('dn--un--resolved_HasNames_(Term $vars)'(V0, V5, V6)) end end, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V4, V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V9, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Transform'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('dn--un--full_HasNames_Name'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V5, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = ('dn--un--full_HasNames_(Term $vars)'(V0, V6, V2))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = ('dn--un--full_HasNames_(Term $vars)'(V0, V7, V2))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V3, V10, V13, V16, V19}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Totality'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('dn--un--full_HasNames_Terminating'(V0, V3, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = ('dn--un--full_HasNames_Covering'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Terminating'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V3) -> begin (V4 = ('dn--un--full_HasNames_PartialReason'(V0, V3, V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_SCCall'(V0, V1, V2) -> begin (V5 = ('dn--un--full_HasNames_Name'(V0, case V1 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.Context.MkSCCall', V7, V9} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames_Pat'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V3, V4, V5) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Core.CaseTree.PAs', V9, V10, V11} end end end} end, fun (V12) -> {'Idris.Prelude.Types.Right', V3} end, V7)) end, fun (V13) -> ('dn--un--full_HasNames_Name'(V0, V4, V13)) end, V6)) end, fun (V14) -> ('dn--un--full_HasNames_Pat'(V0, V5, V14)) end, V2)) end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V15, V16, V17, V18, V19) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V23) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V24) -> {'Idris.Prelude.Types.Right', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> {'Idris.Core.CaseTree.PCon', V25, V26, V27, V28, V29} end end end end end} end, fun (V30) -> {'Idris.Prelude.Types.Right', V15} end, V23)) end, fun (V31) -> ('dn--un--full_HasNames_Name'(V0, V16, V31)) end, V22)) end, fun (V32) -> {'Idris.Prelude.Types.Right', V17} end, V21)) end, fun (V33) -> {'Idris.Prelude.Types.Right', V18} end, V20)) end, fun (V34) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V35) -> fun (V36) -> ('dn--un--full_HasNames_Pat'(V0, V35, V36)) end end, V19, [], V34)) end, V2)) end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V37, V38, V39, V40) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V41) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V42) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V43) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V44) -> {'Idris.Prelude.Types.Right', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> {'Idris.Core.CaseTree.PTyCon', V45, V46, V47, V48} end end end end} end, fun (V49) -> {'Idris.Prelude.Types.Right', V37} end, V43)) end, fun (V50) -> ('dn--un--full_HasNames_Name'(V0, V38, V50)) end, V42)) end, fun (V51) -> {'Idris.Prelude.Types.Right', V39} end, V41)) end, fun (V52) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> fun (V54) -> ('dn--un--full_HasNames_Pat'(V0, V53, V54)) end end, V40, [], V52)) end, V2)) end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V55, V56) -> {'Idris.Prelude.Types.Right', V1} end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V57, V58, V59, V60) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V61) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V62) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V63) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V64) -> {'Idris.Prelude.Types.Right', fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> {'Idris.Core.CaseTree.PArrow', V65, V66, V67, V68} end end end end} end, fun (V69) -> {'Idris.Prelude.Types.Right', V57} end, V63)) end, fun (V70) -> ('dn--un--full_HasNames_Name'(V0, V58, V70)) end, V62)) end, fun (V71) -> ('dn--un--full_HasNames_Pat'(V0, V59, V71)) end, V61)) end, fun (V72) -> ('dn--un--full_HasNames_Pat'(V0, V60, V72)) end, V2)) end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V73, V74, V75, V76) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V77) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V78) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V79) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V80) -> {'Idris.Prelude.Types.Right', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> {'Idris.Core.CaseTree.PDelay', V81, V82, V83, V84} end end end end} end, fun (V85) -> {'Idris.Prelude.Types.Right', V73} end, V79)) end, fun (V86) -> {'Idris.Prelude.Types.Right', V74} end, V78)) end, fun (V87) -> ('dn--un--full_HasNames_Pat'(V0, V75, V87)) end, V77)) end, fun (V88) -> ('dn--un--full_HasNames_Pat'(V0, V76, V88)) end, V2)) end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V89, V90) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V91) -> case V91 of {'Idris.Prelude.Types.Left', E24} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V89, V93}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V94) -> ('dn--un--full_HasNames_Name'(V0, V90, V94)) end, V2)) end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E26, E27} -> (fun (V95, V96) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V97) -> case V97 of {'Idris.Prelude.Types.Left', E28} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V99) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V95, V99}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V100) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V96, V100)) end, V2)) end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_PartialReason'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}} end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--full_HasNames_Name'(V0, V4, V5)) end end, V3, [], V2))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_Name'(V0, V10, V11)) end end, V9, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Name'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V3) -> begin (V4 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V3}, V0))(V2))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V7 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V9 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V3}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_GlobalDef'(V0, V1, V2) -> begin (V24 = ('dn--un--full_HasNames_(Term $vars)'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V24 of {'Idris.Prelude.Types.Left', E21} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V26) -> begin (V48 = ('dn--un--full_HasNames_Def'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V44 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V48 of {'Idris.Prelude.Types.Left', E44} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V50) -> begin (V72 = ('dn--un--full_HasNames_Totality'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V61 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V72 of {'Idris.Prelude.Types.Left', E67} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V74) -> begin (V100 = ('dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V75) -> fun (V76) -> ('dn--un--full_HasNames_(NameMap $a)'(V75, V76)) end end, fun (V77) -> fun (V78) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V77, V78)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V91 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V100 of {'Idris.Prelude.Types.Left', E90} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V102) -> begin (V128 = ('dn--un--full_HasNames_(Maybe $a)'({'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('dn--un--full_HasNames_(NameMap $a)'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--resolved_HasNames_(NameMap $a)'(V105, V106)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V120 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V128 of {'Idris.Prelude.Types.Left', E113} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V130) -> begin (V154 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V131) -> fun (V132) -> ('dn--un--full_HasNames_SCCall'(V0, V131, V132)) end end, case V1 of {'Idris.Core.Context.MkGlobalDef', E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V153 end(E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, [], V2))), case V154 of {'Idris.Prelude.Types.Left', E136} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V156) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkGlobalDef', E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177) -> {'Idris.Core.Context.MkGlobalDef', V157, V158, V26, V160, V161, V162, V163, V164, V165, V166, V74, V168, V102, V130, V171, V172, V173, V50, V175, V176, V156} end(E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames_Def'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> begin (V8 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V5, V2))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V6, V2))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> ('nested--12060-8302--in--un--fullNamesPat'(V7, V4, V6, V5, V3, V0, V14)) end, V7, [], V2))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.PMDef', V3, V4, V10, V13, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('dn--un--full_HasNames_Name'(V0, V26, V27)) end end, V23, [], V2))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V31) -> fun (V32) -> ('dn--un--full_HasNames_Name'(V0, V31, V32)) end end, V24, [], V2))), case V33 of {'Idris.Prelude.Types.Left', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.TCon', V18, V19, V20, V21, V22, V30, V35, V25}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12, E13, E14, E15, E16, E17, E18)); {'Idris.Core.Context.BySearch', E23, E24, E25} -> (fun (V36, V37, V38) -> begin (V39 = ('dn--un--full_HasNames_Name'(V0, V38, V2))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.BySearch', V36, V37, V41}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23, E24, E25)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V42, V43, V44) -> begin (V45 = ('dn--un--full_HasNames_(Term $vars)'(V0, V42, V2))), case V45 of {'Idris.Prelude.Types.Left', E31} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Guess', V47, V43, V44}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29, E30)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_Covering'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V4) -> fun (V5) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V4, V5)) end end, V3, [], V2))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_Name'(V0, V10, V11)) end end, V9, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Clause'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V4, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = ('dn--un--full_HasNames_(Term $vars)'(V0, V5, V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = ('dn--un--full_HasNames_(Term $vars)'(V0, V6, V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkClause', V3, V9, V12, V15}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(Term $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> case V5 of {'Idris.Core.Name.Resolved', E3} -> (fun (V6) -> begin (V7 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V6}, V0))(V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> case V9 of {'Idris.Prelude.Types.Just', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, case V10 of {'Idris.Core.Context.MkGlobalDef', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V12 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, {'Idris.Core.Name.Resolved', V6}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> {'Idris.Prelude.Types.Right', V1} end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E28, E29, E30, E31} -> (fun (V32, V33, V34, V35) -> begin (V38 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V36) -> fun (V37) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V36, V37)) end end, V35, [], V2))), case V38 of {'Idris.Prelude.Types.Left', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V32, V33, V34, V40}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29, E30, E31)); {'Idris.Core.TT.Bind', E34, E35, E36, E37} -> (fun (V41, V42, V43, V44) -> begin (V47 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V45) -> fun (V46) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V45, V46)) end end, V43, V2))), case V47 of {'Idris.Prelude.Types.Left', E38} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V49) -> begin (V50 = ('dn--un--full_HasNames_(Term $vars)'(V0, V44, V2))), case V50 of {'Idris.Prelude.Types.Left', E40} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V41, V42, V49, V52}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34, E35, E36, E37)); {'Idris.Core.TT.App', E42, E43, E44} -> (fun (V53, V54, V55) -> begin (V56 = ('dn--un--full_HasNames_(Term $vars)'(V0, V54, V2))), case V56 of {'Idris.Prelude.Types.Left', E45} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V58) -> begin (V59 = ('dn--un--full_HasNames_(Term $vars)'(V0, V55, V2))), case V59 of {'Idris.Prelude.Types.Left', E47} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V61) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', V53, V58, V61}} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42, E43, E44)); {'Idris.Core.TT.As', E49, E50, E51, E52} -> (fun (V62, V63, V64, V65) -> begin (V66 = ('dn--un--full_HasNames_(Term $vars)'(V0, V64, V2))), case V66 of {'Idris.Prelude.Types.Left', E53} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V68) -> begin (V69 = ('dn--un--full_HasNames_(Term $vars)'(V0, V65, V2))), case V69 of {'Idris.Prelude.Types.Left', E55} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V71) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V62, V63, V68, V71}} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50, E51, E52)); {'Idris.Core.TT.TDelayed', E57, E58, E59} -> (fun (V72, V73, V74) -> begin (V75 = ('dn--un--full_HasNames_(Term $vars)'(V0, V74, V2))), case V75 of {'Idris.Prelude.Types.Left', E60} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V72, V73, V77}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57, E58, E59)); {'Idris.Core.TT.TDelay', E62, E63, E64, E65} -> (fun (V78, V79, V80, V81) -> begin (V82 = ('dn--un--full_HasNames_(Term $vars)'(V0, V80, V2))), case V82 of {'Idris.Prelude.Types.Left', E66} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V84) -> begin (V85 = ('dn--un--full_HasNames_(Term $vars)'(V0, V81, V2))), case V85 of {'Idris.Prelude.Types.Left', E68} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V78, V79, V84, V87}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62, E63, E64, E65)); {'Idris.Core.TT.TForce', E70, E71, E72} -> (fun (V88, V89, V90) -> begin (V91 = ('dn--un--full_HasNames_(Term $vars)'(V0, V90, V2))), case V91 of {'Idris.Prelude.Types.Left', E73} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V88, V89, V93}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70, E71, E72)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_(NameMap $a)'(V0, V1) -> fun (V2) -> ('nested--12599-8794--in--un--insertAll'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(V1)), V2)) end.
'dn--un--full_HasNames_(Maybe $a)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V7 = case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E1, E2} -> (fun (V5, V6) -> (((V5(V1))(V4))(V3)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V9}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(CaseTree $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--full_HasNames_(Term $vars)'(V0, V5, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_(CaseAlt $vars)'(V0, V10, V11)) end end, V6, [], V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V3, V4, V9, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> begin (V17 = ('dn--un--full_HasNames_(Term $vars)'(V0, V16, V2))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V15, V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'dn--un--full_HasNames_(CaseAlt $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> begin (V7 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V6, V2))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = (('un--lookupCtxtExact'(V3, V0))(V2))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Just', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', case V13 of {'Idris.Core.Context.MkGlobalDef', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V15 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5, V9}} end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V3, V4, V5, V9}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E30, E31, E32} -> (fun (V35, V36, V37) -> begin (V38 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V37, V2))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V35, V36, V40}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31, E32)); {'Idris.Core.CaseTree.ConstCase', E35, E36} -> (fun (V41, V42) -> begin (V43 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V42, V2))), case V43 of {'Idris.Prelude.Types.Left', E37} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V41, V45}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35, E36)); {'Idris.Core.CaseTree.DefaultCase', E39} -> (fun (V46) -> begin (V47 = ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V46, V2))), case V47 of {'Idris.Prelude.Types.Left', E40} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V49}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_((Env Term) $vars)'(V0, V1, V2) -> case V1 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V3, V4) -> begin (V7 = ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V5) -> fun (V6) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V5, V6)) end end, V3, V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V4, V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V9, V12}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_StripNamespace_GlobalDef'() -> {'Idris.Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_GlobalDef'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_GlobalDef'(V2, V3)) end end}.
'dn--un--__Impl_StripNamespace_Def'() -> {'Idris.Core.TT.dn--un--__mkStripNamespace', fun (V0) -> fun (V1) -> ('dn--un--trimNS_StripNamespace_Def'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--restoreNS_StripNamespace_Def'(V2, V3)) end end}.
'dn--un--__Impl_Show_SizeChange'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SizeChange'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SizeChange'(V1, V2)) end end}.
'dn--un--__Impl_Show_SCCall'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SCCall'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SCCall'(V1, V2)) end end}.
'dn--un--__Impl_Show_DefFlag'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_DefFlag'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DefFlag'(V1, V2)) end end}.
'dn--un--__Impl_Show_Def'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Def'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Def'(V1, V2)) end end}.
'dn--un--__Impl_Show_Clause'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Clause'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Clause'(V1, V2)) end end}.
'dn--un--__Impl_Show_BuiltinType'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_BuiltinType'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_BuiltinType'(V1, V2)) end end}.
'dn--un--__Impl_HasNames_Transform'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Transform'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Transform'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Totality'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Totality'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Totality'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Terminating'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Terminating'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Terminating'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_SCCall'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_SCCall'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_SCCall'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Pat'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Pat'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Pat'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_PartialReason'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_PartialReason'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_PartialReason'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Name'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Name'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Name'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_GlobalDef'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_GlobalDef'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_GlobalDef'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Def'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Def'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Def'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Covering'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Covering'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Covering'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Clause'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_Clause'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_Clause'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_(Term $vars)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(Term $vars)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(Term $vars)'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_(Maybe $a)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_(Maybe $a)'(V0, V1, V2, V3)) end end end, fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--resolved_HasNames_(Maybe $a)'(V0, V4, V5, V6)) end end end}.
'dn--un--__Impl_HasNames_(CaseTree $vars)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(CaseTree $vars)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(CaseTree $vars)'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_(CaseAlt $vars)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(CaseAlt $vars)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(CaseAlt $vars)'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_((Env Term) $vars)'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_((Env Term) $vars)'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_((Env Term) $vars)'(V3, V4, V5)) end end end}.
'dn--un--__Impl_Eq_SizeChange'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SizeChange'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SizeChange'(V2, V3)) end end}.
'dn--un--__Impl_Eq_SCCall'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SCCall'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SCCall'(V2, V3)) end end}.
'dn--un--__Impl_Eq_DefFlag'() -> {'Idris.Prelude.EqOrd.MkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DefFlag'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DefFlag'(V2, V3)) end end}.
'dn--un--==_Eq_SizeChange'(V0, V1) -> case V0 of 0 -> case V1 of 0 -> 1; _ -> 0 end; 1 -> case V1 of 1 -> 1; _ -> 0 end; 2 -> case V1 of 2 -> 1; _ -> 0 end; _ -> 0 end.
'dn--un--==_Eq_SCCall'(V0, V1) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(case V0 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V2, V3) -> V2 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Context.MkSCCall', E6, E7} -> (fun (V4, V5) -> V4 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of 1 -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V12, V13)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq_SizeChange'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq_SizeChange'(V16, V17)) end end}, V8, V9)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V22, V23)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V24) -> fun (V25) -> ('dn--un--==_Eq_SizeChange'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('dn--un--/=_Eq_SizeChange'(V26, V27)) end end}, V18, V19)) end end}, V6, V7)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V34, V35)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V36) -> fun (V37) -> ('dn--un--==_Eq_SizeChange'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('dn--un--/=_Eq_SizeChange'(V38, V39)) end end}, V30, V31)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V44, V45)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V46) -> fun (V47) -> ('dn--un--==_Eq_SizeChange'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--/=_Eq_SizeChange'(V48, V49)) end end}, V40, V41)) end end}, V28, V29)) end end}, case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V50, V51) -> V51 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Context.MkSCCall', E2, E3} -> (fun (V52, V53) -> V53 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--==_Eq_DefFlag'(V0, V1) -> case V0 of {'Idris.Core.Context.Inline'} -> (fun () -> case V1 of {'Idris.Core.Context.Inline'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Invertible'} -> (fun () -> case V1 of {'Idris.Core.Context.Invertible'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Overloadable'} -> (fun () -> case V1 of {'Idris.Core.Context.Overloadable'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.TCInline'} -> (fun () -> case V1 of {'Idris.Core.Context.TCInline'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.SetTotal', E0} -> (fun (V2) -> case V1 of {'Idris.Core.Context.SetTotal', E1} -> (fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_TotalReq'(V2, V3)) end(E1)); _ -> 0 end end(E0)); {'Idris.Core.Context.BlockedHint'} -> (fun () -> case V1 of {'Idris.Core.Context.BlockedHint'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.Macro'} -> (fun () -> case V1 of {'Idris.Core.Context.Macro'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.PartialEval', E2} -> (fun (V4) -> case V1 of {'Idris.Core.Context.PartialEval', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V21)) end end}, {'Idris.Prelude.EqOrd.MkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V24, V25)) end end}, V16, V17)) end end}, V4, V5)) end(E3)); _ -> 0 end end(E2)); {'Idris.Core.Context.AllGuarded'} -> (fun () -> case V1 of {'Idris.Core.Context.AllGuarded'} -> (fun () -> 1 end()); _ -> 0 end end()); {'Idris.Core.Context.ConType', E4} -> (fun (V26) -> case V1 of {'Idris.Core.Context.ConType', E5} -> (fun (V27) -> ('Idris.Idris2.Core.CompileExpr':'dn--un--==_Eq_ConInfo'(V26, V27)) end(E5)); _ -> 0 end end(E4)); _ -> 0 end.
'dn--un--/=_Eq_SizeChange'(V0, V1) -> case ('dn--un--==_Eq_SizeChange'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_SCCall'(V0, V1) -> case ('dn--un--==_Eq_SCCall'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_DefFlag'(V0, V1) -> case ('dn--un--==_Eq_DefFlag'(V0, V1)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--withLogLevel'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V64 = case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V12 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> case V38 of {'Idris.Core.Options.MkSessionOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V53 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V122 = begin (V121 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> case V69 of {'Idris.Core.Options.MkOptions', E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101) -> case V95 of {'Idris.Core.Options.MkSessionOpts', E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113} -> (fun (V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> {'Idris.Core.Context.MkDefs', V65, V66, V67, V68, {'Idris.Core.Options.MkOptions', V93, V94, {'Idris.Core.Options.MkSessionOpts', V102, V103, V104, V105, V106, V107, V108, V109, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V1, V64)), V111, V112, V113, V114, V115, V116, V117, V118, V119, V120}, V96, V97, V98, V99, V100, V101}, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92} end(E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V121} end), case V122 of {'Idris.Prelude.Types.Left', E114} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V124) -> begin (V125 = (V2(V3))), case V125 of {'Idris.Prelude.Types.Left', E116} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V127) -> begin (V129 = begin (V128 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V128} end), case V129 of {'Idris.Prelude.Types.Left', E118} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V131) -> begin (V189 = begin (V188 = ('erlang':'put'(V0, case V131 of {'Idris.Core.Context.MkDefs', E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147} -> (fun (V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159) -> case V136 of {'Idris.Core.Options.MkOptions', E148, E149, E150, E151, E152, E153, E154, E155, E156} -> (fun (V160, V161, V162, V163, V164, V165, V166, V167, V168) -> case V162 of {'Idris.Core.Options.MkSessionOpts', E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175} -> (fun (V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187) -> {'Idris.Core.Context.MkDefs', V132, V133, V134, V135, {'Idris.Core.Options.MkOptions', V160, V161, {'Idris.Core.Options.MkSessionOpts', V169, V170, V171, V172, V173, V174, V175, V176, V64, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187}, V163, V164, V165, V166, V167, V168}, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159} end(E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E148, E149, E150, E151, E152, E153, E154, E155, E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V188} end), case V189 of {'Idris.Prelude.Types.Left', E176} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E176)); {'Idris.Prelude.Types.Right', E177} -> (fun (V191) -> {'Idris.Prelude.Types.Right', V127} end(E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--withExtendedNS'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V66 = begin (V65 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkDefs', V37, V38, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V36, V1)), V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E58} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V68) -> begin (V75 = ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V69) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V70) -> case V70 of {'Idris.Prelude.Types.Left', E60} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Right', V72}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2, V69)) end, fun (V73) -> fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Left', V73}} end end, V3))), case V75 of {'Idris.Prelude.Types.Left', E62} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V77) -> begin (V79 = begin (V78 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V78} end), case V79 of {'Idris.Prelude.Types.Left', E64} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V81) -> begin (V111 = begin (V110 = ('erlang':'put'(V0, case V81 of {'Idris.Core.Context.MkDefs', E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> {'Idris.Core.Context.MkDefs', V82, V83, V36, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109} end(E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V110} end), case V111 of {'Idris.Prelude.Types.Left', E94} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V113) -> case V77 of {'Idris.Prelude.Types.Left', E96} -> (fun (V114) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V114, V3)) end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V115) -> {'Idris.Prelude.Types.Right', V115} end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--withCtxt'(V0, V1, V2) -> ('Idris.Idris2.Core.Core':'un--wrapRef'({'Idris.Core.Context.Ctxt'}, V0, fun (V3) -> ('nested--23895-19235--in--un--resetCtxt'(V0, V3)) end, V1, V2)).
'un--visibleInAny'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, fun (V29) -> ('un--visibleIn'(V29, V1, V2)) end, V0)).
'un--visibleIn'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> case V2 of 0 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--updateTy'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V1}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V1}, case V39 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V2, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V3)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> case (V2(case V39 of {'Idris.Core.Context.MkGlobalDef', E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V57 end(E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E33} -> (fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V62) -> case V62 of {'Idris.Prelude.Types.Left', E34} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V64) -> {'Idris.Prelude.Types.Right', 0} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V65) -> ('un--addDef'(V0, V1, case V39 of {'Idris.Core.Context.MkGlobalDef', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> {'Idris.Core.Context.MkGlobalDef', V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V61, V84, V85, V86} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V65)) end, V3)) end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unsetFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V63 = ('Idris.Idris2.Data.List':'un--filter'(fun (V41) -> ('dn--un--/=_Eq_DefFlag'(V41, V3)) end, case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V53 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V64) -> case V64 of {'Idris.Prelude.Types.Left', E54} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V66) -> {'Idris.Prelude.Types.Right', 0} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V67) -> ('un--addDef'(V0, V2, case V40 of {'Idris.Core.Context.MkGlobalDef', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> {'Idris.Core.Context.MkGlobalDef', V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V63, V80, V81, V82, V83, V84, V85, V86, V87, V88} end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V67)) end, V4)) end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--undefinedName'(V0, V1, V2, V3) -> ('un--maybeMisspelling'(V0, {'Idris.Core.Core.UndefinedName', V1, V2}, V2, V3)).
'un--toResolvedNames'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V8, V9) -> (((V9(case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--toFullNames'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V8, V9) -> (((V8(case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sndName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkPairNs', E2, E3, E4} -> (fun (V7, V8, V9) -> V9 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case V5 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V14 of {'Idris.Core.Options.MkOptions', E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V42 end(E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setWorkingDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V39 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V1))(V10))), {'Idris.Prelude.Types.Right', V38} end end, V2))), case V39 of {'Idris.Prelude.Types.Left', E4} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V41) -> begin (V70 = begin (V69 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> V48 end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), begin (V56 = (V53(V54))), (V55(V56)) end end end end end end end}, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), ((V60(V62))(V61)) end end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V64(V65))), (V66(V65)) end end end end}, fun (V67) -> fun (V68) -> V68 end end}))(V2))), {'Idris.Prelude.Types.Right', V69} end), case V70 of {'Idris.Prelude.Types.Left', E6} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V72) -> case V72 of {'Idris.Prelude.Types.Just', E8} -> (fun (V73) -> begin (V121 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> case V78 of {'Idris.Core.Options.MkOptions', E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V102, V103, V104, V105, V106, V107, V108, V109, V110) -> case V102 of {'Idris.Core.Options.MkDirs', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> {'Idris.Core.Context.MkDefs', V74, V75, V76, V77, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V73, V112, V113, V114, V115, V116, V117, V118, V119, V120}, V103, V104, V105, V106, V107, V108, V109, V110}, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101} end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V121} end end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setVisible'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V46 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V7 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V35, V36, V37, V38, V39, V40, V41, [V1 | V42], V43, V44, V45}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V46} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setVisibility'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V44) -> ('un--addDef'(V0, V2, case V40 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.Core.Context.MkGlobalDef', V45, V46, V47, V48, V49, V50, V51, V52, V53, V3, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44)) end, V4)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setUniqueSearch'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V41 = {'Idris.Prelude.Types.Just', V40}), (('case--case block in setUniqueSearch-15795'(V3, V2, V1, V0, V8, V40, V41, case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V59 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E32)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setUnboundImplicits'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V38 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, {'Idris.Core.Options.MkElabDirectives', V44, V1, V46, V47, V48, V49, V50}, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setTotality'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V44) -> ('un--addDef'(V0, V2, case V40 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.Core.Context.MkGlobalDef', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V3, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44)) end, V4)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setTerminating'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V44) -> ('un--addDef'(V0, V2, case V40 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> case V55 of {'Idris.Core.TT.MkTotality', E56, E57} -> (fun (V66, V67) -> {'Idris.Core.Context.MkGlobalDef', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, {'Idris.Core.TT.MkTotality', V3, V67}, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44)) end, V4)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSourceDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V1, V46, V47, V48, V49, V50, V51, V52, V53}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSizeChange'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V44) -> ('un--addDef'(V0, V2, case V40 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.Core.Context.MkGlobalDef', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V3} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44)) end, V4)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSession'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V1, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setRewrite'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('un--checkUnambig'(V0, V1, V3, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('un--checkUnambig'(V0, V1, V2, V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V43 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Core.Context.MkDefs', V15, V16, V17, V18, ('Idris.Idris2.Core.Options':'un--setRewrite'(V14, V11, V19)), V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V43} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPrefixRecordProjections'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V38 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, {'Idris.Core.Options.MkElabDirectives', V44, V45, V46, V47, V48, V49, V1}, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPrefix'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V45, V46, V47, V48, V1, V50, V51, V52, V53}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPair'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('un--checkUnambig'(V0, V1, V2, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('un--checkUnambig'(V0, V1, V3, V5))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('un--checkUnambig'(V0, V1, V4, V5))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V47 = ('erlang':'put'(V0, case V9 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkDefs', V19, V20, V21, V22, ('Idris.Idris2.Core.Options':'un--setPair'(V12, V15, V18, V23)), V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V47} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPPrint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V1, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setOutputDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V45, V46, V47, V1, V49, V50, V51, V52, V53}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setOpenHints'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V1, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNextEntry'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V46 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V7 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V35, V1, V37, V38, V39, V40, V41, V42, V43, V44, V45}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V46} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNestedNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V1, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNamedCompiled'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, V1, case V39 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, {'Idris.Prelude.Types.Just', V2}, V64} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V3)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNameFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtName'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of [E32 | E33] -> (fun (V40, V41) -> case V40 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V42, V43) -> case V43 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V44, V45) -> case V41 of [] -> begin (V68 = [V3 | ('Idris.Idris2.Data.List':'un--filter'(fun (V46) -> ('dn--un--/=_Eq_DefFlag'(V46, V3)) end, case V45 of {'Idris.Core.Context.MkGlobalDef', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> V58 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V69) -> case V69 of {'Idris.Prelude.Types.Left', E59} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V71) -> {'Idris.Prelude.Types.Right', 0} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V72) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V44}, case V45 of {'Idris.Core.Context.MkGlobalDef', E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> {'Idris.Core.Context.MkGlobalDef', V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V68, V85, V86, V87, V88, V89, V90, V91, V92, V93} end(E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V72)) end, V4)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V94) -> ('Idris.Idris2.Builtin':'un--fst'(V94)) end, V39))}, V4)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V95) -> ('Idris.Idris2.Builtin':'un--fst'(V95)) end, V39))}, V4)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V96) -> ('Idris.Idris2.Builtin':'un--fst'(V96)) end, V39))}, V4)) end end(E32, E33)); [] -> ('un--undefinedName'(V0, V1, V2, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V97) -> ('Idris.Idris2.Builtin':'un--fst'(V97)) end, V39))}, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V1, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNFThreshold'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V38 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, {'Idris.Core.Options.MkElabDirectives', V44, V45, V46, V47, V48, V1, V50}, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setMutWith'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> case V58 of {'Idris.Core.Context.TCon', E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69) -> ('un--updateDef'(V0, V2, fun (V70) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V62, V63, V64, V65, V66, V3, V68, V69}} end, V4)) end(E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V40 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V72 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setMutWith]"/utf8>>))}, V4)) end end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setLogTimings'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V63 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V37 of {'Idris.Core.Options.MkSessionOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, {'Idris.Core.Options.MkSessionOpts', V44, V45, V46, V47, V48, V49, V50, V51, V52, V1, V54, V55, V56, V57, V58, V59, V60, V61, V62}, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V63} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setLinearCheck'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V1}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V1}, case V39 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V2, V61, V62, V63, V64} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V3)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromString'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromString'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromInteger'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromInteger'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromDouble'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromDouble'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromChar'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromChar'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V63 = [V3 | ('Idris.Idris2.Data.List':'un--filter'(fun (V41) -> ('dn--un--/=_Eq_DefFlag'(V41, V3)) end, case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V53 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V64) -> case V64 of {'Idris.Prelude.Types.Left', E54} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V66) -> {'Idris.Prelude.Types.Right', 0} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V67) -> ('un--addDef'(V0, V2, case V40 of {'Idris.Core.Context.MkGlobalDef', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> {'Idris.Core.Context.MkGlobalDef', V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V63, V80, V81, V82, V83, V84, V85, V86, V87, V88} end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V67)) end, V4)) end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setExternal'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V41 = {'Idris.Prelude.Types.Just', V40}), (('case--case block in setExternal-15931'(V3, V2, V1, V0, V8, V40, V41, case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V59 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E32)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setExtension'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setExtension'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDetermining'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> case V58 of {'Idris.Core.Context.TCon', E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69) -> begin (V91 = (('nested--19752-15406--in--un--getPos'(V3, V2, V1, V0, 0, V3, case V40 of {'Idris.Core.Context.MkGlobalDef', E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V72 end(E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V91 of {'Idris.Prelude.Types.Left', E104} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V93) -> ('un--updateDef'(V0, V2, fun (V94) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V62, V63, V64, V93, V66, V67, V68, V69}} end, V4)) end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V40 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> V96 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V4)) end end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDetags'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> case V58 of {'Idris.Core.Context.TCon', E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69) -> ('un--updateDef'(V0, V2, fun (V70) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V62, V63, V64, V65, V66, V67, V68, V3}} end, V4)) end(E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V40 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V72 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V4)) end end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('un--undefinedName'(V0, V1, V2, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDependsDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V45, V46, V1, V48, V49, V50, V51, V52, V53}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDefaultTotalityOption'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V38 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, {'Idris.Core.Options.MkElabDirectives', V44, V45, V1, V47, V48, V49, V50}, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDebugElabCheck'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V63 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V37 of {'Idris.Core.Options.MkSessionOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, {'Idris.Core.Options.MkSessionOpts', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V1, V56, V57, V58, V59, V60, V61, V62}, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V63} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCtxt'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V1, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCovering'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V44) -> ('un--addDef'(V0, V2, case V40 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> case V55 of {'Idris.Core.TT.MkTotality', E56, E57} -> (fun (V66, V67) -> {'Idris.Core.Context.MkGlobalDef', V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, {'Idris.Core.TT.MkTotality', V66, V3}, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65} end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V44)) end, V4)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCompiled'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Right', 0} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, V1, case V39 of {'Idris.Core.Context.MkGlobalDef', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, {'Idris.Prelude.Types.Just', V2}, V63, V64} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V3)) end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCG'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V63 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V37 of {'Idris.Core.Options.MkSessionOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, {'Idris.Core.Options.MkSessionOpts', V44, V45, V46, V1, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62}, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V63} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setBuildDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V45, V1, V47, V48, V49, V50, V51, V52, V53}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAutoImplicitLimit'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V38 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, {'Idris.Core.Options.MkElabDirectives', V44, V45, V46, V47, V1, V49, V50}, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAmbigLimit'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V38 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, {'Idris.Core.Options.MkElabDirectives', V44, V45, V46, V1, V48, V49, V50}, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAllPublic'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V46 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V7 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V35, V36, V37, V38, V39, V40, V41, V42, V1, V44, V45}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V46} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--returnDef'(V0, V1, V2) -> case V0 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V2}}; 1 -> ('case--returnDef-5661'(V2, V1, case V2 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolved'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E0, E1} -> (fun (V3, V4) -> ((V4(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolveName'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E36} -> (fun (V3) -> {'Idris.Prelude.Types.Right', V3} end(E36)); _ -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--getPosition'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V39, V40) -> begin (V41 = ('un--setCtxt'(V0, V40, V2))), case V41 of {'Idris.Prelude.Types.Left', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V43) -> {'Idris.Prelude.Types.Right', V39} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--resetFirstEntry'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V84 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V6 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', case V5 of {'Idris.Core.Context.MkDefs', E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> case V45 of {'Idris.Core.Context.MkContext', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V74 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44}, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V84} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--refersToRuntime'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V15 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--refersTo'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V14 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--reducibleInAny'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, fun (V29) -> ('un--reducibleIn'(V29, V1, V2)) end, V0)).
'un--reducibleIn'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Core.Name.UN', E2} -> (fun (V5) -> case V2 of 1 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); 0 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); _ -> 1 end end(E2)); {'Idris.Core.Name.RF', E3} -> (fun (V6) -> case V2 of 1 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); 0 -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)); _ -> 1 end end(E3)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'un--recordWarning'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('un--getSession'(V0, V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V38 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, [V1 | V37]} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V38} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--prettyName'(V0, V1) -> case V1 of {'Idris.Core.Name.Nested', E0, E1} -> (fun (V2, V3) -> fun (V4) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V13 = ('un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, {'Idris.Core.Name.Resolved', V5}, V4))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = (('un--prettyName'(V0, V15))(V4))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = (('un--prettyName'(V0, V3))(V4))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<","/utf8>>, V21))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))} end end end(E0, E1)); {'Idris.Core.Name.CaseBlock', E10, E11} -> (fun (V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case block in "/utf8>>, V22))} end end(E10, E11)); {'Idris.Core.Name.WithBlock', E12, E13} -> (fun (V25, V26) -> fun (V27) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with block in "/utf8>>, V25))} end end(E12, E13)); {'Idris.Core.Name.NS', E14, E15} -> (fun (V28, V29) -> ('un--prettyName'(V0, V29)) end(E14, E15)); _ -> fun (V30) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))} end end.
'un--noDeclaration'(V0, V1, V2, V3) -> ('un--maybeMisspelling'(V0, {'Idris.Core.Core.NoDeclaration', V1, V2}, V2, V3)).
'un--newEntry'(V0, V1) -> begin (V13 = case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V25 = case V1 of {'Idris.Core.Context.MkContext', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V18 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V25))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E22} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V30) -> begin (V63 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V13, ('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V30)))) of 1 -> begin (V59 = begin (V58 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArrayCopy'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> V37 end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), begin (V45 = (V42(V43))), (V44(V45)) end end end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), ((V49(V51))(V50)) end end end end end end, fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V53(V54))), (V55(V54)) end end end end}, fun (V56) -> fun (V57) -> V57 end end}, ((('Idris.Idris2.Erlang.Data.IOArray':'un--max'(V30)) + ('un--Grow'())) rem 9223372036854775808), V30))(V26))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E24} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V61) -> begin (V62 = ('erlang':'put'(V25, V61))), {'Idris.Prelude.Types.Right', V62} end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V63 of {'Idris.Prelude.Types.Left', E26} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, case V1 of {'Idris.Core.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76) -> {'Idris.Core.Context.MkContext', V66, ((V13 + 1) rem 9223372036854775808), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V0, V13, V68)), ('un--addPossible'(V0, V13, V69)), V70, V71, V72, V73, V74, V75, V76} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--newDef'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Core.Context.MkGlobalDef', V0, V1, V4, [], [], [], [], V2, V3, V5, ('Idris.Idris2.Core.TT':'un--unchecked'()), [], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, 0, 0, 0, V6, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, []}.
'un--newAlias'(V0, V1, V2, V3) -> begin (V4 = (('un--getPosition'(V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', case V8 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.Context.MkContext', V9, V10, V11, ('un--addAlias'(V0, V1, V7, V12)), V13, V14, V15, V16, V17, V18, V19} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--namesResolvedAs'(V0) -> ('Idris.Idris2.Libraries.Data.NameMap':'dn--un--map_Functor_NameMap'(fun (V1) -> {'Idris.Core.Name.Resolved', V1} end, case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--maybeMisspelling'(V0, V1, V2, V3) -> begin (V4 = (('un--getSimilarNames'(V0, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V1, V3)); [E2 | E3] -> (fun (V7, V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.MaybeMisspelling', V1, {'Idris.Data.List1.:::', V7, V8}}, V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupTyName'(V0, V1, V2) -> ('un--lookupNameBy'(fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupTyExact'(V0, V1, V2) -> ('un--lookupExactBy'(fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupNameBy'(V0, V1, V2, V3) -> begin (V4 = (('un--lookupCtxtName'(V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V10, (V0(V11))}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupExactBy'(V0, V1, V2, V3) -> begin (V4 = (('un--lookupCtxtExact'(V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', (V0(V7))}} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupDefTyExact'(V0, V1, V2) -> ('un--lookupExactBy'(fun (V3) -> {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V27 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V0, V1, V2)).
'un--lookupDefName'(V0, V1, V2) -> ('un--lookupNameBy'(fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupDefExact'(V0, V1, V2) -> ('un--lookupExactBy'(fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupCtxtName'(V0, V1) -> ('case--lookupCtxtName-6426'(V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--lookupCtxtExactI'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E12} -> (fun (V2) -> fun (V3) -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Idris.Core.Context.MkContext', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V10 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E13} -> (fun (V15) -> begin (V16 = ('un--decode'(V1, V2, 1, V15, V3))), case V16 of {'Idris.Prelude.Types.Left', E14} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V18) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V28 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V18))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V42 = begin (V41 = ('erlang':'get'(case V1 of {'Idris.Core.Context.MkContext', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V34 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E38} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V44) -> begin (V73 = begin (V72 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> V51 end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), begin (V59 = (V56(V57))), (V58(V59)) end end end end end end end}, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V62(V64))), ((V63(V65))(V64)) end end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V67(V68))), (V69(V68)) end end end end}, fun (V70) -> fun (V71) -> V71 end end}, V44, V2))(V3))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E40} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V75) -> case V75 of {'Idris.Prelude.Types.Just', E42} -> (fun (V76) -> begin (V77 = ('un--decode'(V1, V2, 1, V76, V3))), case V77 of {'Idris.Prelude.Types.Left', E43} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V79) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V89 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2, V79))} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> V93 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V102) -> ('un--lookupCtxtExactI'({'Idris.Core.Name.Resolved', V102}, V1)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V103) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupCtxtExact'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E5} -> (fun (V2) -> fun (V3) -> ('case--lookupCtxtExact-5826'(V2, V1, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Idris.Core.Context.MkContext', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V10 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V3)) end end(E5)); _ -> fun (V15) -> begin (V16 = (('un--lookupCtxtExactI'(V0, V1))(V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E2} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V20, V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V21}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--lookupContextEntry'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E12} -> (fun (V2) -> case ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'(V2, case V1 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V9 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E13} -> (fun (V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V14}}} end end(E13)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V27 = case V1 of {'Idris.Core.Context.MkContext', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V20 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V28) -> begin (V30 = begin (V29 = ('erlang':'get'(V27))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E25} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V32) -> begin (V61 = begin (V60 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, V32, V2))(V28))), {'Idris.Prelude.Types.Right', V60} end), case V61 of {'Idris.Prelude.Types.Left', E27} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V63) -> case V63 of {'Idris.Prelude.Types.Just', E29} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V64}}} end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V67 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V76) -> ('un--lookupContextEntry'({'Idris.Core.Name.Resolved', V76}, V1)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lazyActive'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V51 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V38 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, V37, {'Idris.Core.Options.MkElabDirectives', V1, V45, V46, V47, V48, V49, V50}, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V51} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isVisible'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V18)) end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V22, V23, V24, V25)) end end end end end end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V27)) end end, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V30, V31, V32)) end end end end end}, fun (V33) -> ('nested--22579-17955--in--un--visible'(V1, V0, V33)) end, ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--allParents'(case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V36 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.List':'un--++'(case V6 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V65 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V6 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117) -> case V90 of {'Idris.Core.Context.MkContext', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128) -> V125 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isUnboundImplicits'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> V44 end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isPrefixRecordProjections'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V9 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V36 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V42, V43, V44, V45, V46, V47, V48) -> V48 end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V49) -> begin (V50 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V50} end end, V1)).
'un--isPairType'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V39 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E39} -> (fun (V44) -> begin (V45 = ('un--getFullName'(V0, V1, V2))), case V45 of {'Idris.Prelude.Types.Left', E40} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V47) -> begin (V51 = ('un--getFullName'(V0, case V44 of {'Idris.Core.Options.MkPairNs', E42, E43, E44} -> (fun (V48, V49, V50) -> V48 end(E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V51 of {'Idris.Prelude.Types.Left', E45} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V47, V53))} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isLazyActive'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> V43 end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isHidden'(V0, V1) -> ('Idris.Idris2.Data.Maybe':'un--isJust'(('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V12 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))).
'un--isExtension'(V0, V1) -> ('Idris.Idris2.Core.Options':'un--isExtension'(V0, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--isEqualTy'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V40 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E39} -> (fun (V44) -> begin (V45 = ('un--getFullName'(V0, V1, V2))), case V45 of {'Idris.Prelude.Types.Left', E40} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V47) -> begin (V50 = ('un--getFullName'(V0, case V44 of {'Idris.Core.Options.MkRewriteNs', E42, E43} -> (fun (V48, V49) -> V48 end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V50 of {'Idris.Prelude.Types.Left', E44} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V52) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V47, V52))} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isAllPublic'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V6 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V42 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initSize'() -> 10000.
'un--initHash'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, 5381, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initDefs'(V0) -> begin (V1 = ('un--initCtxt'(V0))), case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', V2} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkDefs', V3, [], ('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()), [], ('Idris.Idris2.Core.Options':'un--defaults'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), 100, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), [], [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), [], ('un--initBuiltinTransforms'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), 5381, [], [], [], [], [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()), []}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initCtxtS'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Context.Arr'}, V32, V1))), case V33 of {'Idris.Prelude.Types.Left', E2} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkContext', 0, 0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'()), V35, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'()), [('Idris.Idris2.Core.Name.Namespace':'un--partialEvalNS'()) | []], 0, 0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'())}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initCtxt'(V0) -> ('un--initCtxtS'(('un--initSize'()), V0)).
'un--initBuiltinTransforms'() -> begin (V0 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Idris.Core.Name.UN', <<"Nat"/utf8>>}}), begin (V1 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Idris.Core.Name.UN', <<"Z"/utf8>>}}), begin (V2 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Idris.Core.Name.UN', <<"S"/utf8>>}}), {'Idris.Core.Context.MkBuiltinTransforms', ('Idris.Idris2.Libraries.Data.NameMap':'un--singleton'(V0, {'Idris.Core.Context.MkNatBuiltin', V1, V2})), ('Idris.Idris2.Libraries.Data.NameMap':'un--singleton'(V1, 0)), ('Idris.Idris2.Libraries.Data.NameMap':'un--singleton'(V2, 0)), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'())} end end end.
'un--inCurrentNS'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.UN', E0} -> (fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V10 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Name.UN', V3}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.Name.CaseBlock', E31, E32} -> (fun (V36, V37) -> begin (V39 = begin (V38 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E33} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V41 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V44 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); {'Idris.Core.Name.WithBlock', E63, E64} -> (fun (V70, V71) -> begin (V73 = begin (V72 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E65} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V75 of {'Idris.Core.Context.MkDefs', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V78 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63, E64)); {'Idris.Core.Name.Nested', E95, E96} -> (fun (V104, V105) -> begin (V107 = begin (V106 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V106} end), case V107 of {'Idris.Prelude.Types.Left', E97} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V109 of {'Idris.Core.Context.MkDefs', E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137) -> V112 end(E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95, E96)); {'Idris.Core.Name.MN', E127, E128} -> (fun (V138, V139) -> begin (V141 = begin (V140 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E129} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V143) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V143 of {'Idris.Core.Context.MkDefs', E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158} -> (fun (V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171) -> V146 end(E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127, E128)); {'Idris.Core.Name.DN', E159, E160} -> (fun (V172, V173) -> begin (V175 = begin (V174 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V174} end), case V175 of {'Idris.Prelude.Types.Left', E161} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V177) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V177 of {'Idris.Core.Context.MkDefs', E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190} -> (fun (V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205) -> V180 end(E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159, E160)); {'Idris.Core.Name.RF', E191} -> (fun (V206) -> begin (V208 = begin (V207 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V207} end), case V208 of {'Idris.Prelude.Types.Left', E192} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E192)); {'Idris.Prelude.Types.Right', E193} -> (fun (V210) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V210 of {'Idris.Core.Context.MkDefs', E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221} -> (fun (V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238) -> V213 end(E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E191)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'un--holeInit'(V0) -> {'Idris.Core.Context.MkHoleFlags', V0, 0}.
'un--hideName'(V0, V1) -> case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V0, 0, V12))} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--hide'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of [E32 | E33] -> (fun (V39, V40) -> case V39 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V41, V42) -> case V40 of [] -> begin (V71 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> {'Idris.Core.Context.MkDefs', ('un--hideName'(V41, V43)), V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V71} end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V72) -> ('Idris.Idris2.Builtin':'un--fst'(V72)) end, V38))}, V3)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V73) -> ('Idris.Idris2.Builtin':'un--fst'(V73)) end, V38))}, V3)) end end(E32, E33)); [] -> ('un--undefinedName'(V0, V1, V2, V3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V74) -> ('Idris.Idris2.Builtin':'un--fst'(V74)) end, V38))}, V3)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--hasFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V41) -> fun (V42) -> ('dn--un--==_Eq_DefFlag'(V41, V42)) end end, fun (V43) -> fun (V44) -> ('dn--un--/=_Eq_DefFlag'(V43, V44)) end end}, V3, case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V56 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getWorkingDir'(V0) -> begin (V29 = begin (V28 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> case V31 of {'Idris.Prelude.Types.Just', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Right', V32} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVisible'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V6 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V41 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVisibility'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Right', case V39 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V49 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getUserHoles'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V52 = ('Idris.Idris2.Data.List':'un--sort'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V22, V23)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V48 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), ('Idris.Idris2.Core.Core':'un--filterM'(fun (V53) -> fun (V54) -> ('nested--16136-12141--in--un--isHole'(V0, V5, V53, V54)) end end, V52, V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTotality'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Right', case V39 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V50 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSizeChange'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E32} -> (fun (V39) -> {'Idris.Prelude.Types.Right', case V39 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V60 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'(V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSimilarNames'(V0, V1) -> ('case--getSimilarNames-11471'(V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1)))).
'un--getSession'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V36 end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSearchData'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = ('un--lookupDefExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> case V40 of {'Idris.Core.Context.TCon', E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48) -> begin (V117 = begin (V55 = ('un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V49) -> fun (V50) -> fun (V51) -> ('dn--un--full_HasNames_Name'(V49, V50, V51)) end end end, fun (V52) -> fun (V53) -> fun (V54) -> ('dn--un--resolved_HasNames_Name'(V52, V53, V54)) end end end}, V3, V4))), case V55 of {'Idris.Prelude.Types.Left', E41} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V57) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V57, case V8 of {'Idris.Core.Context.MkDefs', E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V65 end(E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E43} -> (fun (V86) -> ('Idris.Idris2.Core.Core':'un--filterM'(fun (V87) -> fun (V88) -> ('nested--19069-14771--in--un--notHidden'(V3, V2, V1, V0, V87, case V8 of {'Idris.Core.Context.MkDefs', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116) -> V89 end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V88)) end end, V86, V4)) end(E43)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V117 of {'Idris.Prelude.Types.Left', E100} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V119) -> case V2 of 1 -> begin (V181 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V120) -> fun (V121) -> begin (V150 = ('nested--19069-14771--in--un--notHidden'(V3, V2, V1, V0, V120, case V8 of {'Idris.Core.Context.MkDefs', E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129} -> (fun (V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149) -> V122 end(E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V121))), case V150 of {'Idris.Prelude.Types.Left', E130} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V152) -> {'Idris.Prelude.Types.Right', case ('nested--19069-14772--in--un--isDefault'(V3, V2, V1, V0, V120)) of 1 -> V152; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V8 of {'Idris.Core.Context.MkDefs', E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159} -> (fun (V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180) -> V161 end(E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V4))), case V181 of {'Idris.Prelude.Types.Left', E160} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V183) -> begin (V185 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V184) -> ('Idris.Idris2.Builtin':'un--fst'(V184)) end, V183))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', [], [{'Idris.Builtin.MkPair', 0, V185} | []]}} end end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V244 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V186) -> fun (V187) -> ('nested--19069-14771--in--un--notHidden'(V3, V2, V1, V0, V186, case V8 of {'Idris.Core.Context.MkDefs', E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189} -> (fun (V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215) -> V188 end(E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V187)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V8 of {'Idris.Core.Context.MkDefs', E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217} -> (fun (V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243) -> V225 end(E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V4))), case V244 of {'Idris.Prelude.Types.Left', E218} -> (fun (V245) -> {'Idris.Prelude.Types.Left', V245} end(E218)); {'Idris.Prelude.Types.Right', E219} -> (fun (V246) -> begin (V248 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V247) -> ('Idris.Idris2.Builtin':'un--fst'(V247)) end, V246))), begin (V310 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V249) -> fun (V250) -> begin (V279 = ('nested--19069-14771--in--un--notHidden'(V3, V2, V1, V0, V249, case V8 of {'Idris.Core.Context.MkDefs', E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247} -> (fun (V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278) -> V251 end(E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V250))), case V279 of {'Idris.Prelude.Types.Left', E248} -> (fun (V280) -> {'Idris.Prelude.Types.Left', V280} end(E248)); {'Idris.Prelude.Types.Right', E249} -> (fun (V281) -> {'Idris.Prelude.Types.Right', case ('nested--19069-14772--in--un--isDefault'(V3, V2, V1, V0, V249)) of 1 -> 0; 0 -> V281; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V8 of {'Idris.Core.Context.MkDefs', E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277} -> (fun (V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309) -> V290 end(E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274, E275, E276, E277)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V4))), case V310 of {'Idris.Prelude.Types.Left', E278} -> (fun (V311) -> {'Idris.Prelude.Types.Left', V311} end(E278)); {'Idris.Prelude.Types.Right', E279} -> (fun (V312) -> begin (V314 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V313) -> ('Idris.Idris2.Builtin':'un--fst'(V313)) end, V312))), begin (V317 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V315) -> ('Idris.Idris2.Builtin':'un--fst'(V315)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V316) -> ('nested--19069-14773--in--un--direct'(V3, V2, V1, V0, V316)) end, V119))))), begin (V320 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V318) -> ('Idris.Idris2.Builtin':'un--fst'(V318)) end, ('Idris.Idris2.Data.List':'un--filter'(fun (V319) -> case ('nested--19069-14773--in--un--direct'(V3, V2, V1, V0, V319)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V119))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', V44, ('Idris.Idris2.Data.List':'un--filter'(fun (V321) -> ('Idris.Idris2.Data.List':'un--isCons'(('Idris.Idris2.Builtin':'un--snd'(V321)))) end, [{'Idris.Builtin.MkPair', 0, V248} | [{'Idris.Builtin.MkPair', 0, V314} | [{'Idris.Builtin.MkPair', case case V45 of {'Idris.Core.Context.MkTypeFlags', E280, E281} -> (fun (V322, V323) -> V322 end(E280, E281)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V317} | [{'Idris.Builtin.MkPair', 1, V320} | []]]]]))}} end end end end(E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('un--undefinedName'(V0, V1, V3, V4)) end end(E32)); _ -> ('un--undefinedName'(V0, V1, V3, V4)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getRewrite'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkRewriteNs', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case V5 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> case V13 of {'Idris.Core.Options.MkOptions', E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V42 end(E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getResolvedAs'(V0) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPrimitiveNames'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Options':'un--primNamesToList'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> ('un--getPrimNames'(V0, V5)) end, V1)).
'un--getPrimNames'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V2) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V3) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> {'Idris.Prelude.Types.Right', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> {'Idris.Core.Options.MkPrimNs', V6, V7, V8, V9} end end end end} end, fun (V10) -> ('un--fromIntegerName'(V0, V10)) end, V4)) end, fun (V11) -> ('un--fromStringName'(V0, V11)) end, V3)) end, fun (V12) -> ('un--fromCharName'(V0, V12)) end, V2)) end, fun (V13) -> ('un--fromDoubleName'(V0, V13)) end, V1)).
'un--getPosition'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E12} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, V1}} end end(E12)); _ -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V6 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, V1}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--newEntry'(V0, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getPPrint'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V35 end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNextTypeTag'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V35 = begin (V34 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, ((V12 + 1) rem 9223372036854775808), V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V44 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNextEntry'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V6 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V35 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNestedNS'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNameID'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E11)); _ -> ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end.
'un--getNS'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getImported'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V25 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFullName'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V3}, case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V36 of {'Idris.Prelude.Types.Left', E31} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Right', case V39 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V41 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E33)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V3}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', V1} end.
'un--getFnName'(V0) -> case V0 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> case ('Idris.Idris2.Core.TT':'un--getFn'(V4)) of {'Idris.Core.TT.Ref', E5, E6, E7} -> (fun (V6, V7, V8) -> {'Idris.Prelude.Types.Just', V8} end(E5, E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getFieldNames'(V0, V1) -> begin (V13 = case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V14) -> fun (V15) -> ('Idris.Idris2.Libraries.Data.NameMap':'un--filterBy'(V14, V15)) end end, V13, fun (V16) -> case ('Idris.Idris2.Core.Name':'un--isRF'(V16)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> 0 end()); {'Idris.Prelude.Types.Just', E11} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V18, V19) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V18, V1)) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)))) end.
'un--getDirs'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V34 end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDirectives'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V7) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V7} end, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V12 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> case V38 of {'Idris.Core.Options.MkSessionOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V49 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V64) -> ('nested--21869-17287--in--un--getDir'(V1, V0, V64)) end, case V6 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> V86 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDefaultTotalityOption'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> V45 end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getContent'(V0) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getAutoImplicitLimit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> V47 end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAmbigLimit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E39, E40, E41, E42, E43, E44, E45} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> V46 end(E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--full'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.dn--un--__mkHasNames', E0, E1} -> (fun (V3, V4) -> ((V3(V1))(V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fstName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkPairNs', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case V5 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V14 of {'Idris.Core.Options.MkOptions', E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V42 end(E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromStringName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V40 of {'Idris.Core.Options.MkPrimNs', E39, E40, E41, E42} -> (fun (V43, V44, V45, V46) -> V44 end(E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromIntegerName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V40 of {'Idris.Core.Options.MkPrimNs', E39, E40, E41, E42} -> (fun (V43, V44, V45, V46) -> V43 end(E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromDoubleName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V40 of {'Idris.Core.Options.MkPrimNs', E39, E40, E41, E42} -> (fun (V43, V44, V45, V46) -> V46 end(E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromCharName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V10 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V40 of {'Idris.Core.Options.MkPrimNs', E39, E40, E41, E42} -> (fun (V43, V44, V45, V46) -> V45 end(E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findSetTotal'(V0) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Core.Context.SetTotal', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> ('un--findSetTotal'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extendNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, V1)), V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpStaging'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V75 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Staging area: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V33) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V34, V35)) end end}, ('Idris.Idris2.Libraries.Data.IntMap':'un--keys'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> case V36 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V70 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))(V1))), {'Idris.Prelude.Types.Right', V75} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropOpenHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V13 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V1, V2))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V15, V25)), V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropMutData'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V36 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, ('Idris.Idris2.Data.List':'un--filter'(fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V35, V1)) end, V8)), V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V36} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--depth'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V6 of {'Idris.Core.Context.MkContext', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V39 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--defaultPI'() -> {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 0}.
'un--defaultFlags'() -> {'Idris.Core.Context.MkTypeFlags', 0, 0}.
'un--decode'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Context.Coded', E0, E1} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Libraries.Utils.Binary.Bin'}, V6, V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_GlobalDef'(V9, V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = ('un--getContent'(V0))), begin (V15 = begin (V14 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = ('dn--un--resolved_HasNames_GlobalDef'(V0, ('dn--un--restoreNS_StripNamespace_GlobalDef'(V5, V12)), V4))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V49 = case V2 of 1 -> begin (V48 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> V27 end end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), begin (V35 = (V32(V33))), (V34(V35)) end end end end end end end}, fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V38(V40))), ((V39(V41))(V40)) end end end end end end, fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V43(V44))), (V45(V44)) end end end end}, fun (V46) -> fun (V47) -> V47 end end}, V17, V1, {'Idris.Core.Context.Decoded', V20}))(V4))), {'Idris.Prelude.Types.Right', V48} end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V49 of {'Idris.Prelude.Types.Left', E10} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V51) -> {'Idris.Prelude.Types.Right', V20} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.Context.Decoded', E12} -> (fun (V52) -> {'Idris.Prelude.Types.Right', V52} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--commitCtxt'(V0) -> ('case--commitCtxt-6583'(V0, case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--commit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = (('un--commitCtxt'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1))), case V34 of {'Idris.Prelude.Types.Left', E30} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V36) -> ('un--setCtxt'(V0, V36, V1)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearUserHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'(V1, V31)), V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearSavedHints'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, [], [], V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearDefs'(V0, V1) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V2 of {'Idris.Core.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V30, V31, V32, V33, V34, V35, V36, V37, V38, 1, V40}, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--clearCtxt'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('un--initDefs'(V1))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V93 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, ('nested--15170-11251--in--un--resetElab'(V0, case V5 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V41 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, case V5 of {'Idris.Core.Context.MkDefs', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> V91 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V36} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V93} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkUnambig'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = ('un--lookupDefName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of [] -> ('un--undefinedName'(V0, V1, V2, V3)); [E32 | E33] -> (fun (V39, V40) -> case V39 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V43, V44) -> case V40 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V43}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V45) -> ('Idris.Idris2.Builtin':'un--fst'(V45)) end, V38))}, V3)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'(V46)) end, V38))}, V3)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('Idris.Idris2.Builtin':'un--fst'(V47)) end, V38))}, V3)) end end(E32, E33)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('Idris.Idris2.Builtin':'un--fst'(V48)) end, V38))}, V3)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--canonicalName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of [] -> ('un--undefinedName'(V0, V1, V2, V3)); [E32 | E33] -> (fun (V39, V40) -> case V39 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V43, V44) -> case V40 of [] -> {'Idris.Prelude.Types.Right', V41}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V45) -> ('Idris.Idris2.Builtin':'un--fst'(V45)) end, V38))}, V3)) end end(E36, E37)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'(V46)) end, V38))}, V3)) end end(E34, E35)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> ('Idris.Idris2.Builtin':'un--fst'(V47)) end, V38))}, V3)) end end(E32, E33)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V48) -> ('Idris.Idris2.Builtin':'un--fst'(V48)) end, V38))}, V3)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--branchCtxt'(V0, V1) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, (1 + V7), V8, V9, V10, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--branch'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = ('un--branchCtxt'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))), case V34 of {'Idris.Prelude.Types.Left', E30} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V36) -> begin (V37 = ('un--setCtxt'(V0, V36, V1))), case V37 of {'Idris.Prelude.Types.Left', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Right', V5} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--allNames'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_Name'(V0, V2, V3)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> {'Idris.Core.Name.Resolved', V4} end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'({'Idris.Builtin.MkPair', {'Idris.Prelude.Num.MkIntegral', {'Idris.Prelude.Num.MkNum', fun (V5) -> fun (V6) -> ((V5 + V6) rem 9223372036854775808) end end, fun (V7) -> fun (V8) -> ((V7 * V8) rem 9223372036854775808) end end, fun (V9) -> V9 end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V12, V13)) end end}, {'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V16, V17)) end end}, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V30, V31)) end end}, {'Idris.Prelude.Num.MkNeg', {'Idris.Prelude.Num.MkNum', fun (V32) -> fun (V33) -> ((V32 + V33) rem 9223372036854775808) end end, fun (V34) -> fun (V35) -> ((V34 * V35) rem 9223372036854775808) end end, fun (V36) -> V36 end}, fun (V37) -> ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg_Int'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V38, V39)) end end}}}, 1, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V41 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 1)))))), [], V1)).
'un--aliasName'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--aliasName-11852'(V1, V0, V6, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addUserHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V1, 0, V31)), V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addTransform'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('case--addTransform-16655'(V2, V1, V0, V7, ('un--getFnName'(V2)), V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addToSave'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('dn--un--full_HasNames_Name'(case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V2))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> begin (V66 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> {'Idris.Core.Context.MkDefs', V38, V39, V40, V41, V42, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V37, 0, V43)), V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V37, 0, V61)), V62, V63, V64, V65} end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V66} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addPossible'(V0, V1, V2) -> ('case--addPossible-5105'(V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--addPkg'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V63 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V37 of {'Idris.Core.Options.MkSessionOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, {'Idris.Core.Options.MkSessionOpts', V44, V45, V46, V47, V48, ('Idris.Idris2.Prelude.Types.List':'un--++'(V49, [V1 | []])), V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62}, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V63} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addPackageDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V45, V46, V47, V48, V49, V50, ('Idris.Idris2.Prelude.Types.List':'un--++'(V51, [V1 | []])), V52, V53}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addOpenHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V13 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V1, V2))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, 0, V25)), V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addNameDirective'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('un--checkUnambig'(V0, V1, V2, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V40 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V11, V3, V28)), V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V40} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addName'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.Resolved', E36} -> (fun (V3) -> {'Idris.Prelude.Types.Right', V3} end(E36)); _ -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--newEntry'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V39, V40) -> begin (V41 = ('un--setCtxt'(V0, V40, V2))), case V41 of {'Idris.Prelude.Types.Left', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V43) -> {'Idris.Prelude.Types.Right', V39} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--addMutData'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, [V1 | V8], V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLogLevel'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V63 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V37 of {'Idris.Core.Options.MkSessionOpts', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V35, V36, {'Idris.Core.Options.MkSessionOpts', V44, V45, V46, V47, V48, V49, V50, 1, ('Idris.Idris2.Core.Options.Log':'un--defaultLogLevel'()), V53, V54, V55, V56, V57, V58, V59, V60, V61, V62}, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V63} end end()); {'Idris.Prelude.Types.Just', E58} -> (fun (V64) -> begin (V121 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> case V69 of {'Idris.Core.Options.MkOptions', E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V93, V94, V95, V96, V97, V98, V99, V100, V101) -> case V95 of {'Idris.Core.Options.MkSessionOpts', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114} -> (fun (V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> {'Idris.Core.Context.MkDefs', V65, V66, V67, V68, {'Idris.Core.Options.MkOptions', V93, V94, {'Idris.Core.Options.MkSessionOpts', V102, V103, V104, V105, V106, V107, V108, 1, ('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V64, V110)), V111, V112, V113, V114, V115, V116, V117, V118, V119, V120}, V96, V97, V98, V99, V100, V101}, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92} end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V121} end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLocalHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V13 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V7, V8, V9)) end end end, fun (V10) -> fun (V11) -> fun (V12) -> ('dn--un--resolved_HasNames_Name'(V10, V11, V12)) end end end}, V1, V2))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> begin (V44 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V15, 0, V26)), V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V44} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLibDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V45, V46, V47, V48, V49, V50, V51, ('Idris.Idris2.Prelude.Types.List':'un--++'(V52, [V1 | []])), V53}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addImported'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, [V1 | V26], V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHintFor'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V17 = ('un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--full_HasNames_Name'(V11, V12, V13)) end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--resolved_HasNames_Name'(V14, V15, V16)) end end end}, V2, V6))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V26 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V20) -> fun (V21) -> fun (V22) -> ('dn--un--full_HasNames_Name'(V20, V21, V22)) end end end, fun (V23) -> fun (V24) -> fun (V25) -> ('dn--un--resolved_HasNames_Name'(V23, V24, V25)) end end end}, V3, V6))), case V26 of {'Idris.Prelude.Types.Left', E4} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V28) -> begin (V58 = case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V19, case V10 of {'Idris.Core.Context.MkDefs', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V36 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E6} -> (fun (V57) -> V57 end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V5 of 1 -> begin (V87 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> {'Idris.Core.Context.MkDefs', V59, V60, V61, V62, V63, V64, V65, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V19, [{'Idris.Builtin.MkPair', V28, V4} | V58], V66)), V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V87} end; 0 -> begin (V116 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> {'Idris.Core.Context.MkDefs', V88, V89, V90, V91, V92, V93, V94, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V19, [{'Idris.Builtin.MkPair', V28, V4} | V58], V95)), V96, V97, V98, [{'Idris.Builtin.MkPair', V19, {'Idris.Builtin.MkPair', V28, V4}} | V99], V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115} end(E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V116} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHashWithNames'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--toFullNames'(V0, V2, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('un--addHash'(V0, V1, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHash'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V66 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, case V1 of {'Idris.Core.Hash.dn--un--__mkHashable', E30, E31} -> (fun (V36, V37) -> ((V37(case V7 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V55 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V66} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addGlobalHint'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V14 = ('un--toResolvedNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--full_HasNames_Name'(V8, V9, V10)) end end end, fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--resolved_HasNames_Name'(V11, V12, V13)) end end end}, V1, V3))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V45 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> {'Idris.Core.Context.MkDefs', V17, V18, V19, V20, V21, V22, V23, V24, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'(V16, V2, V25)), V26, V27, V28, [{'Idris.Builtin.MkPair', V16, V2} | V29], V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V45} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addExtraDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V45, V46, V47, V48, V49, ('Idris.Idris2.Prelude.Types.List':'un--++'(V50, [V1 | []])), V51, V52, V53}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addEntry'(V0, V1, V2, V3) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(case V2 of {'Idris.Core.Context.MkContext', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V9 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0)) of 1 -> begin (V15 = (('un--getPosition'(V0, V2))(V3))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> begin (V31 = case V19 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V24 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V33 = begin (V32 = ('erlang':'get'(V31))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> begin (V64 = begin (V63 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, V35, V18, V1))(V3))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E17} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, V19}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V67 = (('un--getPosition'(V0, V2))(V3))), case V67 of {'Idris.Prelude.Types.Left', E19} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V69) -> case V69 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V70, V71) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V70, case V71 of {'Idris.Core.Context.MkContext', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> {'Idris.Core.Context.MkContext', V72, V73, V74, V75, V76, V77, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V70, V1, V78)), V79, V80, V81, V82} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addDirective'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case ('Idris.Idris2.Core.Options':'un--getCG'(case V7 of {'Idris.Core.Context.MkDefs', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V12 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V63 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown code generator "/utf8>>, V1))))(V3))), {'Idris.Prelude.Types.Right', V63} end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V64) -> begin (V122 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> {'Idris.Core.Context.MkDefs', V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, begin (V93 = {'Idris.Core.Context.MkDefs', V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92}), [{'Idris.Builtin.MkPair', case V93 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121) -> V96 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V64, V2}} | V86] end, V87, V88, V89, V90, V91, V92} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V122} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = ('un--addCtxt'(V1, V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V39, V40) -> begin (V70 = begin (V69 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> {'Idris.Core.Context.MkDefs', V40, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V69} end), case V70 of {'Idris.Prelude.Types.Left', E62} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V72) -> begin (V117 = case V2 of {'Idris.Core.Context.MkGlobalDef', E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> case V90 of {'Idris.Core.Context.None'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Core.Context.Hole', E106, E107} -> (fun (V94, V95) -> {'Idris.Prelude.Types.Right', 0} end(E106, E107)); _ -> ('un--clearUserHole'(V0, case V2 of {'Idris.Core.Context.MkGlobalDef', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116) -> V97 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)) end end(E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V117 of {'Idris.Prelude.Types.Left', E108} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V119) -> {'Idris.Prelude.Types.Right', V39} end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDataDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V54 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V11 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V35 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V44, V45, V46, V47, V48, V49, V50, V51, V52, ('Idris.Idris2.Prelude.Types.List':'un--++'(V53, [V1 | []]))}, V36, V37, V38, V39, V40, V41, V42, V43}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V54} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addCtxt'(V0, V1, V2, V3) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(case V2 of {'Idris.Core.Context.MkContext', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V9 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0)) of 1 -> begin (V15 = (('un--getPosition'(V0, V2))(V3))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V18, V19) -> begin (V31 = case V19 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V24 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V33 = begin (V32 = ('erlang':'get'(V31))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> begin (V64 = begin (V63 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V38, V39, V40)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> V42 end end end, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), begin (V50 = (V47(V48))), (V49(V50)) end end end end end end end}, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), ((V54(V56))(V55)) end end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> begin (V60 = (V58(V59))), (V60(V59)) end end end end}, fun (V61) -> fun (V62) -> V62 end end}, V35, V18, {'Idris.Core.Context.Decoded', V1}))(V3))), {'Idris.Prelude.Types.Right', V63} end), case V64 of {'Idris.Prelude.Types.Left', E17} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V18, V19}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V67 = (('un--getPosition'(V0, V2))(V3))), case V67 of {'Idris.Prelude.Types.Left', E19} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V69) -> case V69 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V70, V71) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V70, case V71 of {'Idris.Core.Context.MkContext', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> {'Idris.Core.Context.MkContext', V72, V73, V74, V75, V76, V77, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'(V70, {'Idris.Core.Context.Decoded', V1}, V78)), V79, V80, V81, V82} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addContextEntry'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = ('un--addEntry'(V2, {'Idris.Core.Context.Coded', V1, V3}, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E32, E33} -> (fun (V40, V41) -> begin (V71 = begin (V70 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> {'Idris.Core.Context.MkDefs', V41, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V70} end), case V71 of {'Idris.Prelude.Types.Left', E62} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V73) -> {'Idris.Prelude.Types.Right', V40} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addContextAlias'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V36 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V36 of {'Idris.Prelude.Types.Left', E30} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V67 = ('un--newAlias'(V1, V2, case V7 of {'Idris.Core.Context.MkDefs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V39 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V67 of {'Idris.Prelude.Types.Left', E60} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V69) -> begin (V98 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97) -> {'Idris.Core.Context.MkDefs', V69, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97} end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V98} end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', 0} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addBuiltin'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('un--addDef'(V1, V2, {'Idris.Core.Context.MkGlobalDef', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2, V3, [], [], [], [], ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), [], 2, V4, [{'Idris.Core.Context.Inline'} | []], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, 0, 0, 1, {'Idris.Core.Context.Builtin', V0, V5}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, []}, V10)) end, V6)).
'un--addAlias'(V0, V1, V2, V3) -> ('case--addAlias-5166'(V3, V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--Grow'() -> ('un--initSize'()).
