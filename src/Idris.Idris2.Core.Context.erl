-module('Idris.Idris2.Core.Context').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--recordWarning-20265'/3,
  'case--setSession-20213'/3,
  'case--setDebugElabCheck-20140'/3,
  'case--setLogTimings-20063'/3,
  'case--withLogLevel-19980'/6,
  'case--withLogLevel-19907'/8,
  'case--case block in addLogLevel-19800'/4,
  'case--case block in addLogLevel-19727'/3,
  'case--addLogLevel-19661'/3,
  'case--isEqualTy-19533'/4,
  'case--isPairType-19416'/4,
  'case--addNameDirective-19389'/6,
  'case--setFromDouble-19330'/3,
  'case--setFromChar-19278'/3,
  'case--setFromString-19226'/3,
  'case--setFromInteger-19174'/3,
  'case--setRewrite-19114'/7,
  'case--setPair-19040'/9,
  'case--setNFThreshold-18898'/3,
  'case--setAutoImplicitLimit-18828'/3,
  'case--setAmbigLimit-18758'/3,
  'case--setDefaultTotalityOption-18689'/3,
  'case--setPrefixRecordProjections-18620'/3,
  'case--setUnboundImplicits-18551'/3,
  'case--lazyActive-18482'/3,
  'case--checkUnambig-18361'/5,
  'case--setExtension-18334'/3,
  'case--setPrefix-18281'/3,
  'case--getWorkingDir-18204'/1,
  'case--case block in setWorkingDir-18166'/5,
  'case--setWorkingDir-18102'/4,
  'case--setSourceDir-18063'/3,
  'case--setOutputDir-17991'/3,
  'case--setDependsDir-17919'/3,
  'case--setBuildDir-17847'/3,
  'case--addLibDir-17765'/3,
  'case--addDataDir-17683'/3,
  'case--addPackageDir-17601'/3,
  'case--addExtraDir-17519'/3,
  'case--addPkg-17426'/3,
  'case--setCG-17349'/3,
  'case--setPPrint-17273'/3,
  'case--getFullName-17185'/4,
  'case--resetFirstEntry-17162'/2,
  'case--setNextEntry-17100'/3,
  'case--setAllPublic-16993'/3,
  'case--setVisible-16912'/3,
  'case--extendNS-16751'/3,
  'case--getNextTypeTag-16693'/2,
  'case--getDirectives,getDir-16585'/6,
  'case--case block in addDirective-16542'/5,
  'case--addDirective-16477'/5,
  'case--addImported-16437'/3,
  'case--setNestedNS-16363'/3,
  'case--setNS-16312'/3,
  'case--clearSavedHints-16259'/2,
  'case--case block in case block in addTransform-16163'/10,
  'case--case block in case block in addTransform-16071'/9,
  'case--case block in addTransform-16014'/10,
  'case--addTransform-15966'/5,
  'case--setOpenHints-15947'/3,
  'case--dropOpenHint-15892'/4,
  'case--addOpenHint-15828'/4,
  'case--addLocalHint-15764'/4,
  'case--addGlobalHint-15687'/5,
  'case--case block in addHintFor-15589'/10,
  'case--case block in addHintFor-15507'/10,
  'case--addHintFor-15452'/10,
  'case--addHintFor-15407'/10,
  'case--case block in case block in setExternal-15303'/15,
  'case--case block in setExternal-15274'/8,
  'case--setExternal-15259'/6,
  'case--case block in case block in setUniqueSearch-15170'/15,
  'case--case block in setUniqueSearch-15141'/8,
  'case--setUniqueSearch-15126'/6,
  'case--case block in setDetags-15042'/8,
  'case--setDetags-15027'/6,
  'case--case block in setDetermining-14934'/8,
  'case--setDetermining-14919'/6,
  'case--setDetermining,getPos-14784'/15,
  'case--dropMutData-14742'/3,
  'case--addMutData-14684'/3,
  'case--case block in setMutWith-14574'/8,
  'case--setMutWith-14559'/6,
  'case--case block in getSearchData-14302'/15,
  'case--case block in getSearchData-14227'/16,
  'case--getSearchData-14184'/6,
  'case--getVisibility-14100'/5,
  'case--case block in hide-14034'/7,
  'case--hide-13979'/5,
  'case--case block in setVisibility-13934'/7,
  'case--setVisibility-13894'/6,
  'case--getSizeChange-13849'/5,
  'case--getTotality-13804'/5,
  'case--case block in setTerminating-13757'/7,
  'case--setTerminating-13715'/6,
  'case--case block in setCovering-13667'/7,
  'case--setCovering-13625'/6,
  'case--case block in setTotality-13578'/7,
  'case--setTotality-13538'/6,
  'case--case block in setSizeChange-13491'/7,
  'case--setSizeChange-13451'/6,
  'case--hasFlag-13400'/6,
  'case--case block in unsetFlag-13352'/8,
  'case--unsetFlag-13304'/6,
  'case--case block in setNameFlag-13227'/10,
  'case--setNameFlag-13167'/6,
  'case--case block in setFlag-13119'/8,
  'case--setFlag-13069'/6,
  'case--lookupNameBy-12829'/6,
  'case--lookupExactBy-12778'/5,
  'case--addToSave-12750'/4,
  'case--addName-12616'/4,
  'case--resolveName-12579'/4,
  'case--setCtxt-12553'/3,
  'case--case block in setLinearCheck-12485'/6,
  'case--setLinearCheck-12447'/5,
  'case--case block in setNamedCompiled-12404'/6,
  'case--setNamedCompiled-12366'/5,
  'case--case block in setCompiled-12323'/6,
  'case--setCompiled-12285'/5,
  'case--case block in updateTy-12244'/6,
  'case--updateTy-12206'/5,
  'case--case block in case block in updateDef-12161'/7,
  'case--case block in updateDef-12100'/7,
  'case--updateDef-12085'/5,
  'case--case block in addContextAlias-12007'/6,
  'case--addContextAlias-11957'/5,
  'case--case block in addContextEntry-11925'/7,
  'case--addContextEntry-11872'/5,
  'case--case block in addDef-11840'/7,
  'case--case block in addDef-11754'/8,
  'case--addDef-11726'/5,
  'case--case block in getUserHoles,isHole-11637'/6,
  'case--getUserHoles,isHole-11626'/4,
  'case--clearUserHole-11607'/3,
  'case--addUserHole-11553'/3,
  'case--initHash-11502'/2,
  'case--addHash-11443'/5,
  'case--case block in aliasName-11356'/5,
  'case--aliasName-11342'/4,
  'case--aliasName,findAlias-11297'/7,
  'case--canonicalName-11219'/5,
  'case--maybeMisspelling-11154'/5,
  'case--case block in case block in getSimilarNames-11028'/6,
  'case--case block in getSimilarNames-10997'/4,
  'case--getSimilarNames-10971'/3,
  'case--case block in getSimilarNames,showNames-10915'/8,
  'case--getSimilarNames,showNames-10884'/7,
  'case--clearCtxt-10866'/3,
  'case--clearCtxt,resetElab-10815'/2,
  'case--clearDefs-10743'/1,
  'case--resolved-9095'/8,
  'case--full-8999'/8,
  'case--resolved-8816'/3,
  'case--full-8797'/3,
  'case--resolved-7853'/8,
  'case--full-7749'/8,
  'case--resolved-7019'/8,
  'case--resolved-6969'/6,
  'case--full-6772'/6,
  'case--resolved-6720'/3,
  'case--full-6696'/3,
  'case--getFnName-6616'/6,
  'case--case block in commitCtxt-6570'/2,
  'case--case block in commitCtxt-6542'/3,
  'case--commitCtxt-6501'/2,
  'case--branchCtxt-6474'/1,
  'case--hideName-6451'/2,
  'case--case block in lookupCtxtName-6412'/4,
  'case--case block in lookupCtxtName-6368'/3,
  'case--lookupCtxtName-6353'/3,
  'case--case block in case block in lookupCtxtName,lookupPossibles-6269'/10,
  'case--case block in lookupCtxtName,lookupPossibles-6240'/8,
  'case--lookupCtxtName,lookupPossibles-6215'/8,
  'case--case block in case block in lookupCtxtName,lookupPossibles-6135'/9,
  'case--case block in lookupCtxtName,lookupPossibles-6108'/7,
  'case--lookupCtxtName,lookupPossibles-6085'/7,
  'case--lookupContextEntry-6031'/3,
  'case--case block in lookupContextEntry-5996'/5,
  'case--lookupContextEntry-5954'/3,
  'case--lookupCtxtExact-5924'/3,
  'case--case block in case block in lookupCtxtExact-5857'/8,
  'case--case block in lookupCtxtExact-5839'/5,
  'case--case block in lookupCtxtExact-5778'/5,
  'case--lookupCtxtExact-5763'/3,
  'case--lookupCtxtExactI-5739'/3,
  'case--case block in lookupCtxtExactI-5705'/5,
  'case--lookupCtxtExactI-5664'/3,
  'case--case block in returnDef-5612'/8,
  'case--returnDef-5596'/3,
  'case--case block in case block in addEntry-5569'/6,
  'case--case block in addEntry-5538'/4,
  'case--case block in addEntry-5492'/4,
  'case--addEntry-5476'/4,
  'case--case block in case block in addCtxt-5451'/6,
  'case--case block in addCtxt-5420'/4,
  'case--case block in addCtxt-5374'/4,
  'case--addCtxt-5358'/4,
  'case--case block in newAlias-5330'/6,
  'case--newAlias-5303'/4,
  'case--getPosition-5272'/3,
  'case--newEntry-5240'/5,
  'case--case block in addAlias-5146'/6,
  'case--addAlias-5120'/5,
  'case--case block in addPossible-5081'/5,
  'case--addPossible-5059'/4,
  'case--show-3508'/3,
  'nested--22886-17012--in--un--visible'/3,
  'nested--16118-10873--in--un--showNames'/5,
  'nested--13298-8299--in--un--resolvedNamesPat'/7,
  'nested--11132-6055--in--un--resn'/3,
  'nested--16044-10800--in--un--resetElab'/2,
  'nested--19718-14135--in--un--notHidden'/7,
  'nested--11132-6056--in--un--lookupPossibles'/4,
  'nested--16926-11615--in--un--isHole'/4,
  'nested--19718-14136--in--un--isDefault'/5,
  'nested--13615-8494--in--un--insertAll'/5,
  'nested--13614-8462--in--un--insertAll'/5,
  'nested--20384-14758--in--un--getPos'/8,
  'nested--22422-16568--in--un--getDir'/3,
  'nested--13297-8158--in--un--fullNamesPat'/7,
  'nested--16562-11282--in--un--findAlias'/3,
  'nested--19718-14137--in--un--direct'/5,
  'nested--11605-6477--in--un--commitStaged'/3,
  'dn--un--show_Show_SizeChange'/1,
  'dn--un--show_Show_SCCall'/1,
  'dn--un--show_Show_DefFlag'/1,
  'dn--un--show_Show_Def'/1,
  'dn--un--show_Show_Clause'/1,
  'dn--un--showPrec_Show_SizeChange'/2,
  'dn--un--showPrec_Show_SCCall'/2,
  'dn--un--showPrec_Show_DefFlag'/2,
  'dn--un--showPrec_Show_Def'/2,
  'dn--un--showPrec_Show_Clause'/2,
  'dn--un--resolved_HasNames_Transform'/2,
  'dn--un--resolved_HasNames_Totality'/2,
  'dn--un--resolved_HasNames_Terminating'/2,
  'dn--un--resolved_HasNames_SCCall'/3,
  'dn--un--resolved_HasNames_Pat'/2,
  'dn--un--resolved_HasNames_PartialReason'/2,
  'dn--un--resolved_HasNames_Name'/2,
  'dn--un--resolved_HasNames_GlobalDef'/3,
  'dn--un--resolved_HasNames_Def'/2,
  'dn--un--resolved_HasNames_Covering'/2,
  'dn--un--resolved_HasNames_Clause'/2,
  'dn--un--resolved_HasNames_(Term $vars)'/3,
  'dn--un--resolved_HasNames_(NameMap $a)'/3,
  'dn--un--resolved_HasNames_(Maybe $a)'/4,
  'dn--un--resolved_HasNames_(CaseTree $vars)'/3,
  'dn--un--resolved_HasNames_(CaseAlt $vars)'/3,
  'dn--un--resolved_HasNames_((Env Term) $vars)'/3,
  'dn--un--full_HasNames_Transform'/2,
  'dn--un--full_HasNames_Totality'/2,
  'dn--un--full_HasNames_Terminating'/2,
  'dn--un--full_HasNames_SCCall'/3,
  'dn--un--full_HasNames_Pat'/2,
  'dn--un--full_HasNames_PartialReason'/2,
  'dn--un--full_HasNames_Name'/2,
  'dn--un--full_HasNames_GlobalDef'/3,
  'dn--un--full_HasNames_Def'/2,
  'dn--un--full_HasNames_Covering'/2,
  'dn--un--full_HasNames_Clause'/2,
  'dn--un--full_HasNames_(Term $vars)'/3,
  'dn--un--full_HasNames_(NameMap $a)'/3,
  'dn--un--full_HasNames_(Maybe $a)'/4,
  'dn--un--full_HasNames_(CaseTree $vars)'/3,
  'dn--un--full_HasNames_(CaseAlt $vars)'/3,
  'dn--un--full_HasNames_((Env Term) $vars)'/3,
  'dn--un--__Impl_Show_SizeChange'/0,
  'dn--un--__Impl_Show_SCCall'/0,
  'dn--un--__Impl_Show_DefFlag'/0,
  'dn--un--__Impl_Show_Def'/0,
  'dn--un--__Impl_Show_Clause'/0,
  'dn--un--__Impl_HasNames_Transform'/0,
  'dn--un--__Impl_HasNames_Totality'/0,
  'dn--un--__Impl_HasNames_Terminating'/0,
  'dn--un--__Impl_HasNames_SCCall'/0,
  'dn--un--__Impl_HasNames_Pat'/0,
  'dn--un--__Impl_HasNames_PartialReason'/0,
  'dn--un--__Impl_HasNames_Name'/0,
  'dn--un--__Impl_HasNames_GlobalDef'/0,
  'dn--un--__Impl_HasNames_Def'/0,
  'dn--un--__Impl_HasNames_Covering'/0,
  'dn--un--__Impl_HasNames_Clause'/0,
  'dn--un--__Impl_HasNames_(Term $vars)'/1,
  'dn--un--__Impl_HasNames_(NameMap $a)'/1,
  'dn--un--__Impl_HasNames_(Maybe $a)'/2,
  'dn--un--__Impl_HasNames_(CaseTree $vars)'/1,
  'dn--un--__Impl_HasNames_(CaseAlt $vars)'/1,
  'dn--un--__Impl_HasNames_((Env Term) $vars)'/1,
  'dn--un--__Impl_Eq_SizeChange'/0,
  'dn--un--__Impl_Eq_SCCall'/0,
  'dn--un--__Impl_Eq_DefFlag'/0,
  'dn--un--==_Eq_SizeChange'/2,
  'dn--un--==_Eq_SCCall'/2,
  'dn--un--==_Eq_DefFlag'/2,
  'dn--un--/=_Eq_SizeChange'/2,
  'dn--un--/=_Eq_SCCall'/2,
  'dn--un--/=_Eq_DefFlag'/2,
  'un--withLogLevel'/5,
  'un--visibleInAny'/3,
  'un--visibleIn'/3,
  'un--updateTy'/4,
  'un--updateDef'/4,
  'un--unsetFlag'/5,
  'un--undefinedName'/5,
  'un--toResolvedNames'/5,
  'un--toFullNames'/5,
  'un--sndName'/2,
  'un--setWorkingDir'/3,
  'un--setVisible'/3,
  'un--setVisibility'/5,
  'un--setUniqueSearch'/5,
  'un--setUnboundImplicits'/3,
  'un--setTotality'/5,
  'un--setTerminating'/5,
  'un--setSourceDir'/3,
  'un--setSizeChange'/5,
  'un--setSession'/3,
  'un--setRewrite'/5,
  'un--setPrefixRecordProjections'/3,
  'un--setPrefix'/3,
  'un--setPair'/6,
  'un--setPPrint'/3,
  'un--setOutputDir'/3,
  'un--setOpenHints'/3,
  'un--setNextEntry'/3,
  'un--setNestedNS'/3,
  'un--setNamedCompiled'/4,
  'un--setNameFlag'/5,
  'un--setNS'/3,
  'un--setNFThreshold'/3,
  'un--setMutWith'/5,
  'un--setLogTimings'/3,
  'un--setLinearCheck'/4,
  'un--setFromString'/3,
  'un--setFromInteger'/3,
  'un--setFromDouble'/3,
  'un--setFromChar'/3,
  'un--setFlag'/5,
  'un--setExternal'/5,
  'un--setExtension'/3,
  'un--setDetermining'/5,
  'un--setDetags'/5,
  'un--setDependsDir'/3,
  'un--setDefaultTotalityOption'/3,
  'un--setDebugElabCheck'/3,
  'un--setCtxt'/3,
  'un--setCovering'/5,
  'un--setCompiled'/4,
  'un--setCG'/3,
  'un--setBuildDir'/3,
  'un--setAutoImplicitLimit'/3,
  'un--setAmbigLimit'/3,
  'un--setAllPublic'/3,
  'un--returnDef'/3,
  'un--resolved'/2,
  'un--resolveName'/2,
  'un--resetFirstEntry'/2,
  'un--refersToRuntime'/1,
  'un--refersTo'/1,
  'un--reducibleInAny'/3,
  'un--reducibleIn'/3,
  'un--recordWarning'/3,
  'un--prettyName'/2,
  'un--noDeclaration'/5,
  'un--newEntry'/2,
  'un--newDef'/7,
  'un--newAlias'/4,
  'un--maybeMisspelling'/5,
  'un--lookupTyName'/3,
  'un--lookupTyExact'/3,
  'un--lookupNameBy'/5,
  'un--lookupExactBy'/5,
  'un--lookupDefTyExact'/3,
  'un--lookupDefName'/3,
  'un--lookupDefExact'/3,
  'un--lookupCtxtName'/2,
  'un--lookupCtxtExactI'/2,
  'un--lookupCtxtExact'/2,
  'un--lookupContextEntry'/2,
  'un--lazyActive'/3,
  'un--isVisible'/3,
  'un--isUnboundImplicits'/2,
  'un--isPrefixRecordProjections'/2,
  'un--isPairType'/3,
  'un--isLazyActive'/2,
  'un--isHidden'/2,
  'un--isExtension'/2,
  'un--isEqualTy'/3,
  'un--isAllPublic'/2,
  'un--initSize'/0,
  'un--initHash'/2,
  'un--initDefs'/1,
  'un--initCtxtS'/2,
  'un--initCtxt'/1,
  'un--inCurrentNS'/2,
  'un--holeInit'/1,
  'un--hideName'/2,
  'un--hide'/4,
  'un--hasFlag'/5,
  'un--getWorkingDir'/1,
  'un--getVisible'/2,
  'un--getVisibility'/4,
  'un--getUserHoles'/2,
  'un--getTotality'/4,
  'un--getSizeChange'/4,
  'un--getSimilarNames'/2,
  'un--getSession'/2,
  'un--getSearchData'/5,
  'un--getRewrite'/2,
  'un--getResolvedAs'/1,
  'un--getPrimitiveNames'/2,
  'un--getPrimNames'/2,
  'un--getPosition'/2,
  'un--getPPrint'/2,
  'un--getNextTypeTag'/2,
  'un--getNextEntry'/2,
  'un--getNestedNS'/2,
  'un--getNameID'/2,
  'un--getNS'/2,
  'un--getImported'/2,
  'un--getFullName'/2,
  'un--getFnName'/1,
  'un--getDirs'/2,
  'un--getDirectives'/3,
  'un--getDefaultTotalityOption'/2,
  'un--getContent'/1,
  'un--getAutoImplicitLimit'/2,
  'un--getAmbigLimit'/2,
  'un--full'/2,
  'un--fstName'/2,
  'un--fromStringName'/2,
  'un--fromIntegerName'/2,
  'un--fromDoubleName'/2,
  'un--fromCharName'/2,
  'un--findSetTotal'/1,
  'un--extendNS'/3,
  'un--dumpStaging'/2,
  'un--dropOpenHint'/3,
  'un--dropMutData'/3,
  'un--depth'/2,
  'un--defaultPI'/0,
  'un--defaultFlags'/0,
  'un--decode'/4,
  'un--commitCtxt'/1,
  'un--commit'/2,
  'un--clearUserHole'/3,
  'un--clearSavedHints'/2,
  'un--clearDefs'/2,
  'un--clearCtxt'/2,
  'un--checkUnambig'/4,
  'un--canonicalName'/4,
  'un--branchCtxt'/2,
  'un--branch'/2,
  'un--allNames'/1,
  'un--aliasName'/3,
  'un--addUserHole'/3,
  'un--addTransform'/4,
  'un--addToSave'/3,
  'un--addPossible'/3,
  'un--addPkg'/3,
  'un--addPackageDir'/3,
  'un--addOpenHint'/3,
  'un--addNameDirective'/5,
  'un--addName'/2,
  'un--addMutData'/3,
  'un--addLogLevel'/3,
  'un--addLocalHint'/3,
  'un--addLibDir'/3,
  'un--addImported'/3,
  'un--addHintFor'/7,
  'un--addHashWithNames'/6,
  'un--addHash'/5,
  'un--addGlobalHint'/4,
  'un--addExtraDir'/3,
  'un--addEntry'/3,
  'un--addDirective'/4,
  'un--addDef'/4,
  'un--addDataDir'/3,
  'un--addCtxt'/3,
  'un--addContextEntry'/4,
  'un--addContextAlias'/4,
  'un--addBuiltin'/7,
  'un--addAlias'/4,
  'un--Grow'/0
]).
'case--recordWarning-20265'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, [V0 | V29]} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setSession-20213'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, V0, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setDebugElabCheck-20140'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V32 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, {'Idris.Core.Options.MkSessionOpts', V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V0, V50, V51, V52, V53}, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setLogTimings-20063'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V32 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, {'Idris.Core.Options.MkSessionOpts', V39, V40, V41, V42, V43, V44, V45, V46, V0, V48, V49, V50, V51, V52, V53}, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--withLogLevel-19980'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V10 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V35 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, {'Idris.Core.Options.MkOptions', V33, V34, {'Idris.Core.Options.MkSessionOpts', V42, V43, V44, V45, V46, V47, V48, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V2))(V5)), V50, V51, V52, V53, V54, V55, V56}, V36, V37, V38, V39, V40, V41}, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--withLogLevel-19907'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> case V12 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> case V37 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.MkDefs', V8, V9, V10, V11, {'Idris.Core.Options.MkOptions', V35, V36, {'Idris.Core.Options.MkSessionOpts', V44, V45, V46, V47, V48, V49, V50, V5, V52, V53, V54, V55, V56, V57, V58}, V38, V39, V40, V41, V42, V43}, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addLogLevel-19800'(V0, V1, V2, V3) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V8 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V33 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, {'Idris.Core.Options.MkOptions', V31, V32, {'Idris.Core.Options.MkSessionOpts', V40, V41, V42, V43, V44, V45, V46, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V2))(V47)), V48, V49, V50, V51, V52, V53, V54}, V34, V35, V36, V37, V38, V39}, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addLogLevel-19727'(V0, V1, V2) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V32 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, {'Idris.Core.Options.MkSessionOpts', V39, V40, V41, V42, V43, V44, V45, ('Idris.Idris2.Core.Options.Log':'un--defaultLogLevel'()), V47, V48, V49, V50, V51, V52, V53}, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addLogLevel-19661'(V0, V1, V2) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> begin (V55 = ('erlang':'put'(V1, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V8 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39) -> case V33 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, {'Idris.Core.Options.MkOptions', V31, V32, {'Idris.Core.Options.MkSessionOpts', V40, V41, V42, V43, V44, V45, V46, ('Idris.Idris2.Core.Options.Log':'un--defaultLogLevel'()), V48, V49, V50, V51, V52, V53, V54}, V34, V35, V36, V37, V38, V39}, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V55} end end end()); {'Idris.Prelude.Types.Just', E51} -> (fun (V56) -> fun (V57) -> begin (V109 = ('erlang':'put'(V1, case V2 of {'Idris.Core.Context.MkDefs', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> case V62 of {'Idris.Core.Options.MkOptions', E79, E80, E81, E82, E83, E84, E85, E86, E87} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93) -> case V87 of {'Idris.Core.Options.MkSessionOpts', E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> {'Idris.Core.Context.MkDefs', V58, V59, V60, V61, {'Idris.Core.Options.MkOptions', V85, V86, {'Idris.Core.Options.MkSessionOpts', V94, V95, V96, V97, V98, V99, V100, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V56))(V101)), V102, V103, V104, V105, V106, V107, V108}, V88, V89, V90, V91, V92, V93}, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84} end(E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E79, E80, E81, E82, E83, E84, E85, E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V109} end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--isEqualTy-19533'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', 1} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--getFullName'(V1, V0))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V12 = (('un--getFullName'(V1, case V5 of {'Idris.Core.Options.MkRewriteNs', E3, E4} -> (fun (V10, V11) -> V10 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V14))} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--isPairType-19416'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', 1} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--getFullName'(V1, V0))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V13 = (('un--getFullName'(V1, case V5 of {'Idris.Core.Options.MkPairNs', E3, E4, E5} -> (fun (V10, V11, V12) -> V10 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V15))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addNameDirective-19389'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V5, V0, V21)), V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFromDouble-19330'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setFromDouble'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFromChar-19278'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setFromChar'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFromString-19226'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setFromString'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFromInteger-19174'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setFromInteger'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setRewrite-19114'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setRewrite'(V6, V5, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setPair-19040'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, ('Idris.Idris2.Core.Options':'un--setPair'(V6, V7, V8, V13)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNFThreshold-18898'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V33 of {'Idris.Core.Options.MkElabDirectives', E36, E37, E38, E39, E40, E41, E42} -> (fun (V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, V32, {'Idris.Core.Options.MkElabDirectives', V39, V40, V41, V42, V43, V0, V45}, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setAutoImplicitLimit-18828'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V33 of {'Idris.Core.Options.MkElabDirectives', E36, E37, E38, E39, E40, E41, E42} -> (fun (V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, V32, {'Idris.Core.Options.MkElabDirectives', V39, V40, V41, V42, V0, V44, V45}, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setAmbigLimit-18758'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V33 of {'Idris.Core.Options.MkElabDirectives', E36, E37, E38, E39, E40, E41, E42} -> (fun (V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, V32, {'Idris.Core.Options.MkElabDirectives', V39, V40, V41, V0, V43, V44, V45}, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setDefaultTotalityOption-18689'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V33 of {'Idris.Core.Options.MkElabDirectives', E36, E37, E38, E39, E40, E41, E42} -> (fun (V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, V32, {'Idris.Core.Options.MkElabDirectives', V39, V40, V0, V42, V43, V44, V45}, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setPrefixRecordProjections-18620'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V33 of {'Idris.Core.Options.MkElabDirectives', E36, E37, E38, E39, E40, E41, E42} -> (fun (V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, V32, {'Idris.Core.Options.MkElabDirectives', V39, V40, V41, V42, V43, V44, V0}, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setUnboundImplicits-18551'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V33 of {'Idris.Core.Options.MkElabDirectives', E36, E37, E38, E39, E40, E41, E42} -> (fun (V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, V32, {'Idris.Core.Options.MkElabDirectives', V39, V0, V41, V42, V43, V44, V45}, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lazyActive-18482'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V33 of {'Idris.Core.Options.MkElabDirectives', E36, E37, E38, E39, E40, E41, E42} -> (fun (V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, V32, {'Idris.Core.Options.MkElabDirectives', V0, V40, V41, V42, V43, V44, V45}, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkUnambig-18361'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> ('un--undefinedName'('erased', V2, V1, V0, V5)) end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> case V7 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V10}} end; _ -> fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V14)) end, V4))}, V13)) end end end(E4, E5)); _ -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V16)) end, V4))}, V15)) end end end(E2, E3)); _ -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)) end, V4))}, V17)) end end end(E0, E1)); _ -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V20)) end, V4))}, V19)) end end.
'case--setExtension-18334'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('Idris.Idris2.Core.Options':'un--setExtension'(V0, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setPrefix-18281'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V40, V41, V42, V43, V0, V45, V46, V47, V48}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getWorkingDir-18204'(V0) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> fun (V2) -> {'Idris.Prelude.Types.Right', V1} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V3)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setWorkingDir-18166'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> case V9 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> case V32 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V3, V42, V43, V44, V45, V46, V47, V48, V49, V50}, V33, V34, V35, V36, V37, V38, V39, V40}, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setWorkingDir-18102'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> begin (V52 = ('erlang':'put'(V1, case V2 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V10 of {'Idris.Core.Options.MkOptions', E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> case V33 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V4, V43, V44, V45, V46, V47, V48, V49, V50, V51}, V34, V35, V36, V37, V38, V39, V40, V41}, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V52} end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V53)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setSourceDir-18063'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V0, V41, V42, V43, V44, V45, V46, V47, V48}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOutputDir-17991'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V40, V41, V42, V0, V44, V45, V46, V47, V48}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setDependsDir-17919'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V40, V41, V0, V43, V44, V45, V46, V47, V48}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setBuildDir-17847'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V40, V0, V42, V43, V44, V45, V46, V47, V48}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addLibDir-17765'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V40, V41, V42, V43, V44, V45, V46, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V47, [V0 | []])), V48}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addDataDir-17683'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V40, V41, V42, V43, V44, V45, V46, V47, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V48, [V0 | []]))}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addPackageDir-17601'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V40, V41, V42, V43, V44, V45, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V46, [V0 | []])), V47, V48}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addExtraDir-17519'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V30 of {'Idris.Core.Options.MkDirs', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V39, V40, V41, V42, V43, V44, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V45, [V0 | []])), V46, V47, V48}, V31, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addPkg-17426'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V32 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, {'Idris.Core.Options.MkSessionOpts', V39, V40, V41, V42, V43, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V44, [V0 | []])), V45, V46, V47, V48, V49, V50, V51, V52, V53}, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setCG-17349'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> case V32 of {'Idris.Core.Options.MkSessionOpts', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V31, {'Idris.Core.Options.MkSessionOpts', V39, V40, V41, V0, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53}, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setPPrint-17273'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V7 of {'Idris.Core.Options.MkOptions', E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, {'Idris.Core.Options.MkOptions', V30, V0, V32, V33, V34, V35, V36, V37, V38}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getFullName-17185'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V7 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V0}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resetFirstEntry-17162'(V0, V1) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V2 of {'Idris.Core.Context.MkContext', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', case case V1 of {'Idris.Core.Context.MkDefs', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V40 end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V68 end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39}, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNextEntry-17100'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V3 of {'Idris.Core.Context.MkContext', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V30, V0, V32, V33, V34, V35, V36, V37, V38, V39, V40}, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setAllPublic-16993'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V3 of {'Idris.Core.Context.MkContext', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V30, V31, V32, V33, V34, V35, V36, V37, V0, V39, V40}, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setVisible-16912'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> case V3 of {'Idris.Core.Context.MkContext', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V30, V31, V32, V33, V34, V35, V36, [V0 | V37], V38, V39, V40}, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extendNS-16751'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V5, V0)), V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getNextTypeTag-16693'(V0, V1) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, ((V8 + 1) rem 9223372036854775808), V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDirectives,getDir-16585'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V2, V4}}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addDirective-16542'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, begin (V32 = {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31}), [{'Idris.Builtin.MkPair', case V32 of {'Idris.Core.Context.MkDefs', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V35 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V4, V1}} | V25] end, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addDirective-16477'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown code generator "/utf8>>, V2))))(V5))), {'Idris.Prelude.Types.Right', V33} end end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V34) -> fun (V35) -> begin (V91 = ('erlang':'put'(V0, case V3 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> {'Idris.Core.Context.MkDefs', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, begin (V63 = {'Idris.Core.Context.MkDefs', V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62}), [{'Idris.Builtin.MkPair', case V63 of {'Idris.Core.Context.MkDefs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V66 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', V34, V1}} | V56] end, V57, V58, V59, V60, V61, V62} end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V91} end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addImported-16437'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, [V0 | V21], V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNestedNS-16363'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V0, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNS-16312'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V0, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearSavedHints-16259'(V0, V1) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, [], [], V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in addTransform-16163'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V5, [V6 | V9], V23)), [{'Idris.Builtin.MkPair', V7, V8} | V24], V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in addTransform-16071'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V5, [V6 | []], V22)), [{'Idris.Builtin.MkPair', V7, V8} | V23], V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addTransform-16014'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> begin (V38 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V5, [V6 | []], V24)), [{'Idris.Builtin.MkPair', V7, V8} | V25], V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V38} end end end()); {'Idris.Prelude.Types.Just', E27} -> (fun (V39) -> fun (V40) -> begin (V68 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> {'Idris.Core.Context.MkDefs', V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V5, [V6 | V39], V54)), [{'Idris.Builtin.MkPair', V7, V8} | V55], V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V68} end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addTransform-15966'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V11 = ('un--toResolvedNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_Name'(V9, V10)) end end}, V5, V6))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> begin (V18 = ('un--toResolvedNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V14) -> fun (V15) -> ('dn--un--full_HasNames_Transform'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--resolved_HasNames_Transform'(V16, V17)) end end}, V0, V6))), case V18 of {'Idris.Prelude.Types.Left', E3} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V20) -> begin (V25 = ('un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V21) -> fun (V22) -> ('dn--un--full_HasNames_Name'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('dn--un--resolved_HasNames_Name'(V23, V24)) end end}, V5, V6))), case V25 of {'Idris.Prelude.Types.Left', E5} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V27) -> begin (V32 = ('un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V28) -> fun (V29) -> ('dn--un--full_HasNames_Transform'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('dn--un--resolved_HasNames_Transform'(V30, V31)) end end}, V0, V6))), case V32 of {'Idris.Prelude.Types.Left', E7} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V34) -> (('case--case block in addTransform-16014'(V0, V1, V2, V3, V5, V13, V20, V27, V34, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V13, case V3 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V48 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V6)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V62) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V1, <<"LHS of a transformation must be a function application"/utf8>>}, V62)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setOpenHints-15947'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V0, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dropOpenHint-15892'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'('erased', V3, V13)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addOpenHint-15828'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V13)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addLocalHint-15764'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V14)), V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addGlobalHint-15687'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V4, V0, V13)), V14, V15, V16, [{'Idris.Builtin.MkPair', V4, V0} | V17], V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addHintFor-15589'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V6, [{'Idris.Builtin.MkPair', V7, V0} | V8], V17)), V18, V19, V20, [{'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V7, V0}} | V21], V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addHintFor-15507'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', V10, V11, V12, V13, V14, V15, V16, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V6, [{'Idris.Builtin.MkPair', V7, V0} | V8], V17)), V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addHintFor-15452'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V0 of 0 -> fun (V10) -> begin (V38 = ('erlang':'put'(V5, case V6 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> {'Idris.Core.Context.MkDefs', V11, V12, V13, V14, V15, V16, V17, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V7, [{'Idris.Builtin.MkPair', V8, V1} | V9], V18)), V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V38} end end; 1 -> fun (V39) -> begin (V67 = ('erlang':'put'(V5, case V6 of {'Idris.Core.Context.MkDefs', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.MkDefs', V40, V41, V42, V43, V44, V45, V46, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V7, [{'Idris.Builtin.MkPair', V8, V1} | V9], V47)), V48, V49, V50, [{'Idris.Builtin.MkPair', V7, {'Idris.Builtin.MkPair', V8, V1}} | V51], V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V67} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addHintFor-15407'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> V10 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> [] end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in setExternal-15303'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V10 of {'Idris.Core.Context.MkTypeFlags', E0, E1} -> (fun (V15, V16) -> {'Idris.Core.Context.MkTypeFlags', V15, V0} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setExternal-15274'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V18 = case V12 of {'Idris.Core.Context.MkTypeFlags', E29, E30} -> (fun (V16, V17) -> {'Idris.Core.Context.MkTypeFlags', V16, V0} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V19) -> ('un--updateDef'(V3, V1, fun (V20) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end, V19)) end end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V21)) end end.
'case--setExternal-15259'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setExternal-15274'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('un--undefinedName'('erased', V3, V2, V1, V29)) end end.
'case--case block in case block in setUniqueSearch-15170'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V10 of {'Idris.Core.Context.MkTypeFlags', E0, E1} -> (fun (V15, V16) -> {'Idris.Core.Context.MkTypeFlags', V0, V16} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setUniqueSearch-15141'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V18 = case V12 of {'Idris.Core.Context.MkTypeFlags', E29, E30} -> (fun (V16, V17) -> {'Idris.Core.Context.MkTypeFlags', V0, V17} end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V19) -> ('un--updateDef'(V3, V1, fun (V20) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V18, V13, V14, V15}} end, V19)) end end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V23 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V21)) end end.
'case--setUniqueSearch-15126'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setUniqueSearch-15141'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('un--undefinedName'('erased', V3, V2, V1, V29)) end end.
'case--case block in setDetags-15042'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> fun (V16) -> ('un--updateDef'(V3, V1, fun (V17) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V12, V13, V14, V0}} end, V16)) end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V18)) end end.
'case--setDetags-15027'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setDetags-15042'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('un--undefinedName'('erased', V3, V2, V1, V29)) end end.
'case--case block in setDetermining-14934'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> fun (V16) -> begin (V38 = (('nested--20384-14758--in--un--getPos'(V0, V1, V2, V3, 'erased', 0, V0, case V5 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V19 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V38 of {'Idris.Prelude.Types.Left', E50} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V40) -> ('un--updateDef'(V3, V1, fun (V41) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V40, V12, V13, V14, V15}} end, V16)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V42) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V44 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setDetermining]"/utf8>>))}, V42)) end end.
'case--setDetermining-14919'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setDetermining-14934'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('un--undefinedName'('erased', V3, V2, V1, V29)) end end.
'case--setDetermining,getPos-14784'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> fun (V15) -> begin (V17 = (('nested--20384-14758--in--un--getPos'(V0, V1, V2, V3, 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V13)), ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V16, V10)) end, V12)), V11))(V15))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> {'Idris.Prelude.Types.Right', [V13 | V19]} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('nested--20384-14758--in--un--getPos'(V0, V1, V2, V3, 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V13)), V12, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--dropMutData-14742'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V30, V0)) end, V4)), V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addMutData-14684'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, [V0 | V4], V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setMutWith-14574'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.TCon', E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15) -> fun (V16) -> ('un--updateDef'(V3, V1, fun (V17) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V8, V9, V10, V11, V12, V0, V14, V15}} end, V16)) end end(E21, E22, E23, E24, E25, E26, E27, E28)); _ -> fun (V18) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<" is not a type constructor [setMutWith]"/utf8>>))}, V18)) end end.
'case--setMutWith-14559'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in setMutWith-14574'(V0, V1, V2, V3, V4, V6, V7, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> fun (V29) -> ('un--undefinedName'('erased', V3, V2, V1, V29)) end end.
'case--case block in getSearchData-14302'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V1 of 0 -> fun (V15) -> begin (V75 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V16) -> fun (V17) -> begin (V45 = (('nested--19718-14135--in--un--notHidden'(V0, V1, V2, V3, 'erased', V16, case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V17))), case V45 of {'Idris.Prelude.Types.Left', E27} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V47) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--&&'(('nested--19718-14136--in--un--isDefault'(V0, V1, V2, V3, V16)), fun () -> V47 end))} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V56 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V15))), case V75 of {'Idris.Prelude.Types.Left', E56} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V77) -> begin (V79 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V78) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V78)) end, V77))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', [], [{'Idris.Builtin.MkPair', 1, V79} | []]}} end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V80) -> begin (V136 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V81) -> ('nested--19718-14135--in--un--notHidden'(V0, V1, V2, V3, 'erased', V81, case V4 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> V82 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111} -> (fun (V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135) -> V118 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V80))), case V136 of {'Idris.Prelude.Types.Left', E112} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V138) -> begin (V140 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V139) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V139)) end, V138))), begin (V200 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V141) -> fun (V142) -> begin (V170 = (('nested--19718-14135--in--un--notHidden'(V0, V1, V2, V3, 'erased', V141, case V4 of {'Idris.Core.Context.MkDefs', E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140} -> (fun (V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169) -> V143 end(E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V142))), case V170 of {'Idris.Prelude.Types.Left', E141} -> (fun (V171) -> {'Idris.Prelude.Types.Left', V171} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V172) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('nested--19718-14136--in--un--isDefault'(V0, V1, V2, V3, V141)))), fun () -> V172 end))} end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169} -> (fun (V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199) -> V181 end(E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V80))), case V200 of {'Idris.Prelude.Types.Left', E170} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V202) -> begin (V204 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V203) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V203)) end, V202))), begin (V207 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V205) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V205)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V206) -> ('nested--19718-14137--in--un--direct'(V0, V1, V2, V3, V206)) end, V14))))), begin (V210 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V208) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V208)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V209) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--19718-14137--in--un--direct'(V0, V1, V2, V3, V209)))) end, V14))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', V12, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V211) -> ('Idris.Idris2.Data.List':'un--isCons'('erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V211)))) end, [{'Idris.Builtin.MkPair', 1, V140} | [{'Idris.Builtin.MkPair', 1, V204} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Basics':'un--not'(case V11 of {'Idris.Core.Context.MkTypeFlags', E172, E173} -> (fun (V212, V213) -> V212 end(E172, E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V207} | [{'Idris.Builtin.MkPair', 0, V210} | []]]]]))}} end end end end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getSearchData-14227'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Just', E0} -> (fun (V16) -> ('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V17) -> ('nested--19718-14135--in--un--notHidden'(V0, V1, V2, V3, 'erased', V17, case V4 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V18 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V16)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V45) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getSearchData-14184'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14) -> fun (V15) -> begin (V51 = begin (V20 = ('un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V16) -> fun (V17) -> ('dn--un--full_HasNames_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('dn--un--resolved_HasNames_Name'(V18, V19)) end end}, V0, V15))), case V20 of {'Idris.Prelude.Types.Left', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V22) -> begin (V23 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V7, V8, V9, V10, V11, V12, V13, V14}}), (('case--case block in getSearchData-14227'(V0, V1, V2, V3, V4, V7, V8, V9, V12, V13, V14, V11, V10, V23, V22, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V22, case V4 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V31 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V15)) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V51 of {'Idris.Prelude.Types.Left', E38} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V53) -> case V1 of 0 -> begin (V113 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V54) -> fun (V55) -> begin (V83 = (('nested--19718-14135--in--un--notHidden'(V0, V1, V2, V3, 'erased', V54, case V4 of {'Idris.Core.Context.MkDefs', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V56 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V55))), case V83 of {'Idris.Prelude.Types.Left', E67} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V85) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--&&'(('nested--19718-14136--in--un--isDefault'(V0, V1, V2, V3, V54)), fun () -> V85 end))} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112) -> V94 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V15))), case V113 of {'Idris.Prelude.Types.Left', E96} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V115) -> begin (V117 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V116) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V116)) end, V115))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', [], [{'Idris.Builtin.MkPair', 1, V117} | []]}} end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V173 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V118) -> ('nested--19718-14135--in--un--notHidden'(V0, V1, V2, V3, 'erased', V118, case V4 of {'Idris.Core.Context.MkDefs', E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145) -> V119 end(E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151} -> (fun (V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172) -> V155 end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V15))), case V173 of {'Idris.Prelude.Types.Left', E152} -> (fun (V174) -> {'Idris.Prelude.Types.Left', V174} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V175) -> begin (V177 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V176) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V176)) end, V175))), begin (V237 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V178) -> fun (V179) -> begin (V207 = (('nested--19718-14135--in--un--notHidden'(V0, V1, V2, V3, 'erased', V178, case V4 of {'Idris.Core.Context.MkDefs', E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180} -> (fun (V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206) -> V180 end(E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V179))), case V207 of {'Idris.Prelude.Types.Left', E181} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E181)); {'Idris.Prelude.Types.Right', E182} -> (fun (V209) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('nested--19718-14136--in--un--isDefault'(V0, V1, V2, V3, V178)))), fun () -> V209 end))} end(E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V4 of {'Idris.Core.Context.MkDefs', E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209} -> (fun (V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236) -> V218 end(E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V15))), case V237 of {'Idris.Prelude.Types.Left', E210} -> (fun (V238) -> {'Idris.Prelude.Types.Left', V238} end(E210)); {'Idris.Prelude.Types.Right', E211} -> (fun (V239) -> begin (V241 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V240) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V240)) end, V239))), begin (V244 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V242) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V242)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V243) -> ('nested--19718-14137--in--un--direct'(V0, V1, V2, V3, V243)) end, V53))))), begin (V247 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V245) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V245)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V246) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--19718-14137--in--un--direct'(V0, V1, V2, V3, V246)))) end, V53))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', V10, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V248) -> ('Idris.Idris2.Data.List':'un--isCons'('erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V248)))) end, [{'Idris.Builtin.MkPair', 1, V177} | [{'Idris.Builtin.MkPair', 1, V241} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Basics':'un--not'(case V11 of {'Idris.Core.Context.MkTypeFlags', E212, E213} -> (fun (V249, V250) -> V249 end(E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V244} | [{'Idris.Builtin.MkPair', 0, V247} | []]]]]))}} end end end end(E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> fun (V251) -> ('un--undefinedName'('erased', V3, V2, V0, V251)) end end end(E0)); _ -> fun (V252) -> ('un--undefinedName'('erased', V3, V2, V0, V252)) end end.
'case--getVisibility-14100'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V16 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> ('un--undefinedName'('erased', V2, V1, V0, V28)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in hide-14034'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', ('un--hideName'(V5, V7)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--hide-13979'(V0, V1, V2, V3, V4) -> case V4 of [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V6 of [] -> fun (V9) -> begin (V37 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Core.Context.MkDefs', ('un--hideName'(V7, V10)), V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V37} end end; _ -> fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V39)) end, V4))}, V38)) end end end(E2, E3)); _ -> fun (V40) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V41) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V41)) end, V4))}, V40)) end end end(E0, E1)); [] -> fun (V42) -> ('un--undefinedName'('erased', V2, V1, V0, V42)) end; _ -> fun (V43) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V44)) end, V4))}, V43)) end end.
'case--case block in setVisibility-13934'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V0, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setVisibility-13894'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V0, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11)) end, V7)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V33) -> ('un--undefinedName'('erased', V3, V2, V1, V33)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getSizeChange-13849'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V27 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> ('un--undefinedName'('erased', V2, V1, V0, V28)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getTotality-13804'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V17 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> ('un--undefinedName'('erased', V2, V1, V0, V28)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setTerminating-13757'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V17 of {'Idris.Core.TT.MkTotality', E21, E22} -> (fun (V28, V29) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'Idris.Core.TT.MkTotality', V0, V29}, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setTerminating-13715'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V22 of {'Idris.Core.TT.MkTotality', E24, E25} -> (fun (V33, V34) -> {'Idris.Core.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, {'Idris.Core.TT.MkTotality', V0, V34}, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11)) end, V7)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V35) -> ('un--undefinedName'('erased', V3, V2, V1, V35)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setCovering-13667'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V17 of {'Idris.Core.TT.MkTotality', E21, E22} -> (fun (V28, V29) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, {'Idris.Core.TT.MkTotality', V28, V0}, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setCovering-13625'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V22 of {'Idris.Core.TT.MkTotality', E24, E25} -> (fun (V33, V34) -> {'Idris.Core.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, {'Idris.Core.TT.MkTotality', V33, V0}, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11)) end, V7)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V35) -> ('un--undefinedName'('erased', V3, V2, V1, V35)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setTotality-13578'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V0, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setTotality-13538'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V0, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11)) end, V7)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V33) -> ('un--undefinedName'('erased', V3, V2, V1, V33)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setSizeChange-13491'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V0} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setSizeChange-13451'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V11) -> ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkGlobalDef', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V0} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11)) end, V7)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V33) -> ('un--undefinedName'('erased', V3, V2, V1, V33)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--hasFlag-13400'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('dn--un--==_Eq_DefFlag'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--/=_Eq_DefFlag'(V10, V11)) end end}, V0, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V23 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V33) -> ('un--undefinedName'('erased', V3, V2, V1, V33)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in unsetFlag-13352'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V7, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unsetFlag-13304'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V29 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V7) -> ('dn--un--/=_Eq_DefFlag'(V7, V0)) end, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V19 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V31) -> case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V34) -> ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Context.MkGlobalDef', V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V29, V47, V48, V49, V50, V51, V52, V53, V54, V55} end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34)) end, V30)) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V56) -> ('un--undefinedName'('erased', V3, V2, V1, V56)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setNameFlag-13227'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkGlobalDef', V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V9, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNameFlag-13167'(V0, V1, V2, V3, V4, V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> case V7 of [] -> begin (V34 = [V0 | ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V12) -> ('dn--un--/=_Eq_DefFlag'(V12, V0)) end, case V11 of {'Idris.Core.Context.MkGlobalDef', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V24 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), fun (V35) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V36) -> case V36 of {'Idris.Prelude.Types.Left', E27} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V39) -> ('un--addDef'(V3, {'Idris.Core.Name.Resolved', V10}, case V11 of {'Idris.Core.Context.MkGlobalDef', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> {'Idris.Core.Context.MkGlobalDef', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V34, V52, V53, V54, V55, V56, V57, V58, V59, V60} end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V39)) end, V35)) end end; _ -> fun (V61) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V62) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V62)) end, V5))}, V61)) end end end(E4, E5)); _ -> fun (V63) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V64) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V64)) end, V5))}, V63)) end end end(E2, E3)); _ -> fun (V65) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V66) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V66)) end, V5))}, V65)) end end end(E0, E1)); [] -> fun (V67) -> ('un--undefinedName'('erased', V3, V2, V1, V67)) end; _ -> fun (V68) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V69) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V69)) end, V5))}, V68)) end end.
'case--case block in setFlag-13119'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V7, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setFlag-13069'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V29 = [V0 | ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V7) -> ('dn--un--/=_Eq_DefFlag'(V7, V0)) end, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V19 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), fun (V30) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V31) -> case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V34) -> ('un--addDef'(V3, V1, case V6 of {'Idris.Core.Context.MkGlobalDef', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Context.MkGlobalDef', V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V29, V47, V48, V49, V50, V51, V52, V53, V54, V55} end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34)) end, V30)) end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V56) -> ('un--undefinedName'('erased', V3, V2, V1, V56)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupNameBy-12829'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> {'Idris.Builtin.MkPair', V6, {'Idris.Builtin.MkPair', V8, (V3(V9))}} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupExactBy-12778'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', (V3(V5))}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addToSave-12750'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V9)), V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V3, {'Idris.Builtin.MkUnit'}, V26)), V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addName-12616'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('un--setCtxt'(V1, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V4} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolveName-12579'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('un--setCtxt'(V1, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V4} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setCtxt-12553'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V0, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setLinearCheck-12485'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V0, V23, V24, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setLinearCheck-12447'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('un--addDef'(V2, {'Idris.Core.Name.Resolved', V1}, case V5 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkGlobalDef', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V0, V28, V29, V30, V31} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10)) end, V6)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setNamedCompiled-12404'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, {'Idris.Prelude.Types.Just', V0}, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setNamedCompiled-12366'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('un--addDef'(V2, V1, case V5 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkGlobalDef', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, {'Idris.Prelude.Types.Just', V0}, V31} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10)) end, V6)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in setCompiled-12323'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, {'Idris.Prelude.Types.Just', V0}, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--setCompiled-12285'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('un--addDef'(V2, V1, case V5 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkGlobalDef', V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, {'Idris.Prelude.Types.Just', V0}, V30, V31} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10)) end, V6)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateTy-12244'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.Context.MkGlobalDef', V6, V7, V0, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateTy-12206'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('un--addDef'(V2, {'Idris.Core.Name.Resolved', V1}, case V5 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkGlobalDef', V11, V12, V0, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10)) end, V6)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in updateDef-12161'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> {'Idris.Core.Context.MkGlobalDef', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V6, V25, V26, V27} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateDef-12100'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> ('un--addDef'(V2, V1, case V4 of {'Idris.Core.Context.MkGlobalDef', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkGlobalDef', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V8, V32, V33, V34} end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13)) end, V9)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateDef-12085'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> begin (V6 = {'Idris.Prelude.Types.Just', V5}), ('case--case block in updateDef-12100'(V0, V1, V2, V3, V5, V6, (V0(case V5 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V24 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addContextAlias-12007'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V5, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addContextAlias-11957'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> begin (V33 = ('un--newAlias'(V1, V0, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V33 of {'Idris.Prelude.Types.Left', E27} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V35) -> begin (V63 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> {'Idris.Core.Context.MkDefs', V35, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62} end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V63} end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--case block in addContextEntry-11925'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V5, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addContextEntry-11872'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V36 = begin (V35 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V6, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Right', V5} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addDef-11840'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V5, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addDef-11754'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.None'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Core.Context.Hole', E21, E22} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E21, E22)); _ -> fun (V12) -> ('un--clearUserHole'(V2, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V14 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12)) end end.
'case--addDef-11726'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V36 = begin (V35 = ('erlang':'put'(V2, case V3 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.Context.MkDefs', V6, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> begin (V61 = begin (V39 = {'Idris.Builtin.MkPair', V5, V6}), (('case--case block in addDef-11754'(V0, V1, V2, V3, V5, V6, V39, case V0 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V57 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7)) end), case V61 of {'Idris.Prelude.Types.Left', E52} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V63) -> {'Idris.Prelude.Types.Right', V5} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getUserHoles,isHole-11637'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Context.None'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', 0} end end()); {'Idris.Core.Context.Hole', E0, E1} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> fun (V10) -> {'Idris.Prelude.Types.Right', 1} end end.
'case--getUserHoles,isHole-11626'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = {'Idris.Prelude.Types.Just', V4}), ('case--case block in getUserHoles,isHole-11637'(V0, V1, V2, V4, V5, case V4 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> V23 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V27) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearUserHole-11607'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'('erased', V0, V26)), V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addUserHole-11553'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V26)), V27, V28, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--initHash-11502'(V0, V1) -> case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkDefs', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, 5381, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addHash-11443'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.Context.MkDefs', V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, case V1 of {'Idris.Core.Hash.dn--un--__mkHashable', E27, E28} -> (fun (V32, V33) -> ((V33(case V4 of {'Idris.Core.Context.MkDefs', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V50 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in aliasName-11356'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('nested--16562-11282--in--un--findAlias'(V0, V1, V5)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--aliasName-11342'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('case--case block in aliasName-11356'(V0, V1, V2, V4, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', V4, case case V2 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V5 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V35 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V43) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--aliasName,findAlias-11297'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> {'Idris.Prelude.Types.Right', V4} end; 1 -> ('nested--16562-11282--in--un--findAlias'(V0, V1, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--canonicalName-11219'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> ('un--undefinedName'('erased', V2, V1, V0, V5)) end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V10, V11) -> case V7 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', V8} end; _ -> fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V14)) end, V4))}, V13)) end end end(E4, E5)); _ -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V16)) end, V4))}, V15)) end end end(E2, E3)); _ -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V18)) end, V4))}, V17)) end end end(E0, E1)); _ -> fun (V19) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V20)) end, V4))}, V19)) end end.
'case--maybeMisspelling-11154'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V2, V5)) end; [E0 | E1] -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.MaybeMisspelling', V2, {'Idris.Data.List1.:::', V6, V7}}, V8)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getSimilarNames-11028'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V35 = (('Idris.Idris2.Libraries.Text.Distance.Levenshtein':'un--compute'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V2, V6))(V7))), ('Idris.Idris2.Prelude.Interfaces':'un--<$'('erased', 'erased', 'erased', fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V38, V39)) end end end end, V35, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V42, V43)) end end end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V45)) end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V48, V49)) end end end end}, fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V52, V53)) end end end}, ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(V35, V3)))))) end end end(E0)); _ -> fun (V54) -> {'Idris.Prelude.Types.Nothing'} end end.
'case--case block in getSimilarNames-10997'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> {'Idris.Prelude.Types.Right', []} end; 1 -> begin (V5 = ('Idris.Idris2.Prelude.Types':'dn--un--max_Ord_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), ('Idris.Idris2.Data.Nat':'un--divNat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V2)), (1 + (1 + (1 + 0)))))))), begin (V7 = fun (V6) -> ('case--case block in case block in getSimilarNames-11028'(V0, V1, V2, V5, V6, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V6)))) end), fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V77 = begin (V76 = (('Idris.Idris2.Libraries.Data.NameMap':'un--mapMaybeM'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, V7, case case V12 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V38 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V67 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), {'Idris.Prelude.Types.Right', V76} end), case V77 of {'Idris.Prelude.Types.Left', E40} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V79) -> begin (V82 = ('Idris.Idris2.Data.List':'un--sortBy'('erased', fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--compare_Ord_Nat'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V80)), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V81)))) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', V79))))), begin (V84 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V83) -> ('nested--16118-10873--in--un--showNames'(V0, V1, V0, V2, ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V83)))) end, V82))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V85, V86)) end end, fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V87, V88)) end end}, V84))} end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getSimilarNames-10971'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', []} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('case--case block in getSimilarNames-10997'(V0, V1, V4, ('Idris.Idris2.Prelude.Types':'dn--un--<=_Ord_Nat'(('Idris.Idris2.Prelude.Types.String':'un--length'(V4)), ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)))))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getSimilarNames,showNames-10915'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V6)) end.
'case--getSimilarNames,showNames-10884'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> begin (V7 = ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))), ('case--case block in getSimilarNames,showNames-10915'(V0, V1, V2, V3, V4, V5, V7, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, V7)), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)), V7)) end)))) end; _ -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V5)) end.
'case--clearCtxt-10866'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> {'Idris.Core.Context.MkDefs', V3, V4, V5, V6, ('nested--16044-10800--in--un--resetElab'(V0, case V1 of {'Idris.Core.Context.MkDefs', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V34 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, case V1 of {'Idris.Core.Context.MkDefs', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V82 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V29} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearCtxt,resetElab-10815'(V0, V1) -> case V1 of {'Idris.Core.Options.MkOptions', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Core.Options.MkOptions', V2, V3, V4, ('Idris.Idris2.Core.Options':'un--defaultElab'()), V6, V7, V8, V9, V10} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clearDefs-10743'(V0) -> case V0 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> case V1 of {'Idris.Core.Context.MkContext', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V28, V29, V30, V31, V32, V33, V34, V35, V36, 0, V38}, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-9095'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V2, V11, V12, V13, V14, V15, V16, V17, V4, V19, V5, V6, V22, V23, V24, V3, V26, V27, V7} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-8999'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> {'Idris.Core.Context.MkGlobalDef', V8, V9, V2, V11, V12, V13, V14, V15, V16, V17, V4, V19, V5, V6, V22, V23, V24, V3, V26, V27, V7} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-8816'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.Context.MkSCCall', V2, V4} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-8797'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> {'Idris.Core.Context.MkSCCall', V2, V4} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-7853'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', {'Idris.Core.Name.Resolved', V8}, V3, V1, V6}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V4, V3, V1, V6}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-7749'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', case V8 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V11 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V1, V6}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V4, V3, V1, V6}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-7019'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V4, V3, V8, V6}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V4, V3, V2, V6}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-6969'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V2, {'Idris.Core.Name.Resolved', V6}}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V2, V1}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-6772'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V2, case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V9 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V2, {'Idris.Core.Name.Resolved', V1}}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--resolved-6720'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V3}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--full-6696'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', case V3 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V6 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V0}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getFnName-6616'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V6, V7, V8) -> {'Idris.Prelude.Types.Just', V8} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in commitCtxt-6570'(V0, V1) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, V1, V8, V9, V10, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in commitCtxt-6542'(V0, V1, V2) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> {'Idris.Core.Context.MkContext', V3, V4, V5, V6, V7, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'('erased')), V10, V11, V12, V13} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--commitCtxt-6501'(V0, V1) -> case V1 of 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', V0} end; _ -> begin (V3 = (V1 - 1)), case V3 of 0 -> begin (V15 = case V0 of {'Idris.Core.Context.MkContext', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V8 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V16) -> begin (V18 = begin (V17 = ('erlang':'get'(V15))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E22} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V20) -> begin (V33 = begin (V32 = (('nested--11605-6477--in--un--commitStaged'(V0, ('Idris.Idris2.Libraries.Data.IntMap':'un--toList'('erased', case V0 of {'Idris.Core.Context.MkContext', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V27 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V20))(V16))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E35} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V35) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkContext', V36, V37, V38, V39, V40, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'('erased')), V43, V44, V45, V46} end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V47) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> {'Idris.Core.Context.MkContext', V48, V49, V50, V51, V52, V3, V54, V55, V56, V57, V58} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end end end.
'case--branchCtxt-6474'(V0) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> {'Idris.Core.Context.MkContext', V1, V2, V3, V4, V5, (1 + V6), V7, V8, V9, V10, V11} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--hideName-6451'(V0, V1) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V1, {'Idris.Builtin.MkUnit'}, V12))} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtName-6412'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, [], V4)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtName-6368'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V4, V5}} | []]} end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', []} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtName-6353'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> begin (V4 = (('un--lookupCtxtExactI'(V1, V0))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E2} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', [{'Idris.Builtin.MkPair', V1, {'Idris.Builtin.MkPair', V8, V9}} | []]} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V10) -> ('case--case block in lookupCtxtName-6412'(V0, V1, V10, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', V10, case V0 of {'Idris.Core.Context.MkContext', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V14 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in lookupCtxtName,lookupPossibles-6269'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, [{'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, V7}} | V6], V5)); 1 -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, V6, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtName,lookupPossibles-6240'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V9 = {'Idris.Prelude.Types.Just', V8}), ('case--case block in case block in lookupCtxtName,lookupPossibles-6269'(V0, V1, V2, V3, V4, V5, V6, V8, V9, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--matches'(V1, V4)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V12, V13)) end end}, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('nested--11132-6055--in--un--resn'(V0, V1, V14)) end, V6)))))) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, V6, V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtName,lookupPossibles-6215'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> begin (V9 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, V0))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Prelude.Types.Just', E2} -> (fun (V12) -> begin (V13 = {'Idris.Prelude.Types.Just', V12}), (('case--case block in case block in lookupCtxtName,lookupPossibles-6269'(V0, V1, V2, V3, V4, V5, V6, V12, V13, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--matches'(V1, V4)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V16, V17)) end end}, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V18) -> ('nested--11132-6055--in--un--resn'(V0, V1, V18)) end, V6)))))) end))))(V8)) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--11132-6056--in--un--lookupPossibles'(V0, V1, V6, V5))(V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, V6, V5)) end.
'case--case block in case block in lookupCtxtName,lookupPossibles-6135'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, [{'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V2, V6}} | V5], V4)); 1 -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, V5, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtName,lookupPossibles-6108'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V8 = {'Idris.Prelude.Types.Just', V7}), ('case--case block in case block in lookupCtxtName,lookupPossibles-6135'(V0, V1, V2, V3, V4, V5, V7, V8, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--matches'(V1, V3)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V11, V12)) end end}, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> ('nested--11132-6055--in--un--resn'(V0, V1, V13)) end, V5)))))) end)))) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, V5, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtName,lookupPossibles-6085'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> begin (V8 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, V0))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E2} -> (fun (V11) -> begin (V12 = {'Idris.Prelude.Types.Just', V11}), (('case--case block in case block in lookupCtxtName,lookupPossibles-6135'(V0, V1, V2, V3, V4, V5, V11, V12, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'un--matches'(V1, V3)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V15, V16)) end end}, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> ('nested--11132-6055--in--un--resn'(V0, V1, V17)) end, V5)))))) end))))(V7)) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('nested--11132-6056--in--un--lookupPossibles'(V0, V1, V5, V4))(V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('nested--11132-6056--in--un--lookupPossibles'(V0, V1, V5, V4)) end.
'case--lookupContextEntry-6031'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('un--lookupContextEntry'({'Idris.Core.Name.Resolved', V3}, V0)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupContextEntry-5996'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, V5}}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupContextEntry-5954'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, V3}}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V16 = case V1 of {'Idris.Core.Context.MkContext', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> V9 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V16))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E12} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V21) -> begin (V23 = begin (V22 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'('erased', V21, V0))(V17))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E14} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V25) -> case V25 of {'Idris.Prelude.Types.Just', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V0, V26}}} end(E16)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExact-5924'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> case V3 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V5}} end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in lookupCtxtExact-5857'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V11}} end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtExact-5839'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--decode'(V1, V0, 0, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V10 = {'Idris.Prelude.Types.Just', V5}), (('case--case block in case block in lookupCtxtExact-5857'(V0, V1, V2, V3, V5, V10, V9, ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V20 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V9))))(V6)) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtExact-5778'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V8}} end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExact-5763'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = (('un--decode'(V1, V0, 0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> (('case--case block in lookupCtxtExact-5778'(V0, V1, V3, V7, ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V17 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V7))))(V4)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V30 = case V1 of {'Idris.Core.Context.MkContext', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V23 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V30))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V35) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'('erased', V35, V0))(V31))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E27} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E29} -> (fun (V40) -> begin (V41 = (('un--decode'(V1, V0, 0, V40))(V31))), case V41 of {'Idris.Prelude.Types.Left', E30} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V43) -> begin (V44 = {'Idris.Prelude.Types.Just', V40}), (('case--case block in case block in lookupCtxtExact-5857'(V0, V1, V30, V35, V40, V44, V43, ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V54 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V43))))(V31)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExactI-5739'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('un--lookupCtxtExactI'({'Idris.Core.Name.Resolved', V3}, V0)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in lookupCtxtExactI-5705'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--decode'(V1, V0, 0, V5))(V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V19 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V9))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lookupCtxtExactI-5664'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> begin (V5 = (('un--decode'(V1, V0, 0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> V17 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V7))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V30 = case V1 of {'Idris.Core.Context.MkContext', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V23 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V30))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E25} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V35) -> begin (V37 = begin (V36 = (('Idris.Idris2.Erlang.Data.IOArray':'un--readArray'('erased', V35, V0))(V31))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E27} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E29} -> (fun (V40) -> begin (V41 = (('un--decode'(V1, V0, 0, V40))(V31))), case V41 of {'Idris.Prelude.Types.Left', E30} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V43) -> {'Idris.Prelude.Types.Right', ('un--returnDef'(case V1 of {'Idris.Core.Context.MkContext', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V53 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0, V43))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in returnDef-5612'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}; 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--returnDef-5596'(V0, V1, V2) -> case V2 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> ('case--case block in returnDef-5612'(V0, V1, V4, V5, V6, V7, V3, case V3 of {'Idris.Core.Context.MkPMDefInfo', E5, E6} -> (fun (V8, V9) -> V9 end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in case block in addEntry-5569'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Core.Context.MkContext', V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'('erased', V3, V1, V12)), V13, V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addEntry-5538'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Core.Context.MkContext', V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'('erased', V4, V1, V13)), V14, V15, V16, V17} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addEntry-5492'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V17 = case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> begin (V24 = begin (V23 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V22, V4, V1))(V18))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, V5}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addEntry-5476'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V5 = (('un--getPosition'(V2, V0))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V21 = case V9 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V14 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V23 = begin (V22 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V27 = begin (V26 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V25, V8, V1))(V4))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, V9}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V30) -> begin (V31 = (('un--getPosition'(V2, V0))(V30))), case V31 of {'Idris.Prelude.Types.Left', E19} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V34, V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V34, case V35 of {'Idris.Core.Context.MkContext', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkContext', V36, V37, V38, V39, V40, V41, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'('erased', V34, V1, V42)), V43, V44, V45, V46} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in addCtxt-5451'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Core.Context.MkContext', V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'('erased', V3, {'Idris.Core.Context.Decoded', V1}, V12)), V13, V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addCtxt-5420'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Core.Context.MkContext', V7, V8, V9, V10, V11, V12, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'('erased', V4, {'Idris.Core.Context.Decoded', V1}, V13)), V14, V15, V16, V17} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addCtxt-5374'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V17 = case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> begin (V24 = begin (V23 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V22, V4, {'Idris.Core.Context.Decoded', V1}))(V18))), {'Idris.Prelude.Types.Right', V23} end), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, V5}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addCtxt-5358'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> begin (V5 = (('un--getPosition'(V2, V0))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V21 = case V9 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20) -> V14 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V23 = begin (V22 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V27 = begin (V26 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V25, V8, {'Idris.Core.Context.Decoded', V1}))(V4))), {'Idris.Prelude.Types.Right', V26} end), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, V9}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V30) -> begin (V31 = (('un--getPosition'(V2, V0))(V30))), case V31 of {'Idris.Prelude.Types.Left', E19} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V33) -> case V33 of {'Idris.Builtin.MkPair', E21, E22} -> (fun (V34, V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V34, case V35 of {'Idris.Core.Context.MkContext', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Core.Context.MkContext', V36, V37, V38, V39, V40, V41, ('Idris.Idris2.Libraries.Data.IntMap':'un--insert'('erased', V34, {'Idris.Core.Context.Decoded', V1}, V42)), V43, V44, V45, V46} end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in newAlias-5330'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Core.Context.MkContext', V6, V7, V8, ('un--addAlias'(V2, V1, V3, V9)), V10, V11, V12, V13, V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--newAlias-5303'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Core.Context.MkContext', V7, V8, V9, ('un--addAlias'(V2, V1, V4, V10)), V11, V12, V13, V14, V15, V16, V17} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getPosition-5272'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, V0}} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--newEntry'(V1, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--newEntry-5240'(V0, V1, V2, V3, V4) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> {'Idris.Core.Context.MkContext', V5, ((V2 + 1) rem 9223372036854775808), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V1, V2, V7)), ('un--addPossible'(V1, V2, V8)), V9, V10, V11, V12, V13, V14, V15} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addAlias-5146'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V4, [{'Idris.Core.Context.Alias', V3, V2, V1} | []], V0)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V4, [{'Idris.Core.Context.Alias', V3, V2, V1} | V6], V0)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addAlias-5120'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('case--case block in addAlias-5146'(V0, V1, V2, V3, V5, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', V5, V0)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in addPossible-5081'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V3, [{'Idris.Core.Context.Direct', V2, V1} | []], V0)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> ('Idris.Idris2.Libraries.Data.StringMap':'un--insert'('erased', V3, [{'Idris.Core.Context.Direct', V2, V1} | V5], V0)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addPossible-5059'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V0 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> ('case--case block in addPossible-5081'(V0, V1, V2, V4, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', V4, V0)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--show-3508'(V0, V1, V2) -> case V2 of 0 -> <<" [impl]"/utf8>>; 1 -> <<""/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--22886-17012--in--un--visible'(V0, V1, V2) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V2, V0)).
'nested--16118-10873--in--un--showNames'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V4))), ('case--getSimilarNames,showNames-10884'(V0, V1, V4, V3, V2, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V3, V5)))) end.
'nested--13298-8299--in--un--resolvedNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = (('dn--un--resolved_HasNames_((Env Term) $vars)'('erased', V5, V9))(V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V5, V11))(V13))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V5, V12))(V13))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V19, V22}}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11132-6055--in--un--resn'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> V5 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--16044-10800--in--un--resetElab'(V0, V1) -> case V1 of {'Idris.Core.Options.MkOptions', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10) -> {'Idris.Core.Options.MkOptions', V2, V3, V4, ('Idris.Idris2.Core.Options':'un--defaultElab'()), V6, V7, V8, V9, V10} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19718-14135--in--un--notHidden'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> fun (V9) -> begin (V14 = ('un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V10) -> fun (V11) -> ('dn--un--full_HasNames_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('dn--un--resolved_HasNames_Name'(V12, V13)) end end}, V7, V9))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--not'(('un--isHidden'(V16, V6))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11132-6056--in--un--lookupPossibles'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'('erased', V2))} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Context.Direct', E2, E3} -> (fun (V7, V8) -> ('case--lookupCtxtName,lookupPossibles-6085'(V0, V1, V8, V7, V6, V2, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V7, case V0 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V19 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E2, E3)); {'Idris.Core.Context.Alias', E15, E16, E17} -> (fun (V20, V21, V22) -> ('case--lookupCtxtName,lookupPossibles-6215'(V0, V1, V22, V21, V20, V6, V2, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V21, case V0 of {'Idris.Core.Context.MkContext', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V33 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--16926-11615--in--un--isHole'(V0, V1, V2, V3) -> begin (V31 = (('un--lookupCtxtExact'(V2, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V4 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V31 of {'Idris.Prelude.Types.Left', E27} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Just', E29} -> (fun (V34) -> begin (V35 = {'Idris.Prelude.Types.Just', V34}), (('case--case block in getUserHoles,isHole-11637'(V0, V2, V1, V34, V35, case V34 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V53 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--19718-14136--in--un--isDefault'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V4)).
'nested--13615-8494--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('dn--un--resolved_HasNames_Name'(V2, V8))(V10))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> (('nested--13615-8494--in--un--insertAll'('erased', V1, V2, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V13, V9, V3)), V7))(V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13614-8462--in--un--insertAll'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', V3} end; [E0 | E1] -> (fun (V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('dn--un--full_HasNames_Name'(V2, V8))(V10))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> (('nested--13614-8462--in--un--insertAll'('erased', V1, V2, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V13, V9, V3)), V7))(V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--20384-14758--in--un--getPos'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> ('case--setDetermining,getPos-14784'(V0, V1, V2, V3, 'erased', V8, V12, V13, V14, V15, V9, V11, V6, V5, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V18, V19)) end end}, V9, V6)))) end(E4, E5, E6, E7)); _ -> case V6 of [] -> fun (V20) -> {'Idris.Prelude.Types.Right', []} end; _ -> fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown determining arguments: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V22)) end, V6))))))}, V21)) end end end end(E0, E1, E2, E3)); _ -> case V6 of [] -> fun (V23) -> {'Idris.Prelude.Types.Right', []} end; _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown determining arguments: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V25)) end, V6))))))}, V24)) end end end.
'nested--22422-16568--in--un--getDir'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> ('case--getDirectives,getDir-16585'(V0, V1, V3, V5, V6, ('Idris.Idris2.Core.Options':'dn--un--==_Eq_CG'(V0, V5)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13297-8158--in--un--fullNamesPat'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = (('dn--un--full_HasNames_((Env Term) $vars)'('erased', V5, V9))(V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = (('dn--un--full_HasNames_(Term $vars)'('erased', V5, V11))(V13))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = (('dn--un--full_HasNames_(Term $vars)'('erased', V5, V12))(V13))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.DPair.MkDPair', V7, {'Idris.Builtin.MkPair', V16, {'Idris.Builtin.MkPair', V19, V22}}}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--16562-11282--in--un--findAlias'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', V0} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Core.Context.Alias', E2, E3, E4} -> (fun (V6, V7, V8) -> ('case--aliasName,findAlias-11297'(V0, V1, V8, V7, V6, V5, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V0)))) end(E2, E3, E4)); _ -> ('nested--16562-11282--in--un--findAlias'(V0, V1, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19718-14137--in--un--direct'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V4)).
'nested--11605-6477--in--un--commitStaged'(V0, V1, V2) -> case V1 of [] -> fun (V3) -> {'Idris.Builtin.MkUnit'} end; [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, ('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V2, V6, V7)), fun () -> ('nested--11605-6477--in--un--commitStaged'(V0, V5, V2)) end)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_SizeChange'(V0) -> case V0 of {'Idris.Core.Context.Smaller'} -> (fun () -> <<"Smaller"/utf8>> end()); {'Idris.Core.Context.Same'} -> (fun () -> <<"Same"/utf8>> end()); {'Idris.Core.Context.Unknown'} -> (fun () -> <<"Unknown"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_SCCall'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V6, V7)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V8) -> ('dn--un--show_Show_SizeChange'(V8)) end, fun (V9) -> fun (V10) -> ('dn--un--showPrec_Show_SizeChange'(V9, V10)) end end}}, V4)) end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V14, V15)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V16) -> ('dn--un--show_Show_SizeChange'(V16)) end, fun (V17) -> fun (V18) -> ('dn--un--showPrec_Show_SizeChange'(V17, V18)) end end}}, V11, V12)) end end}, V3)) end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V21) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V22)) end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V23, V24)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V25) -> ('dn--un--show_Show_SizeChange'(V25)) end, fun (V26) -> fun (V27) -> ('dn--un--showPrec_Show_SizeChange'(V26, V27)) end end}}, V21)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V31, V32)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V33) -> ('dn--un--show_Show_SizeChange'(V33)) end, fun (V34) -> fun (V35) -> ('dn--un--showPrec_Show_SizeChange'(V34, V35)) end end}}, V28, V29)) end end}, V19, V20)) end end}, case V0 of {'Idris.Core.Context.MkSCCall', E2, E3} -> (fun (V36, V37) -> V37 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'dn--un--show_Show_DefFlag'(V0) -> case V0 of {'Idris.Core.Context.Inline'} -> (fun () -> <<"inline"/utf8>> end()); {'Idris.Core.Context.Invertible'} -> (fun () -> <<"invertible"/utf8>> end()); {'Idris.Core.Context.Overloadable'} -> (fun () -> <<"overloadable"/utf8>> end()); {'Idris.Core.Context.TCInline'} -> (fun () -> <<"tcinline"/utf8>> end()); {'Idris.Core.Context.SetTotal', E0} -> (fun (V1) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V1)) end(E0)); {'Idris.Core.Context.BlockedHint'} -> (fun () -> <<"blockedhint"/utf8>> end()); {'Idris.Core.Context.Macro'} -> (fun () -> <<"macro"/utf8>> end()); {'Idris.Core.Context.PartialEval', E1} -> (fun (V2) -> <<"partialeval"/utf8>> end(E1)); {'Idris.Core.Context.AllGuarded'} -> (fun () -> <<"allguarded"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Def'(V0) -> case V0 of {'Idris.Core.Context.None'} -> (fun () -> <<"undefined"/utf8>> end()); {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)) end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V7, V8)) end end}, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<";\x{a}Compile time tree: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V2, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Run time tree: "/utf8>>, ('Idris.Idris2.Core.CaseTree':'dn--un--show_Show_(CaseTree $vars)'(V2, V4)))))))))) end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"DataCon "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V10)), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (newtype by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Bool'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Bool'(V14, V15)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V17, V18)) end end}}, V12)), <<")"/utf8>>)))) end end, V11)))))))))) end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TyCon "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" params: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V28, V29)) end end}, V21)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" constructors: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V30) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V30)) end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V31, V32)) end end}, V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" mutual with: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V33) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V34, V35)) end end}, V24)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" detaggable by: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V36) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V38, V39)) end end}, V36)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V42) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V42)) end, fun (V43) -> fun (V44) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Nat'(V43, V44)) end end}, V40, V41)) end end}, V26)))))))))))))))))))))))) end(E8, E9, E10, E11, E12, E13, E14, E15)); {'Idris.Core.Context.ExternDef', E16} -> (fun (V45) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<external def with arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V45)), <<">"/utf8>>)))) end(E16)); {'Idris.Core.Context.ForeignDef', E17, E18} -> (fun (V46, V47) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<foreign def with arity "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V48) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V48)) end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V49, V50)) end end}, V47)), <<">"/utf8>>)))))))) end(E17, E18)); {'Idris.Core.Context.Builtin', E19, E20} -> (fun (V51, V52) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<builtin with arith "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V51)), <<">"/utf8>>)))) end(E19, E20)); {'Idris.Core.Context.Hole', E21, E22} -> (fun (V53, V54) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Hole"/utf8>>, ('case--show-3508'(V53, V54, case V54 of {'Idris.Core.Context.MkHoleFlags', E23, E24} -> (fun (V55, V56) -> V55 end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E21, E22)); {'Idris.Core.Context.BySearch', E25, E26, E27} -> (fun (V57, V58, V59) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Search in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V59)))) end(E25, E26, E27)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V60, V61, V62) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Guess "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V60)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" when "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V63) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V63)) end, fun (V64) -> fun (V65) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V64, V65)) end end}, V62)))))))) end(E28, E29, E30)); {'Idris.Core.Context.ImpBind'} -> (fun () -> <<"Bound name"/utf8>> end()); {'Idris.Core.Context.Delayed'} -> (fun () -> <<"Delayed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Clause'(V0) -> case V0 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V5) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)) end, fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V6, V7)) end end}, V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V1, V4)))))))))) end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_SizeChange'(V0, V1) -> ('dn--un--show_Show_SizeChange'(V1)).
'dn--un--showPrec_Show_SCCall'(V0, V1) -> ('dn--un--show_Show_SCCall'(V1)).
'dn--un--showPrec_Show_DefFlag'(V0, V1) -> ('dn--un--show_Show_DefFlag'(V1)).
'dn--un--showPrec_Show_Def'(V0, V1) -> ('dn--un--show_Show_Def'(V1)).
'dn--un--showPrec_Show_Clause'(V0, V1) -> ('dn--un--show_Show_Clause'(V1)).
'dn--un--resolved_HasNames_Transform'(V0, V1) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames_Name'(V0, V3))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('dn--un--resolved_HasNames_((Env Term) $vars)'('erased', V0, V4))(V7))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V0, V5))(V7))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V0, V6))(V7))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V2, V10, V13, V16, V19}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Totality'(V0, V1) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('dn--un--resolved_HasNames_Terminating'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames_Covering'(V0, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Terminating'(V0, V1) -> case V1 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V2) -> fun (V3) -> begin (V4 = (('dn--un--resolved_HasNames_PartialReason'(V0, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V7) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames_SCCall'(V0, V1, V2) -> begin (V5 = (('dn--un--resolved_HasNames_Name'(V0, case V1 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.Context.MkSCCall', V7, V9} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_Pat'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Core.CaseTree.PAs', V9, V10, V11} end end end} end, fun (V12) -> {'Idris.Prelude.Types.Right', V2} end, V7)) end, ('dn--un--resolved_HasNames_Name'(V0, V3)), V6)) end, ('dn--un--resolved_HasNames_Pat'(V0, V4)), V5)) end end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V13, V14, V15, V16, V17) -> fun (V18) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V23) -> {'Idris.Prelude.Types.Right', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> {'Idris.Core.CaseTree.PCon', V24, V25, V26, V27, V28} end end end end end} end, fun (V29) -> {'Idris.Prelude.Types.Right', V13} end, V22)) end, ('dn--un--resolved_HasNames_Name'(V0, V14)), V21)) end, fun (V30) -> {'Idris.Prelude.Types.Right', V15} end, V20)) end, fun (V31) -> {'Idris.Prelude.Types.Right', V16} end, V19)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V32) -> ('dn--un--resolved_HasNames_Pat'(V0, V32)) end, V17, [])), V18)) end end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V33, V34, V35, V36) -> fun (V37) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V41) -> {'Idris.Prelude.Types.Right', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> {'Idris.Core.CaseTree.PTyCon', V42, V43, V44, V45} end end end end} end, fun (V46) -> {'Idris.Prelude.Types.Right', V33} end, V40)) end, ('dn--un--resolved_HasNames_Name'(V0, V34)), V39)) end, fun (V47) -> {'Idris.Prelude.Types.Right', V35} end, V38)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> ('dn--un--resolved_HasNames_Pat'(V0, V48)) end, V36, [])), V37)) end end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V49, V50) -> fun (V51) -> {'Idris.Prelude.Types.Right', V1} end end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V52, V53, V54, V55) -> fun (V56) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V57) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V58) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V59) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V60) -> {'Idris.Prelude.Types.Right', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> {'Idris.Core.CaseTree.PArrow', V61, V62, V63, V64} end end end end} end, fun (V65) -> {'Idris.Prelude.Types.Right', V52} end, V59)) end, ('dn--un--resolved_HasNames_Name'(V0, V53)), V58)) end, ('dn--un--resolved_HasNames_Pat'(V0, V54)), V57)) end, ('dn--un--resolved_HasNames_Pat'(V0, V55)), V56)) end end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V66, V67, V68, V69) -> fun (V70) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V71) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V72) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V73) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V74) -> {'Idris.Prelude.Types.Right', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> {'Idris.Core.CaseTree.PDelay', V75, V76, V77, V78} end end end end} end, fun (V79) -> {'Idris.Prelude.Types.Right', V66} end, V73)) end, fun (V80) -> {'Idris.Prelude.Types.Right', V67} end, V72)) end, ('dn--un--resolved_HasNames_Pat'(V0, V68)), V71)) end, ('dn--un--resolved_HasNames_Pat'(V0, V69)), V70)) end end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V81, V82) -> fun (V83) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V84) -> case V84 of {'Idris.Prelude.Types.Left', E24} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V81, V86}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('dn--un--resolved_HasNames_Name'(V0, V82)), V83)) end end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E26, E27} -> (fun (V87, V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V90) -> case V90 of {'Idris.Prelude.Types.Left', E28} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V87, V92}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('dn--un--resolved_HasNames_(Term $vars)'('erased', V0, V88)), V89)) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_PartialReason'(V0, V1) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}} end end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('dn--un--resolved_HasNames_Name'(V0, V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--resolved_HasNames_Name'(V0, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Name'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V2}} end end(E0)); _ -> ('case--resolved-6720'(V1, V0, ('un--getNameID'(V1, V0)))) end.
'dn--un--resolved_HasNames_GlobalDef'(V0, V1, V2) -> begin (V24 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V24 of {'Idris.Prelude.Types.Left', E21} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V26) -> begin (V48 = (('dn--un--resolved_HasNames_Def'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V44 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V48 of {'Idris.Prelude.Types.Left', E44} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V50) -> begin (V72 = (('dn--un--resolved_HasNames_Totality'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V61 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V72 of {'Idris.Prelude.Types.Left', E67} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V74) -> begin (V100 = (('dn--un--resolved_HasNames_(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V75) -> fun (V76) -> ('dn--un--full_HasNames_(NameMap $a)'('erased', V75, V76)) end end, fun (V77) -> fun (V78) -> ('dn--un--resolved_HasNames_(NameMap $a)'('erased', V77, V78)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V91 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V100 of {'Idris.Prelude.Types.Left', E90} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V102) -> begin (V128 = (('dn--un--resolved_HasNames_(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('dn--un--full_HasNames_(NameMap $a)'('erased', V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--resolved_HasNames_(NameMap $a)'('erased', V105, V106)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V120 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V128 of {'Idris.Prelude.Types.Left', E113} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V130) -> begin (V154 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V131) -> fun (V132) -> ('dn--un--resolved_HasNames_SCCall'(V0, V131, V132)) end end, case V1 of {'Idris.Core.Context.MkGlobalDef', E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V153 end(E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V2))), case V154 of {'Idris.Prelude.Types.Left', E136} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V156) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkGlobalDef', E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177) -> {'Idris.Core.Context.MkGlobalDef', V157, V158, V26, V160, V161, V162, V163, V164, V165, V166, V74, V168, V102, V130, V171, V172, V173, V50, V175, V176, V156} end(E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--resolved_HasNames_Def'(V0, V1) -> case V1 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V0, V4))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V0, V5))(V7))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V15 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V14) -> ('nested--13298-8299--in--un--resolvedNamesPat'(V6, V3, V5, V4, V2, V0, V14)) end, V6, []))(V7))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.PMDef', V2, V3, V10, V13, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> ('dn--un--resolved_HasNames_Name'(V0, V27)) end, V23, []))(V26))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V31) -> ('dn--un--resolved_HasNames_Name'(V0, V31)) end, V24, []))(V26))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.TCon', V18, V19, V20, V21, V22, V30, V34, V25}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14, E15, E16, E17, E18)); {'Idris.Core.Context.BySearch', E23, E24, E25} -> (fun (V35, V36, V37) -> fun (V38) -> begin (V39 = (('dn--un--resolved_HasNames_Name'(V0, V37))(V38))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.BySearch', V35, V36, V41}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23, E24, E25)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V42, V43, V44) -> fun (V45) -> begin (V46 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V0, V42))(V45))), case V46 of {'Idris.Prelude.Types.Left', E31} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Guess', V48, V43, V44}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--resolved_HasNames_Covering'(V0, V1) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('dn--un--resolved_HasNames_(Term $vars)'('erased', V0, V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--resolved_HasNames_Name'(V0, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_Clause'(V0, V1) -> case V1 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> fun (V11) -> fun (V12) -> {'Idris.Core.Context.MkClause', V2, V10, V11, V12} end end end} end, ('dn--un--resolved_HasNames_((Env Term) $vars)'('erased', V0, V3)), V8)) end, ('dn--un--resolved_HasNames_(Term $vars)'('erased', V0, V4)), V7)) end, ('dn--un--resolved_HasNames_(Term $vars)'('erased', V0, V5)), V6)) end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(Term $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> ('case--resolved-6969'('erased', V5, V4, V3, V1, ('un--getNameID'(V5, V1)))) end(E0, E1, E2)); {'Idris.Core.TT.Meta', E3, E4, E5, E6} -> (fun (V6, V7, V8, V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V14) -> (('case--resolved-7019'('erased', V9, V8, V7, V6, V1, V14, ('un--getNameID'(V7, V1))))(V10)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5, E6)); {'Idris.Core.TT.Bind', E9, E10, E11, E12} -> (fun (V15, V16, V17, V18) -> fun (V19) -> begin (V21 = (('Idris.Idris2.Core.Core.Binder':'un--traverse'('erased', 'erased', fun (V20) -> ('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V20)) end, V17))(V19))), case V21 of {'Idris.Prelude.Types.Left', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> begin (V24 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V18))(V19))), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V15, V16, V23, V26}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11, E12)); {'Idris.Core.TT.App', E17, E18, E19} -> (fun (V27, V28, V29) -> fun (V30) -> begin (V31 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V28))(V30))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> begin (V34 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V29))(V30))), case V34 of {'Idris.Prelude.Types.Left', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', V27, V33, V36}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17, E18, E19)); {'Idris.Core.TT.As', E24, E25, E26, E27} -> (fun (V37, V38, V39, V40) -> fun (V41) -> begin (V42 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V39))(V41))), case V42 of {'Idris.Prelude.Types.Left', E28} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V44) -> begin (V45 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V40))(V41))), case V45 of {'Idris.Prelude.Types.Left', E30} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V37, V38, V44, V47}} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24, E25, E26, E27)); {'Idris.Core.TT.TDelayed', E32, E33, E34} -> (fun (V48, V49, V50) -> fun (V51) -> begin (V52 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V50))(V51))), case V52 of {'Idris.Prelude.Types.Left', E35} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V48, V49, V54}} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33, E34)); {'Idris.Core.TT.TDelay', E37, E38, E39, E40} -> (fun (V55, V56, V57, V58) -> fun (V59) -> begin (V60 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V57))(V59))), case V60 of {'Idris.Prelude.Types.Left', E41} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V62) -> begin (V63 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V58))(V59))), case V63 of {'Idris.Prelude.Types.Left', E43} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V55, V56, V62, V65}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E37, E38, E39, E40)); {'Idris.Core.TT.TForce', E45, E46, E47} -> (fun (V66, V67, V68) -> fun (V69) -> begin (V70 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V68))(V69))), case V70 of {'Idris.Prelude.Types.Left', E48} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V66, V67, V72}} end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45, E46, E47)); _ -> fun (V73) -> {'Idris.Prelude.Types.Right', V2} end end.
'dn--un--resolved_HasNames_(NameMap $a)'(V0, V1, V2) -> ('nested--13615-8494--in--un--insertAll'('erased', V2, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', V2)))).
'dn--un--resolved_HasNames_(Maybe $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V9 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E1, E2} -> (fun (V7, V8) -> (((V8(V2))(V5))(V6)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V11}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_(CaseTree $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--resolved_HasNames_(CaseAlt $vars)'('erased', V1, V11)) end, V6, []))(V7))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V3, V4, V10, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = (('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V16))(V17))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V15, V20}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', V2} end end.
'dn--un--resolved_HasNames_(CaseAlt $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V1, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> (('case--resolved-7853'('erased', V5, V6, V4, V3, V1, V10, ('un--getNameID'(V3, V1))))(V7)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E6, E7, E8} -> (fun (V11, V12, V13) -> fun (V14) -> begin (V15 = (('dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V1, V13))(V14))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V11, V12, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7, E8)); {'Idris.Core.CaseTree.ConstCase', E11, E12} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = (('dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V1, V19))(V20))), case V21 of {'Idris.Prelude.Types.Left', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V18, V23}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12)); {'Idris.Core.CaseTree.DefaultCase', E15} -> (fun (V24) -> fun (V25) -> begin (V26 = (('dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V1, V24))(V25))), case V26 of {'Idris.Prelude.Types.Left', E16} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V28}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--resolved_HasNames_((Env Term) $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}} end end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V8 = (('Idris.Idris2.Core.Core.Binder':'un--traverse'('erased', 'erased', fun (V7) -> ('dn--un--resolved_HasNames_(Term $vars)'('erased', V1, V7)) end, V4))(V6))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = (('dn--un--resolved_HasNames_((Env Term) $vars)'('erased', V1, V5))(V6))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V10, V13}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Transform'(V0, V1) -> case V1 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--full_HasNames_Name'(V0, V3))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('dn--un--full_HasNames_((Env Term) $vars)'('erased', V0, V4))(V7))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V14 = (('dn--un--full_HasNames_(Term $vars)'('erased', V0, V5))(V7))), case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> begin (V17 = (('dn--un--full_HasNames_(Term $vars)'('erased', V0, V6))(V7))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkTransform', V2, V10, V13, V16, V19}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Totality'(V0, V1) -> case V1 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V2, V3) -> fun (V4) -> begin (V5 = (('dn--un--full_HasNames_Terminating'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> begin (V8 = (('dn--un--full_HasNames_Covering'(V0, V3))(V4))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MkTotality', V7, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Terminating'(V0, V1) -> case V1 of {'Idris.Core.TT.NotTerminating', E0} -> (fun (V2) -> fun (V3) -> begin (V4 = (('dn--un--full_HasNames_PartialReason'(V0, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotTerminating', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V7) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_SCCall'(V0, V1, V2) -> begin (V5 = (('dn--un--full_HasNames_Name'(V0, case V1 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V3, V4) -> V3 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V8, V9) -> {'Idris.Core.Context.MkSCCall', V7, V9} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames_Pat'(V0, V1) -> case V1 of {'Idris.Core.CaseTree.PAs', E0, E1, E2} -> (fun (V2, V3, V4) -> fun (V5) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> fun (V10) -> fun (V11) -> {'Idris.Core.CaseTree.PAs', V9, V10, V11} end end end} end, fun (V12) -> {'Idris.Prelude.Types.Right', V2} end, V7)) end, ('dn--un--full_HasNames_Name'(V0, V3)), V6)) end, ('dn--un--full_HasNames_Pat'(V0, V4)), V5)) end end(E0, E1, E2)); {'Idris.Core.CaseTree.PCon', E3, E4, E5, E6, E7} -> (fun (V13, V14, V15, V16, V17) -> fun (V18) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V19) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V22) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V23) -> {'Idris.Prelude.Types.Right', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> {'Idris.Core.CaseTree.PCon', V24, V25, V26, V27, V28} end end end end end} end, fun (V29) -> {'Idris.Prelude.Types.Right', V13} end, V22)) end, ('dn--un--full_HasNames_Name'(V0, V14)), V21)) end, fun (V30) -> {'Idris.Prelude.Types.Right', V15} end, V20)) end, fun (V31) -> {'Idris.Prelude.Types.Right', V16} end, V19)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V32) -> ('dn--un--full_HasNames_Pat'(V0, V32)) end, V17, [])), V18)) end end(E3, E4, E5, E6, E7)); {'Idris.Core.CaseTree.PTyCon', E8, E9, E10, E11} -> (fun (V33, V34, V35, V36) -> fun (V37) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V38) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V41) -> {'Idris.Prelude.Types.Right', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> {'Idris.Core.CaseTree.PTyCon', V42, V43, V44, V45} end end end end} end, fun (V46) -> {'Idris.Prelude.Types.Right', V33} end, V40)) end, ('dn--un--full_HasNames_Name'(V0, V34)), V39)) end, fun (V47) -> {'Idris.Prelude.Types.Right', V35} end, V38)) end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V48) -> ('dn--un--full_HasNames_Pat'(V0, V48)) end, V36, [])), V37)) end end(E8, E9, E10, E11)); {'Idris.Core.CaseTree.PConst', E12, E13} -> (fun (V49, V50) -> fun (V51) -> {'Idris.Prelude.Types.Right', V1} end end(E12, E13)); {'Idris.Core.CaseTree.PArrow', E14, E15, E16, E17} -> (fun (V52, V53, V54, V55) -> fun (V56) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V57) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V58) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V59) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V60) -> {'Idris.Prelude.Types.Right', fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> {'Idris.Core.CaseTree.PArrow', V61, V62, V63, V64} end end end end} end, fun (V65) -> {'Idris.Prelude.Types.Right', V52} end, V59)) end, ('dn--un--full_HasNames_Name'(V0, V53)), V58)) end, ('dn--un--full_HasNames_Pat'(V0, V54)), V57)) end, ('dn--un--full_HasNames_Pat'(V0, V55)), V56)) end end(E14, E15, E16, E17)); {'Idris.Core.CaseTree.PDelay', E18, E19, E20, E21} -> (fun (V66, V67, V68, V69) -> fun (V70) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V71) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V72) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V73) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V74) -> {'Idris.Prelude.Types.Right', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> {'Idris.Core.CaseTree.PDelay', V75, V76, V77, V78} end end end end} end, fun (V79) -> {'Idris.Prelude.Types.Right', V66} end, V73)) end, fun (V80) -> {'Idris.Prelude.Types.Right', V67} end, V72)) end, ('dn--un--full_HasNames_Pat'(V0, V68)), V71)) end, ('dn--un--full_HasNames_Pat'(V0, V69)), V70)) end end(E18, E19, E20, E21)); {'Idris.Core.CaseTree.PLoc', E22, E23} -> (fun (V81, V82) -> fun (V83) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V84) -> case V84 of {'Idris.Prelude.Types.Left', E24} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PLoc', V81, V86}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('dn--un--full_HasNames_Name'(V0, V82)), V83)) end end(E22, E23)); {'Idris.Core.CaseTree.PUnmatchable', E26, E27} -> (fun (V87, V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V90) -> case V90 of {'Idris.Prelude.Types.Left', E28} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.PUnmatchable', V87, V92}} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('dn--un--full_HasNames_(Term $vars)'('erased', V0, V88)), V89)) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_PartialReason'(V0, V1) -> case V1 of {'Idris.Core.TT.NotStrictlyPositive'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NotStrictlyPositive'}} end end()); {'Idris.Core.TT.BadCall', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('dn--un--full_HasNames_Name'(V0, V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BadCall', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.RecPath', E3} -> (fun (V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--full_HasNames_Name'(V0, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.RecPath', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Name'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V2) -> fun (V3) -> begin (V4 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, V0))(V3))), case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> case V6 of {'Idris.Prelude.Types.Just', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', case V7 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V9 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V2}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_GlobalDef'(V0, V1, V2) -> begin (V24 = (('dn--un--full_HasNames_(Term $vars)'('erased', V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V24 of {'Idris.Prelude.Types.Left', E21} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V26) -> begin (V48 = (('dn--un--full_HasNames_Def'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47) -> V44 end(E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V48 of {'Idris.Prelude.Types.Left', E44} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V50) -> begin (V72 = (('dn--un--full_HasNames_Totality'(V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V61 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V72 of {'Idris.Prelude.Types.Left', E67} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V74) -> begin (V100 = (('dn--un--full_HasNames_(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V75) -> fun (V76) -> ('dn--un--full_HasNames_(NameMap $a)'('erased', V75, V76)) end end, fun (V77) -> fun (V78) -> ('dn--un--resolved_HasNames_(NameMap $a)'('erased', V77, V78)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V91 end(E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V100 of {'Idris.Prelude.Types.Left', E90} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V102) -> begin (V128 = (('dn--un--full_HasNames_(Maybe $a)'('erased', {'Idris.Core.Context.dn--un--__mkHasNames', fun (V103) -> fun (V104) -> ('dn--un--full_HasNames_(NameMap $a)'('erased', V103, V104)) end end, fun (V105) -> fun (V106) -> ('dn--un--resolved_HasNames_(NameMap $a)'('erased', V105, V106)) end end}, V0, case V1 of {'Idris.Core.Context.MkGlobalDef', E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112} -> (fun (V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V120 end(E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V128 of {'Idris.Prelude.Types.Left', E113} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V130) -> begin (V154 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V131) -> fun (V132) -> ('dn--un--full_HasNames_SCCall'(V0, V131, V132)) end end, case V1 of {'Idris.Core.Context.MkGlobalDef', E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V153 end(E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V2))), case V154 of {'Idris.Prelude.Types.Left', E136} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V156) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Core.Context.MkGlobalDef', E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158} -> (fun (V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177) -> {'Idris.Core.Context.MkGlobalDef', V157, V158, V26, V160, V161, V162, V163, V164, V165, V166, V74, V168, V102, V130, V171, V172, V173, V50, V175, V176, V156} end(E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--full_HasNames_Def'(V0, V1) -> case V1 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V2, V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--full_HasNames_(CaseTree $vars)'('erased', V0, V4))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> begin (V11 = (('dn--un--full_HasNames_(CaseTree $vars)'('erased', V0, V5))(V7))), case V11 of {'Idris.Prelude.Types.Left', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V13) -> begin (V15 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V14) -> ('nested--13297-8158--in--un--fullNamesPat'(V6, V3, V5, V4, V2, V0, V14)) end, V6, []))(V7))), case V15 of {'Idris.Prelude.Types.Left', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.PMDef', V2, V3, V10, V13, V17}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V18, V19, V20, V21, V22, V23, V24, V25) -> fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> ('dn--un--full_HasNames_Name'(V0, V27)) end, V23, []))(V26))), case V28 of {'Idris.Prelude.Types.Left', E19} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V30) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V31) -> ('dn--un--full_HasNames_Name'(V0, V31)) end, V24, []))(V26))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.TCon', V18, V19, V20, V21, V22, V30, V34, V25}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14, E15, E16, E17, E18)); {'Idris.Core.Context.BySearch', E23, E24, E25} -> (fun (V35, V36, V37) -> fun (V38) -> begin (V39 = (('dn--un--full_HasNames_Name'(V0, V37))(V38))), case V39 of {'Idris.Prelude.Types.Left', E26} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.BySearch', V35, V36, V41}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23, E24, E25)); {'Idris.Core.Context.Guess', E28, E29, E30} -> (fun (V42, V43, V44) -> fun (V45) -> begin (V46 = (('dn--un--full_HasNames_(Term $vars)'('erased', V0, V42))(V45))), case V46 of {'Idris.Prelude.Types.Left', E31} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.Guess', V48, V43, V44}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', V1} end end.
'dn--un--full_HasNames_Covering'(V0, V1) -> case V1 of {'Idris.Core.TT.IsCovering'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IsCovering'}} end end()); {'Idris.Core.TT.MissingCases', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('dn--un--full_HasNames_(Term $vars)'('erased', V0, V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.MissingCases', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.NonCoveringCall', E3} -> (fun (V9) -> fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--full_HasNames_Name'(V0, V11)) end, V9, []))(V10))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.NonCoveringCall', V14}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_Clause'(V0, V1) -> case V1 of {'Idris.Core.Context.MkClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> fun (V6) -> begin (V7 = (('dn--un--full_HasNames_((Env Term) $vars)'('erased', V0, V3))(V6))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> begin (V10 = (('dn--un--full_HasNames_(Term $vars)'('erased', V0, V4))(V6))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = (('dn--un--full_HasNames_(Term $vars)'('erased', V0, V5))(V6))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkClause', V2, V9, V12, V15}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(Term $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> case V5 of {'Idris.Core.Name.Resolved', E3} -> (fun (V6) -> fun (V7) -> begin (V8 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V6}, V1))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, case V11 of {'Idris.Core.Context.MkGlobalDef', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V13 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ref', V3, V4, {'Idris.Core.Name.Resolved', V6}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', V2} end end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E28, E29, E30, E31} -> (fun (V34, V35, V36, V37) -> fun (V38) -> begin (V40 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V39) -> ('dn--un--full_HasNames_(Term $vars)'('erased', V1, V39)) end, V37, []))(V38))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V34, V35, V36, V42}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30, E31)); {'Idris.Core.TT.Bind', E34, E35, E36, E37} -> (fun (V43, V44, V45, V46) -> fun (V47) -> begin (V49 = (('Idris.Idris2.Core.Core.Binder':'un--traverse'('erased', 'erased', fun (V48) -> ('dn--un--full_HasNames_(Term $vars)'('erased', V1, V48)) end, V45))(V47))), case V49 of {'Idris.Prelude.Types.Left', E38} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V51) -> begin (V52 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V46))(V47))), case V52 of {'Idris.Prelude.Types.Left', E40} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bind', V43, V44, V51, V54}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E34, E35, E36, E37)); {'Idris.Core.TT.App', E42, E43, E44} -> (fun (V55, V56, V57) -> fun (V58) -> begin (V59 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V56))(V58))), case V59 of {'Idris.Prelude.Types.Left', E45} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V61) -> begin (V62 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V57))(V58))), case V62 of {'Idris.Prelude.Types.Left', E47} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.App', V55, V61, V64}} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E42, E43, E44)); {'Idris.Core.TT.As', E49, E50, E51, E52} -> (fun (V65, V66, V67, V68) -> fun (V69) -> begin (V70 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V67))(V69))), case V70 of {'Idris.Prelude.Types.Left', E53} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V72) -> begin (V73 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V68))(V69))), case V73 of {'Idris.Prelude.Types.Left', E55} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.As', V65, V66, V72, V75}} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49, E50, E51, E52)); {'Idris.Core.TT.TDelayed', E57, E58, E59} -> (fun (V76, V77, V78) -> fun (V79) -> begin (V80 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V78))(V79))), case V80 of {'Idris.Prelude.Types.Left', E60} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V82) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V76, V77, V82}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E57, E58, E59)); {'Idris.Core.TT.TDelay', E62, E63, E64, E65} -> (fun (V83, V84, V85, V86) -> fun (V87) -> begin (V88 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V85))(V87))), case V88 of {'Idris.Prelude.Types.Left', E66} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V90) -> begin (V91 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V86))(V87))), case V91 of {'Idris.Prelude.Types.Left', E68} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V93) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelay', V83, V84, V90, V93}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E62, E63, E64, E65)); {'Idris.Core.TT.TForce', E70, E71, E72} -> (fun (V94, V95, V96) -> fun (V97) -> begin (V98 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V96))(V97))), case V98 of {'Idris.Prelude.Types.Left', E73} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V94, V95, V100}} end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E70, E71, E72)); _ -> fun (V101) -> {'Idris.Prelude.Types.Right', V2} end end.
'dn--un--full_HasNames_(NameMap $a)'(V0, V1, V2) -> ('nested--13614-8462--in--un--insertAll'('erased', V2, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', V2)))).
'dn--un--full_HasNames_(Maybe $a)'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V9 = case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E1, E2} -> (fun (V7, V8) -> (((V7(V2))(V5))(V6)) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V11}} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_(CaseTree $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V5))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V11) -> ('dn--un--full_HasNames_(CaseAlt $vars)'('erased', V1, V11)) end, V6, []))(V7))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.Case', V3, V4, V10, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> fun (V17) -> begin (V18 = (('dn--un--full_HasNames_(Term $vars)'('erased', V1, V16))(V17))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.STerm', V15, V20}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', V2} end end.
'dn--un--full_HasNames_(CaseAlt $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('dn--un--full_HasNames_(CaseTree $vars)'('erased', V1, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> begin (V11 = (('un--lookupCtxtExact'(V3, V1))(V7))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Just', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', case V14 of {'Idris.Core.Context.MkGlobalDef', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V16 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5, V10}} end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConCase', V3, V4, V5, V10}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E30, E31, E32} -> (fun (V36, V37, V38) -> fun (V39) -> begin (V40 = (('dn--un--full_HasNames_(CaseTree $vars)'('erased', V1, V38))(V39))), case V40 of {'Idris.Prelude.Types.Left', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DelayCase', V36, V37, V42}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30, E31, E32)); {'Idris.Core.CaseTree.ConstCase', E35, E36} -> (fun (V43, V44) -> fun (V45) -> begin (V46 = (('dn--un--full_HasNames_(CaseTree $vars)'('erased', V1, V44))(V45))), case V46 of {'Idris.Prelude.Types.Left', E37} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.ConstCase', V43, V48}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35, E36)); {'Idris.Core.CaseTree.DefaultCase', E39} -> (fun (V49) -> fun (V50) -> begin (V51 = (('dn--un--full_HasNames_(CaseTree $vars)'('erased', V1, V49))(V50))), case V51 of {'Idris.Prelude.Types.Left', E40} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Core.CaseTree.DefaultCase', V53}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--full_HasNames_((Env Term) $vars)'(V0, V1, V2) -> case V2 of {'Idris.Core.Env.Nil'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.Nil'}} end end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V8 = (('Idris.Idris2.Core.Core.Binder':'un--traverse'('erased', 'erased', fun (V7) -> ('dn--un--full_HasNames_(Term $vars)'('erased', V1, V7)) end, V4))(V6))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = (('dn--un--full_HasNames_((Env Term) $vars)'('erased', V1, V5))(V6))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Env.::', V10, V13}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Show_SizeChange'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_SizeChange'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SizeChange'(V1, V2)) end end}.
'dn--un--__Impl_Show_SCCall'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_SCCall'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SCCall'(V1, V2)) end end}.
'dn--un--__Impl_Show_DefFlag'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_DefFlag'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DefFlag'(V1, V2)) end end}.
'dn--un--__Impl_Show_Def'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_Def'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Def'(V1, V2)) end end}.
'dn--un--__Impl_Show_Clause'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_Clause'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Clause'(V1, V2)) end end}.
'dn--un--__Impl_HasNames_Transform'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Transform'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Transform'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Totality'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Totality'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Totality'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Terminating'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Terminating'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Terminating'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_SCCall'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_SCCall'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_SCCall'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Pat'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Pat'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Pat'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_PartialReason'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_PartialReason'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_PartialReason'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Name'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Name'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Name'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_GlobalDef'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_GlobalDef'(V0, V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_GlobalDef'(V3, V4, V5)) end end end}.
'dn--un--__Impl_HasNames_Def'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Def'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Def'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Covering'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Covering'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Covering'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_Clause'() -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V0) -> fun (V1) -> ('dn--un--full_HasNames_Clause'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--resolved_HasNames_Clause'(V2, V3)) end end}.
'dn--un--__Impl_HasNames_(Term $vars)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(Term $vars)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames_(Term $vars)'('erased', V3, V4)) end end}.
'dn--un--__Impl_HasNames_(NameMap $a)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(NameMap $a)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames_(NameMap $a)'('erased', V3, V4)) end end}.
'dn--un--__Impl_HasNames_(Maybe $a)'(V0, V1) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V2) -> fun (V3) -> ('dn--un--full_HasNames_(Maybe $a)'('erased', V1, V2, V3)) end end, fun (V4) -> fun (V5) -> ('dn--un--resolved_HasNames_(Maybe $a)'('erased', V1, V4, V5)) end end}.
'dn--un--__Impl_HasNames_(CaseTree $vars)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(CaseTree $vars)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames_(CaseTree $vars)'('erased', V3, V4)) end end}.
'dn--un--__Impl_HasNames_(CaseAlt $vars)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_(CaseAlt $vars)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames_(CaseAlt $vars)'('erased', V3, V4)) end end}.
'dn--un--__Impl_HasNames_((Env Term) $vars)'(V0) -> {'Idris.Core.Context.dn--un--__mkHasNames', fun (V1) -> fun (V2) -> ('dn--un--full_HasNames_((Env Term) $vars)'('erased', V1, V2)) end end, fun (V3) -> fun (V4) -> ('dn--un--resolved_HasNames_((Env Term) $vars)'('erased', V3, V4)) end end}.
'dn--un--__Impl_Eq_SizeChange'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SizeChange'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SizeChange'(V2, V3)) end end}.
'dn--un--__Impl_Eq_SCCall'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_SCCall'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_SCCall'(V2, V3)) end end}.
'dn--un--__Impl_Eq_DefFlag'() -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V0) -> fun (V1) -> ('dn--un--==_Eq_DefFlag'(V0, V1)) end end, fun (V2) -> fun (V3) -> ('dn--un--/=_Eq_DefFlag'(V2, V3)) end end}.
'dn--un--==_Eq_SizeChange'(V0, V1) -> case V0 of {'Idris.Core.Context.Smaller'} -> (fun () -> case V1 of {'Idris.Core.Context.Smaller'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Same'} -> (fun () -> case V1 of {'Idris.Core.Context.Same'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Unknown'} -> (fun () -> case V1 of {'Idris.Core.Context.Unknown'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--==_Eq_SCCall'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(case V0 of {'Idris.Core.Context.MkSCCall', E0, E1} -> (fun (V2, V3) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Context.MkSCCall', E2, E3} -> (fun (V4, V5) -> V4 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V12, V13)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V14) -> fun (V15) -> ('dn--un--==_Eq_SizeChange'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('dn--un--/=_Eq_SizeChange'(V16, V17)) end end}, V8, V9)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V22, V23)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V24) -> fun (V25) -> ('dn--un--==_Eq_SizeChange'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('dn--un--/=_Eq_SizeChange'(V26, V27)) end end}, V18, V19)) end end}, V6, V7)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_(Maybe $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V32, V33)) end end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V34, V35)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V36) -> fun (V37) -> ('dn--un--==_Eq_SizeChange'(V36, V37)) end end, fun (V38) -> fun (V39) -> ('dn--un--/=_Eq_SizeChange'(V38, V39)) end end}, V30, V31)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V42, V43)) end end, fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V44, V45)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V46) -> fun (V47) -> ('dn--un--==_Eq_SizeChange'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('dn--un--/=_Eq_SizeChange'(V48, V49)) end end}, V40, V41)) end end}, V28, V29)) end end}, case V0 of {'Idris.Core.Context.MkSCCall', E4, E5} -> (fun (V50, V51) -> V51 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V1 of {'Idris.Core.Context.MkSCCall', E6, E7} -> (fun (V52, V53) -> V53 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end)).
'dn--un--==_Eq_DefFlag'(V0, V1) -> case V0 of {'Idris.Core.Context.Inline'} -> (fun () -> case V1 of {'Idris.Core.Context.Inline'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Invertible'} -> (fun () -> case V1 of {'Idris.Core.Context.Invertible'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Overloadable'} -> (fun () -> case V1 of {'Idris.Core.Context.Overloadable'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.TCInline'} -> (fun () -> case V1 of {'Idris.Core.Context.TCInline'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.SetTotal', E0} -> (fun (V2) -> case V1 of {'Idris.Core.Context.SetTotal', E1} -> (fun (V3) -> ('Idris.Idris2.Core.TT':'dn--un--==_Eq_TotalReq'(V2, V3)) end(E1)); _ -> 1 end end(E0)); {'Idris.Core.Context.BlockedHint'} -> (fun () -> case V1 of {'Idris.Core.Context.BlockedHint'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.Macro'} -> (fun () -> case V1 of {'Idris.Core.Context.Macro'} -> (fun () -> 0 end()); _ -> 1 end end()); {'Idris.Core.Context.PartialEval', E2} -> (fun (V4) -> case V1 of {'Idris.Core.Context.PartialEval', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_(List $a)'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V10, V11)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V14, V15)) end end}, V6, V7)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V20, V21)) end end}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V24, V25)) end end}, V16, V17)) end end}, V4, V5)) end(E3)); _ -> 1 end end(E2)); {'Idris.Core.Context.AllGuarded'} -> (fun () -> case V1 of {'Idris.Core.Context.AllGuarded'} -> (fun () -> 0 end()); _ -> 1 end end()); _ -> 1 end.
'dn--un--/=_Eq_SizeChange'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_SizeChange'(V0, V1)))).
'dn--un--/=_Eq_SCCall'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_SCCall'(V0, V1)))).
'dn--un--/=_Eq_DefFlag'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_DefFlag'(V0, V1)))).
'un--withLogLevel'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V60 = case case case V8 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V13 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V38 end(E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V52 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V113 = begin (V112 = ('erlang':'put'(V1, case V8 of {'Idris.Core.Context.MkDefs', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> case V65 of {'Idris.Core.Options.MkOptions', E80, E81, E82, E83, E84, E85, E86, E87, E88} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96) -> case V90 of {'Idris.Core.Options.MkSessionOpts', E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> {'Idris.Core.Context.MkDefs', V61, V62, V63, V64, {'Idris.Core.Options.MkOptions', V88, V89, {'Idris.Core.Options.MkSessionOpts', V97, V98, V99, V100, V101, V102, V103, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V2))(V60)), V105, V106, V107, V108, V109, V110, V111}, V91, V92, V93, V94, V95, V96}, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87} end(E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E80, E81, E82, E83, E84, E85, E86, E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V112} end), case V113 of {'Idris.Prelude.Types.Left', E104} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V115) -> begin (V116 = (V3(V4))), case V116 of {'Idris.Prelude.Types.Left', E106} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V118) -> begin (V120 = begin (V119 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V119} end), case V120 of {'Idris.Prelude.Types.Left', E108} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V122) -> begin (V175 = begin (V174 = ('erlang':'put'(V1, case V122 of {'Idris.Core.Context.MkDefs', E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136} -> (fun (V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149) -> case V127 of {'Idris.Core.Options.MkOptions', E137, E138, E139, E140, E141, E142, E143, E144, E145} -> (fun (V150, V151, V152, V153, V154, V155, V156, V157, V158) -> case V152 of {'Idris.Core.Options.MkSessionOpts', E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160} -> (fun (V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173) -> {'Idris.Core.Context.MkDefs', V123, V124, V125, V126, {'Idris.Core.Options.MkOptions', V150, V151, {'Idris.Core.Options.MkSessionOpts', V159, V160, V161, V162, V163, V164, V165, V60, V167, V168, V169, V170, V171, V172, V173}, V153, V154, V155, V156, V157, V158}, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149} end(E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E137, E138, E139, E140, E141, E142, E143, E144, E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V174} end), case V175 of {'Idris.Prelude.Types.Left', E161} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V177) -> {'Idris.Prelude.Types.Right', V118} end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--visibleInAny'(V0, V1, V2) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V14)) end end}, fun (V15) -> ('un--visibleIn'(V15, V1, V2)) end))(V0)).
'un--visibleIn'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> case V2 of {'Idris.Core.TT.Private'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--updateTy'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V1}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V1}, case V38 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> {'Idris.Core.Context.MkGlobalDef', V43, V44, V2, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V42)) end, V3)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--updateDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> begin (V39 = {'Idris.Prelude.Types.Just', V38}), (('case--case block in updateDef-12100'(V2, V1, V0, V7, V38, V39, (V2(case V38 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V57 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V3)) end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unsetFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V62 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V40) -> ('dn--un--/=_Eq_DefFlag'(V40, V3)) end, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V52 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V63) -> case V63 of {'Idris.Prelude.Types.Left', E53} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V66) -> ('un--addDef'(V0, V2, case V39 of {'Idris.Core.Context.MkGlobalDef', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> {'Idris.Core.Context.MkGlobalDef', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V62, V79, V80, V81, V82, V83, V84, V85, V86, V87} end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V66)) end, V4)) end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--undefinedName'(V0, V1, V2, V3, V4) -> ('un--maybeMisspelling'('erased', V1, {'Idris.Core.Core.UndefinedName', V2, V3}, V3, V4)).
'un--toResolvedNames'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V2 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V9, V10) -> (((V10(case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))(V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--toFullNames'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V2 of {'Idris.Core.Context.dn--un--__mkHasNames', E2, E3} -> (fun (V9, V10) -> (((V9(case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V11 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))(V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sndName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkPairNs', E2, E3, E4} -> (fun (V7, V8, V9) -> V9 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case case V5 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V14 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V41 end(E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setWorkingDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V39 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> begin (V38 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, V1))(V10))), {'Idris.Prelude.Types.Right', V38} end end, V2))), case V39 of {'Idris.Prelude.Types.Left', E4} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V41) -> begin (V70 = begin (V69 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V44, V45, V46)) end end end end end, fun (V47) -> fun (V48) -> fun (V49) -> V48 end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> begin (V55 = (V52(V54))), begin (V56 = (V53(V54))), (V55(V56)) end end end end end end end}, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V59(V61))), ((V60(V62))(V61)) end end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V64(V65))), (V66(V65)) end end end end}, fun (V67) -> fun (V68) -> V68 end end}))(V2))), {'Idris.Prelude.Types.Right', V69} end), case V70 of {'Idris.Prelude.Types.Left', E6} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V72) -> case V72 of {'Idris.Prelude.Types.Just', E8} -> (fun (V73) -> begin (V120 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> case V78 of {'Idris.Core.Options.MkOptions', E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V101, V102, V103, V104, V105, V106, V107, V108, V109) -> case V101 of {'Idris.Core.Options.MkDirs', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119) -> {'Idris.Core.Context.MkDefs', V74, V75, V76, V77, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V73, V111, V112, V113, V114, V115, V116, V117, V118, V119}, V102, V103, V104, V105, V106, V107, V108, V109}, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100} end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V120} end end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V2)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setVisible'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V45 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V7 of {'Idris.Core.Context.MkContext', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V34, V35, V36, V37, V38, V39, V40, [V1 | V41], V42, V43, V44}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V45} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setVisibility'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, V2, case V39 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V3, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V4)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setUniqueSearch'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V40 = {'Idris.Prelude.Types.Just', V39}), (('case--case block in setUniqueSearch-15141'(V3, V2, V1, V0, V8, V39, V40, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E31)); _ -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setUnboundImplicits'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V50 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E38, E39, E40, E41, E42, E43, E44} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, V36, {'Idris.Core.Options.MkElabDirectives', V43, V1, V45, V46, V47, V48, V49}, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V50} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setTotality'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, V2, case V39 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V3, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V4)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setTerminating'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, V2, case V39 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> case V54 of {'Idris.Core.TT.MkTotality', E55, E56} -> (fun (V65, V66) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, {'Idris.Core.TT.MkTotality', V3, V66}, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V4)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSourceDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V1, V45, V46, V47, V48, V49, V50, V51, V52}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSizeChange'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, V2, case V39 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V3} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V4)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setSession'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V43 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, V1, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V43} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setRewrite'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('un--checkUnambig'(V0, V1, V3, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('un--checkUnambig'(V0, V1, V2, V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V42 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V15, V16, V17, V18, ('Idris.Idris2.Core.Options':'un--setRewrite'(V14, V11, V19)), V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPrefixRecordProjections'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V50 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E38, E39, E40, E41, E42, E43, E44} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, V36, {'Idris.Core.Options.MkElabDirectives', V43, V44, V45, V46, V47, V48, V1}, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V50} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPrefix'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V44, V45, V46, V47, V1, V49, V50, V51, V52}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPair'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('un--checkUnambig'(V0, V1, V2, V5))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('un--checkUnambig'(V0, V1, V3, V5))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('un--checkUnambig'(V0, V1, V4, V5))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V46 = ('erlang':'put'(V0, case V9 of {'Idris.Core.Context.MkDefs', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> {'Idris.Core.Context.MkDefs', V19, V20, V21, V22, ('Idris.Idris2.Core.Options':'un--setPair'(V12, V15, V18, V23)), V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45} end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V46} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setPPrint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V43 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V1, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V43} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setOutputDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V44, V45, V46, V1, V48, V49, V50, V51, V52}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setOpenHints'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V1, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNextEntry'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V45 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V7 of {'Idris.Core.Context.MkContext', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V34, V1, V36, V37, V38, V39, V40, V41, V42, V43, V44}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V45} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNestedNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V1, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNamedCompiled'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('un--addDef'(V0, V1, case V38 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> {'Idris.Core.Context.MkGlobalDef', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, {'Idris.Prelude.Types.Just', V2}, V63} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V42)) end, V3)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNameFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtName'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of [E31 | E32] -> (fun (V39, V40) -> case V39 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V41, V42) -> case V42 of {'Idris.Builtin.MkPair', E35, E36} -> (fun (V43, V44) -> case V40 of [] -> begin (V67 = [V3 | ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V45) -> ('dn--un--/=_Eq_DefFlag'(V45, V3)) end, case V44 of {'Idris.Core.Context.MkGlobalDef', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> V57 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V68) -> case V68 of {'Idris.Prelude.Types.Left', E58} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V71) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V43}, case V44 of {'Idris.Core.Context.MkGlobalDef', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> {'Idris.Core.Context.MkGlobalDef', V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V67, V84, V85, V86, V87, V88, V89, V90, V91, V92} end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V71)) end, V4)) end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V93) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V93)) end, V38))}, V4)) end end(E35, E36)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V94) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V94)) end, V38))}, V4)) end end(E33, E34)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V95) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V95)) end, V38))}, V4)) end end(E31, E32)); [] -> ('un--undefinedName'('erased', V0, V1, V2, V4)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V96) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V96)) end, V38))}, V4)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V1, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setNFThreshold'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V50 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E38, E39, E40, E41, E42, E43, E44} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, V36, {'Idris.Core.Options.MkElabDirectives', V43, V44, V45, V46, V47, V1, V49}, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V50} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setMutWith'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V40 = {'Idris.Prelude.Types.Just', V39}), (('case--case block in setMutWith-14574'(V3, V2, V1, V0, V8, V39, V40, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E31)); _ -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setLogTimings'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V58 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V36 of {'Idris.Core.Options.MkSessionOpts', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, {'Idris.Core.Options.MkSessionOpts', V43, V44, V45, V46, V47, V48, V49, V50, V1, V52, V53, V54, V55, V56, V57}, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V58} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setLinearCheck'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V1}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('un--addDef'(V0, {'Idris.Core.Name.Resolved', V1}, case V38 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> {'Idris.Core.Context.MkGlobalDef', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V2, V60, V61, V62, V63} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V42)) end, V3)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromString'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromString'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromInteger'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromInteger'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromDouble'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromDouble'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFromChar'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setFromChar'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V62 = [V3 | ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V40) -> ('dn--un--/=_Eq_DefFlag'(V40, V3)) end, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V52 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))]), ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V63) -> case V63 of {'Idris.Prelude.Types.Left', E53} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V66) -> ('un--addDef'(V0, V2, case V39 of {'Idris.Core.Context.MkGlobalDef', E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> {'Idris.Core.Context.MkGlobalDef', V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V62, V79, V80, V81, V82, V83, V84, V85, V86, V87} end(E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V66)) end, V4)) end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setExternal'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V40 = {'Idris.Prelude.Types.Just', V39}), (('case--case block in setExternal-15274'(V3, V2, V1, V0, V8, V39, V40, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E31)); _ -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setExtension'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, ('Idris.Idris2.Core.Options':'un--setExtension'(V1, V11)), V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDetermining'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V40 = {'Idris.Prelude.Types.Just', V39}), (('case--case block in setDetermining-14934'(V3, V2, V1, V0, V8, V39, V40, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E31)); _ -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDetags'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V40 = {'Idris.Prelude.Types.Just', V39}), (('case--case block in setDetags-15042'(V3, V2, V1, V0, V8, V39, V40, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V58 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E31)); _ -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDependsDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V44, V45, V1, V47, V48, V49, V50, V51, V52}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDefaultTotalityOption'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V50 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E38, E39, E40, E41, E42, E43, E44} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, V36, {'Idris.Core.Options.MkElabDirectives', V43, V44, V1, V46, V47, V48, V49}, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V50} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setDebugElabCheck'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V58 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V36 of {'Idris.Core.Options.MkSessionOpts', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, {'Idris.Core.Options.MkSessionOpts', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V1, V54, V55, V56, V57}, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V58} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCtxt'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V1, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCovering'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V40) -> case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V43) -> ('un--addDef'(V0, V2, case V39 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> case V54 of {'Idris.Core.TT.MkTotality', E55, E56} -> (fun (V65, V66) -> {'Idris.Core.Context.MkGlobalDef', V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, {'Idris.Core.TT.MkTotality', V65, V3}, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64} end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V43)) end, V4)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCompiled'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('un--addDef'(V0, V1, case V38 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> {'Idris.Core.Context.MkGlobalDef', V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, {'Idris.Prelude.Types.Just', V2}, V62, V63} end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V42)) end, V3)) end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setCG'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V58 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V36 of {'Idris.Core.Options.MkSessionOpts', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, {'Idris.Core.Options.MkSessionOpts', V43, V44, V45, V1, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57}, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V58} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setBuildDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V44, V1, V46, V47, V48, V49, V50, V51, V52}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAutoImplicitLimit'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V50 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E38, E39, E40, E41, E42, E43, E44} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, V36, {'Idris.Core.Options.MkElabDirectives', V43, V44, V45, V46, V1, V48, V49}, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V50} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAmbigLimit'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V50 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E38, E39, E40, E41, E42, E43, E44} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, V36, {'Idris.Core.Options.MkElabDirectives', V43, V44, V45, V1, V47, V48, V49}, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V50} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--setAllPublic'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V45 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V7 of {'Idris.Core.Context.MkContext', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V34, V35, V36, V37, V38, V39, V40, V41, V1, V43, V44}, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V45} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--returnDef'(V0, V1, V2) -> case V0 of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V2}}; 0 -> ('case--returnDef-5596'(V2, V1, case V2 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V20 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolved'(V0, V1) -> case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E0, E1} -> (fun (V2, V3) -> fun (V4) -> fun (V5) -> ((V3(V4))(V5)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resolveName'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E35} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', V2} end end(E35)); _ -> fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--getPosition'(V1, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V39, V40) -> begin (V41 = ('un--setCtxt'(V0, V40, V4))), case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Right', V39} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--resetFirstEntry'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V82 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> case V6 of {'Idris.Core.Context.MkContext', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', case case V5 of {'Idris.Core.Context.MkDefs', E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70) -> V44 end(E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81) -> V72 end(E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43}, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V82} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--refersToRuntime'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V15 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--refersTo'(V0) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')) end, fun () -> fun (V1) -> V1 end end, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V14 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--reducibleInAny'(V0, V1, V2) -> (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V14)) end end}, fun (V15) -> ('un--reducibleIn'(V15, V1, V2)) end))(V0)).
'un--reducibleIn'(V0, V1, V2) -> case V1 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V3, V4) -> case V4 of {'Idris.Core.Name.UN', E2} -> (fun (V5) -> case V2 of {'Idris.Core.TT.Export'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); {'Idris.Core.TT.Private'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); _ -> 0 end end(E2)); {'Idris.Core.Name.RF', E3} -> (fun (V6) -> case V2 of {'Idris.Core.TT.Export'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); {'Idris.Core.TT.Private'} -> (fun () -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V3, V0)) end()); _ -> 0 end end(E3)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'un--recordWarning'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, [V1 | V33]} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--prettyName'(V0, V1) -> case V1 of {'Idris.Core.Name.Nested', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> fun (V6) -> begin (V11 = ('un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_Name'(V9, V10)) end end}, {'Idris.Core.Name.Resolved', V4}, V6))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = (('un--prettyName'(V0, V13))(V6))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = (('un--prettyName'(V0, V3))(V6))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V16, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<","/utf8>>, V19))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))} end end end(E0, E1)); {'Idris.Core.Name.CaseBlock', E10, E11} -> (fun (V21, V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case block in "/utf8>>, V21))} end end(E10, E11)); {'Idris.Core.Name.WithBlock', E12, E13} -> (fun (V24, V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with block in "/utf8>>, V24))} end end(E12, E13)); {'Idris.Core.Name.NS', E14, E15} -> (fun (V27, V28) -> ('un--prettyName'(V0, V28)) end(E14, E15)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1))} end end.
'un--noDeclaration'(V0, V1, V2, V3, V4) -> ('un--maybeMisspelling'('erased', V1, {'Idris.Core.Core.NoDeclaration', V2, V3}, V3, V4)).
'un--newEntry'(V0, V1) -> begin (V13 = case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V25 = case V1 of {'Idris.Core.Context.MkContext', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V18 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V25))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E22} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V30) -> begin (V36 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V13, ('Idris.Idris2.Erlang.Data.IOArray':'un--max'('erased', V30)))) of 0 -> begin (V32 = begin (V31 = (('Idris.Idris2.Erlang.Data.IOArray':'un--newArrayCopy'('erased', ((('Idris.Idris2.Erlang.Data.IOArray':'un--max'('erased', V30)) + ('un--Grow'())) rem 9223372036854775808), V30))(V26))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E24} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V34) -> begin (V35 = ('erlang':'put'(V25, V34))), {'Idris.Prelude.Types.Right', V35} end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V36 of {'Idris.Prelude.Types.Left', E26} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V13, case V1 of {'Idris.Core.Context.MkContext', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkContext', V39, ((V13 + 1) rem 9223372036854775808), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, V13, V41)), ('un--addPossible'(V0, V13, V42)), V43, V44, V45, V46, V47, V48, V49} end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--newDef'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Core.Context.MkGlobalDef', V0, V1, V4, [], [], [], [], V2, V3, V5, ('Idris.Idris2.Core.TT':'un--unchecked'()), [], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, 1, 1, 1, V6, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, []}.
'un--newAlias'(V0, V1, V2, V3) -> begin (V4 = (('un--getPosition'(V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', case V8 of {'Idris.Core.Context.MkContext', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Core.Context.MkContext', V9, V10, V11, ('un--addAlias'(V0, V1, V7, V12)), V13, V14, V15, V16, V17, V18, V19} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--maybeMisspelling'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--getSimilarNames'(V1, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of [] -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V2, V4)); [E2 | E3] -> (fun (V8, V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.MaybeMisspelling', V2, {'Idris.Data.List1.:::', V8, V9}}, V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupTyName'(V0, V1, V2) -> ('un--lookupNameBy'('erased', fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupTyExact'(V0, V1, V2) -> ('un--lookupExactBy'('erased', fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupNameBy'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--lookupCtxtName'(V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> {'Idris.Builtin.MkPair', V9, {'Idris.Builtin.MkPair', V11, (V1(V12))}} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupExactBy'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--lookupCtxtExact'(V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Prelude.Types.Just', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', (V1(V8))}} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lookupDefTyExact'(V0, V1, V2) -> ('un--lookupExactBy'('erased', fun (V3) -> {'Idris.Builtin.MkPair', case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V3 of {'Idris.Core.Context.MkGlobalDef', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V27 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end, V0, V1, V2)).
'un--lookupDefName'(V0, V1, V2) -> ('un--lookupNameBy'('erased', fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupDefExact'(V0, V1, V2) -> ('un--lookupExactBy'('erased', fun (V3) -> case V3 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V21 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1, V2)).
'un--lookupCtxtName'(V0, V1) -> ('case--lookupCtxtName-6353'(V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--lookupCtxtExactI'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> ('case--lookupCtxtExactI-5664'(V2, V1, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'('erased', V2, case V1 of {'Idris.Core.Context.MkContext', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V9 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E11)); _ -> ('case--lookupCtxtExactI-5739'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'un--lookupCtxtExact'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E5} -> (fun (V2) -> ('case--lookupCtxtExact-5763'(V2, V1, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'('erased', V2, case V1 of {'Idris.Core.Context.MkContext', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V9 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E5)); _ -> fun (V14) -> begin (V15 = (('un--lookupCtxtExactI'(V0, V1))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of {'Idris.Prelude.Types.Just', E2} -> (fun (V18) -> case V18 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V19, V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V20}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--lookupContextEntry'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> ('case--lookupContextEntry-5954'(V2, V1, ('Idris.Idris2.Libraries.Data.IntMap':'un--lookup'('erased', V2, case V1 of {'Idris.Core.Context.MkContext', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V9 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E11)); _ -> ('case--lookupContextEntry-6031'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'un--lazyActive'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V50 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V37 of {'Idris.Core.Options.MkElabDirectives', E38, E39, E40, E41, E42, E43, E44} -> (fun (V43, V44, V45, V46, V47, V48, V49) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, V36, {'Idris.Core.Options.MkElabDirectives', V1, V44, V45, V46, V47, V48, V49}, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V50} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isVisible'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--any'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V101, V102, V103)) end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V106, V107, V108)) end end end end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V110)) end end}, fun (V111) -> ('nested--22886-17012--in--un--visible'(V1, V0, V111)) end))(('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Core.Name.Namespace':'un--allParents'(case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', case V6 of {'Idris.Core.Context.MkDefs', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> V37 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case case V6 of {'Idris.Core.Context.MkDefs', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93} -> (fun (V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V61 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98) -> V95 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isUnboundImplicits'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V36 end(E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7, E8} -> (fun (V42, V43, V44, V45, V46, V47, V48) -> V43 end(E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isPrefixRecordProjections'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case case case V4 of {'Idris.Core.Context.MkDefs', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V9 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V35 end(E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7, E8} -> (fun (V41, V42, V43, V44, V45, V46, V47) -> V47 end(E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V48) -> begin (V49 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V49} end end, V1)).
'un--isPairType'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--isPairType-19416'(V1, V0, V6, case case V6 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V11 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V38 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isLazyActive'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V36 end(E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7, E8} -> (fun (V42, V43, V44, V45, V46, V47, V48) -> V42 end(E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isHidden'(V0, V1) -> ('Idris.Idris2.Data.Maybe':'un--isJust'('erased', ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> V12 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))).
'un--isExtension'(V0, V1) -> ('Idris.Idris2.Core.Options':'un--isExtension'(V0, case V1 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--isEqualTy'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--isEqualTy-19533'(V1, V0, V6, case case V6 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V11 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> V39 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isAllPublic'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V41 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initSize'() -> 10000.
'un--initHash'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V33 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, 5381, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initDefs'(V0) -> begin (V1 = ('un--initCtxt'(V0))), case V1 of {'Idris.Prelude.Types.Left', E0} -> (fun (V2) -> {'Idris.Prelude.Types.Left', V2} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkDefs', V3, [], ('Idris.Idris2.Core.Name.Namespace':'un--mainNS'()), [], ('Idris.Idris2.Core.Options':'un--defaults'()), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), 100, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), [], [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), 5381, [], [], [], [], [], ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'('erased')), []}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initCtxtS'(V0, V1) -> begin (V3 = begin (V2 = ('Idris.Idris2.Erlang.Data.IOArray':'un--newArray'('erased', V0, V1))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Context.Arr'}, V5, V1))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkContext', 0, 0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased')), ('Idris.Idris2.Libraries.Data.StringMap':'un--empty'('erased')), V8, 0, ('Idris.Idris2.Libraries.Data.IntMap':'un--empty'('erased')), [('Idris.Idris2.Core.Name.Namespace':'un--partialEvalNS'()) | []], 1, 1, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'('erased'))}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initCtxt'(V0) -> ('un--initCtxtS'(('un--initSize'()), V0)).
'un--inCurrentNS'(V0, V1) -> case V1 of {'Idris.Core.Name.UN', E0} -> (fun (V2) -> fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V10 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Name.UN', V2}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.Name.CaseBlock', E30, E31} -> (fun (V35, V36) -> fun (V37) -> begin (V39 = begin (V38 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E32} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V41 of {'Idris.Core.Context.MkDefs', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> V44 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30, E31)); {'Idris.Core.Name.WithBlock', E61, E62} -> (fun (V69, V70) -> fun (V71) -> begin (V73 = begin (V72 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E63} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V75 of {'Idris.Core.Context.MkDefs', E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> V78 end(E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61, E62)); {'Idris.Core.Name.Nested', E92, E93} -> (fun (V103, V104) -> fun (V105) -> begin (V107 = begin (V106 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V106} end), case V107 of {'Idris.Prelude.Types.Left', E94} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V109 of {'Idris.Core.Context.MkDefs', E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136) -> V112 end(E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92, E93)); {'Idris.Core.Name.MN', E123, E124} -> (fun (V137, V138) -> fun (V139) -> begin (V141 = begin (V140 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V140} end), case V141 of {'Idris.Prelude.Types.Left', E125} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V143) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V143 of {'Idris.Core.Context.MkDefs', E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153} -> (fun (V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170) -> V146 end(E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E123, E124)); {'Idris.Core.Name.DN', E154, E155} -> (fun (V171, V172) -> fun (V173) -> begin (V175 = begin (V174 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V174} end), case V175 of {'Idris.Prelude.Types.Left', E156} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V177) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V177 of {'Idris.Core.Context.MkDefs', E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184} -> (fun (V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204) -> V180 end(E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E154, E155)); {'Idris.Core.Name.RF', E185} -> (fun (V205) -> fun (V206) -> begin (V208 = begin (V207 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V207} end), case V208 of {'Idris.Prelude.Types.Left', E186} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E186)); {'Idris.Prelude.Types.Right', E187} -> (fun (V210) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', case V210 of {'Idris.Core.Context.MkDefs', E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214} -> (fun (V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237) -> V213 end(E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1}} end(E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E185)); _ -> fun (V238) -> {'Idris.Prelude.Types.Right', V1} end end.
'un--holeInit'(V0) -> {'Idris.Core.Context.MkHoleFlags', V0, 1}.
'un--hideName'(V0, V1) -> case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V0, {'Idris.Builtin.MkUnit'}, V12))} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--hide'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of [E31 | E32] -> (fun (V38, V39) -> case V38 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V40, V41) -> case V39 of [] -> begin (V69 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> {'Idris.Core.Context.MkDefs', ('un--hideName'(V40, V42)), V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V69} end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V70) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V70)) end, V37))}, V3)) end end(E33, E34)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V71) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V71)) end, V37))}, V3)) end end(E31, E32)); [] -> ('un--undefinedName'('erased', V0, V1, V2, V3)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V72) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V72)) end, V37))}, V3)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--hasFlag'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--lookupCtxtExact'(V2, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V40) -> fun (V41) -> ('dn--un--==_Eq_DefFlag'(V40, V41)) end end, fun (V42) -> fun (V43) -> ('dn--un--/=_Eq_DefFlag'(V42, V43)) end end}, V3, case V39 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V55 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getWorkingDir'(V0) -> begin (V29 = begin (V28 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}))(V0))), {'Idris.Prelude.Types.Right', V28} end), case V29 of {'Idris.Prelude.Types.Left', E0} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V31) -> case V31 of {'Idris.Prelude.Types.Just', E2} -> (fun (V32) -> {'Idris.Prelude.Types.Right', V32} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V0)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVisible'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V40 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getVisibility'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> {'Idris.Prelude.Types.Right', case V38 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V48 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getUserHoles'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V51 = ('Idris.Idris2.Data.List':'un--sort'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V8, V9)) end end}, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V22, V23)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V47 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V52) -> fun (V53) -> ('nested--16926-11615--in--un--isHole'(V0, V5, V52, V53)) end end, V51))(V1)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getTotality'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> {'Idris.Prelude.Types.Right', case V38 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V49 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSizeChange'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E31} -> (fun (V38) -> {'Idris.Prelude.Types.Right', case V38 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V59 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--undefinedName'('erased', V0, V1, V2, V3)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSimilarNames'(V0, V1) -> ('case--getSimilarNames-10971'(V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1)))).
'un--getSession'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V35 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSearchData'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = ('un--lookupDefExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> case V39 of {'Idris.Core.Context.TCon', E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47) -> begin (V83 = begin (V52 = ('un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V48) -> fun (V49) -> ('dn--un--full_HasNames_Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('dn--un--resolved_HasNames_Name'(V50, V51)) end end}, V3, V4))), case V52 of {'Idris.Prelude.Types.Left', E40} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V54) -> begin (V55 = {'Idris.Prelude.Types.Just', {'Idris.Core.Context.TCon', V40, V41, V42, V43, V44, V45, V46, V47}}), (('case--case block in getSearchData-14227'(V3, V2, V1, V0, V8, V40, V41, V42, V45, V46, V47, V44, V43, V55, V54, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V54, case V8 of {'Idris.Core.Context.MkDefs', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V63 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V4)) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V83 of {'Idris.Prelude.Types.Left', E69} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V85) -> case V2 of 0 -> begin (V145 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V86) -> fun (V87) -> begin (V115 = (('nested--19718-14135--in--un--notHidden'(V3, V2, V1, V0, 'erased', V86, case V8 of {'Idris.Core.Context.MkDefs', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114) -> V88 end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V87))), case V115 of {'Idris.Prelude.Types.Left', E98} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V117) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--&&'(('nested--19718-14136--in--un--isDefault'(V3, V2, V1, V0, V86)), fun () -> V117 end))} end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V8 of {'Idris.Core.Context.MkDefs', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126} -> (fun (V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144) -> V126 end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V4))), case V145 of {'Idris.Prelude.Types.Left', E127} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V147) -> begin (V149 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V148) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V148)) end, V147))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', [], [{'Idris.Builtin.MkPair', 1, V149} | []]}} end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V205 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V150) -> ('nested--19718-14135--in--un--notHidden'(V3, V2, V1, V0, 'erased', V150, case V8 of {'Idris.Core.Context.MkDefs', E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155} -> (fun (V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177) -> V151 end(E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V8 of {'Idris.Core.Context.MkDefs', E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182} -> (fun (V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204) -> V187 end(E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V4))), case V205 of {'Idris.Prelude.Types.Left', E183} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E183)); {'Idris.Prelude.Types.Right', E184} -> (fun (V207) -> begin (V209 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V208) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V208)) end, V207))), begin (V269 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V210) -> fun (V211) -> begin (V239 = (('nested--19718-14135--in--un--notHidden'(V3, V2, V1, V0, 'erased', V210, case V8 of {'Idris.Core.Context.MkDefs', E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211} -> (fun (V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238) -> V212 end(E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V211))), case V239 of {'Idris.Prelude.Types.Left', E212} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E212)); {'Idris.Prelude.Types.Right', E213} -> (fun (V241) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--not'(('nested--19718-14136--in--un--isDefault'(V3, V2, V1, V0, V210)))), fun () -> V241 end))} end(E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V8 of {'Idris.Core.Context.MkDefs', E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240} -> (fun (V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268) -> V250 end(E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V4))), case V269 of {'Idris.Prelude.Types.Left', E241} -> (fun (V270) -> {'Idris.Prelude.Types.Left', V270} end(E241)); {'Idris.Prelude.Types.Right', E242} -> (fun (V271) -> begin (V273 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V272) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V272)) end, V271))), begin (V276 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V274) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V274)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V275) -> ('nested--19718-14137--in--un--direct'(V3, V2, V1, V0, V275)) end, V85))))), begin (V279 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V277) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V277)) end, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V278) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('nested--19718-14137--in--un--direct'(V3, V2, V1, V0, V278)))) end, V85))))), {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkSearchData', V43, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V280) -> ('Idris.Idris2.Data.List':'un--isCons'('erased', ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V280)))) end, [{'Idris.Builtin.MkPair', 1, V209} | [{'Idris.Builtin.MkPair', 1, V273} | [{'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Basics':'un--not'(case V44 of {'Idris.Core.Context.MkTypeFlags', E243, E244} -> (fun (V281, V282) -> V281 end(E243, E244)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V276} | [{'Idris.Builtin.MkPair', 0, V279} | []]]]]))}} end end end end(E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('un--undefinedName'('erased', V0, V1, V3, V4)) end end(E31)); _ -> ('un--undefinedName'('erased', V0, V1, V3, V4)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getRewrite'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkRewriteNs', E2, E3} -> (fun (V7, V8) -> V8 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V13 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V41 end(E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getResolvedAs'(V0) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V3 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getPrimitiveNames'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Options':'un--primNamesToList'(V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> ('un--getPrimNames'(V0, V5)) end, V1)).
'un--getPrimNames'(V0, V1) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V2) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V3) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V4) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V5) -> {'Idris.Prelude.Types.Right', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> {'Idris.Core.Options.MkPrimNs', V6, V7, V8, V9} end end end end} end, fun (V10) -> ('un--fromIntegerName'(V0, V10)) end, V4)) end, fun (V11) -> ('un--fromStringName'(V0, V11)) end, V3)) end, fun (V12) -> ('un--fromCharName'(V0, V12)) end, V2)) end, fun (V13) -> ('un--fromDoubleName'(V0, V13)) end, V1)).
'un--getPosition'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V2, V1}} end end(E11)); _ -> ('case--getPosition-5272'(V1, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end.
'un--getPPrint'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V34 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNextTypeTag'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V34 = begin (V33 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, ((V12 + 1) rem 9223372036854775808), V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E29} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V43 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNextEntry'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V34 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNestedNS'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNameID'(V0, V1) -> case V0 of {'Idris.Core.Name.Resolved', E11} -> (fun (V2) -> {'Idris.Prelude.Types.Just', V2} end(E11)); _ -> ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V0, case V1 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end.
'un--getNS'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getImported'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V24 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFullName'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E0} -> (fun (V2) -> fun (V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'({'Idris.Core.Name.Resolved', V2}, case V7 of {'Idris.Core.Context.MkDefs', E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Right', case V38 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V40 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V2}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V60) -> {'Idris.Prelude.Types.Right', V1} end end.
'un--getFnName'(V0) -> case V0 of {'Idris.Core.Context.MkTransform', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> ('case--getFnName-6616'(V1, V2, V3, V5, V4, ('Idris.Idris2.Core.TT':'un--getFn'('erased', V4)))) end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getDirs'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V33 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDirectives'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V7) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V7} end, case case case V6 of {'Idris.Core.Context.MkDefs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V12 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V37 end(E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkSessionOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58) -> V48 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V59) -> ('nested--22422-16568--in--un--getDir'(V1, V0, V59)) end, case V6 of {'Idris.Core.Context.MkDefs', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V80 end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDefaultTotalityOption'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V36 end(E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7, E8} -> (fun (V42, V43, V44, V45, V46, V47, V48) -> V44 end(E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getContent'(V0) -> case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getAutoImplicitLimit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V36 end(E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7, E8} -> (fun (V42, V43, V44, V45, V46, V47, V48) -> V46 end(E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getAmbigLimit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V36 end(E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkElabDirectives', E2, E3, E4, E5, E6, E7, E8} -> (fun (V42, V43, V44, V45, V46, V47, V48) -> V45 end(E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--full'(V0, V1) -> case V1 of {'Idris.Core.Context.dn--un--__mkHasNames', E0, E1} -> (fun (V2, V3) -> fun (V4) -> fun (V5) -> ((V2(V4))(V5)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fstName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V6) -> {'Idris.Prelude.Types.Just', case V6 of {'Idris.Core.Options.MkPairNs', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end, case case V5 of {'Idris.Core.Context.MkDefs', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V14 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E5, E6, E7, E8, E9, E10, E11, E12, E13} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V41 end(E5, E6, E7, E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromStringName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V39 end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkPrimNs', E2, E3, E4, E5} -> (fun (V42, V43, V44, V45) -> V43 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromIntegerName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V39 end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkPrimNs', E2, E3, E4, E5} -> (fun (V42, V43, V44, V45) -> V42 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromDoubleName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V39 end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkPrimNs', E2, E3, E4, E5} -> (fun (V42, V43, V44, V45) -> V45 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fromCharName'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case case V5 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V10 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V39 end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkPrimNs', E2, E3, E4, E5} -> (fun (V42, V43, V44, V45) -> V44 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findSetTotal'(V0) -> case V0 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Core.Context.SetTotal', E2} -> (fun (V3) -> {'Idris.Prelude.Types.Just', V3} end(E2)); _ -> ('un--findSetTotal'(V2)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extendNS'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, V1)), V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dumpStaging'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V74 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Staging area: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V33) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V33)) end, fun (V34) -> fun (V35) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V34, V35)) end end}, ('Idris.Idris2.Libraries.Data.IntMap':'un--keys'('erased', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V36 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73) -> V69 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))(V1))), {'Idris.Prelude.Types.Right', V74} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropOpenHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V11 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_Name'(V9, V10)) end end}, V1, V2))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V41 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'('erased', V13, V23)), V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--dropMutData'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V34) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V34, V1)) end, V8)), V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V35} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--depth'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', case case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Context.MkContext', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V38 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--defaultPI'() -> {'Idris.Core.Context.MkPMDefInfo', {'Idris.Core.Context.NotHole'}, 1}.
'un--defaultFlags'() -> {'Idris.Core.Context.MkTypeFlags', 1, 1}.
'un--decode'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Context.Coded', E0} -> (fun (V4) -> fun (V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Libraries.Utils.Binary.Bin'}, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.TTC':'dn--un--fromBuf_TTC_GlobalDef'(V8, V5))), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> begin (V12 = ('un--getContent'(V0))), begin (V14 = begin (V13 = ('erlang':'get'(V12))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V16) -> begin (V17 = ('dn--un--resolved_HasNames_GlobalDef'(V0, V11, V5))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> begin (V21 = case V2 of 0 -> begin (V20 = (('Idris.Idris2.Erlang.Data.IOArray':'un--writeArray'('erased', V16, V1, {'Idris.Core.Context.Decoded', V19}))(V5))), {'Idris.Prelude.Types.Right', V20} end; 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V21 of {'Idris.Prelude.Types.Left', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Right', V19} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.Context.Decoded', E11} -> (fun (V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', V24} end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--commitCtxt'(V0) -> ('case--commitCtxt-6501'(V0, case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--commit'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V33 = (('un--commitCtxt'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V1))), case V33 of {'Idris.Prelude.Types.Left', E29} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V35) -> ('un--setCtxt'(V0, V35, V1)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearUserHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, ('Idris.Idris2.Libraries.Data.NameMap':'un--delete'('erased', V1, V30)), V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearSavedHints'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V33 = ('erlang':'put'(V0, case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, [], [], V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V33} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clearDefs'(V0, V1) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V2 of {'Idris.Core.Context.MkContext', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> {'Idris.Core.Context.MkDefs', {'Idris.Core.Context.MkContext', V29, V30, V31, V32, V33, V34, V35, V36, V37, 0, V39}, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28} end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--clearCtxt'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('un--initDefs'(V1))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V90 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, ('nested--16044-10800--in--un--resetElab'(V0, case V5 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V40 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, case V5 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V88 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V35} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V90} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--checkUnambig'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = ('un--lookupDefName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of [] -> ('un--undefinedName'('erased', V0, V1, V2, V3)); [E31 | E32] -> (fun (V38, V39) -> case V38 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V40, V41) -> case V41 of {'Idris.Builtin.MkPair', E35, E36} -> (fun (V42, V43) -> case V39 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.Resolved', V42}}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V44)) end, V37))}, V3)) end end(E35, E36)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V45) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V45)) end, V37))}, V3)) end end(E33, E34)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V46)) end, V37))}, V3)) end end(E31, E32)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V47) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V47)) end, V37))}, V3)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--canonicalName'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtName'(V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of [] -> ('un--undefinedName'('erased', V0, V1, V2, V3)); [E31 | E32] -> (fun (V38, V39) -> case V38 of {'Idris.Builtin.MkPair', E33, E34} -> (fun (V40, V41) -> case V41 of {'Idris.Builtin.MkPair', E35, E36} -> (fun (V42, V43) -> case V39 of [] -> {'Idris.Prelude.Types.Right', V40}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V44)) end, V37))}, V3)) end end(E35, E36)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V45) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V45)) end, V37))}, V3)) end end(E33, E34)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V46) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V46)) end, V37))}, V3)) end end(E31, E32)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AmbiguousName', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V47) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V47)) end, V37))}, V3)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--branchCtxt'(V0, V1) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> {'Idris.Core.Context.MkContext', V2, V3, V4, V5, V6, (1 + V7), V8, V9, V10, V11, V12} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--branch'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V33 = ('un--branchCtxt'(case V5 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))), case V33 of {'Idris.Prelude.Types.Left', E29} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V35) -> begin (V36 = ('un--setCtxt'(V0, V35, V1))), case V36 of {'Idris.Prelude.Types.Left', E31} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V38) -> {'Idris.Prelude.Types.Right', V5} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--allNames'(V0) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V1) -> ('dn--un--full_HasNames_Name'(V0, V1)) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V2) -> {'Idris.Core.Name.Resolved', V2} end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_$a'('erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Num.dn--un--__mkIntegral', {'Idris.Prelude.Num.dn--un--__mkNum', fun (V3) -> fun (V4) -> ((V3 + V4) rem 9223372036854775808) end end, fun (V5) -> fun (V6) -> ((V5 * V6) rem 9223372036854775808) end end, fun (V7) -> V7 end}, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Num':'dn--un--div_Integral_Int'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Num':'dn--un--mod_Integral_Int'(V10, V11)) end end}, {'Idris.Builtin.MkPair', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V14, V15)) end end}, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_Int'(V16, V17)) end end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V20, V21)) end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Int'(V22, V23)) end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_Int'(V26, V27)) end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_Int'(V28, V29)) end end}, {'Idris.Prelude.Num.dn--un--__mkNeg', {'Idris.Prelude.Num.dn--un--__mkNum', fun (V30) -> fun (V31) -> ((V30 + V31) rem 9223372036854775808) end end, fun (V32) -> fun (V33) -> ((V32 * V33) rem 9223372036854775808) end end, fun (V34) -> V34 end}, fun (V35) -> ('Idris.Idris2.Prelude.Num':'dn--un--negate_Neg_Int'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V36, V37)) end end}}}, 1, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(case V0 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V39 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 1)))))), [])).
'un--aliasName'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--aliasName-11342'(V1, V0, V6, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V1))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addUserHole'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V1, {'Idris.Builtin.MkUnit'}, V30)), V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addTransform'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--addTransform-15966'(V2, V1, V0, V7, ('un--getFnName'(V2))))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addToSave'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = (('dn--un--full_HasNames_Name'(case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))(V2))), case V34 of {'Idris.Prelude.Types.Left', E29} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V36) -> begin (V64 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> {'Idris.Core.Context.MkDefs', V37, V38, V39, V40, V41, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V36, {'Idris.Builtin.MkUnit'}, V42)), V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V36, {'Idris.Builtin.MkUnit'}, V59)), V60, V61, V62, V63} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V64} end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addPossible'(V0, V1, V2) -> ('case--addPossible-5059'(V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--addPkg'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V58 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V36 of {'Idris.Core.Options.MkSessionOpts', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, {'Idris.Core.Options.MkSessionOpts', V43, V44, V45, V46, V47, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V48, [V1 | []])), V49, V50, V51, V52, V53, V54, V55, V56, V57}, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V58} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addPackageDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V44, V45, V46, V47, V48, V49, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V50, [V1 | []])), V51, V52}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addOpenHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V11 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_Name'(V9, V10)) end end}, V1, V2))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V41 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V13, {'Idris.Builtin.MkUnit'}, V23)), V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addNameDirective'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('un--checkUnambig'(V0, V1, V2, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V39 = ('erlang':'put'(V0, case V8 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V11, V3, V27)), V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V39} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addName'(V0, V1) -> case V1 of {'Idris.Core.Name.Resolved', E35} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', V2} end end(E35)); _ -> fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = (('un--newEntry'(V1, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V39, V40) -> begin (V41 = ('un--setCtxt'(V0, V40, V4))), case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> {'Idris.Prelude.Types.Right', V39} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--addMutData'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, [V1 | V8], V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLogLevel'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V58 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V36 of {'Idris.Core.Options.MkSessionOpts', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', V34, V35, {'Idris.Core.Options.MkSessionOpts', V43, V44, V45, V46, V47, V48, V49, ('Idris.Idris2.Core.Options.Log':'un--defaultLogLevel'()), V51, V52, V53, V54, V55, V56, V57}, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V58} end end()); {'Idris.Prelude.Types.Just', E53} -> (fun (V59) -> begin (V111 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> case V64 of {'Idris.Core.Options.MkOptions', E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95) -> case V89 of {'Idris.Core.Options.MkSessionOpts', E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110) -> {'Idris.Core.Context.MkDefs', V60, V61, V62, V63, {'Idris.Core.Options.MkOptions', V87, V88, {'Idris.Core.Options.MkSessionOpts', V96, V97, V98, V99, V100, V101, V102, (('Idris.Idris2.Core.Options.Log':'un--insertLogLevel'(V59))(V103)), V104, V105, V106, V107, V108, V109, V110}, V90, V91, V92, V93, V94, V95}, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86} end(E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V111} end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLocalHint'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V11 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V7) -> fun (V8) -> ('dn--un--full_HasNames_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('dn--un--resolved_HasNames_Name'(V9, V10)) end end}, V1, V2))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V41 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> {'Idris.Core.Context.MkDefs', V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V13, {'Idris.Builtin.MkUnit'}, V24)), V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V41} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addLibDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V44, V45, V46, V47, V48, V49, V50, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V51, [V1 | []])), V52}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addImported'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V34 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, [V1 | V25], V26, V27, V28, V29, V30, V31, V32, V33} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHintFor'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V15 = ('un--toFullNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V11) -> fun (V12) -> ('dn--un--full_HasNames_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('dn--un--resolved_HasNames_Name'(V13, V14)) end end}, V2, V6))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V22 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> ('dn--un--full_HasNames_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('dn--un--resolved_HasNames_Name'(V20, V21)) end end}, V3, V6))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V52 = ('case--addHintFor-15407'(V5, V4, V3, V2, V1, V0, V10, V17, V24, ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'('erased', V17, case V10 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V32 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))), case V5 of 0 -> begin (V80 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79) -> {'Idris.Core.Context.MkDefs', V53, V54, V55, V56, V57, V58, V59, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V17, [{'Idris.Builtin.MkPair', V24, V4} | V52], V60)), V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79} end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V80} end; 1 -> begin (V108 = ('erlang':'put'(V0, case V10 of {'Idris.Core.Context.MkDefs', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107) -> {'Idris.Core.Context.MkDefs', V81, V82, V83, V84, V85, V86, V87, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V17, [{'Idris.Builtin.MkPair', V24, V4} | V52], V88)), V89, V90, V91, [{'Idris.Builtin.MkPair', V17, {'Idris.Builtin.MkPair', V24, V4}} | V92], V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107} end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V108} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHashWithNames'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--toFullNames'('erased', V1, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--addHash'('erased', V1, V2, V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addHash'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V65 = ('erlang':'put'(V1, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.Context.MkDefs', V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, case V2 of {'Idris.Core.Hash.dn--un--__mkHashable', E29, E30} -> (fun (V36, V37) -> ((V37(case V8 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V54 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V65} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addGlobalHint'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V12 = ('un--toResolvedNames'('erased', V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V8) -> fun (V9) -> ('dn--un--full_HasNames_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('dn--un--resolved_HasNames_Name'(V10, V11)) end end}, V1, V3))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V42 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> {'Idris.Core.Context.MkDefs', V15, V16, V17, V18, V19, V20, V21, V22, ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V14, V2, V23)), V24, V25, V26, [{'Idris.Builtin.MkPair', V14, V2} | V27], V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V42} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addExtraDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V44, V45, V46, V47, V48, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V49, [V1 | []])), V50, V51, V52}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addEntry'(V0, V1, V2) -> ('case--addEntry-5476'(V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(case V2 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))))).
'un--addDirective'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--addDirective-16477'(V0, V2, V1, V7, ('Idris.Idris2.Core.Options':'un--getCG'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V12 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1))))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDef'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--addCtxt'(V1, V2, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V38, V39) -> begin (V68 = begin (V67 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.MkDefs', V39, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E60} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V70) -> begin (V93 = begin (V71 = {'Idris.Builtin.MkPair', V38, V39}), (('case--case block in addDef-11754'(V2, V1, V0, V7, V38, V39, V71, case V2 of {'Idris.Core.Context.MkGlobalDef', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92) -> V89 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end), case V93 of {'Idris.Prelude.Types.Left', E83} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V95) -> {'Idris.Prelude.Types.Right', V38} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDataDir'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V53 = ('erlang':'put'(V0, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> case V11 of {'Idris.Core.Options.MkOptions', E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V34 of {'Idris.Core.Options.MkDirs', E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> {'Idris.Core.Context.MkDefs', V7, V8, V9, V10, {'Idris.Core.Options.MkOptions', {'Idris.Core.Options.MkDirs', V43, V44, V45, V46, V47, V48, V49, V50, V51, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V52, [V1 | []]))}, V35, V36, V37, V38, V39, V40, V41, V42}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33} end(E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addCtxt'(V0, V1, V2) -> ('case--addCtxt-5358'(V2, V1, V0, ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(case V2 of {'Idris.Core.Context.MkContext', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(0)))))).
'un--addContextEntry'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--addEntry'(V1, {'Idris.Core.Context.Coded', V2}, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E31, E32} -> (fun (V38, V39) -> begin (V68 = begin (V67 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.MkDefs', V39, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V67} end), case V68 of {'Idris.Prelude.Types.Left', E60} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V70) -> {'Idris.Prelude.Types.Right', V38} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addContextAlias'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('un--lookupCtxtExact'(V1, case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V65 = ('un--newAlias'(V1, V2, case V7 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64) -> V38 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V65 of {'Idris.Prelude.Types.Left', E58} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V67) -> begin (V95 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94) -> {'Idris.Core.Context.MkDefs', V67, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94} end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V95} end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addBuiltin'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V10) -> ('un--addDef'(V1, V2, {'Idris.Core.Context.MkGlobalDef', ('Idris.Idris2.Core.FC':'un--emptyFC'()), V2, V3, [], [], [], [], ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), [], {'Idris.Core.TT.Public'}, V4, [{'Idris.Core.Context.Inline'} | []], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, 1, 1, 0, {'Idris.Core.Context.Builtin', V0, V5}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, []}, V10)) end, V6)).
'un--addAlias'(V0, V1, V2, V3) -> ('case--addAlias-5120'(V3, V2, V1, V0, ('Idris.Idris2.Core.Name':'un--userNameRoot'(V0)))).
'un--Grow'() -> ('un--initSize'()).
