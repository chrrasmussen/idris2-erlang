-module('Idris.Idris2.TTImp.Elab.Utils').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--7095-14218--in--un--notLets'/8,
  'nested--6222-13446--in--un--notErased'/10,
  'nested--7542-14734--in--un--binderInlineSafe'/7,
  'nested--7850-14882--in--un--altsSafe'/8,
  'nested--7542-14676--in--un--allInlineSafe'/8,
  'un--wrapErrorC'/3,
  'un--updateErasable'/3,
  'un--termInlineSafe'/3,
  'un--setUsedVar'/2,
  'un--setUsed'/3,
  'un--plicit'/1,
  'un--isUsed'/2,
  'un--inlineSafe'/3,
  'un--initUsedCase'/1,
  'un--initUsed'/1,
  'un--inExtended'/5,
  'un--findErasedFrom'/5,
  'un--findErased'/3,
  'un--extendUsed'/3,
  'un--dropUsed'/2,
  'un--detagSafe'/4,
  'un--caseInlineSafe'/3,
  'un--caseAltInlineSafe'/3,
  'un--canInlineDef'/3,
  'un--canInlineCaseBlock'/3,
  'un--bindReq'/6,
  'un--bindNotReq'/7
]).
'nested--7095-14218--in--un--notLets'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> V5; [E0 | E1] -> (fun (V8, V9) -> case V7 of {'Idris.Core.Env.::', E2, E3} -> (fun (V10, V11) -> case ('Idris.Idris2.Core.TT':'un--isLet'(V10)) of 1 -> ('nested--7095-14218--in--un--notLets'(V0, V1, V2, V3, V4, V5, V9, V11)); 0 -> ('nested--7095-14218--in--un--notLets'(V0, V1, V2, V3, V4, [V8 | V5], V9, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6222-13446--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V8 of [] -> 1; _ -> case V9 of [] -> 0; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Core.Value.NErased', E2, E3} -> (fun (V12, V13) -> case V13 of 1 -> ('nested--6222-13446--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V7, (1 + 0))), V8, V11)); _ -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V16, V17)) end end}, V7, V8)) of 1 -> 1; 0 -> ('nested--6222-13446--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V7, (1 + 0))), V8, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--/=_Eq_Nat'(V20, V21)) end end}, V7, V8)) of 1 -> 1; 0 -> ('nested--6222-13446--in--un--notErased'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V7, (1 + 0))), V8, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--7542-14734--in--un--binderInlineSafe'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Let', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> ('un--termInlineSafe'(V0, V5, V9)) end(E0, E1, E2, E3)); _ -> fun (V11) -> {'Idris.Prelude.Types.Right', 1} end end.
'nested--7850-14882--in--un--altsSafe'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', 1}; [E0 | E1] -> (fun (V8, V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = (('un--caseAltInlineSafe'(V0, V5, V8))(V7))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> case V16 of 1 -> begin (V18 = begin (V17 = ('erlang':'put'(V5, V13))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> ('nested--7850-14882--in--un--altsSafe'(V0, V1, V2, V3, V4, V5, V9, V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7542-14676--in--un--allInlineSafe'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> {'Idris.Prelude.Types.Right', 1}; [E0 | E1] -> (fun (V8, V9) -> begin (V10 = (('un--termInlineSafe'(V0, V5, V8))(V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> case V12 of 1 -> ('nested--7542-14676--in--un--allInlineSafe'(V0, V1, V2, V3, V4, V5, V9, V7)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--wrapErrorC'(V0, V1, V2) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V3) -> fun (V4) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--==_Eq_ElabOpt'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.TTImp.Elab.Check':'dn--un--/=_Eq_ElabOpt'(V5, V6)) end end}, 1, V0)) of 1 -> V2; 0 -> fun (V7) -> ('Idris.Idris2.Core.Core':'un--wrapError'(V1, V2, V7)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateErasable'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E32} -> (fun (V38) -> begin (V60 = ('un--findErased'(V0, case V38 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V41 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V60 of {'Idris.Prelude.Types.Left', E54} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V62) -> case V62 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V63, V64) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V65) -> case V65 of {'Idris.Prelude.Types.Left', E58} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V67) -> {'Idris.Prelude.Types.Right', 0} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V68) -> ('Idris.Idris2.Core.Context':'un--addDef'(V0, V1, case V38 of {'Idris.Core.Context.MkGlobalDef', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> {'Idris.Core.Context.MkGlobalDef', V69, V70, V71, V63, V64, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89} end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V68)) end, V2)) end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--termInlineSafe'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V3, V4, V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V10) -> case ('un--isUsed'(V5, V10)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V11 = ('un--setUsed'(V5, V1, V6))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', 1} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.Core.TT.Meta', E7, E8, E9, E10} -> (fun (V14, V15, V16, V17) -> fun (V18) -> ('nested--7542-14676--in--un--allInlineSafe'(V0, V17, V16, V15, V14, V1, V17, V18)) end end(E7, E8, E9, E10)); {'Idris.Core.TT.Bind', E11, E12, E13, E14} -> (fun (V19, V20, V21, V22) -> fun (V23) -> begin (V24 = (('nested--7542-14734--in--un--binderInlineSafe'(V0, V20, V22, V21, V19, V1, V21))(V23))), case V24 of {'Idris.Prelude.Types.Left', E15} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V26) -> case V26 of 1 -> ('un--inExtended'(2, [V20 | []], V1, fun (V27) -> ('un--termInlineSafe'([V20 | V0], V27, V22)) end, V23)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11, E12, E13, E14)); {'Idris.Core.TT.App', E17, E18, E19} -> (fun (V28, V29, V30) -> fun (V31) -> begin (V32 = (('un--termInlineSafe'(V0, V1, V29))(V31))), case V32 of {'Idris.Prelude.Types.Left', E20} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V34) -> case V34 of 1 -> (('un--termInlineSafe'(V0, V1, V30))(V31)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17, E18, E19)); {'Idris.Core.TT.As', E22, E23, E24, E25} -> (fun (V35, V36, V37, V38) -> ('un--termInlineSafe'(V0, V1, V38)) end(E22, E23, E24, E25)); {'Idris.Core.TT.TDelayed', E26, E27, E28} -> (fun (V39, V40, V41) -> ('un--termInlineSafe'(V0, V1, V41)) end(E26, E27, E28)); {'Idris.Core.TT.TDelay', E29, E30, E31, E32} -> (fun (V42, V43, V44, V45) -> ('un--termInlineSafe'(V0, V1, V45)) end(E29, E30, E31, E32)); {'Idris.Core.TT.TForce', E33, E34, E35} -> (fun (V46, V47, V48) -> ('un--termInlineSafe'(V0, V1, V48)) end(E33, E34, E35)); _ -> fun (V49) -> {'Idris.Prelude.Types.Right', 1} end end.
'un--setUsedVar'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.TTImp.Elab.Utils.::', E2, E3} -> (fun (V2, V3) -> case V2 of 1 -> {'Idris.TTImp.Elab.Utils.::', 0, V3}; _ -> V1 end end(E2, E3)); _ -> V1 end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Idris.TTImp.Elab.Utils.::', E0, E1} -> (fun (V5, V6) -> {'Idris.TTImp.Elab.Utils.::', V5, ('un--setUsedVar'(V4, V6))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--setUsed'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('erlang':'put'(V1, ('un--setUsedVar'(V0, V6))))), {'Idris.Prelude.Types.Right', V7} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--plicit'(V0) -> case V0 of {'Idris.Core.TT.Pi', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> ('Idris.Idris2.Core.TT':'un--forgetDef'(V3)) end(E0, E1, E2, E3)); {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> ('Idris.Idris2.Core.TT':'un--forgetDef'(V7)) end(E4, E5, E6, E7)); _ -> {'Idris.Core.TT.Explicit'} end.
'un--isUsed'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.TTImp.Elab.Utils.::', E2, E3} -> (fun (V2, V3) -> case V2 of 0 -> 1; _ -> 0 end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> begin (V4 = (V0 - 1)), case V1 of {'Idris.TTImp.Elab.Utils.::', E0, E1} -> (fun (V5, V6) -> ('un--isUsed'(V4, V6)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--inlineSafe'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.TTImp.Elab.Utils.Used'}, ('un--initUsed'(V0)), V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (('un--caseInlineSafe'(V0, V5, V1))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initUsedCase'(V0) -> case V0 of [] -> {'Idris.TTImp.Elab.Utils.Nil'}; [E0 | E1] -> (fun (V1, V2) -> case V2 of [] -> {'Idris.TTImp.Elab.Utils.::', 1, {'Idris.TTImp.Elab.Utils.Nil'}}; _ -> {'Idris.TTImp.Elab.Utils.::', 2, ('un--initUsedCase'(V2))} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--initUsed'(V0) -> case V0 of [] -> {'Idris.TTImp.Elab.Utils.Nil'}; [E0 | E1] -> (fun (V1, V2) -> {'Idris.TTImp.Elab.Utils.::', 1, ('un--initUsed'(V2))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--inExtended'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.TTImp.Elab.Utils.Used'}, ('un--extendUsed'(V0, V1, V8)), V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ((V3(V11))(V4))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V20 = begin (V16 = begin (V15 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = ('erlang':'put'(V2, ('un--dropUsed'(V1, V18))))), {'Idris.Prelude.Types.Right', V19} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Right', V14} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findErasedFrom'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> begin (V21 = (((V8(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V13) -> fun (V14) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V13, V14)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V15) -> fun (V16) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V15, V16)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V19, V20)) end end}}, V10))}))))(V4))), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> begin (V24 = ('un--findErasedFrom'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V2)), V23, V4))), case V24 of {'Idris.Prelude.Types.Left', E10} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V27, V28) -> begin (V29 = ('un--detagSafe'(V0, V1, V12, V4))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V32 = case V31 of 1 -> [V2 | V28]; 0 -> V28; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V37) -> fun (V38) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V37, V38)) end end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V39, V40)) end end}}, V10)) of 1 -> {'Idris.Builtin.MkPair', [V2 | V27], V32}; 0 -> {'Idris.Builtin.MkPair', V27, V32}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], []}} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', [], []}} end.
'un--findErased'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V6, {'Idris.Core.Env.Nil'}, V1))(V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> ('un--findErasedFrom'(V0, V6, 0, V9, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--extendUsed'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> {'Idris.TTImp.Elab.Utils.::', V0, ('un--extendUsed'(V0, V4, V2))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dropUsed'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V1 of {'Idris.TTImp.Elab.Utils.::', E2, E3} -> (fun (V4, V5) -> ('un--dropUsed'(V3, V5)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--detagSafe'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V5, case V1 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V37 of {'Idris.Prelude.Types.Left', E33} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E35} -> (fun (V40) -> case V40 of {'Idris.Core.Context.TCon', E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48) -> case V48 of {'Idris.Prelude.Types.Just', E44} -> (fun (V49) -> begin (V51 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V50) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, [], V1, ('Idris.Idris2.Builtin':'un--snd'(V50)))) end, V8, [], V3))), case V51 of {'Idris.Prelude.Types.Left', E45} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('nested--6222-13446--in--un--notErased'(V4, V6, V7, V8, V5, V1, V0, 0, V49, V53))} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E36, E37, E38, E39, E40, E41, E42, E43)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E35)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--caseInlineSafe'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> case ('un--isUsed'(V4, V11)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> begin (V12 = ('un--setUsed'(V4, V1, V7))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> ('nested--7850-14882--in--un--altsSafe'(V0, V3, V6, V5, V4, V1, V6, V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.STerm', E8, E9} -> (fun (V15, V16) -> ('un--termInlineSafe'(V0, V1, V16)) end(E8, E9)); {'Idris.Core.CaseTree.Unmatched', E10} -> (fun (V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', 1} end end(E10)); {'Idris.Core.CaseTree.Impossible'} -> (fun () -> fun (V19) -> {'Idris.Prelude.Types.Right', 1} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--caseAltInlineSafe'(V0, V1, V2) -> case V2 of {'Idris.Core.CaseTree.ConCase', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> ('un--inExtended'(1, V5, V1, fun (V8) -> ('un--caseInlineSafe'(('Idris.Idris2.Prelude.Types.List':'un--++'(V5, V0)), V8, V6)) end, V7)) end end(E0, E1, E2, E3)); {'Idris.Core.CaseTree.DelayCase', E4, E5, E6} -> (fun (V9, V10, V11) -> fun (V12) -> ('un--inExtended'(1, [V9 | [V10 | []]], V1, fun (V13) -> ('un--caseInlineSafe'([V9 | [V10 | V0]], V13, V11)) end, V12)) end end(E4, E5, E6)); {'Idris.Core.CaseTree.ConstCase', E7, E8} -> (fun (V14, V15) -> ('un--caseInlineSafe'(V0, V1, V15)) end(E7, E8)); {'Idris.Core.CaseTree.DefaultCase', E9} -> (fun (V16) -> ('un--caseInlineSafe'(V0, V1, V16)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--canInlineDef'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E32} -> (fun (V38) -> case V38 of {'Idris.Core.Context.PMDef', E33, E34, E35, E36, E37} -> (fun (V39, V40, V41, V42, V43) -> ('un--inlineSafe'(V40, V42, V2)) end(E33, E34, E35, E36, E37)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E32)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--canInlineCaseBlock'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V35 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V1, case V6 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V7 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2))), case V35 of {'Idris.Prelude.Types.Left', E30} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V37) -> case V37 of {'Idris.Prelude.Types.Just', E32} -> (fun (V38) -> case V38 of {'Idris.Core.Context.PMDef', E33, E34, E35, E36, E37} -> (fun (V39, V40, V41, V42, V43) -> begin (V44 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.TTImp.Elab.Utils.Used'}, ('un--initUsedCase'(V40)), V2))), case V44 of {'Idris.Prelude.Types.Left', E38} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V46) -> (('un--caseInlineSafe'(V40, V46, V42))(V2)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34, E35, E36, E37)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E32)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindReq'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Core.TT.SubRefl'} -> (fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', ('nested--7095-14218--in--un--notLets'(V0, V5, V4, V2, V1, [], V0, V2)), ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V1, V2, V5))}})) end()); _ -> case V0 of [E0 | E1] -> (fun (V6, V7) -> case V2 of {'Idris.Core.Env.::', E2, E3} -> (fun (V8, V9) -> case V3 of {'Idris.Core.TT.KeepCons', E4} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(('Idris.Idris2.Core.TT':'un--shrinkBinder'(V8, V10)), fun (V11) -> ('un--bindReq'(V7, V1, V9, V10, [{'Idris.Builtin.MkPair', ('un--plicit'(V8)), V6} | V4], {'Idris.Core.TT.Bind', V1, V6, {'Idris.Core.TT.Pi', ('Idris.Idris2.Core.TT':'un--binderLoc'(V8)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V8)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V11))}, V5})) end)) end(E4)); {'Idris.Core.TT.DropCons', E5} -> (fun (V12) -> ('un--bindReq'(V7, V1, V9, V12, V4, V5)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bindNotReq'(V0, V1, V2, V3, V4, V5, V6) -> case V0 of [] -> case V3 of {'Idris.Core.Env.Nil'} -> (fun () -> case V4 of {'Idris.Core.TT.SubRefl'} -> (fun () -> {'Idris.Builtin.MkPair', V5, ('Idris.Idris2.Core.TT':'un--embed'(V6))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E0 | E1] -> (fun (V7, V8) -> case V3 of {'Idris.Core.Env.::', E2, E3} -> (fun (V9, V10) -> case V4 of {'Idris.Core.TT.SubRefl'} -> (fun () -> begin (V11 = ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'({'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', <<"arg"/utf8>>, V2}}, V6))), case ('un--bindNotReq'(V8, V1, ((1 + V2) rem 9223372036854775808), V10, {'Idris.Core.TT.SubRefl'}, V5, V11)) of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> {'Idris.Builtin.MkPair', V12, ('Idris.Idris2.Core.TT':'un--refToLocal'({'Idris.Core.Name.MN', <<"arg"/utf8>>, V2}, V7, V13))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.KeepCons', E6} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'({'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Bound'}, {'Idris.Core.Name.MN', <<"arg"/utf8>>, V2}}, V6))), case ('un--bindNotReq'(V8, V1, ((1 + V2) rem 9223372036854775808), V10, V14, V5, V15)) of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V16, V17) -> {'Idris.Builtin.MkPair', V16, ('Idris.Idris2.Core.TT':'un--refToLocal'({'Idris.Core.Name.MN', <<"arg"/utf8>>, V2}, V7, V17))} end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Core.TT.DropCons', E9} -> (fun (V18) -> ('un--bindNotReq'(V8, V1, V2, V10, V18, [{'Idris.Builtin.MkPair', ('un--plicit'(V9)), V7} | V5], {'Idris.Core.TT.Bind', V1, V7, {'Idris.Core.TT.Pi', ('Idris.Idris2.Core.TT':'un--binderLoc'(V9)), ('Idris.Idris2.Core.TT':'un--multiplicity'(V9)), {'Idris.Core.TT.Explicit'}, ('Idris.Idris2.Core.TT':'un--binderType'(V9))}, V6})) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
