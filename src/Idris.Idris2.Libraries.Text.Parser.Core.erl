-module('Idris.Idris2.Libraries.Text.Parser.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--parse-3131'/6,
  'case--doParse-3039'/8,
  'case--doParse-2973'/9,
  'case--doParse-2903'/10,
  'case--doParse-2824'/10,
  'case--doParse-2738'/11,
  'case--case block in doParse-2627'/14,
  'case--doParse-2603'/10,
  'case--doParse-2536'/9,
  'case--doParse-2416'/9,
  'case--doParse-2348'/7,
  'case--doParse-2287'/7,
  'dn--un--map_Functor_((Grammar $tok) $c)'/6,
  'dn--un--__Impl_Functor_((Grammar $tok) $c)'/6,
  'un--try'/4,
  'un--terminal'/4,
  'un--seq'/7,
  'un--pure'/3,
  'un--position'/1,
  'un--peek'/1,
  'un--parse'/5,
  'un--nextIs'/3,
  'un--mustWork'/4,
  'un--mergeWith'/5,
  'un--mapToken'/6,
  'un--join'/5,
  'un--fatalLoc'/5,
  'un--fatalError'/4,
  'un--failLoc'/5,
  'un--fail'/4,
  'un--eof'/1,
  'un--doParse'/6,
  'un--commit'/1,
  'un--bounds'/4,
  'un-->>='/5,
  'un-->>'/4,
  'un--<||>'/7,
  'un--<|>'/6,
  'un--<*>'/7,
  'un--<*'/7,
  'un--*>'/7
]).
'case--parse-3131'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> {'Idris.Prelude.Types.Left', {'Idris.Libraries.Text.Parser.Core.Error', V8, V9}} end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V10, V11, V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', case V11 of {'Idris.Libraries.Text.Bounded.MkBounded', E7, E8, E9} -> (fun (V13, V14, V15) -> V13 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12}} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-3039'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> {'Idris.Libraries.Text.Parser.Core.Failure', V8, V9, V10, V11} end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V12, V13, V14) -> {'Idris.Libraries.Text.Parser.Core.Res', V12, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'('erased', 'erased', V17, V18)) end end end end, fun (V19) -> V13 end, V13)), V14} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2973'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> {'Idris.Libraries.Text.Parser.Core.Failure', V9, V10, V11, V12} end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V13, V14, V15) -> ('un--mergeWith'('erased', 'erased', 'erased', V14, ('un--doParse'('erased', 'erased', 'erased', V13, (V3()), V15)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2903'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> {'Idris.Libraries.Text.Parser.Core.Failure', V10, V11, V12, V13} end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V14, V15, V16) -> ('un--mergeWith'('erased', 'erased', 'erased', V15, ('un--doParse'('erased', 'erased', 'erased', V14, V4, V16)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2824'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> {'Idris.Libraries.Text.Parser.Core.Failure', V10, V11, V12, V13} end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V14, V15, V16) -> ('un--mergeWith'('erased', 'erased', 'erased', V15, ('un--doParse'('erased', 'erased', 'erased', V14, ((V4())(case V15 of {'Idris.Libraries.Text.Bounded.MkBounded', E7, E8, E9} -> (fun (V17, V18, V19) -> V17 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V16)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2738'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> {'Idris.Libraries.Text.Parser.Core.Failure', V11, V12, V13, V14} end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V15, V16, V17) -> ('un--mergeWith'('erased', 'erased', 'erased', V16, ('un--doParse'('erased', 'erased', 'erased', V15, (V5(case V16 of {'Idris.Libraries.Text.Bounded.MkBounded', E7, E8, E9} -> (fun (V18, V19, V20) -> V18 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V17)))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in doParse-2627'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> {'Idris.Libraries.Text.Parser.Core.Failure', V7, V11, V10, V9}; 1 -> ('un--doParse'('erased', 'erased', 'erased', 1, (V3()), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2603'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> ('case--case block in doParse-2627'('erased', 'erased', V2, V3, V4, V5, V6, V7, 'erased', V13, V12, V11, V10, ('Idris.Idris2.Prelude.Basics':'un--||'(V10, fun () -> V11 end)))) end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Res', E4, E5, E6} -> (fun (V14, V15, V16) -> {'Idris.Libraries.Text.Parser.Core.Res', V7, V15, V16} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2536'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> {'Idris.Libraries.Text.Parser.Core.Res', V5, ('Idris.Idris2.Libraries.Text.Bounded':'un--removeIrrelevance'('erased', V3)), [V3 | V4]}; 1 -> {'Idris.Libraries.Text.Parser.Core.Failure', V5, 1, V2, {'Idris.Prelude.Types.Just', case V3 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V9, V10, V11) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2416'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Failure', V6, 1, V3, {'Idris.Prelude.Types.Just', case V4 of {'Idris.Libraries.Text.Bounded.MkBounded', E0, E1, E2} -> (fun (V9, V10, V11) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end()); {'Idris.Prelude.Types.Just', E3} -> (fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Res', V6, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Libraries.Text.Bounded':'dn--un--map_Functor_WithBounds'('erased', 'erased', V15, V16)) end end end end, fun (V17) -> V12 end, V4)), V5} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--doParse-2348'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> {'Idris.Libraries.Text.Parser.Core.Failure', V7, 0, V9, V10} end(E0, E1, E2, E3)); _ -> V6 end.
'case--doParse-2287'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Libraries.Text.Parser.Core.Failure', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> {'Idris.Libraries.Text.Parser.Core.Failure', V7, 1, V9, V10} end(E0, E1, E2, E3)); _ -> V6 end.
'dn--un--map_Functor_((Grammar $tok) $c)'(V0, V1, V2, V3, V4, V5) -> case V3 of 1 -> case V5 of {'Idris.Libraries.Text.Parser.Core.Empty', E178} -> (fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V6))} end(E178)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.Fail', E173, E174, E175} -> (fun (V7, V8, V9) -> {'Idris.Libraries.Text.Parser.Core.Fail', V7, V8, V9} end(E173, E174, E175)); {'Idris.Libraries.Text.Parser.Core.Try', E176} -> (fun (V10) -> {'Idris.Libraries.Text.Parser.Core.Try', ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V10))} end(E176)); {'Idris.Libraries.Text.Parser.Core.MustWork', E177} -> (fun (V11) -> {'Idris.Libraries.Text.Parser.Core.MustWork', ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V11))} end(E177)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.Terminal', E171, E172} -> (fun (V12, V13) -> {'Idris.Libraries.Text.Parser.Core.Terminal', V12, fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V4, (V13(V14)))) end} end(E171, E172)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.Alt', E167, E168, E169, E170} -> (fun (V15, V16, V17, V18) -> {'Idris.Libraries.Text.Parser.Core.Alt', V15, V16, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V15, V4, V17)), fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V16, V4, (V18()))) end} end(E167, E168, E169, E170)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEat', E164, E165, E166} -> (fun (V19, V20, V21) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V19, V20, fun () -> fun (V22) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V19, V4, ((V21())(V22)))) end end} end(E164, E165, E166)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E160, E161, E162, E163} -> (fun (V23, V24, V25, V26) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V23, V24, V25, fun (V27) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V24, V4, (V26(V27)))) end} end(E160, E161, E162, E163)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E157, E158, E159} -> (fun (V28, V29, V30) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V28, V29, fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V28, V4, (V30()))) end} end(E157, E158, E159)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E152, E153, E154, E155} -> (fun (V31, V32, V33, V34) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V31, V32, V33, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V32, V4, V34))} end(E152, E153, E154, E155)); {'Idris.Libraries.Text.Parser.Core.Bounds', E156} -> (fun (V35) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V35}, fun (V36) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V36))} end} end(E156)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V37) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V37))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E147, E148, E149, E150} -> (fun (V38, V39, V40, V41) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V38, V39, V40, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V39, V4, V41))} end(E147, E148, E149, E150)); {'Idris.Libraries.Text.Parser.Core.Bounds', E151} -> (fun (V42) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V42}, fun (V43) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V43))} end} end(E151)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V44) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V44))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E143, E144, E145, E146} -> (fun (V45, V46, V47, V48) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V45, V46, V47, fun (V49) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V46, V4, (V48(V49)))) end} end(E143, E144, E145, E146)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E140, E141, E142} -> (fun (V50, V51, V52) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V50, V51, fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V50, V4, (V52()))) end} end(E140, E141, E142)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E135, E136, E137, E138} -> (fun (V53, V54, V55, V56) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V53, V54, V55, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V54, V4, V56))} end(E135, E136, E137, E138)); {'Idris.Libraries.Text.Parser.Core.Bounds', E139} -> (fun (V57) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V57}, fun (V58) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V58))} end} end(E139)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V59) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V59))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E130, E131, E132, E133} -> (fun (V60, V61, V62, V63) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V60, V61, V62, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V61, V4, V63))} end(E130, E131, E132, E133)); {'Idris.Libraries.Text.Parser.Core.Bounds', E134} -> (fun (V64) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V64}, fun (V65) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V65))} end} end(E134)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V66) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V66))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.Alt', E126, E127, E128, E129} -> (fun (V67, V68, V69, V70) -> {'Idris.Libraries.Text.Parser.Core.Alt', V67, V68, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V67, V4, V69)), fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V68, V4, (V70()))) end} end(E126, E127, E128, E129)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEat', E123, E124, E125} -> (fun (V71, V72, V73) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V71, V72, fun () -> fun (V74) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V71, V4, ((V73())(V74)))) end end} end(E123, E124, E125)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E119, E120, E121, E122} -> (fun (V75, V76, V77, V78) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V75, V76, V77, fun (V79) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V76, V4, (V78(V79)))) end} end(E119, E120, E121, E122)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E116, E117, E118} -> (fun (V80, V81, V82) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V80, V81, fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V80, V4, (V82()))) end} end(E116, E117, E118)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E111, E112, E113, E114} -> (fun (V83, V84, V85, V86) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V83, V84, V85, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V84, V4, V86))} end(E111, E112, E113, E114)); {'Idris.Libraries.Text.Parser.Core.Bounds', E115} -> (fun (V87) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V87}, fun (V88) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V88))} end} end(E115)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V89) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V89))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E106, E107, E108, E109} -> (fun (V90, V91, V92, V93) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V90, V91, V92, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V91, V4, V93))} end(E106, E107, E108, E109)); {'Idris.Libraries.Text.Parser.Core.Bounds', E110} -> (fun (V94) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V94}, fun (V95) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V95))} end} end(E110)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V96) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V96))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E102, E103, E104, E105} -> (fun (V97, V98, V99, V100) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V97, V98, V99, fun (V101) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V98, V4, (V100(V101)))) end} end(E102, E103, E104, E105)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E99, E100, E101} -> (fun (V102, V103, V104) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V102, V103, fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V102, V4, (V104()))) end} end(E99, E100, E101)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E94, E95, E96, E97} -> (fun (V105, V106, V107, V108) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V105, V106, V107, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V106, V4, V108))} end(E94, E95, E96, E97)); {'Idris.Libraries.Text.Parser.Core.Bounds', E98} -> (fun (V109) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V109}, fun (V110) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V110))} end} end(E98)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V111) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V111))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E89, E90, E91, E92} -> (fun (V112, V113, V114, V115) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V112, V113, V114, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V113, V4, V115))} end(E89, E90, E91, E92)); {'Idris.Libraries.Text.Parser.Core.Bounds', E93} -> (fun (V116) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V116}, fun (V117) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V117))} end} end(E93)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V118) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V118))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.Fail', E84, E85, E86} -> (fun (V119, V120, V121) -> {'Idris.Libraries.Text.Parser.Core.Fail', V119, V120, V121} end(E84, E85, E86)); {'Idris.Libraries.Text.Parser.Core.Try', E87} -> (fun (V122) -> {'Idris.Libraries.Text.Parser.Core.Try', ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V122))} end(E87)); {'Idris.Libraries.Text.Parser.Core.MustWork', E88} -> (fun (V123) -> {'Idris.Libraries.Text.Parser.Core.MustWork', ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V4, V123))} end(E88)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.Terminal', E82, E83} -> (fun (V124, V125) -> {'Idris.Libraries.Text.Parser.Core.Terminal', V124, fun (V126) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V4, (V125(V126)))) end} end(E82, E83)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.Alt', E78, E79, E80, E81} -> (fun (V127, V128, V129, V130) -> {'Idris.Libraries.Text.Parser.Core.Alt', V127, V128, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V127, V4, V129)), fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V128, V4, (V130()))) end} end(E78, E79, E80, E81)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEat', E75, E76, E77} -> (fun (V131, V132, V133) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V131, V132, fun () -> fun (V134) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V131, V4, ((V133())(V134)))) end end} end(E75, E76, E77)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E71, E72, E73, E74} -> (fun (V135, V136, V137, V138) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V135, V136, V137, fun (V139) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V136, V4, (V138(V139)))) end} end(E71, E72, E73, E74)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E68, E69, E70} -> (fun (V140, V141, V142) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V140, V141, fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V140, V4, (V142()))) end} end(E68, E69, E70)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E63, E64, E65, E66} -> (fun (V143, V144, V145, V146) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V143, V144, V145, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V144, V4, V146))} end(E63, E64, E65, E66)); {'Idris.Libraries.Text.Parser.Core.Bounds', E67} -> (fun (V147) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V147}, fun (V148) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V148))} end} end(E67)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V149) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V149))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E58, E59, E60, E61} -> (fun (V150, V151, V152, V153) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V150, V151, V152, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V151, V4, V153))} end(E58, E59, E60, E61)); {'Idris.Libraries.Text.Parser.Core.Bounds', E62} -> (fun (V154) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V154}, fun (V155) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V155))} end} end(E62)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V156) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V156))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E54, E55, E56, E57} -> (fun (V157, V158, V159, V160) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V157, V158, V159, fun (V161) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V158, V4, (V160(V161)))) end} end(E54, E55, E56, E57)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E51, E52, E53} -> (fun (V162, V163, V164) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V162, V163, fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V162, V4, (V164()))) end} end(E51, E52, E53)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E46, E47, E48, E49} -> (fun (V165, V166, V167, V168) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V165, V166, V167, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V166, V4, V168))} end(E46, E47, E48, E49)); {'Idris.Libraries.Text.Parser.Core.Bounds', E50} -> (fun (V169) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V169}, fun (V170) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V170))} end} end(E50)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V171) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V171))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E41, E42, E43, E44} -> (fun (V172, V173, V174, V175) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V172, V173, V174, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V173, V4, V175))} end(E41, E42, E43, E44)); {'Idris.Libraries.Text.Parser.Core.Bounds', E45} -> (fun (V176) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V176}, fun (V177) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V177))} end} end(E45)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V178) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V178))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.Alt', E37, E38, E39, E40} -> (fun (V179, V180, V181, V182) -> {'Idris.Libraries.Text.Parser.Core.Alt', V179, V180, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V179, V4, V181)), fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V180, V4, (V182()))) end} end(E37, E38, E39, E40)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEat', E34, E35, E36} -> (fun (V183, V184, V185) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V183, V184, fun () -> fun (V186) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V183, V4, ((V185())(V186)))) end end} end(E34, E35, E36)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E30, E31, E32, E33} -> (fun (V187, V188, V189, V190) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V187, V188, V189, fun (V191) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V188, V4, (V190(V191)))) end} end(E30, E31, E32, E33)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E27, E28, E29} -> (fun (V192, V193, V194) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V192, V193, fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V192, V4, (V194()))) end} end(E27, E28, E29)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E22, E23, E24, E25} -> (fun (V195, V196, V197, V198) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V195, V196, V197, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V196, V4, V198))} end(E22, E23, E24, E25)); {'Idris.Libraries.Text.Parser.Core.Bounds', E26} -> (fun (V199) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V199}, fun (V200) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V200))} end} end(E26)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V201) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V201))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E17, E18, E19, E20} -> (fun (V202, V203, V204, V205) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V202, V203, V204, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V203, V4, V205))} end(E17, E18, E19, E20)); {'Idris.Libraries.Text.Parser.Core.Bounds', E21} -> (fun (V206) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V206}, fun (V207) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V207))} end} end(E21)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V208) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V208))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E13, E14, E15, E16} -> (fun (V209, V210, V211, V212) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V209, V210, V211, fun (V213) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V210, V4, (V212(V213)))) end} end(E13, E14, E15, E16)); _ -> case V3 of 0 -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEat', E10, E11, E12} -> (fun (V214, V215, V216) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V214, V215, fun () -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V214, V4, (V216()))) end} end(E10, E11, E12)); _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E5, E6, E7, E8} -> (fun (V217, V218, V219, V220) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V217, V218, V219, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V218, V4, V220))} end(E5, E6, E7, E8)); {'Idris.Libraries.Text.Parser.Core.Bounds', E9} -> (fun (V221) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V221}, fun (V222) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V222))} end} end(E9)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V223) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V223))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> case V5 of {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E0, E1, E2, E3} -> (fun (V224, V225, V226, V227) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V224, V225, V226, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V225, V4, V227))} end(E0, E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Bounds', E4} -> (fun (V228) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, 1, {'Idris.Libraries.Text.Parser.Core.Bounds', V228}, fun (V229) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V229))} end} end(E4)); _ -> case V3 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, V5, fun (V230) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V230))} end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end end.
'dn--un--__Impl_Functor_((Grammar $tok) $c)'(V0, V1, V2, V3, V4, V5) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V1, V4, V5)).
'un--try'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Try', V3}.
'un--terminal'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Terminal', V2, V3}.
'un--seq'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, V4, V5, V6}.
'un--pure'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.Empty', V2}.
'un--position'(V0) -> {'Idris.Libraries.Text.Parser.Core.Position'}.
'un--peek'(V0) -> {'Idris.Libraries.Text.Parser.Core.NextIs', <<"Unrecognised token"/utf8>>, fun (V1) -> 0 end}.
'un--parse'(V0, V1, V2, V3, V4) -> ('case--parse-3131'('erased', 'erased', V2, V4, V3, ('un--doParse'('erased', 'erased', 'erased', 1, V3, V4)))).
'un--nextIs'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.NextIs', V1, V2}.
'un--mustWork'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.MustWork', V3}.
'un--mergeWith'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Libraries.Text.Parser.Core.Res', E0, E1, E2} -> (fun (V5, V6, V7) -> {'Idris.Libraries.Text.Parser.Core.Res', V5, ('Idris.Idris2.Libraries.Text.Bounded':'un--mergeBounds'('erased', 'erased', V3, V6)), V7} end(E0, E1, E2)); _ -> V4 end.
'un--mapToken'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Libraries.Text.Parser.Core.Empty', E0} -> (fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', V6} end(E0)); {'Idris.Libraries.Text.Parser.Core.Terminal', E1, E2} -> (fun (V7, V8) -> {'Idris.Libraries.Text.Parser.Core.Terminal', V7, fun (V9) -> (V8((V4(V9)))) end} end(E1, E2)); {'Idris.Libraries.Text.Parser.Core.NextIs', E3, E4} -> (fun (V10, V11) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Libraries.Text.Parser.Core.NextIs', V10, fun (V12) -> (V11((V4(V12)))) end}, fun (V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', (V4(V13))} end} end(E3, E4)); {'Idris.Libraries.Text.Parser.Core.EOF'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.EOF'} end()); {'Idris.Libraries.Text.Parser.Core.Fail', E5, E6, E7} -> (fun (V14, V15, V16) -> {'Idris.Libraries.Text.Parser.Core.Fail', V14, V15, V16} end(E5, E6, E7)); {'Idris.Libraries.Text.Parser.Core.Try', E8} -> (fun (V17) -> {'Idris.Libraries.Text.Parser.Core.Try', ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V17))} end(E8)); {'Idris.Libraries.Text.Parser.Core.MustWork', E9} -> (fun (V18) -> {'Idris.Libraries.Text.Parser.Core.MustWork', ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V18))} end(E9)); {'Idris.Libraries.Text.Parser.Core.Commit'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Commit'} end()); {'Idris.Libraries.Text.Parser.Core.SeqEat', E10, E11, E12} -> (fun (V19, V20, V21) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V19, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V20)), fun () -> fun (V22) -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, ((V21())(V22)))) end end} end(E10, E11, E12)); {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E13, E14, E15, E16} -> (fun (V23, V24, V25, V26) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V23, V24, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V25)), fun (V27) -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, (V26(V27)))) end} end(E13, E14, E15, E16)); {'Idris.Libraries.Text.Parser.Core.ThenEat', E17, E18, E19} -> (fun (V28, V29, V30) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V28, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V29)), fun () -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, (V30()))) end} end(E17, E18, E19)); {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E20, E21, E22, E23} -> (fun (V31, V32, V33, V34) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', V31, V32, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V33)), ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V34))} end(E20, E21, E22, E23)); {'Idris.Libraries.Text.Parser.Core.Alt', E24, E25, E26, E27} -> (fun (V35, V36, V37, V38) -> {'Idris.Libraries.Text.Parser.Core.Alt', V35, V36, ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V37)), fun () -> ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, (V38()))) end} end(E24, E25, E26, E27)); {'Idris.Libraries.Text.Parser.Core.Bounds', E28} -> (fun (V39) -> {'Idris.Libraries.Text.Parser.Core.Bounds', ('un--mapToken'('erased', 'erased', 'erased', 'erased', V4, V39))} end(E28)); {'Idris.Libraries.Text.Parser.Core.Position'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Position'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--join'(V0, V1, V2, V3, V4) -> case V2 of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, V3, V4, fun (V5) -> V5 end}; 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V3, V4, fun () -> fun (V6) -> V6 end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fatalLoc'(V0, V1, V2, V3, V4) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Just', V3}, 0, V4}.
'un--fatalError'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, V3}.
'un--failLoc'(V0, V1, V2, V3, V4) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Just', V3}, 1, V4}.
'un--fail'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, V3}.
'un--eof'(V0) -> {'Idris.Libraries.Text.Parser.Core.EOF'}.
'un--doParse'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Libraries.Text.Parser.Core.Empty', E0} -> (fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Res', V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'('erased', V6)), V5} end(E0)); {'Idris.Libraries.Text.Parser.Core.Fail', E1, E2, E3} -> (fun (V7, V8, V9) -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, V8, V9, ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V12, V13)) end end end end, fun (V14) -> case V14 of {'Idris.Libraries.Text.Bounded.MkBounded', E4, E5, E6} -> (fun (V15, V16, V17) -> V17 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Data.List':'un--head\x{27}'('erased', V5)))) end, fun () -> fun (V18) -> {'Idris.Prelude.Types.Just', V18} end end, V7))} end(E1, E2, E3)); {'Idris.Libraries.Text.Parser.Core.Try', E7} -> (fun (V19) -> ('case--doParse-2287'('erased', 'erased', 'erased', V19, V5, V3, ('un--doParse'('erased', 'erased', 'erased', V3, V19, V5)))) end(E7)); {'Idris.Libraries.Text.Parser.Core.Commit'} -> (fun () -> {'Idris.Libraries.Text.Parser.Core.Res', 0, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'('erased', {'Idris.Builtin.MkUnit'})), V5} end()); {'Idris.Libraries.Text.Parser.Core.MustWork', E8} -> (fun (V20) -> ('case--doParse-2348'('erased', 'erased', 'erased', V20, V5, V3, ('un--doParse'('erased', 'erased', 'erased', V3, V20, V5)))) end(E8)); {'Idris.Libraries.Text.Parser.Core.Terminal', E9, E10} -> (fun (V21, V22) -> case V5 of [] -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 1, <<"End of input"/utf8>>, {'Idris.Prelude.Types.Nothing'}}; [E11 | E12] -> (fun (V23, V24) -> ('case--doParse-2416'('erased', 'erased', V22, V21, V23, V24, V3, 'erased', (V22(case V23 of {'Idris.Libraries.Text.Bounded.MkBounded', E13, E14, E15} -> (fun (V25, V26, V27) -> V25 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); {'Idris.Libraries.Text.Parser.Core.EOF'} -> (fun () -> case V5 of [] -> {'Idris.Libraries.Text.Parser.Core.Res', V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'('erased', {'Idris.Builtin.MkUnit'})), []}; [E16 | E17] -> (fun (V28, V29) -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 1, <<"Expected end of input"/utf8>>, {'Idris.Prelude.Types.Just', case V28 of {'Idris.Libraries.Text.Bounded.MkBounded', E18, E19, E20} -> (fun (V30, V31, V32) -> V32 end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}} end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Libraries.Text.Parser.Core.NextIs', E21, E22} -> (fun (V33, V34) -> case V5 of [] -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 1, <<"End of input"/utf8>>, {'Idris.Prelude.Types.Nothing'}}; [E23 | E24] -> (fun (V35, V36) -> ('case--doParse-2536'('erased', V34, V33, V35, V36, V3, 'erased', 'erased', (V34(case V35 of {'Idris.Libraries.Text.Bounded.MkBounded', E25, E26, E27} -> (fun (V37, V38, V39) -> V37 end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); {'Idris.Libraries.Text.Parser.Core.Alt', E28, E29, E30, E31} -> (fun (V40, V41, V42, V43) -> ('case--doParse-2603'('erased', 'erased', V41, V43, V40, V42, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', 1, V42, V5)))) end(E28, E29, E30, E31)); {'Idris.Libraries.Text.Parser.Core.SeqEmpty', E32, E33, E34, E35} -> (fun (V44, V45, V46, V47) -> ('case--doParse-2738'('erased', 'erased', 'erased', V44, V45, V47, V46, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V46, V5)))) end(E32, E33, E34, E35)); {'Idris.Libraries.Text.Parser.Core.SeqEat', E36, E37, E38} -> (fun (V48, V49, V50) -> ('case--doParse-2824'('erased', 'erased', 'erased', V48, V50, V49, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V49, V5)))) end(E36, E37, E38)); {'Idris.Libraries.Text.Parser.Core.ThenEmpty', E39, E40, E41, E42} -> (fun (V51, V52, V53, V54) -> ('case--doParse-2903'('erased', 'erased', V51, V52, V54, V53, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V53, V5)))) end(E39, E40, E41, E42)); {'Idris.Libraries.Text.Parser.Core.ThenEat', E43, E44, E45} -> (fun (V55, V56, V57) -> ('case--doParse-2973'('erased', 'erased', V55, V57, V56, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V56, V5)))) end(E43, E44, E45)); {'Idris.Libraries.Text.Parser.Core.Bounds', E46} -> (fun (V58) -> ('case--doParse-3039'('erased', 'erased', 'erased', V58, V5, V3, 'erased', ('un--doParse'('erased', 'erased', 'erased', V3, V58, V5)))) end(E46)); {'Idris.Libraries.Text.Parser.Core.Position'} -> (fun () -> case V5 of [] -> {'Idris.Libraries.Text.Parser.Core.Failure', V3, 1, <<"End of input"/utf8>>, {'Idris.Prelude.Types.Nothing'}}; [E47 | E48] -> (fun (V59, V60) -> {'Idris.Libraries.Text.Parser.Core.Res', V3, ('Idris.Idris2.Libraries.Text.Bounded':'un--irrelevantBounds'('erased', case V59 of {'Idris.Libraries.Text.Bounded.MkBounded', E49, E50, E51} -> (fun (V61, V62, V63) -> V63 end(E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), [V59 | V60]} end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--commit'(V0) -> {'Idris.Libraries.Text.Parser.Core.Commit'}.
'un--bounds'(V0, V1, V2, V3) -> {'Idris.Libraries.Text.Parser.Core.Bounds', V3}.
'un-->>='(V0, V1, V2, V3, V4) -> case V3 of 1 -> fun (V5) -> fun (V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, V4, V5, V6} end end; 0 -> fun (V7) -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', V4, V7, V8} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un-->>'(V0, V1, V2, V3) -> case V2 of 1 -> fun (V4) -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.ThenEmpty', 1, V3, V4, V5} end end; 0 -> fun (V6) -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', V3, V6, V7} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--<||>'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Libraries.Text.Parser.Core.Alt', V3, V4, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, V9, V10)) end end end end, fun (V11) -> {'Idris.Prelude.Types.Left', V11} end, V5)), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V14, V15)) end end end end, fun (V16) -> {'Idris.Prelude.Types.Right', V16} end, (V6()))) end}.
'un--<|>'(V0, V1, V2, V3, V4, V5) -> {'Idris.Libraries.Text.Parser.Core.Alt', V2, V3, V4, V5}.
'un--<*>'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, V4, V5, fun (V7) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V7, V6)) end}.
'un--<*'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, V4, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, fun (V7) -> fun (V8) -> V7 end end, V5)), fun (V9) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V9, V6)) end}.
'un--*>'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', V3, V4, ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V3, fun (V7) -> fun (V8) -> V8 end end, V5)), fun (V9) -> ('dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', V4, V9, V6)) end}.
