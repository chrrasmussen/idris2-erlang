-module('Idris.Idris2.Idris.REPLCommon').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--resetContext-5007'/6,
  'case--updateErrorLine-4915'/4,
  'case--updateErrorLine-4873'/2,
  'case--emitWarnings-4810'/4,
  'case--case block in emitProblem-4559'/14,
  'case--emitProblem-4467'/10,
  'case--printWithStatus-4362'/5,
  'case--iputStrLn-4282'/4,
  'nested--14552-4438--in--un--addOne'/9,
  'un--updateErrorLine'/2,
  'un--resetContext'/5,
  'un--printWithStatus'/4,
  'un--printResult'/3,
  'un--printError'/3,
  'un--iputStrLn'/3,
  'un--getFCLine'/1,
  'un--emitWarnings'/4,
  'un--emitWarning'/5,
  'un--emitProblem'/9,
  'un--emitError'/5
]).
'case--resetContext-5007'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Core.Context.MkDefs', V6, V7, V8, V9, ('Idris.Idris2.Core.Options':'un--clearNames'(case V4 of {'Idris.Core.Context.MkDefs', E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V37 end(E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateErrorLine-4915'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('Idris.Idris2.Core.Core':'un--getErrorLoc'(V1)), fun (V20) -> ('un--getFCLine'(V20)) end)), V11, V12, V13, V14, V15, V16, V17, V18, V19} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateErrorLine-4873'(V0, V1) -> case V1 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V2, V3, V4, V5, V6, V7, {'Idris.Prelude.Types.Nothing'}, V9, V10, V11, V12, V13, V14, V15, V16, V17} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emitWarnings-4810'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Core.Context.MkDefs', V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, []} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in emitProblem-4559'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> ('un--iputStrLn'(V5, V12, V14)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V18, V19) -> fun (V20) -> begin (V21 = ('Idris.Idris2.Idris.Pretty':'un--renderWithoutColor'(V5, V12, V20))), case V21 of {'Idris.Prelude.Types.Left', E5} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V23) -> (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V24) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V24)) end, V10, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"warning"/utf8>>} | [{'Idris.Idris.IDEMode.Commands.SExpList', [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V16)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', fun (V25) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Int'(V25)) end, fun (V26) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Int'(V26)) end}, ('nested--14552-4438--in--un--addOne'('erased', V9, V1, V2, V3, V4, V5, V6, V18)))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', fun (V27) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Int'(V27)) end, fun (V28) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Int'(V28)) end}, ('nested--14552-4438--in--un--addOne'('erased', V9, V1, V2, V3, V4, V5, V6, V19)))) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V23)) | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]]]]} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V11)) | []]]]}))(V20)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emitProblem-4467'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V10) -> fun (V11) -> begin (V15 = begin (V12 = ((V4(V1))(V11))), case V12 of {'Idris.Prelude.Types.Left', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V14) -> ('Idris.Idris2.Idris.Pretty':'un--render'(V6, V14, V11)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> begin (V45 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> V24 end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), begin (V32 = (V29(V30))), (V31(V32)) end end end end end end end}, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V35(V37))), ((V36(V38))(V37)) end end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V40(V41))), (V42(V41)) end end end end}, fun (V43) -> fun (V44) -> V44 end end}, V17))(V11))), {'Idris.Prelude.Types.Right', V45} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E5, E6, E7} -> (fun (V46, V47, V48) -> fun (V49) -> begin (V50 = ((V3(V1))(V49))), case V50 of {'Idris.Prelude.Types.Left', E8} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V52) -> (('case--case block in emitProblem-4559'('erased', V2, V3, V4, V5, V6, V7, V8, V47, V1, V48, V46, V52, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V53) -> ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V53)) end, (V2(V1))))))(V49)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--printWithStatus-4362'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Idris.Pretty':'un--render'(V2, V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> begin (V37 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> V16 end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), begin (V24 = (V21(V22))), (V23(V24)) end end end end end end end}, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), ((V28(V30))(V29)) end end end end end end, fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V32(V33))), (V34(V33)) end end end end}, fun (V35) -> fun (V36) -> V36 end end}, V9))(V6))), {'Idris.Prelude.Types.Right', V37} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--iputStrLn-4282'(V0, V1, V2, V3) -> case V3 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V4) -> case V4 of 1 -> fun (V5) -> begin (V6 = ('Idris.Idris2.Idris.Pretty':'un--render'(V1, V0, V5))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> begin (V36 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> V15 end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), begin (V23 = (V20(V21))), (V22(V23)) end end end end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), ((V27(V29))(V28)) end end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V31(V32))), (V33(V32)) end end end end}, fun (V34) -> fun (V35) -> V35 end end}, V8))(V5))), {'Idris.Prelude.Types.Right', V36} end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E3, E4, E5} -> (fun (V38, V39, V40) -> fun (V41) -> begin (V42 = ('Idris.Idris2.Idris.Pretty':'un--renderWithoutColor'(V1, V0, V41))), case V42 of {'Idris.Prelude.Types.Left', E6} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V44) -> (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V45) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V45)) end, V40, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"write-string"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V44)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V38)) | []]]]}))(V41)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14552-4438--in--un--addOne'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> {'Idris.Builtin.MkPair', ((V9 + 1) rem 9223372036854775808), ((V10 + 1) rem 9223372036854775808)} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateErrorLine'(V0, V1) -> case V1 of [] -> fun (V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V23 = ('erlang':'put'(V0, case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V7, V8, V9, V10, V11, V12, {'Idris.Prelude.Types.Nothing'}, V14, V15, V16, V17, V18, V19, V20, V21, V22} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V23} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; [E18 | E19] -> (fun (V24, V25) -> fun (V26) -> begin (V28 = begin (V27 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E20} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V30) -> begin (V48 = ('erlang':'put'(V0, case V30 of {'Idris.Idris.REPLOpts.MkREPLOpts', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V31, V32, V33, V34, V35, V36, ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', ('Idris.Idris2.Core.Core':'un--getErrorLoc'(V24)), fun (V47) -> ('un--getFCLine'(V47)) end)), V38, V39, V40, V41, V42, V43, V44, V45, V46} end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V48} end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--resetContext'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V67 = begin (V9 = ('Idris.Idris2.Core.Context':'un--initDefs'(V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V66 = ('erlang':'put'(V0, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Core.Context.MkDefs', V12, V13, V14, V15, ('Idris.Idris2.Core.Options':'un--clearNames'(case V8 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V43 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V66} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V67 of {'Idris.Prelude.Types.Left', E58} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V69) -> begin (V70 = (('Idris.Idris2.Core.InitPrimitives':'un--addPrimitives'(V0))(V4))), case V70 of {'Idris.Prelude.Types.Left', E60} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V72) -> begin (V74 = begin (V73 = ('erlang':'put'(V1, ('Idris.Idris2.Core.UnifyState':'un--initUState'())))), {'Idris.Prelude.Types.Right', V73} end), case V74 of {'Idris.Prelude.Types.Left', E62} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V76) -> begin (V78 = begin (V77 = ('erlang':'put'(V2, ('Idris.Idris2.Idris.Syntax':'un--initSyntax'())))), {'Idris.Prelude.Types.Right', V77} end), case V78 of {'Idris.Prelude.Types.Left', E64} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V80) -> begin (V81 = ('erlang':'put'(V3, ('Idris.Idris2.Core.Metadata':'un--initMetadata'())))), {'Idris.Prelude.Types.Right', V81} end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--printWithStatus'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--printWithStatus-4362'(V2, V1, V0, V7, case V7 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> V15 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--printResult'(V0, V1, V2) -> ('un--printWithStatus'(V0, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"ok"/utf8>>)), V1, V2)).
'un--printError'(V0, V1, V2) -> ('un--printWithStatus'(V0, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', <<"error"/utf8>>)), V1, V2)).
'un--iputStrLn'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--iputStrLn-4282'(V1, V0, V6, case V6 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V14 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFCLine'(V0) -> case V0 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V1, V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V4, V5) -> {'Idris.Prelude.Types.Just', V4} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--emitWarnings'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V37 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V8) -> fun (V9) -> ('un--emitWarning'(V0, V1, V2, V8, V9)) end end, ('Idris.Idris2.Data.List':'un--reverse'('erased', case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V36 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V3))), case V37 of {'Idris.Prelude.Types.Left', E29} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V39) -> begin (V67 = ('erlang':'put'(V0, case V7 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Core.Context.MkDefs', V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, []} end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V67} end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--emitWarning'(V0, V1, V2, V3, V4) -> ('un--emitProblem'('erased', V0, V1, V2, V3, fun (V5) -> fun (V6) -> ('Idris.Idris2.Idris.Error':'un--displayWarning'(V0, V2, V1, V5, V6)) end end, fun (V7) -> ('Idris.Idris2.Idris.Error':'un--pwarning'(V0, V2, V1, V7)) end, fun (V8) -> ('Idris.Idris2.Core.Core':'un--getWarningLoc'(V8)) end, V4)).
'un--emitProblem'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> (('case--emitProblem-4467'('erased', V4, V7, V6, V5, V3, V2, V1, V12, case V12 of {'Idris.Idris.REPLOpts.MkREPLOpts', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V20 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--emitError'(V0, V1, V2, V3, V4) -> ('un--emitProblem'('erased', V0, V1, V2, V3, fun (V5) -> fun (V6) -> ('Idris.Idris2.Idris.Error':'un--display'(V0, V2, V1, V5, V6)) end end, fun (V7) -> ('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V1, V7)) end, fun (V8) -> ('Idris.Idris2.Core.Core':'un--getErrorLoc'(V8)) end, V4)).
