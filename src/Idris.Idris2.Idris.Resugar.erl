-module('Idris.Idris2.Idris.Resugar').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8447-6488--in--un--needsBind'/9,
  'nested--7520-5552--in--un--needed'/3,
  'nested--8447-6891--in--un--mkIf'/8,
  'nested--8491-7788--in--un--mapPiInfo'/9,
  'nested--10463-8180--in--un--cleanNode'/4,
  'nested--10463-8179--in--un--cleanName'/3,
  'un--unbracketApp'/1,
  'un--unbracket'/1,
  'un--tyPrec'/0,
  'un--toPTypeDecl'/4,
  'un--toPTermApp'/5,
  'un--toPTerm'/4,
  'un--toPRef'/2,
  'un--toPRecord'/4,
  'un--toPFnOpt'/4,
  'un--toPFieldUpdate'/4,
  'un--toPField'/4,
  'un--toPDecl'/4,
  'un--toPData'/4,
  'un--toPClause'/4,
  'un--toCleanPTerm'/5,
  'un--sugarName'/1,
  'un--sugarAppM'/1,
  'un--sugarApp'/1,
  'un--startPrec'/0,
  'un--showImplicits'/2,
  'un--showFullEnv'/2,
  'un--resugarNoPatvars'/6,
  'un--resugar'/6,
  'un--pterm'/4,
  'un--mkOp'/2,
  'un--mkApp'/4,
  'un--fullNamespace'/2,
  'un--extractNat'/2,
  'un--cleanPTerm'/3,
  'un--bracket'/5,
  'un--argPrec'/0,
  'un--appPrec'/0,
  'un--addBracket'/2
]).
'nested--8447-6488--in--un--needsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Name.UN', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(0, [], [], V0))), begin (V12 = ('Idris.Idris2.TTImp.Utils':'un--findAllNames'([], V0))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, {'Idris.Core.Name.UN', V10}, V12)) of 1 -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V19, V20)) end end}, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'(V21)) end, V11)))) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> 0 end end(E0)); _ -> 0 end.
'nested--7520-5552--in--un--needed'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V3, V4) -> 0 end(E0, E1)); {'Idris.Idris.Syntax.PRef', E2, E3} -> (fun (V5, V6) -> 0 end(E2, E3)); {'Idris.Idris.Syntax.PPair', E4, E5, E6} -> (fun (V7, V8, V9) -> 0 end(E4, E5, E6)); {'Idris.Idris.Syntax.PDPair', E7, E8, E9, E10, E11} -> (fun (V10, V11, V12, V13, V14) -> 0 end(E7, E8, E9, E10, E11)); {'Idris.Idris.Syntax.PUnit', E12} -> (fun (V15) -> 0 end(E12)); {'Idris.Idris.Syntax.PComprehension', E13, E14, E15} -> (fun (V16, V17, V18) -> 0 end(E13, E14, E15)); {'Idris.Idris.Syntax.PList', E16, E17, E18} -> (fun (V19, V20, V21) -> 0 end(E16, E17, E18)); {'Idris.Idris.Syntax.PSnocList', E19, E20, E21} -> (fun (V22, V23, V24) -> 0 end(E19, E20, E21)); {'Idris.Idris.Syntax.PPrimVal', E22, E23} -> (fun (V25, V26) -> 0 end(E22, E23)); _ -> 1 end.
'nested--8447-6891--in--un--mkIf'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.PCase', E0, E1, E2} -> (fun (V8, V9, V10) -> case V10 of [E3 | E4] -> (fun (V11, V12) -> case V11 of {'Idris.Idris.Syntax.MkPatClause', E5, E6, E7, E8} -> (fun (V13, V14, V15, V16) -> case V14 of {'Idris.Idris.Syntax.PRef', E9, E10} -> (fun (V17, V18) -> case V16 of [] -> case V12 of [E11 | E12] -> (fun (V19, V20) -> case V19 of {'Idris.Idris.Syntax.MkPatClause', E13, E14, E15, E16} -> (fun (V21, V22, V23, V24) -> case V22 of {'Idris.Idris.Syntax.PRef', E17, E18} -> (fun (V25, V26) -> case V24 of [] -> case V20 of [] -> begin (V27 = {'Idris.Idris.Syntax.PCase', V8, V9, [{'Idris.Idris.Syntax.MkPatClause', V13, {'Idris.Idris.Syntax.PRef', V17, V18}, V15, []} | [{'Idris.Idris.Syntax.MkPatClause', V21, {'Idris.Idris.Syntax.PRef', V25, V26}, V23, []} | []]]}), case case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V18)), {'Idris.Core.Name.UN', <<"True"/utf8>>})) of 1 -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V26)), {'Idris.Core.Name.UN', <<"False"/utf8>>})); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Idris.Syntax.PIfThenElse', V8, V9, V15, V23}; 0 -> V27; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> V7 end; _ -> V7 end end(E17, E18)); _ -> V7 end end(E13, E14, E15, E16)); _ -> V7 end end(E11, E12)); _ -> V7 end; _ -> V7 end end(E9, E10)); _ -> V7 end end(E5, E6, E7, E8)); _ -> V7 end end(E3, E4)); _ -> V7 end end(E0, E1, E2)); _ -> V7 end.
'nested--8491-7788--in--un--mapPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V9) -> begin (V10 = (('un--toPTerm'(V6, V5, ('un--startPrec'()), V9))(V8))), case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V12}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--10463-8180--in--un--cleanNode'(V0, V1, V2, V3) -> case V2 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V4, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--10463-8179--in--un--cleanName'(V0, V1, V5)), V3)) end(E0, E1)); {'Idris.Idris.Syntax.POp', E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E9} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.POp', V9, V10, V16, V12, V13}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--10463-8179--in--un--cleanName'(V0, V1, V11)), V3)) end(E4, E5, E6, E7, E8)); {'Idris.Idris.Syntax.PPrefixOp', E11, E12, E13, E14} -> (fun (V17, V18, V19, V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E15} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrefixOp', V17, V18, V23, V20}} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--10463-8179--in--un--cleanName'(V0, V1, V19)), V3)) end(E11, E12, E13, E14)); {'Idris.Idris.Syntax.PSectionL', E17, E18, E19, E20} -> (fun (V24, V25, V26, V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V28) -> case V28 of {'Idris.Prelude.Types.Left', E21} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionL', V24, V25, V30, V27}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--10463-8179--in--un--cleanName'(V0, V1, V26)), V3)) end(E17, E18, E19, E20)); {'Idris.Idris.Syntax.PSectionR', E23, E24, E25, E26} -> (fun (V31, V32, V33, V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V35) -> case V35 of {'Idris.Prelude.Types.Left', E27} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionR', V31, V32, V33, V37}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--10463-8179--in--un--cleanName'(V0, V1, V34)), V3)) end(E23, E24, E25, E26)); _ -> {'Idris.Prelude.Types.Right', V2} end.
'nested--10463-8179--in--un--cleanName'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V3}} end end(E2, E3)); {'Idris.Core.Name.PV', E4, E5} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', V6} end end(E4, E5)); {'Idris.Core.Name.DN', E6, E7} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V9}} end end(E6, E7)); {'Idris.Core.Name.NS', E8, E9} -> (fun (V12, V13) -> case V13 of {'Idris.Core.Name.Nested', E12, E13} -> (fun (V14, V15) -> ('nested--10463-8179--in--un--cleanName'(V0, V1, V15)) end(E12, E13)); _ -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V16)) end end end(E8, E9)); _ -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V23}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V20)) end end.
'un--unbracketApp'(V0) -> case V0 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Idris.Syntax.PApp', E2, E3, E4} -> (fun (V3, V4, V5) -> V2 end(E2, E3, E4)); _ -> V0 end end(E0, E1)); _ -> V0 end.
'un--unbracket'(V0) -> case V0 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> V0 end.
'un--tyPrec'() -> (1 + 0).
'un--toPTypeDecl'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> begin (V8 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V7))(V3))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPTy', V4, V5, V6, <<""/utf8>>, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPTermApp'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V5, V6, V7) -> begin (V8 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V7))(V4))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> ('un--toPTermApp'(V0, V1, V6, [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V10}} | V3], V4)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4)); {'Idris.TTImp.TTImp.INamedApp', E7, E8, E9, E10} -> (fun (V11, V12, V13, V14) -> begin (V15 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V14))(V4))), case V15 of {'Idris.Prelude.Types.Left', E11} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V17) -> ('un--toPTermApp'(V0, V1, V12, [{'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V13}}, V17}} | V3], V4)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9, E10)); {'Idris.TTImp.TTImp.IVar', E13, E14} -> (fun (V18, V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E15} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V23) -> begin (V52 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V19, case V23 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V24 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V52 of {'Idris.Prelude.Types.Left', E45} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V54) -> begin (V55 = {'Idris.TTImp.TTImp.IVar', V18, V19}), case V54 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V56 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V55))(V4))), case V56 of {'Idris.Prelude.Types.Left', E47} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V58) -> (('un--mkApp'(V0, V1, V58, V3))(V4)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E49} -> (fun (V59) -> begin (V60 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V55))(V4))), case V60 of {'Idris.Prelude.Types.Left', E50} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V62) -> begin (V63 = ('un--showFullEnv'(V0, V4))), case V63 of {'Idris.Prelude.Types.Left', E52} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V65) -> begin (V87 = case V65 of 1 -> V3; 0 -> ('Idris.Idris2.Data.List':'un--drop'(('Idris.Idris2.Prelude.Types.List':'un--length'(case V59 of {'Idris.Core.Context.MkGlobalDef', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> V74 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('un--mkApp'(V0, V1, V62, V87))(V4)) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13, E14)); _ -> begin (V88 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V2))(V4))), case V88 of {'Idris.Prelude.Types.Left', E0} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V90) -> (('un--mkApp'(V0, V1, V90, V3))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--toPTerm'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> case case V9 of {'Idris.Core.Options.MkPPOpts', E4, E5, E6} -> (fun (V10, V11, V12) -> V12 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V4, V5}}; 0 -> (('un--toPRef'(V4, V5))(V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> fun (V19) -> case V15 of {'Idris.Core.TT.Implicit'} -> (fun () -> begin (V20 = ('un--showImplicits'(V0, V19))), case V20 of {'Idris.Prelude.Types.Left', E19} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V22) -> case V22 of 1 -> begin (V23 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V17))(V19))), case V23 of {'Idris.Prelude.Types.Left', E21} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V25) -> begin (V26 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V18))(V19))), case V26 of {'Idris.Prelude.Types.Left', E23} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V28) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V13, V14, {'Idris.Core.TT.Implicit'}, V16, V25, V28}, V19)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> case ('nested--8447-6488--in--un--needsBind'(V18, V17, V16, V14, V13, V2, V1, V0, V16)) of 1 -> begin (V29 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V17))(V19))), case V29 of {'Idris.Prelude.Types.Left', E25} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V31) -> begin (V32 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V18))(V19))), case V32 of {'Idris.Prelude.Types.Left', E27} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V34) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V13, V14, {'Idris.Core.TT.Implicit'}, V16, V31, V34}, V19)) end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> (('un--toPTerm'(V0, V1, V2, V18))(V19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V35 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V17))(V19))), case V35 of {'Idris.Prelude.Types.Left', E13} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V37) -> begin (V38 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V18))(V19))), case V38 of {'Idris.Prelude.Types.Left', E15} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V40) -> begin (V42 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V41) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V41)) end, V15, V19))), case V42 of {'Idris.Prelude.Types.Left', E17} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V44) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V13, V14, V44, V16, V37, V40}, V19)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.ILam', E29, E30, E31, E32, E33, E34} -> (fun (V45, V46, V47, V48, V49, V50) -> begin (V52 = case V48 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Name.UN', <<"_"/utf8>>} end()); {'Idris.Prelude.Types.Just', E35} -> (fun (V51) -> V51 end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V53) -> begin (V54 = ('un--showImplicits'(V0, V53))), case V54 of {'Idris.Prelude.Types.Left', E36} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V56) -> begin (V57 = case V56 of 1 -> (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V49))(V53)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V45}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V57 of {'Idris.Prelude.Types.Left', E38} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V59) -> begin (V60 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V50))(V53))), case V60 of {'Idris.Prelude.Types.Left', E40} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V62) -> begin (V64 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V63) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V63)) end, V47, V53))), case V64 of {'Idris.Prelude.Types.Left', E42} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V66) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLam', V45, V46, V66, {'Idris.Idris.Syntax.PRef', V45, V52}, V59, V62}, V53)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E29, E30, E31, E32, E33, E34)); {'Idris.TTImp.TTImp.ILet', E44, E45, E46, E47, E48, E49, E50} -> (fun (V67, V68, V69, V70, V71, V72, V73) -> fun (V74) -> begin (V75 = ('un--showImplicits'(V0, V74))), case V75 of {'Idris.Prelude.Types.Left', E51} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V77) -> begin (V78 = case V77 of 1 -> (('un--toPTerm'(V0, V1, ('un--startPrec'()), V71))(V74)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V67}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V78 of {'Idris.Prelude.Types.Left', E53} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V80) -> begin (V81 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V72))(V74))), case V81 of {'Idris.Prelude.Types.Left', E55} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V83) -> begin (V84 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V73))(V74))), case V84 of {'Idris.Prelude.Types.Left', E57} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V86) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLet', V67, V69, {'Idris.Idris.Syntax.PRef', V68, V70}, V80, V83, V86, []}, V74)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E44, E45, E46, E47, E48, E49, E50)); {'Idris.TTImp.TTImp.ICase', E59, E60, E61, E62} -> (fun (V87, V88, V89, V90) -> case V90 of [E67 | E68] -> (fun (V91, V92) -> fun (V93) -> case V91 of {'Idris.TTImp.TTImp.PatClause', E73, E74, E75} -> (fun (V94, V95, V96) -> case V92 of [] -> begin (V97 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V88))(V93))), case V97 of {'Idris.Prelude.Types.Left', E80} -> (fun (V98) -> {'Idris.Prelude.Types.Left', V98} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V99) -> begin (V100 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V95))(V93))), case V100 of {'Idris.Prelude.Types.Left', E82} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V102) -> begin (V103 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V96))(V93))), case V103 of {'Idris.Prelude.Types.Left', E84} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V105) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLet', V87, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V102, {'Idris.Idris.Syntax.PImplicit', V87}, V99, V105, []}, V93)) end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V106 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V88))(V93))), case V106 of {'Idris.Prelude.Types.Left', E76} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V108) -> begin (V111 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V109) -> fun (V110) -> ('un--toPClause'(V0, V1, V109, V110)) end end, V90, [], V93))), case V111 of {'Idris.Prelude.Types.Left', E78} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V113) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--8447-6891--in--un--mkIf'(V90, V89, V88, V87, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V87, V108, V113})), V93)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E73, E74, E75)); _ -> begin (V114 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V88))(V93))), case V114 of {'Idris.Prelude.Types.Left', E69} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V116) -> begin (V119 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V117) -> fun (V118) -> ('un--toPClause'(V0, V1, V117, V118)) end end, V90, [], V93))), case V119 of {'Idris.Prelude.Types.Left', E71} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V121) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--8447-6891--in--un--mkIf'(V90, V89, V88, V87, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V87, V116, V121})), V93)) end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E67, E68)); _ -> fun (V122) -> begin (V123 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V88))(V122))), case V123 of {'Idris.Prelude.Types.Left', E63} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V125) -> begin (V128 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V126) -> fun (V127) -> ('un--toPClause'(V0, V1, V126, V127)) end end, V90, [], V122))), case V128 of {'Idris.Prelude.Types.Left', E65} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V130) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--8447-6891--in--un--mkIf'(V90, V89, V88, V87, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V87, V125, V130})), V122)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E59, E60, E61, E62)); {'Idris.TTImp.TTImp.ILocal', E86, E87, E88} -> (fun (V131, V132, V133) -> fun (V134) -> begin (V137 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V135) -> fun (V136) -> ('un--toPDecl'(V0, V1, V135, V136)) end end, V132, [], V134))), case V137 of {'Idris.Prelude.Types.Left', E89} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V139) -> begin (V140 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V133))(V134))), case V140 of {'Idris.Prelude.Types.Left', E91} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V142) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLocal', V131, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V143) -> V143 end, V139)), V142}, V134)) end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E86, E87, E88)); {'Idris.TTImp.TTImp.ICaseLocal', E93, E94, E95, E96, E97} -> (fun (V144, V145, V146, V147, V148) -> ('un--toPTerm'(V0, V1, V2, V148)) end(E93, E94, E95, E96, E97)); {'Idris.TTImp.TTImp.IUpdate', E98, E99, E100} -> (fun (V149, V150, V151) -> fun (V152) -> begin (V155 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V153) -> fun (V154) -> ('un--toPFieldUpdate'(V0, V1, V153, V154)) end end, V150, [], V152))), case V155 of {'Idris.Prelude.Types.Left', E101} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V157) -> begin (V158 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V151))(V152))), case V158 of {'Idris.Prelude.Types.Left', E103} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V160) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PApp', V149, {'Idris.Idris.Syntax.PUpdate', V149, V157}, V160}, V152)) end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E98, E99, E100)); {'Idris.TTImp.TTImp.IApp', E105, E106, E107} -> (fun (V161, V162, V163) -> fun (V164) -> begin (V165 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V163))(V164))), case V165 of {'Idris.Prelude.Types.Left', E108} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V167) -> begin (V168 = ('un--toPTermApp'(V0, V1, V162, [{'Idris.Builtin.MkPair', V161, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V167}} | []], V164))), case V168 of {'Idris.Prelude.Types.Left', E110} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V170) -> ('un--bracket'(V1, V2, ('un--appPrec'()), V170, V164)) end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E105, E106, E107)); {'Idris.TTImp.TTImp.IAutoApp', E112, E113, E114} -> (fun (V171, V172, V173) -> fun (V174) -> begin (V175 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V173))(V174))), case V175 of {'Idris.Prelude.Types.Left', E115} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V177) -> begin (V178 = ('un--toPTermApp'(V0, V1, V172, [{'Idris.Builtin.MkPair', V171, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Nothing'}}, V177}} | []], V174))), case V178 of {'Idris.Prelude.Types.Left', E117} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V180) -> ('un--bracket'(V1, V2, ('un--appPrec'()), V180, V174)) end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E112, E113, E114)); {'Idris.TTImp.TTImp.IWithApp', E119, E120, E121} -> (fun (V181, V182, V183) -> fun (V184) -> begin (V185 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V183))(V184))), case V185 of {'Idris.Prelude.Types.Left', E122} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V187) -> begin (V188 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V182))(V184))), case V188 of {'Idris.Prelude.Types.Left', E124} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V190) -> ('un--bracket'(V1, V2, ('un--appPrec'()), {'Idris.Idris.Syntax.PWithApp', V181, V190, V187}, V184)) end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119, E120, E121)); {'Idris.TTImp.TTImp.INamedApp', E126, E127, E128, E129} -> (fun (V191, V192, V193, V194) -> fun (V195) -> begin (V196 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V194))(V195))), case V196 of {'Idris.Prelude.Types.Left', E130} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V198) -> begin (V199 = ('un--toPTermApp'(V0, V1, V192, [{'Idris.Builtin.MkPair', V191, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V193}}, V198}} | []], V195))), case V199 of {'Idris.Prelude.Types.Left', E132} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V201) -> begin (V202 = ('un--showImplicits'(V0, V195))), case V202 of {'Idris.Prelude.Types.Left', E134} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V204) -> case V204 of 1 -> ('un--bracket'(V1, V2, ('un--startPrec'()), V201, V195)); 0 -> (('un--mkOp'(V1, V201))(V195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126, E127, E128, E129)); {'Idris.TTImp.TTImp.ISearch', E136, E137} -> (fun (V205, V206) -> fun (V207) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSearch', V205, V206}} end end(E136, E137)); {'Idris.TTImp.TTImp.IAlternative', E138, E139, E140} -> (fun (V208, V209, V210) -> fun (V211) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V208}} end end(E138, E139, E140)); {'Idris.TTImp.TTImp.IRewrite', E141, E142, E143} -> (fun (V212, V213, V214) -> fun (V215) -> begin (V216 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V213))(V215))), case V216 of {'Idris.Prelude.Types.Left', E144} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V218) -> begin (V219 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V214))(V215))), case V219 of {'Idris.Prelude.Types.Left', E146} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E146)); {'Idris.Prelude.Types.Right', E147} -> (fun (V221) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRewrite', V212, V218, V221}} end(E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E141, E142, E143)); {'Idris.TTImp.TTImp.ICoerced', E148, E149} -> (fun (V222, V223) -> ('un--toPTerm'(V0, V1, V2, V223)) end(E148, E149)); {'Idris.TTImp.TTImp.IPrimVal', E150, E151} -> (fun (V224, V225) -> fun (V226) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrimVal', V224, V225}} end end(E150, E151)); {'Idris.TTImp.TTImp.IHole', E152, E153} -> (fun (V227, V228) -> fun (V229) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PHole', V227, 0, V228}} end end(E152, E153)); {'Idris.TTImp.TTImp.IType', E154} -> (fun (V230) -> fun (V231) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PType', V230}} end end(E154)); {'Idris.TTImp.TTImp.IBindVar', E155, E156} -> (fun (V232, V233) -> fun (V234) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V232, {'Idris.Core.Name.UN', V233}}} end end(E155, E156)); {'Idris.TTImp.TTImp.IBindHere', E157, E158, E159} -> (fun (V235, V236, V237) -> ('un--toPTerm'(V0, V1, V2, V237)) end(E157, E158, E159)); {'Idris.TTImp.TTImp.IAs', E160, E161, E162, E163, E164} -> (fun (V238, V239, V240, V241, V242) -> fun (V243) -> begin (V244 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V242))(V243))), case V244 of {'Idris.Prelude.Types.Left', E165} -> (fun (V245) -> {'Idris.Prelude.Types.Left', V245} end(E165)); {'Idris.Prelude.Types.Right', E166} -> (fun (V246) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PAs', V238, V239, V241, V246}} end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E160, E161, E162, E163, E164)); {'Idris.TTImp.TTImp.IMustUnify', E167, E168, E169} -> (fun (V247, V248, V249) -> fun (V250) -> begin (V251 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V249))(V250))), case V251 of {'Idris.Prelude.Types.Left', E170} -> (fun (V252) -> {'Idris.Prelude.Types.Left', V252} end(E170)); {'Idris.Prelude.Types.Right', E171} -> (fun (V253) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDotted', V247, V253}} end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E167, E168, E169)); {'Idris.TTImp.TTImp.IDelayed', E172, E173, E174} -> (fun (V254, V255, V256) -> fun (V257) -> begin (V258 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V256))(V257))), case V258 of {'Idris.Prelude.Types.Left', E175} -> (fun (V259) -> {'Idris.Prelude.Types.Left', V259} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V260) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelayed', V254, V255, V260}} end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E172, E173, E174)); {'Idris.TTImp.TTImp.IDelay', E177, E178} -> (fun (V261, V262) -> fun (V263) -> begin (V264 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V262))(V263))), case V264 of {'Idris.Prelude.Types.Left', E179} -> (fun (V265) -> {'Idris.Prelude.Types.Left', V265} end(E179)); {'Idris.Prelude.Types.Right', E180} -> (fun (V266) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelay', V261, V266}} end(E180)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E177, E178)); {'Idris.TTImp.TTImp.IForce', E181, E182} -> (fun (V267, V268) -> fun (V269) -> begin (V270 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V268))(V269))), case V270 of {'Idris.Prelude.Types.Left', E183} -> (fun (V271) -> {'Idris.Prelude.Types.Left', V271} end(E183)); {'Idris.Prelude.Types.Right', E184} -> (fun (V272) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForce', V267, V272}} end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E181, E182)); {'Idris.TTImp.TTImp.IQuote', E185, E186} -> (fun (V273, V274) -> fun (V275) -> begin (V276 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V274))(V275))), case V276 of {'Idris.Prelude.Types.Left', E187} -> (fun (V277) -> {'Idris.Prelude.Types.Left', V277} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V278) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuote', V273, V278}} end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E185, E186)); {'Idris.TTImp.TTImp.IQuoteName', E189, E190} -> (fun (V279, V280) -> fun (V281) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteName', V279, V280}} end end(E189, E190)); {'Idris.TTImp.TTImp.IQuoteDecl', E191, E192} -> (fun (V282, V283) -> fun (V284) -> begin (V287 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V285) -> fun (V286) -> ('un--toPDecl'(V0, V1, V285, V286)) end end, V283, [], V284))), case V287 of {'Idris.Prelude.Types.Left', E193} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V289) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteDecl', V282, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V290) -> V290 end, V289))}} end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E191, E192)); {'Idris.TTImp.TTImp.IUnquote', E195, E196} -> (fun (V291, V292) -> fun (V293) -> begin (V294 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V292))(V293))), case V294 of {'Idris.Prelude.Types.Left', E197} -> (fun (V295) -> {'Idris.Prelude.Types.Left', V295} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V296) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnquote', V291, V296}} end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E195, E196)); {'Idris.TTImp.TTImp.IRunElab', E199, E200} -> (fun (V297, V298) -> fun (V299) -> begin (V300 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V298))(V299))), case V300 of {'Idris.Prelude.Types.Left', E201} -> (fun (V301) -> {'Idris.Prelude.Types.Left', V301} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V302) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElab', V297, V302}} end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E199, E200)); {'Idris.TTImp.TTImp.IUnifyLog', E203, E204, E205} -> (fun (V303, V304, V305) -> ('un--toPTerm'(V0, V1, V2, V305)) end(E203, E204, E205)); {'Idris.TTImp.TTImp.Implicit', E206, E207} -> (fun (V306, V307) -> fun (V308) -> case V307 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V306}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PInfer', V306}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E206, E207)); {'Idris.TTImp.TTImp.IWithUnambigNames', E208, E209, E210} -> (fun (V309, V310, V311) -> fun (V312) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V313) -> case V313 of {'Idris.Prelude.Types.Left', E211} -> (fun (V314) -> {'Idris.Prelude.Types.Left', V314} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V315) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PWithUnambigNames', V309, V310, V315}} end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--toPTerm'(V0, V1, ('un--startPrec'()), V311)), V312)) end end(E208, E209, E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPRef'(V0, V1) -> case V1 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.Name.UN', V2}}))} end end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, V5}))} end end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.Name.UN', V8}}))} end end(E4, E5)); {'Idris.Core.Name.Nested', E6, E7} -> (fun (V11, V12) -> ('un--toPRef'(V0, V12)) end(E6, E7)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, V1}))} end end.
'un--toPRecord'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.MkImpRecord', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V23 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V10, V11) -> fun (V12) -> case V11 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V13, V14) -> case V14 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V15, V16) -> begin (V17 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V16))(V12))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> begin (V20 = ('nested--8491-7788--in--un--mapPiInfo'(V8, V7, V6, V5, V4, V1, V0, V15, V12))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V13, {'Idris.Builtin.MkPair', V22, V19}}}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6, [], V3))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('un--toPField'(V0, V1, V26, V27)) end end, V8, [], V3))), case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V25, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V7}, V30}}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPFnOpt'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.ForeignFn', E0} -> (fun (V4) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V5) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V5)) end, V4, [], V3))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForeign', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.IFnOpt', V2}} end.
'un--toPFieldUpdate'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.ISetField', E0, E1} -> (fun (V4, V5) -> begin (V6 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetField', V4, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.TTImp.TTImp.ISetFieldApp', E4, E5} -> (fun (V9, V10) -> begin (V11 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V10))(V3))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetFieldApp', V9, V13}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPField'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V9 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V8))(V3))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V13 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V12) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V12)) end, V6, V3))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkField', V4, <<""/utf8>>, V5, V15, V7, V11}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPDecl'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V11 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V9) -> fun (V10) -> ('un--toPFnOpt'(V0, V1, V9, V10)) end end, V7, [], V3))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> begin (V14 = ('un--toPTypeDecl'(V0, V1, V8, V3))), case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PClaim', V4, V5, V6, V13, V16}}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E9, E10, E11} -> (fun (V17, V18, V19) -> begin (V20 = ('un--toPData'(V0, V1, V19, V3))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PData', V17, <<""/utf8>>, V18, V22}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11)); {'Idris.TTImp.TTImp.IDef', E14, E15, E16} -> (fun (V23, V24, V25) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V26) -> fun (V27) -> ('un--toPClause'(V0, V1, V26, V27)) end end, V25, [], V3))), case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PDef', V23, V30}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15, E16)); {'Idris.TTImp.TTImp.IParameters', E19, E20, E21} -> (fun (V31, V32, V33) -> begin (V36 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V34) -> fun (V35) -> ('un--toPDecl'(V0, V1, V34, V35)) end end, V33, [], V3))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> begin (V54 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V39) -> case V39 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V40, V41) -> fun (V42) -> case V41 of {'Idris.Builtin.MkPair', E26, E27} -> (fun (V43, V44) -> case V44 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V45, V46) -> begin (V48 = ('Idris.Idris2.Core.Core.PiInfo':'un--traverse'(fun (V47) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V47)) end, V45, V42))), case V48 of {'Idris.Prelude.Types.Left', E30} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V50) -> begin (V51 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V46))(V42))), case V51 of {'Idris.Prelude.Types.Left', E32} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V40, {'Idris.Builtin.MkPair', V43, {'Idris.Builtin.MkPair', V50, V53}}}} end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V32, [], V3))), case V54 of {'Idris.Prelude.Types.Left', E34} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V56) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PParameters', V31, V56, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V57) -> V57 end, V38))}}} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20, E21)); {'Idris.TTImp.TTImp.IRecord', E36, E37, E38, E39} -> (fun (V58, V59, V60, V61) -> begin (V62 = ('un--toPRecord'(V0, V1, V61, V3))), case V62 of {'Idris.Prelude.Types.Left', E40} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V64) -> case V64 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V65, V66) -> case V66 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V67, V68) -> case V68 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V69, V70) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRecord', V58, <<""/utf8>>, V60, V65, V67, V69, V70}}} end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38, E39)); {'Idris.TTImp.TTImp.INamespace', E48, E49, E50} -> (fun (V71, V72, V73) -> begin (V76 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V74) -> fun (V75) -> ('un--toPDecl'(V0, V1, V74, V75)) end end, V73, [], V3))), case V76 of {'Idris.Prelude.Types.Left', E51} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V78) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PNamespace', V71, V72, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V79) -> V79 end, V78))}}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48, E49, E50)); {'Idris.TTImp.TTImp.ITransform', E53, E54, E55, E56} -> (fun (V80, V81, V82, V83) -> begin (V84 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V82))(V3))), case V84 of {'Idris.Prelude.Types.Left', E57} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V86) -> begin (V87 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V3))), case V87 of {'Idris.Prelude.Types.Left', E59} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PTransform', V80, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V81)), V86, V89}}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53, E54, E55, E56)); {'Idris.TTImp.TTImp.IRunElabDecl', E61, E62} -> (fun (V90, V91) -> begin (V92 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V91))(V3))), case V92 of {'Idris.Prelude.Types.Left', E63} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRunElabDecl', V90, V94}}} end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61, E62)); {'Idris.TTImp.TTImp.IPragma', E65, E66} -> (fun (V95, V96) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E65, E66)); {'Idris.TTImp.TTImp.ILog', E67} -> (fun (V97) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E67)); {'Idris.TTImp.TTImp.IBuiltin', E68, E69, E70} -> (fun (V98, V99, V100) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PBuiltin', V98, V99, V100}}} end(E68, E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPData'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> begin (V9 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V6))(V3))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V12) -> fun (V13) -> ('un--toPTypeDecl'(V0, V1, V12, V13)) end end, V8, [], V3))), case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPData', V4, V5, V11, V7, V16}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E9, E10, E11} -> (fun (V17, V18, V19) -> begin (V20 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V19))(V3))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPLater', V17, V18, V22}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPClause'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V4, V5, V6) -> begin (V7 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V3))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> begin (V10 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V6))(V3))), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPatClause', V4, V9, V12, []}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> begin (V19 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V14))(V3))), case V19 of {'Idris.Prelude.Types.Left', E13} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V21) -> begin (V22 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V15))(V3))), case V22 of {'Idris.Prelude.Types.Left', E15} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V24) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V25) -> fun (V26) -> ('un--toPClause'(V0, V1, V25, V26)) end end, V18, [], V3))), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkWithClause', V13, V21, V24, V16, V17, V29}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.ImpossibleClause', E19, E20} -> (fun (V30, V31) -> begin (V32 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V31))(V3))), case V32 of {'Idris.Prelude.Types.Left', E21} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkImpossible', V30, V34}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toCleanPTerm'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--toPTerm'(V0, V1, V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('un--cleanPTerm'(V0, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sugarName'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(implicit) "/utf8>>, V1)) end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V3, V4) -> ('un--sugarName'(V3)) end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V5, V6) -> V5 end(E4, E5)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)) end.
'un--sugarAppM'(V0) -> case V0 of {'Idris.Idris.Syntax.PApp', E5, E6, E7} -> (fun (V1, V2, V3) -> case V2 of {'Idris.Idris.Syntax.PApp', E13, E14, E15} -> (fun (V4, V5, V6) -> case V5 of {'Idris.Idris.Syntax.PRef', E21, E22} -> (fun (V7, V8) -> case V8 of {'Idris.Core.Name.NS', E28, E29} -> (fun (V9, V10) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V9)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V10)) of <<"Pair"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPair', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); <<"MkPair"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPair', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); <<"DPair"/utf8>> -> case ('un--unbracket'(V3)) of {'Idris.Idris.Syntax.PLam', E30, E31, E32, E33, E34, E35} -> (fun (V11, V12, V13, V14, V15, V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PDPair', V1, V7, V14, ('un--unbracket'(V6)), ('un--unbracket'(V16))})) end(E30, E31, E32, E33, E34, E35)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<"Equal"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); <<"==="/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); <<"~=~"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PEq', V1, ('un--unbracket'(V6)), ('un--unbracket'(V3))})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V10)) of <<"::"/utf8>> -> case ('un--sugarApp'(('un--unbracket'(V3)))) of {'Idris.Idris.Syntax.PList', E36, E37, E38} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V17, V18, [{'Idris.Builtin.MkPair', V7, ('un--unbracketApp'(V6))} | V19]})) end(E36, E37, E38)); _ -> {'Idris.Prelude.Types.Nothing'} end; <<":<"/utf8>> -> case ('un--sugarApp'(('un--unbracket'(V3)))) of {'Idris.Idris.Syntax.PSnocList', E39, E40, E41} -> (fun (V20, V21, V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V20, V21, ('Idris.Idris2.Prelude.Types.List':'un--++'(V22, [{'Idris.Builtin.MkPair', V7, ('un--unbracketApp'(V6))} | []]))})) end(E39, E40, E41)); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28, E29)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E23} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V23))}})) end(E23)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E24, E25} -> (fun (V24, V25) -> case V25 of {'Idris.Core.Name.NS', E26, E27} -> (fun (V26, V27) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V26)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V27)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V24})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V24})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V27)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V24, V24, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V24, V24, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E24, E25)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E16} -> (fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V28))}})) end(E16)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E17, E18} -> (fun (V29, V30) -> case V30 of {'Idris.Core.Name.NS', E19, E20} -> (fun (V31, V32) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V31)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V32)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V29})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V29})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V32)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V29, V29, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V29, V29, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E17, E18)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13, E14, E15)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E8} -> (fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V33))}})) end(E8)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E9, E10} -> (fun (V34, V35) -> case V35 of {'Idris.Core.Name.NS', E11, E12} -> (fun (V36, V37) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V36)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V37)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V34})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V34})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V37)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V34, V34, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V34, V34, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E9, E10)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6, E7)); _ -> case ('un--extractNat'(0, V0)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V38))}})) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E1, E2} -> (fun (V39, V40) -> case V40 of {'Idris.Core.Name.NS', E3, E4} -> (fun (V41, V42) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V41)) of 1 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V42)) of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V39})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PUnit', V39})); _ -> {'Idris.Prelude.Types.Nothing'} end; 0 -> case ('Idris.Idris2.Core.Name':'un--nameRoot'(V42)) of <<"Nil"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PList', V39, V39, []})); <<"Lin"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'({'Idris.Idris.Syntax.PSnocList', V39, V39, []})); _ -> {'Idris.Prelude.Types.Nothing'} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sugarApp'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V0 end, ('un--sugarAppM'(V0)))).
'un--startPrec'() -> 0.
'un--showImplicits'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V5 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showFullEnv'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V6 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resugarNoPatvars'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'(V0, V1, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resugar'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--pterm'(V0, V1, V2, V3) -> ('un--toCleanPTerm'(V0, V1, ('un--startPrec'()), V2, V3)).
'un--mkOp'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V2, V3, V4) -> fun (V5) -> case V3 of {'Idris.Idris.Syntax.PApp', E3, E4, E5} -> (fun (V6, V7, V8) -> case V7 of {'Idris.Idris.Syntax.PRef', E6, E7} -> (fun (V9, V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> begin (V15 = {'Idris.Idris.Syntax.PApp', V2, {'Idris.Idris.Syntax.PApp', V6, {'Idris.Idris.Syntax.PRef', V9, V10}, V8}, V4}), case ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'(('Idris.Idris2.Core.Name':'un--nameRoot'(V10)), case V14 of {'Idris.Idris.Syntax.MkSyntax', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V15} end()); {'Idris.Prelude.Types.Just', E10} -> (fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.POp', V2, V9, V10, ('un--unbracketApp'(V8)), ('un--unbracketApp'(V4))}} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> {'Idris.Prelude.Types.Right', V1} end end(E3, E4, E5)); _ -> {'Idris.Prelude.Types.Right', V1} end end end(E0, E1, E2)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', V1} end end.
'un--mkApp'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V11 = ('un--sugarApp'({'Idris.Idris.Syntax.PApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V11, V6)) end end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V13 = ('un--sugarApp'({'Idris.Idris.Syntax.PAutoApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V13, V6)) end end()); {'Idris.Prelude.Types.Just', E7} -> (fun (V14) -> fun (V15) -> begin (V16 = ('un--showImplicits'(V0, V15))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> case V18 of 1 -> begin (V19 = {'Idris.Idris.Syntax.PNamedApp', V7, V2, V14, V10}), (('un--mkApp'(V0, V1, V19, V6))(V15)) end; 0 -> (('un--mkApp'(V0, V1, V2, V6))(V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fullNamespace'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V7 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--extractNat'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V9, V10)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V15, V16)) end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V19, V20)) end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V22)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V31, V32)) end end end end}, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V35, V36)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V6, <<"Z"/utf8>>)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V39, V40)) end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V42)) end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V45, V46)) end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V49, V50)) end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V52)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V55, V56)) end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V61, V62)) end end end end}, fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V65, V66)) end end end}, case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V0)) end)) end)) end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); {'Idris.Idris.Syntax.PApp', E5, E6, E7} -> (fun (V67, V68, V69) -> case V68 of {'Idris.Idris.Syntax.PRef', E8, E9} -> (fun (V70, V71) -> case V71 of {'Idris.Core.Name.NS', E10, E11} -> (fun (V72, V73) -> case V73 of {'Idris.Core.Name.UN', E12} -> (fun (V74) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V77, V78)) end end end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V80)) end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V83, V84)) end end end end}, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V87, V88)) end end end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V90)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V93, V94)) end end end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V96)) end end, fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V99, V100)) end end end end}, fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V103, V104)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V74, <<"S"/utf8>>)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V107, V108)) end end end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V110)) end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V113, V114)) end end end end}, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'(V117, V118)) end end end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'(V120)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'({'Idris.Prelude.Interfaces.MkAlternative', {'Idris.Prelude.Interfaces.MkApplicative', fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V123, V124)) end end end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(V126)) end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'(V129, V130)) end end end end}, fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'()) end, fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'(V133, V134)) end end end}, case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V72, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))) of 1 -> 1; 0 -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V72, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), fun () -> ('un--extractNat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V0)), V69)) end)) end)) end(E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6, E7)); {'Idris.Idris.Syntax.PPrimVal', E13, E14} -> (fun (V135, V136) -> case V136 of {'Idris.Core.TT.BI', E15} -> (fun (V137) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V137)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13, E14)); {'Idris.Idris.Syntax.PBracketed', E16, E17} -> (fun (V138, V139) -> ('un--extractNat'(V0, V139)) end(E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--cleanPTerm'(V0, V1, V2) -> begin (V3 = ('un--fullNamespace'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 1 -> {'Idris.Prelude.Types.Right', V1}; 0 -> (('Idris.Idris2.Idris.Syntax':'un--mapPTermM'(fun (V6) -> fun (V7) -> ('nested--10463-8180--in--un--cleanNode'(V1, V0, V6, V7)) end end, V1))(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bracket'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--mkOp'(V0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V1, V2)) of 1 -> {'Idris.Prelude.Types.Right', ('un--addBracket'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V7))}; 0 -> {'Idris.Prelude.Types.Right', V7}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--argPrec'() -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1000)).
'un--appPrec'() -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(999)).
'un--addBracket'(V0, V1) -> case ('nested--7520-5552--in--un--needed'(V1, V0, V1)) of 1 -> {'Idris.Idris.Syntax.PBracketed', V0, V1}; 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
