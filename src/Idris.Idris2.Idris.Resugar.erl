-module('Idris.Idris2.Idris.Resugar').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--cleanPTerm-5732'/3,
  'case--cleanPTerm,cleanName-5654'/3,
  'case--toPDecl-5547'/7,
  'case--toPRecord-5363'/8,
  'case--case block in toPTermApp-5102'/11,
  'case--toPTermApp-5048'/8,
  'case--mkApp-4953'/8,
  'case--toPTerm-4694'/10,
  'case--toPTerm,mkIf-4441'/19,
  'case--toPTerm-4325'/11,
  'case--toPTerm-4250'/11,
  'case--toPTerm-4180'/9,
  'case--case block in toPTerm-4095'/10,
  'case--toPTerm-4045'/9,
  'case--toPTerm-3976'/7,
  'case--toPRef-3904'/2,
  'case--case block in case block in case block in sugarAppM-3856'/5,
  'case--case block in case block in case block in sugarAppM-3799'/5,
  'case--case block in case block in sugarAppM-3786'/5,
  'case--case block in sugarAppM-3778'/1,
  'case--sugarAppM-3759'/2,
  'case--case block in case block in sugarAppM-3699'/8,
  'case--case block in sugarAppM-3681'/8,
  'case--case block in case block in sugarAppM-3537'/8,
  'case--case block in sugarAppM-3477'/8,
  'case--sugarAppM-3458'/8,
  'case--extractNat-3349'/2,
  'case--bracket-3282'/6,
  'case--addBracket-3258'/3,
  'case--mkOp-3156'/10,
  'nested--12140-4008--in--un--needsBind'/9,
  'nested--11328-3208--in--un--needed'/3,
  'nested--12140-4403--in--un--mkIf'/8,
  'nested--12164-5291--in--un--mapPiInfo'/8,
  'nested--14044-5650--in--un--cleanNode'/3,
  'nested--14044-5649--in--un--cleanName'/3,
  'un--unbracketApp'/1,
  'un--unbracket'/1,
  'un--tyPrec'/0,
  'un--toPTypeDecl'/3,
  'un--toPTermApp'/4,
  'un--toPTerm'/4,
  'un--toPRef'/2,
  'un--toPRecord'/3,
  'un--toPFnOpt'/3,
  'un--toPFieldUpdate'/3,
  'un--toPField'/3,
  'un--toPDecl'/3,
  'un--toPData'/3,
  'un--toPClause'/3,
  'un--toCleanPTerm'/5,
  'un--sugarName'/1,
  'un--sugarAppM'/1,
  'un--sugarApp'/1,
  'un--startPrec'/0,
  'un--showImplicits'/2,
  'un--showFullEnv'/2,
  'un--resugarNoPatvars'/6,
  'un--resugar'/6,
  'un--pterm'/4,
  'un--mkOp'/2,
  'un--mkApp'/4,
  'un--fullNamespace'/2,
  'un--extractNat'/2,
  'un--cleanPTerm'/3,
  'un--bracket'/5,
  'un--argPrec'/0,
  'un--appPrec'/0,
  'un--addBracket'/2
]).
'case--cleanPTerm-5732'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> {'Idris.Prelude.Types.Right', V0} end; 1 -> ('Idris.Idris2.Idris.Syntax':'un--mapPTermM'(fun (V4) -> ('nested--14044-5650--in--un--cleanNode'(V0, V1, V4)) end, V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cleanPTerm,cleanName-5654'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V3}} end end(E2, E3)); {'Idris.Core.Name.PV', E4, E5} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', V6} end end(E4, E5)); {'Idris.Core.Name.DN', E6, E7} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V9}} end end(E6, E7)); {'Idris.Core.Name.NS', E8, E9} -> (fun (V12, V13) -> case V13 of {'Idris.Core.Name.Nested', E12, E13} -> (fun (V14, V15) -> ('nested--14044-5649--in--un--cleanName'(V0, V1, V15)) end(E12, E13)); _ -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V16)) end end end(E8, E9)); _ -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V23}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V20)) end end.
'case--toPDecl-5547'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRecord', V3, <<""/utf8>>, V2, V7, V9, V11, V12}}} end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPRecord-5363'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = (('un--toPTerm'(V6, V5, ('un--startPrec'()), V13))(V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = (('nested--12164-5291--in--un--mapPiInfo'(V0, V1, V2, V3, V4, V5, V6, V12))(V14))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V20, V17}}}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in toPTermApp-5102'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> V0; 1 -> ('Idris.Idris2.Data.List':'un--drop'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', case V7 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> V19 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTermApp-5048'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> begin (V9 = (('un--toPTerm'(V5, V4, ('un--appPrec'()), V3))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> (('un--mkApp'(V5, V4, V11, V0))(V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V12) -> fun (V13) -> begin (V14 = (('un--toPTerm'(V5, V4, ('un--appPrec'()), V3))(V13))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V17 = ('un--showFullEnv'(V5, V13))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V41 = case V19 of 0 -> V0; 1 -> ('Idris.Idris2.Data.List':'un--drop'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', case V12 of {'Idris.Core.Context.MkGlobalDef', E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V28 end(E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('un--mkApp'(V5, V4, V16, V41))(V13)) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkApp-4953'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> begin (V8 = {'Idris.Idris.Syntax.PNamedApp', V0, V4, V1, V2}), ('un--mkApp'(V6, V5, V8, V3)) end; 1 -> ('un--mkApp'(V6, V5, V4, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4694'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> ('un--bracket'(V5, V4, ('un--startPrec'()), V8, V10)) end; 1 -> ('un--mkOp'(V5, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm,mkIf-4441'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of 0 -> {'Idris.Idris.Syntax.PIfThenElse', V16, V15, V12, V14}; 1 -> V17; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4325'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> ('un--toPTerm'(V9, V8, ('un--startPrec'()), V2)); 1 -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V6}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4250'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> ('un--toPTerm'(V8, V7, ('un--tyPrec'()), V1)); 1 -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V5}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4180'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Name.UN', <<"_"/utf8>>} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> V9 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in toPTerm-4095'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of 0 -> fun (V10) -> begin (V11 = (('un--toPTerm'(V7, V6, ('un--tyPrec'()), V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = (('un--toPTerm'(V7, V6, ('un--tyPrec'()), V0))(V10))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> ('un--bracket'(V6, V5, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V4, V3, {'Idris.Core.TT.Implicit'}, V2, V13, V16}, V10)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('un--toPTerm'(V7, V6, V5, V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-4045'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of 0 -> fun (V9) -> begin (V10 = (('un--toPTerm'(V7, V6, ('un--tyPrec'()), V1))(V9))), case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> begin (V13 = (('un--toPTerm'(V7, V6, ('un--tyPrec'()), V0))(V9))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> ('un--bracket'(V6, V5, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V4, V3, {'Idris.Core.TT.Implicit'}, V2, V12, V15}, V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> begin (V16 = 1), ('case--case block in toPTerm-4095'(V0, V1, V2, V3, V4, V5, V6, V7, V16, ('nested--12140-4008--in--un--needsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V2)))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPTerm-3976'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V1, V0}} end; 1 -> ('un--toPRef'(V1, V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--toPRef-3904'(V0, V1) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V1, {'Idris.Core.Name.UN', V2}}))} end end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V1, V5}))} end end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V1, {'Idris.Core.Name.UN', V8}}))} end end(E4, E5)); {'Idris.Core.Name.Nested', E6, E7} -> (fun (V11, V12) -> ('un--toPRef'(V1, V12)) end(E6, E7)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V1, V0}))} end end.
'case--case block in case block in case block in sugarAppM-3856'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PList', V2, []})); 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in sugarAppM-3799'(V0, V1, V2, V3, V4) -> case V4 of <<"Unit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PUnit', V2})); <<"MkUnit"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PUnit', V2})); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in case block in sugarAppM-3786'(V0, V1, V2, V3, V4) -> case V4 of 0 -> ('case--case block in case block in case block in sugarAppM-3799'(V0, V1, V2, V3, ('Idris.Idris2.Core.Name':'un--nameRoot'(V0)))); 1 -> ('case--case block in case block in case block in sugarAppM-3856'(V0, V1, V2, V3, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Core.Name':'un--nameRoot'(V0)), <<"Nil"/utf8>>)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in sugarAppM-3778'(V0) -> case V0 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V3, V4) -> begin (V5 = {'Idris.Idris.Syntax.PRef', V1, {'Idris.Core.Name.NS', V3, V4}}), ('case--case block in case block in sugarAppM-3786'(V4, V3, V1, V5, ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V3)))) end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--sugarAppM-3759'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PPrimVal', ('Idris.Idris2.Idris.Syntax':'un--getPTermLoc'(V0)), {'Idris.Core.TT.BI', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Integer'(V2))}})) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Idris.Syntax.PRef', E1, E2} -> (fun (V3, V4) -> case V4 of {'Idris.Core.Name.NS', E3, E4} -> (fun (V5, V6) -> begin (V7 = {'Idris.Idris.Syntax.PRef', V3, {'Idris.Core.Name.NS', V5, V6}}), ('case--case block in case block in sugarAppM-3786'(V6, V5, V3, V7, ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V5)))) end end(E3, E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in sugarAppM-3699'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.PList', E0, E1} -> (fun (V8, V9) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PList', V8, [('un--unbracketApp'(V4)) | V9]})) end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in sugarAppM-3681'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> ('case--case block in case block in sugarAppM-3699'(V0, V1, V2, V3, V4, V5, V6, ('un--sugarApp'(('un--unbracket'(V5)))))); 1 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in sugarAppM-3537'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.PLam', E0, E1, E2, E3, E4, E5} -> (fun (V8, V9, V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PDPair', V6, V11, ('un--unbracket'(V4)), ('un--unbracket'(V13))})) end(E0, E1, E2, E3, E4, E5)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in sugarAppM-3477'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of <<"Pair"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PPair', V6, ('un--unbracket'(V4)), ('un--unbracket'(V5))})); <<"MkPair"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PPair', V6, ('un--unbracket'(V4)), ('un--unbracket'(V5))})); <<"DPair"/utf8>> -> ('case--case block in case block in sugarAppM-3537'(V0, V1, V2, V3, V4, V5, V6, ('un--unbracket'(V5)))); <<"Equal"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PEq', V6, ('un--unbracket'(V4)), ('un--unbracket'(V5))})); <<"==="/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PEq', V6, ('un--unbracket'(V4)), ('un--unbracket'(V5))})); <<"~=~"/utf8>> -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', {'Idris.Idris.Syntax.PEq', V6, ('un--unbracket'(V4)), ('un--unbracket'(V5))})); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--sugarAppM-3458'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> ('case--case block in sugarAppM-3477'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Core.Name':'un--nameRoot'(V2)))); 1 -> ('case--case block in sugarAppM-3681'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Core.Name':'un--nameRoot'(V2)), <<"::"/utf8>>)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extractNat-3349'(V0, V1) -> case V0 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V9, V10)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V15, V16)) end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V19, V20)) end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V22)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V31, V32)) end end end end}, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V35, V36)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V6, <<"Z"/utf8>>)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V39, V40)) end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V42)) end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V45, V46)) end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V49, V50)) end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V52)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V55, V56)) end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V61, V62)) end end end end}, fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V65, V66)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V1)) end)) end)) end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); {'Idris.Idris.Syntax.PApp', E5, E6, E7} -> (fun (V67, V68, V69) -> case V68 of {'Idris.Idris.Syntax.PRef', E8, E9} -> (fun (V70, V71) -> case V71 of {'Idris.Core.Name.NS', E10, E11} -> (fun (V72, V73) -> case V73 of {'Idris.Core.Name.UN', E12} -> (fun (V74) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V77, V78)) end end end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V80)) end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V83, V84)) end end end end}, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V87, V88)) end end end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V90)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V93, V94)) end end end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V96)) end end, fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V99, V100)) end end end end}, fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V103, V104)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V74, <<"S"/utf8>>)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V107, V108)) end end end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V110)) end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V113, V114)) end end end end}, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V117, V118)) end end end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V120)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V123, V124)) end end end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V126)) end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V129, V130)) end end end end}, fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V133, V134)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V72, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V72, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)))), fun () -> ('un--extractNat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), V69)) end)) end)) end(E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6, E7)); {'Idris.Idris.Syntax.PPrimVal', E13, E14} -> (fun (V135, V136) -> case V136 of {'Idris.Core.TT.BI', E15} -> (fun (V137) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V1, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V137)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13, E14)); {'Idris.Idris.Syntax.PBracketed', E16, E17} -> (fun (V138, V139) -> ('un--extractNat'(V1, V139)) end(E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--bracket-3282'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> {'Idris.Prelude.Types.Right', ('un--addBracket'(('Idris.Idris2.Core.FC':'un--emptyFC'()), V4))} end; 1 -> fun (V7) -> {'Idris.Prelude.Types.Right', V4} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addBracket-3258'(V0, V1, V2) -> case V2 of 0 -> {'Idris.Idris.Syntax.PBracketed', V1, V0}; 1 -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkOp-3156'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', V6} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.POp', V5, V2, ('un--unbracketApp'(V3)), ('un--unbracketApp'(V4))}} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12140-4008--in--un--needsBind'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Core.Name.UN', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.TTImp.Utils':'un--findBindableNames'(1, [], [], V0))), begin (V12 = ('Idris.Idris2.TTImp.Utils':'un--findAllNames'([], V0))), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V15, V16)) end end}, {'Idris.Core.Name.UN', V10}, V12)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V19, V20)) end end}, V10, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V21) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V21)) end, V11)))))) end)) end end end(E1)); _ -> 1 end end(E0)); _ -> 1 end.
'nested--11328-3208--in--un--needed'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V3, V4) -> 1 end(E0, E1)); {'Idris.Idris.Syntax.PRef', E2, E3} -> (fun (V5, V6) -> 1 end(E2, E3)); {'Idris.Idris.Syntax.PPair', E4, E5, E6} -> (fun (V7, V8, V9) -> 1 end(E4, E5, E6)); {'Idris.Idris.Syntax.PDPair', E7, E8, E9, E10} -> (fun (V10, V11, V12, V13) -> 1 end(E7, E8, E9, E10)); {'Idris.Idris.Syntax.PUnit', E11} -> (fun (V14) -> 1 end(E11)); {'Idris.Idris.Syntax.PComprehension', E12, E13, E14} -> (fun (V15, V16, V17) -> 1 end(E12, E13, E14)); {'Idris.Idris.Syntax.PList', E15, E16} -> (fun (V18, V19) -> 1 end(E15, E16)); {'Idris.Idris.Syntax.PPrimVal', E17, E18} -> (fun (V20, V21) -> 1 end(E17, E18)); _ -> 0 end.
'nested--12140-4403--in--un--mkIf'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.PCase', E0, E1, E2} -> (fun (V8, V9, V10) -> case V10 of [E3 | E4] -> (fun (V11, V12) -> case V11 of {'Idris.Idris.Syntax.MkPatClause', E5, E6, E7, E8} -> (fun (V13, V14, V15, V16) -> case V14 of {'Idris.Idris.Syntax.PRef', E9, E10} -> (fun (V17, V18) -> case V16 of [] -> case V12 of [E11 | E12] -> (fun (V19, V20) -> case V19 of {'Idris.Idris.Syntax.MkPatClause', E13, E14, E15, E16} -> (fun (V21, V22, V23, V24) -> case V22 of {'Idris.Idris.Syntax.PRef', E17, E18} -> (fun (V25, V26) -> case V24 of [] -> case V20 of [] -> begin (V27 = {'Idris.Idris.Syntax.PCase', V8, V9, [{'Idris.Idris.Syntax.MkPatClause', V13, {'Idris.Idris.Syntax.PRef', V17, V18}, V15, []} | [{'Idris.Idris.Syntax.MkPatClause', V21, {'Idris.Idris.Syntax.PRef', V25, V26}, V23, []} | []]]}), ('case--toPTerm,mkIf-4441'(V0, V1, V2, V3, V4, V5, V6, V21, V25, V13, V17, V18, V15, V26, V23, V9, V8, V27, ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V18)), {'Idris.Core.Name.UN', <<"True"/utf8>>})), fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(('Idris.Idris2.Core.Name':'un--dropNS'(V26)), {'Idris.Core.Name.UN', <<"False"/utf8>>})) end)))) end; _ -> V7 end; _ -> V7 end end(E17, E18)); _ -> V7 end end(E13, E14, E15, E16)); _ -> V7 end end(E11, E12)); _ -> V7 end; _ -> V7 end end(E9, E10)); _ -> V7 end end(E5, E6, E7, E8)); _ -> V7 end end(E3, E4)); _ -> V7 end end(E0, E1, E2)); _ -> V7 end.
'nested--12164-5291--in--un--mapPiInfo'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Explicit'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end end()); {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V11) -> fun (V12) -> begin (V13 = (('un--toPTerm'(V6, V5, ('un--startPrec'()), V11))(V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V15}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--14044-5650--in--un--cleanNode'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V3, V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V3, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14044-5649--in--un--cleanName'(V0, V1, V4)), V5)) end end(E0, E1)); {'Idris.Idris.Syntax.POp', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.POp', V9, V16, V11, V12}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14044-5649--in--un--cleanName'(V0, V1, V10)), V13)) end end(E4, E5, E6, E7)); {'Idris.Idris.Syntax.PPrefixOp', E10, E11, E12} -> (fun (V17, V18, V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrefixOp', V17, V23, V19}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14044-5649--in--un--cleanName'(V0, V1, V18)), V20)) end end(E10, E11, E12)); {'Idris.Idris.Syntax.PSectionL', E15, E16, E17} -> (fun (V24, V25, V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V28) -> case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionL', V24, V30, V26}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14044-5649--in--un--cleanName'(V0, V1, V25)), V27)) end end(E15, E16, E17)); {'Idris.Idris.Syntax.PSectionR', E20, E21, E22} -> (fun (V31, V32, V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V35) -> case V35 of {'Idris.Prelude.Types.Left', E23} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSectionR', V31, V32, V37}} end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--14044-5649--in--un--cleanName'(V0, V1, V33)), V34)) end end(E20, E21, E22)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', V2} end end.
'nested--14044-5649--in--un--cleanName'(V0, V1, V2) -> case V2 of {'Idris.Core.Name.MN', E2, E3} -> (fun (V3, V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V3}} end end(E2, E3)); {'Idris.Core.Name.PV', E4, E5} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', V6} end end(E4, E5)); {'Idris.Core.Name.DN', E6, E7} -> (fun (V9, V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V9}} end end(E6, E7)); {'Idris.Core.Name.NS', E8, E9} -> (fun (V12, V13) -> case V13 of {'Idris.Core.Name.Nested', E12, E13} -> (fun (V14, V15) -> ('nested--14044-5649--in--un--cleanName'(V0, V1, V15)) end(E12, E13)); _ -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V19}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V16)) end end end(E8, E9)); _ -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E0} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V23}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context':'un--prettyName'(V1, V2)), V20)) end end.
'un--unbracketApp'(V0) -> case V0 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V1, V2) -> case V2 of {'Idris.Idris.Syntax.PApp', E2, E3, E4} -> (fun (V3, V4, V5) -> V2 end(E2, E3, E4)); _ -> V0 end end(E0, E1)); _ -> V0 end.
'un--unbracket'(V0) -> case V0 of {'Idris.Idris.Syntax.PBracketed', E0, E1} -> (fun (V1, V2) -> V2 end(E0, E1)); _ -> V0 end.
'un--tyPrec'() -> (1 + 0).
'un--toPTypeDecl'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> fun (V7) -> begin (V8 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPTy', V3, V4, V5, <<""/utf8>>, V10}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPTermApp'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V4, V5, V6) -> fun (V7) -> begin (V8 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V10) -> (('un--toPTermApp'(V0, V1, V5, [{'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V10}} | V3]))(V7)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); {'Idris.TTImp.TTImp.INamedApp', E7, E8, E9, E10} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V14))(V15))), case V16 of {'Idris.Prelude.Types.Left', E11} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V18) -> (('un--toPTermApp'(V0, V1, V12, [{'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V13}}, V18}} | V3]))(V15)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10)); {'Idris.TTImp.TTImp.IVar', E13, E14} -> (fun (V19, V20) -> fun (V21) -> begin (V23 = begin (V22 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V53 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V20, case V25 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V26 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V53 of {'Idris.Prelude.Types.Left', E44} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V55) -> begin (V56 = {'Idris.TTImp.TTImp.IVar', V19, V20}), case V55 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V57 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V56))(V21))), case V57 of {'Idris.Prelude.Types.Left', E46} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V59) -> (('un--mkApp'(V0, V1, V59, V3))(V21)) end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E48} -> (fun (V60) -> begin (V61 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V56))(V21))), case V61 of {'Idris.Prelude.Types.Left', E49} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V63) -> begin (V64 = ('un--showFullEnv'(V0, V21))), case V64 of {'Idris.Prelude.Types.Left', E51} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V66) -> begin (V88 = case V66 of 0 -> V3; 1 -> ('Idris.Idris2.Data.List':'un--drop'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', case V60 of {'Idris.Core.Context.MkGlobalDef', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V75 end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), (('un--mkApp'(V0, V1, V63, V88))(V21)) end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14)); _ -> fun (V89) -> begin (V90 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V2))(V89))), case V90 of {'Idris.Prelude.Types.Left', E0} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V92) -> (('un--mkApp'(V0, V1, V92, V3))(V89)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--toPTerm'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> (('case--toPTerm-3976'(V5, V4, V2, V1, V0, V9, case V9 of {'Idris.Core.Options.MkPPOpts', E4, E5, E6} -> (fun (V10, V11, V12) -> V12 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V6)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.IPi', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> case V15 of {'Idris.Core.TT.Implicit'} -> (fun () -> fun (V19) -> begin (V20 = ('un--showImplicits'(V0, V19))), case V20 of {'Idris.Prelude.Types.Left', E19} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V22) -> case V22 of 0 -> begin (V23 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V17))(V19))), case V23 of {'Idris.Prelude.Types.Left', E21} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V25) -> begin (V26 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V18))(V19))), case V26 of {'Idris.Prelude.Types.Left', E23} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V28) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V13, V14, {'Idris.Core.TT.Implicit'}, V16, V25, V28}, V19)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V29 = 1), (('case--case block in toPTerm-4095'(V18, V17, V16, V14, V13, V2, V1, V0, V29, ('nested--12140-4008--in--un--needsBind'(V18, V17, V16, V14, V13, V2, V1, V0, V16))))(V19)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V30) -> begin (V31 = (('un--toPTerm'(V0, V1, ('un--appPrec'()), V17))(V30))), case V31 of {'Idris.Prelude.Types.Left', E13} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V33) -> begin (V34 = (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V18))(V30))), case V34 of {'Idris.Prelude.Types.Left', E15} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V36) -> begin (V38 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V37) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V37)) end, V15))(V30))), case V38 of {'Idris.Prelude.Types.Left', E17} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V40) -> ('un--bracket'(V1, V2, ('un--tyPrec'()), {'Idris.Idris.Syntax.PPi', V13, V14, V40, V16, V33, V36}, V30)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.ILam', E25, E26, E27, E28, E29, E30} -> (fun (V41, V42, V43, V44, V45, V46) -> begin (V48 = case V44 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.Name.UN', <<"_"/utf8>>} end()); {'Idris.Prelude.Types.Just', E31} -> (fun (V47) -> V47 end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V49) -> begin (V50 = ('un--showImplicits'(V0, V49))), case V50 of {'Idris.Prelude.Types.Left', E32} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V52) -> begin (V53 = case V52 of 0 -> (('un--toPTerm'(V0, V1, ('un--tyPrec'()), V45))(V49)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V41}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V53 of {'Idris.Prelude.Types.Left', E34} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V55) -> begin (V56 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V46))(V49))), case V56 of {'Idris.Prelude.Types.Left', E36} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V58) -> begin (V60 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V59) -> ('un--toPTerm'(V0, V1, ('un--argPrec'()), V59)) end, V43))(V49))), case V60 of {'Idris.Prelude.Types.Left', E38} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V62) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLam', V41, V42, V62, {'Idris.Idris.Syntax.PRef', V41, V48}, V55, V58}, V49)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E25, E26, E27, E28, E29, E30)); {'Idris.TTImp.TTImp.ILet', E40, E41, E42, E43, E44, E45, E46} -> (fun (V63, V64, V65, V66, V67, V68, V69) -> fun (V70) -> begin (V71 = ('un--showImplicits'(V0, V70))), case V71 of {'Idris.Prelude.Types.Left', E47} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V73) -> begin (V74 = case V73 of 0 -> (('un--toPTerm'(V0, V1, ('un--startPrec'()), V67))(V70)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V63}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V74 of {'Idris.Prelude.Types.Left', E49} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V76) -> begin (V77 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V68))(V70))), case V77 of {'Idris.Prelude.Types.Left', E51} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V79) -> begin (V80 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V69))(V70))), case V80 of {'Idris.Prelude.Types.Left', E53} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V82) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLet', V63, V65, {'Idris.Idris.Syntax.PRef', V64, V66}, V76, V79, V82, []}, V70)) end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42, E43, E44, E45, E46)); {'Idris.TTImp.TTImp.ICase', E55, E56, E57, E58} -> (fun (V83, V84, V85, V86) -> case V86 of [E63 | E64] -> (fun (V87, V88) -> case V87 of {'Idris.TTImp.TTImp.PatClause', E69, E70, E71} -> (fun (V89, V90, V91) -> case V88 of [] -> fun (V92) -> begin (V93 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V84))(V92))), case V93 of {'Idris.Prelude.Types.Left', E76} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V95) -> begin (V96 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V90))(V92))), case V96 of {'Idris.Prelude.Types.Left', E78} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V98) -> begin (V99 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V91))(V92))), case V99 of {'Idris.Prelude.Types.Left', E80} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V101) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLet', V83, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()), V98, {'Idris.Idris.Syntax.PImplicit', V83}, V95, V101, []}, V92)) end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V102) -> begin (V103 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V84))(V102))), case V103 of {'Idris.Prelude.Types.Left', E72} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V105) -> begin (V107 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V106) -> ('un--toPClause'(V0, V1, V106)) end, V86, []))(V102))), case V107 of {'Idris.Prelude.Types.Left', E74} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V109) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--12140-4403--in--un--mkIf'(V86, V85, V84, V83, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V83, V105, V109})), V102)) end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E69, E70, E71)); _ -> fun (V110) -> begin (V111 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V84))(V110))), case V111 of {'Idris.Prelude.Types.Left', E65} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V113) -> begin (V115 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V114) -> ('un--toPClause'(V0, V1, V114)) end, V86, []))(V110))), case V115 of {'Idris.Prelude.Types.Left', E67} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V117) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--12140-4403--in--un--mkIf'(V86, V85, V84, V83, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V83, V113, V117})), V110)) end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E63, E64)); _ -> fun (V118) -> begin (V119 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V84))(V118))), case V119 of {'Idris.Prelude.Types.Left', E59} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V121) -> begin (V123 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V122) -> ('un--toPClause'(V0, V1, V122)) end, V86, []))(V118))), case V123 of {'Idris.Prelude.Types.Left', E61} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V125) -> ('un--bracket'(V1, V2, ('un--startPrec'()), ('nested--12140-4403--in--un--mkIf'(V86, V85, V84, V83, V2, V1, V0, {'Idris.Idris.Syntax.PCase', V83, V121, V125})), V118)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E55, E56, E57, E58)); {'Idris.TTImp.TTImp.ILocal', E82, E83, E84} -> (fun (V126, V127, V128) -> fun (V129) -> begin (V131 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V130) -> ('un--toPDecl'(V0, V1, V130)) end, V127, []))(V129))), case V131 of {'Idris.Prelude.Types.Left', E85} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V133) -> begin (V134 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V128))(V129))), case V134 of {'Idris.Prelude.Types.Left', E87} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V136) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PLocal', V126, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V137) -> V137 end, V133)), V136}, V129)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E82, E83, E84)); {'Idris.TTImp.TTImp.ICaseLocal', E89, E90, E91, E92, E93} -> (fun (V138, V139, V140, V141, V142) -> ('un--toPTerm'(V0, V1, V2, V142)) end(E89, E90, E91, E92, E93)); {'Idris.TTImp.TTImp.IUpdate', E94, E95, E96} -> (fun (V143, V144, V145) -> fun (V146) -> begin (V148 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V147) -> ('un--toPFieldUpdate'(V0, V1, V147)) end, V144, []))(V146))), case V148 of {'Idris.Prelude.Types.Left', E97} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V150) -> begin (V151 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V145))(V146))), case V151 of {'Idris.Prelude.Types.Left', E99} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V153) -> ('un--bracket'(V1, V2, ('un--startPrec'()), {'Idris.Idris.Syntax.PApp', V143, {'Idris.Idris.Syntax.PUpdate', V143, V150}, V153}, V146)) end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E94, E95, E96)); {'Idris.TTImp.TTImp.IApp', E101, E102, E103} -> (fun (V154, V155, V156) -> fun (V157) -> begin (V158 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V156))(V157))), case V158 of {'Idris.Prelude.Types.Left', E104} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V160) -> begin (V161 = (('un--toPTermApp'(V0, V1, V155, [{'Idris.Builtin.MkPair', V154, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Nothing'}, V160}} | []]))(V157))), case V161 of {'Idris.Prelude.Types.Left', E106} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V163) -> ('un--bracket'(V1, V2, ('un--appPrec'()), V163, V157)) end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E101, E102, E103)); {'Idris.TTImp.TTImp.IAutoApp', E108, E109, E110} -> (fun (V164, V165, V166) -> fun (V167) -> begin (V168 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V166))(V167))), case V168 of {'Idris.Prelude.Types.Left', E111} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V170) -> begin (V171 = (('un--toPTermApp'(V0, V1, V165, [{'Idris.Builtin.MkPair', V164, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Nothing'}}, V170}} | []]))(V167))), case V171 of {'Idris.Prelude.Types.Left', E113} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V173) -> ('un--bracket'(V1, V2, ('un--appPrec'()), V173, V167)) end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E108, E109, E110)); {'Idris.TTImp.TTImp.IWithApp', E115, E116, E117} -> (fun (V174, V175, V176) -> fun (V177) -> begin (V178 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V176))(V177))), case V178 of {'Idris.Prelude.Types.Left', E118} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V180) -> begin (V181 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V175))(V177))), case V181 of {'Idris.Prelude.Types.Left', E120} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V183) -> ('un--bracket'(V1, V2, ('un--appPrec'()), {'Idris.Idris.Syntax.PWithApp', V174, V183, V180}, V177)) end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E115, E116, E117)); {'Idris.TTImp.TTImp.INamedApp', E122, E123, E124, E125} -> (fun (V184, V185, V186, V187) -> fun (V188) -> begin (V189 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V187))(V188))), case V189 of {'Idris.Prelude.Types.Left', E126} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V191) -> begin (V192 = (('un--toPTermApp'(V0, V1, V185, [{'Idris.Builtin.MkPair', V184, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', {'Idris.Prelude.Types.Just', V186}}, V191}} | []]))(V188))), case V192 of {'Idris.Prelude.Types.Left', E128} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V194) -> begin (V195 = ('un--showImplicits'(V0, V188))), case V195 of {'Idris.Prelude.Types.Left', E130} -> (fun (V196) -> {'Idris.Prelude.Types.Left', V196} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V197) -> case V197 of 0 -> ('un--bracket'(V1, V2, ('un--startPrec'()), V194, V188)); 1 -> (('un--mkOp'(V1, V194))(V188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E122, E123, E124, E125)); {'Idris.TTImp.TTImp.ISearch', E132, E133} -> (fun (V198, V199) -> fun (V200) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSearch', V198, V199}} end end(E132, E133)); {'Idris.TTImp.TTImp.IAlternative', E134, E135, E136} -> (fun (V201, V202, V203) -> fun (V204) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V201}} end end(E134, E135, E136)); {'Idris.TTImp.TTImp.IRewrite', E137, E138, E139} -> (fun (V205, V206, V207) -> fun (V208) -> begin (V209 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V206))(V208))), case V209 of {'Idris.Prelude.Types.Left', E140} -> (fun (V210) -> {'Idris.Prelude.Types.Left', V210} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V211) -> begin (V212 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V207))(V208))), case V212 of {'Idris.Prelude.Types.Left', E142} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V214) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRewrite', V205, V211, V214}} end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E137, E138, E139)); {'Idris.TTImp.TTImp.ICoerced', E144, E145} -> (fun (V215, V216) -> ('un--toPTerm'(V0, V1, V2, V216)) end(E144, E145)); {'Idris.TTImp.TTImp.IPrimVal', E146, E147} -> (fun (V217, V218) -> fun (V219) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PPrimVal', V217, V218}} end end(E146, E147)); {'Idris.TTImp.TTImp.IHole', E148, E149} -> (fun (V220, V221) -> fun (V222) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PHole', V220, 1, V221}} end end(E148, E149)); {'Idris.TTImp.TTImp.IType', E150} -> (fun (V223) -> fun (V224) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PType', V223}} end end(E150)); {'Idris.TTImp.TTImp.IBindVar', E151, E152} -> (fun (V225, V226) -> fun (V227) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRef', V225, {'Idris.Core.Name.UN', V226}}} end end(E151, E152)); {'Idris.TTImp.TTImp.IBindHere', E153, E154, E155} -> (fun (V228, V229, V230) -> ('un--toPTerm'(V0, V1, V2, V230)) end(E153, E154, E155)); {'Idris.TTImp.TTImp.IAs', E156, E157, E158, E159, E160} -> (fun (V231, V232, V233, V234, V235) -> fun (V236) -> begin (V237 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V235))(V236))), case V237 of {'Idris.Prelude.Types.Left', E161} -> (fun (V238) -> {'Idris.Prelude.Types.Left', V238} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V239) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PAs', V231, V232, V234, V239}} end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E156, E157, E158, E159, E160)); {'Idris.TTImp.TTImp.IMustUnify', E163, E164, E165} -> (fun (V240, V241, V242) -> fun (V243) -> begin (V244 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V242))(V243))), case V244 of {'Idris.Prelude.Types.Left', E166} -> (fun (V245) -> {'Idris.Prelude.Types.Left', V245} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V246) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDotted', V240, V246}} end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E163, E164, E165)); {'Idris.TTImp.TTImp.IDelayed', E168, E169, E170} -> (fun (V247, V248, V249) -> fun (V250) -> begin (V251 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V249))(V250))), case V251 of {'Idris.Prelude.Types.Left', E171} -> (fun (V252) -> {'Idris.Prelude.Types.Left', V252} end(E171)); {'Idris.Prelude.Types.Right', E172} -> (fun (V253) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelayed', V247, V248, V253}} end(E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E168, E169, E170)); {'Idris.TTImp.TTImp.IDelay', E173, E174} -> (fun (V254, V255) -> fun (V256) -> begin (V257 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V255))(V256))), case V257 of {'Idris.Prelude.Types.Left', E175} -> (fun (V258) -> {'Idris.Prelude.Types.Left', V258} end(E175)); {'Idris.Prelude.Types.Right', E176} -> (fun (V259) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PDelay', V254, V259}} end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E173, E174)); {'Idris.TTImp.TTImp.IForce', E177, E178} -> (fun (V260, V261) -> fun (V262) -> begin (V263 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V261))(V262))), case V263 of {'Idris.Prelude.Types.Left', E179} -> (fun (V264) -> {'Idris.Prelude.Types.Left', V264} end(E179)); {'Idris.Prelude.Types.Right', E180} -> (fun (V265) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForce', V260, V265}} end(E180)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E177, E178)); {'Idris.TTImp.TTImp.IQuote', E181, E182} -> (fun (V266, V267) -> fun (V268) -> begin (V269 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V267))(V268))), case V269 of {'Idris.Prelude.Types.Left', E183} -> (fun (V270) -> {'Idris.Prelude.Types.Left', V270} end(E183)); {'Idris.Prelude.Types.Right', E184} -> (fun (V271) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuote', V266, V271}} end(E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E181, E182)); {'Idris.TTImp.TTImp.IQuoteName', E185, E186} -> (fun (V272, V273) -> fun (V274) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteName', V272, V273}} end end(E185, E186)); {'Idris.TTImp.TTImp.IQuoteDecl', E187, E188} -> (fun (V275, V276) -> fun (V277) -> begin (V279 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V278) -> ('un--toPDecl'(V0, V1, V278)) end, V276, []))(V277))), case V279 of {'Idris.Prelude.Types.Left', E189} -> (fun (V280) -> {'Idris.Prelude.Types.Left', V280} end(E189)); {'Idris.Prelude.Types.Right', E190} -> (fun (V281) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PQuoteDecl', V275, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V282) -> V282 end, V281))}} end(E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E187, E188)); {'Idris.TTImp.TTImp.IUnquote', E191, E192} -> (fun (V283, V284) -> fun (V285) -> begin (V286 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V284))(V285))), case V286 of {'Idris.Prelude.Types.Left', E193} -> (fun (V287) -> {'Idris.Prelude.Types.Left', V287} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V288) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PUnquote', V283, V288}} end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E191, E192)); {'Idris.TTImp.TTImp.IRunElab', E195, E196} -> (fun (V289, V290) -> fun (V291) -> begin (V292 = (('un--toPTerm'(V0, V1, ('un--argPrec'()), V290))(V291))), case V292 of {'Idris.Prelude.Types.Left', E197} -> (fun (V293) -> {'Idris.Prelude.Types.Left', V293} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V294) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PRunElab', V289, V294}} end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E195, E196)); {'Idris.TTImp.TTImp.IUnifyLog', E199, E200, E201} -> (fun (V295, V296, V297) -> ('un--toPTerm'(V0, V1, V2, V297)) end(E199, E200, E201)); {'Idris.TTImp.TTImp.Implicit', E202, E203} -> (fun (V298, V299) -> case V299 of 0 -> fun (V300) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PImplicit', V298}} end; 1 -> fun (V301) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PInfer', V298}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E202, E203)); {'Idris.TTImp.TTImp.IWithUnambigNames', E204, E205, E206} -> (fun (V302, V303, V304) -> fun (V305) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V306) -> case V306 of {'Idris.Prelude.Types.Left', E207} -> (fun (V307) -> {'Idris.Prelude.Types.Left', V307} end(E207)); {'Idris.Prelude.Types.Right', E208} -> (fun (V308) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PWithUnambigNames', V302, V303, V308}} end(E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--toPTerm'(V0, V1, ('un--startPrec'()), V304)), V305)) end end(E204, E205, E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPRef'(V0, V1) -> case V1 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V2, V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.Name.UN', V2}}))} end end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V5, V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, V5}))} end end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V8, V9) -> fun (V10) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, {'Idris.Core.Name.UN', V8}}))} end end(E4, E5)); {'Idris.Core.Name.Nested', E6, E7} -> (fun (V11, V12) -> ('un--toPRef'(V0, V12)) end(E6, E7)); _ -> fun (V13) -> {'Idris.Prelude.Types.Right', ('un--sugarApp'({'Idris.Idris.Syntax.PRef', V0, V1}))} end end.
'un--toPRecord'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkImpRecord', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V23 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V15))(V16))), case V17 of {'Idris.Prelude.Types.Left', E11} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V19) -> begin (V20 = (('nested--12164-5291--in--un--mapPiInfo'(V7, V6, V5, V4, V3, V1, V0, V14))(V16))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V22, V19}}}} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V5, []))(V8))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V27 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V26) -> ('un--toPField'(V0, V1, V26)) end, V7, []))(V8))), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V25, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V6}, V29}}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPFnOpt'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.ForeignFn', E0} -> (fun (V3) -> fun (V4) -> begin (V6 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V5) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V5)) end, V3, []))(V4))), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PForeign', V8}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.IFnOpt', V2}} end end.
'un--toPFieldUpdate'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.ISetField', E0, E1} -> (fun (V3, V4) -> fun (V5) -> begin (V6 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetField', V3, V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.TTImp.ISetFieldApp', E4, E5} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V10))(V11))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.PSetFieldApp', V9, V14}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPField'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkIField', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core.PiInfo':'un--traverse'('erased', 'erased', fun (V12) -> ('un--toPTerm'(V0, V1, ('un--startPrec'()), V12)) end, V5))(V8))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkField', V3, <<""/utf8>>, V4, V15, V6, V11}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPDecl'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V10 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> ('un--toPFnOpt'(V0, V1, V9)) end, V6, []))(V8))), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> begin (V13 = (('un--toPTypeDecl'(V0, V1, V7))(V8))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PClaim', V3, V4, V5, V12, V15}}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E9, E10, E11} -> (fun (V16, V17, V18) -> fun (V19) -> begin (V20 = (('un--toPData'(V0, V1, V18))(V19))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PData', V16, <<""/utf8>>, V17, V22}}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); {'Idris.TTImp.TTImp.IDef', E14, E15, E16} -> (fun (V23, V24, V25) -> fun (V26) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V27) -> ('un--toPClause'(V0, V1, V27)) end, V25, []))(V26))), case V28 of {'Idris.Prelude.Types.Left', E17} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PDef', V23, V30}}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E14, E15, E16)); {'Idris.TTImp.TTImp.IParameters', E19, E20, E21} -> (fun (V31, V32, V33) -> fun (V34) -> begin (V36 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V35) -> ('un--toPDecl'(V0, V1, V35)) end, V33, []))(V34))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> begin (V44 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V39) -> fun (V40) -> begin (V41 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V39))))(V40))), case V41 of {'Idris.Prelude.Types.Left', E24} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V39)), V43}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V32, []))(V34))), case V44 of {'Idris.Prelude.Types.Left', E26} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PParameters', V31, V46, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V47) -> V47 end, V38))}}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19, E20, E21)); {'Idris.TTImp.TTImp.IRecord', E28, E29, E30, E31} -> (fun (V48, V49, V50, V51) -> fun (V52) -> begin (V53 = (('un--toPRecord'(V0, V1, V51))(V52))), case V53 of {'Idris.Prelude.Types.Left', E32} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V55) -> case V55 of {'Idris.Builtin.MkPair', E34, E35} -> (fun (V56, V57) -> case V57 of {'Idris.Builtin.MkPair', E36, E37} -> (fun (V58, V59) -> case V59 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V60, V61) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRecord', V48, <<""/utf8>>, V50, V56, V58, V60, V61}}} end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29, E30, E31)); {'Idris.TTImp.TTImp.INamespace', E40, E41, E42} -> (fun (V62, V63, V64) -> fun (V65) -> begin (V67 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V66) -> ('un--toPDecl'(V0, V1, V66)) end, V64, []))(V65))), case V67 of {'Idris.Prelude.Types.Left', E43} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PNamespace', V62, V63, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V70) -> V70 end, V69))}}} end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E40, E41, E42)); {'Idris.TTImp.TTImp.ITransform', E45, E46, E47, E48} -> (fun (V71, V72, V73, V74) -> fun (V75) -> begin (V76 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V73))(V75))), case V76 of {'Idris.Prelude.Types.Left', E49} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V78) -> begin (V79 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V74))(V75))), case V79 of {'Idris.Prelude.Types.Left', E51} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V81) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PTransform', V71, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V72)), V78, V81}}} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E45, E46, E47, E48)); {'Idris.TTImp.TTImp.IRunElabDecl', E53, E54} -> (fun (V82, V83) -> fun (V84) -> begin (V85 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V83))(V84))), case V85 of {'Idris.Prelude.Types.Left', E55} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', {'Idris.Idris.Syntax.PRunElabDecl', V82, V87}}} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E53, E54)); {'Idris.TTImp.TTImp.IPragma', E57, E58} -> (fun (V88, V89) -> fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E57, E58)); {'Idris.TTImp.TTImp.ILog', E59} -> (fun (V91) -> fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPData'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> fun (V8) -> begin (V9 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V8))), case V9 of {'Idris.Prelude.Types.Left', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V11) -> begin (V13 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V12) -> ('un--toPTypeDecl'(V0, V1, V12)) end, V7, []))(V8))), case V13 of {'Idris.Prelude.Types.Left', E7} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPData', V3, V4, V11, V6, V15}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E9, E10, E11} -> (fun (V16, V17, V18) -> fun (V19) -> begin (V20 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V18))(V19))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPLater', V16, V17, V22}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPClause'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.PatClause', E0, E1, E2} -> (fun (V3, V4, V5) -> fun (V6) -> begin (V7 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V4))(V6))), case V7 of {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V9) -> begin (V10 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V5))(V6))), case V10 of {'Idris.Prelude.Types.Left', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkPatClause', V3, V9, V12, []}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.WithClause', E7, E8, E9, E10, E11, E12} -> (fun (V13, V14, V15, V16, V17, V18) -> fun (V19) -> begin (V20 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V14))(V19))), case V20 of {'Idris.Prelude.Types.Left', E13} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V22) -> begin (V23 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V15))(V19))), case V23 of {'Idris.Prelude.Types.Left', E15} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V25) -> begin (V27 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V26) -> ('un--toPClause'(V0, V1, V26)) end, V18, []))(V19))), case V27 of {'Idris.Prelude.Types.Left', E17} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkWithClause', V13, V22, V25, V16, V17, V29}} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7, E8, E9, E10, E11, E12)); {'Idris.TTImp.TTImp.ImpossibleClause', E19, E20} -> (fun (V30, V31) -> fun (V32) -> begin (V33 = (('un--toPTerm'(V0, V1, ('un--startPrec'()), V31))(V32))), case V33 of {'Idris.Prelude.Types.Left', E21} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.Syntax.MkImpossible', V30, V35}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toCleanPTerm'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--toPTerm'(V0, V1, V2, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('un--cleanPTerm'(V0, V7, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sugarName'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(implicit) "/utf8>>, V1)) end(E0, E1)); {'Idris.Core.Name.PV', E2, E3} -> (fun (V3, V4) -> ('un--sugarName'(V3)) end(E2, E3)); {'Idris.Core.Name.DN', E4, E5} -> (fun (V5, V6) -> V5 end(E4, E5)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)) end.
'un--sugarAppM'(V0) -> case V0 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V1, V2, V3) -> case V2 of {'Idris.Idris.Syntax.PApp', E3, E4, E5} -> (fun (V4, V5, V6) -> case V5 of {'Idris.Idris.Syntax.PRef', E6, E7} -> (fun (V7, V8) -> case V8 of {'Idris.Core.Name.NS', E8, E9} -> (fun (V9, V10) -> ('case--sugarAppM-3458'(V4, V7, V10, V9, V6, V3, V1, ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), V9)))) end(E8, E9)); _ -> ('case--sugarAppM-3759'(V0, ('un--extractNat'(0, V0)))) end end(E6, E7)); _ -> ('case--sugarAppM-3759'(V0, ('un--extractNat'(0, V0)))) end end(E3, E4, E5)); _ -> ('case--sugarAppM-3759'(V0, ('un--extractNat'(0, V0)))) end end(E0, E1, E2)); _ -> ('case--sugarAppM-3759'(V0, ('un--extractNat'(0, V0)))) end.
'un--sugarApp'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V0 end, ('un--sugarAppM'(V0)))).
'un--startPrec'() -> 0.
'un--showImplicits'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V5 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showFullEnv'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V6 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resugarNoPatvars'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoPatvars'(V0, V1, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--resugar'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.TTImp.Unelab':'un--unelab'(V0, V1, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('un--toCleanPTerm'(V1, V2, ('un--startPrec'()), V8, V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--pterm'(V0, V1, V2, V3) -> ('un--toCleanPTerm'(V0, V1, ('un--startPrec'()), V2, V3)).
'un--mkOp'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PApp', E0, E1, E2} -> (fun (V2, V3, V4) -> case V3 of {'Idris.Idris.Syntax.PApp', E3, E4, E5} -> (fun (V5, V6, V7) -> case V6 of {'Idris.Idris.Syntax.PRef', E6, E7} -> (fun (V8, V9) -> fun (V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E8} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V14) -> begin (V15 = {'Idris.Idris.Syntax.PApp', V2, {'Idris.Idris.Syntax.PApp', V5, {'Idris.Idris.Syntax.PRef', V8, V9}, V7}, V4}), (('case--mkOp-3156'(V5, V8, V9, V7, V4, V2, V15, V0, V14, ('Idris.Idris2.Libraries.Data.StringMap':'un--lookup'('erased', ('Idris.Idris2.Core.Name':'un--nameRoot'(V9)), case V14 of {'Idris.Idris.Syntax.MkSyntax', E10, E11, E12, E13, E14, E15, E16, E17, E18} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24) -> V16 end(E10, E11, E12, E13, E14, E15, E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V10)) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6, E7)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', V1} end end end(E3, E4, E5)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', V1} end end end(E0, E1, E2)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', V1} end end.
'un--mkApp'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', V2} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V11 = ('un--sugarApp'({'Idris.Idris.Syntax.PApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V11, V6)) end end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V13 = ('un--sugarApp'({'Idris.Idris.Syntax.PAutoApp', V7, V2, V10}))), ('un--mkApp'(V0, V1, V13, V6)) end end()); {'Idris.Prelude.Types.Just', E7} -> (fun (V14) -> fun (V15) -> begin (V16 = ('un--showImplicits'(V0, V15))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> case V18 of 0 -> begin (V19 = {'Idris.Idris.Syntax.PNamedApp', V7, V2, V14, V10}), (('un--mkApp'(V0, V1, V19, V6))(V15)) end; 1 -> (('un--mkApp'(V0, V1, V2, V6))(V15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fullNamespace'(V0, V1) -> begin (V2 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', case V4 of {'Idris.Core.Options.MkPPOpts', E2, E3, E4} -> (fun (V5, V6, V7) -> V7 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--extractNat'(V0, V1) -> case V1 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V2, V3) -> case V3 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V9, V10)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V15, V16)) end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V19, V20)) end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V22)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V31, V32)) end end end end}, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V35, V36)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V6, <<"Z"/utf8>>)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V39, V40)) end end end end, fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V42)) end end, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V45, V46)) end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V49, V50)) end end end end, fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V52)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V55, V56)) end end end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V58)) end end, fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V61, V62)) end end end end}, fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V65, V66)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V4, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V0)) end)) end)) end(E4)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); {'Idris.Idris.Syntax.PApp', E5, E6, E7} -> (fun (V67, V68, V69) -> case V68 of {'Idris.Idris.Syntax.PRef', E8, E9} -> (fun (V70, V71) -> case V71 of {'Idris.Core.Name.NS', E10, E11} -> (fun (V72, V73) -> case V73 of {'Idris.Core.Name.UN', E12} -> (fun (V74) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V77, V78)) end end end end, fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V80)) end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V83, V84)) end end end end}, fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V87, V88)) end end end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V90)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V93, V94)) end end end end, fun (V95) -> fun (V96) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V96)) end end, fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V99, V100)) end end end end}, fun (V101) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V103, V104)) end end end}, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V74, <<"S"/utf8>>)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V107, V108)) end end end end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V110)) end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V113, V114)) end end end end}, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V117, V118)) end end end end, fun (V119) -> fun (V120) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V120)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V123, V124)) end end end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V126)) end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V129, V130)) end end end end}, fun (V131) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V132) -> fun (V133) -> fun (V134) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V133, V134)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V72, ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()))), fun () -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V72, ('Idris.Idris2.Core.Name.Namespace':'un--preludeNS'()))) end)))), fun () -> ('un--extractNat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V0)), V69)) end)) end)) end(E12)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E10, E11)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E8, E9)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E5, E6, E7)); {'Idris.Idris.Syntax.PPrimVal', E13, E14} -> (fun (V135, V136) -> case V136 of {'Idris.Core.TT.BI', E15} -> (fun (V137) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V137)))))) end(E15)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E13, E14)); {'Idris.Idris.Syntax.PBracketed', E16, E17} -> (fun (V138, V139) -> ('un--extractNat'(V0, V139)) end(E16, E17)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'un--cleanPTerm'(V0, V1, V2) -> begin (V3 = ('un--fullNamespace'(V0, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Right', V1}; 1 -> (('Idris.Idris2.Idris.Syntax':'un--mapPTermM'(fun (V6) -> ('nested--14044-5650--in--un--cleanNode'(V1, V0, V6)) end, V1))(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bracket'(V0, V1, V2, V3, V4) -> begin (V5 = (('un--mkOp'(V0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('case--bracket-3282'(V3, V2, V1, V0, V7, ('Idris.Idris2.Prelude.Types':'dn--un-->_Ord_Nat'(V1, V2))))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--argPrec'() -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1000)).
'un--appPrec'() -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(999)).
'un--addBracket'(V0, V1) -> ('case--addBracket-3258'(V1, V0, ('nested--11328-3208--in--un--needed'(V1, V0, V1)))).
