-module('Idris.Idris2.TTImp.Elab.Local').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in checkCaseLocal-2127'/22,
  'case--case block in checkCaseLocal-2037'/20,
  'case--case block in checkCaseLocal-1845'/19,
  'case--checkCaseLocal-1807'/17,
  'case--case block in getLocalTerm-1717'/11,
  'case--getLocalTerm-1679'/8,
  'case--localHelper-1584'/18,
  'case--localHelper-1532'/22,
  'case--localHelper-1467'/26,
  'case--localHelper-1394'/29,
  'case--localHelper-1174'/16,
  'case--localHelper-1107'/14,
  'case--localHelper,newName-973'/13,
  'case--localHelper,applyEnv-927'/13,
  'case--localHelper,dropLinear-775'/16,
  'nested--11207-747--in--un--updateTyName'/12,
  'nested--11207-749--in--un--updateName'/12,
  'nested--11207-748--in--un--updateDataName'/12,
  'nested--11207-750--in--un--setPublic'/11,
  'nested--11207-746--in--un--newName'/12,
  'nested--11207-744--in--un--dropLinear'/12,
  'nested--11207-745--in--un--applyEnv'/13,
  'un--localHelper'/11,
  'un--getLocalTerm'/6,
  'un--checkLocal'/14,
  'un--checkCaseLocal'/16
]).
'case--case block in case block in checkCaseLocal-2127'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, {'Idris.Builtin.MkPair', V20, fun (V22) -> fun (V23) -> V19 end end}}} | V8].
'case--case block in checkCaseLocal-2037'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> fun (V22) -> begin (V26 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updating case local "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V23) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'('erased', V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'('erased', V24, V25)) end end}, V21)))))))) end))(V22))), case V26 of {'Idris.Prelude.Types.Left', E2} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V28) -> begin (V29 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V14, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"To"/utf8>> end, V7, V20))(V22))), case V29 of {'Idris.Prelude.Types.Left', E4} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V31) -> begin (V34 = [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, {'Idris.Builtin.MkPair', V21, fun (V32) -> fun (V33) -> V20 end end}}} | V8]), (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V14, V13, V12, V11, V10, V9, V34, V7, V2, V1))(V22)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkCaseLocal-1845'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V19, V20, V21, V22, V23) -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Func'}, V4} end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V24, V25, V26) -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.DataCon', V24, V25}, V4} end(E5, E6, E7)); {'Idris.Core.Context.TCon', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.TyCon', V27, V28}, V4} end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> {'Idris.Core.TT.Ref', V6, {'Idris.Core.TT.Func'}, V4} end.
'case--checkCaseLocal-1807'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> begin (V40 = begin (V18 = {'Idris.Prelude.Types.Just', V17}), ('case--case block in checkCaseLocal-1845'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V17, V18, case V17 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V36 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), fun (V41) -> begin (V42 = (('un--getLocalTerm'(V0, V14, V6, V7, V40, V3))(V41))), case V42 of {'Idris.Prelude.Types.Left', E22} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V44) -> case V44 of {'Idris.Builtin.MkPair', E24, E25} -> (fun (V45, V46) -> begin (V50 = (('Idris.Idris2.Core.Context.Log':'un--log'(V14, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updating case local "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'('erased', V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'('erased', V48, V49)) end end}, V46)))))))) end))(V41))), case V50 of {'Idris.Prelude.Types.Left', E26} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V52) -> begin (V53 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V14, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"To"/utf8>> end, V7, V45))(V41))), case V53 of {'Idris.Prelude.Types.Left', E28} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V55) -> begin (V58 = [{'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V4}, {'Idris.Builtin.MkPair', V46, fun (V56) -> fun (V57) -> V45 end end}}} | V8]), (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V14, V13, V12, V11, V10, V9, V58, V7, V2, V1))(V41)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V2, V1)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getLocalTerm-1717'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, [V7 | V12]}} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getLocalTerm-1679'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Core.Env.MkIsDefined', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--getLocalTerm'(V0, V6, V5, V4, {'Idris.Core.TT.App', V5, V3, {'Idris.Core.TT.Local', V5, {'Idris.Prelude.Types.Nothing'}, V9}}, V2))(V11))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V15, V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, [V9 | V16]}} end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V17) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Case Local failed"/utf8>>}, V17)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--localHelper-1584'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V17, V5)).
'case--localHelper-1532'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V20 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Core.UnifyState.MkUState', V22, V23, V24, V25, V26, V27, V28, V29, [], V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--localHelper-1467'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> {'Idris.Core.UnifyState.MkUState', V26, V27, V28, V29, V30, V31, V32, V33, V21, V35} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--localHelper-1394'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> case V28 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> {'Idris.Core.Context.MkDefs', V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V23, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--localHelper-1174'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> ('nested--11207-750--in--un--setPublic'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V16)) end, V3)); 1 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--localHelper-1107'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Prelude.Types.Just', E0} -> (fun (V14) -> case V14 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V24 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Public'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--localHelper,newName-973'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V14, V15) -> case V14 of {'Idris.Prelude.Types.Just', E3} -> (fun (V16) -> V16 end(E3)); _ -> V10 end end(E1, E2)); _ -> V10 end end(E0)); _ -> V10 end.
'case--localHelper,applyEnv-927'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Core.UnifyState.MkUState', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> {'Idris.Core.UnifyState.MkUState', V13, V14, V15, V16, V17, V18, ((V19 + 1) rem 9223372036854775808), V20, V21, V22} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--localHelper,dropLinear-775'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of 0 -> {'Idris.Core.Env.::', ('Idris.Idris2.Core.TT':'un--setMultiplicity'('erased', V13, ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V18, V19)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})))), ('nested--11207-744--in--un--dropLinear'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', V12))}; 1 -> {'Idris.Core.Env.::', V13, ('nested--11207-744--in--un--dropLinear'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', V12))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11207-747--in--un--updateTyName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.MkImpTy', V12, V13, ('nested--11207-746--in--un--newName'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V14)), V15} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11207-749--in--un--updateName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V12, V13, V14, V15, V16) -> {'Idris.TTImp.TTImp.IClaim', V12, V13, V14, V15, ('nested--11207-747--in--un--updateTyName'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V16))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IDef', E5, E6, E7} -> (fun (V17, V18, V19) -> {'Idris.TTImp.TTImp.IDef', V17, ('nested--11207-746--in--un--newName'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V18)), V19} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IData', E8, E9, E10} -> (fun (V20, V21, V22) -> {'Idris.TTImp.TTImp.IData', V20, V21, ('nested--11207-748--in--un--updateDataName'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V22))} end(E8, E9, E10)); _ -> V11 end.
'nested--11207-748--in--un--updateDataName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.TTImp.TTImp.MkImpData', E0, E1, E2, E3, E4} -> (fun (V12, V13, V14, V15, V16) -> {'Idris.TTImp.TTImp.MkImpData', V12, ('nested--11207-746--in--un--newName'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V13)), V14, V15, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> ('nested--11207-747--in--un--updateTyName'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V17)) end, V16))} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.MkImpLater', E5, E6, E7} -> (fun (V18, V19, V20) -> {'Idris.TTImp.TTImp.MkImpLater', V18, ('nested--11207-746--in--un--newName'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V19)), V20} end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11207-750--in--un--setPublic'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.TTImp.IClaim', E0, E1, E2, E3, E4} -> (fun (V11, V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.IClaim', V11, V12, {'Idris.Core.TT.Public'}, V14, V15} end(E0, E1, E2, E3, E4)); {'Idris.TTImp.TTImp.IData', E5, E6, E7} -> (fun (V16, V17, V18) -> {'Idris.TTImp.TTImp.IData', V16, {'Idris.Core.TT.Public'}, V18} end(E5, E6, E7)); {'Idris.TTImp.TTImp.IRecord', E8, E9, E10, E11} -> (fun (V19, V20, V21, V22) -> {'Idris.TTImp.TTImp.IRecord', V19, V20, {'Idris.Core.TT.Public'}, V22} end(E8, E9, E10, E11)); {'Idris.TTImp.TTImp.IParameters', E12, E13, E14} -> (fun (V23, V24, V25) -> {'Idris.TTImp.TTImp.IParameters', V23, V24, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V26) -> ('nested--11207-750--in--un--setPublic'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V26)) end, V25))} end(E12, E13, E14)); {'Idris.TTImp.TTImp.INamespace', E15, E16, E17} -> (fun (V27, V28, V29) -> {'Idris.TTImp.TTImp.INamespace', V27, V28, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V30) -> ('nested--11207-750--in--un--setPublic'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V30)) end, V29))} end(E15, E16, E17)); _ -> V10 end.
'nested--11207-746--in--un--newName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> ('case--localHelper,newName-973'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, V11, V10, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V12, V13)) end end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V14, V15)) end end}, V11, V10)))).
'nested--11207-744--in--un--dropLinear'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Core.Env.Nil'} -> (fun () -> {'Idris.Core.Env.Nil'} end()); {'Idris.Core.Env.::', E0, E1} -> (fun (V12, V13) -> ('case--localHelper,dropLinear-775'('erased', V1, V2, V3, V4, V5, V6, V7, V8, V9, 'erased', 'erased', V13, V12, 'erased', ('Idris.Idris2.Algebra.Semiring':'un--isLinear'('erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V14, V15)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V16, V17)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V18) -> fun (V19) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V20, V21)) end end}}, ('Idris.Idris2.Core.TT':'un--multiplicity'('erased', V12)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11207-745--in--un--applyEnv'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V7))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> begin (V28 = begin (V27 = ('erlang':'put'(V7, case V16 of {'Idris.Core.UnifyState.MkUState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26) -> {'Idris.Core.UnifyState.MkUState', V17, V18, V19, V20, V21, V22, ((V23 + 1) rem 9223372036854775808), V24, V25, V26} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E12} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V30) -> begin (V41 = {'Idris.Core.Name.Nested', {'Idris.Builtin.MkPair', V10, case V16 of {'Idris.Core.UnifyState.MkUState', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23} -> (fun (V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V37 end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V11}), begin (V42 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V9, V41))(V12))), case V42 of {'Idris.Prelude.Types.Left', E24} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V44) -> begin (V45 = (('Idris.Idris2.Core.Context':'un--addName'(V9, V44))(V12))), case V45 of {'Idris.Prelude.Types.Left', E26} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V11, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V44}, {'Idris.Builtin.MkPair', ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Core.Env':'un--allVars'(V1, V4)))), fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.UnifyState':'un--applyToFull'(V1, V48, {'Idris.Core.TT.Ref', V48, V49, {'Idris.Core.Name.Resolved', V47}}, V4)) end end}}}} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--localHelper'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> begin (V12 = begin (V11 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V28 = case V14 of {'Idris.TTImp.Elab.Check.MkEState', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27) -> V16 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V30 = begin (V29 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V32) -> begin (V73 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'({'Idris.Core.Name.Resolved', case V14 of {'Idris.TTImp.Elab.Check.MkEState', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V34 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, case V32 of {'Idris.Core.Context.MkDefs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V46 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V73 of {'Idris.Prelude.Types.Left', E57} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V75) -> begin (V98 = case V75 of {'Idris.Prelude.Types.Just', E59} -> (fun (V76) -> case V76 of {'Idris.Core.Context.MkGlobalDef', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97) -> V86 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E59)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Core.TT.Public'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V99 = ('case--localHelper-1174'('erased', V1, V9, V8, V7, V6, V5, V4, V3, V2, V14, V28, V32, V75, V98, ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(V98, {'Idris.Core.TT.Public'}))))), begin (V100 = ('Idris.Idris2.TTImp.TTImp':'un--definedInBlock'(('Idris.Idris2.Core.Name.Namespace':'un--emptyNS'()), V99))), begin (V107 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V101) -> fun (V102) -> ('nested--11207-745--in--un--applyEnv'('erased', V1, V9, V8, V7, V6, V5, V4, V3, V2, V28, V101, V102)) end end, ('Idris.Idris2.Data.List':'un--nub'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V103, V104)) end end, fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V105, V106)) end end}, V100)), []))(V10))), case V107 of {'Idris.Prelude.Types.Left', E81} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V109) -> begin (V110 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V109, V6))), begin (V111 = ('nested--11207-744--in--un--dropLinear'('erased', V1, V9, V8, V7, V6, V5, V4, V3, V2, 'erased', V7))), begin (V113 = begin (V112 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V112} end), case V113 of {'Idris.Prelude.Types.Left', E83} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V115) -> begin (V126 = case V115 of {'Idris.Core.UnifyState.MkUState', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94} -> (fun (V116, V117, V118, V119, V120, V121, V122, V123, V124, V125) -> V124 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V138 = begin (V137 = ('erlang':'put'(V4, case V115 of {'Idris.Core.UnifyState.MkUState', E95, E96, E97, E98, E99, E100, E101, E102, E103, E104} -> (fun (V127, V128, V129, V130, V131, V132, V133, V134, V135, V136) -> {'Idris.Core.UnifyState.MkUState', V127, V128, V129, V130, V131, V132, V133, V134, [], V136} end(E95, E96, E97, E98, E99, E100, E101, E102, E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V137} end), case V138 of {'Idris.Prelude.Types.Left', E105} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V140) -> begin (V142 = begin (V141 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V141} end), case V142 of {'Idris.Prelude.Types.Left', E107} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V144) -> begin (V172 = case V144 of {'Idris.Core.Context.MkDefs', E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135} -> (fun (V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171) -> V155 end(E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V174 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V173) -> ('nested--11207-749--in--un--updateName'('erased', V1, V9, V8, V7, V6, V5, V4, V3, V2, V110, V173)) end, V99))), begin (V178 = (('Idris.Idris2.Core.Context.Log':'un--log'(V2, <<"elab.def.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V175) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_ImpDecl'(V175)) end, fun (V176) -> fun (V177) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_ImpDecl'(V176, V177)) end end}, V174)) end))(V10))), case V178 of {'Idris.Prelude.Types.Left', E136} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V180) -> begin (V182 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V181) -> ('Idris.Idris2.TTImp.Elab.Check':'un--processDecl'(V1, V2, V3, V4, [], V110, V111, V181)) end, V174))(V10))), case V182 of {'Idris.Prelude.Types.Left', E138} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V184) -> begin (V186 = begin (V185 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V185} end), case V186 of {'Idris.Prelude.Types.Left', E140} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V188) -> begin (V200 = begin (V199 = ('erlang':'put'(V4, case V188 of {'Idris.Core.UnifyState.MkUState', E142, E143, E144, E145, E146, E147, E148, E149, E150, E151} -> (fun (V189, V190, V191, V192, V193, V194, V195, V196, V197, V198) -> {'Idris.Core.UnifyState.MkUState', V189, V190, V191, V192, V193, V194, V195, V196, V126, V198} end(E142, E143, E144, E145, E146, E147, E148, E149, E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V199} end), case V200 of {'Idris.Prelude.Types.Left', E152} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E152)); {'Idris.Prelude.Types.Right', E153} -> (fun (V202) -> begin (V204 = begin (V203 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V203} end), case V204 of {'Idris.Prelude.Types.Left', E154} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E154)); {'Idris.Prelude.Types.Right', E155} -> (fun (V206) -> begin (V207 = ((V9(V110))(V10))), case V207 of {'Idris.Prelude.Types.Left', E156} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V209) -> begin (V211 = begin (V210 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V210} end), case V211 of {'Idris.Prelude.Types.Left', E158} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V213) -> begin (V242 = begin (V241 = ('erlang':'put'(V2, case V213 of {'Idris.Core.Context.MkDefs', E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186} -> (fun (V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240) -> {'Idris.Core.Context.MkDefs', V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V172, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240} end(E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V241} end), case V242 of {'Idris.Prelude.Types.Left', E187} -> (fun (V243) -> {'Idris.Prelude.Types.Left', V243} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V244) -> {'Idris.Prelude.Types.Right', V209} end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getLocalTerm'(V0, V1, V2, V3, V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V4, []}} end; [E0 | E1] -> (fun (V7, V8) -> ('case--getLocalTerm-1679'(V0, V7, V8, V4, V3, V2, V1, ('Idris.Idris2.Core.Env':'un--defined'(V0, V7, V3)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> ('un--localHelper'('erased', V0, V1, V2, V3, V4, V7, V8, V10, fun (V14) -> ('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V14, V8, V11, V12)) end, V13)).
'un--checkCaseLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V47 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V11, case V19 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46) -> V20 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V15))), case V47 of {'Idris.Prelude.Types.Left', E29} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V49) -> case V49 of {'Idris.Prelude.Types.Just', E31} -> (fun (V50) -> begin (V73 = begin (V51 = {'Idris.Prelude.Types.Just', V50}), ('case--case block in checkCaseLocal-1845'(V0, V14, V13, V12, V11, V10, V9, V8, V7, V6, V5, V4, V3, V2, V1, V19, V50, V51, case V50 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72) -> V69 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end), begin (V74 = (('un--getLocalTerm'(V0, V1, V9, V8, V73, V12))(V15))), case V74 of {'Idris.Prelude.Types.Left', E53} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V76) -> case V76 of {'Idris.Builtin.MkPair', E55, E56} -> (fun (V77, V78) -> begin (V82 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updating case local "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V79) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Var $ns)'('erased', V79)) end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Var $ns)'('erased', V80, V81)) end end}, V78)))))))) end))(V15))), case V82 of {'Idris.Prelude.Types.Left', E57} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V84) -> begin (V85 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'(V0, V1, <<"elab.local"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> <<"To"/utf8>> end, V8, V77))(V15))), case V85 of {'Idris.Prelude.Types.Left', E59} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V87) -> begin (V90 = [{'Idris.Builtin.MkPair', V10, {'Idris.Builtin.MkPair', {'Idris.Prelude.Types.Just', V11}, {'Idris.Builtin.MkPair', V78, fun (V88) -> fun (V89) -> V77 end end}}} | V7]), (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V90, V8, V13, V14))(V15)) end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> (('Idris.Idris2.TTImp.Elab.Check':'un--check'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V13, V14))(V15)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
