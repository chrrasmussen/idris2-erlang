-module('Idris.Idris2.Compiler.ES.ImperativeAst').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--replaceExpS-4585'/6,
  'case--case block in replaceExp-4465'/2,
  'case--replaceExp-4447'/3,
  'dn--un--show_Show_ImperativeStatement'/1,
  'dn--un--show_Show_ImperativeExp'/1,
  'dn--un--showPrec_Show_ImperativeStatement'/2,
  'dn--un--showPrec_Show_ImperativeExp'/2,
  'dn--un--neutral_Monoid_ImperativeStatement'/0,
  'dn--un--__Impl_Show_ImperativeStatement'/0,
  'dn--un--__Impl_Show_ImperativeExp'/0,
  'dn--un--__Impl_Semigroup_ImperativeStatement'/2,
  'dn--un--__Impl_Monoid_ImperativeStatement'/0,
  'dn--un--<+>_Semigroup_ImperativeStatement'/2,
  'un--replaceNamesExpS'/2,
  'un--replaceNamesExp'/2,
  'un--replaceExpS'/2,
  'un--replaceExp'/2,
  'un--rep'/2
]).
'case--replaceExpS-4585'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> {'Idris.Builtin.MkPair', ('un--replaceExp'(V3, V6)), ('un--replaceExpS'(V3, V7))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in replaceExp-4465'(V0, V1) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E0} -> (fun (V2) -> V0 end(E0)); {'Idris.Compiler.ES.ImperativeAst.IELambda', E1, E2} -> (fun (V3, V4) -> {'Idris.Compiler.ES.ImperativeAst.IELambda', V3, ('un--replaceExpS'(V1, V4))} end(E1, E2)); {'Idris.Compiler.ES.ImperativeAst.IEApp', E3, E4} -> (fun (V5, V6) -> {'Idris.Compiler.ES.ImperativeAst.IEApp', ('un--replaceExp'(V1, V5)), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V9, V10)) end end end end, fun (V11) -> ('un--replaceExp'(V1, V11)) end, V6))} end(E3, E4)); {'Idris.Compiler.ES.ImperativeAst.IEConstant', E5} -> (fun (V12) -> V0 end(E5)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFn', E6, E7} -> (fun (V13, V14) -> {'Idris.Compiler.ES.ImperativeAst.IEPrimFn', V13, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V17, V18)) end end end end, fun (V19) -> ('un--replaceExp'(V1, V19)) end, V14))} end(E6, E7)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFnExt', E8, E9} -> (fun (V20, V21) -> {'Idris.Compiler.ES.ImperativeAst.IEPrimFnExt', V20, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V24, V25)) end end end end, fun (V26) -> ('un--replaceExp'(V1, V26)) end, V21))} end(E8, E9)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', E10} -> (fun (V27) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', ('un--replaceExp'(V1, V27))} end(E10)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', E11} -> (fun (V28) -> V0 end(E11)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', E12, E13} -> (fun (V29, V30) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', V29, ('un--replaceExp'(V1, V30))} end(E12, E13)); {'Idris.Compiler.ES.ImperativeAst.IEConstructor', E14, E15} -> (fun (V31, V32) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructor', V31, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V35, V36)) end end end end, fun (V37) -> ('un--replaceExp'(V1, V37)) end, V32))} end(E14, E15)); {'Idris.Compiler.ES.ImperativeAst.IEDelay', E16} -> (fun (V38) -> {'Idris.Compiler.ES.ImperativeAst.IEDelay', ('un--replaceExp'(V1, V38))} end(E16)); {'Idris.Compiler.ES.ImperativeAst.IEForce', E17} -> (fun (V39) -> {'Idris.Compiler.ES.ImperativeAst.IEForce', ('un--replaceExp'(V1, V39))} end(E17)); {'Idris.Compiler.ES.ImperativeAst.IENull'} -> (fun () -> V0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--replaceExp-4447'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> V3 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V0 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E1} -> (fun (V4) -> V0 end(E1)); {'Idris.Compiler.ES.ImperativeAst.IELambda', E2, E3} -> (fun (V5, V6) -> {'Idris.Compiler.ES.ImperativeAst.IELambda', V5, ('un--replaceExpS'(V1, V6))} end(E2, E3)); {'Idris.Compiler.ES.ImperativeAst.IEApp', E4, E5} -> (fun (V7, V8) -> {'Idris.Compiler.ES.ImperativeAst.IEApp', ('un--replaceExp'(V1, V7)), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V11, V12)) end end end end, fun (V13) -> ('un--replaceExp'(V1, V13)) end, V8))} end(E4, E5)); {'Idris.Compiler.ES.ImperativeAst.IEConstant', E6} -> (fun (V14) -> V0 end(E6)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFn', E7, E8} -> (fun (V15, V16) -> {'Idris.Compiler.ES.ImperativeAst.IEPrimFn', V15, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V19, V20)) end end end end, fun (V21) -> ('un--replaceExp'(V1, V21)) end, V16))} end(E7, E8)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFnExt', E9, E10} -> (fun (V22, V23) -> {'Idris.Compiler.ES.ImperativeAst.IEPrimFnExt', V22, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V26, V27)) end end end end, fun (V28) -> ('un--replaceExp'(V1, V28)) end, V23))} end(E9, E10)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', E11} -> (fun (V29) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', ('un--replaceExp'(V1, V29))} end(E11)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', E12} -> (fun (V30) -> V0 end(E12)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', E13, E14} -> (fun (V31, V32) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', V31, ('un--replaceExp'(V1, V32))} end(E13, E14)); {'Idris.Compiler.ES.ImperativeAst.IEConstructor', E15, E16} -> (fun (V33, V34) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructor', V33, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V37, V38)) end end end end, fun (V39) -> ('un--replaceExp'(V1, V39)) end, V34))} end(E15, E16)); {'Idris.Compiler.ES.ImperativeAst.IEDelay', E17} -> (fun (V40) -> {'Idris.Compiler.ES.ImperativeAst.IEDelay', ('un--replaceExp'(V1, V40))} end(E17)); {'Idris.Compiler.ES.ImperativeAst.IEForce', E18} -> (fun (V41) -> {'Idris.Compiler.ES.ImperativeAst.IEForce', ('un--replaceExp'(V1, V41))} end(E18)); {'Idris.Compiler.ES.ImperativeAst.IENull'} -> (fun () -> V0 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ImperativeStatement'(V0) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.DoNothing'} -> (fun () -> <<"DoNothing"/utf8>> end()); {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeStatement'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<";"/utf8>>, ('dn--un--show_Show_ImperativeStatement'(V2)))))) end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.FunDecl', E2, E3, E4, E5} -> (fun (V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(FunDecl ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V8, V9)) end end}, V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeStatement'(V6)), <<")"/utf8>>)))))))))))))))))) end(E2, E3, E4, E5)); {'Idris.Compiler.ES.ImperativeAst.ForeignDecl', E6, E7, E8, E9, E10} -> (fun (V10, V11, V12, V13, V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(ForeignDecl "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V16, V17)) end end}, V12)), <<")"/utf8>>)))))))) end(E6, E7, E8, E9, E10)); {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', E11} -> (fun (V18) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(ReturnStatement "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V18)), <<")"/utf8>>)))) end(E11)); {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', E12, E13, E14} -> (fun (V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(SwitchStatement "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V19)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V23) -> ('dn--un--show_Show_ImperativeExp'(V23)) end, fun (V24) -> fun (V25) -> ('dn--un--showPrec_Show_ImperativeExp'(V24, V25)) end end}, {'Idris.Prelude.Show.MkShow', fun (V26) -> ('dn--un--show_Show_ImperativeStatement'(V26)) end, fun (V27) -> fun (V28) -> ('dn--un--showPrec_Show_ImperativeStatement'(V27, V28)) end end}}, V22)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V31) -> ('dn--un--show_Show_ImperativeExp'(V31)) end, fun (V32) -> fun (V33) -> ('dn--un--showPrec_Show_ImperativeExp'(V32, V33)) end end}, {'Idris.Prelude.Show.MkShow', fun (V34) -> ('dn--un--show_Show_ImperativeStatement'(V34)) end, fun (V35) -> fun (V36) -> ('dn--un--showPrec_Show_ImperativeStatement'(V35, V36)) end end}}, V29, V30)) end end}, V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V37) -> ('dn--un--show_Show_ImperativeStatement'(V37)) end, fun (V38) -> fun (V39) -> ('dn--un--showPrec_Show_ImperativeStatement'(V38, V39)) end end}, V21)), <<")"/utf8>>)))))))))))) end(E12, E13, E14)); {'Idris.Compiler.ES.ImperativeAst.LetDecl', E15, E16} -> (fun (V40, V41) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(LetDecl "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V40)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V42) -> ('dn--un--show_Show_ImperativeExp'(V42)) end, fun (V43) -> fun (V44) -> ('dn--un--showPrec_Show_ImperativeExp'(V43, V44)) end end}, V41)), <<")"/utf8>>)))))))) end(E15, E16)); {'Idris.Compiler.ES.ImperativeAst.ConstDecl', E17, E18} -> (fun (V45, V46) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(ConstDecl "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V45)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V46)), <<")"/utf8>>)))))))) end(E17, E18)); {'Idris.Compiler.ES.ImperativeAst.MutateStatement', E19, E20} -> (fun (V47, V48) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(MutateStatement "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V47)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V48)), <<")"/utf8>>)))))))) end(E19, E20)); {'Idris.Compiler.ES.ImperativeAst.ErrorStatement', E21} -> (fun (V49) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(ErrorStatement "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V49, <<")"/utf8>>)))) end(E21)); {'Idris.Compiler.ES.ImperativeAst.EvalExpStatement', E22} -> (fun (V50) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(EvalExpStatement "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V50)), <<")"/utf8>>)))) end(E22)); {'Idris.Compiler.ES.ImperativeAst.CommentStatement', E23} -> (fun (V51) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(CommentStatement "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V51)), <<")"/utf8>>)))) end(E23)); {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', E24} -> (fun (V52) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(ForEverLoop "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeStatement'(V52)), <<")"/utf8>>)))) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ImperativeExp'(V0) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEVar "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<")"/utf8>>)))) end(E0)); {'Idris.Compiler.ES.ImperativeAst.IELambda', E1, E2} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IELambda "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V6)) end end}, V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeStatement'(V3)), <<")"/utf8>>)))))))) end(E1, E2)); {'Idris.Compiler.ES.ImperativeAst.IEApp', E3, E4} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEApp "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V9) -> ('dn--un--show_Show_ImperativeExp'(V9)) end, fun (V10) -> fun (V11) -> ('dn--un--showPrec_Show_ImperativeExp'(V10, V11)) end end}, V8)), <<")"/utf8>>)))))))) end(E3, E4)); {'Idris.Compiler.ES.ImperativeAst.IEConstant', E5} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEConstant "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V12)), <<")"/utf8>>)))) end(E5)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFn', E6, E7} -> (fun (V13, V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEPrimFn "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Data.Vect':'dn--un--show_Show_((Vect $len) $elem)'({'Idris.Prelude.Show.MkShow', fun (V15) -> ('dn--un--show_Show_ImperativeExp'(V15)) end, fun (V16) -> fun (V17) -> ('dn--un--showPrec_Show_ImperativeExp'(V16, V17)) end end}, V14)), <<")"/utf8>>)))))))) end(E6, E7)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFnExt', E8, E9} -> (fun (V18, V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEPrimFnExt "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V20) -> ('dn--un--show_Show_ImperativeExp'(V20)) end, fun (V21) -> fun (V22) -> ('dn--un--showPrec_Show_ImperativeExp'(V21, V22)) end end}, V19)), <<")"/utf8>>)))))))) end(E8, E9)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', E10} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEConstructorHead "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V23)), <<")"/utf8>>)))) end(E10)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', E11} -> (fun (V24) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEConstructorTag "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V25) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V25)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V26, V27)) end end}, {'Idris.Prelude.Show.MkShow', fun (V28) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V28)) end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V29, V30)) end end}}, V24)), <<")"/utf8>>)))) end(E11)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', E12, E13} -> (fun (V31, V32) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEConstructorArg "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V31)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V32)), <<")"/utf8>>)))))))) end(E12, E13)); {'Idris.Compiler.ES.ImperativeAst.IEConstructor', E14, E15} -> (fun (V33, V34) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEConstructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_((Either $a) $b)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V35) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V36, V37)) end end}, {'Idris.Prelude.Show.MkShow', fun (V38) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V38)) end, fun (V39) -> fun (V40) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V39, V40)) end end}}, V33)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V41) -> ('dn--un--show_Show_ImperativeExp'(V41)) end, fun (V42) -> fun (V43) -> ('dn--un--showPrec_Show_ImperativeExp'(V42, V43)) end end}, V34)), <<")"/utf8>>)))))))) end(E14, E15)); {'Idris.Compiler.ES.ImperativeAst.IEDelay', E16} -> (fun (V44) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEDelay "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V44)), <<")"/utf8>>)))) end(E16)); {'Idris.Compiler.ES.ImperativeAst.IEForce', E17} -> (fun (V45) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(IEForce "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_ImperativeExp'(V45)), <<")"/utf8>>)))) end(E17)); {'Idris.Compiler.ES.ImperativeAst.IENull'} -> (fun () -> <<"IENull"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_ImperativeStatement'(V0, V1) -> ('dn--un--show_Show_ImperativeStatement'(V1)).
'dn--un--showPrec_Show_ImperativeExp'(V0, V1) -> ('dn--un--show_Show_ImperativeExp'(V1)).
'dn--un--neutral_Monoid_ImperativeStatement'() -> {'Idris.Compiler.ES.ImperativeAst.DoNothing'}.
'dn--un--__Impl_Show_ImperativeStatement'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ImperativeStatement'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ImperativeStatement'(V1, V2)) end end}.
'dn--un--__Impl_Show_ImperativeExp'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ImperativeExp'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ImperativeExp'(V1, V2)) end end}.
'dn--un--__Impl_Semigroup_ImperativeStatement'(V0, V1) -> ('dn--un--<+>_Semigroup_ImperativeStatement'(V0, V1)).
'dn--un--__Impl_Monoid_ImperativeStatement'() -> {'Idris.Prelude.Interfaces.MkMonoid', fun (V0) -> fun (V1) -> ('dn--un--<+>_Semigroup_ImperativeStatement'(V0, V1)) end end, ('dn--un--neutral_Monoid_ImperativeStatement'())}.
'dn--un--<+>_Semigroup_ImperativeStatement'(V0, V1) -> case V0 of {'Idris.Compiler.ES.ImperativeAst.DoNothing'} -> (fun () -> V1 end()); _ -> case V1 of {'Idris.Compiler.ES.ImperativeAst.DoNothing'} -> (fun () -> V0 end()); _ -> {'Idris.Compiler.ES.ImperativeAst.SeqStatement', V0, V1} end end.
'un--replaceNamesExpS'(V0, V1) -> ('un--replaceExpS'(fun (V2) -> ('un--rep'(V0, V2)) end, V1)).
'un--replaceNamesExp'(V0, V1) -> ('un--replaceExp'(fun (V2) -> ('un--rep'(V0, V2)) end, V1)).
'un--replaceExpS'(V0, V1) -> case V1 of {'Idris.Compiler.ES.ImperativeAst.DoNothing'} -> (fun () -> {'Idris.Compiler.ES.ImperativeAst.DoNothing'} end()); {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V2, V3) -> {'Idris.Compiler.ES.ImperativeAst.SeqStatement', ('un--replaceExpS'(V0, V2)), ('un--replaceExpS'(V0, V3))} end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.FunDecl', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> {'Idris.Compiler.ES.ImperativeAst.FunDecl', V4, V5, V6, ('un--replaceExpS'(V0, V7))} end(E2, E3, E4, E5)); {'Idris.Compiler.ES.ImperativeAst.ForeignDecl', E6, E7, E8, E9, E10} -> (fun (V8, V9, V10, V11, V12) -> V1 end(E6, E7, E8, E9, E10)); {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', E11} -> (fun (V13) -> {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', ('un--replaceExp'(V0, V13))} end(E11)); {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', E12, E13, E14} -> (fun (V14, V15, V16) -> begin (V17 = ('un--replaceExp'(V0, V14))), begin (V25 = ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V20, V21)) end end end end, fun (V22) -> case V22 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V23, V24) -> {'Idris.Builtin.MkPair', ('un--replaceExp'(V0, V23)), ('un--replaceExpS'(V0, V24))} end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V15))), begin (V31 = ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V28, V29)) end end end end, fun (V30) -> ('un--replaceExpS'(V0, V30)) end, V16))), {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', V17, V25, V31} end end end end(E12, E13, E14)); {'Idris.Compiler.ES.ImperativeAst.LetDecl', E17, E18} -> (fun (V32, V33) -> {'Idris.Compiler.ES.ImperativeAst.LetDecl', V32, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(V36, V37)) end end end end, fun (V38) -> ('un--replaceExp'(V0, V38)) end, V33))} end(E17, E18)); {'Idris.Compiler.ES.ImperativeAst.ConstDecl', E19, E20} -> (fun (V39, V40) -> {'Idris.Compiler.ES.ImperativeAst.ConstDecl', V39, ('un--replaceExp'(V0, V40))} end(E19, E20)); {'Idris.Compiler.ES.ImperativeAst.MutateStatement', E21, E22} -> (fun (V41, V42) -> {'Idris.Compiler.ES.ImperativeAst.MutateStatement', V41, ('un--replaceExp'(V0, V42))} end(E21, E22)); {'Idris.Compiler.ES.ImperativeAst.ErrorStatement', E23} -> (fun (V43) -> {'Idris.Compiler.ES.ImperativeAst.ErrorStatement', V43} end(E23)); {'Idris.Compiler.ES.ImperativeAst.EvalExpStatement', E24} -> (fun (V44) -> {'Idris.Compiler.ES.ImperativeAst.EvalExpStatement', ('un--replaceExp'(V0, V44))} end(E24)); {'Idris.Compiler.ES.ImperativeAst.CommentStatement', E25} -> (fun (V45) -> {'Idris.Compiler.ES.ImperativeAst.CommentStatement', V45} end(E25)); {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', E26} -> (fun (V46) -> {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', ('un--replaceExpS'(V0, V46))} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--replaceExp'(V0, V1) -> case (V0(V1)) of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> V2 end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V1 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E1} -> (fun (V3) -> V1 end(E1)); {'Idris.Compiler.ES.ImperativeAst.IELambda', E2, E3} -> (fun (V4, V5) -> {'Idris.Compiler.ES.ImperativeAst.IELambda', V4, ('un--replaceExpS'(V0, V5))} end(E2, E3)); {'Idris.Compiler.ES.ImperativeAst.IEApp', E4, E5} -> (fun (V6, V7) -> {'Idris.Compiler.ES.ImperativeAst.IEApp', ('un--replaceExp'(V0, V6)), ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V10, V11)) end end end end, fun (V12) -> ('un--replaceExp'(V0, V12)) end, V7))} end(E4, E5)); {'Idris.Compiler.ES.ImperativeAst.IEConstant', E6} -> (fun (V13) -> V1 end(E6)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFn', E7, E8} -> (fun (V14, V15) -> {'Idris.Compiler.ES.ImperativeAst.IEPrimFn', V14, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'(V18, V19)) end end end end, fun (V20) -> ('un--replaceExp'(V0, V20)) end, V15))} end(E7, E8)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFnExt', E9, E10} -> (fun (V21, V22) -> {'Idris.Compiler.ES.ImperativeAst.IEPrimFnExt', V21, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V25, V26)) end end end end, fun (V27) -> ('un--replaceExp'(V0, V27)) end, V22))} end(E9, E10)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', E11} -> (fun (V28) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', ('un--replaceExp'(V0, V28))} end(E11)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', E12} -> (fun (V29) -> V1 end(E12)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', E13, E14} -> (fun (V30, V31) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', V30, ('un--replaceExp'(V0, V31))} end(E13, E14)); {'Idris.Compiler.ES.ImperativeAst.IEConstructor', E15, E16} -> (fun (V32, V33) -> {'Idris.Compiler.ES.ImperativeAst.IEConstructor', V32, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(V36, V37)) end end end end, fun (V38) -> ('un--replaceExp'(V0, V38)) end, V33))} end(E15, E16)); {'Idris.Compiler.ES.ImperativeAst.IEDelay', E17} -> (fun (V39) -> {'Idris.Compiler.ES.ImperativeAst.IEDelay', ('un--replaceExp'(V0, V39))} end(E17)); {'Idris.Compiler.ES.ImperativeAst.IEForce', E18} -> (fun (V40) -> {'Idris.Compiler.ES.ImperativeAst.IEForce', ('un--replaceExp'(V0, V40))} end(E18)); {'Idris.Compiler.ES.ImperativeAst.IENull'} -> (fun () -> V1 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--rep'(V0, V1) -> case V1 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E0} -> (fun (V2) -> ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V5, V6)) end end}, V2, V0)) end(E0)); _ -> {'Idris.Prelude.Types.Nothing'} end.
