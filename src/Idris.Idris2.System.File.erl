-module('Idris.Idris2.System.File').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--4153-2182--in--un--getMs'/2,
  'nested--4153-2181--in--un--getM'/2,
  'dn--un--show_Show_FileError'/1,
  'dn--un--showPrec_Show_FileError'/2,
  'dn--un--__Impl_Show_FileError'/0,
  'un--writeFile'/3,
  'un--withFile'/5,
  'un--stdout'/0,
  'un--stdin'/0,
  'un--stderr'/0,
  'un--returnError'/1,
  'un--removeFile'/2,
  'un--readLinesOnto'/5,
  'un--readFilePage'/4,
  'un--readFile'/2,
  'un--prim__writeLine'/3,
  'un--prim__stdout'/0,
  'un--prim__stdin'/0,
  'un--prim__stderr'/0,
  'un--prim__seekLine'/2,
  'un--prim__removeFile'/2,
  'un--prim__readLine'/2,
  'un--prim__readChars'/3,
  'un--prim__readChar'/2,
  'un--prim__popen'/3,
  'un--prim__pclose'/2,
  'un--prim__open'/3,
  'un--prim__flush'/2,
  'un--prim__fileStatusTime'/2,
  'un--prim__fileSize'/2,
  'un--prim__fileModifiedTime'/2,
  'un--prim__fileErrno'/1,
  'un--prim__fileAccessTime'/2,
  'un--prim__fPoll'/2,
  'un--prim__error'/2,
  'un--prim__eof'/2,
  'un--prim__close'/2,
  'un--prim__chmod'/3,
  'un--popen'/3,
  'un--pclose'/2,
  'un--openFile'/3,
  'un--ok'/2,
  'un--modeStr'/1,
  'un--mkMode'/1,
  'un--firstExists'/2,
  'un--fileStatusTime'/2,
  'un--fileSize'/2,
  'un--fileModifiedTime'/2,
  'un--fileError'/2,
  'un--fileAccessTime'/2,
  'un--fflush'/2,
  'un--fSeekLine'/2,
  'un--fPutStrLn'/3,
  'un--fPutStr'/3,
  'un--fPoll'/2,
  'un--fGetLine'/2,
  'un--fGetChars'/3,
  'un--fGetChar'/2,
  'un--fEOF'/2,
  'un--exists'/2,
  'un--closeFile'/2,
  'un--chmodRaw'/3,
  'un--chmod'/3,
  'un--FilePtr'/0
]).
'nested--4153-2182--in--un--getMs'(V0, V1) -> ('Idris.Idris2.Prelude.Interfaces':'un--sum'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V13)) end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V25, V26, V27)) end end end end end}, {'Idris.Prelude.Num.MkNum', fun (V28) -> fun (V29) -> ((V28 + V29) rem 9223372036854775808) end end, fun (V30) -> fun (V31) -> ((V30 * V31) rem 9223372036854775808) end end, fun (V32) -> V32 end}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V33) -> ('nested--4153-2181--in--un--getM'(V0, V33)) end, V1)))).
'nested--4153-2181--in--un--getM'(V0, V1) -> case V1 of 0 -> 4; 1 -> 2; 2 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_FileError'(V0) -> case V0 of {'Idris.System.File.GenericFileError', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"File error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))) end(E0)); {'Idris.System.File.FileReadError'} -> (fun () -> <<"File Read Error"/utf8>> end()); {'Idris.System.File.FileWriteError'} -> (fun () -> <<"File Write Error"/utf8>> end()); {'Idris.System.File.FileNotFound'} -> (fun () -> <<"File Not Found"/utf8>> end()); {'Idris.System.File.PermissionDenied'} -> (fun () -> <<"Permission Denied"/utf8>> end()); {'Idris.System.File.FileExists'} -> (fun () -> <<"File Exists"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_FileError'(V0, V1) -> ('dn--un--show_Show_FileError'(V1)).
'dn--un--__Impl_Show_FileError'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_FileError'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_FileError'(V1, V2)) end end}.
'un--writeFile'(V0, V1, V2) -> ('un--withFile'(V0, V1, 1, fun (V3) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V4, V5) -> case V4 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V6, V7, V8) -> case V6 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V9, V10, V11) -> ((V10('erased'))(V3)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V12) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V13) -> fun (V14) -> ('un--fPutStr'(V0, V13, V14)) end end, V2, V12)) end)).
'un--withFile'(V0, V1, V2, V3, V4) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(('un--openFile'(V0, V1, V2))))(fun (V10) -> case V10 of {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E6, E7} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Interfaces.MkMonad', E8, E9, E10} -> (fun (V14, V15, V16) -> ((((V15('erased'))('erased'))((V4(V11))))(fun (V17) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E11, E12} -> (fun (V18, V19) -> V18 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--closeFile'(V0, V11)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E13, E14} -> (fun (V20, V21) -> case V20 of {'Idris.Prelude.Interfaces.MkMonad', E15, E16, E17} -> (fun (V22, V23, V24) -> case V22 of {'Idris.Prelude.Interfaces.MkApplicative', E18, E19, E20} -> (fun (V25, V26, V27) -> ((V26('erased'))(V17)) end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end)) end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Prelude.Types.Left', E21} -> (fun (V28) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E22, E23} -> (fun (V29, V30) -> case V29 of {'Idris.Prelude.Interfaces.MkMonad', E24, E25, E26} -> (fun (V31, V32, V33) -> case V31 of {'Idris.Prelude.Interfaces.MkApplicative', E27, E28, E29} -> (fun (V34, V35, V36) -> V34 end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V37) -> {'Idris.Prelude.Types.Left', V37} end, (V3(V28)))) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--stdout'() -> ('un--prim__stdout'()).
'un--stdin'() -> ('un--prim__stdin'()).
'un--stderr'() -> ('un--prim__stderr'()).
'un--returnError'(V0) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V55, V56) -> ((V56('erased'))(fun (V57) -> ('un--prim__fileErrno'(V57)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V6) -> case V6 of 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V7, V8) -> case V7 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V12, V13, V14) -> ((V13('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.FileReadError'}})) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E23, E24} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E25, E26, E27} -> (fun (V17, V18, V19) -> case V17 of {'Idris.Prelude.Interfaces.MkApplicative', E28, E29, E30} -> (fun (V20, V21, V22) -> ((V21('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.FileWriteError'}})) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E31, E32} -> (fun (V23, V24) -> case V23 of {'Idris.Prelude.Interfaces.MkMonad', E33, E34, E35} -> (fun (V25, V26, V27) -> case V25 of {'Idris.Prelude.Interfaces.MkApplicative', E36, E37, E38} -> (fun (V28, V29, V30) -> ((V29('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.FileNotFound'}})) end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 3 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E39, E40} -> (fun (V31, V32) -> case V31 of {'Idris.Prelude.Interfaces.MkMonad', E41, E42, E43} -> (fun (V33, V34, V35) -> case V33 of {'Idris.Prelude.Interfaces.MkApplicative', E44, E45, E46} -> (fun (V36, V37, V38) -> ((V37('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.PermissionDenied'}})) end(E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 4 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E47, E48} -> (fun (V39, V40) -> case V39 of {'Idris.Prelude.Interfaces.MkMonad', E49, E50, E51} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Prelude.Interfaces.MkApplicative', E52, E53, E54} -> (fun (V44, V45, V46) -> ((V45('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.FileExists'}})) end(E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V47, V48) -> case V47 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V49, V50, V51) -> case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V52, V53, V54) -> ((V53('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.GenericFileError', ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V6, 5))}})) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--removeFile'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__removeFile'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7, 0)) of 1 -> ('un--ok'(V0, 0)); 0 -> ('un--returnError'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--readLinesOnto'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Data.Fuel.Dry'} -> (fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> ((V11('erased'))({'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', 0, ('Idris.Idris2.Data.List':'un--reverse'(V1))}})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Data.Fuel.More', E8} -> (fun (V13) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E9, E10} -> (fun (V14, V15) -> case V14 of {'Idris.Prelude.Interfaces.MkMonad', E11, E12, E13} -> (fun (V16, V17, V18) -> ((((V17('erased'))('erased'))(('un--fEOF'(V0, V4))))(fun (V19) -> case V19 of 0 -> case V2 of 0 -> ('Idris.Idris2.Prelude.Interfaces.Monad':'dn--un-->>=_Monad_Compose((. $m) $t)'({'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.IO.MkHasIO', E64, E65} -> (fun (V20, V21) -> V20 end(E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> case V25 of {'Idris.Prelude.Types.Left', E66} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V27) -> {'Idris.Prelude.Types.Right', (V24(V27))} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V28) -> fun (V29) -> {'Idris.Prelude.Types.Right', V29} end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> case V32 of {'Idris.Prelude.Types.Left', E68} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V35) -> case V33 of {'Idris.Prelude.Types.Right', E70} -> (fun (V36) -> {'Idris.Prelude.Types.Right', (V35(V36))} end(E70)); {'Idris.Prelude.Types.Left', E71} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_(Either $e)'(V40, V41)) end end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_(Either $e)'(V43)) end end}, {'Idris.Prelude.Interfaces.MkTraversable', fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> case V47 of {'Idris.Prelude.Types.Left', E72} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V49) -> {'Idris.Prelude.Types.Right', (V46(V49))} end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, {'Idris.Prelude.Interfaces.MkFoldable', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_(Either $e)'(V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_(Either $e)'(V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_(Either $e)'(V61)) end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_(Either $e)'(V65, V66, V67, V68)) end end end end end end end, fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_(Either $e)'(V70)) end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_(Either $e)'(V73, V74, V75)) end end end end end}, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Prelude.Types':'dn--un--traverse_Traversable_(Either $e)'(V79, V80, V81)) end end end end end end}}}, ('un--fGetLine'(V0, V4)), fun (V82) -> ('un--readLinesOnto'(V0, [V82 | V1], 0, (V13()), V4)) end)); _ -> begin (V83 = (V2 - 1)), ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Interfaces.Functor':'dn--un--map_Functor_Compose((. $f) $g)'({'Idris.Builtin.MkPair', case ('Idris.Idris2.Builtin':'un--fst'({'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.IO.MkHasIO', E17, E18} -> (fun (V88, V89) -> case V88 of {'Idris.Prelude.Interfaces.MkMonad', E19, E20, E21} -> (fun (V90, V91, V92) -> V90 end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Prelude.Interfaces.MkApplicative', fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> case V96 of {'Idris.Prelude.Types.Left', E22} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V98) -> {'Idris.Prelude.Types.Right', (V95(V98))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V99) -> fun (V100) -> {'Idris.Prelude.Types.Right', V100} end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> case V103 of {'Idris.Prelude.Types.Left', E24} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V106) -> case V104 of {'Idris.Prelude.Types.Right', E26} -> (fun (V107) -> {'Idris.Prelude.Types.Right', (V106(V107))} end(E26)); {'Idris.Prelude.Types.Left', E27} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}})) of {'Idris.Prelude.Interfaces.MkApplicative', E14, E15, E16} -> (fun (V109, V110, V111) -> V109 end(E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case ('Idris.Idris2.Builtin':'un--snd'({'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.IO.MkHasIO', E31, E32} -> (fun (V112, V113) -> case V112 of {'Idris.Prelude.Interfaces.MkMonad', E33, E34, E35} -> (fun (V114, V115, V116) -> V114 end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Prelude.Interfaces.MkApplicative', fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> case V120 of {'Idris.Prelude.Types.Left', E36} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V122) -> {'Idris.Prelude.Types.Right', (V119(V122))} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V123) -> fun (V124) -> {'Idris.Prelude.Types.Right', V124} end end, fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> case V127 of {'Idris.Prelude.Types.Left', E38} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V130) -> case V128 of {'Idris.Prelude.Types.Right', E40} -> (fun (V131) -> {'Idris.Prelude.Types.Right', (V130(V131))} end(E40)); {'Idris.Prelude.Types.Left', E41} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}})) of {'Idris.Prelude.Interfaces.MkApplicative', E28, E29, E30} -> (fun (V133, V134, V135) -> V133 end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V86, V87)) end end end end, fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.Interfaces.Applicative':'dn--un--pure_Applicative_Compose((. $f) $g)'({'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.IO.MkHasIO', E42, E43} -> (fun (V138, V139) -> case V138 of {'Idris.Prelude.Interfaces.MkMonad', E44, E45, E46} -> (fun (V140, V141, V142) -> V140 end(E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Prelude.Interfaces.MkApplicative', fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> case V146 of {'Idris.Prelude.Types.Left', E47} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V148) -> {'Idris.Prelude.Types.Right', (V145(V148))} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V149) -> fun (V150) -> {'Idris.Prelude.Types.Right', V150} end end, fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> case V153 of {'Idris.Prelude.Types.Left', E49} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V156) -> case V154 of {'Idris.Prelude.Types.Right', E51} -> (fun (V157) -> {'Idris.Prelude.Types.Right', (V156(V157))} end(E51)); {'Idris.Prelude.Types.Left', E52} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}}, V137)) end end, fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> ('Idris.Idris2.Prelude.Interfaces.Applicative':'dn--un--<*>_Applicative_Compose((. $f) $g)'({'Idris.Builtin.MkPair', case V0 of {'Idris.Prelude.IO.MkHasIO', E53, E54} -> (fun (V163, V164) -> case V163 of {'Idris.Prelude.Interfaces.MkMonad', E55, E56, E57} -> (fun (V165, V166, V167) -> V165 end(E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Prelude.Interfaces.MkApplicative', fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> case V171 of {'Idris.Prelude.Types.Left', E58} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V173) -> {'Idris.Prelude.Types.Right', (V170(V173))} end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V174) -> fun (V175) -> {'Idris.Prelude.Types.Right', V175} end end, fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> case V178 of {'Idris.Prelude.Types.Left', E60} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V181) -> case V179 of {'Idris.Prelude.Types.Right', E62} -> (fun (V182) -> {'Idris.Prelude.Types.Right', (V181(V182))} end(E62)); {'Idris.Prelude.Types.Left', E63} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}}, V161, V162)) end end end end}, ('un--fSeekLine'(V0, V4)), ('un--readLinesOnto'(V0, V1, V83, {'Idris.Data.Fuel.More', V13}, V4)))) end end; 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E74, E75} -> (fun (V184, V185) -> case V184 of {'Idris.Prelude.Interfaces.MkMonad', E76, E77, E78} -> (fun (V186, V187, V188) -> case V186 of {'Idris.Prelude.Interfaces.MkApplicative', E79, E80, E81} -> (fun (V189, V190, V191) -> ((V190('erased'))({'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', 1, ('Idris.Idris2.Data.List':'un--reverse'(V1))}})) end(E79, E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E74, E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--readFilePage'(V0, V1, V2, V3) -> ('un--withFile'(V0, V3, 0, fun (V4) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V5, V6) -> case V5 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V7, V8, V9) -> case V7 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V10, V11, V12) -> ((V11('erased'))(V4)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> ('un--readLinesOnto'(V0, [], V1, V2, V13)) end)).
'un--readFile'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((((V7('erased'))('erased'))(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E8} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--fastConcat'(('Idris.Idris2.Builtin':'un--snd'(V12))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end))(('un--readFilePage'(V0, 0, ('Idris.Idris2.Data.Fuel':'un--forever'()), V1)))) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prim__writeLine'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__writeLine")).
'un--prim__stdout'() -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__stdout")).
'un--prim__stdin'() -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__stdin")).
'un--prim__stderr'() -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__stderr")).
'un--prim__seekLine'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__seekLine")).
'un--prim__removeFile'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__removeFile")).
'un--prim__readLine'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__readLine")).
'un--prim__readChars'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__readChars")).
'un--prim__readChar'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__readChar")).
'un--prim__popen'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__popen")).
'un--prim__pclose'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__pclose")).
'un--prim__open'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__open")).
'un--prim__flush'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__flush")).
'un--prim__fileStatusTime'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__fileStatusTime")).
'un--prim__fileSize'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__fileSize")).
'un--prim__fileModifiedTime'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__fileModifiedTime")).
'un--prim__fileErrno'(V0) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__fileErrno")).
'un--prim__fileAccessTime'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__fileAccessTime")).
'un--prim__fPoll'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__fPoll")).
'un--prim__error'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__error")).
'un--prim__eof'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__eof")).
'un--prim__close'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__close")).
'un--prim__chmod'(V0, V1, V2) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.File.prim__chmod")).
'un--popen'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> ((V18('erased'))(fun (V19) -> ('un--prim__popen'(V1, ('un--modeStr'(V2)), V19)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(('Idris.Idris2.PrimIO':'un--prim__nullAnyPtr'(V8)), 0)) of 1 -> ('un--returnError'(V0)); 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V14, V15, V16) -> ((V15('erased'))({'Idris.Prelude.Types.Right', V8})) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--pclose'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> ('un--prim__pclose'(V1, V4)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--openFile'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V9, V10) -> ((V10('erased'))(fun (V11) -> ('un--prim__open'(V1, ('un--modeStr'(V2)), V11)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(('Idris.Idris2.PrimIO':'un--prim__nullAnyPtr'(V8)), 0)) of 1 -> ('un--returnError'(V0)); 0 -> ('un--ok'(V0, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--ok'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))({'Idris.Prelude.Types.Right', V1})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--modeStr'(V0) -> case V0 of 0 -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> <<"rb"/utf8>>; 0 -> <<"r"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> <<"wb"/utf8>>; 0 -> <<"w"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> <<"ab"/utf8>>; 0 -> <<"a"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 3 -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> <<"rb+"/utf8>>; 0 -> <<"r+"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 4 -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> <<"wb+"/utf8>>; 0 -> <<"w+"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 5 -> case ('Idris.Idris2.System.Info':'un--isWindows'()) of 1 -> <<"ab+"/utf8>>; 0 -> <<"a+"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mkMode'(V0) -> ((((((('nested--4153-2182--in--un--getMs'(V0, case V0 of {'Idris.System.File.MkPermissions', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) * 64) rem 9223372036854775808) + ((('nested--4153-2182--in--un--getMs'(V0, case V0 of {'Idris.System.File.MkPermissions', E3, E4, E5} -> (fun (V4, V5, V6) -> V5 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) * 8) rem 9223372036854775808)) rem 9223372036854775808) + ('nested--4153-2182--in--un--getMs'(V0, case V0 of {'Idris.System.File.MkPermissions', E6, E7, E8} -> (fun (V7, V8, V9) -> V9 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))) rem 9223372036854775808).
'un--firstExists'(V0, V1) -> case V1 of [] -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))({'Idris.Prelude.Types.Nothing'})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; [E8 | E9] -> (fun (V10, V11) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E10, E11} -> (fun (V12, V13) -> case V12 of {'Idris.Prelude.Interfaces.MkMonad', E12, E13, E14} -> (fun (V14, V15, V16) -> ((((V15('erased'))('erased'))(('un--exists'(V0, V10))))(fun (V17) -> case V17 of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V18, V19) -> case V18 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V20, V21, V22) -> case V20 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V23, V24, V25) -> ((V24('erased'))({'Idris.Prelude.Types.Just', V10})) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> ('un--firstExists'(V0, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fileStatusTime'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__fileStatusTime'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7, 0)) of 1 -> ('un--ok'(V0, V7)); 0 -> ('un--returnError'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fileSize'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__fileSize'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V7, 0)) of 1 -> ('un--ok'(V0, V7)); 0 -> ('un--returnError'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fileModifiedTime'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__fileModifiedTime'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7, 0)) of 1 -> ('un--ok'(V0, V7)); 0 -> ('un--returnError'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fileError'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V16, V17) -> ((V17('erased'))(fun (V18) -> ('un--prim__error'(V1, V18)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7, 0)))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fileAccessTime'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__fileAccessTime'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7, 0)) of 1 -> ('un--ok'(V0, V7)); 0 -> ('un--returnError'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fflush'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((((V7('erased'))('erased'))(fun (V13) -> 0 end))(case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V10, V11) -> ((V11('erased'))(fun (V12) -> ('un--prim__flush'(V1, V12)) end)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fSeekLine'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__seekLine'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7, 0)) of 1 -> ('un--returnError'(V0)); 0 -> ('un--ok'(V0, 0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fPutStrLn'(V0, V1, V2) -> ('un--fPutStr'(V0, V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<"\x{a}"/utf8>>)))).
'un--fPutStr'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V9, V10) -> ((V10('erased'))(fun (V11) -> ('un--prim__writeLine'(V1, V2, V11)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8, 0)) of 1 -> ('un--returnError'(V0)); 0 -> ('un--ok'(V0, 0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fPoll'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V16, V17) -> ((V17('erased'))(fun (V18) -> ('un--prim__fPoll'(V1, V18)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V7, 0)))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fGetLine'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__readLine'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(('Idris.Idris2.PrimIO':'un--prim__nullAnyPtr'(('Idris.Idris2.PrimIO':'un--prim__forgetPtr'(V7)))), 0)) of 1 -> ('un--returnError'(V0)); 0 -> ('un--ok'(V0, ('Idris.Idris2.Prelude.IO':'un--prim__getString'(V7)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fGetChars'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V9, V10) -> ((V10('erased'))(fun (V11) -> ('un--prim__readChars'(V2, V1, V11)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(('Idris.Idris2.PrimIO':'un--prim__nullAnyPtr'(('Idris.Idris2.PrimIO':'un--prim__forgetPtr'(V8)))), 0)) of 1 -> ('un--returnError'(V0)); 0 -> ('un--ok'(V0, ('Idris.Idris2.Prelude.IO':'un--prim__getString'(V8)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fGetChar'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> ((V18('erased'))(fun (V19) -> ('un--prim__readChar'(V1, V19)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V10, V11, V12) -> ((((V11('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E12, E13} -> (fun (V14, V15) -> ((V15('erased'))(fun (V16) -> ('un--prim__error'(V1, V16)) end)) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V13) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V13, 0)) of 1 -> ('un--returnError'(V0)); 0 -> ('un--ok'(V0, ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Char'(V7)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fEOF'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V16, V17) -> ((V17('erased'))(fun (V18) -> ('un--prim__eof'(V1, V18)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7, 0)))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--exists'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(('un--openFile'(V0, V1, 0))))(fun (V7) -> case V7 of {'Idris.Prelude.Types.Right', E5} -> (fun (V8) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'(case V0 of {'Idris.Prelude.IO.MkHasIO', E6, E7} -> (fun (V9, V10) -> V9 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--closeFile'(V0, V8)), fun () -> case V0 of {'Idris.Prelude.IO.MkHasIO', E8, E9} -> (fun (V11, V12) -> case V11 of {'Idris.Prelude.Interfaces.MkMonad', E10, E11, E12} -> (fun (V13, V14, V15) -> case V13 of {'Idris.Prelude.Interfaces.MkApplicative', E13, E14, E15} -> (fun (V16, V17, V18) -> ((V17('erased'))(1)) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E5)); {'Idris.Prelude.Types.Left', E16} -> (fun (V19) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E17, E18} -> (fun (V20, V21) -> case V20 of {'Idris.Prelude.Interfaces.MkMonad', E19, E20, E21} -> (fun (V22, V23, V24) -> case V22 of {'Idris.Prelude.Interfaces.MkApplicative', E22, E23, E24} -> (fun (V25, V26, V27) -> ((V26('erased'))(0)) end(E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--closeFile'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> ('un--prim__close'(V1, V4)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chmodRaw'(V0, V1, V2) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V3, V4) -> case V3 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V17, V18) -> ((V18('erased'))(fun (V19) -> ('un--prim__chmod'(V1, V2, V19)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V8) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V8, 0)) of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V9, V10) -> case V9 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V11, V12, V13) -> case V11 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V14, V15, V16) -> ((V15('erased'))({'Idris.Prelude.Types.Right', 0})) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> ('un--returnError'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--chmod'(V0, V1, V2) -> ('un--chmodRaw'(V0, V1, ('un--mkMode'(V2)))).
'un--FilePtr'() -> {'Idris.PrimIO.AnyPtr'}.
