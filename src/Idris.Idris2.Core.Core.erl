-module('Idris.Idris2.Core.Core').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--5497-4151--in--un--showRig'/5,
  'nested--5497-4152--in--un--showRel'/5,
  'nested--8573-6835--in--un--goTerm'/4,
  'dn--un--throw_Catchable_Core_Error'/2,
  'dn--un--show_Show_Warning'/1,
  'dn--un--show_Show_TTCErrorMsg'/1,
  'dn--un--show_Show_Error'/1,
  'dn--un--show_Show_DotReason'/1,
  'dn--un--showPrec_Show_Warning'/2,
  'dn--un--showPrec_Show_TTCErrorMsg'/2,
  'dn--un--showPrec_Show_Error'/2,
  'dn--un--showPrec_Show_DotReason'/2,
  'dn--un--pretty_Pretty_DotReason'/1,
  'dn--un--prettyPrec_Pretty_DotReason'/2,
  'dn--un--catch_Catchable_Core_Error'/3,
  'dn--un--breakpoint_Catchable_Core_Error'/1,
  'dn--un--__Impl_Show_Warning'/0,
  'dn--un--__Impl_Show_TTCErrorMsg'/0,
  'dn--un--__Impl_Show_Error'/0,
  'dn--un--__Impl_Show_DotReason'/0,
  'dn--un--__Impl_Pretty_DotReason'/0,
  'dn--un--__Impl_Catchable_Core_Error'/0,
  'un--writeFile'/3,
  'un--wrapRef'/5,
  'un--wrapError'/3,
  'un--whenJust'/2,
  'un--when'/2,
  'un--update'/4,
  'un--unless'/2,
  'un--traverse_'/3,
  'un--traverseVect'/3,
  'un--traversePair'/3,
  'un--traverseOpt'/3,
  'un--traverseList1_'/2,
  'un--traverseList1'/2,
  'un--traverse\x{27}'/4,
  'un--traverse'/3,
  'un--throw'/2,
  'un--sequence'/2,
  'un--readFile'/2,
  'un--put'/4,
  'un--pure'/2,
  'un--newRef'/3,
  'un--mapTermM'/3,
  'un--map'/3,
  'un--iwhenJust'/2,
  'un--iwhen'/3,
  'un--iunless'/3,
  'un--ignore'/2,
  'un--getWarningLoc'/1,
  'un--getErrorLoc'/1,
  'un--get'/3,
  'un--for_'/2,
  'un--for'/2,
  'un--foldlC'/4,
  'un--filterM'/3,
  'un--coreRun'/4,
  'un--coreLift_'/2,
  'un--coreLift'/2,
  'un--coreFail'/2,
  'un--condC'/2,
  'un--cond'/2,
  'un--catch'/3,
  'un--breakpoint'/2,
  'un--anyM'/3,
  'un--allM'/3,
  'un-->>='/3,
  'un-->>'/3,
  'un-->=>'/3,
  'un--=<<'/2,
  'un--<=<'/2,
  'un--<*>'/3,
  'un--<*'/3,
  'un--<$>'/3,
  'un--<$'/3,
  'un--*>'/3
]).
'nested--5497-4151--in--un--showRig'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V5, V6)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V11, V12)) end end}}, <<"linear"/utf8>>, <<"irrelevant"/utf8>>, fun (V13) -> <<"unrestricted"/utf8>> end, V4)).
'nested--5497-4152--in--un--showRel'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V5, V6)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V7, V8)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V11, V12)) end end}}, <<"relevant"/utf8>>, <<"irrelevant"/utf8>>, fun (V13) -> <<"non-linear"/utf8>> end, V4)).
'nested--8573-6835--in--un--goTerm'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V4, V5, V6) -> ((V1(V2))(V3)) end(E0, E1, E2)); {'Idris.Core.TT.Ref', E3, E4, E5} -> (fun (V7, V8, V9) -> ((V1(V2))(V3)) end(E3, E4, E5)); {'Idris.Core.TT.Meta', E6, E7, E8, E9} -> (fun (V10, V11, V12, V13) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> ((V15(V19))(V16)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V21) -> case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Meta', V10, V11, V12, V23}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V24) -> ('un--traverse\x{27}'(fun (V25) -> ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V25)) end, V13, [], V24)) end, V20)) end)) end(E6, E7, E8, E9)); {'Idris.Core.TT.Bind', E14, E15, E16, E17} -> (fun (V26, V27, V28, V29) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), case V33 of {'Idris.Prelude.Types.Left', E18} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V35) -> ((V31(V35))(V32)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V36) -> ('un--<*>'(fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V38) -> case V38 of {'Idris.Prelude.Types.Left', E20} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V40) -> {'Idris.Prelude.Types.Right', fun (V41) -> {'Idris.Core.TT.Bind', V26, V27, V40, V41} end} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> ('Idris.Idris2.Core.Core.Binder':'un--traverse'(fun (V43) -> ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V43)) end, V28, V42)) end, V37)) end, ('nested--8573-6835--in--un--goTerm'(V0, V1, [V27 | V2], V29)), V36)) end)) end(E14, E15, E16, E17)); {'Idris.Core.TT.App', E22, E23, E24} -> (fun (V44, V45, V46) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), case V50 of {'Idris.Prelude.Types.Left', E25} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V52) -> ((V48(V52))(V49)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V53) -> ('un--<*>'(fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V55) -> case V55 of {'Idris.Prelude.Types.Left', E27} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V57) -> {'Idris.Prelude.Types.Right', fun (V58) -> {'Idris.Core.TT.App', V44, V57, V58} end} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V45)), V54)) end, ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V46)), V53)) end)) end(E22, E23, E24)); {'Idris.Core.TT.As', E29, E30, E31, E32} -> (fun (V59, V60, V61, V62) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), case V66 of {'Idris.Prelude.Types.Left', E33} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V68) -> ((V64(V68))(V65)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V69) -> ('un--<*>'(fun (V70) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V71) -> case V71 of {'Idris.Prelude.Types.Left', E35} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V73) -> {'Idris.Prelude.Types.Right', fun (V74) -> {'Idris.Core.TT.As', V59, V60, V73, V74} end} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V61)), V70)) end, ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V62)), V69)) end)) end(E29, E30, E31, E32)); {'Idris.Core.TT.TDelayed', E37, E38, E39} -> (fun (V75, V76, V77) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), case V81 of {'Idris.Prelude.Types.Left', E40} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V83) -> ((V79(V83))(V80)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V84) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V85) -> case V85 of {'Idris.Prelude.Types.Left', E42} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V87) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TDelayed', V75, V76, V87}} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V77)), V84)) end)) end(E37, E38, E39)); {'Idris.Core.TT.TDelay', E44, E45, E46, E47} -> (fun (V88, V89, V90, V91) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V92(V94))), case V95 of {'Idris.Prelude.Types.Left', E48} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V97) -> ((V93(V97))(V94)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V98) -> ('un--<*>'(fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V100) -> case V100 of {'Idris.Prelude.Types.Left', E50} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V102) -> {'Idris.Prelude.Types.Right', fun (V103) -> {'Idris.Core.TT.TDelay', V88, V89, V102, V103} end} end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V90)), V99)) end, ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V91)), V98)) end)) end(E44, E45, E46, E47)); {'Idris.Core.TT.TForce', E52, E53, E54} -> (fun (V104, V105, V106) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V107) -> fun (V108) -> fun (V109) -> begin (V110 = (V107(V109))), case V110 of {'Idris.Prelude.Types.Left', E55} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V112) -> ((V108(V112))(V109)) end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, (V1(V2)), fun (V113) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V114) -> case V114 of {'Idris.Prelude.Types.Left', E57} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V116) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TForce', V104, V105, V116}} end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--8573-6835--in--un--goTerm'(V0, V1, V2, V106)), V113)) end)) end(E52, E53, E54)); {'Idris.Core.TT.PrimVal', E59, E60} -> (fun (V117, V118) -> ((V1(V2))(V3)) end(E59, E60)); {'Idris.Core.TT.Erased', E61, E62} -> (fun (V119, V120) -> ((V1(V2))(V3)) end(E61, E62)); {'Idris.Core.TT.TType', E63} -> (fun (V121) -> ((V1(V2))(V3)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--throw_Catchable_Core_Error'(V0, V1) -> ('un--coreFail'(V0, V1)).
'dn--un--show_Show_Warning'(V0) -> case V0 of {'Idris.Core.Core.UnreachableClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> <<":Unreachable clause"/utf8>> end(E0, E1, E2, E3)); {'Idris.Core.Core.ShadowingGlobalDefs', E4, E5} -> (fun (V5, V6) -> <<":Shadowing names"/utf8>> end(E4, E5)); {'Idris.Core.Core.Deprecated', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Deprecated "/utf8>>, V7)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_TTCErrorMsg'(V0) -> case V0 of {'Idris.Core.Core.Format', E0, E1, E2} -> (fun (V1, V2, V3) -> begin (V4 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, V3)) of 1 -> <<"older"/utf8>>; 0 -> <<"newer"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"TTC data is in an "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" format, file: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", expected version: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", actual version: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)))))))))))))))) end end(E0, E1, E2)); {'Idris.Core.Core.EndOfBuffer', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"End of buffer when reading "/utf8>>, V5)) end(E3)); {'Idris.Core.Core.Corrupt', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Corrupt TTC data for "/utf8>>, V6)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_Error'(V0) -> case V0 of {'Idris.Core.Core.Fatal', E0} -> (fun (V1) -> ('dn--un--show_Show_Error'(V1)) end(E0)); {'Idris.Core.Core.CantConvert', E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Type mismatch: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V2, V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V2, V6)))))))))) end(E1, E2, E3, E4, E5)); {'Idris.Core.Core.CantSolveEq', E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V7, V10)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V7, V11)), <<" are not equal"/utf8>>)))))))))) end(E6, E7, E8, E9, E10)); {'Idris.Core.Core.PatternVariableUnifies', E11, E12, E13, E14, E15} -> (fun (V12, V13, V14, V15, V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Pattern variable "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" unifies with "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V12, V16)))))))))) end(E11, E12, E13, E14, E15)); {'Idris.Core.Core.CyclicMeta', E16, E17, E18, E19, E20} -> (fun (V17, V18, V19, V20, V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Cycle detected in metavariable solution "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V17, V21)))))))))) end(E16, E17, E18, E19, E20)); {'Idris.Core.Core.WhenUnifying', E21, E22, E23, E24, E25, E26} -> (fun (V22, V23, V24, V25, V26, V27) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V23)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When unifying: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V22, V25)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" and "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V22, V26)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, ('dn--un--show_Show_Error'(V27)))))))))))))) end(E21, E22, E23, E24, E25, E26)); {'Idris.Core.Core.ValidCase', E27, E28, E29, E30} -> (fun (V28, V29, V30, V31) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V29)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, case V31 of {'Idris.Prelude.Types.Left', E31} -> (fun (V32) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V28, V32)), <<" is not a valid impossible pattern because it typechecks"/utf8>>)) end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V33) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a valid impossible pattern:\x{a}\x{9}"/utf8>>, ('dn--un--show_Show_Error'(V33)))) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end(E27, E28, E29, E30)); {'Idris.Core.Core.UndefinedName', E33, E34} -> (fun (V34, V35) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V34)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Undefined name "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V35)))))) end(E33, E34)); {'Idris.Core.Core.InvisibleName', E35, E36, E37} -> (fun (V36, V37, V38) -> case V38 of {'Idris.Prelude.Types.Just', E38} -> (fun (V39) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V36)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Name "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V37)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is inaccessible since "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_Namespace'(V39)), <<" is not explicitly imported"/utf8>>)))))))))) end(E38)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V36)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Name "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V37)), <<" is private"/utf8>>)))))) end end(E35, E36, E37)); {'Idris.Core.Core.BadTypeConType', E39, E40} -> (fun (V40, V41) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V40)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Return type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V41)), <<" must be Type"/utf8>>)))))) end(E39, E40)); {'Idris.Core.Core.BadDataConType', E41, E42, E43} -> (fun (V42, V43, V44) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V42)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Return type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V43)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" must be in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V44)))))))))) end(E41, E42, E43)); {'Idris.Core.Core.NotCovering', E44, E45, E46} -> (fun (V45, V46, V47) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V45)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V46)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is not covering:\x{a}\x{9}"/utf8>>, case V47 of {'Idris.Core.TT.IsCovering'} -> (fun () -> <<"Oh yes it is (Internal error!)"/utf8>> end()); {'Idris.Core.TT.MissingCases', E47} -> (fun (V48) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing cases:\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}\x{9}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V49) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'([], V49)) end, V48)))))) end(E47)); {'Idris.Core.TT.NonCoveringCall', E48} -> (fun (V50) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Calls non covering function"/utf8>>, case V50 of [E49 | E50] -> (fun (V51, V52) -> case V52 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V51)))); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V53) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V53)) end, V50)))))) end end(E49, E50)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"s: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V54)) end, V50)))))) end)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))) end(E44, E45, E46)); {'Idris.Core.Core.NotTotal', E51, E52, E53} -> (fun (V55, V56, V57) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V55)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V56)), <<" is not total"/utf8>>)))))) end(E51, E52, E53)); {'Idris.Core.Core.LinearUsed', E54, E55, E56} -> (fun (V58, V59, V60) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V58)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":There are "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V59)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" uses of linear name "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V60)))))))))) end(E54, E55, E56)); {'Idris.Core.Core.LinearMisuse', E57, E58, E59, E60} -> (fun (V61, V62, V63, V64) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V61)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Trying to use "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--5497-4151--in--un--showRig'(V64, V63, V62, V61, V63)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" name "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V62)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--5497-4152--in--un--showRel'(V64, V63, V62, V61, V64)), <<" context"/utf8>>)))))))))))))) end(E57, E58, E59, E60)); {'Idris.Core.Core.BorrowPartial', E61, E62, E63, E64, E65} -> (fun (V65, V66, V67, V68, V69) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V66)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V65, V68)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" borrows argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V65, V69)), <<" so must be fully applied"/utf8>>)))))))))) end(E61, E62, E63, E64, E65)); {'Idris.Core.Core.BorrowPartialType', E66, E67, E68, E69} -> (fun (V70, V71, V72, V73) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V71)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V70, V73)), <<" borrows, so must return a concrete type"/utf8>>)))))) end(E66, E67, E68, E69)); {'Idris.Core.Core.AmbiguousName', E70, E71} -> (fun (V74, V75) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V74)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Ambiguous name "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V76) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V77, V78)) end end}, V75)))))) end(E70, E71)); {'Idris.Core.Core.AmbiguousElab', E72, E73, E74, E75} -> (fun (V79, V80, V81, V82) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V80)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Ambiguous elaboration "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V83) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V79, V83)) end, fun (V84) -> fun (V85) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V79, V84, V85)) end end}, V82)))))) end(E72, E73, E74, E75)); {'Idris.Core.Core.AmbiguousSearch', E76, E77, E78, E79, E80} -> (fun (V86, V87, V88, V89, V90) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V87)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Ambiguous search "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V91) -> ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V86, V91)) end, fun (V92) -> fun (V93) -> ('Idris.Idris2.Core.TT':'dn--un--showPrec_Show_(Term $vars)'(V86, V92, V93)) end end}, V90)))))) end(E76, E77, E78, E79, E80)); {'Idris.Core.Core.AmbiguityTooDeep', E81, E82, E83} -> (fun (V94, V95, V96) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V94)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Ambiguity too deep in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V95)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V98, V99)) end end}, V96)))))))))) end(E81, E82, E83)); {'Idris.Core.Core.AllFailed', E84} -> (fun (V100) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No successful elaboration: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V101) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V102) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V103) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V104, V105)) end end}, V102)) end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V108) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V109, V110)) end end}, V106, V107)) end end}, {'Idris.Prelude.Show.MkShow', fun (V111) -> ('dn--un--show_Show_Error'(V111)) end, fun (V112) -> fun (V113) -> ('dn--un--showPrec_Show_Error'(V112, V113)) end end}}, V101)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V116) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V117) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V117)) end, fun (V118) -> fun (V119) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V118, V119)) end end}, V116)) end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V122) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V122)) end, fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V123, V124)) end end}, V120, V121)) end end}, {'Idris.Prelude.Show.MkShow', fun (V125) -> ('dn--un--show_Show_Error'(V125)) end, fun (V126) -> fun (V127) -> ('dn--un--showPrec_Show_Error'(V126, V127)) end end}}, V114, V115)) end end}, V100)))) end(E84)); {'Idris.Core.Core.RecordTypeNeeded', E85, E86, E87} -> (fun (V128, V129, V130) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V129)), <<":Can\x{27}t infer type of record to update"/utf8>>)) end(E85, E86, E87)); {'Idris.Core.Core.NotRecordField', E88, E89, E90} -> (fun (V131, V132, V133) -> case V133 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V131)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V132, <<" is not part of a record type"/utf8>>)))))) end()); {'Idris.Prelude.Types.Just', E91} -> (fun (V134) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V131)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Record type "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V134)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" has no field "/utf8>>, V132)))))))) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E88, E89, E90)); {'Idris.Core.Core.NotRecordType', E92, E93} -> (fun (V135, V136) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V135)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V136)), <<" is not a record type"/utf8>>)))))) end(E92, E93)); {'Idris.Core.Core.IncompatibleFieldUpdate', E94, E95} -> (fun (V137, V138) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V137)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Field update "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"->"/utf8>>, V138)), <<" not compatible with other updates"/utf8>>)))))) end(E94, E95)); {'Idris.Core.Core.InvalidArgs', E96, E97, E98, E99, E100} -> (fun (V139, V140, V141, V142, V143) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V140)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V144) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V144)) end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V145, V146)) end end}, V142)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" are not valid arguments in "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V139, V143)))))))))) end(E96, E97, E98, E99, E100)); {'Idris.Core.Core.TryWithImplicits', E101, E102, E103, E104} -> (fun (V147, V148, V149, V150) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V148)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Need to bind implicits "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<","/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V151) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(('Idris.Idris2.Builtin':'un--fst'(V151)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V147, ('Idris.Idris2.Builtin':'un--snd'(V151)))))))) end, V150)))), <<"\x{a}(The front end should probably have done this for you. Please report!)"/utf8>>)))))) end(E101, E102, E103, E104)); {'Idris.Core.Core.BadUnboundImplicit', E105, E106, E107, E108, E109} -> (fun (V152, V153, V154, V155, V156) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V153)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t bind name "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V155)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V152, V156)))))))))) end(E105, E106, E107, E108, E109)); {'Idris.Core.Core.CantSolveGoal', E110, E111, E112, E113} -> (fun (V157, V158, V159, V160) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V158)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t solve goal "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V157, V160)))))) end(E110, E111, E112, E113)); {'Idris.Core.Core.DeterminingArg', E114, E115, E116, E117, E118, E119} -> (fun (V161, V162, V163, V164, V165, V166) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V162)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t solve goal "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V161, V166)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" since argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V163)), <<" can\x{27}t be inferred"/utf8>>)))))))))) end(E114, E115, E116, E117, E118, E119)); {'Idris.Core.Core.UnsolvedHoles', E120} -> (fun (V167) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unsolved holes "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V168) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V169) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V169)) end, fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V170, V171)) end end}, {'Idris.Prelude.Show.MkShow', fun (V172) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V172)) end, fun (V173) -> fun (V174) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V173, V174)) end end}}, V168)) end, fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V177) -> ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V177)) end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.FC':'dn--un--showPrec_Show_FC'(V178, V179)) end end}, {'Idris.Prelude.Show.MkShow', fun (V180) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V180)) end, fun (V181) -> fun (V182) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V181, V182)) end end}}, V175, V176)) end end}, V167)))) end(E120)); {'Idris.Core.Core.CantInferArgType', E121, E122, E123, E124, E125, E126} -> (fun (V183, V184, V185, V186, V187, V188) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V184)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t infer type for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V186)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" (got "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V183, V188)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" with hole "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V187)), <<")"/utf8>>)))))))))))))) end(E121, E122, E123, E124, E125, E126)); {'Idris.Core.Core.SolvedNamedHole', E127, E128, E129, E130, E131} -> (fun (V189, V190, V191, V192, V193) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V190)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Named hole "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V192)), <<" is solved by unification"/utf8>>)))))) end(E127, E128, E129, E130, E131)); {'Idris.Core.Core.VisibilityError', E132, E133, E134, E135, E136} -> (fun (V194, V195, V196, V197, V198) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V194)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Visibility'(V195)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V196)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" cannot refer to "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Visibility'(V197)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V198)))))))))))))))))) end(E132, E133, E134, E135, E136)); {'Idris.Core.Core.NonLinearPattern', E137, E138} -> (fun (V199, V200) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V199)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Non linear pattern variable "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V200)))))) end(E137, E138)); {'Idris.Core.Core.BadPattern', E139, E140} -> (fun (V201, V202) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V201)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Pattern not allowed here: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V202)))))) end(E139, E140)); {'Idris.Core.Core.NoDeclaration', E141, E142} -> (fun (V203, V204) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V203)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":No type declaration for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V204)))))) end(E141, E142)); {'Idris.Core.Core.AlreadyDefined', E143, E144} -> (fun (V205, V206) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V205)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V206)), <<" is already defined"/utf8>>)))))) end(E143, E144)); {'Idris.Core.Core.NotFunctionType', E145, E146, E147, E148} -> (fun (V207, V208, V209, V210) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V208)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Not a function type: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V207, V210)))))) end(E145, E146, E147, E148)); {'Idris.Core.Core.RewriteNoChange', E149, E150, E151, E152, E153} -> (fun (V211, V212, V213, V214, V215) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V212)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Rewriting by "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V211, V214)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" did not change type "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V211, V215)))))))))) end(E149, E150, E151, E152, E153)); {'Idris.Core.Core.NotRewriteRule', E154, E155, E156, E157} -> (fun (V216, V217, V218, V219) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V217)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V216, V219)), <<" is not a rewrite rule type"/utf8>>)))))) end(E154, E155, E156, E157)); {'Idris.Core.Core.CaseCompile', E158, E159, E160} -> (fun (V220, V221, V222) -> case V222 of {'Idris.Core.Core.DifferingArgNumbers'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V220)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Patterns for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V221)), <<" have different numbers of arguments"/utf8>>)))))) end()); {'Idris.Core.Core.DifferingTypes'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V220)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Patterns for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V221)), <<" require matching on different types"/utf8>>)))))) end()); {'Idris.Core.Core.UnknownType'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V220)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t infer type to match in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V221)))))) end()); {'Idris.Core.Core.MatchErased', E161} -> (fun (V223) -> case V223 of {'Idris.Builtin.DPair.MkDPair', E162, E163} -> (fun (V224, V225) -> case V225 of {'Idris.Builtin.MkPair', E164, E165} -> (fun (V226, V227) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V220)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Attempt to match on erased argument "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V224, V227)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V221)))))))))) end(E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E161)); {'Idris.Core.Core.NotFullyApplied', E166} -> (fun (V228) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V220)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V228)), <<" is not fully applied"/utf8>>)))))) end(E166)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E158, E159, E160)); {'Idris.Core.Core.MatchTooSpecific', E167, E168, E169, E170} -> (fun (V229, V230, V231, V232) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V230)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t match on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V229, V232)), <<" as it is has a polymorphic type"/utf8>>)))))) end(E167, E168, E169, E170)); {'Idris.Core.Core.BadDotPattern', E171, E172, E173, E174, E175, E176} -> (fun (V233, V234, V235, V236, V237, V238) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V234)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Can\x{27}t match on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V233, V237)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_DotReason'(V236)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" - it elaborates to "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V233, V238)))))))))))))))) end(E171, E172, E173, E174, E175, E176)); {'Idris.Core.Core.BadImplicit', E177, E178} -> (fun (V239, V240) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V239)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V240, <<" can\x{27}t be bound here"/utf8>>)))))) end(E177, E178)); {'Idris.Core.Core.BadRunElab', E179, E180, E181, E182, E183} -> (fun (V241, V242, V243, V244, V245) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V242)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Bad elaborator script "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(Term $vars)'(V241, V244)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V245, <<")"/utf8>>)))))))))) end(E179, E180, E181, E182, E183)); {'Idris.Core.Core.GenericMsg', E184, E185} -> (fun (V246, V247) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V246)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, V247)))) end(E184, E185)); {'Idris.Core.Core.TTCError', E186} -> (fun (V248) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error in TTC file: "/utf8>>, ('dn--un--show_Show_TTCErrorMsg'(V248)))) end(E186)); {'Idris.Core.Core.FileErr', E187, E188} -> (fun (V249, V250) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"File error ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V249, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"): "/utf8>>, ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V250)))))))) end(E187, E188)); {'Idris.Core.Core.CantFindPackage', E189} -> (fun (V251) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t find package "/utf8>>, V251)) end(E189)); {'Idris.Core.Core.LitFail', E190} -> (fun (V252) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V252)), <<":Can\x{27}t parse literate"/utf8>>)) end(E190)); {'Idris.Core.Core.LexFail', E191, E192} -> (fun (V253, V254) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V253)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":Lexer error ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V254)), <<")"/utf8>>)))))) end(E191, E192)); {'Idris.Core.Core.ParseFail', E193, E194} -> (fun (V255, V256) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Parse error ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V256)), <<")"/utf8>>)))) end(E193, E194)); {'Idris.Core.Core.ModuleNotFound', E195, E196} -> (fun (V257, V258) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V257)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V258)), <<" not found"/utf8>>)))))) end(E195, E196)); {'Idris.Core.Core.CyclicImports', E197} -> (fun (V259) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Module imports form a cycle: "/utf8>>, ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<" -> "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V260) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V260)) end, V259)))))) end(E197)); {'Idris.Core.Core.ForceNeeded'} -> (fun () -> <<"Internal error when resolving implicit laziness"/utf8>> end()); {'Idris.Core.Core.InternalError', E198} -> (fun (V261) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: "/utf8>>, V261)) end(E198)); {'Idris.Core.Core.UserError', E199} -> (fun (V262) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: "/utf8>>, V262)) end(E199)); {'Idris.Core.Core.NoForeignCC', E200} -> (fun (V263) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V263)), <<":The given specifier was not accepted by any available backend."/utf8>>)) end(E200)); {'Idris.Core.Core.BadMultiline', E201, E202} -> (fun (V264, V265) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid multiline string: "/utf8>>, V265)) end(E201, E202)); {'Idris.Core.Core.InType', E203, E204, E205} -> (fun (V266, V267, V268) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V266)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When elaborating type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V267)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('dn--un--show_Show_Error'(V268)))))))))) end(E203, E204, E205)); {'Idris.Core.Core.InCon', E206, E207, E208} -> (fun (V269, V270, V271) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V269)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When elaborating type of constructor "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V270)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('dn--un--show_Show_Error'(V271)))))))))) end(E206, E207, E208)); {'Idris.Core.Core.InLHS', E209, E210, E211} -> (fun (V272, V273, V274) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V272)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When elaborating left hand side of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V273)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('dn--un--show_Show_Error'(V274)))))))))) end(E209, E210, E211)); {'Idris.Core.Core.InRHS', E212, E213, E214} -> (fun (V275, V276, V277) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V275)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":When elaborating right hand side of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V276)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<":\x{a}"/utf8>>, ('dn--un--show_Show_Error'(V277)))))))))) end(E212, E213, E214)); {'Idris.Core.Core.MaybeMisspelling', E215, E216} -> (fun (V278, V279) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('dn--un--show_Show_Error'(V278)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Did you mean"/utf8>>, case V279 of {'Idris.Data.List1.:::', E217, E218} -> (fun (V280, V281) -> case V281 of [] -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V280, <<"?"/utf8>>)))); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" any of: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V282) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V282)) end, ('Idris.Idris2.Data.List1':'un--forget'(V279)))))), <<"?"/utf8>>)))) end end(E217, E218)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" any of: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V283) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V283)) end, ('Idris.Idris2.Data.List1':'un--forget'(V279)))))), <<"?"/utf8>>)))) end)))) end(E215, E216)); {'Idris.Core.Core.WarningAsError', E219} -> (fun (V284) -> ('dn--un--show_Show_Warning'(V284)) end(E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_DotReason'(V0) -> case V0 of 0 -> <<"Non linear pattern variable"/utf8>>; 1 -> <<"Variable applied to arguments"/utf8>>; 2 -> <<"Not a constructor application or primitive"/utf8>>; 3 -> <<"Erased argument"/utf8>>; 4 -> <<"User dotted"/utf8>>; 5 -> <<"Unknown reason"/utf8>>; 6 -> <<"Under-applied constructor"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_Warning'(V0, V1) -> ('dn--un--show_Show_Warning'(V1)).
'dn--un--showPrec_Show_TTCErrorMsg'(V0, V1) -> ('dn--un--show_Show_TTCErrorMsg'(V1)).
'dn--un--showPrec_Show_Error'(V0, V1) -> ('dn--un--show_Show_Error'(V1)).
'dn--un--showPrec_Show_DotReason'(V0, V1) -> ('dn--un--show_Show_DotReason'(V1)).
'dn--un--pretty_Pretty_DotReason'(V0) -> case V0 of 0 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Non linear pattern variable"/utf8>>)); 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Variable applied to arguments"/utf8>>)); 2 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Not a constructor application or primitive"/utf8>>)); 3 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Erased argument"/utf8>>)); 4 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"User dotted"/utf8>>)); 5 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Unknown reason"/utf8>>)); 6 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Under-applied constructor"/utf8>>)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--prettyPrec_Pretty_DotReason'(V0, V1) -> ('dn--un--pretty_Pretty_DotReason'(V1)).
'dn--un--catch_Catchable_Core_Error'(V0, V1, V2) -> begin (V3 = (V0(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> ((V1(V4))(V2)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', V5} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--breakpoint_Catchable_Core_Error'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V3, V4, V5)) end end end end end, fun (V6) -> {'Idris.Prelude.Types.Right', V6} end, V0)).
'dn--un--__Impl_Show_Warning'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Warning'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Warning'(V1, V2)) end end}.
'dn--un--__Impl_Show_TTCErrorMsg'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_TTCErrorMsg'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_TTCErrorMsg'(V1, V2)) end end}.
'dn--un--__Impl_Show_Error'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_Error'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Error'(V1, V2)) end end}.
'dn--un--__Impl_Show_DotReason'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_DotReason'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_DotReason'(V1, V2)) end end}.
'dn--un--__Impl_Pretty_DotReason'() -> {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.dn--un--__mkPretty', fun (V0) -> fun (V1) -> ('dn--un--pretty_Pretty_DotReason'(V1)) end end, fun (V2) -> fun (V3) -> fun (V4) -> ('dn--un--prettyPrec_Pretty_DotReason'(V3, V4)) end end end}.
'dn--un--__Impl_Catchable_Core_Error'() -> {'Idris.Core.Core.dn--un--__mkCatchable', fun (V0) -> fun (V1) -> fun (V2) -> ('dn--un--throw_Catchable_Core_Error'(V1, V2)) end end end, fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--catch_Catchable_Core_Error'(V4, V5, V6)) end end end end, fun (V7) -> fun (V8) -> ('dn--un--breakpoint_Catchable_Core_Error'(V8)) end end}.
'un--writeFile'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V0, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> case V33 of {'Idris.Prelude.Types.Right', E2} -> (fun (V34) -> case V34 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V35) -> ('dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V35}, V2)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--wrapRef'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V18 = ('dn--un--catch_Catchable_Core_Error'(V3, fun (V9) -> fun (V10) -> begin (V11 = ((V2(V8))(V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'put'(V1, V8))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> ('dn--un--throw_Catchable_Core_Error'(V9, V10)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V4))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V21 = ((V2(V8))(V4))), case V21 of {'Idris.Prelude.Types.Left', E8} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V23) -> begin (V25 = begin (V24 = ('erlang':'put'(V1, V8))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Right', V20} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--wrapError'(V0, V1, V2) -> begin (V3 = (V1(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', (V0(V4))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', V5} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--whenJust'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> (V1(V2)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--when'(V0, V1) -> case V0 of 1 -> (V1()); 0 -> fun (V2) -> {'Idris.Prelude.Types.Right', 0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--update'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('erlang':'put'(V1, (V2(V7))))), {'Idris.Prelude.Types.Right', V8} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unless'(V0, V1) -> case V0 of 1 -> fun (V2) -> {'Idris.Prelude.Types.Right', 0} end; 0 -> (V1()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverse_'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V3, V4) -> begin (V8 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V0(V3)), V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> ('un--traverse_'(V0, V4, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverseVect'(V0, V1, V2) -> case V1 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> ('un--<*>'(fun (V5) -> ('un--<*>'(fun (V6) -> {'Idris.Prelude.Types.Right', fun (V7) -> fun (V8) -> {'Idris.Data.Vect.::', V7, V8} end end} end, (V0(V3)), V5)) end, fun (V9) -> ('un--traverseVect'(V0, V4, V9)) end, V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traversePair'(V0, V1, V2) -> case V1 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V5) -> case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V3, V7}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V0(V4)), V2)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverseOpt'(V0, V1, V2) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V6}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V0(V3)), V2)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverseList1_'(V0, V1) -> begin (V4 = case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V2, V3) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V7 = case V1 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V5, V6) -> V6 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V8) -> begin (V12 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', 0} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V0(V4)), V8))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> ('un--traverse_'(V0, V7, V8)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--traverseList1'(V0, V1) -> begin (V4 = case V1 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V2, V3) -> V2 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V7 = case V1 of {'Idris.Data.List1.:::', E2, E3} -> (fun (V5, V6) -> V6 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V8) -> ('un--<*>'(fun (V9) -> ('un--<*>'(fun (V10) -> {'Idris.Prelude.Types.Right', fun (V11) -> fun (V12) -> {'Idris.Data.List1.:::', V11, V12} end end} end, (V0(V4)), V9)) end, fun (V13) -> ('un--traverse\x{27}'(V0, V7, [], V13)) end, V8)) end end end.
'un--traverse\x{27}'(V0, V1, V2, V3) -> case V1 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--reverse'(V2))}; [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ((V0(V4))(V3))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> ('un--traverse\x{27}'(V0, V5, [V8 | V2], V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--traverse'(V0, V1, V2) -> ('un--traverse\x{27}'(V0, V1, [], V2)).
'un--throw'(V0, V1) -> case V0 of {'Idris.Core.Core.dn--un--__mkCatchable', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V2('erased'))(V1)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--sequence'(V0, V1) -> case V0 of [E0 | E1] -> (fun (V2, V3) -> begin (V4 = (V2(V1))), case V4 of {'Idris.Prelude.Types.Left', E2} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V6) -> begin (V7 = ('un--sequence'(V3, V1))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> {'Idris.Prelude.Types.Right', [V6 | V9]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); [] -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--readFile'(V0, V1) -> begin (V30 = begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--readFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Right', E2} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V33} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V34) -> ('dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V0, V34}, V1)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--put'(V0, V1, V2, V3) -> begin (V4 = ('erlang':'put'(V1, V2))), {'Idris.Prelude.Types.Right', V4} end.
'un--pure'(V0, V1) -> {'Idris.Prelude.Types.Right', V0}.
'un--newRef'(V0, V1, V2) -> begin (V31 = begin (V30 = (('Idris.Idris2.Data.IORef':'un--newIORef'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, V1))(V2))), {'Idris.Prelude.Types.Right', V30} end), case V31 of {'Idris.Prelude.Types.Left', E0} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V33) -> {'Idris.Prelude.Types.Right', V33} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--mapTermM'(V0, V1, V2) -> ('nested--8573-6835--in--un--goTerm'(V1, V0, V1, V2)).
'un--map'(V0, V1, V2) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V0(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1, V2)).
'un--iwhenJust'(V0, V1) -> case V0 of {'Idris.Libraries.Data.IMaybe.Just', E0} -> (fun (V2) -> (V1(V2)) end(E0)); {'Idris.Libraries.Data.IMaybe.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--iwhen'(V0, V1, V2) -> case V0 of 1 -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Data.IMaybe.Just', V5}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, (V1()), V2)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.Libraries.Data.IMaybe.Nothing'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--iunless'(V0, V1, V2) -> ('un--iwhen'(case V0 of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V1, V2)).
'un--ignore'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V0, V1)).
'un--getWarningLoc'(V0) -> case V0 of {'Idris.Core.Core.UnreachableClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Prelude.Types.Just', V2} end(E0, E1, E2, E3)); {'Idris.Core.Core.ShadowingGlobalDefs', E4, E5} -> (fun (V5, V6) -> {'Idris.Prelude.Types.Just', V5} end(E4, E5)); {'Idris.Core.Core.Deprecated', E6} -> (fun (V7) -> {'Idris.Prelude.Types.Nothing'} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getErrorLoc'(V0) -> case V0 of {'Idris.Core.Core.Fatal', E0} -> (fun (V1) -> ('un--getErrorLoc'(V1)) end(E0)); {'Idris.Core.Core.CantConvert', E1, E2, E3, E4, E5} -> (fun (V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Just', V3} end(E1, E2, E3, E4, E5)); {'Idris.Core.Core.CantSolveEq', E6, E7, E8, E9, E10} -> (fun (V7, V8, V9, V10, V11) -> {'Idris.Prelude.Types.Just', V8} end(E6, E7, E8, E9, E10)); {'Idris.Core.Core.PatternVariableUnifies', E11, E12, E13, E14, E15} -> (fun (V12, V13, V14, V15, V16) -> {'Idris.Prelude.Types.Just', V13} end(E11, E12, E13, E14, E15)); {'Idris.Core.Core.CyclicMeta', E16, E17, E18, E19, E20} -> (fun (V17, V18, V19, V20, V21) -> {'Idris.Prelude.Types.Just', V18} end(E16, E17, E18, E19, E20)); {'Idris.Core.Core.WhenUnifying', E21, E22, E23, E24, E25, E26} -> (fun (V22, V23, V24, V25, V26, V27) -> {'Idris.Prelude.Types.Just', V23} end(E21, E22, E23, E24, E25, E26)); {'Idris.Core.Core.ValidCase', E27, E28, E29, E30} -> (fun (V28, V29, V30, V31) -> {'Idris.Prelude.Types.Just', V29} end(E27, E28, E29, E30)); {'Idris.Core.Core.UndefinedName', E31, E32} -> (fun (V32, V33) -> {'Idris.Prelude.Types.Just', V32} end(E31, E32)); {'Idris.Core.Core.InvisibleName', E33, E34, E35} -> (fun (V34, V35, V36) -> {'Idris.Prelude.Types.Just', V34} end(E33, E34, E35)); {'Idris.Core.Core.BadTypeConType', E36, E37} -> (fun (V37, V38) -> {'Idris.Prelude.Types.Just', V37} end(E36, E37)); {'Idris.Core.Core.BadDataConType', E38, E39, E40} -> (fun (V39, V40, V41) -> {'Idris.Prelude.Types.Just', V39} end(E38, E39, E40)); {'Idris.Core.Core.NotCovering', E41, E42, E43} -> (fun (V42, V43, V44) -> {'Idris.Prelude.Types.Just', V42} end(E41, E42, E43)); {'Idris.Core.Core.NotTotal', E44, E45, E46} -> (fun (V45, V46, V47) -> {'Idris.Prelude.Types.Just', V45} end(E44, E45, E46)); {'Idris.Core.Core.LinearUsed', E47, E48, E49} -> (fun (V48, V49, V50) -> {'Idris.Prelude.Types.Just', V48} end(E47, E48, E49)); {'Idris.Core.Core.LinearMisuse', E50, E51, E52, E53} -> (fun (V51, V52, V53, V54) -> {'Idris.Prelude.Types.Just', V51} end(E50, E51, E52, E53)); {'Idris.Core.Core.BorrowPartial', E54, E55, E56, E57, E58} -> (fun (V55, V56, V57, V58, V59) -> {'Idris.Prelude.Types.Just', V56} end(E54, E55, E56, E57, E58)); {'Idris.Core.Core.BorrowPartialType', E59, E60, E61, E62} -> (fun (V60, V61, V62, V63) -> {'Idris.Prelude.Types.Just', V61} end(E59, E60, E61, E62)); {'Idris.Core.Core.AmbiguousName', E63, E64} -> (fun (V64, V65) -> {'Idris.Prelude.Types.Just', V64} end(E63, E64)); {'Idris.Core.Core.AmbiguousElab', E65, E66, E67, E68} -> (fun (V66, V67, V68, V69) -> {'Idris.Prelude.Types.Just', V67} end(E65, E66, E67, E68)); {'Idris.Core.Core.AmbiguousSearch', E69, E70, E71, E72, E73} -> (fun (V70, V71, V72, V73, V74) -> {'Idris.Prelude.Types.Just', V71} end(E69, E70, E71, E72, E73)); {'Idris.Core.Core.AmbiguityTooDeep', E74, E75, E76} -> (fun (V75, V76, V77) -> {'Idris.Prelude.Types.Just', V75} end(E74, E75, E76)); {'Idris.Core.Core.AllFailed', E77} -> (fun (V78) -> case V78 of [E78 | E79] -> (fun (V79, V80) -> case V79 of {'Idris.Builtin.MkPair', E80, E81} -> (fun (V81, V82) -> ('un--getErrorLoc'(V82)) end(E80, E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E78, E79)); [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77)); {'Idris.Core.Core.RecordTypeNeeded', E82, E83, E84} -> (fun (V83, V84, V85) -> {'Idris.Prelude.Types.Just', V84} end(E82, E83, E84)); {'Idris.Core.Core.NotRecordField', E85, E86, E87} -> (fun (V86, V87, V88) -> {'Idris.Prelude.Types.Just', V86} end(E85, E86, E87)); {'Idris.Core.Core.NotRecordType', E88, E89} -> (fun (V89, V90) -> {'Idris.Prelude.Types.Just', V89} end(E88, E89)); {'Idris.Core.Core.IncompatibleFieldUpdate', E90, E91} -> (fun (V91, V92) -> {'Idris.Prelude.Types.Just', V91} end(E90, E91)); {'Idris.Core.Core.InvalidArgs', E92, E93, E94, E95, E96} -> (fun (V93, V94, V95, V96, V97) -> {'Idris.Prelude.Types.Just', V94} end(E92, E93, E94, E95, E96)); {'Idris.Core.Core.TryWithImplicits', E97, E98, E99, E100} -> (fun (V98, V99, V100, V101) -> {'Idris.Prelude.Types.Just', V99} end(E97, E98, E99, E100)); {'Idris.Core.Core.BadUnboundImplicit', E101, E102, E103, E104, E105} -> (fun (V102, V103, V104, V105, V106) -> {'Idris.Prelude.Types.Just', V103} end(E101, E102, E103, E104, E105)); {'Idris.Core.Core.CantSolveGoal', E106, E107, E108, E109} -> (fun (V107, V108, V109, V110) -> {'Idris.Prelude.Types.Just', V108} end(E106, E107, E108, E109)); {'Idris.Core.Core.DeterminingArg', E110, E111, E112, E113, E114, E115} -> (fun (V111, V112, V113, V114, V115, V116) -> {'Idris.Prelude.Types.Just', V112} end(E110, E111, E112, E113, E114, E115)); {'Idris.Core.Core.UnsolvedHoles', E116} -> (fun (V117) -> case V117 of [E117 | E118] -> (fun (V118, V119) -> case V118 of {'Idris.Builtin.MkPair', E119, E120} -> (fun (V120, V121) -> {'Idris.Prelude.Types.Just', V120} end(E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E117, E118)); [] -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E116)); {'Idris.Core.Core.CantInferArgType', E121, E122, E123, E124, E125, E126} -> (fun (V122, V123, V124, V125, V126, V127) -> {'Idris.Prelude.Types.Just', V123} end(E121, E122, E123, E124, E125, E126)); {'Idris.Core.Core.SolvedNamedHole', E127, E128, E129, E130, E131} -> (fun (V128, V129, V130, V131, V132) -> {'Idris.Prelude.Types.Just', V129} end(E127, E128, E129, E130, E131)); {'Idris.Core.Core.VisibilityError', E132, E133, E134, E135, E136} -> (fun (V133, V134, V135, V136, V137) -> {'Idris.Prelude.Types.Just', V133} end(E132, E133, E134, E135, E136)); {'Idris.Core.Core.NonLinearPattern', E137, E138} -> (fun (V138, V139) -> {'Idris.Prelude.Types.Just', V138} end(E137, E138)); {'Idris.Core.Core.BadPattern', E139, E140} -> (fun (V140, V141) -> {'Idris.Prelude.Types.Just', V140} end(E139, E140)); {'Idris.Core.Core.NoDeclaration', E141, E142} -> (fun (V142, V143) -> {'Idris.Prelude.Types.Just', V142} end(E141, E142)); {'Idris.Core.Core.AlreadyDefined', E143, E144} -> (fun (V144, V145) -> {'Idris.Prelude.Types.Just', V144} end(E143, E144)); {'Idris.Core.Core.NotFunctionType', E145, E146, E147, E148} -> (fun (V146, V147, V148, V149) -> {'Idris.Prelude.Types.Just', V147} end(E145, E146, E147, E148)); {'Idris.Core.Core.RewriteNoChange', E149, E150, E151, E152, E153} -> (fun (V150, V151, V152, V153, V154) -> {'Idris.Prelude.Types.Just', V151} end(E149, E150, E151, E152, E153)); {'Idris.Core.Core.NotRewriteRule', E154, E155, E156, E157} -> (fun (V155, V156, V157, V158) -> {'Idris.Prelude.Types.Just', V156} end(E154, E155, E156, E157)); {'Idris.Core.Core.CaseCompile', E158, E159, E160} -> (fun (V159, V160, V161) -> {'Idris.Prelude.Types.Just', V159} end(E158, E159, E160)); {'Idris.Core.Core.MatchTooSpecific', E161, E162, E163, E164} -> (fun (V162, V163, V164, V165) -> {'Idris.Prelude.Types.Just', V163} end(E161, E162, E163, E164)); {'Idris.Core.Core.BadDotPattern', E165, E166, E167, E168, E169, E170} -> (fun (V166, V167, V168, V169, V170, V171) -> {'Idris.Prelude.Types.Just', V167} end(E165, E166, E167, E168, E169, E170)); {'Idris.Core.Core.BadImplicit', E171, E172} -> (fun (V172, V173) -> {'Idris.Prelude.Types.Just', V172} end(E171, E172)); {'Idris.Core.Core.BadRunElab', E173, E174, E175, E176, E177} -> (fun (V174, V175, V176, V177, V178) -> {'Idris.Prelude.Types.Just', V175} end(E173, E174, E175, E176, E177)); {'Idris.Core.Core.GenericMsg', E178, E179} -> (fun (V179, V180) -> {'Idris.Prelude.Types.Just', V179} end(E178, E179)); {'Idris.Core.Core.TTCError', E180} -> (fun (V181) -> {'Idris.Prelude.Types.Nothing'} end(E180)); {'Idris.Core.Core.FileErr', E181, E182} -> (fun (V182, V183) -> {'Idris.Prelude.Types.Nothing'} end(E181, E182)); {'Idris.Core.Core.CantFindPackage', E183} -> (fun (V184) -> {'Idris.Prelude.Types.Nothing'} end(E183)); {'Idris.Core.Core.LitFail', E184} -> (fun (V185) -> {'Idris.Prelude.Types.Just', V185} end(E184)); {'Idris.Core.Core.LexFail', E185, E186} -> (fun (V186, V187) -> {'Idris.Prelude.Types.Just', V186} end(E185, E186)); {'Idris.Core.Core.ParseFail', E187, E188} -> (fun (V188, V189) -> {'Idris.Prelude.Types.Just', V188} end(E187, E188)); {'Idris.Core.Core.ModuleNotFound', E189, E190} -> (fun (V190, V191) -> {'Idris.Prelude.Types.Just', V190} end(E189, E190)); {'Idris.Core.Core.CyclicImports', E191} -> (fun (V192) -> {'Idris.Prelude.Types.Nothing'} end(E191)); {'Idris.Core.Core.ForceNeeded'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.Core.InternalError', E192} -> (fun (V193) -> {'Idris.Prelude.Types.Nothing'} end(E192)); {'Idris.Core.Core.UserError', E193} -> (fun (V194) -> {'Idris.Prelude.Types.Nothing'} end(E193)); {'Idris.Core.Core.NoForeignCC', E194} -> (fun (V195) -> {'Idris.Prelude.Types.Just', V195} end(E194)); {'Idris.Core.Core.BadMultiline', E195, E196} -> (fun (V196, V197) -> {'Idris.Prelude.Types.Just', V196} end(E195, E196)); {'Idris.Core.Core.InType', E197, E198, E199} -> (fun (V198, V199, V200) -> ('un--getErrorLoc'(V200)) end(E197, E198, E199)); {'Idris.Core.Core.InCon', E200, E201, E202} -> (fun (V201, V202, V203) -> ('un--getErrorLoc'(V203)) end(E200, E201, E202)); {'Idris.Core.Core.InLHS', E203, E204, E205} -> (fun (V204, V205, V206) -> ('un--getErrorLoc'(V206)) end(E203, E204, E205)); {'Idris.Core.Core.InRHS', E206, E207, E208} -> (fun (V207, V208, V209) -> ('un--getErrorLoc'(V209)) end(E206, E207, E208)); {'Idris.Core.Core.MaybeMisspelling', E209, E210} -> (fun (V210, V211) -> ('un--getErrorLoc'(V210)) end(E209, E210)); {'Idris.Core.Core.WarningAsError', E211} -> (fun (V212) -> ('un--getWarningLoc'(V212)) end(E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--get'(V0, V1, V2) -> begin (V3 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V3} end.
'un--for_'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> ('un--traverse_'(V2, V3, V4)) end end end, V0, V1)).
'un--for'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> ('un--traverse\x{27}'(V2, V3, [], V4)) end end end, V0, V1)).
'un--foldlC'(V0, V1, V2, V3) -> case V0 of {'Idris.Prelude.Interfaces.MkFoldable', E0, E1, E2, E3, E4, E5} -> (fun (V4, V5, V6, V7, V8, V9) -> (((((V5('erased'))('erased'))(fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> (('Idris.Idris2.Prelude.Basics':'un--flip'(V1, V12, V16))(V13)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end))(fun (V10) -> {'Idris.Prelude.Types.Right', V2} end))(V3)) end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--filterM'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ((V0(V3))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of 1 -> begin (V8 = ('un--filterM'(V0, V4, V2))), case V8 of {'Idris.Prelude.Types.Left', E4} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V10) -> {'Idris.Prelude.Types.Right', [V3 | V10]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('un--filterM'(V0, V4, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--coreRun'(V0, V1, V2, V3) -> begin (V4 = (V0(V3))), (('Idris.Idris2.Prelude.Types':'un--either'(fun () -> V1 end, fun () -> V2 end, V4))(V3)) end.
'un--coreLift_'(V0, V1) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V5) -> begin (V6 = (V0(V5))), {'Idris.Prelude.Types.Right', V6} end end, V1)).
'un--coreLift'(V0, V1) -> begin (V2 = (V0(V1))), {'Idris.Prelude.Types.Right', V2} end.
'un--coreFail'(V0, V1) -> {'Idris.Prelude.Types.Left', V0}.
'un--condC'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> fun (V4) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V5, V6) -> begin (V7 = (V5(V4))), case V7 of {'Idris.Prelude.Types.Left', E4} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V9) -> case V9 of 1 -> (V6(V4)); 0 -> (('un--condC'(V3, V1))(V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cond'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V4, V5) -> begin (V6 = (V4())), case V6 of 1 -> (V5()); 0 -> ('un--cond'(V3, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--catch'(V0, V1, V2) -> case V0 of {'Idris.Core.Core.dn--un--__mkCatchable', E0, E1, E2} -> (fun (V3, V4, V5) -> (((V4('erased'))(V1))(V2)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--breakpoint'(V0, V1) -> case V0 of {'Idris.Core.Core.dn--un--__mkCatchable', E0, E1, E2} -> (fun (V2, V3, V4) -> ((V4('erased'))(V1)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--anyM'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ((V0(V3))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> ('un--anyM'(V0, V4, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--allM'(V0, V1, V2) -> case V1 of [] -> {'Idris.Prelude.Types.Right', 1}; [E0 | E1] -> (fun (V3, V4) -> begin (V5 = ((V0(V3))(V2))), case V5 of {'Idris.Prelude.Types.Left', E2} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V7) -> case V7 of 1 -> ('un--allM'(V0, V4, V2)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un-->>='(V0, V1, V2) -> begin (V3 = (V0(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> ((V1(V5))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un-->>'(V0, V1, V2) -> begin (V3 = (V0(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> (V1(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un-->=>'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V3) -> fun (V4) -> fun (V5) -> begin (V6 = (V3(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ((V4(V8))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V1, (V0(V2)))).
'un--=<<'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> begin (V5 = (V2(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ((V3(V7))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V0, V1)).
'un--<=<'(V0, V1) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V5) -> fun (V6) -> fun (V7) -> begin (V8 = (V5(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> ((V6(V10))(V7)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3, (V2(V4)))) end end end, V0, V1)).
'un--<*>'(V0, V1, V2) -> begin (V11 = begin (V9 = fun (V3) -> fun (V4) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V4 of {'Idris.Prelude.Types.Right', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', (V6(V7))} end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), begin (V10 = (V0(V2))), (V9(V10)) end end), begin (V12 = (V1(V2))), (V11(V12)) end end.
'un--<*'(V0, V1, V2) -> begin (V23 = begin (V21 = fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--<*'({'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', (V7(V10))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V12} end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> case V16 of {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Right', (V18(V19))} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, V3, V4)) end end), begin (V22 = (V0(V2))), (V21(V22)) end end), begin (V24 = (V1(V2))), (V23(V24)) end end.
'un--<$>'(V0, V1, V2) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', (V0(V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1, V2)).
'un--<$'(V0, V1, V2) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V3) -> case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', V0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V1, V2)).
'un--*>'(V0, V1, V2) -> begin (V23 = begin (V21 = fun (V3) -> fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'un--*>'({'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', (V7(V10))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', V12} end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> case V16 of {'Idris.Prelude.Types.Right', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Right', (V18(V19))} end(E4)); {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end}, V3, V4)) end end), begin (V22 = (V0(V2))), (V21(V22)) end end), begin (V24 = (V1(V2))), (V23(V24)) end end.
