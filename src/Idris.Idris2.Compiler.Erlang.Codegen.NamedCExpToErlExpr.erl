-module('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--traverseVect'/6,
  'un--readExports'/3,
  'un--readConAltFun'/7,
  'un--readConAlt'/7,
  'un--internalArity'/1,
  'un--genOp'/4,
  'un--genNmExp'/5,
  'un--genForeign'/5,
  'un--genExtPrim'/6,
  'un--genDef'/6,
  'un--genDecodeTuple'/5,
  'un--genDecode'/5,
  'un--genConstant'/1,
  'un--genConstAlt'/6,
  'un--genConAlt'/7,
  'un--genCon'/5,
  'un--externalArity'/1,
  'un--argsToErlMatchers'/1
]).
'un--traverseVect'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V6, V7) -> begin (V8 = (('un--genNmExp'(V0, V1, V2, V3, V6))(V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('un--traverseVect'(V0, V1, V2, V3, V7, V5))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', V10, V13}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--readExports'(V0, V1, V2) -> case V2 of {'Idris.Core.CompileExpr.NmCon', E0, E1, E2, E3, E4} -> (fun (V3, V4, V5, V6, V7) -> case V4 of {'Idris.Core.Name.NS', E5, E6} -> (fun (V8, V9) -> case V9 of {'Idris.Core.Name.UN', E7} -> (fun (V10) -> case V10 of <<"Fun"/utf8>> -> case V7 of [E8 | E9] -> (fun (V11, V12) -> case V12 of [E10 | E11] -> (fun (V13, V14) -> case V13 of {'Idris.Core.CompileExpr.NmPrimVal', E12, E13} -> (fun (V15, V16) -> case V16 of {'Idris.Core.TT.Str', E14} -> (fun (V17) -> case V14 of [E15 | E16] -> (fun (V18, V19) -> case V19 of [] -> begin (V20 = {'Idris.Core.CompileExpr.NmCon', V3, {'Idris.Core.Name.NS', V8, {'Idris.Core.Name.UN', <<"Fun"/utf8>>}}, V5, V6, [V11 | [{'Idris.Core.CompileExpr.NmPrimVal', V15, {'Idris.Core.TT.Str', V17}} | [V18 | []]]]}), fun (V21) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V8, ('Idris.Idris2.Compiler.Erlang.Name':'un--erlangIONS'()))) of 1 -> begin (V22 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>)), V21))), case V22 of {'Idris.Prelude.Types.Left', E17} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V24) -> begin (V25 = (('un--genNmExp'(V24, 0, V0, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V18))(V21))), case V25 of {'Idris.Prelude.Types.Left', E19} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V27) -> begin (V28 = ('un--internalArity'(V11))), begin (V29 = ('un--externalArity'(V28))), begin (V30 = (('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVars'(V24, V29))(V21))), case V30 of {'Idris.Prelude.Types.Left', E21} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V32) -> begin (V34 = case V28 of {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} -> (fun () -> V27 end()); {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', E23} -> (fun (V33) -> {'Idris.Compiler.Erlang.IR.ErlExpr.EApp', V1, V27, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genArgsToLocals'(V1, V32))} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V35 = {'Idris.Compiler.Erlang.IR.ErlExpr.MkFunDecl', V1, 1, V17, V32, V34}), {'Idris.Prelude.Types.Right', [V35 | []]} end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V20))))}, V21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V36)) end end end(E15, E16)); _ -> fun (V37) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V37)) end end end(E14)); _ -> fun (V38) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V38)) end end end(E12, E13)); _ -> fun (V39) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V39)) end end end(E10, E11)); _ -> fun (V40) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V40)) end end end(E8, E9)); _ -> fun (V41) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V41)) end end; <<"Combine"/utf8>> -> case V7 of [E24 | E25] -> (fun (V42, V43) -> case V43 of [E26 | E27] -> (fun (V44, V45) -> case V45 of [] -> begin (V46 = {'Idris.Core.CompileExpr.NmCon', V3, {'Idris.Core.Name.NS', V8, {'Idris.Core.Name.UN', <<"Combine"/utf8>>}}, V5, V6, [V42 | [V44 | []]]}), fun (V47) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V8, ('Idris.Idris2.Compiler.Erlang.Name':'un--erlangIONS'()))) of 1 -> begin (V48 = (('un--readExports'(V0, V1, V42))(V47))), case V48 of {'Idris.Prelude.Types.Left', E28} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V50) -> begin (V51 = (('un--readExports'(V0, V1, V44))(V47))), case V51 of {'Idris.Prelude.Types.Left', E30} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V50, V53))} end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V46))))}, V47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V54) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V54)) end end end(E26, E27)); _ -> fun (V55) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V55)) end end end(E24, E25)); _ -> fun (V56) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V56)) end end; _ -> fun (V57) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V57)) end end end(E7)); _ -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V58)) end end end(E5, E6)); _ -> fun (V59) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V59)) end end end(E0, E1, E2, E3, E4)); _ -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid export: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_NamedCExp'(V2))))}, V60)) end end.
'un--readConAltFun'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = (('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genCurry'(V0, V1, V2, V5, {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V1, V9}))(V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = {'Idris.Compiler.Erlang.IR.ErlExpr.MTransform', {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, V9, V12}), {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTransform', V13, V3, V4}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readConAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Core.Name.UN', E2} -> (fun (V9) -> begin (V10 = {'Idris.Core.Name.NS', V7, {'Idris.Core.Name.UN', V9}}), case ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V7)) of [E3 | E4] -> (fun (V11, V12) -> case V11 of <<"Basics"/utf8>> -> case V12 of [E5 | E6] -> (fun (V13, V14) -> case V13 of <<"Prelude"/utf8>> -> case V14 of [] -> case V9 of <<"Nil"/utf8>> -> fun (V15) -> case V5 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MConst', {'Idris.Compiler.Erlang.IR.ErlExpr.MNil'}, V6}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"::"/utf8>> -> case V5 of [E7 | E8] -> (fun (V16, V17) -> fun (V18) -> case V17 of [E9 | E10] -> (fun (V19, V20) -> case V20 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MCons', {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, V16, V19, V6}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E9, E10)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E7, E8)); _ -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E5, E6)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"Types"/utf8>> -> case V12 of [E11 | E12] -> (fun (V26, V27) -> case V26 of <<"Erlang"/utf8>> -> case V27 of [] -> case V9 of <<"MkAtom"/utf8>> -> fun (V28) -> case V5 of [E13 | E14] -> (fun (V29, V30) -> case V30 of [] -> begin (V31 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V28))), case V31 of {'Idris.Prelude.Types.Left', E15} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V33) -> begin (V34 = {'Idris.Compiler.Erlang.IR.ErlExpr.MTransform', {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, V33, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genAtomToString'(V3, {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V3, V33}))}), {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTransform', V34, V29, V6}} end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E13, E14)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkCharlist"/utf8>> -> fun (V35) -> case V5 of [E17 | E18] -> (fun (V36, V37) -> case V37 of [] -> begin (V38 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V35))), case V38 of {'Idris.Prelude.Types.Left', E19} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V40) -> begin (V41 = {'Idris.Compiler.Erlang.IR.ErlExpr.MTransform', {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, V40, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [{'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V3, V40} | []]))}), {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTransform', V41, V36, V6}} end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E17, E18)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkTuple0"/utf8>> -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple1"/utf8>> -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple2"/utf8>> -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple3"/utf8>> -> fun (V45) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple4"/utf8>> -> fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple5"/utf8>> -> fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple6"/utf8>> -> fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple7"/utf8>> -> fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkTuple8"/utf8>> -> fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V5)), V6}} end; <<"MkFun0"/utf8>> -> case V5 of [E21 | E22] -> (fun (V51, V52) -> fun (V53) -> case V52 of [] -> ('un--readConAltFun'(V0, V3, 0, V51, V6, fun (V54) -> V54 end, V53)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E21, E22)); _ -> fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkFun1"/utf8>> -> case V5 of [E23 | E24] -> (fun (V56, V57) -> fun (V58) -> case V57 of [] -> ('un--readConAltFun'(V0, V3, (1 + 0), V56, V6, fun (V59) -> V59 end, V58)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E23, E24)); _ -> fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkFun2"/utf8>> -> case V5 of [E25 | E26] -> (fun (V61, V62) -> fun (V63) -> case V62 of [] -> ('un--readConAltFun'(V0, V3, (1 + (1 + 0)), V61, V6, fun (V64) -> V64 end, V63)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E25, E26)); _ -> fun (V65) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkFun3"/utf8>> -> case V5 of [E27 | E28] -> (fun (V66, V67) -> fun (V68) -> case V67 of [] -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + 0))), V66, V6, fun (V69) -> V69 end, V68)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E27, E28)); _ -> fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkFun4"/utf8>> -> case V5 of [E29 | E30] -> (fun (V71, V72) -> fun (V73) -> case V72 of [] -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + 0)))), V71, V6, fun (V74) -> V74 end, V73)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E29, E30)); _ -> fun (V75) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkFun5"/utf8>> -> case V5 of [E31 | E32] -> (fun (V76, V77) -> fun (V78) -> case V77 of [] -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + (1 + 0))))), V76, V6, fun (V79) -> V79 end, V78)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E31, E32)); _ -> fun (V80) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkFun6"/utf8>> -> case V5 of [E33 | E34] -> (fun (V81, V82) -> fun (V83) -> case V82 of [] -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), V81, V6, fun (V84) -> V84 end, V83)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E33, E34)); _ -> fun (V85) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkFun7"/utf8>> -> case V5 of [E35 | E36] -> (fun (V86, V87) -> fun (V88) -> case V87 of [] -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), V86, V6, fun (V89) -> V89 end, V88)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E35, E36)); _ -> fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkFun8"/utf8>> -> case V5 of [E37 | E38] -> (fun (V91, V92) -> fun (V93) -> case V92 of [] -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V91, V6, fun (V94) -> V94 end, V93)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E37, E38)); _ -> fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun0"/utf8>> -> fun (V96) -> case V5 of [E39 | E40] -> (fun (V97, V98) -> case V98 of [] -> begin (V99 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V96))), case V99 of {'Idris.Prelude.Types.Left', E41} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V101) -> ('un--readConAltFun'(V0, V3, 0, V97, V6, fun (V102) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V101, V102)) end, V96)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E39, E40)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun1"/utf8>> -> fun (V103) -> case V5 of [E43 | E44] -> (fun (V104, V105) -> case V105 of [] -> begin (V106 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V103))), case V106 of {'Idris.Prelude.Types.Left', E45} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V108) -> ('un--readConAltFun'(V0, V3, (1 + 0), V104, V6, fun (V109) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V108, V109)) end, V103)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E43, E44)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun2"/utf8>> -> fun (V110) -> case V5 of [E47 | E48] -> (fun (V111, V112) -> case V112 of [] -> begin (V113 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V110))), case V113 of {'Idris.Prelude.Types.Left', E49} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V115) -> ('un--readConAltFun'(V0, V3, (1 + (1 + 0)), V111, V6, fun (V116) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V115, V116)) end, V110)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E47, E48)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun3"/utf8>> -> fun (V117) -> case V5 of [E51 | E52] -> (fun (V118, V119) -> case V119 of [] -> begin (V120 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V117))), case V120 of {'Idris.Prelude.Types.Left', E53} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V122) -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + 0))), V118, V6, fun (V123) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V122, V123)) end, V117)) end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E51, E52)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun4"/utf8>> -> fun (V124) -> case V5 of [E55 | E56] -> (fun (V125, V126) -> case V126 of [] -> begin (V127 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V124))), case V127 of {'Idris.Prelude.Types.Left', E57} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V129) -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + 0)))), V125, V6, fun (V130) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V129, V130)) end, V124)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E55, E56)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun5"/utf8>> -> fun (V131) -> case V5 of [E59 | E60] -> (fun (V132, V133) -> case V133 of [] -> begin (V134 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V131))), case V134 of {'Idris.Prelude.Types.Left', E61} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V136) -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + (1 + 0))))), V132, V6, fun (V137) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V136, V137)) end, V131)) end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E59, E60)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun6"/utf8>> -> fun (V138) -> case V5 of [E63 | E64] -> (fun (V139, V140) -> case V140 of [] -> begin (V141 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V138))), case V141 of {'Idris.Prelude.Types.Left', E65} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V143) -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), V139, V6, fun (V144) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V143, V144)) end, V138)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E63, E64)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun7"/utf8>> -> fun (V145) -> case V5 of [E67 | E68] -> (fun (V146, V147) -> case V147 of [] -> begin (V148 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V145))), case V148 of {'Idris.Prelude.Types.Left', E69} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V150) -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), V146, V6, fun (V151) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V150, V151)) end, V145)) end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E67, E68)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MkIOFun8"/utf8>> -> fun (V152) -> case V5 of [E71 | E72] -> (fun (V153, V154) -> case V154 of [] -> begin (V155 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V152))), case V155 of {'Idris.Prelude.Types.Left', E73} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V157) -> ('un--readConAltFun'(V0, V3, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V153, V6, fun (V158) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIO'(V3, V157, V158)) end, V152)) end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E71, E72)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V159) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V160) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V161) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E11, E12)); _ -> fun (V162) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"MaybeImproperList"/utf8>> -> case V12 of [E75 | E76] -> (fun (V163, V164) -> case V163 of <<"Types"/utf8>> -> case V164 of [E77 | E78] -> (fun (V165, V166) -> case V165 of <<"Erlang"/utf8>> -> case V166 of [] -> case V9 of <<"Nil"/utf8>> -> fun (V167) -> case V5 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MConst', {'Idris.Compiler.Erlang.IR.ErlExpr.MNil'}, V6}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"::"/utf8>> -> case V5 of [E79 | E80] -> (fun (V168, V169) -> fun (V170) -> case V169 of [E81 | E82] -> (fun (V171, V172) -> case V172 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MCons', {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, V168, V171, V6}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E81, E82)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E79, E80)); _ -> fun (V173) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V174) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V175) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V176) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E77, E78)); _ -> fun (V177) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V178) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E75, E76)); _ -> fun (V179) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"ProperList"/utf8>> -> case V12 of [E83 | E84] -> (fun (V180, V181) -> case V180 of <<"Types"/utf8>> -> case V181 of [E85 | E86] -> (fun (V182, V183) -> case V182 of <<"Erlang"/utf8>> -> case V183 of [] -> case V9 of <<"Nil"/utf8>> -> fun (V184) -> case V5 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MConst', {'Idris.Compiler.Erlang.IR.ErlExpr.MNil'}, V6}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; <<"::"/utf8>> -> case V5 of [E87 | E88] -> (fun (V185, V186) -> fun (V187) -> case V186 of [E89 | E90] -> (fun (V188, V189) -> case V189 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MCons', {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, V185, V188, V6}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end(E89, E90)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E87, E88)); _ -> fun (V190) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V191) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V192) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V193) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E85, E86)); _ -> fun (V194) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V195) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E83, E84)); _ -> fun (V196) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end; _ -> fun (V197) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E3, E4)); _ -> fun (V198) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V10)), ('un--argsToErlMatchers'(V5)), V6}} end end end end(E2)); _ -> fun (V199) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V4)), ('un--argsToErlMatchers'(V5)), V6}} end end end(E0, E1)); _ -> fun (V200) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MTaggedTuple', ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V4)), ('un--argsToErlMatchers'(V5)), V6}} end end.
'un--internalArity'(V0) -> case V0 of {'Idris.Core.CompileExpr.NmCon', E0, E1, E2, E3, E4} -> (fun (V1, V2, V3, V4, V5) -> case V2 of {'Idris.Core.Name.NS', E5, E6} -> (fun (V6, V7) -> case V7 of {'Idris.Core.Name.UN', E7} -> (fun (V8) -> case ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V6, ('Idris.Idris2.Compiler.Erlang.Name':'un--erlangTypesNS'()))) of 1 -> case V8 of <<"ETFun"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + 0)}; <<"ETErlFun0"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 0}; <<"ETErlFun1"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + 0)}; <<"ETErlFun2"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + 0))}; <<"ETErlFun3"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + 0)))}; <<"ETErlFun4"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + 0))))}; <<"ETErlFun5"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + (1 + 0)))))}; <<"ETErlFun6"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + (1 + (1 + 0))))))}; <<"ETErlFun7"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))}; <<"ETErlFun8"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))}; <<"ETErlIOFun0"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', 0}; <<"ETErlIOFun1"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + 0)}; <<"ETErlIOFun2"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + 0))}; <<"ETErlIOFun3"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + 0)))}; <<"ETErlIOFun4"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + 0))))}; <<"ETErlIOFun5"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + (1 + 0)))))}; <<"ETErlIOFun6"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + (1 + (1 + 0))))))}; <<"ETErlIOFun7"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))}; <<"ETErlIOFun8"/utf8>> -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))}; _ -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end; 0 -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end end(E5, E6)); _ -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end end(E0, E1, E2, E3, E4)); _ -> {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} end.
'un--genOp'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.TT.Add', E0} -> (fun (V4) -> case V4 of {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E9, E10} -> (fun (V5, V6) -> case V6 of {'Idris.Data.Vect.::', E15, E16} -> (fun (V7, V8) -> case V8 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntAdd'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V5, V7))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E17, E18} -> (fun (V10, V11) -> fun (V12) -> case V11 of {'Idris.Data.Vect.::', E19, E20} -> (fun (V13, V14) -> case V14 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V10, V13}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16)); _ -> case V3 of {'Idris.Data.Vect.::', E11, E12} -> (fun (V15, V16) -> fun (V17) -> case V16 of {'Idris.Data.Vect.::', E13, E14} -> (fun (V18, V19) -> case V19 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V15, V18}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> case V3 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V20, V21) -> fun (V22) -> case V21 of {'Idris.Data.Vect.::', E7, E8} -> (fun (V23, V24) -> case V24 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V20, V23}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E25, E26} -> (fun (V25, V26) -> case V26 of {'Idris.Data.Vect.::', E31, E32} -> (fun (V27, V28) -> case V28 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V29) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntAdd'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V25, V27))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E33, E34} -> (fun (V30, V31) -> fun (V32) -> case V31 of {'Idris.Data.Vect.::', E35, E36} -> (fun (V33, V34) -> case V34 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V30, V33}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32)); _ -> case V3 of {'Idris.Data.Vect.::', E27, E28} -> (fun (V35, V36) -> fun (V37) -> case V36 of {'Idris.Data.Vect.::', E29, E30} -> (fun (V38, V39) -> case V39 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V35, V38}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25, E26)); _ -> case V3 of {'Idris.Data.Vect.::', E21, E22} -> (fun (V40, V41) -> fun (V42) -> case V41 of {'Idris.Data.Vect.::', E23, E24} -> (fun (V43, V44) -> case V44 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V40, V43}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E41, E42} -> (fun (V45, V46) -> case V46 of {'Idris.Data.Vect.::', E47, E48} -> (fun (V47, V48) -> case V48 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V49) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntAdd'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V45, V47))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E49, E50} -> (fun (V50, V51) -> fun (V52) -> case V51 of {'Idris.Data.Vect.::', E51, E52} -> (fun (V53, V54) -> case V54 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V50, V53}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47, E48)); _ -> case V3 of {'Idris.Data.Vect.::', E43, E44} -> (fun (V55, V56) -> fun (V57) -> case V56 of {'Idris.Data.Vect.::', E45, E46} -> (fun (V58, V59) -> case V59 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V55, V58}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41, E42)); _ -> case V3 of {'Idris.Data.Vect.::', E37, E38} -> (fun (V60, V61) -> fun (V62) -> case V61 of {'Idris.Data.Vect.::', E39, E40} -> (fun (V63, V64) -> case V64 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V60, V63}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E57, E58} -> (fun (V65, V66) -> case V66 of {'Idris.Data.Vect.::', E63, E64} -> (fun (V67, V68) -> case V68 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V69) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntAdd'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))), V65, V67))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E65, E66} -> (fun (V70, V71) -> fun (V72) -> case V71 of {'Idris.Data.Vect.::', E67, E68} -> (fun (V73, V74) -> case V74 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V70, V73}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E63, E64)); _ -> case V3 of {'Idris.Data.Vect.::', E59, E60} -> (fun (V75, V76) -> fun (V77) -> case V76 of {'Idris.Data.Vect.::', E61, E62} -> (fun (V78, V79) -> case V79 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V75, V78}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57, E58)); _ -> case V3 of {'Idris.Data.Vect.::', E53, E54} -> (fun (V80, V81) -> fun (V82) -> case V81 of {'Idris.Data.Vect.::', E55, E56} -> (fun (V83, V84) -> case V84 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V80, V83}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E73, E74} -> (fun (V85, V86) -> case V86 of {'Idris.Data.Vect.::', E79, E80} -> (fun (V87, V88) -> case V88 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V89) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntAdd'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V85, V87))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E81, E82} -> (fun (V90, V91) -> fun (V92) -> case V91 of {'Idris.Data.Vect.::', E83, E84} -> (fun (V93, V94) -> case V94 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V90, V93}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79, E80)); _ -> case V3 of {'Idris.Data.Vect.::', E75, E76} -> (fun (V95, V96) -> fun (V97) -> case V96 of {'Idris.Data.Vect.::', E77, E78} -> (fun (V98, V99) -> case V99 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V95, V98}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73, E74)); _ -> case V3 of {'Idris.Data.Vect.::', E69, E70} -> (fun (V100, V101) -> fun (V102) -> case V101 of {'Idris.Data.Vect.::', E71, E72} -> (fun (V103, V104) -> case V104 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V100, V103}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E1, E2} -> (fun (V105, V106) -> fun (V107) -> case V106 of {'Idris.Data.Vect.::', E3, E4} -> (fun (V108, V109) -> case V109 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"+"/utf8>>, V105, V108}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.Sub', E85} -> (fun (V110) -> case V110 of {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E94, E95} -> (fun (V111, V112) -> case V112 of {'Idris.Data.Vect.::', E100, E101} -> (fun (V113, V114) -> case V114 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V115) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntSub'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V111, V113))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E102, E103} -> (fun (V116, V117) -> fun (V118) -> case V117 of {'Idris.Data.Vect.::', E104, E105} -> (fun (V119, V120) -> case V120 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V116, V119}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100, E101)); _ -> case V3 of {'Idris.Data.Vect.::', E96, E97} -> (fun (V121, V122) -> fun (V123) -> case V122 of {'Idris.Data.Vect.::', E98, E99} -> (fun (V124, V125) -> case V125 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V121, V124}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94, E95)); _ -> case V3 of {'Idris.Data.Vect.::', E90, E91} -> (fun (V126, V127) -> fun (V128) -> case V127 of {'Idris.Data.Vect.::', E92, E93} -> (fun (V129, V130) -> case V130 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V126, V129}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E110, E111} -> (fun (V131, V132) -> case V132 of {'Idris.Data.Vect.::', E116, E117} -> (fun (V133, V134) -> case V134 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V135) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntSub'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V131, V133))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E118, E119} -> (fun (V136, V137) -> fun (V138) -> case V137 of {'Idris.Data.Vect.::', E120, E121} -> (fun (V139, V140) -> case V140 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V136, V139}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E120, E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118, E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116, E117)); _ -> case V3 of {'Idris.Data.Vect.::', E112, E113} -> (fun (V141, V142) -> fun (V143) -> case V142 of {'Idris.Data.Vect.::', E114, E115} -> (fun (V144, V145) -> case V145 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V141, V144}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E114, E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112, E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110, E111)); _ -> case V3 of {'Idris.Data.Vect.::', E106, E107} -> (fun (V146, V147) -> fun (V148) -> case V147 of {'Idris.Data.Vect.::', E108, E109} -> (fun (V149, V150) -> case V150 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V146, V149}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106, E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E126, E127} -> (fun (V151, V152) -> case V152 of {'Idris.Data.Vect.::', E132, E133} -> (fun (V153, V154) -> case V154 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V155) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntSub'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V151, V153))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E134, E135} -> (fun (V156, V157) -> fun (V158) -> case V157 of {'Idris.Data.Vect.::', E136, E137} -> (fun (V159, V160) -> case V160 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V156, V159}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E136, E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132, E133)); _ -> case V3 of {'Idris.Data.Vect.::', E128, E129} -> (fun (V161, V162) -> fun (V163) -> case V162 of {'Idris.Data.Vect.::', E130, E131} -> (fun (V164, V165) -> case V165 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V161, V164}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E130, E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128, E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126, E127)); _ -> case V3 of {'Idris.Data.Vect.::', E122, E123} -> (fun (V166, V167) -> fun (V168) -> case V167 of {'Idris.Data.Vect.::', E124, E125} -> (fun (V169, V170) -> case V170 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V166, V169}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E142, E143} -> (fun (V171, V172) -> case V172 of {'Idris.Data.Vect.::', E148, E149} -> (fun (V173, V174) -> case V174 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V175) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntSub'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))), V171, V173))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E150, E151} -> (fun (V176, V177) -> fun (V178) -> case V177 of {'Idris.Data.Vect.::', E152, E153} -> (fun (V179, V180) -> case V180 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V176, V179}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E152, E153)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E150, E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E148, E149)); _ -> case V3 of {'Idris.Data.Vect.::', E144, E145} -> (fun (V181, V182) -> fun (V183) -> case V182 of {'Idris.Data.Vect.::', E146, E147} -> (fun (V184, V185) -> case V185 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V181, V184}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144, E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E142, E143)); _ -> case V3 of {'Idris.Data.Vect.::', E138, E139} -> (fun (V186, V187) -> fun (V188) -> case V187 of {'Idris.Data.Vect.::', E140, E141} -> (fun (V189, V190) -> case V190 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V186, V189}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138, E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E158, E159} -> (fun (V191, V192) -> case V192 of {'Idris.Data.Vect.::', E164, E165} -> (fun (V193, V194) -> case V194 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V195) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntSub'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V191, V193))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E166, E167} -> (fun (V196, V197) -> fun (V198) -> case V197 of {'Idris.Data.Vect.::', E168, E169} -> (fun (V199, V200) -> case V200 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V196, V199}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E166, E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164, E165)); _ -> case V3 of {'Idris.Data.Vect.::', E160, E161} -> (fun (V201, V202) -> fun (V203) -> case V202 of {'Idris.Data.Vect.::', E162, E163} -> (fun (V204, V205) -> case V205 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V201, V204}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E158, E159)); _ -> case V3 of {'Idris.Data.Vect.::', E154, E155} -> (fun (V206, V207) -> fun (V208) -> case V207 of {'Idris.Data.Vect.::', E156, E157} -> (fun (V209, V210) -> case V210 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V206, V209}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E156, E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E86, E87} -> (fun (V211, V212) -> fun (V213) -> case V212 of {'Idris.Data.Vect.::', E88, E89} -> (fun (V214, V215) -> case V215 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"-"/utf8>>, V211, V214}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); {'Idris.Core.TT.Mul', E170} -> (fun (V216) -> case V216 of {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E179, E180} -> (fun (V217, V218) -> case V218 of {'Idris.Data.Vect.::', E185, E186} -> (fun (V219, V220) -> case V220 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V221) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntMult'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V217, V219))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E187, E188} -> (fun (V222, V223) -> fun (V224) -> case V223 of {'Idris.Data.Vect.::', E189, E190} -> (fun (V225, V226) -> case V226 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V222, V225}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E187, E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E185, E186)); _ -> case V3 of {'Idris.Data.Vect.::', E181, E182} -> (fun (V227, V228) -> fun (V229) -> case V228 of {'Idris.Data.Vect.::', E183, E184} -> (fun (V230, V231) -> case V231 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V227, V230}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E183, E184)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E181, E182)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E179, E180)); _ -> case V3 of {'Idris.Data.Vect.::', E175, E176} -> (fun (V232, V233) -> fun (V234) -> case V233 of {'Idris.Data.Vect.::', E177, E178} -> (fun (V235, V236) -> case V236 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V232, V235}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E177, E178)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E175, E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E195, E196} -> (fun (V237, V238) -> case V238 of {'Idris.Data.Vect.::', E201, E202} -> (fun (V239, V240) -> case V240 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V241) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntMult'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V237, V239))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E203, E204} -> (fun (V242, V243) -> fun (V244) -> case V243 of {'Idris.Data.Vect.::', E205, E206} -> (fun (V245, V246) -> case V246 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V242, V245}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E205, E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E203, E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E201, E202)); _ -> case V3 of {'Idris.Data.Vect.::', E197, E198} -> (fun (V247, V248) -> fun (V249) -> case V248 of {'Idris.Data.Vect.::', E199, E200} -> (fun (V250, V251) -> case V251 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V247, V250}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E199, E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E197, E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E195, E196)); _ -> case V3 of {'Idris.Data.Vect.::', E191, E192} -> (fun (V252, V253) -> fun (V254) -> case V253 of {'Idris.Data.Vect.::', E193, E194} -> (fun (V255, V256) -> case V256 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V252, V255}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E193, E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E191, E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E211, E212} -> (fun (V257, V258) -> case V258 of {'Idris.Data.Vect.::', E217, E218} -> (fun (V259, V260) -> case V260 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V261) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntMult'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V257, V259))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E219, E220} -> (fun (V262, V263) -> fun (V264) -> case V263 of {'Idris.Data.Vect.::', E221, E222} -> (fun (V265, V266) -> case V266 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V262, V265}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E221, E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E219, E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E217, E218)); _ -> case V3 of {'Idris.Data.Vect.::', E213, E214} -> (fun (V267, V268) -> fun (V269) -> case V268 of {'Idris.Data.Vect.::', E215, E216} -> (fun (V270, V271) -> case V271 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V267, V270}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E215, E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E213, E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E211, E212)); _ -> case V3 of {'Idris.Data.Vect.::', E207, E208} -> (fun (V272, V273) -> fun (V274) -> case V273 of {'Idris.Data.Vect.::', E209, E210} -> (fun (V275, V276) -> case V276 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V272, V275}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E209, E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E207, E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E227, E228} -> (fun (V277, V278) -> case V278 of {'Idris.Data.Vect.::', E233, E234} -> (fun (V279, V280) -> case V280 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V281) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntMult'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))), V277, V279))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E235, E236} -> (fun (V282, V283) -> fun (V284) -> case V283 of {'Idris.Data.Vect.::', E237, E238} -> (fun (V285, V286) -> case V286 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V282, V285}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E237, E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E235, E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E233, E234)); _ -> case V3 of {'Idris.Data.Vect.::', E229, E230} -> (fun (V287, V288) -> fun (V289) -> case V288 of {'Idris.Data.Vect.::', E231, E232} -> (fun (V290, V291) -> case V291 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V287, V290}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E231, E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E229, E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E227, E228)); _ -> case V3 of {'Idris.Data.Vect.::', E223, E224} -> (fun (V292, V293) -> fun (V294) -> case V293 of {'Idris.Data.Vect.::', E225, E226} -> (fun (V295, V296) -> case V296 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V292, V295}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E225, E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E243, E244} -> (fun (V297, V298) -> case V298 of {'Idris.Data.Vect.::', E249, E250} -> (fun (V299, V300) -> case V300 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V301) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntMult'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V297, V299))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E251, E252} -> (fun (V302, V303) -> fun (V304) -> case V303 of {'Idris.Data.Vect.::', E253, E254} -> (fun (V305, V306) -> case V306 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V302, V305}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E253, E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E251, E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E249, E250)); _ -> case V3 of {'Idris.Data.Vect.::', E245, E246} -> (fun (V307, V308) -> fun (V309) -> case V308 of {'Idris.Data.Vect.::', E247, E248} -> (fun (V310, V311) -> case V311 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V307, V310}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E247, E248)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E245, E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E243, E244)); _ -> case V3 of {'Idris.Data.Vect.::', E239, E240} -> (fun (V312, V313) -> fun (V314) -> case V313 of {'Idris.Data.Vect.::', E241, E242} -> (fun (V315, V316) -> case V316 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V312, V315}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E241, E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E239, E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E171, E172} -> (fun (V317, V318) -> fun (V319) -> case V318 of {'Idris.Data.Vect.::', E173, E174} -> (fun (V320, V321) -> case V321 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"*"/utf8>>, V317, V320}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E171, E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E170)); {'Idris.Core.TT.Div', E255} -> (fun (V322) -> case V322 of {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E264, E265} -> (fun (V323, V324) -> case V324 of {'Idris.Data.Vect.::', E270, E271} -> (fun (V325, V326) -> case V326 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V327) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntDiv'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V323, V325))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E272, E273} -> (fun (V328, V329) -> fun (V330) -> case V329 of {'Idris.Data.Vect.::', E274, E275} -> (fun (V331, V332) -> case V332 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V328, V331}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E274, E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E272, E273)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E270, E271)); _ -> case V3 of {'Idris.Data.Vect.::', E266, E267} -> (fun (V333, V334) -> fun (V335) -> case V334 of {'Idris.Data.Vect.::', E268, E269} -> (fun (V336, V337) -> case V337 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V333, V336}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E268, E269)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E266, E267)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E264, E265)); _ -> case V3 of {'Idris.Data.Vect.::', E260, E261} -> (fun (V338, V339) -> fun (V340) -> case V339 of {'Idris.Data.Vect.::', E262, E263} -> (fun (V341, V342) -> case V342 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V338, V341}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E262, E263)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E260, E261)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E280, E281} -> (fun (V343, V344) -> case V344 of {'Idris.Data.Vect.::', E286, E287} -> (fun (V345, V346) -> case V346 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V347) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntDiv'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V343, V345))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E288, E289} -> (fun (V348, V349) -> fun (V350) -> case V349 of {'Idris.Data.Vect.::', E290, E291} -> (fun (V351, V352) -> case V352 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V348, V351}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E290, E291)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E288, E289)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E286, E287)); _ -> case V3 of {'Idris.Data.Vect.::', E282, E283} -> (fun (V353, V354) -> fun (V355) -> case V354 of {'Idris.Data.Vect.::', E284, E285} -> (fun (V356, V357) -> case V357 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V353, V356}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E284, E285)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E282, E283)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E280, E281)); _ -> case V3 of {'Idris.Data.Vect.::', E276, E277} -> (fun (V358, V359) -> fun (V360) -> case V359 of {'Idris.Data.Vect.::', E278, E279} -> (fun (V361, V362) -> case V362 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V358, V361}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E278, E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E276, E277)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E296, E297} -> (fun (V363, V364) -> case V364 of {'Idris.Data.Vect.::', E302, E303} -> (fun (V365, V366) -> case V366 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V367) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntDiv'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V363, V365))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E304, E305} -> (fun (V368, V369) -> fun (V370) -> case V369 of {'Idris.Data.Vect.::', E306, E307} -> (fun (V371, V372) -> case V372 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V368, V371}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E306, E307)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E304, E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E302, E303)); _ -> case V3 of {'Idris.Data.Vect.::', E298, E299} -> (fun (V373, V374) -> fun (V375) -> case V374 of {'Idris.Data.Vect.::', E300, E301} -> (fun (V376, V377) -> case V377 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V373, V376}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E300, E301)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E298, E299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E296, E297)); _ -> case V3 of {'Idris.Data.Vect.::', E292, E293} -> (fun (V378, V379) -> fun (V380) -> case V379 of {'Idris.Data.Vect.::', E294, E295} -> (fun (V381, V382) -> case V382 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V378, V381}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E294, E295)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E292, E293)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E312, E313} -> (fun (V383, V384) -> case V384 of {'Idris.Data.Vect.::', E318, E319} -> (fun (V385, V386) -> case V386 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V387) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntDiv'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))), V383, V385))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E320, E321} -> (fun (V388, V389) -> fun (V390) -> case V389 of {'Idris.Data.Vect.::', E322, E323} -> (fun (V391, V392) -> case V392 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V388, V391}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E322, E323)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E320, E321)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E318, E319)); _ -> case V3 of {'Idris.Data.Vect.::', E314, E315} -> (fun (V393, V394) -> fun (V395) -> case V394 of {'Idris.Data.Vect.::', E316, E317} -> (fun (V396, V397) -> case V397 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V393, V396}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E316, E317)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E314, E315)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E312, E313)); _ -> case V3 of {'Idris.Data.Vect.::', E308, E309} -> (fun (V398, V399) -> fun (V400) -> case V399 of {'Idris.Data.Vect.::', E310, E311} -> (fun (V401, V402) -> case V402 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V398, V401}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E310, E311)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E308, E309)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E328, E329} -> (fun (V403, V404) -> case V404 of {'Idris.Data.Vect.::', E334, E335} -> (fun (V405, V406) -> case V406 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V407) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntDiv'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V403, V405))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E336, E337} -> (fun (V408, V409) -> fun (V410) -> case V409 of {'Idris.Data.Vect.::', E338, E339} -> (fun (V411, V412) -> case V412 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V408, V411}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E338, E339)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E336, E337)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E334, E335)); _ -> case V3 of {'Idris.Data.Vect.::', E330, E331} -> (fun (V413, V414) -> fun (V415) -> case V414 of {'Idris.Data.Vect.::', E332, E333} -> (fun (V416, V417) -> case V417 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V413, V416}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E332, E333)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E330, E331)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E328, E329)); _ -> case V3 of {'Idris.Data.Vect.::', E324, E325} -> (fun (V418, V419) -> fun (V420) -> case V419 of {'Idris.Data.Vect.::', E326, E327} -> (fun (V421, V422) -> case V422 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V418, V421}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E326, E327)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E324, E325)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E344, E345} -> (fun (V423, V424) -> case V424 of {'Idris.Data.Vect.::', E350, E351} -> (fun (V425, V426) -> case V426 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V427) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"div"/utf8>>, V423, V425}} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E352, E353} -> (fun (V428, V429) -> fun (V430) -> case V429 of {'Idris.Data.Vect.::', E354, E355} -> (fun (V431, V432) -> case V432 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V428, V431}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E354, E355)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E352, E353)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E350, E351)); _ -> case V3 of {'Idris.Data.Vect.::', E346, E347} -> (fun (V433, V434) -> fun (V435) -> case V434 of {'Idris.Data.Vect.::', E348, E349} -> (fun (V436, V437) -> case V437 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V433, V436}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E348, E349)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E346, E347)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E344, E345)); _ -> case V3 of {'Idris.Data.Vect.::', E340, E341} -> (fun (V438, V439) -> fun (V440) -> case V439 of {'Idris.Data.Vect.::', E342, E343} -> (fun (V441, V442) -> case V442 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V438, V441}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E342, E343)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E340, E341)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E256, E257} -> (fun (V443, V444) -> fun (V445) -> case V444 of {'Idris.Data.Vect.::', E258, E259} -> (fun (V446, V447) -> case V447 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"/"/utf8>>, V443, V446}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E258, E259)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E256, E257)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E255)); {'Idris.Core.TT.Mod', E356} -> (fun (V448) -> case V3 of {'Idris.Data.Vect.::', E357, E358} -> (fun (V449, V450) -> fun (V451) -> case V450 of {'Idris.Data.Vect.::', E359, E360} -> (fun (V452, V453) -> case V453 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"rem"/utf8>>, V449, V452}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E359, E360)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E357, E358)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E356)); {'Idris.Core.TT.Neg', E361} -> (fun (V454) -> fun (V455) -> case V3 of {'Idris.Data.Vect.::', E362, E363} -> (fun (V456, V457) -> case V457 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"-"/utf8>>, [V456 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E362, E363)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E361)); {'Idris.Core.TT.ShiftL', E364} -> (fun (V458) -> case V458 of {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E373, E374} -> (fun (V459, V460) -> case V460 of {'Idris.Data.Vect.::', E379, E380} -> (fun (V461, V462) -> case V462 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V463) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntShiftL'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V459, V461))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E381, E382} -> (fun (V464, V465) -> fun (V466) -> case V465 of {'Idris.Data.Vect.::', E383, E384} -> (fun (V467, V468) -> case V468 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V464, V467}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E383, E384)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E381, E382)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E379, E380)); _ -> case V3 of {'Idris.Data.Vect.::', E375, E376} -> (fun (V469, V470) -> fun (V471) -> case V470 of {'Idris.Data.Vect.::', E377, E378} -> (fun (V472, V473) -> case V473 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V469, V472}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E377, E378)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E375, E376)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E373, E374)); _ -> case V3 of {'Idris.Data.Vect.::', E369, E370} -> (fun (V474, V475) -> fun (V476) -> case V475 of {'Idris.Data.Vect.::', E371, E372} -> (fun (V477, V478) -> case V478 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V474, V477}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E371, E372)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E369, E370)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E389, E390} -> (fun (V479, V480) -> case V480 of {'Idris.Data.Vect.::', E395, E396} -> (fun (V481, V482) -> case V482 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V483) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntShiftL'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V479, V481))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E397, E398} -> (fun (V484, V485) -> fun (V486) -> case V485 of {'Idris.Data.Vect.::', E399, E400} -> (fun (V487, V488) -> case V488 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V484, V487}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E399, E400)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E397, E398)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E395, E396)); _ -> case V3 of {'Idris.Data.Vect.::', E391, E392} -> (fun (V489, V490) -> fun (V491) -> case V490 of {'Idris.Data.Vect.::', E393, E394} -> (fun (V492, V493) -> case V493 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V489, V492}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E393, E394)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E391, E392)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E389, E390)); _ -> case V3 of {'Idris.Data.Vect.::', E385, E386} -> (fun (V494, V495) -> fun (V496) -> case V495 of {'Idris.Data.Vect.::', E387, E388} -> (fun (V497, V498) -> case V498 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V494, V497}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E387, E388)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E385, E386)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E405, E406} -> (fun (V499, V500) -> case V500 of {'Idris.Data.Vect.::', E411, E412} -> (fun (V501, V502) -> case V502 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V503) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntShiftL'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V499, V501))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E413, E414} -> (fun (V504, V505) -> fun (V506) -> case V505 of {'Idris.Data.Vect.::', E415, E416} -> (fun (V507, V508) -> case V508 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V504, V507}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E415, E416)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E413, E414)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E411, E412)); _ -> case V3 of {'Idris.Data.Vect.::', E407, E408} -> (fun (V509, V510) -> fun (V511) -> case V510 of {'Idris.Data.Vect.::', E409, E410} -> (fun (V512, V513) -> case V513 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V509, V512}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E409, E410)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E407, E408)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E405, E406)); _ -> case V3 of {'Idris.Data.Vect.::', E401, E402} -> (fun (V514, V515) -> fun (V516) -> case V515 of {'Idris.Data.Vect.::', E403, E404} -> (fun (V517, V518) -> case V518 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V514, V517}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E403, E404)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E401, E402)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E421, E422} -> (fun (V519, V520) -> case V520 of {'Idris.Data.Vect.::', E427, E428} -> (fun (V521, V522) -> case V522 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V523) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntShiftL'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))), V519, V521))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E429, E430} -> (fun (V524, V525) -> fun (V526) -> case V525 of {'Idris.Data.Vect.::', E431, E432} -> (fun (V527, V528) -> case V528 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V524, V527}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E431, E432)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E429, E430)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E427, E428)); _ -> case V3 of {'Idris.Data.Vect.::', E423, E424} -> (fun (V529, V530) -> fun (V531) -> case V530 of {'Idris.Data.Vect.::', E425, E426} -> (fun (V532, V533) -> case V533 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V529, V532}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E425, E426)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E423, E424)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E421, E422)); _ -> case V3 of {'Idris.Data.Vect.::', E417, E418} -> (fun (V534, V535) -> fun (V536) -> case V535 of {'Idris.Data.Vect.::', E419, E420} -> (fun (V537, V538) -> case V538 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V534, V537}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E419, E420)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E417, E418)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E437, E438} -> (fun (V539, V540) -> case V540 of {'Idris.Data.Vect.::', E443, E444} -> (fun (V541, V542) -> case V542 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V543) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntShiftL'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V539, V541))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E445, E446} -> (fun (V544, V545) -> fun (V546) -> case V545 of {'Idris.Data.Vect.::', E447, E448} -> (fun (V547, V548) -> case V548 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V544, V547}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E447, E448)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E445, E446)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E443, E444)); _ -> case V3 of {'Idris.Data.Vect.::', E439, E440} -> (fun (V549, V550) -> fun (V551) -> case V550 of {'Idris.Data.Vect.::', E441, E442} -> (fun (V552, V553) -> case V553 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V549, V552}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E441, E442)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E439, E440)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E437, E438)); _ -> case V3 of {'Idris.Data.Vect.::', E433, E434} -> (fun (V554, V555) -> fun (V556) -> case V555 of {'Idris.Data.Vect.::', E435, E436} -> (fun (V557, V558) -> case V558 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V554, V557}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E435, E436)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E433, E434)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E365, E366} -> (fun (V559, V560) -> fun (V561) -> case V560 of {'Idris.Data.Vect.::', E367, E368} -> (fun (V562, V563) -> case V563 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsl"/utf8>>, V559, V562}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E367, E368)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E365, E366)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E364)); {'Idris.Core.TT.ShiftR', E449} -> (fun (V564) -> case V3 of {'Idris.Data.Vect.::', E450, E451} -> (fun (V565, V566) -> fun (V567) -> case V566 of {'Idris.Data.Vect.::', E452, E453} -> (fun (V568, V569) -> case V569 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bsr"/utf8>>, V565, V568}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E452, E453)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E450, E451)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E449)); {'Idris.Core.TT.BAnd', E454} -> (fun (V570) -> case V3 of {'Idris.Data.Vect.::', E455, E456} -> (fun (V571, V572) -> fun (V573) -> case V572 of {'Idris.Data.Vect.::', E457, E458} -> (fun (V574, V575) -> case V575 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"band"/utf8>>, V571, V574}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E457, E458)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E455, E456)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E454)); {'Idris.Core.TT.BOr', E459} -> (fun (V576) -> case V3 of {'Idris.Data.Vect.::', E460, E461} -> (fun (V577, V578) -> fun (V579) -> case V578 of {'Idris.Data.Vect.::', E462, E463} -> (fun (V580, V581) -> case V581 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bor"/utf8>>, V577, V580}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E462, E463)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E460, E461)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E459)); {'Idris.Core.TT.BXOr', E464} -> (fun (V582) -> case V3 of {'Idris.Data.Vect.::', E465, E466} -> (fun (V583, V584) -> fun (V585) -> case V584 of {'Idris.Data.Vect.::', E467, E468} -> (fun (V586, V587) -> case V587 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"bxor"/utf8>>, V583, V586}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E467, E468)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E465, E466)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E464)); {'Idris.Core.TT.LT', E469} -> (fun (V588) -> case V588 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E478, E479} -> (fun (V589, V590) -> case V590 of {'Idris.Data.Vect.::', E484, E485} -> (fun (V591, V592) -> case V592 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V593) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringLT'(V1, V589, V591))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E486, E487} -> (fun (V594, V595) -> fun (V596) -> case V595 of {'Idris.Data.Vect.::', E488, E489} -> (fun (V597, V598) -> case V598 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V594, V597}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E488, E489)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E486, E487)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E484, E485)); _ -> case V3 of {'Idris.Data.Vect.::', E480, E481} -> (fun (V599, V600) -> fun (V601) -> case V600 of {'Idris.Data.Vect.::', E482, E483} -> (fun (V602, V603) -> case V603 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V599, V602}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E482, E483)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E480, E481)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E478, E479)); _ -> case V3 of {'Idris.Data.Vect.::', E474, E475} -> (fun (V604, V605) -> fun (V606) -> case V605 of {'Idris.Data.Vect.::', E476, E477} -> (fun (V607, V608) -> case V608 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V604, V607}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E476, E477)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E474, E475)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E470, E471} -> (fun (V609, V610) -> fun (V611) -> case V610 of {'Idris.Data.Vect.::', E472, E473} -> (fun (V612, V613) -> case V613 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"<"/utf8>>, V609, V612}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E472, E473)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E470, E471)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E469)); {'Idris.Core.TT.LTE', E490} -> (fun (V614) -> case V614 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E499, E500} -> (fun (V615, V616) -> case V616 of {'Idris.Data.Vect.::', E505, E506} -> (fun (V617, V618) -> case V618 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V619) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringLTE'(V1, V615, V617))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E507, E508} -> (fun (V620, V621) -> fun (V622) -> case V621 of {'Idris.Data.Vect.::', E509, E510} -> (fun (V623, V624) -> case V624 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=<"/utf8>>, V620, V623}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E509, E510)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E507, E508)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E505, E506)); _ -> case V3 of {'Idris.Data.Vect.::', E501, E502} -> (fun (V625, V626) -> fun (V627) -> case V626 of {'Idris.Data.Vect.::', E503, E504} -> (fun (V628, V629) -> case V629 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=<"/utf8>>, V625, V628}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E503, E504)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E501, E502)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E499, E500)); _ -> case V3 of {'Idris.Data.Vect.::', E495, E496} -> (fun (V630, V631) -> fun (V632) -> case V631 of {'Idris.Data.Vect.::', E497, E498} -> (fun (V633, V634) -> case V634 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=<"/utf8>>, V630, V633}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E497, E498)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E495, E496)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E491, E492} -> (fun (V635, V636) -> fun (V637) -> case V636 of {'Idris.Data.Vect.::', E493, E494} -> (fun (V638, V639) -> case V639 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=<"/utf8>>, V635, V638}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E493, E494)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E491, E492)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E490)); {'Idris.Core.TT.EQ', E511} -> (fun (V640) -> case V640 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E520, E521} -> (fun (V641, V642) -> case V642 of {'Idris.Data.Vect.::', E526, E527} -> (fun (V643, V644) -> case V644 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V645) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringEQ'(V1, V641, V643))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E528, E529} -> (fun (V646, V647) -> fun (V648) -> case V647 of {'Idris.Data.Vect.::', E530, E531} -> (fun (V649, V650) -> case V650 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=:="/utf8>>, V646, V649}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E530, E531)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E528, E529)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E526, E527)); _ -> case V3 of {'Idris.Data.Vect.::', E522, E523} -> (fun (V651, V652) -> fun (V653) -> case V652 of {'Idris.Data.Vect.::', E524, E525} -> (fun (V654, V655) -> case V655 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=:="/utf8>>, V651, V654}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E524, E525)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E522, E523)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E520, E521)); _ -> case V3 of {'Idris.Data.Vect.::', E516, E517} -> (fun (V656, V657) -> fun (V658) -> case V657 of {'Idris.Data.Vect.::', E518, E519} -> (fun (V659, V660) -> case V660 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=:="/utf8>>, V656, V659}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E518, E519)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E516, E517)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E512, E513} -> (fun (V661, V662) -> fun (V663) -> case V662 of {'Idris.Data.Vect.::', E514, E515} -> (fun (V664, V665) -> case V665 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<"=:="/utf8>>, V661, V664}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E514, E515)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E512, E513)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E511)); {'Idris.Core.TT.GTE', E532} -> (fun (V666) -> case V666 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E541, E542} -> (fun (V667, V668) -> case V668 of {'Idris.Data.Vect.::', E547, E548} -> (fun (V669, V670) -> case V670 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V671) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringGTE'(V1, V667, V669))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E549, E550} -> (fun (V672, V673) -> fun (V674) -> case V673 of {'Idris.Data.Vect.::', E551, E552} -> (fun (V675, V676) -> case V676 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">="/utf8>>, V672, V675}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E551, E552)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E549, E550)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E547, E548)); _ -> case V3 of {'Idris.Data.Vect.::', E543, E544} -> (fun (V677, V678) -> fun (V679) -> case V678 of {'Idris.Data.Vect.::', E545, E546} -> (fun (V680, V681) -> case V681 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">="/utf8>>, V677, V680}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E545, E546)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E543, E544)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E541, E542)); _ -> case V3 of {'Idris.Data.Vect.::', E537, E538} -> (fun (V682, V683) -> fun (V684) -> case V683 of {'Idris.Data.Vect.::', E539, E540} -> (fun (V685, V686) -> case V686 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">="/utf8>>, V682, V685}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E539, E540)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E537, E538)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E533, E534} -> (fun (V687, V688) -> fun (V689) -> case V688 of {'Idris.Data.Vect.::', E535, E536} -> (fun (V690, V691) -> case V691 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">="/utf8>>, V687, V690}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E535, E536)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E533, E534)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E532)); {'Idris.Core.TT.GT', E553} -> (fun (V692) -> case V692 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E562, E563} -> (fun (V693, V694) -> case V694 of {'Idris.Data.Vect.::', E568, E569} -> (fun (V695, V696) -> case V696 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V697) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringGT'(V1, V693, V695))} end end()); _ -> case V3 of {'Idris.Data.Vect.::', E570, E571} -> (fun (V698, V699) -> fun (V700) -> case V699 of {'Idris.Data.Vect.::', E572, E573} -> (fun (V701, V702) -> case V702 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">"/utf8>>, V698, V701}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E572, E573)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E570, E571)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E568, E569)); _ -> case V3 of {'Idris.Data.Vect.::', E564, E565} -> (fun (V703, V704) -> fun (V705) -> case V704 of {'Idris.Data.Vect.::', E566, E567} -> (fun (V706, V707) -> case V707 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">"/utf8>>, V703, V706}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E566, E567)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E564, E565)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E562, E563)); _ -> case V3 of {'Idris.Data.Vect.::', E558, E559} -> (fun (V708, V709) -> fun (V710) -> case V709 of {'Idris.Data.Vect.::', E560, E561} -> (fun (V711, V712) -> case V712 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">"/utf8>>, V708, V711}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E560, E561)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E558, E559)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V3 of {'Idris.Data.Vect.::', E554, E555} -> (fun (V713, V714) -> fun (V715) -> case V714 of {'Idris.Data.Vect.::', E556, E557} -> (fun (V716, V717) -> case V717 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V1, <<">"/utf8>>, V713, V716}))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E556, E557)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E554, E555)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E553)); {'Idris.Core.TT.StrLength'} -> (fun () -> fun (V718) -> case V3 of {'Idris.Data.Vect.::', E574, E575} -> (fun (V719, V720) -> case V720 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringLength'(V1, V719))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E574, E575)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> fun (V721) -> case V3 of {'Idris.Data.Vect.::', E576, E577} -> (fun (V722, V723) -> case V723 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringHead'(V1, V722))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E576, E577)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> fun (V724) -> case V3 of {'Idris.Data.Vect.::', E578, E579} -> (fun (V725, V726) -> case V726 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringTail'(V0, V1, V725, V724)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E578, E579)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E580, E581} -> (fun (V727, V728) -> fun (V729) -> case V728 of {'Idris.Data.Vect.::', E582, E583} -> (fun (V730, V731) -> case V731 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringIndex'(V1, V727, V730))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E582, E583)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E580, E581)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E584, E585} -> (fun (V732, V733) -> fun (V734) -> case V733 of {'Idris.Data.Vect.::', E586, E587} -> (fun (V735, V736) -> case V736 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringCons'(V1, V732, V735))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E586, E587)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E584, E585)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E588, E589} -> (fun (V737, V738) -> fun (V739) -> case V738 of {'Idris.Data.Vect.::', E590, E591} -> (fun (V740, V741) -> case V741 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringAppend'(V1, V737, V740))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E590, E591)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E588, E589)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> fun (V742) -> case V3 of {'Idris.Data.Vect.::', E592, E593} -> (fun (V743, V744) -> case V744 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringReverse'(V1, V743))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E592, E593)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E594, E595} -> (fun (V745, V746) -> case V746 of {'Idris.Data.Vect.::', E596, E597} -> (fun (V747, V748) -> fun (V749) -> case V748 of {'Idris.Data.Vect.::', E598, E599} -> (fun (V750, V751) -> case V751 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeStringSubstr'(V1, V745, V747, V750))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E598, E599)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E596, E597)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E594, E595)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> fun (V752) -> case V3 of {'Idris.Data.Vect.::', E600, E601} -> (fun (V753, V754) -> case V754 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"pow"/utf8>>, [{'Idris.Compiler.Erlang.IR.ErlExpr.EFloat', V1, 2.718281828459045} | [V753 | []]]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E600, E601)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> fun (V755) -> case V3 of {'Idris.Data.Vect.::', E602, E603} -> (fun (V756, V757) -> case V757 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"log"/utf8>>, [V756 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E602, E603)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> fun (V758) -> case V3 of {'Idris.Data.Vect.::', E604, E605} -> (fun (V759, V760) -> case V760 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"sin"/utf8>>, [V759 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E604, E605)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> fun (V761) -> case V3 of {'Idris.Data.Vect.::', E606, E607} -> (fun (V762, V763) -> case V763 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"cos"/utf8>>, [V762 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E606, E607)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> fun (V764) -> case V3 of {'Idris.Data.Vect.::', E608, E609} -> (fun (V765, V766) -> case V766 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"tan"/utf8>>, [V765 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E608, E609)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> fun (V767) -> case V3 of {'Idris.Data.Vect.::', E610, E611} -> (fun (V768, V769) -> case V769 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"asin"/utf8>>, [V768 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E610, E611)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> fun (V770) -> case V3 of {'Idris.Data.Vect.::', E612, E613} -> (fun (V771, V772) -> case V772 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"acos"/utf8>>, [V771 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E612, E613)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> fun (V773) -> case V3 of {'Idris.Data.Vect.::', E614, E615} -> (fun (V774, V775) -> case V775 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"atan"/utf8>>, [V774 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E614, E615)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> fun (V776) -> case V3 of {'Idris.Data.Vect.::', E616, E617} -> (fun (V777, V778) -> case V778 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"math"/utf8>>, <<"sqrt"/utf8>>, [V777 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E616, E617)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> fun (V779) -> case V3 of {'Idris.Data.Vect.::', E618, E619} -> (fun (V780, V781) -> case V781 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"floor"/utf8>>, [V780 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E618, E619)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> fun (V782) -> case V3 of {'Idris.Data.Vect.::', E620, E621} -> (fun (V783, V784) -> case V784 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"ceil"/utf8>>, [V783 | []]))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E620, E621)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Cast', E622, E623} -> (fun (V785, V786) -> case V785 of {'Idris.Core.TT.IntType'} -> (fun () -> case V786 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E630, E631} -> (fun (V787, V788) -> case V788 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V789) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntToString'(V1, V787))} end end()); _ -> fun (V790) -> case V3 of {'Idris.Data.Vect.::', E632, E633} -> (fun (V791, V792) -> case V792 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E632, E633)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E630, E631)); _ -> fun (V793) -> case V3 of {'Idris.Data.Vect.::', E628, E629} -> (fun (V794, V795) -> case V795 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E628, E629)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E636, E637} -> (fun (V796, V797) -> case V797 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V798) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntToInteger'(V1, V796))} end end()); _ -> fun (V799) -> case V3 of {'Idris.Data.Vect.::', E638, E639} -> (fun (V800, V801) -> case V801 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E638, E639)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E636, E637)); _ -> fun (V802) -> case V3 of {'Idris.Data.Vect.::', E634, E635} -> (fun (V803, V804) -> case V804 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E634, E635)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E642, E643} -> (fun (V805, V806) -> case V806 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V807) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntToDouble'(V1, V805))} end end()); _ -> fun (V808) -> case V3 of {'Idris.Data.Vect.::', E644, E645} -> (fun (V809, V810) -> case V810 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E644, E645)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E642, E643)); _ -> fun (V811) -> case V3 of {'Idris.Data.Vect.::', E640, E641} -> (fun (V812, V813) -> case V813 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E640, E641)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.CharType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E648, E649} -> (fun (V814, V815) -> case V815 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V816) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntToChar'(V1, V814))} end end()); _ -> fun (V817) -> case V3 of {'Idris.Data.Vect.::', E650, E651} -> (fun (V818, V819) -> case V819 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E650, E651)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E648, E649)); _ -> fun (V820) -> case V3 of {'Idris.Data.Vect.::', E646, E647} -> (fun (V821, V822) -> case V822 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E646, E647)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E654, E655} -> (fun (V823, V824) -> case V824 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V825) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V823))} end end()); _ -> fun (V826) -> case V3 of {'Idris.Data.Vect.::', E656, E657} -> (fun (V827, V828) -> case V828 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E656, E657)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E654, E655)); _ -> fun (V829) -> case V3 of {'Idris.Data.Vect.::', E652, E653} -> (fun (V830, V831) -> case V831 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E652, E653)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E660, E661} -> (fun (V832, V833) -> case V833 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V834) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V832))} end end()); _ -> fun (V835) -> case V3 of {'Idris.Data.Vect.::', E662, E663} -> (fun (V836, V837) -> case V837 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E662, E663)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E660, E661)); _ -> fun (V838) -> case V3 of {'Idris.Data.Vect.::', E658, E659} -> (fun (V839, V840) -> case V840 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E658, E659)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E666, E667} -> (fun (V841, V842) -> case V842 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V843) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))), V841))} end end()); _ -> fun (V844) -> case V3 of {'Idris.Data.Vect.::', E668, E669} -> (fun (V845, V846) -> case V846 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E668, E669)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E666, E667)); _ -> fun (V847) -> case V3 of {'Idris.Data.Vect.::', E664, E665} -> (fun (V848, V849) -> case V849 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E664, E665)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E672, E673} -> (fun (V850, V851) -> case V851 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V852) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V850))} end end()); _ -> fun (V853) -> case V3 of {'Idris.Data.Vect.::', E674, E675} -> (fun (V854, V855) -> case V855 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E674, E675)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E672, E673)); _ -> fun (V856) -> case V3 of {'Idris.Data.Vect.::', E670, E671} -> (fun (V857, V858) -> case V858 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E670, E671)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V859) -> case V3 of {'Idris.Data.Vect.::', E626, E627} -> (fun (V860, V861) -> case V861 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E626, E627)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V786 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E680, E681} -> (fun (V862, V863) -> case V863 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V864) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToString'(V1, V862))} end end()); _ -> fun (V865) -> case V3 of {'Idris.Data.Vect.::', E682, E683} -> (fun (V866, V867) -> case V867 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E682, E683)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E680, E681)); _ -> fun (V868) -> case V3 of {'Idris.Data.Vect.::', E678, E679} -> (fun (V869, V870) -> case V870 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E678, E679)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E686, E687} -> (fun (V871, V872) -> case V872 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V873) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToInt'(V1, V871))} end end()); _ -> fun (V874) -> case V3 of {'Idris.Data.Vect.::', E688, E689} -> (fun (V875, V876) -> case V876 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E688, E689)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E686, E687)); _ -> fun (V877) -> case V3 of {'Idris.Data.Vect.::', E684, E685} -> (fun (V878, V879) -> case V879 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E684, E685)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E692, E693} -> (fun (V880, V881) -> case V881 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V882) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToDouble'(V1, V880))} end end()); _ -> fun (V883) -> case V3 of {'Idris.Data.Vect.::', E694, E695} -> (fun (V884, V885) -> case V885 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E694, E695)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E692, E693)); _ -> fun (V886) -> case V3 of {'Idris.Data.Vect.::', E690, E691} -> (fun (V887, V888) -> case V888 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E690, E691)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E698, E699} -> (fun (V889, V890) -> case V890 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V891) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V889))} end end()); _ -> fun (V892) -> case V3 of {'Idris.Data.Vect.::', E700, E701} -> (fun (V893, V894) -> case V894 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E700, E701)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E698, E699)); _ -> fun (V895) -> case V3 of {'Idris.Data.Vect.::', E696, E697} -> (fun (V896, V897) -> case V897 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E696, E697)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E704, E705} -> (fun (V898, V899) -> case V899 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V900) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V898))} end end()); _ -> fun (V901) -> case V3 of {'Idris.Data.Vect.::', E706, E707} -> (fun (V902, V903) -> case V903 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E706, E707)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E704, E705)); _ -> fun (V904) -> case V3 of {'Idris.Data.Vect.::', E702, E703} -> (fun (V905, V906) -> case V906 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E702, E703)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E710, E711} -> (fun (V907, V908) -> case V908 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V909) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))), V907))} end end()); _ -> fun (V910) -> case V3 of {'Idris.Data.Vect.::', E712, E713} -> (fun (V911, V912) -> case V912 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E712, E713)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E710, E711)); _ -> fun (V913) -> case V3 of {'Idris.Data.Vect.::', E708, E709} -> (fun (V914, V915) -> case V915 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E708, E709)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E716, E717} -> (fun (V916, V917) -> case V917 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V918) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))), V916))} end end()); _ -> fun (V919) -> case V3 of {'Idris.Data.Vect.::', E718, E719} -> (fun (V920, V921) -> case V921 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E718, E719)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E716, E717)); _ -> fun (V922) -> case V3 of {'Idris.Data.Vect.::', E714, E715} -> (fun (V923, V924) -> case V924 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E714, E715)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V925) -> case V3 of {'Idris.Data.Vect.::', E676, E677} -> (fun (V926, V927) -> case V927 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E676, E677)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V786 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E724, E725} -> (fun (V928, V929) -> case V929 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V930) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToString'(V1, V928))} end end()); _ -> fun (V931) -> case V3 of {'Idris.Data.Vect.::', E726, E727} -> (fun (V932, V933) -> case V933 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E726, E727)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E724, E725)); _ -> fun (V934) -> case V3 of {'Idris.Data.Vect.::', E722, E723} -> (fun (V935, V936) -> case V936 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E722, E723)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E730, E731} -> (fun (V937, V938) -> case V938 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V939) -> {'Idris.Prelude.Types.Right', V937} end end()); _ -> fun (V940) -> case V3 of {'Idris.Data.Vect.::', E732, E733} -> (fun (V941, V942) -> case V942 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E732, E733)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E730, E731)); _ -> fun (V943) -> case V3 of {'Idris.Data.Vect.::', E728, E729} -> (fun (V944, V945) -> case V945 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E728, E729)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E736, E737} -> (fun (V946, V947) -> case V947 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V948) -> {'Idris.Prelude.Types.Right', V946} end end()); _ -> fun (V949) -> case V3 of {'Idris.Data.Vect.::', E738, E739} -> (fun (V950, V951) -> case V951 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E738, E739)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E736, E737)); _ -> fun (V952) -> case V3 of {'Idris.Data.Vect.::', E734, E735} -> (fun (V953, V954) -> case V954 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E734, E735)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E742, E743} -> (fun (V955, V956) -> case V956 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V957) -> {'Idris.Prelude.Types.Right', V955} end end()); _ -> fun (V958) -> case V3 of {'Idris.Data.Vect.::', E744, E745} -> (fun (V959, V960) -> case V960 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E744, E745)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E742, E743)); _ -> fun (V961) -> case V3 of {'Idris.Data.Vect.::', E740, E741} -> (fun (V962, V963) -> case V963 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E740, E741)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E748, E749} -> (fun (V964, V965) -> case V965 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V966) -> {'Idris.Prelude.Types.Right', V964} end end()); _ -> fun (V967) -> case V3 of {'Idris.Data.Vect.::', E750, E751} -> (fun (V968, V969) -> case V969 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E750, E751)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E748, E749)); _ -> fun (V970) -> case V3 of {'Idris.Data.Vect.::', E746, E747} -> (fun (V971, V972) -> case V972 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E746, E747)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E754, E755} -> (fun (V973, V974) -> case V974 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V975) -> {'Idris.Prelude.Types.Right', V973} end end()); _ -> fun (V976) -> case V3 of {'Idris.Data.Vect.::', E756, E757} -> (fun (V977, V978) -> case V978 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E756, E757)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E754, E755)); _ -> fun (V979) -> case V3 of {'Idris.Data.Vect.::', E752, E753} -> (fun (V980, V981) -> case V981 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E752, E753)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V982) -> case V3 of {'Idris.Data.Vect.::', E720, E721} -> (fun (V983, V984) -> case V984 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E720, E721)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V786 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E762, E763} -> (fun (V985, V986) -> case V986 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V987) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToString'(V1, V985))} end end()); _ -> fun (V988) -> case V3 of {'Idris.Data.Vect.::', E764, E765} -> (fun (V989, V990) -> case V990 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E764, E765)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E762, E763)); _ -> fun (V991) -> case V3 of {'Idris.Data.Vect.::', E760, E761} -> (fun (V992, V993) -> case V993 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E760, E761)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E768, E769} -> (fun (V994, V995) -> case V995 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V996) -> {'Idris.Prelude.Types.Right', V994} end end()); _ -> fun (V997) -> case V3 of {'Idris.Data.Vect.::', E770, E771} -> (fun (V998, V999) -> case V999 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E770, E771)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E768, E769)); _ -> fun (V1000) -> case V3 of {'Idris.Data.Vect.::', E766, E767} -> (fun (V1001, V1002) -> case V1002 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E766, E767)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E774, E775} -> (fun (V1003, V1004) -> case V1004 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1005) -> {'Idris.Prelude.Types.Right', V1003} end end()); _ -> fun (V1006) -> case V3 of {'Idris.Data.Vect.::', E776, E777} -> (fun (V1007, V1008) -> case V1008 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E776, E777)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E774, E775)); _ -> fun (V1009) -> case V3 of {'Idris.Data.Vect.::', E772, E773} -> (fun (V1010, V1011) -> case V1011 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E772, E773)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E780, E781} -> (fun (V1012, V1013) -> case V1013 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1014) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V1012))} end end()); _ -> fun (V1015) -> case V3 of {'Idris.Data.Vect.::', E782, E783} -> (fun (V1016, V1017) -> case V1017 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E782, E783)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E780, E781)); _ -> fun (V1018) -> case V3 of {'Idris.Data.Vect.::', E778, E779} -> (fun (V1019, V1020) -> case V1020 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E778, E779)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E786, E787} -> (fun (V1021, V1022) -> case V1022 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1023) -> {'Idris.Prelude.Types.Right', V1021} end end()); _ -> fun (V1024) -> case V3 of {'Idris.Data.Vect.::', E788, E789} -> (fun (V1025, V1026) -> case V1026 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E788, E789)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E786, E787)); _ -> fun (V1027) -> case V3 of {'Idris.Data.Vect.::', E784, E785} -> (fun (V1028, V1029) -> case V1029 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E784, E785)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E792, E793} -> (fun (V1030, V1031) -> case V1031 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1032) -> {'Idris.Prelude.Types.Right', V1030} end end()); _ -> fun (V1033) -> case V3 of {'Idris.Data.Vect.::', E794, E795} -> (fun (V1034, V1035) -> case V1035 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E794, E795)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E792, E793)); _ -> fun (V1036) -> case V3 of {'Idris.Data.Vect.::', E790, E791} -> (fun (V1037, V1038) -> case V1038 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E790, E791)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V1039) -> case V3 of {'Idris.Data.Vect.::', E758, E759} -> (fun (V1040, V1041) -> case V1041 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E758, E759)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V786 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E800, E801} -> (fun (V1042, V1043) -> case V1043 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1044) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToString'(V1, V1042))} end end()); _ -> fun (V1045) -> case V3 of {'Idris.Data.Vect.::', E802, E803} -> (fun (V1046, V1047) -> case V1047 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E802, E803)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E800, E801)); _ -> fun (V1048) -> case V3 of {'Idris.Data.Vect.::', E798, E799} -> (fun (V1049, V1050) -> case V1050 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E798, E799)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E806, E807} -> (fun (V1051, V1052) -> case V1052 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1053) -> {'Idris.Prelude.Types.Right', V1051} end end()); _ -> fun (V1054) -> case V3 of {'Idris.Data.Vect.::', E808, E809} -> (fun (V1055, V1056) -> case V1056 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E808, E809)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E806, E807)); _ -> fun (V1057) -> case V3 of {'Idris.Data.Vect.::', E804, E805} -> (fun (V1058, V1059) -> case V1059 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E804, E805)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E812, E813} -> (fun (V1060, V1061) -> case V1061 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1062) -> {'Idris.Prelude.Types.Right', V1060} end end()); _ -> fun (V1063) -> case V3 of {'Idris.Data.Vect.::', E814, E815} -> (fun (V1064, V1065) -> case V1065 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E814, E815)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E812, E813)); _ -> fun (V1066) -> case V3 of {'Idris.Data.Vect.::', E810, E811} -> (fun (V1067, V1068) -> case V1068 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E810, E811)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E818, E819} -> (fun (V1069, V1070) -> case V1070 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1071) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V1069))} end end()); _ -> fun (V1072) -> case V3 of {'Idris.Data.Vect.::', E820, E821} -> (fun (V1073, V1074) -> case V1074 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E820, E821)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E818, E819)); _ -> fun (V1075) -> case V3 of {'Idris.Data.Vect.::', E816, E817} -> (fun (V1076, V1077) -> case V1077 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E816, E817)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E824, E825} -> (fun (V1078, V1079) -> case V1079 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1080) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V1078))} end end()); _ -> fun (V1081) -> case V3 of {'Idris.Data.Vect.::', E826, E827} -> (fun (V1082, V1083) -> case V1083 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E826, E827)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E824, E825)); _ -> fun (V1084) -> case V3 of {'Idris.Data.Vect.::', E822, E823} -> (fun (V1085, V1086) -> case V1086 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E822, E823)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E830, E831} -> (fun (V1087, V1088) -> case V1088 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1089) -> {'Idris.Prelude.Types.Right', V1087} end end()); _ -> fun (V1090) -> case V3 of {'Idris.Data.Vect.::', E832, E833} -> (fun (V1091, V1092) -> case V1092 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E832, E833)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E830, E831)); _ -> fun (V1093) -> case V3 of {'Idris.Data.Vect.::', E828, E829} -> (fun (V1094, V1095) -> case V1095 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E828, E829)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V1096) -> case V3 of {'Idris.Data.Vect.::', E796, E797} -> (fun (V1097, V1098) -> case V1098 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E796, E797)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> case V786 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E838, E839} -> (fun (V1099, V1100) -> case V1100 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1101) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToString'(V1, V1099))} end end()); _ -> fun (V1102) -> case V3 of {'Idris.Data.Vect.::', E840, E841} -> (fun (V1103, V1104) -> case V1104 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E840, E841)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E838, E839)); _ -> fun (V1105) -> case V3 of {'Idris.Data.Vect.::', E836, E837} -> (fun (V1106, V1107) -> case V1107 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E836, E837)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E844, E845} -> (fun (V1108, V1109) -> case V1109 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1110) -> {'Idris.Prelude.Types.Right', V1108} end end()); _ -> fun (V1111) -> case V3 of {'Idris.Data.Vect.::', E846, E847} -> (fun (V1112, V1113) -> case V1113 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E846, E847)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E844, E845)); _ -> fun (V1114) -> case V3 of {'Idris.Data.Vect.::', E842, E843} -> (fun (V1115, V1116) -> case V1116 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E842, E843)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E850, E851} -> (fun (V1117, V1118) -> case V1118 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1119) -> {'Idris.Prelude.Types.Right', V1117} end end()); _ -> fun (V1120) -> case V3 of {'Idris.Data.Vect.::', E852, E853} -> (fun (V1121, V1122) -> case V1122 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E852, E853)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E850, E851)); _ -> fun (V1123) -> case V3 of {'Idris.Data.Vect.::', E848, E849} -> (fun (V1124, V1125) -> case V1125 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E848, E849)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E856, E857} -> (fun (V1126, V1127) -> case V1127 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1128) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V1126))} end end()); _ -> fun (V1129) -> case V3 of {'Idris.Data.Vect.::', E858, E859} -> (fun (V1130, V1131) -> case V1131 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E858, E859)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E856, E857)); _ -> fun (V1132) -> case V3 of {'Idris.Data.Vect.::', E854, E855} -> (fun (V1133, V1134) -> case V1134 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E854, E855)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E862, E863} -> (fun (V1135, V1136) -> case V1136 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1137) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))), V1135))} end end()); _ -> fun (V1138) -> case V3 of {'Idris.Data.Vect.::', E864, E865} -> (fun (V1139, V1140) -> case V1140 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E864, E865)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E862, E863)); _ -> fun (V1141) -> case V3 of {'Idris.Data.Vect.::', E860, E861} -> (fun (V1142, V1143) -> case V1143 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E860, E861)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E868, E869} -> (fun (V1144, V1145) -> case V1145 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1146) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genIntegerToBits'(V1, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))), V1144))} end end()); _ -> fun (V1147) -> case V3 of {'Idris.Data.Vect.::', E870, E871} -> (fun (V1148, V1149) -> case V1149 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E870, E871)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E868, E869)); _ -> fun (V1150) -> case V3 of {'Idris.Data.Vect.::', E866, E867} -> (fun (V1151, V1152) -> case V1152 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E866, E867)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V1153) -> case V3 of {'Idris.Data.Vect.::', E834, E835} -> (fun (V1154, V1155) -> case V1155 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E834, E835)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.CharType'} -> (fun () -> case V786 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E876, E877} -> (fun (V1156, V1157) -> case V1157 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1158) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genCharToString'(V1, V1156))} end end()); _ -> fun (V1159) -> case V3 of {'Idris.Data.Vect.::', E878, E879} -> (fun (V1160, V1161) -> case V1161 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E878, E879)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E876, E877)); _ -> fun (V1162) -> case V3 of {'Idris.Data.Vect.::', E874, E875} -> (fun (V1163, V1164) -> case V1164 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E874, E875)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E882, E883} -> (fun (V1165, V1166) -> case V1166 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1167) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genCharToInteger'(V1, V1165))} end end()); _ -> fun (V1168) -> case V3 of {'Idris.Data.Vect.::', E884, E885} -> (fun (V1169, V1170) -> case V1170 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E884, E885)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E882, E883)); _ -> fun (V1171) -> case V3 of {'Idris.Data.Vect.::', E880, E881} -> (fun (V1172, V1173) -> case V1173 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E880, E881)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E888, E889} -> (fun (V1174, V1175) -> case V1175 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1176) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genCharToInt'(V1, V1174))} end end()); _ -> fun (V1177) -> case V3 of {'Idris.Data.Vect.::', E890, E891} -> (fun (V1178, V1179) -> case V1179 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E890, E891)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E888, E889)); _ -> fun (V1180) -> case V3 of {'Idris.Data.Vect.::', E886, E887} -> (fun (V1181, V1182) -> case V1182 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E886, E887)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V1183) -> case V3 of {'Idris.Data.Vect.::', E872, E873} -> (fun (V1184, V1185) -> case V1185 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E872, E873)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V786 of {'Idris.Core.TT.StringType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E896, E897} -> (fun (V1186, V1187) -> case V1187 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1188) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genDoubleToString'(V1, V1186))} end end()); _ -> fun (V1189) -> case V3 of {'Idris.Data.Vect.::', E898, E899} -> (fun (V1190, V1191) -> case V1191 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E898, E899)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E896, E897)); _ -> fun (V1192) -> case V3 of {'Idris.Data.Vect.::', E894, E895} -> (fun (V1193, V1194) -> case V1194 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E894, E895)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E902, E903} -> (fun (V1195, V1196) -> case V1196 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1197) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genDoubleToInteger'(V1, V1195))} end end()); _ -> fun (V1198) -> case V3 of {'Idris.Data.Vect.::', E904, E905} -> (fun (V1199, V1200) -> case V1200 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E904, E905)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E902, E903)); _ -> fun (V1201) -> case V3 of {'Idris.Data.Vect.::', E900, E901} -> (fun (V1202, V1203) -> case V1203 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E900, E901)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E908, E909} -> (fun (V1204, V1205) -> case V1205 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1206) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genDoubleToInt'(V1, V1204))} end end()); _ -> fun (V1207) -> case V3 of {'Idris.Data.Vect.::', E910, E911} -> (fun (V1208, V1209) -> case V1209 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E910, E911)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E908, E909)); _ -> fun (V1210) -> case V3 of {'Idris.Data.Vect.::', E906, E907} -> (fun (V1211, V1212) -> case V1212 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E906, E907)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V1213) -> case V3 of {'Idris.Data.Vect.::', E892, E893} -> (fun (V1214, V1215) -> case V1215 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E892, E893)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.StringType'} -> (fun () -> case V786 of {'Idris.Core.TT.IntegerType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E916, E917} -> (fun (V1216, V1217) -> case V1217 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1218) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genStringToInteger'(V0, V1, V1216, V1218)) end end()); _ -> fun (V1219) -> case V3 of {'Idris.Data.Vect.::', E918, E919} -> (fun (V1220, V1221) -> case V1221 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E918, E919)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E916, E917)); _ -> fun (V1222) -> case V3 of {'Idris.Data.Vect.::', E914, E915} -> (fun (V1223, V1224) -> case V1224 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E914, E915)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.IntType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E922, E923} -> (fun (V1225, V1226) -> case V1226 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1227) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genStringToInt'(V0, V1, V1225, V1227)) end end()); _ -> fun (V1228) -> case V3 of {'Idris.Data.Vect.::', E924, E925} -> (fun (V1229, V1230) -> case V1230 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E924, E925)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E922, E923)); _ -> fun (V1231) -> case V3 of {'Idris.Data.Vect.::', E920, E921} -> (fun (V1232, V1233) -> case V1233 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E920, E921)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E928, E929} -> (fun (V1234, V1235) -> case V1235 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V1236) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genStringToDouble'(V0, V1, V1234, V1236)) end end()); _ -> fun (V1237) -> case V3 of {'Idris.Data.Vect.::', E930, E931} -> (fun (V1238, V1239) -> case V1239 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E930, E931)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E928, E929)); _ -> fun (V1240) -> case V3 of {'Idris.Data.Vect.::', E926, E927} -> (fun (V1241, V1242) -> case V1242 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E926, E927)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V1243) -> case V3 of {'Idris.Data.Vect.::', E912, E913} -> (fun (V1244, V1245) -> case V1245 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E912, E913)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V1246) -> case V3 of {'Idris.Data.Vect.::', E624, E625} -> (fun (V1247, V1248) -> case V1248 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Invalid cast "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V785)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V786))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E624, E625)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E622, E623)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E932, E933} -> (fun (V1249, V1250) -> case V1250 of {'Idris.Data.Vect.::', E934, E935} -> (fun (V1251, V1252) -> fun (V1253) -> case V1252 of {'Idris.Data.Vect.::', E936, E937} -> (fun (V1254, V1255) -> case V1255 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', V1254} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E936, E937)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E934, E935)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E932, E933)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.Crash'} -> (fun () -> case V3 of {'Idris.Data.Vect.::', E938, E939} -> (fun (V1256, V1257) -> case V1257 of {'Idris.Data.Vect.::', E940, E941} -> (fun (V1258, V1259) -> case V1259 of {'Idris.Data.Vect.Nil'} -> (fun () -> begin (V1260 = {'Idris.Compiler.Erlang.IR.ErlExpr.EBinaryConcat', V1, {'Idris.Compiler.Erlang.IR.ErlExpr.EBinary', V1, <<"Crash: "/utf8>>}, V1258}), fun (V1261) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V1, <<"erlang"/utf8>>, <<"throw"/utf8>>, [V1260 | []]))} end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E940, E941)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E938, E939)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genNmExp'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CompileExpr.NmLocal', E0, E1} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V5))), fun (V8) -> case ('Idris.Idris2.Libraries.Data.NameMap':'un--lookup'(V6, V3)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V7, V9}} end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Missing variable name: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6))))}, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Core.CompileExpr.NmRef', E3, E4} -> (fun (V10, V11) -> begin (V12 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V10))), fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genRef'(V2, V12, V11))} end end end(E3, E4)); {'Idris.Core.CompileExpr.NmLam', E5, E6, E7} -> (fun (V14, V15, V16) -> begin (V17 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V14))), fun (V18) -> begin (V19 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--addLocalVars'(V0, [V15 | []], V3, V18))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V22, V23) -> begin (V24 = (('un--genNmExp'(V0, V1, V2, V22, V16))(V18))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ELam', V17, V23, V26}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E5, E6, E7)); {'Idris.Core.CompileExpr.NmLet', E14, E15, E16, E17} -> (fun (V27, V28, V29, V30) -> begin (V31 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V27))), fun (V32) -> begin (V33 = (('un--genNmExp'(V0, V1, V2, V3, V29))(V32))), case V33 of {'Idris.Prelude.Types.Left', E18} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--addLocalVar'(V0, V28, V3, V32))), case V36 of {'Idris.Prelude.Types.Left', E20} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V39, V40) -> begin (V41 = (('un--genNmExp'(V0, V1, V2, V39, V30))(V32))), case V41 of {'Idris.Prelude.Types.Left', E24} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ELet', V31, V40, V35, V43}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E14, E15, E16, E17)); {'Idris.Core.CompileExpr.NmApp', E26, E27, E28} -> (fun (V44, V45, V46) -> begin (V47 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V44))), fun (V48) -> begin (V50 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V49) -> ('un--genNmExp'(V0, V1, V2, V3, V49)) end, V46, [], V48))), case V50 of {'Idris.Prelude.Types.Left', E29} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V52) -> begin (V53 = (('un--genNmExp'(V0, V1, V2, V3, V45))(V48))), case V53 of {'Idris.Prelude.Types.Left', E31} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V55) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EApp', V47, V55, V52}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E26, E27, E28)); {'Idris.Core.CompileExpr.NmCon', E33, E34, E35, E36, E37} -> (fun (V56, V57, V58, V59, V60) -> begin (V61 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V56))), fun (V62) -> begin (V64 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V63) -> ('un--genNmExp'(V0, V1, V2, V3, V63)) end, V60, [], V62))), case V64 of {'Idris.Prelude.Types.Left', E38} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V66) -> (('un--genCon'(V0, V2, V61, V57, V66))(V62)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E33, E34, E35, E36, E37)); {'Idris.Core.CompileExpr.NmOp', E40, E41, E42, E43} -> (fun (V67, V68, V69, V70) -> begin (V71 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V68))), fun (V72) -> begin (V73 = ('un--traverseVect'(V0, V1, V2, V3, V70, V72))), case V73 of {'Idris.Prelude.Types.Left', E44} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V75) -> (('un--genOp'(V0, V71, V69, V75))(V72)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E40, E41, E42, E43)); {'Idris.Core.CompileExpr.NmExtPrim', E46, E47, E48} -> (fun (V76, V77, V78) -> begin (V79 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V76))), fun (V80) -> begin (V82 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V81) -> ('un--genNmExp'(V0, V1, V2, V3, V81)) end, V78, [], V80))), case V82 of {'Idris.Prelude.Types.Left', E49} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V84) -> (('un--genExtPrim'(V0, V1, V2, V79, V77, V84))(V80)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E46, E47, E48)); {'Idris.Core.CompileExpr.NmForce', E51, E52, E53} -> (fun (V85, V86, V87) -> begin (V88 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V85))), fun (V89) -> begin (V90 = (('un--genNmExp'(V0, V1, V2, V3, V87))(V89))), case V90 of {'Idris.Prelude.Types.Left', E54} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V92) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EApp', V88, V92, []}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E51, E52, E53)); {'Idris.Core.CompileExpr.NmDelay', E56, E57, E58} -> (fun (V93, V94, V95) -> begin (V96 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V93))), fun (V97) -> begin (V98 = (('un--genNmExp'(V0, V1, V2, V3, V95))(V97))), case V98 of {'Idris.Prelude.Types.Left', E59} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V100) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ELam', V96, [], V100}} end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E56, E57, E58)); {'Idris.Core.CompileExpr.NmConCase', E61, E62, E63, E64} -> (fun (V101, V102, V103, V104) -> begin (V105 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V101))), fun (V106) -> begin (V107 = (('un--genNmExp'(V0, V1, V2, V3, V102))(V106))), case V107 of {'Idris.Prelude.Types.Left', E65} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V109) -> begin (V112 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V110) -> fun (V111) -> ('un--genConAlt'(V0, V1, V2, V3, V105, V110, V111)) end end, V103, [], V106))), case V112 of {'Idris.Prelude.Types.Left', E67} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V114) -> begin (V116 = case V104 of {'Idris.Prelude.Types.Just', E69} -> (fun (V115) -> (('un--genNmExp'(V0, V1, V2, V3, V115))(V106)) end(E69)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V105, <<"Error: Unreachable branch"/utf8>>))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V116 of {'Idris.Prelude.Types.Left', E70} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V118) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EMatcherCase', V105, V109, V114, V118}} end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E61, E62, E63, E64)); {'Idris.Core.CompileExpr.NmConstCase', E72, E73, E74, E75} -> (fun (V119, V120, V121, V122) -> begin (V123 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V119))), fun (V124) -> begin (V125 = (('un--genNmExp'(V0, V1, V2, V3, V120))(V124))), case V125 of {'Idris.Prelude.Types.Left', E76} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V127) -> begin (V130 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V128) -> fun (V129) -> ('un--genConstAlt'(V0, V1, V2, V3, V128, V129)) end end, V121, [], V124))), case V130 of {'Idris.Prelude.Types.Left', E78} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V132) -> begin (V134 = case V122 of {'Idris.Prelude.Types.Just', E80} -> (fun (V133) -> (('un--genNmExp'(V0, V1, V2, V3, V133))(V124)) end(E80)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V123, <<"Error: Unreachable branch"/utf8>>))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V134 of {'Idris.Prelude.Types.Left', E81} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V136) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EConstCase', V123, V127, V132, V136}} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E72, E73, E74, E75)); {'Idris.Core.CompileExpr.NmPrimVal', E83, E84} -> (fun (V137, V138) -> begin (V139 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V137))), fun (V140) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EIdrisConstant', V139, ('un--genConstant'(V138))}} end end end(E83, E84)); {'Idris.Core.CompileExpr.NmErased', E85} -> (fun (V141) -> begin (V142 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V141))), fun (V143) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EAtom', V142, <<"erased"/utf8>>}} end end end(E85)); {'Idris.Core.CompileExpr.NmCrash', E86, E87} -> (fun (V144, V145) -> begin (V146 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFC'(V144))), fun (V147) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V146, V145))} end end end(E86, E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genForeign'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Core.Name.UN', E2} -> (fun (V7) -> case V7 of <<"prim__putStr"/utf8>> -> case V4 of [E3 | E4] -> (fun (V8, V9) -> case V9 of [E5 | E6] -> (fun (V10, V11) -> case V11 of [] -> begin (V12 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodePutStr'(V2, V8))), begin (V13 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIORes'(V2, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkUnit'(V2))))), fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ESequence', V2, {'Idris.Data.Vect.::', V12, {'Idris.Data.Vect.::', V13, {'Idris.Data.Vect.Nil'}}}}} end end end; _ -> fun (V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end end(E5, E6)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end end(E3, E4)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end; <<"prim__getStr"/utf8>> -> case V4 of [E7 | E8] -> (fun (V18, V19) -> case V19 of [] -> begin (V20 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnicodeGetStr'(V2, {'Idris.Compiler.Erlang.IR.ErlExpr.ECharlist', V2, <<""/utf8>>}))), fun (V21) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIORes'(V2, V20))} end end; _ -> fun (V22) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end end(E7, E8)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end; <<"fastPack"/utf8>> -> fun (V24) -> case V4 of [E9 | E10] -> (fun (V25, V26) -> case V26 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V2, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [V25 | []]))}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end(E9, E10)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end; <<"fastUnpack"/utf8>> -> fun (V27) -> case V4 of [E11 | E12] -> (fun (V28, V29) -> case V29 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V2, <<"string"/utf8>>, <<"to_graphemes"/utf8>>, [V28 | []]))}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end(E11, E12)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end; <<"fastConcat"/utf8>> -> fun (V30) -> case V4 of [E13 | E14] -> (fun (V31, V32) -> case V32 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V2, <<"unicode"/utf8>>, <<"characters_to_binary"/utf8>>, [V31 | []]))}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end(E13, E14)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end; _ -> fun (V33) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end end(E2)); _ -> fun (V34) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end end(E0, E1)); _ -> fun (V35) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Unsupported %foreign primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V3))))))} end end.
'un--genExtPrim'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V6, V7) -> case V7 of {'Idris.Core.Name.UN', E2} -> (fun (V8) -> case V8 of <<"void"/utf8>> -> case V5 of [E3 | E4] -> (fun (V9, V10) -> fun (V11) -> case V10 of [E5 | E6] -> (fun (V12, V13) -> case V13 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, <<"Error: Executed \x{27}void\x{27}"/utf8>>))}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E3, E4)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__os"/utf8>> -> fun (V15) -> case V5 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genOsType'(V0, V3, V15)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__codegen"/utf8>> -> fun (V16) -> case V5 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBinary', V3, <<"erlang"/utf8>>}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__newIORef"/utf8>> -> case V5 of [E7 | E8] -> (fun (V17, V18) -> case V18 of [E9 | E10] -> (fun (V19, V20) -> fun (V21) -> case V20 of [E11 | E12] -> (fun (V22, V23) -> case V23 of [] -> begin (V27 = case V1 of 1 -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"mutable_storage"/utf8>>, <<"term_new"/utf8>>, [V19 | []]))}; 0 -> begin (V24 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V21))), case V24 of {'Idris.Prelude.Types.Left', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIORes'(V3, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genProcessDictNewIORef'(V3, V26, V19))))} end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V27 of {'Idris.Prelude.Types.Left', E15} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIORes'(V3, V29))} end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E11, E12)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E9, E10)); _ -> fun (V30) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E7, E8)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__readIORef"/utf8>> -> case V5 of [E17 | E18] -> (fun (V32, V33) -> case V33 of [E19 | E20] -> (fun (V34, V35) -> case V35 of [E21 | E22] -> (fun (V36, V37) -> case V37 of [] -> begin (V38 = case V1 of 1 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"mutable_storage"/utf8>>, <<"term_get"/utf8>>, [V34 | []])); 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genProcessDictReadIORef'(V3, V34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V39) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIORes'(V3, V38))} end end; _ -> fun (V40) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E21, E22)); _ -> fun (V41) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E19, E20)); _ -> fun (V42) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E17, E18)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__writeIORef"/utf8>> -> case V5 of [E23 | E24] -> (fun (V44, V45) -> case V45 of [E25 | E26] -> (fun (V46, V47) -> case V47 of [E27 | E28] -> (fun (V48, V49) -> case V49 of [E29 | E30] -> (fun (V50, V51) -> case V51 of [] -> begin (V52 = case V1 of 1 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"mutable_storage"/utf8>>, <<"term_set"/utf8>>, [V46 | [V48 | []]])); 0 -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genProcessDictWriteIORef'(V3, V46, V48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V53) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIORes'(V3, V52))} end end; _ -> fun (V54) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E29, E30)); _ -> fun (V55) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E27, E28)); _ -> fun (V56) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E25, E26)); _ -> fun (V57) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E23, E24)); _ -> fun (V58) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlUnsafeCall"/utf8>> -> case V5 of [E31 | E32] -> (fun (V59, V60) -> case V60 of [E33 | E34] -> (fun (V61, V62) -> case V62 of [E35 | E36] -> (fun (V63, V64) -> case V64 of [E37 | E38] -> (fun (V65, V66) -> fun (V67) -> case V66 of [E39 | E40] -> (fun (V68, V69) -> case V69 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V3, <<"erlang"/utf8>>, <<"apply"/utf8>>, [('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafeStringToAtom'(V3, V63)) | [('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafeStringToAtom'(V3, V65)) | [V68 | []]]]))}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E39, E40)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E37, E38)); _ -> fun (V70) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E35, E36)); _ -> fun (V71) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E33, E34)); _ -> fun (V72) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E31, E32)); _ -> fun (V73) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlTryCatch"/utf8>> -> case V5 of [E41 | E42] -> (fun (V74, V75) -> case V75 of [E43 | E44] -> (fun (V76, V77) -> fun (V78) -> case V77 of [E45 | E46] -> (fun (V79, V80) -> case V80 of [] -> begin (V81 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V78))), case V81 of {'Idris.Prelude.Types.Left', E47} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V83) -> begin (V84 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V78))), case V84 of {'Idris.Prelude.Types.Left', E49} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V2, V3, V76))), begin (V88 = {'Idris.Compiler.Erlang.IR.ErlExpr.ETryCatch', V3, V87, V83, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genRight'(V3, {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V3, V83})), V86, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genLeft'(V3, {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V3, V86}))}), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIORes'(V3, V88))} end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E45, E46)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E43, E44)); _ -> fun (V89) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E41, E42)); _ -> fun (V90) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlReceive"/utf8>> -> case V5 of [E51 | E52] -> (fun (V91, V92) -> fun (V93) -> case V92 of [E53 | E54] -> (fun (V94, V95) -> case V95 of [] -> begin (V96 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V93))), case V96 of {'Idris.Prelude.Types.Left', E55} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V98) -> begin (V99 = {'Idris.Compiler.Erlang.IR.ErlExpr.EReceive', V3, [{'Idris.Compiler.Erlang.IR.ErlExpr.MTransform', {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, V98, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genJust'(V3, {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V3, V98}))} | []], V91, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genNothing'(V3))}), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genMkIORes'(V3, V99))} end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E53, E54)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E51, E52)); _ -> fun (V100) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlModule"/utf8>> -> fun (V101) -> case V5 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EAtom', V3, ('Idris.Idris2.Compiler.Erlang.Name':'un--currentModuleName'(V2))}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlMatchExact"/utf8>> -> case V5 of [E57 | E58] -> (fun (V102, V103) -> fun (V104) -> case V103 of [E59 | E60] -> (fun (V105, V106) -> case V106 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genBoolToInt'(V3, {'Idris.Compiler.Erlang.IR.ErlExpr.EOp', V3, <<"=:="/utf8>>, V102, V105}))}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E59, E60)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E57, E58)); _ -> fun (V107) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeCodepoint"/utf8>> -> case V5 of [E61 | E62] -> (fun (V108, V109) -> fun (V110) -> case V109 of [] -> ('un--genDecode'(V0, V3, V108, {'Idris.Compiler.Erlang.IR.ErlExpr.MCodepoint'}, V110)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E61, E62)); _ -> fun (V111) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeInteger"/utf8>> -> case V5 of [E63 | E64] -> (fun (V112, V113) -> fun (V114) -> case V113 of [] -> ('un--genDecode'(V0, V3, V112, {'Idris.Compiler.Erlang.IR.ErlExpr.MInteger'}, V114)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E63, E64)); _ -> fun (V115) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeDouble"/utf8>> -> case V5 of [E65 | E66] -> (fun (V116, V117) -> fun (V118) -> case V117 of [] -> ('un--genDecode'(V0, V3, V116, {'Idris.Compiler.Erlang.IR.ErlExpr.MFloat'}, V118)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E65, E66)); _ -> fun (V119) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeAtom"/utf8>> -> case V5 of [E67 | E68] -> (fun (V120, V121) -> fun (V122) -> case V121 of [] -> ('un--genDecode'(V0, V3, V120, {'Idris.Compiler.Erlang.IR.ErlExpr.MAtom'}, V122)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E67, E68)); _ -> fun (V123) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeBinary"/utf8>> -> case V5 of [E69 | E70] -> (fun (V124, V125) -> fun (V126) -> case V125 of [] -> ('un--genDecode'(V0, V3, V124, {'Idris.Compiler.Erlang.IR.ErlExpr.MBinary'}, V126)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E69, E70)); _ -> fun (V127) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodePid"/utf8>> -> case V5 of [E71 | E72] -> (fun (V128, V129) -> fun (V130) -> case V129 of [] -> ('un--genDecode'(V0, V3, V128, {'Idris.Compiler.Erlang.IR.ErlExpr.MPid'}, V130)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E71, E72)); _ -> fun (V131) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erldecodeReference"/utf8>> -> case V5 of [E73 | E74] -> (fun (V132, V133) -> fun (V134) -> case V133 of [] -> ('un--genDecode'(V0, V3, V132, {'Idris.Compiler.Erlang.IR.ErlExpr.MRef'}, V134)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E73, E74)); _ -> fun (V135) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodePort"/utf8>> -> case V5 of [E75 | E76] -> (fun (V136, V137) -> fun (V138) -> case V137 of [] -> ('un--genDecode'(V0, V3, V136, {'Idris.Compiler.Erlang.IR.ErlExpr.MPort'}, V138)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E75, E76)); _ -> fun (V139) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeAnyMap"/utf8>> -> case V5 of [E77 | E78] -> (fun (V140, V141) -> fun (V142) -> case V141 of [] -> ('un--genDecode'(V0, V3, V140, {'Idris.Compiler.Erlang.IR.ErlExpr.MMap'}, V142)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E77, E78)); _ -> fun (V143) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeAnyList"/utf8>> -> case V5 of [E79 | E80] -> (fun (V144, V145) -> fun (V146) -> case V145 of [] -> ('un--genDecode'(V0, V3, V144, {'Idris.Compiler.Erlang.IR.ErlExpr.MAnyList'}, V146)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E79, E80)); _ -> fun (V147) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeNil"/utf8>> -> case V5 of [E81 | E82] -> (fun (V148, V149) -> fun (V150) -> case V149 of [] -> ('un--genDecode'(V0, V3, V148, {'Idris.Compiler.Erlang.IR.ErlExpr.MNil'}, V150)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E81, E82)); _ -> fun (V151) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeCons"/utf8>> -> fun (V152) -> case V5 of [E83 | E84] -> (fun (V153, V154) -> case V154 of [] -> begin (V155 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V152))), case V155 of {'Idris.Prelude.Types.Left', E85} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V157) -> begin (V158 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V152))), case V158 of {'Idris.Prelude.Types.Left', E87} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V160) -> ('un--genDecode'(V0, V3, V153, {'Idris.Compiler.Erlang.IR.ErlExpr.MCons', {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}, V157, V160, {'Idris.Compiler.Erlang.IR.ErlExpr.ECons', V3, {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V3, V157}, {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V3, V160}}}, V152)) end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E83, E84)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple0"/utf8>> -> case V5 of [E89 | E90] -> (fun (V161, V162) -> fun (V163) -> case V162 of [] -> ('un--genDecodeTuple'(V0, V3, V161, 0, V163)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E89, E90)); _ -> fun (V164) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple1"/utf8>> -> case V5 of [E91 | E92] -> (fun (V165, V166) -> fun (V167) -> case V166 of [] -> ('un--genDecodeTuple'(V0, V3, V165, (1 + 0), V167)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E91, E92)); _ -> fun (V168) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple2"/utf8>> -> case V5 of [E93 | E94] -> (fun (V169, V170) -> fun (V171) -> case V170 of [] -> ('un--genDecodeTuple'(V0, V3, V169, (1 + (1 + 0)), V171)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E93, E94)); _ -> fun (V172) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple3"/utf8>> -> case V5 of [E95 | E96] -> (fun (V173, V174) -> fun (V175) -> case V174 of [] -> ('un--genDecodeTuple'(V0, V3, V173, (1 + (1 + (1 + 0))), V175)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E95, E96)); _ -> fun (V176) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple4"/utf8>> -> case V5 of [E97 | E98] -> (fun (V177, V178) -> fun (V179) -> case V178 of [] -> ('un--genDecodeTuple'(V0, V3, V177, (1 + (1 + (1 + (1 + 0)))), V179)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E97, E98)); _ -> fun (V180) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple5"/utf8>> -> case V5 of [E99 | E100] -> (fun (V181, V182) -> fun (V183) -> case V182 of [] -> ('un--genDecodeTuple'(V0, V3, V181, (1 + (1 + (1 + (1 + (1 + 0))))), V183)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E99, E100)); _ -> fun (V184) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple6"/utf8>> -> case V5 of [E101 | E102] -> (fun (V185, V186) -> fun (V187) -> case V186 of [] -> ('un--genDecodeTuple'(V0, V3, V185, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), V187)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E101, E102)); _ -> fun (V188) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple7"/utf8>> -> case V5 of [E103 | E104] -> (fun (V189, V190) -> fun (V191) -> case V190 of [] -> ('un--genDecodeTuple'(V0, V3, V189, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), V191)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E103, E104)); _ -> fun (V192) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeTuple8"/utf8>> -> case V5 of [E105 | E106] -> (fun (V193, V194) -> fun (V195) -> case V194 of [] -> ('un--genDecodeTuple'(V0, V3, V193, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), V195)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E105, E106)); _ -> fun (V196) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun0"/utf8>> -> case V5 of [E107 | E108] -> (fun (V197, V198) -> fun (V199) -> case V198 of [] -> ('un--genDecode'(V0, V3, V197, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', 0}, V199)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E107, E108)); _ -> fun (V200) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun1"/utf8>> -> case V5 of [E109 | E110] -> (fun (V201, V202) -> case V202 of [E111 | E112] -> (fun (V203, V204) -> fun (V205) -> case V204 of [] -> ('un--genDecode'(V0, V3, V203, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', (1 + 0)}, V205)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E111, E112)); _ -> fun (V206) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E109, E110)); _ -> fun (V207) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun2"/utf8>> -> case V5 of [E113 | E114] -> (fun (V208, V209) -> case V209 of [E115 | E116] -> (fun (V210, V211) -> case V211 of [E117 | E118] -> (fun (V212, V213) -> fun (V214) -> case V213 of [] -> ('un--genDecode'(V0, V3, V212, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', (1 + (1 + 0))}, V214)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E117, E118)); _ -> fun (V215) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E115, E116)); _ -> fun (V216) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E113, E114)); _ -> fun (V217) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun3"/utf8>> -> case V5 of [E119 | E120] -> (fun (V218, V219) -> case V219 of [E121 | E122] -> (fun (V220, V221) -> case V221 of [E123 | E124] -> (fun (V222, V223) -> case V223 of [E125 | E126] -> (fun (V224, V225) -> fun (V226) -> case V225 of [] -> ('un--genDecode'(V0, V3, V224, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', (1 + (1 + (1 + 0)))}, V226)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E125, E126)); _ -> fun (V227) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E123, E124)); _ -> fun (V228) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E121, E122)); _ -> fun (V229) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E119, E120)); _ -> fun (V230) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun4"/utf8>> -> case V5 of [E127 | E128] -> (fun (V231, V232) -> case V232 of [E129 | E130] -> (fun (V233, V234) -> case V234 of [E131 | E132] -> (fun (V235, V236) -> case V236 of [E133 | E134] -> (fun (V237, V238) -> case V238 of [E135 | E136] -> (fun (V239, V240) -> fun (V241) -> case V240 of [] -> ('un--genDecode'(V0, V3, V239, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', (1 + (1 + (1 + (1 + 0))))}, V241)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E135, E136)); _ -> fun (V242) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E133, E134)); _ -> fun (V243) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E131, E132)); _ -> fun (V244) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E129, E130)); _ -> fun (V245) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E127, E128)); _ -> fun (V246) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun5"/utf8>> -> case V5 of [E137 | E138] -> (fun (V247, V248) -> case V248 of [E139 | E140] -> (fun (V249, V250) -> case V250 of [E141 | E142] -> (fun (V251, V252) -> case V252 of [E143 | E144] -> (fun (V253, V254) -> case V254 of [E145 | E146] -> (fun (V255, V256) -> case V256 of [E147 | E148] -> (fun (V257, V258) -> fun (V259) -> case V258 of [] -> ('un--genDecode'(V0, V3, V257, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', (1 + (1 + (1 + (1 + (1 + 0)))))}, V259)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E147, E148)); _ -> fun (V260) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E145, E146)); _ -> fun (V261) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E143, E144)); _ -> fun (V262) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E141, E142)); _ -> fun (V263) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E139, E140)); _ -> fun (V264) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E137, E138)); _ -> fun (V265) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun6"/utf8>> -> case V5 of [E149 | E150] -> (fun (V266, V267) -> case V267 of [E151 | E152] -> (fun (V268, V269) -> case V269 of [E153 | E154] -> (fun (V270, V271) -> case V271 of [E155 | E156] -> (fun (V272, V273) -> case V273 of [E157 | E158] -> (fun (V274, V275) -> case V275 of [E159 | E160] -> (fun (V276, V277) -> case V277 of [E161 | E162] -> (fun (V278, V279) -> fun (V280) -> case V279 of [] -> ('un--genDecode'(V0, V3, V278, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', (1 + (1 + (1 + (1 + (1 + (1 + 0))))))}, V280)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E161, E162)); _ -> fun (V281) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E159, E160)); _ -> fun (V282) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E157, E158)); _ -> fun (V283) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E155, E156)); _ -> fun (V284) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E153, E154)); _ -> fun (V285) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E151, E152)); _ -> fun (V286) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E149, E150)); _ -> fun (V287) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun7"/utf8>> -> case V5 of [E163 | E164] -> (fun (V288, V289) -> case V289 of [E165 | E166] -> (fun (V290, V291) -> case V291 of [E167 | E168] -> (fun (V292, V293) -> case V293 of [E169 | E170] -> (fun (V294, V295) -> case V295 of [E171 | E172] -> (fun (V296, V297) -> case V297 of [E173 | E174] -> (fun (V298, V299) -> case V299 of [E175 | E176] -> (fun (V300, V301) -> case V301 of [E177 | E178] -> (fun (V302, V303) -> fun (V304) -> case V303 of [] -> ('un--genDecode'(V0, V3, V302, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))}, V304)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E177, E178)); _ -> fun (V305) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E175, E176)); _ -> fun (V306) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E173, E174)); _ -> fun (V307) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E171, E172)); _ -> fun (V308) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E169, E170)); _ -> fun (V309) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E167, E168)); _ -> fun (V310) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E165, E166)); _ -> fun (V311) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E163, E164)); _ -> fun (V312) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlDecodeFun8"/utf8>> -> case V5 of [E179 | E180] -> (fun (V313, V314) -> case V314 of [E181 | E182] -> (fun (V315, V316) -> case V316 of [E183 | E184] -> (fun (V317, V318) -> case V318 of [E185 | E186] -> (fun (V319, V320) -> case V320 of [E187 | E188] -> (fun (V321, V322) -> case V322 of [E189 | E190] -> (fun (V323, V324) -> case V324 of [E191 | E192] -> (fun (V325, V326) -> case V326 of [E193 | E194] -> (fun (V327, V328) -> case V328 of [E195 | E196] -> (fun (V329, V330) -> fun (V331) -> case V330 of [] -> ('un--genDecode'(V0, V3, V329, {'Idris.Compiler.Erlang.IR.ErlExpr.MFun', (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))}, V331)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E195, E196)); _ -> fun (V332) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E193, E194)); _ -> fun (V333) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E191, E192)); _ -> fun (V334) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E189, E190)); _ -> fun (V335) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E187, E188)); _ -> fun (V336) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E185, E186)); _ -> fun (V337) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E183, E184)); _ -> fun (V338) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E181, E182)); _ -> fun (V339) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E179, E180)); _ -> fun (V340) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferNew"/utf8>> -> fun (V341) -> case V5 of [E197 | E198] -> (fun (V342, V343) -> case V343 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferNew', V3, V342}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E197, E198)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferResize"/utf8>> -> case V5 of [E199 | E200] -> (fun (V344, V345) -> fun (V346) -> case V345 of [E201 | E202] -> (fun (V347, V348) -> case V348 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferResize', V3, V344, V347}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E201, E202)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E199, E200)); _ -> fun (V349) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferFlatten"/utf8>> -> case V5 of [E203 | E204] -> (fun (V350, V351) -> fun (V352) -> case V351 of [E205 | E206] -> (fun (V353, V354) -> case V354 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferFlatten', V3, V350, V353}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E205, E206)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E203, E204)); _ -> fun (V355) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetByte"/utf8>> -> case V5 of [E207 | E208] -> (fun (V356, V357) -> case V357 of [E209 | E210] -> (fun (V358, V359) -> fun (V360) -> case V359 of [E211 | E212] -> (fun (V361, V362) -> case V362 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetBits8', V3, V356, V358, V361}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E211, E212)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E209, E210)); _ -> fun (V363) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E207, E208)); _ -> fun (V364) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetByte"/utf8>> -> case V5 of [E213 | E214] -> (fun (V365, V366) -> fun (V367) -> case V366 of [E215 | E216] -> (fun (V368, V369) -> case V369 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetBits8', V3, V365, V368}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E215, E216)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E213, E214)); _ -> fun (V370) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetBits8"/utf8>> -> case V5 of [E217 | E218] -> (fun (V371, V372) -> case V372 of [E219 | E220] -> (fun (V373, V374) -> fun (V375) -> case V374 of [E221 | E222] -> (fun (V376, V377) -> case V377 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetBits8', V3, V371, V373, V376}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E221, E222)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E219, E220)); _ -> fun (V378) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E217, E218)); _ -> fun (V379) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetBits8"/utf8>> -> case V5 of [E223 | E224] -> (fun (V380, V381) -> fun (V382) -> case V381 of [E225 | E226] -> (fun (V383, V384) -> case V384 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetBits8', V3, V380, V383}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E225, E226)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E223, E224)); _ -> fun (V385) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetBits16"/utf8>> -> case V5 of [E227 | E228] -> (fun (V386, V387) -> case V387 of [E229 | E230] -> (fun (V388, V389) -> fun (V390) -> case V389 of [E231 | E232] -> (fun (V391, V392) -> case V392 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetBits16', V3, V386, V388, V391}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E231, E232)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E229, E230)); _ -> fun (V393) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E227, E228)); _ -> fun (V394) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetBits16"/utf8>> -> case V5 of [E233 | E234] -> (fun (V395, V396) -> fun (V397) -> case V396 of [E235 | E236] -> (fun (V398, V399) -> case V399 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetBits16', V3, V395, V398}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E235, E236)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E233, E234)); _ -> fun (V400) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetBits32"/utf8>> -> case V5 of [E237 | E238] -> (fun (V401, V402) -> case V402 of [E239 | E240] -> (fun (V403, V404) -> fun (V405) -> case V404 of [E241 | E242] -> (fun (V406, V407) -> case V407 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetBits32', V3, V401, V403, V406}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E241, E242)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E239, E240)); _ -> fun (V408) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E237, E238)); _ -> fun (V409) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetBits32"/utf8>> -> case V5 of [E243 | E244] -> (fun (V410, V411) -> fun (V412) -> case V411 of [E245 | E246] -> (fun (V413, V414) -> case V414 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetBits32', V3, V410, V413}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E245, E246)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E243, E244)); _ -> fun (V415) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetBits64"/utf8>> -> case V5 of [E247 | E248] -> (fun (V416, V417) -> case V417 of [E249 | E250] -> (fun (V418, V419) -> fun (V420) -> case V419 of [E251 | E252] -> (fun (V421, V422) -> case V422 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetBits64', V3, V416, V418, V421}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E251, E252)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E249, E250)); _ -> fun (V423) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E247, E248)); _ -> fun (V424) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetBits64"/utf8>> -> case V5 of [E253 | E254] -> (fun (V425, V426) -> fun (V427) -> case V426 of [E255 | E256] -> (fun (V428, V429) -> case V429 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetBits64', V3, V425, V428}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E255, E256)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E253, E254)); _ -> fun (V430) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetInt32"/utf8>> -> case V5 of [E257 | E258] -> (fun (V431, V432) -> case V432 of [E259 | E260] -> (fun (V433, V434) -> fun (V435) -> case V434 of [E261 | E262] -> (fun (V436, V437) -> case V437 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetInt32', V3, V431, V433, V436}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E261, E262)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E259, E260)); _ -> fun (V438) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E257, E258)); _ -> fun (V439) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetInt32"/utf8>> -> case V5 of [E263 | E264] -> (fun (V440, V441) -> fun (V442) -> case V441 of [E265 | E266] -> (fun (V443, V444) -> case V444 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetInt32', V3, V440, V443}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E265, E266)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E263, E264)); _ -> fun (V445) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetInt64"/utf8>> -> case V5 of [E267 | E268] -> (fun (V446, V447) -> case V447 of [E269 | E270] -> (fun (V448, V449) -> fun (V450) -> case V449 of [E271 | E272] -> (fun (V451, V452) -> case V452 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetInt64', V3, V446, V448, V451}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E271, E272)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E269, E270)); _ -> fun (V453) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E267, E268)); _ -> fun (V454) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetInt64"/utf8>> -> case V5 of [E273 | E274] -> (fun (V455, V456) -> fun (V457) -> case V456 of [E275 | E276] -> (fun (V458, V459) -> case V459 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetInt64', V3, V455, V458}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E275, E276)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E273, E274)); _ -> fun (V460) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetDouble"/utf8>> -> case V5 of [E277 | E278] -> (fun (V461, V462) -> case V462 of [E279 | E280] -> (fun (V463, V464) -> fun (V465) -> case V464 of [E281 | E282] -> (fun (V466, V467) -> case V467 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetDouble', V3, V461, V463, V466}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E281, E282)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E279, E280)); _ -> fun (V468) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E277, E278)); _ -> fun (V469) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetDouble"/utf8>> -> case V5 of [E283 | E284] -> (fun (V470, V471) -> fun (V472) -> case V471 of [E285 | E286] -> (fun (V473, V474) -> case V474 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetDouble', V3, V470, V473}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E285, E286)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E283, E284)); _ -> fun (V475) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferSetString"/utf8>> -> case V5 of [E287 | E288] -> (fun (V476, V477) -> case V477 of [E289 | E290] -> (fun (V478, V479) -> fun (V480) -> case V479 of [E291 | E292] -> (fun (V481, V482) -> case V482 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferSetString', V3, V476, V478, V481}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E291, E292)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E289, E290)); _ -> fun (V483) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E287, E288)); _ -> fun (V484) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; <<"prim__erlBufferGetString"/utf8>> -> case V5 of [E293 | E294] -> (fun (V485, V486) -> case V486 of [E295 | E296] -> (fun (V487, V488) -> fun (V489) -> case V488 of [E297 | E298] -> (fun (V490, V491) -> case V491 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EBufferGetString', V3, V485, V487, V490}}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end(E297, E298)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E295, E296)); _ -> fun (V492) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E293, E294)); _ -> fun (V493) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end; _ -> fun (V494) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E2)); _ -> fun (V495) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end end(E0, E1)); _ -> fun (V496) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genThrow'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Error: Badly formed external primitive "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4))))))} end end.
'un--genDef'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.CompileExpr.MkNmFun', E0, E1} -> (fun (V6, V7) -> begin (V8 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>)), V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case ('Idris.Idris2.Compiler.Erlang.Name':'un--moduleNameFunctionName'(V1, V3)) of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> begin (V13 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--addLocalVars'(V10, V6, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V5))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> case V15 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V16, V17) -> begin (V18 = (('un--genNmExp'(V10, V0, V1, V16, V7))(V5))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = {'Idris.Compiler.Erlang.IR.ErlExpr.MkFunDecl', V2, 1, V12, V17, V20}), {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V21}} end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.CompileExpr.MkNmCon', E12, E13, E14} -> (fun (V22, V23, V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E12, E13, E14)); {'Idris.Core.CompileExpr.MkNmForeign', E15, E16, E17} -> (fun (V25, V26, V27) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>)), V5))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> case ('Idris.Idris2.Compiler.Erlang.Name':'un--moduleNameFunctionName'(V1, V3)) of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V31, V32) -> begin (V33 = (('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVars'(V30, ('Idris.Idris2.Prelude.Types.List':'un--length'(V26))))(V5))), case V33 of {'Idris.Prelude.Types.Left', E22} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V35) -> begin (V37 = (('un--genForeign'(V30, V1, V2, V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V36) -> {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V2, V36} end, V35))))(V5))), case V37 of {'Idris.Prelude.Types.Left', E24} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V39) -> begin (V40 = {'Idris.Compiler.Erlang.IR.ErlExpr.MkFunDecl', V2, 1, V32, V35, V39}), {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V40}} end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16, E17)); {'Idris.Core.CompileExpr.MkNmError', E26} -> (fun (V41) -> begin (V42 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport.LV'}, ('Idris.Idris2.Compiler.Erlang.IR.ErlExpr.LocalVars':'un--initLocalVars'(<<"V"/utf8>>)), V5))), case V42 of {'Idris.Prelude.Types.Left', E27} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V44) -> case ('Idris.Idris2.Compiler.Erlang.Name':'un--moduleNameFunctionName'(V1, V3)) of {'Idris.Builtin.MkPair', E29, E30} -> (fun (V45, V46) -> begin (V47 = (('un--genNmExp'(V44, V0, V1, ('Idris.Idris2.Libraries.Data.NameMap':'un--empty'()), V41))(V5))), case V47 of {'Idris.Prelude.Types.Left', E31} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V49) -> begin (V50 = {'Idris.Compiler.Erlang.IR.ErlExpr.MkFunDecl', V2, 0, V46, [], V49}), {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V50}} end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genDecodeTuple'(V0, V1, V2, V3, V4) -> begin (V5 = (('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVars'(V0, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> ('un--genDecode'(V0, V1, V2, {'Idris.Compiler.Erlang.IR.ErlExpr.MTuple', ('un--argsToErlMatchers'(V7)), {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V1, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V1, V8} end, V7))}}, V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--genDecode'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--newLocalVar'(V0, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.EMatcherCase', V1, V2, [{'Idris.Compiler.Erlang.IR.ErlExpr.MTransform', V3, V7, ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genJust'(V1, {'Idris.Compiler.Erlang.IR.ErlExpr.ELocal', V1, V7}))} | []], ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genNothing'(V1))}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--genConstant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt', V1} end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V2) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt8', V2} end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V3) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt16', V3} end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V4) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt32', V4} end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V5) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt64', V5} end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInteger', V6} end(E5)); {'Idris.Core.TT.B8', E6} -> (fun (V7) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IB8', V7} end(E6)); {'Idris.Core.TT.B16', E7} -> (fun (V8) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IB16', V8} end(E7)); {'Idris.Core.TT.B32', E8} -> (fun (V9) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IB32', V9} end(E8)); {'Idris.Core.TT.B64', E9} -> (fun (V10) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IB64', V10} end(E9)); {'Idris.Core.TT.Str', E10} -> (fun (V11) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IString', V11} end(E10)); {'Idris.Core.TT.Ch', E11} -> (fun (V12) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IChar', V12} end(E11)); {'Idris.Core.TT.Db', E12} -> (fun (V13) -> {'Idris.Compiler.Erlang.IR.ErlExpr.IDouble', V13} end(E12)); {'Idris.Core.TT.WorldVal'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IWorldVal'} end()); {'Idris.Core.TT.IntType'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IIntType'} end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt8Type'} end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt16Type'} end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt32Type'} end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IInt64Type'} end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IIntegerType'} end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IBits8Type'} end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IBits16Type'} end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IBits32Type'} end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IBits64Type'} end()); {'Idris.Core.TT.StringType'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IStringType'} end()); {'Idris.Core.TT.CharType'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.ICharType'} end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IDoubleType'} end()); {'Idris.Core.TT.WorldType'} -> (fun () -> {'Idris.Compiler.Erlang.IR.ErlExpr.IWorldType'} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genConstAlt'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.CompileExpr.MkNConstAlt', E0, E1} -> (fun (V6, V7) -> begin (V8 = (('un--genNmExp'(V0, V1, V2, V3, V7))(V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.MkConstAlt', ('un--genConstant'(V6)), V10}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genConAlt'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.CompileExpr.MkNConAlt', E0, E1, E2, E3, E4} -> (fun (V7, V8, V9, V10, V11) -> begin (V12 = ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--addLocalVars'(V0, V10, V3, V6))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> case V14 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V15, V16) -> begin (V17 = (('un--genNmExp'(V0, V1, V2, V15, V11))(V6))), case V17 of {'Idris.Prelude.Types.Left', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V19) -> (('un--readConAlt'(V0, V1, V2, V4, V7, V16, V19))(V6)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCon'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V5, V6) -> case V6 of {'Idris.Core.Name.UN', E2} -> (fun (V7) -> begin (V8 = {'Idris.Core.Name.NS', V5, {'Idris.Core.Name.UN', V7}}), case ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V5)) of [E3 | E4] -> (fun (V9, V10) -> case V9 of <<"Basics"/utf8>> -> case V10 of [E5 | E6] -> (fun (V11, V12) -> case V11 of <<"Prelude"/utf8>> -> case V12 of [] -> case V7 of <<"Nil"/utf8>> -> fun (V13) -> case V4 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ENil', V2}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"::"/utf8>> -> case V4 of [E7 | E8] -> (fun (V14, V15) -> fun (V16) -> case V15 of [E9 | E10] -> (fun (V17, V18) -> case V18 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECons', V2, V14, V17}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E9, E10)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E7, E8)); _ -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E5, E6)); _ -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"Types"/utf8>> -> case V10 of [E11 | E12] -> (fun (V24, V25) -> case V24 of <<"Erlang"/utf8>> -> case V25 of [] -> case V7 of <<"MkAtom"/utf8>> -> fun (V26) -> case V4 of [E13 | E14] -> (fun (V27, V28) -> case V28 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafeStringToAtom'(V2, V27))}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E13, E14)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkCharlist"/utf8>> -> fun (V29) -> case V4 of [E15 | E16] -> (fun (V30, V31) -> case V31 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genFunCall'(V2, <<"unicode"/utf8>>, <<"characters_to_list"/utf8>>, [V30 | []]))}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E15, E16)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkTuple0"/utf8>> -> fun (V32) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple1"/utf8>> -> fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple2"/utf8>> -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple3"/utf8>> -> fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple4"/utf8>> -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple5"/utf8>> -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple6"/utf8>> -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple7"/utf8>> -> fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkTuple8"/utf8>> -> fun (V40) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ETuple', V2, V4}} end; <<"MkFun0"/utf8>> -> fun (V41) -> case V4 of [E17 | E18] -> (fun (V42, V43) -> case V43 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 0, fun (V44) -> V44 end, V42, V41)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E17, E18)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkFun1"/utf8>> -> fun (V45) -> case V4 of [E19 | E20] -> (fun (V46, V47) -> case V47 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + 0), fun (V48) -> V48 end, V46, V45)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E19, E20)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkFun2"/utf8>> -> fun (V49) -> case V4 of [E21 | E22] -> (fun (V50, V51) -> case V51 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + 0)), fun (V52) -> V52 end, V50, V49)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E21, E22)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkFun3"/utf8>> -> fun (V53) -> case V4 of [E23 | E24] -> (fun (V54, V55) -> case V55 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + 0))), fun (V56) -> V56 end, V54, V53)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E23, E24)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkFun4"/utf8>> -> fun (V57) -> case V4 of [E25 | E26] -> (fun (V58, V59) -> case V59 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + 0)))), fun (V60) -> V60 end, V58, V57)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E25, E26)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkFun5"/utf8>> -> fun (V61) -> case V4 of [E27 | E28] -> (fun (V62, V63) -> case V63 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V64) -> V64 end, V62, V61)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E27, E28)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkFun6"/utf8>> -> fun (V65) -> case V4 of [E29 | E30] -> (fun (V66, V67) -> case V67 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), fun (V68) -> V68 end, V66, V65)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E29, E30)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkFun7"/utf8>> -> fun (V69) -> case V4 of [E31 | E32] -> (fun (V70, V71) -> case V71 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun (V72) -> V72 end, V70, V69)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E31, E32)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkFun8"/utf8>> -> fun (V73) -> case V4 of [E33 | E34] -> (fun (V74, V75) -> case V75 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun (V76) -> V76 end, V74, V73)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E33, E34)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun0"/utf8>> -> fun (V77) -> case V4 of [E35 | E36] -> (fun (V78, V79) -> case V79 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, 0, fun (V80) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V80)) end, V78, V77)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E35, E36)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun1"/utf8>> -> fun (V81) -> case V4 of [E37 | E38] -> (fun (V82, V83) -> case V83 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + 0), fun (V84) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V84)) end, V82, V81)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E37, E38)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun2"/utf8>> -> fun (V85) -> case V4 of [E39 | E40] -> (fun (V86, V87) -> case V87 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + 0)), fun (V88) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V88)) end, V86, V85)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E39, E40)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun3"/utf8>> -> fun (V89) -> case V4 of [E41 | E42] -> (fun (V90, V91) -> case V91 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + 0))), fun (V92) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V92)) end, V90, V89)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E41, E42)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun4"/utf8>> -> fun (V93) -> case V4 of [E43 | E44] -> (fun (V94, V95) -> case V95 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + 0)))), fun (V96) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V96)) end, V94, V93)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E43, E44)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun5"/utf8>> -> fun (V97) -> case V4 of [E45 | E46] -> (fun (V98, V99) -> case V99 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + (1 + 0))))), fun (V100) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V100)) end, V98, V97)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E45, E46)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun6"/utf8>> -> fun (V101) -> case V4 of [E47 | E48] -> (fun (V102, V103) -> case V103 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + (1 + (1 + 0)))))), fun (V104) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V104)) end, V102, V101)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E47, E48)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun7"/utf8>> -> fun (V105) -> case V4 of [E49 | E50] -> (fun (V106, V107) -> case V107 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0))))))), fun (V108) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V108)) end, V106, V105)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E49, E50)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MkIOFun8"/utf8>> -> fun (V109) -> case V4 of [E51 | E52] -> (fun (V110, V111) -> case V111 of [] -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUncurry'(V0, V2, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), fun (V112) -> ('Idris.Idris2.Compiler.Erlang.Codegen.NamedCExpToErlExpr.RtsSupport':'un--genUnsafePerformIO'(V1, V2, V112)) end, V110, V109)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E51, E52)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V113) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V115) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E11, E12)); _ -> fun (V116) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"MaybeImproperList"/utf8>> -> case V10 of [E53 | E54] -> (fun (V117, V118) -> case V117 of <<"Types"/utf8>> -> case V118 of [E55 | E56] -> (fun (V119, V120) -> case V119 of <<"Erlang"/utf8>> -> case V120 of [] -> case V7 of <<"Nil"/utf8>> -> fun (V121) -> case V4 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ENil', V2}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"::"/utf8>> -> case V4 of [E57 | E58] -> (fun (V122, V123) -> fun (V124) -> case V123 of [E59 | E60] -> (fun (V125, V126) -> case V126 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECons', V2, V122, V125}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E59, E60)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E57, E58)); _ -> fun (V127) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V128) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V129) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V130) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E55, E56)); _ -> fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V132) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E53, E54)); _ -> fun (V133) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"ProperList"/utf8>> -> case V10 of [E61 | E62] -> (fun (V134, V135) -> case V134 of <<"Types"/utf8>> -> case V135 of [E63 | E64] -> (fun (V136, V137) -> case V136 of <<"Erlang"/utf8>> -> case V137 of [] -> case V7 of <<"Nil"/utf8>> -> fun (V138) -> case V4 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ENil', V2}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; <<"::"/utf8>> -> case V4 of [E65 | E66] -> (fun (V139, V140) -> fun (V141) -> case V140 of [E67 | E68] -> (fun (V142, V143) -> case V143 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECons', V2, V139, V142}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end(E67, E68)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E65, E66)); _ -> fun (V144) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V145) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V146) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V147) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E63, E64)); _ -> fun (V148) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V149) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E61, E62)); _ -> fun (V150) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end; _ -> fun (V151) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end(E3, E4)); _ -> fun (V152) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V8)), V4}} end end end end(E2)); _ -> fun (V153) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V3)), V4}} end end end(E0, E1)); _ -> fun (V154) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.Erlang.IR.ErlExpr.ECon', V2, ('Idris.Idris2.Compiler.Erlang.Name':'un--constructorName'(V3)), V4}} end end.
'un--externalArity'(V0) -> case V0 of {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Value'} -> (fun () -> 0 end()); {'Idris.Compiler.Erlang.Codegen.NamedCExpToErlExpr.Arity', E0} -> (fun (V1) -> V1 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--argsToErlMatchers'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> {'Idris.Builtin.MkPair', V1, {'Idris.Compiler.Erlang.IR.ErlExpr.MAny'}} end, V0)).
