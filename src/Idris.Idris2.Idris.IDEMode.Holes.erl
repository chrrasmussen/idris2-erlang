-module('Idris.Idris2.Idris.IDEMode.Holes').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--isHole-1562'/2,
  'nested--8379-1912--in--un--dropShadows'/9,
  'un--tidy'/1,
  'un--showName'/1,
  'un--showHole'/9,
  'un--sexpPremise'/1,
  'un--sexpHole'/1,
  'un--prettyRigHole'/1,
  'un--prettyName'/1,
  'un--prettyImpBracket'/2,
  'un--prettyHole'/9,
  'un--isHole'/1,
  'un--impBracket'/2,
  'un--holeData'/9,
  'un--extractHoleData'/8
]).
'case--isHole-1562'(V0, V1) -> case V1 of {'Idris.Core.Context.Hole', E0, E1} -> (fun (V2, V3) -> {'Idris.Prelude.Types.Just', V2} end(E0, E1)); {'Idris.Core.Context.PMDef', E2, E3, E4, E5, E6} -> (fun (V4, V5, V6, V7, V8) -> case V4 of {'Idris.Core.Context.MkPMDefInfo', E7, E8} -> (fun (V9, V10) -> case V9 of {'Idris.Core.Context.NotHole'} -> (fun () -> {'Idris.Prelude.Types.Nothing'} end()); {'Idris.Core.Context.SolvedHole', E9} -> (fun (V11) -> {'Idris.Prelude.Types.Just', V11} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6)); {'Idris.Core.Context.None'} -> (fun () -> {'Idris.Prelude.Types.Just', 0} end()); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--8379-1912--in--un--dropShadows'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of [] -> []; [E0 | E1] -> (fun (V9, V10) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V11, V12)) end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V13, V14)) end end}, case V9 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E2, E3, E4, E5} -> (fun (V15, V16, V17, V18) -> V15 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V19) -> case V19 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E6, E7, E8, E9} -> (fun (V20, V21, V22, V23) -> V20 end(E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V10)))) of 1 -> ('nested--8379-1912--in--un--dropShadows'(V0, V1, V2, V3, V4, V5, V6, V7, V10)); 0 -> [V9 | ('nested--8379-1912--in--un--dropShadows'(V0, V1, V2, V3, V4, V5, V6, V7, V10))]; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--tidy'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)) end.
'un--showName'(V0) -> case V0 of {'Idris.Core.Name.UN', E0} -> (fun (V1) -> case V1 of <<"_"/utf8>> -> 0; _ -> 1 end end(E0)); {'Idris.Core.Name.MN', E1, E2} -> (fun (V2, V3) -> 0 end(E1, E2)); _ -> 1 end.
'un--showHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--holeData'(V0, V1, V2, V3, V4, V5, V6, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E2, E3, E4} -> (fun (V12, V13, V14) -> case V14 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E30, E31, E32} -> (fun (V15, V16, V17) -> V15 end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E33, E34, E35} -> (fun (V18, V19, V20) -> V19 end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V32)) end end, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V36, V37, V38, V39)) end end end end end end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V41)) end end, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V44, V45, V46)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V47) -> fun (V48) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V47, V48)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V49) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(case V49 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E5, E6, E7, E8} -> (fun (V50, V51, V52, V53) -> V52 end(E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('un--impBracket'(case V49 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E9, E10, E11, E12} -> (fun (V54, V55, V56, V57) -> V57 end(E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--tidy'(case V49 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E13, E14, E15, E16} -> (fun (V58, V59, V60, V61) -> V58 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(case V49 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E17, E18, E19, E20} -> (fun (V62, V63, V64, V65) -> V63 end(E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), <<"\x{a}"/utf8>>)))))))))))))) end, case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E21, E22, E23} -> (fun (V66, V67, V68) -> V68 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-------------------------------------\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E24, E25, E26} -> (fun (V69, V70, V71) -> V69 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E27, E28, E29} -> (fun (V72, V73, V74) -> V73 end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))} end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--sexpPremise'(V0) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Algebra':'un--showCount'(case V0 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V3 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('un--impBracket'(case V0 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> V8 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('un--tidy'(case V0 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> V9 end(E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))} | [{'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(case V0 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> V14 end(E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]]}.
'un--sexpHole'(V0) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(case V0 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E0, E1, E2} -> (fun (V1, V2, V3) -> V1 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} | [{'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V4) -> ('un--sexpPremise'(V4)) end, case V0 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E3, E4, E5} -> (fun (V5, V6, V7) -> V7 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} | [{'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(case V0 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E6, E7, E8} -> (fun (V8, V9, V10) -> V9 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]} | []]]]}.
'un--prettyRigHole'(V0) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V1) -> fun (V2) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V1, V2)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V3) -> fun (V4) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V3, V4)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V5) -> fun (V6) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V5, V6)) end end, fun (V7) -> fun (V8) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V7, V8)) end end}}, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Char'($0)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Char'($1)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))), fun (V9) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--space'()))) end, V0)).
'un--prettyName'(V0) -> case V0 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V1)) end(E0, E1)); _ -> ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V0)) end.
'un--prettyImpBracket'(V0, V1) -> case V0 of 0 -> V1; 1 -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--braces'(V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prettyHole'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = ('un--holeData'(V0, V1, V2, V3, V4, V5, V6, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E2, E3, E4} -> (fun (V12, V13, V14) -> case V14 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E30, E31, E32} -> (fun (V15, V16, V17) -> V15 end(E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E33, E34, E35} -> (fun (V18, V19, V20) -> V19 end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))}; _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--indent'(1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V21) -> ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('un--prettyRigHole'(case V21 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E5, E6, E7, E8} -> (fun (V22, V23, V24, V25) -> V24 end(E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('un--prettyImpBracket'(case V21 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E9, E10, E11, E12} -> (fun (V26, V27, V28, V29) -> V29 end(E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('un--prettyName'(case V21 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E13, E14, E15, E16} -> (fun (V30, V31, V32, V33) -> V30 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(case V21 of {'Idris.Idris.IDEMode.Holes.MkHolePremise', E17, E18, E19, E20} -> (fun (V34, V35, V36, V37) -> V35 end(E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))) end, case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E21, E22, E23} -> (fun (V38, V39, V40) -> V40 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Libraries.Data.String.Extra':'un--replicate'((1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))), $-)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--hardline'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Core.Name':'un--nameRoot'(case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E24, E25, E26} -> (fun (V41, V42, V43) -> V41 end(E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()), ('Idris.Idris2.Idris.Pretty':'un--prettyTerm'(case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E27, E28, E29} -> (fun (V44, V45, V46) -> V45 end(E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))} end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--isHole'(V0) -> ('case--isHole-1562'(V0, case V0 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> V18 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'un--impBracket'(V0, V1) -> case V0 of 0 -> V1; 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"}"/utf8>>)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--holeData'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> begin (V9 = (('un--extractHoleData'(V0, V1, V2, V3, V4, V5, V6, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--getPPrint'(V1, V8))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Right', case case V14 of {'Idris.Core.Options.MkPPOpts', E7, E8, E9} -> (fun (V15, V16, V17) -> V15 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> V11; 0 -> case V11 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E4, E5, E6} -> (fun (V18, V19, V20) -> {'Idris.Idris.IDEMode.Holes.MkHoleData', V18, V19, ('nested--8379-1912--in--un--dropShadows'(V0, V7, V6, V5, V4, V3, V2, V1, V20))} end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--extractHoleData'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of 0 -> fun (V8) -> begin (V12 = begin (V9 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V3, V4, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E25} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V11) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'(V0, V1, V2, V4, V11, V8)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V12 of {'Idris.Prelude.Types.Left', E27} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.Holes.MkHoleData', V5, V14, []}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V15 = (V6 - 1)), case V7 of {'Idris.Core.TT.Bind', E4, E5, E6, E7} -> (fun (V16, V17, V18, V19) -> case V18 of {'Idris.Core.TT.Let', E21, E22, E23, E24} -> (fun (V20, V21, V22, V23) -> ('un--extractHoleData'(V0, V1, V2, V3, V4, V5, V15, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V22, V19)))) end(E21, E22, E23, E24)); _ -> fun (V24) -> begin (V25 = (('un--extractHoleData'([V17 | V0], V1, V2, V3, {'Idris.Core.Env.::', V18, V4}, V5, V15, V19))(V24))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> case ('un--showName'(V17)) of 1 -> begin (V28 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"idemode.hole"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Showing name: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)))) end, V24))), case V28 of {'Idris.Prelude.Types.Left', E10} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V30) -> begin (V34 = begin (V31 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V3, V4, ('Idris.Idris2.Core.TT':'un--binderType'(V18)), V24))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'(V0, V1, V2, V4, V33, V24)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V37 = {'Idris.Idris.IDEMode.Holes.MkHolePremise', V17, V36, ('Idris.Idris2.Core.TT':'un--multiplicity'(V18)), ('Idris.Idris2.Core.TT':'un--isImplicit'(V18))}), {'Idris.Prelude.Types.Right', case V27 of {'Idris.Idris.IDEMode.Holes.MkHoleData', E16, E17, E18} -> (fun (V38, V39, V40) -> {'Idris.Idris.IDEMode.Holes.MkHoleData', V38, V39, [V37 | V40]} end(E16, E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V41 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"idemode.hole"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not showing name: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V17)))) end, V24))), case V41 of {'Idris.Prelude.Types.Left', E19} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V43) -> {'Idris.Prelude.Types.Right', V27} end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5, E6, E7)); _ -> fun (V44) -> begin (V48 = begin (V45 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V1, V0, V3, V4, V7, V44))), case V45 of {'Idris.Prelude.Types.Left', E0} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V47) -> ('Idris.Idris2.Idris.Resugar':'un--resugar'(V0, V1, V2, V4, V47, V44)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V48 of {'Idris.Prelude.Types.Left', E2} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.Holes.MkHoleData', V5, V50, []}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end.
