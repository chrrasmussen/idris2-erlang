-module('Idris.Idris2.TTImp.ProcessData').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'nested--8101-6255--in--un--updateNSApp'/4,
  'nested--10141-8111--in--un--isNullary'/5,
  'nested--8575-6671--in--un--getRetType'/5,
  'nested--8575-6672--in--un--getPats'/5,
  'nested--8668-6783--in--un--getDisjointPos'/6,
  'nested--8668-6779--in--un--disjointArgs'/5,
  'nested--8668-6780--in--un--disjoint'/5,
  'nested--8668-6781--in--un--allDisjointWith'/5,
  'nested--8668-6782--in--un--allDisjoint'/5,
  'un--updateNS'/3,
  'un--shaped'/4,
  'un--processDataOpt'/5,
  'un--processData'/11,
  'un--hasArgs'/2,
  'un--getRelevantArg'/6,
  'un--getIndexPats'/3,
  'un--getDetags'/4,
  'un--findNewtype'/3,
  'un--conName'/1,
  'un--checkRetType'/4,
  'un--checkIsType'/5,
  'un--checkFamily'/6,
  'un--checkCon'/12,
  'un--calcRecord'/4,
  'un--calcMaybe'/3,
  'un--calcListy'/3,
  'un--calcEnum'/4,
  'un--calcConInfo'/4
]).
'nested--8101-6255--in--un--updateNSApp'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V2)) of 1 -> {'Idris.TTImp.TTImp.IVar', V4, V1}; 0 -> {'Idris.TTImp.TTImp.IVar', V4, V5}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V6, V7, V8) -> {'Idris.TTImp.TTImp.IApp', V6, ('nested--8101-6255--in--un--updateNSApp'(V0, V1, V2, V7)), V8} end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IAutoApp', V9, ('nested--8101-6255--in--un--updateNSApp'(V0, V1, V2, V10)), V11} end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.INamedApp', V12, ('nested--8101-6255--in--un--updateNSApp'(V0, V1, V2, V13)), V14, V15} end(E8, E9, E10, E11)); _ -> V3 end.
'nested--10141-8111--in--un--isNullary'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V13 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V2, [], V8, {'Idris.Core.Env.Nil'}, case V3 of {'Idris.Core.Context.MkCon', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> V12 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Right', ('un--hasArgs'(0, V15))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--8575-6671--in--un--getRetType'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> begin (V13 = (((V8(V2))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 0}))))(V4))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> ('nested--8575-6671--in--un--getRetType'(V0, V1, V2, V15, V4)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', V3} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', V3} end.
'nested--8575-6672--in--un--getPats'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V10) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, [], V2, ('Idris.Idris2.Builtin':'un--snd'(V10)))) end, V9, [], V4)) end(E0, E1, E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', []} end.
'nested--8668-6783--in--un--getDisjointPos'(V0, V1, V2, V3, V4, V5) -> case V4 of [] -> {'Idris.Prelude.Types.Right', []}; [E0 | E1] -> (fun (V6, V7) -> begin (V8 = ('nested--8668-6783--in--un--getDisjointPos'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V3)), V7, V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('nested--8668-6782--in--un--allDisjoint'(V0, V1, V2, V6, V5))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> case V13 of 1 -> {'Idris.Prelude.Types.Right', [V3 | V10]}; 0 -> {'Idris.Prelude.Types.Right', V10}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8668-6779--in--un--disjointArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 0} end; _ -> case V4 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', 0} end; _ -> fun (V7) -> case V3 of [E0 | E1] -> (fun (V8, V9) -> case V4 of [E2 | E3] -> (fun (V10, V11) -> begin (V12 = (('nested--8668-6780--in--un--disjoint'(V0, V1, V2, V8, V10))(V7))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> (('nested--8668-6779--in--un--disjointArgs'(V0, V1, V2, V9, V11))(V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--8668-6780--in--un--disjoint'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> fun (V10) -> case V4 of {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V11, V12, V13, V14, V15) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7, V13)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> begin (V17 = begin (V16 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> begin (V21 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V20) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, ('Idris.Idris2.Builtin':'un--snd'(V20)))) end, V9, [], V10))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> begin (V25 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V24) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, ('Idris.Idris2.Builtin':'un--snd'(V24)))) end, V15, [], V10))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> (('nested--8668-6779--in--un--disjointArgs'(V0, V1, V2, V23, V27))(V10)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5, E6, E7, E8, E9)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NTCon', E16, E17, E18, E19, E20} -> (fun (V28, V29, V30, V31, V32) -> fun (V33) -> case V4 of {'Idris.Core.Value.NDCon', E21, E22, E23, E24, E25} -> (fun (V34, V35, V36, V37, V38) -> case ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V29, V35)) of 1 -> {'Idris.Prelude.Types.Right', 1}; 0 -> begin (V40 = begin (V39 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E26} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V42) -> begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V43) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V42, ('Idris.Idris2.Builtin':'un--snd'(V43)))) end, V32, [], V33))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> begin (V48 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V42, ('Idris.Idris2.Builtin':'un--snd'(V47)))) end, V38, [], V33))), case V48 of {'Idris.Prelude.Types.Left', E30} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V50) -> (('nested--8668-6779--in--un--disjointArgs'(V0, V1, V2, V46, V50))(V33)) end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22, E23, E24, E25)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E16, E17, E18, E19, E20)); {'Idris.Core.Value.NPrimVal', E32, E33} -> (fun (V51, V52) -> fun (V53) -> case V4 of {'Idris.Core.Value.NPrimVal', E34, E35} -> (fun (V54, V55) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V52, V55))} end(E34, E35)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E32, E33)); _ -> fun (V56) -> {'Idris.Prelude.Types.Right', 0} end end.
'nested--8668-6781--in--un--allDisjointWith'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 1} end; _ -> fun (V6) -> case V3 of {'Idris.Core.Value.NErased', E4, E5} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', 0} end(E4, E5)); _ -> case V4 of [E0 | E1] -> (fun (V9, V10) -> begin (V11 = (('nested--8668-6780--in--un--disjoint'(V0, V1, V2, V3, V9))(V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V13 of 1 -> (('nested--8668-6781--in--un--allDisjointWith'(V0, V1, V2, V3, V10))(V6)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--8668-6782--in--un--allDisjoint'(V0, V1, V2, V3, V4) -> case V3 of [] -> {'Idris.Prelude.Types.Right', 1}; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Value.NErased', E4, E5} -> (fun (V7, V8) -> {'Idris.Prelude.Types.Right', 0} end(E4, E5)); _ -> begin (V9 = ('nested--8668-6782--in--un--allDisjoint'(V0, V1, V2, V6, V4))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> case V11 of 1 -> (('nested--8668-6781--in--un--allDisjointWith'(V0, V1, V2, V5, V6))(V4)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateNS'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V7, ('un--updateNS'(V0, V1, V8))} end(E0, E1, E2, E3, E4, E5)); _ -> ('nested--8101-6255--in--un--updateNSApp'(V2, V1, V0, V2)) end.
'un--shaped'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; [E0 | E1] -> (fun (V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V14 = ('Idris.Idris2.Core.Normalise':'un--normalise'(V0, [], V9, {'Idris.Core.Env.Nil'}, case V4 of {'Idris.Core.Context.MkCon', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> V13 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> case ((V1('erased'))(V16)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', case V4 of {'Idris.Core.Context.MkCon', E10, E11, E12, E13} -> (fun (V17, V18, V19, V20) -> V18 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}}; 0 -> ('un--shaped'(V0, fun (V21) -> (V1('erased')) end, V5, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processDataOpt'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.TTImp.TTImp.NoHints'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.TTImp.TTImp.SearchBy', E0} -> (fun (V5) -> ('Idris.Idris2.Core.Context':'un--setDetermining'(V0, V1, V2, V5, V4)) end(E0)); {'Idris.TTImp.TTImp.UniqueSearch'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setUniqueSearch'(V0, V1, V2, 1, V4)) end()); {'Idris.TTImp.TTImp.External'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--setExternal'(V0, V1, V2, 1, V4)) end()); {'Idris.TTImp.TTImp.NoNewtype'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.TTImp.TTImp.NoEnum'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V9 of {'Idris.TTImp.TTImp.MkImpLater', E0, E1, E2} -> (fun (V11, V12, V13) -> begin (V14 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V12, V10))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V7, [], V0, V13, V10))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V23) -> begin (V52 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, case V23 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V24 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V52 of {'Idris.Prelude.Types.Left', E37} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V54) -> case V54 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V63 = begin (V55 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V16, V10))), case V55 of {'Idris.Prelude.Types.Left', E39} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V57) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V4, fun (V58) -> {'Idris.Core.Core.InCon', V7, V16, V58} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V57, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V59) -> fun (V60) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V59, V60)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V61) -> fun (V62) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V61, V62)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V19}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'(V11))}))))(V10)) end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V63 of {'Idris.Prelude.Types.Left', E41} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V65) -> case V65 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V66, V67) -> begin (V68 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V11, V6, V66))), begin (V69 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)))) end, {'Idris.Core.Env.Nil'}, V68, V10))), case V69 of {'Idris.Prelude.Types.Left', E45} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V71) -> begin (V75 = begin (V72 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V23, V6, V66))(V10))), case V72 of {'Idris.Prelude.Types.Left', E47} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V74) -> (('un--checkIsType'(V1, V7, V16, V6, V74))(V10)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V75 of {'Idris.Prelude.Types.Left', E49} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V77) -> begin (V78 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V23, {'Idris.Core.Env.Nil'}, V68, V10))), case V78 of {'Idris.Prelude.Types.Left', E51} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V80) -> begin (V85 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V16, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V16, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V81) -> fun (V82) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V81, V82)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V83) -> fun (V84) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V83, V84)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V0, V68, V8, {'Idris.Core.Context.TCon', 0, V80, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V10))), case V85 of {'Idris.Prelude.Types.Left', E53} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V87) -> begin (V88 = ('Idris.Idris2.Core.Context':'un--addMutData'(V1, {'Idris.Core.Name.Resolved', V87}, V10))), case V88 of {'Idris.Prelude.Types.Left', E55} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V90) -> begin (V92 = begin (V91 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V91} end), case V92 of {'Idris.Prelude.Types.Left', E57} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V94) -> begin (V153 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V95) -> fun (V96) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V7, V95, case V94 of {'Idris.Core.Context.MkDefs', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> V98 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V96)) end end, case V94 of {'Idris.Core.Context.MkDefs', E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114} -> (fun (V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> V126 end(E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V153 of {'Idris.Prelude.Types.Left', E115} -> (fun (V154) -> {'Idris.Prelude.Types.Left', V154} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V155) -> begin (V158 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V156) -> fun (V157) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V156, V157)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V66)))), V10))), case V158 of {'Idris.Prelude.Types.Left', E117} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V160) -> begin (V161 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V16, V10))), case V161 of {'Idris.Prelude.Types.Left', E119} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V163) -> begin (V167 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V164) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V164)) end, fun (V165) -> fun (V166) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V165, V166)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V66)))))))))))) end, V10))), case V167 of {'Idris.Prelude.Types.Left', E121} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V169) -> case V8 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> begin (V179 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V170) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V170)) end, fun (V171) -> fun (V172) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V171, V172)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V173) -> fun (V174) -> fun (V175) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V173, V174, V175)) end end end, fun (V176) -> fun (V177) -> fun (V178) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V176, V177, V178)) end end end}, V16, V10))), case V179 of {'Idris.Prelude.Types.Left', E123} -> (fun (V180) -> {'Idris.Prelude.Types.Left', V180} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V181) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V182) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V182)) end, fun (V183) -> fun (V184) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V183, V184)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V185) -> fun (V186) -> fun (V187) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V185, V186, V187)) end end end, fun (V188) -> fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V188, V189, V190)) end end end}, V68, V10)) end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E125} -> (fun (V191) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V16}, V10)) end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.MkImpData', E126, E127, E128, E129, E130} -> (fun (V192, V193, V194, V195, V196) -> begin (V197 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V193, V10))), case V197 of {'Idris.Prelude.Types.Left', E131} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V199) -> begin (V200 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, V7, [], V0, V194, V10))), case V200 of {'Idris.Prelude.Types.Left', E133} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V202) -> begin (V203 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V199)))) end, V10))), case V203 of {'Idris.Prelude.Types.Left', E135} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E135)); {'Idris.Prelude.Types.Right', E136} -> (fun (V205) -> begin (V207 = begin (V206 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V206} end), case V207 of {'Idris.Prelude.Types.Left', E137} -> (fun (V208) -> {'Idris.Prelude.Types.Left', V208} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V209) -> begin (V218 = begin (V210 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V199, V10))), case V210 of {'Idris.Prelude.Types.Left', E139} -> (fun (V211) -> {'Idris.Prelude.Types.Left', V211} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V212) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V4, fun (V213) -> {'Idris.Core.Core.InCon', V7, V199, V213} end, ('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V212, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V214) -> fun (V215) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V214, V215)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V216) -> fun (V217) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V216, V217)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V202}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'(V192))}))))(V10)) end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V218 of {'Idris.Prelude.Types.Left', E141} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E141)); {'Idris.Prelude.Types.Right', E142} -> (fun (V220) -> case V220 of {'Idris.Builtin.MkPair', E143, E144} -> (fun (V221, V222) -> begin (V223 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V192, V6, V221))), begin (V252 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V199, case V209 of {'Idris.Core.Context.MkDefs', E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172} -> (fun (V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251) -> V224 end(E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V252 of {'Idris.Prelude.Types.Left', E173} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E173)); {'Idris.Prelude.Types.Right', E174} -> (fun (V254) -> begin (V336 = case V254 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E175} -> (fun (V255) -> case V255 of {'Idris.Core.Context.MkGlobalDef', E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196} -> (fun (V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276) -> case V273 of {'Idris.Core.Context.TCon', E197, E198, E199, E200, E201, E202, E203, E204} -> (fun (V277, V278, V279, V280, V281, V282, V283, V284) -> case V283 of [] -> begin (V306 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_Term'(V1, [], V209, {'Idris.Core.Env.Nil'}, V223, case V255 of {'Idris.Core.Context.MkGlobalDef', E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225} -> (fun (V285, V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305) -> V287 end(E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V306 of {'Idris.Prelude.Types.Left', E226} -> (fun (V307) -> {'Idris.Prelude.Types.Left', V307} end(E226)); {'Idris.Prelude.Types.Right', E227} -> (fun (V308) -> case V308 of 1 -> {'Idris.Prelude.Types.Right', V282}; 0 -> begin (V330 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Previous"/utf8>> end, {'Idris.Core.Env.Nil'}, case V255 of {'Idris.Core.Context.MkGlobalDef', E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248} -> (fun (V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329) -> V311 end(E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V330 of {'Idris.Prelude.Types.Left', E249} -> (fun (V331) -> {'Idris.Prelude.Types.Left', V331} end(E249)); {'Idris.Prelude.Types.Right', E250} -> (fun (V332) -> begin (V333 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Now"/utf8>> end, {'Idris.Core.Env.Nil'}, V223, V10))), case V333 of {'Idris.Prelude.Types.Left', E251} -> (fun (V334) -> {'Idris.Prelude.Types.Left', V334} end(E251)); {'Idris.Prelude.Types.Right', E252} -> (fun (V335) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V199}, V10)) end(E252)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E250)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V199}, V10)) end end(E197, E198, E199, E200, E201, E202, E203, E204)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V7, V199}, V10)) end end(E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V336 of {'Idris.Prelude.Types.Left', E253} -> (fun (V337) -> {'Idris.Prelude.Types.Left', V337} end(E253)); {'Idris.Prelude.Types.Right', E254} -> (fun (V338) -> begin (V339 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V199)))) end, {'Idris.Core.Env.Nil'}, V223, V10))), case V339 of {'Idris.Prelude.Types.Left', E255} -> (fun (V340) -> {'Idris.Prelude.Types.Left', V340} end(E255)); {'Idris.Prelude.Types.Right', E256} -> (fun (V341) -> begin (V345 = begin (V342 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V209, V6, V221))(V10))), case V342 of {'Idris.Prelude.Types.Left', E257} -> (fun (V343) -> {'Idris.Prelude.Types.Left', V343} end(E257)); {'Idris.Prelude.Types.Right', E258} -> (fun (V344) -> (('un--checkIsType'(V1, V7, V199, V6, V344))(V10)) end(E258)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V345 of {'Idris.Prelude.Types.Left', E259} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E259)); {'Idris.Prelude.Types.Right', E260} -> (fun (V347) -> begin (V348 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V209, {'Idris.Core.Env.Nil'}, V223, V10))), case V348 of {'Idris.Prelude.Types.Left', E261} -> (fun (V349) -> {'Idris.Prelude.Types.Left', V349} end(E261)); {'Idris.Prelude.Types.Right', E262} -> (fun (V350) -> begin (V355 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V199, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V199, ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V351) -> fun (V352) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V351, V352)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V353) -> fun (V354) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V353, V354)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V0, V223, V8, {'Idris.Core.Context.TCon', 0, V350, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V10))), case V355 of {'Idris.Prelude.Types.Left', E263} -> (fun (V356) -> {'Idris.Prelude.Types.Left', V356} end(E263)); {'Idris.Prelude.Types.Right', E264} -> (fun (V357) -> begin (V379 = case V8 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> begin (V367 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V358) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V358)) end, fun (V359) -> fun (V360) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V359, V360)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V361) -> fun (V362) -> fun (V363) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V361, V362, V363)) end end end, fun (V364) -> fun (V365) -> fun (V366) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V364, V365, V366)) end end end}, V199, V10))), case V367 of {'Idris.Prelude.Types.Left', E265} -> (fun (V368) -> {'Idris.Prelude.Types.Left', V368} end(E265)); {'Idris.Prelude.Types.Right', E266} -> (fun (V369) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V370) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V370)) end, fun (V371) -> fun (V372) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V371, V372)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V373) -> fun (V374) -> fun (V375) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V373, V374, V375)) end end end, fun (V376) -> fun (V377) -> fun (V378) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V376, V377, V378)) end end end}, V223, V10)) end(E266)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V379 of {'Idris.Prelude.Types.Left', E267} -> (fun (V380) -> {'Idris.Prelude.Types.Left', V380} end(E267)); {'Idris.Prelude.Types.Right', E268} -> (fun (V381) -> begin (V382 = case ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(V8, 1)) of 1 -> 0; 0 -> V8; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V385 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V383) -> fun (V384) -> ('un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V382, V193, {'Idris.Core.Name.Resolved', V357}, V383, V384)) end end, V196, [], V10))), case V385 of {'Idris.Prelude.Types.Left', E269} -> (fun (V386) -> {'Idris.Prelude.Types.Left', V386} end(E269)); {'Idris.Prelude.Types.Right', E270} -> (fun (V387) -> begin (V388 = {'Idris.Core.Context.MkData', {'Idris.Core.Context.MkCon', V192, V199, V350, V223}, V387}), begin (V393 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V389) -> case V389 of {'Idris.Prelude.Types.Left', E271} -> (fun (V390) -> {'Idris.Prelude.Types.Left', V390} end(E271)); {'Idris.Prelude.Types.Right', E272} -> (fun (V391) -> {'Idris.Prelude.Types.Right', 0} end(E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V392) -> ('Idris.Idris2.Core.Context.Data':'un--addData'(V1, V0, V8, V357, V388, V392)) end, V10))), case V393 of {'Idris.Prelude.Types.Left', E273} -> (fun (V394) -> {'Idris.Prelude.Types.Left', V394} end(E273)); {'Idris.Prelude.Types.Right', E274} -> (fun (V395) -> begin (V400 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V396) -> fun (V397) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V396, V397)) end end, fun (V398) -> fun (V399) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V398, V399)) end end}, {'Idris.TTImp.TTImp.NoNewtype'}, V195)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('un--findNewtype'(V1, V387, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V400 of {'Idris.Prelude.Types.Left', E275} -> (fun (V401) -> {'Idris.Prelude.Types.Left', V401} end(E275)); {'Idris.Prelude.Types.Right', E276} -> (fun (V402) -> begin (V404 = begin (V403 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V403} end), case V404 of {'Idris.Prelude.Types.Left', E277} -> (fun (V405) -> {'Idris.Prelude.Types.Left', V405} end(E277)); {'Idris.Prelude.Types.Right', E278} -> (fun (V406) -> begin (V410 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V199)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" defined in a mutual block with "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V407) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V407)) end, fun (V408) -> fun (V409) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V408, V409)) end end}, V338)))))) end, V10))), case V410 of {'Idris.Prelude.Types.Left', E279} -> (fun (V411) -> {'Idris.Prelude.Types.Left', V411} end(E279)); {'Idris.Prelude.Types.Right', E280} -> (fun (V412) -> begin (V413 = ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V7, {'Idris.Core.Name.Resolved', V357}, V338, V10))), case V413 of {'Idris.Prelude.Types.Left', E281} -> (fun (V414) -> {'Idris.Prelude.Types.Left', V414} end(E281)); {'Idris.Prelude.Types.Right', E282} -> (fun (V415) -> begin (V418 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V416) -> fun (V417) -> ('un--processDataOpt'(V1, V7, {'Idris.Core.Name.Resolved', V357}, V416, V417)) end end, V195, V10))), case V418 of {'Idris.Prelude.Types.Left', E283} -> (fun (V419) -> {'Idris.Prelude.Types.Left', V419} end(E283)); {'Idris.Prelude.Types.Right', E284} -> (fun (V420) -> begin (V421 = ('Idris.Idris2.Core.Context':'un--dropMutData'(V1, {'Idris.Core.Name.Resolved', V357}, V10))), case V421 of {'Idris.Prelude.Types.Left', E285} -> (fun (V422) -> {'Idris.Prelude.Types.Left', V422} end(E285)); {'Idris.Prelude.Types.Right', E286} -> (fun (V423) -> begin (V429 = ('un--getDetags'(V1, V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V424) -> case V424 of {'Idris.Core.Context.MkCon', E287, E288, E289, E290} -> (fun (V425, V426, V427, V428) -> V428 end(E287, E288, E289, E290)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V387)), V10))), case V429 of {'Idris.Prelude.Types.Left', E291} -> (fun (V430) -> {'Idris.Prelude.Types.Left', V430} end(E291)); {'Idris.Prelude.Types.Right', E292} -> (fun (V431) -> begin (V432 = ('Idris.Idris2.Core.Context':'un--setDetags'(V1, V7, {'Idris.Core.Name.Resolved', V357}, V431, V10))), case V432 of {'Idris.Prelude.Types.Left', E293} -> (fun (V433) -> {'Idris.Prelude.Types.Left', V433} end(E293)); {'Idris.Prelude.Types.Right', E294} -> (fun (V434) -> begin (V437 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V435) -> fun (V436) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V435, V436)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V221)))), V10))), case V437 of {'Idris.Prelude.Types.Left', E295} -> (fun (V438) -> {'Idris.Prelude.Types.Left', V438} end(E295)); {'Idris.Prelude.Types.Right', E296} -> (fun (V439) -> begin (V440 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V199, V10))), case V440 of {'Idris.Prelude.Types.Left', E297} -> (fun (V441) -> {'Idris.Prelude.Types.Left', V441} end(E297)); {'Idris.Prelude.Types.Right', E298} -> (fun (V442) -> begin (V446 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V199)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V443) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V443)) end, fun (V444) -> fun (V445) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V444, V445)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V221)))))))))))) end, V10))), case V446 of {'Idris.Prelude.Types.Left', E299} -> (fun (V447) -> {'Idris.Prelude.Types.Left', V447} end(E299)); {'Idris.Prelude.Types.Right', E300} -> (fun (V448) -> begin (V450 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V449) -> ('un--conName'(V449)) end, V387))), begin (V457 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V451) -> fun (V452) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V451, V452)) end end, fun (V453) -> fun (V454) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V453, V454)) end end}, {'Idris.TTImp.TTImp.NoHints'}, V195)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V455) -> fun (V456) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V1, V7, {'Idris.Core.Name.Resolved', V357}, V455, 1, 0, V456)) end end, V450, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V457 of {'Idris.Prelude.Types.Left', E301} -> (fun (V458) -> {'Idris.Prelude.Types.Left', V458} end(E301)); {'Idris.Prelude.Types.Right', E302} -> (fun (V459) -> begin (V464 = case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V460) -> fun (V461) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V460, V461)) end end, fun (V462) -> fun (V463) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V462, V463)) end end}, {'Idris.TTImp.TTImp.NoEnum'}, V195)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('un--calcConInfo'(V1, V7, V387, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V464 of {'Idris.Prelude.Types.Left', E303} -> (fun (V465) -> {'Idris.Prelude.Types.Left', V465} end(E303)); {'Idris.Prelude.Types.Right', E304} -> (fun (V466) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V467) -> fun (V468) -> ('Idris.Idris2.TTImp.Elab.Utils':'un--updateErasable'(V1, V467, V468)) end end, [{'Idris.Core.Name.Resolved', V357} | V450], V10)) end(E304)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E302)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E300)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E298)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E296)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E294)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E292)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E286)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E284)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E282)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E280)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E278)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E276)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E270)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E268)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E264)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E262)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E260)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E256)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E254)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E143, E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E126, E127, E128, E129, E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--hasArgs'(V0, V1) -> case V0 of 0 -> case V1 of {'Idris.Core.TT.Bind', E8, E9, E10, E11} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Pi', E12, E13, E14, E15} -> (fun (V6, V7, V8, V9) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V10, V11)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V12, V13)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V14) -> fun (V15) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V14, V15)) end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V16, V17)) end end}}, V7)) of 1 -> ('un--hasArgs'(0, V5)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13, E14, E15)); _ -> 1 end end(E8, E9, E10, E11)); _ -> 1 end; _ -> begin (V18 = (V0 - 1)), case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V19, V20, V21, V22) -> case V21 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V23, V24, V25, V26) -> case ('Idris.Idris2.Algebra.Semiring':'un--isErased'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V27) -> fun (V28) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V27, V28)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V29) -> fun (V30) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V29, V30)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V31) -> fun (V32) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V33, V34)) end end}}, V24)) of 1 -> ('un--hasArgs'((1 + V18), V22)); 0 -> ('un--hasArgs'(V18, V22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7)); _ -> 0 end end(E0, E1, E2, E3)); _ -> 0 end end end.
'un--getRelevantArg'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> begin (V14 = (((V9(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 0}))))(V5))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> (('Idris.Idris2.Algebra.Semiring':'un--branchZero'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V23, V24)) end end}}, fun () -> fun (V25) -> ('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), V2, V3, V16, V25)) end end, case V13 of {'Idris.Core.Value.NPrimVal', E12, E13} -> (fun (V26, V27) -> case V27 of {'Idris.Core.TT.WorldType'} -> (fun () -> fun () -> fun (V28) -> begin (V29 = (((V9(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 0}))))(V28))), case V29 of {'Idris.Prelude.Types.Left', E16} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V31) -> ('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), V2, 0, V31, V28)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V32) -> begin (V33 = (((V9(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 0}))))(V32))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> ('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), {'Idris.Prelude.Types.Just', V1}, 0, V35, V32)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V36) -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V2)) end end end(E12, E13)); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V38) -> begin (V39 = (((V9(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 0}))))(V38))), case V39 of {'Idris.Prelude.Types.Left', E10} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V41) -> ('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), {'Idris.Prelude.Types.Just', V1}, 0, V41, V38)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V42) -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V2)) end end, V11))(V5)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V44) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V44}} end end, V2))} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V45) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V45}} end end, V2))} end.
'un--getIndexPats'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V6, {'Idris.Core.Env.Nil'}, V1))(V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('nested--8575-6671--in--un--getRetType'(V1, V0, V6, V9, V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> ('nested--8575-6672--in--un--getPats'(V1, V0, V6, V12, V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDetags'(V0, V1, V2, V3) -> case V2 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; [E4 | E5] -> (fun (V4, V5) -> case V5 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}}; _ -> begin (V8 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V6) -> fun (V7) -> ('un--getIndexPats'(V0, V6, V7)) end end, V2, [], V3))), case V8 of {'Idris.Prelude.Types.Left', E6} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V10) -> begin (V11 = ('nested--8668-6783--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'(V10)), V3))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> case V13 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V13}} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> fun (V15) -> ('un--getIndexPats'(V0, V14, V15)) end end, V2, [], V3))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V19 = ('nested--8668-6783--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'(V18)), V3))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> case V21 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V21}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--findNewtype'(V0, V1, V2) -> case V1 of [E0 | E1] -> (fun (V3, V4) -> case V4 of [] -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V16 = begin (V13 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V8, {'Idris.Core.Env.Nil'}, case V3 of {'Idris.Core.Context.MkCon', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> V12 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> ('un--getRelevantArg'(V8, 0, {'Idris.Prelude.Types.Nothing'}, 1, V15, V2)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E12} -> (fun (V19) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V0, case V3 of {'Idris.Core.Context.MkCon', E13, E14, E15, E16} -> (fun (V20, V21, V22, V23) -> V21 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V24) -> case V24 of {'Idris.Core.Context.DCon', E17, E18, E19} -> (fun (V25, V26, V27) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.DCon', V25, V26, {'Idris.Prelude.Types.Just', V19}}} end(E17, E18, E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V2)) end(E12)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--conName'(V0) -> case V0 of {'Idris.Core.Context.MkCon', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkRetType'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = (((V7(V16))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V1, {'Idris.Core.TT.Erased', V4, 0}))))(V12))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> (('un--checkRetType'(V0, V1, V19, V3))(V12)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> (V3(V2)) end end(E0, E1, E2, E3)); _ -> (V3(V2)) end.
'un--checkIsType'(V0, V1, V2, V3, V4) -> ('un--checkRetType'(V0, V3, V4, fun (V5) -> fun (V6) -> case V5 of {'Idris.Core.Value.NType', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Right', 0} end(E0)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadTypeConType', V1, V2}, V6)) end end end)).
'un--checkFamily'(V0, V1, V2, V3, V4, V5) -> ('un--checkRetType'(V0, V4, V5, fun (V6) -> fun (V7) -> case V6 of {'Idris.Core.Value.NType', E0} -> (fun (V8) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadDataConType', V1, V2, V3}, V7)) end(E0)); {'Idris.Core.Value.NTCon', E1, E2, E3, E4, E5} -> (fun (V9, V10, V11, V12, V13) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V10)) of 1 -> {'Idris.Prelude.Types.Right', 0}; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadDataConType', V1, V2, V3}, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2, E3, E4, E5)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.BadDataConType', V1, V2, V3}, V7)) end end end)).
'un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V10 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V12, V13, V14, V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V14, V11))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('un--updateNS'(V8, V9, V15))), begin (V20 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking constructor type "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V19)))))))) end, V11))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V29 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updated "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V24, V25)) end end}, {'Idris.Prelude.Show.MkShow', fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V27, V28)) end end}}, {'Idris.Builtin.MkPair', V8, V9})))) end, V11))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> begin (V64 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V18, case V35 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V36 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11))), case V64 of {'Idris.Prelude.Types.Left', E40} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V66) -> case V66 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V76 = begin (V67 = ('Idris.Idris2.Core.Context':'un--resolveName'(V1, V18, V11))), case V67 of {'Idris.Prelude.Types.Left', E42} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V69) -> (('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'(V4, fun (V70) -> {'Idris.Core.Core.InCon', V12, V18, V70} end, fun (V71) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V69, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V12, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V72) -> fun (V73) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V72, V73)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V74) -> fun (V75) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V74, V75)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V19}, ('Idris.Idris2.Core.Normalise':'un--gType'(V12)), V71)) end))(V11)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V76 of {'Idris.Prelude.Types.Left', E44} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V78) -> begin (V82 = begin (V79 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V35, V6, V78))(V11))), case V79 of {'Idris.Prelude.Types.Left', E46} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V81) -> (('un--checkFamily'(V1, V12, V18, V9, V6, V81))(V11)) end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V82 of {'Idris.Prelude.Types.Left', E48} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V12, V6, V78))), begin (V86 = ('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)))) end, {'Idris.Core.Env.Nil'}, V85, V11))), case V86 of {'Idris.Prelude.Types.Left', E50} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V88) -> begin (V91 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V89) -> fun (V90) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V89, V90)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V78)))), V11))), case V91 of {'Idris.Prelude.Types.Left', E52} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V93) -> begin (V94 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V18, V11))), case V94 of {'Idris.Prelude.Types.Left', E54} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V96) -> begin (V100 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V97) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V97)) end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V98, V99)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'(('Idris.Idris2.Core.TT':'un--getMetas'(V78)))))))))))) end, V11))), case V100 of {'Idris.Prelude.Types.Left', E56} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V102) -> begin (V124 = case V7 of 2 -> begin (V112 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V103) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V103)) end, fun (V104) -> fun (V105) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V104, V105)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V106, V107, V108)) end end end, fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V109, V110, V111)) end end end}, V18, V11))), case V112 of {'Idris.Prelude.Types.Left', E58} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V114) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'(V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V115) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'(V115)) end, fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'(V116, V117)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'(V118, V119, V120)) end end end, fun (V121) -> fun (V122) -> fun (V123) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(V121, V122, V123)) end end end}, V85, V11)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end), case V124 of {'Idris.Prelude.Types.Left', E60} -> (fun (V125) -> {'Idris.Prelude.Types.Left', V125} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V126) -> begin (V127 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V35, {'Idris.Core.Env.Nil'}, V85, V11))), case V127 of {'Idris.Prelude.Types.Left', E62} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V129) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkCon', V12, V18, V129, V85}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E64} -> (fun (V130) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.AlreadyDefined', V12, V18}, V11)) end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--calcRecord'(V0, V1, V2, V3) -> case V2 of [E0 | E1] -> (fun (V4, V5) -> case V5 of [] -> begin (V10 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, case V4 of {'Idris.Core.Context.MkCon', E2, E3, E4, E5} -> (fun (V6, V7, V8, V9) -> V7 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Context.ConType', 7}, V3))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> {'Idris.Prelude.Types.Right', 1} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Right', 0} end.
'un--calcMaybe'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> case V4 of [E2 | E3] -> (fun (V6, V7) -> case V7 of [] -> begin (V10 = ('un--shaped'(V0, fun (V8) -> fun (V9) -> ('un--hasArgs'(0, V9)) end end, V2, V5))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = [V3 | [V6 | []]]), case V12 of {'Idris.Prelude.Types.Just', E6} -> (fun (V14) -> begin (V17 = ('un--shaped'(V0, fun (V15) -> fun (V16) -> ('un--hasArgs'((1 + 0), V16)) end end, V13, V5))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> case V19 of {'Idris.Prelude.Types.Just', E9} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V14, {'Idris.Core.Context.ConType', 5}, V5))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V20, {'Idris.Core.Context.ConType', 6}, V5))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Right', 1} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--calcListy'(V0, V1, V2) -> case V2 of [E0 | E1] -> (fun (V3, V4) -> fun (V5) -> case V4 of [] -> begin (V8 = ('un--shaped'(V0, fun (V6) -> fun (V7) -> ('un--hasArgs'((1 + (1 + 0)), V7)) end end, V2, V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> case V10 of {'Idris.Prelude.Types.Just', E4} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V11, {'Idris.Core.Context.ConType', 3}, V5))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Right', 1} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; [E7 | E8] -> (fun (V15, V16) -> case V16 of [] -> begin (V19 = ('un--shaped'(V0, fun (V17) -> fun (V18) -> ('un--hasArgs'(0, V18)) end end, V2, V5))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> begin (V22 = [V3 | [V15 | []]]), case V21 of {'Idris.Prelude.Types.Just', E11} -> (fun (V23) -> begin (V26 = ('un--shaped'(V0, fun (V24) -> fun (V25) -> ('un--hasArgs'((1 + (1 + 0)), V25)) end end, V22, V5))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> case V28 of {'Idris.Prelude.Types.Just', E14} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V23, {'Idris.Core.Context.ConType', 2}, V5))), case V30 of {'Idris.Prelude.Types.Left', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V29, {'Idris.Core.Context.ConType', 3}, V5))), case V33 of {'Idris.Prelude.Types.Left', E17} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Right', 1} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', 0} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Right', 0} end end end(E0, E1)); _ -> fun (V36) -> {'Idris.Prelude.Types.Right', 0} end end.
'un--calcEnum'(V0, V1, V2, V3) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--allM'(fun (V4) -> fun (V5) -> ('nested--10141-8111--in--un--isNullary'(V2, V1, V0, V4, V5)) end end, V2, V3))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of 1 -> begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Context':'un--setFlag'(V0, V1, V9, {'Idris.Core.Context.ConType', 4}, V10)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> case V11 of {'Idris.Core.Context.MkCon', E2, E3, E4, E5} -> (fun (V12, V13, V14, V15) -> V13 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V2)), V3))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Right', 1} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--calcConInfo'(V0, V1, V2, V3) -> begin (V4 = (('un--calcListy'(V0, V1, V2))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of 0 -> begin (V7 = (('un--calcMaybe'(V0, V1, V2))(V3))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> case V9 of 0 -> begin (V10 = ('un--calcEnum'(V0, V1, V2, V3))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> case V12 of 0 -> begin (V13 = ('un--calcRecord'(V0, V1, V2, V3))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> case V15 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
