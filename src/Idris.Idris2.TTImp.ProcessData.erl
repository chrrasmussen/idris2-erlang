-module('Idris.Idris2.TTImp.ProcessData').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in processData-7473'/25,
  'case--case block in case block in case block in processData-7269'/31,
  'case--case block in case block in processData-7192'/24,
  'case--case block in processData-7099'/22,
  'case--case block in processData-6826'/26,
  'case--processData-6720'/18,
  'case--case block in case block in processData-6517'/23,
  'case--case block in processData-6363'/17,
  'case--processData-6305'/16,
  'case--case block in findNewtype-6222'/6,
  'case--findNewtype-6208'/4,
  'case--getRelevantArg-6065'/12,
  'case--getDetags-5996'/5,
  'case--getDetags,getDisjointPos-5939'/8,
  'case--getDetags,allDisjoint-5889'/6,
  'case--getDetags,allDisjointWith-5835'/7,
  'case--getDetags,disjoint-5685'/14,
  'case--getDetags,disjoint-5560'/14,
  'case--getDetags,disjointArgs-5507'/8,
  'case--case block in checkCon-5218'/20,
  'case--checkCon-5080'/18,
  'case--updateNS,updateNSApp-4973'/6,
  'case--case block in checkFamily-4879'/14,
  'case--checkFamily-4828'/8,
  'case--checkIsType-4775'/7,
  'nested--10909-4964--in--un--updateNSApp'/4,
  'nested--11365-5363--in--un--getRetType'/4,
  'nested--11365-5364--in--un--getPats'/4,
  'nested--11452-5474--in--un--getDisjointPos'/5,
  'nested--11452-5470--in--un--disjointArgs'/5,
  'nested--11452-5471--in--un--disjoint'/5,
  'nested--11452-5472--in--un--allDisjointWith'/5,
  'nested--11452-5473--in--un--allDisjoint'/4,
  'un--updateNS'/3,
  'un--processDataOpt'/4,
  'un--processData'/10,
  'un--getRelevantArg'/5,
  'un--getIndexPats'/3,
  'un--getDetags'/3,
  'un--findNewtype'/2,
  'un--conName'/1,
  'un--checkRetType'/5,
  'un--checkIsType'/6,
  'un--checkFamily'/7,
  'un--checkCon'/11
]).
'case--case block in processData-7473'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24) -> case V5 of {'Idris.Core.TT.Private'} -> (fun () -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> fun (V26) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V27) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V27)) end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V28, V29)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V30, V31)) end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V32, V33)) end end}, V14, V26))), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V37) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V37)) end, fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V38, V39)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V40, V41)) end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V42, V43)) end end}, V20, V26)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in case block in case block in processData-7269'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> case V30 of 0 -> fun (V31) -> {'Idris.Prelude.Types.Right', V29} end; 1 -> fun (V32) -> begin (V54 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Previous"/utf8>> end, {'Idris.Core.Env.Nil'}, case V21 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V35 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V32))), case V54 of {'Idris.Prelude.Types.Left', E21} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V56) -> begin (V57 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Now"/utf8>> end, {'Idris.Core.Env.Nil'}, V20))(V32))), case V57 of {'Idris.Prelude.Types.Left', E23} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V59) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V32)) end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processData-7192'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of {'Idris.Core.Context.TCon', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31) -> case V30 of [] -> fun (V32) -> begin (V54 = ('Idris.Idris2.Core.Normalise':'dn--un--convert_Convert_Term'(V13, [], V16, {'Idris.Core.Env.Nil'}, V20, case V21 of {'Idris.Core.Context.MkGlobalDef', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53) -> V35 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V32))), case V54 of {'Idris.Prelude.Types.Left', E29} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V56) -> case V56 of 0 -> {'Idris.Prelude.Types.Right', V29}; 1 -> begin (V78 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Previous"/utf8>> end, {'Idris.Core.Env.Nil'}, case V21 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77) -> V59 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V32))), case V78 of {'Idris.Prelude.Types.Left', E52} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V80) -> begin (V81 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + 0), fun () -> <<"Now"/utf8>> end, {'Idris.Core.Env.Nil'}, V20))(V32))), case V81 of {'Idris.Prelude.Types.Left', E54} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V83) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V32)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V84) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V84)) end end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> fun (V85) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V6, V14}, V85)) end end.
'case--case block in processData-7099'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21) -> case V21 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V22) -> {'Idris.Prelude.Types.Right', []} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V23) -> begin (V24 = {'Idris.Prelude.Types.Just', V23}), ('case--case block in case block in processData-7192'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V23, V24, case V23 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45) -> V42 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processData-6826'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> case V25 of 0 -> {'Idris.Core.TT.Private'}; 1 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processData-6720'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> begin (V20 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V7, V4, V8, V18))), fun (V21) -> begin (V49 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V14, case V16 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V22 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21))), case V49 of {'Idris.Prelude.Types.Left', E29} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V51) -> begin (V76 = begin (V52 = {'Idris.Builtin.MkPair', V18, V19}), case V51 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E31} -> (fun (V53) -> begin (V54 = {'Idris.Prelude.Types.Just', V53}), (('case--case block in case block in processData-7192'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V19, V18, V52, V20, V53, V54, case V53 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V72 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V21)) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V76 of {'Idris.Prelude.Types.Left', E53} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V78) -> begin (V79 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end, {'Idris.Core.Env.Nil'}, V20))(V21))), case V79 of {'Idris.Prelude.Types.Left', E55} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V81) -> begin (V85 = begin (V82 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V7, V16, V8, V18))(V21))), case V82 of {'Idris.Prelude.Types.Left', E57} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V84) -> (('un--checkIsType'('erased', V13, V6, V14, V8, V84))(V21)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V85 of {'Idris.Prelude.Types.Left', E59} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V87) -> begin (V88 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V13, [], V16, {'Idris.Core.Env.Nil'}, V20, V21))), case V88 of {'Idris.Prelude.Types.Left', E61} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V90) -> begin (V95 = ('Idris.Idris2.Core.Context':'un--addDef'(V13, V14, ('Idris.Idris2.Core.Context':'un--newDef'(V6, V14, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V91) -> fun (V92) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V91, V92)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V93) -> fun (V94) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V93, V94)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V7, V20, V5, {'Idris.Core.Context.TCon', 0, V90, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V21))), case V95 of {'Idris.Prelude.Types.Left', E63} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V97) -> begin (V115 = case V5 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V105 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V98) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V98)) end, fun (V99) -> fun (V100) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V99, V100)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V101) -> fun (V102) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V101, V102)) end end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V103, V104)) end end}, V14, V21))), case V105 of {'Idris.Prelude.Types.Left', E65} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V107) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V108) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V108)) end, fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V109, V110)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V111) -> fun (V112) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V111, V112)) end end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V113, V114)) end end}, V20, V21)) end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V115 of {'Idris.Prelude.Types.Left', E67} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V117) -> begin (V119 = begin (V118 = {'Idris.Builtin.MkPair', V18, V19}), ('case--case block in processData-6826'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V19, V18, V118, V20, V51, V78, V90, V97, ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(V5, {'Idris.Core.TT.Export'})))) end), begin (V121 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V120) -> ('un--checkCon'(V7, V13, V12, V11, V10, V9, V8, V119, V3, {'Idris.Core.Name.Resolved', V97}, V120)) end, V0, []))(V21))), case V121 of {'Idris.Prelude.Types.Left', E69} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V123) -> begin (V124 = {'Idris.Core.Context.MkData', {'Idris.Core.Context.MkCon', V4, V14, V90, V20}, V123}), begin (V128 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V125) -> case V125 of {'Idris.Prelude.Types.Left', E71} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V127) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context.Data':'un--addData'(V13, V7, V5, V97, V124)), V21))), case V128 of {'Idris.Prelude.Types.Left', E73} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V130) -> begin (V135 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V131) -> fun (V132) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V131, V132)) end end, fun (V133) -> fun (V134) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V133, V134)) end end}, {'Idris.TTImp.TTImp.NoNewtype'}, V1)))) of 0 -> (('un--findNewtype'(V13, V123))(V21)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V135 of {'Idris.Prelude.Types.Left', E75} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V137) -> begin (V139 = begin (V138 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V138} end), case V139 of {'Idris.Prelude.Types.Left', E77} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V141) -> begin (V145 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.data"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" defined in a mutual block with "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V142) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V142)) end, fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V143, V144)) end end}, V78)))))) end))(V21))), case V145 of {'Idris.Prelude.Types.Left', E79} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V147) -> begin (V148 = ('Idris.Idris2.Core.Context':'un--setMutWith'(V13, V6, {'Idris.Core.Name.Resolved', V97}, V78, V21))), case V148 of {'Idris.Prelude.Types.Left', E81} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V150) -> begin (V152 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V151) -> ('un--processDataOpt'(V13, V6, {'Idris.Core.Name.Resolved', V97}, V151)) end, V1))(V21))), case V152 of {'Idris.Prelude.Types.Left', E83} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V154) -> begin (V155 = ('Idris.Idris2.Core.Context':'un--dropMutData'(V13, {'Idris.Core.Name.Resolved', V97}, V21))), case V155 of {'Idris.Prelude.Types.Left', E85} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V157) -> begin (V163 = (('un--getDetags'(V13, V6, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V158) -> case V158 of {'Idris.Core.Context.MkCon', E87, E88, E89, E90} -> (fun (V159, V160, V161, V162) -> V162 end(E87, E88, E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V123))))(V21))), case V163 of {'Idris.Prelude.Types.Left', E91} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V165) -> begin (V166 = ('Idris.Idris2.Core.Context':'un--setDetags'(V13, V6, {'Idris.Core.Name.Resolved', V97}, V165, V21))), case V166 of {'Idris.Prelude.Types.Left', E93} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V168) -> begin (V171 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V169) -> fun (V170) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V169, V170)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V18))))))(V21))), case V171 of {'Idris.Prelude.Types.Left', E95} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V173) -> begin (V174 = ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V14, V21))), case V174 of {'Idris.Prelude.Types.Left', E97} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V176) -> begin (V180 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V177) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V177)) end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V178, V179)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V18)))))))))))) end))(V21))), case V180 of {'Idris.Prelude.Types.Left', E99} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V182) -> begin (V184 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V183) -> ('un--conName'(V183)) end, V123))), begin (V191 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V185) -> fun (V186) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V185, V186)) end end, fun (V187) -> fun (V188) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V187, V188)) end end}, {'Idris.TTImp.TTImp.NoHints'}, V1)))) of 0 -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V189) -> fun (V190) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V13, V6, {'Idris.Core.Name.Resolved', V97}, V189, 0, 1, V190)) end end, V184))(V21)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V191 of {'Idris.Prelude.Types.Left', E101} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V193) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V194) -> fun (V195) -> ('Idris.Idris2.TTImp.Elab.Utils':'un--updateErasable'(V13, V194, V195)) end end, [{'Idris.Core.Name.Resolved', V97} | V184]))(V21)) end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in processData-6517'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V3 of {'Idris.Core.TT.Private'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> fun (V24) -> begin (V32 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V25) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V25)) end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V26, V27)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V28) -> fun (V29) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V28, V29)) end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V30, V31)) end end}, V12, V24))), case V32 of {'Idris.Prelude.Types.Left', E0} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V34) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V35) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V36, V37)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V38) -> fun (V39) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V38, V39)) end end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V40, V41)) end end}, V19, V24)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in processData-6363'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> begin (V19 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V5, V2, V6, V17))), fun (V20) -> begin (V21 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V11, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)))) end, {'Idris.Core.Env.Nil'}, V19))(V20))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V27 = begin (V24 = (('Idris.Idris2.Core.Normalise':'un--nf'(V11, V5, V14, V6, V17))(V20))), case V24 of {'Idris.Prelude.Types.Left', E4} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V26) -> (('un--checkIsType'('erased', V11, V4, V12, V6, V26))(V20)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V27 of {'Idris.Prelude.Types.Left', E6} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V11, [], V14, {'Idris.Core.Env.Nil'}, V19, V20))), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--addDef'(V11, V12, ('Idris.Idris2.Core.Context':'un--newDef'(V4, V12, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V33) -> fun (V34) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V33, V34)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V35) -> fun (V36) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V35, V36)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V5, V19, V3, {'Idris.Core.Context.TCon', 0, V32, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V20))), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Context':'un--addMutData'(V11, {'Idris.Core.Name.Resolved', V39}, V20))), case V40 of {'Idris.Prelude.Types.Left', E12} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E14} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V46) -> begin (V103 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V11, V4, V47, case V46 of {'Idris.Core.Context.MkDefs', E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V50 end(E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V48)) end end, case V46 of {'Idris.Core.Context.MkDefs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102) -> V77 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V20))), case V103 of {'Idris.Prelude.Types.Left', E70} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V105) -> begin (V108 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V106) -> fun (V107) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V11, V106, V107)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V17))))))(V20))), case V108 of {'Idris.Prelude.Types.Left', E72} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V110) -> begin (V111 = ('Idris.Idris2.Core.Context':'un--addToSave'(V11, V12, V20))), case V111 of {'Idris.Prelude.Types.Left', E74} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V113) -> begin (V117 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V114) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V114)) end, fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V115, V116)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V17)))))))))))) end))(V20))), case V117 of {'Idris.Prelude.Types.Left', E76} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V119) -> case V3 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V127 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V120) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V120)) end, fun (V121) -> fun (V122) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V121, V122)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V123) -> fun (V124) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V123, V124)) end end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V125, V126)) end end}, V12, V20))), case V127 of {'Idris.Prelude.Types.Left', E78} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V129) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V130) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V130)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V131, V132)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V133, V134)) end end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V135, V136)) end end}, V19, V20)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processData-6305'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V15 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V16) -> begin (V25 = begin (V17 = (('Idris.Idris2.Core.Context':'un--resolveName'(V11, V12))(V16))), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V8, fun (V24) -> {'Idris.Core.Core.InCon', V4, V12, V24} end))(('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V5, V11, V10, V9, V19, {'Idris.TTImp.Elab.Check.InType'}, V8, V7, V6, {'Idris.TTImp.TTImp.IBindHere', V4, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V20) -> fun (V21) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V20, V21)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V22) -> fun (V23) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V22, V23)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V13}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V2))}))))(V16)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V25 of {'Idris.Prelude.Types.Left', E2} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V5, V2, V6, V28))), begin (V31 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V11, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)))) end, {'Idris.Core.Env.Nil'}, V30))(V16))), case V31 of {'Idris.Prelude.Types.Left', E6} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V33) -> begin (V37 = begin (V34 = (('Idris.Idris2.Core.Normalise':'un--nf'(V11, V5, V14, V6, V28))(V16))), case V34 of {'Idris.Prelude.Types.Left', E8} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V36) -> (('un--checkIsType'('erased', V11, V4, V12, V6, V36))(V16)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V37 of {'Idris.Prelude.Types.Left', E10} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V11, [], V14, {'Idris.Core.Env.Nil'}, V30, V16))), case V40 of {'Idris.Prelude.Types.Left', E12} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V42) -> begin (V47 = ('Idris.Idris2.Core.Context':'un--addDef'(V11, V12, ('Idris.Idris2.Core.Context':'un--newDef'(V4, V12, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V43) -> fun (V44) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V43, V44)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V45, V46)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V5, V30, V3, {'Idris.Core.Context.TCon', 0, V42, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V16))), case V47 of {'Idris.Prelude.Types.Left', E14} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V49) -> begin (V50 = ('Idris.Idris2.Core.Context':'un--addMutData'(V11, {'Idris.Core.Name.Resolved', V49}, V16))), case V50 of {'Idris.Prelude.Types.Left', E16} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E18} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V56) -> begin (V113 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V11, V4, V57, case V56 of {'Idris.Core.Context.MkDefs', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85) -> V60 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V58)) end end, case V56 of {'Idris.Core.Context.MkDefs', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112) -> V87 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V16))), case V113 of {'Idris.Prelude.Types.Left', E74} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V115) -> begin (V118 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V116) -> fun (V117) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V11, V116, V117)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V28))))))(V16))), case V118 of {'Idris.Prelude.Types.Left', E76} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V120) -> begin (V121 = ('Idris.Idris2.Core.Context':'un--addToSave'(V11, V12, V16))), case V121 of {'Idris.Prelude.Types.Left', E78} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V123) -> begin (V127 = (('Idris.Idris2.Core.Context.Log':'un--log'(V11, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V124) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V124)) end, fun (V125) -> fun (V126) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V125, V126)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V28)))))))))))) end))(V16))), case V127 of {'Idris.Prelude.Types.Left', E80} -> (fun (V128) -> {'Idris.Prelude.Types.Left', V128} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V129) -> case V3 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V137 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V130) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V130)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V131, V132)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V133) -> fun (V134) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V133, V134)) end end, fun (V135) -> fun (V136) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V135, V136)) end end}, V12, V16))), case V137 of {'Idris.Prelude.Types.Left', E82} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V139) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V11, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V140) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V140)) end, fun (V141) -> fun (V142) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V141, V142)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V143) -> fun (V144) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V143, V144)) end end, fun (V145) -> fun (V146) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V145, V146)) end end}, V30, V16)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E84} -> (fun (V147) -> fun (V148) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V4, V12}, V148)) end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findNewtype-6222'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Context.DCon', E0, E1, E2} -> (fun (V6, V7, V8) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.DCon', V6, V7, {'Idris.Prelude.Types.Just', V3}}} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--findNewtype-6208'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V1, case V0 of {'Idris.Core.Context.MkCon', E1, E2, E3, E4} -> (fun (V6, V7, V8, V9) -> V7 end(E1, E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V10) -> case V10 of {'Idris.Core.Context.DCon', E5, E6, E7} -> (fun (V11, V12, V13) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.DCon', V11, V12, {'Idris.Prelude.Types.Just', V4}}} end(E5, E6, E7)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V5)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getRelevantArg-6065'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V3 of {'Idris.Core.Value.NPrimVal', E2, E3} -> (fun (V12, V13) -> case V13 of {'Idris.Core.TT.WorldType'} -> (fun () -> fun () -> fun (V14) -> begin (V15 = (((V5(V10))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> (('un--getRelevantArg'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V9)), V8, 1, V17))(V14)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V18) -> begin (V19 = (((V5(V10))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V18))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> (('un--getRelevantArg'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V9)), {'Idris.Prelude.Types.Just', V9}, 1, V21))(V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V8)) end end end(E2, E3)); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V24) -> begin (V25 = (((V5(V10))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V6, 1}))))(V24))), case V25 of {'Idris.Prelude.Types.Left', E0} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V27) -> (('un--getRelevantArg'(V10, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V9)), {'Idris.Prelude.Types.Just', V9}, 1, V27))(V24)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V28) -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V8)) end end.
'case--getDetags-5996'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; _ -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V4}} end end.
'case--getDetags,getDisjointPos-5939'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> {'Idris.Prelude.Types.Right', [V5 | V6]} end; 1 -> fun (V9) -> {'Idris.Prelude.Types.Right', V6} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,allDisjoint-5889'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> ('nested--11452-5472--in--un--allDisjointWith'(V0, V1, V2, V3, V4)); 1 -> fun (V6) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,allDisjointWith-5835'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> ('nested--11452-5472--in--un--allDisjointWith'(V0, V1, V2, V5, V4)); 1 -> fun (V7) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,disjoint-5685'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V20)))) end, V9, []))(V15))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V24)))) end, V11, []))(V15))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> (('nested--11452-5470--in--un--disjointArgs'(V0, V1, V2, V23, V27))(V15)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,disjoint-5560'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> fun (V15) -> begin (V17 = begin (V16 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V19) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V20) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V20)))) end, V9, []))(V15))), case V21 of {'Idris.Prelude.Types.Left', E2} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V23) -> begin (V25 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V2, [], V19, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V24)))) end, V11, []))(V15))), case V25 of {'Idris.Prelude.Types.Left', E4} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V27) -> (('nested--11452-5470--in--un--disjointArgs'(V0, V1, V2, V23, V27))(V15)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDetags,disjointArgs-5507'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of 0 -> fun (V8) -> {'Idris.Prelude.Types.Right', 0} end; 1 -> ('nested--11452-5470--in--un--disjointArgs'(V0, V1, V2, V4, V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkCon-5218'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V6 of {'Idris.Core.TT.Public'} -> (fun () -> fun (V20) -> begin (V28 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V21) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V21)) end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V22, V23)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V24, V25)) end end, fun (V26) -> fun (V27) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V26, V27)) end end}, V14, V20))), case V28 of {'Idris.Prelude.Types.Left', E0} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V30) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V31) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V31)) end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V32, V33)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V34) -> fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V34, V35)) end end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V36, V37)) end end}, V19, V20)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--checkCon-5080'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V18) -> begin (V28 = begin (V19 = (('Idris.Idris2.Core.Context':'un--resolveName'(V13, V14))(V18))), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V10, fun (V27) -> {'Idris.Core.Core.InCon', V3, V14, V27} end))(fun (V22) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V7, V13, V12, V11, V21, {'Idris.TTImp.Elab.Check.InType'}, V10, V9, V8, {'Idris.TTImp.TTImp.IBindHere', V3, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V25) -> fun (V26) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V25, V26)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V15}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V3)), V22)) end))(V18)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V28 of {'Idris.Prelude.Types.Left', E2} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V30) -> begin (V34 = begin (V31 = (('Idris.Idris2.Core.Normalise':'un--nf'(V13, V7, V16, V8, V30))(V18))), case V31 of {'Idris.Prelude.Types.Left', E4} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V33) -> (('un--checkFamily'('erased', V13, V3, V14, V4, V8, V33))(V18)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V34 of {'Idris.Prelude.Types.Left', E6} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V7, V3, V8, V30))), begin (V38 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V13, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)))) end, {'Idris.Core.Env.Nil'}, V37))(V18))), case V38 of {'Idris.Prelude.Types.Left', E8} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V40) -> begin (V43 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V41) -> fun (V42) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V41, V42)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V30))))))(V18))), case V43 of {'Idris.Prelude.Types.Left', E10} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--addToSave'(V13, V14, V18))), case V46 of {'Idris.Prelude.Types.Left', E12} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V48) -> begin (V52 = (('Idris.Idris2.Core.Context.Log':'un--log'(V13, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V49) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V49)) end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V50, V51)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V30)))))))))))) end))(V18))), case V52 of {'Idris.Prelude.Types.Left', E14} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V54) -> begin (V72 = case V6 of {'Idris.Core.TT.Public'} -> (fun () -> begin (V62 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V55) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V55)) end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V56, V57)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V58) -> fun (V59) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V58, V59)) end end, fun (V60) -> fun (V61) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V60, V61)) end end}, V14, V18))), case V62 of {'Idris.Prelude.Types.Left', E16} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V64) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V13, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V65) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V65)) end, fun (V66) -> fun (V67) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V66, V67)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V68, V69)) end end, fun (V70) -> fun (V71) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V70, V71)) end end}, V37, V18)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end), case V72 of {'Idris.Prelude.Types.Left', E18} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V74) -> begin (V75 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V13, [], V16, {'Idris.Core.Env.Nil'}, V37, V18))), case V75 of {'Idris.Prelude.Types.Left', E20} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V77) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkCon', V3, V14, V77, V37}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E22} -> (fun (V78) -> fun (V79) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V3, V14}, V79)) end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateNS,updateNSApp-4973'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> {'Idris.TTImp.TTImp.IVar', V4, V1}; 1 -> {'Idris.TTImp.TTImp.IVar', V4, V3}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in checkFamily-4879'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V5, V4, V3}, V15)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--checkFamily-4828'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NType', E0} -> (fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V5, V4, V3}, V9)) end end(E0)); {'Idris.Core.Value.NTCon', E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14) -> begin (V15 = {'Idris.Core.Value.NTCon', V10, V11, V12, V13, V14}), ('case--case block in checkFamily-4879'('erased', V1, V2, V3, V4, V5, V6, V10, V12, V13, V14, V11, V15, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V3, V11)))) end end(E1, E2, E3, E4, E5)); _ -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V5, V4, V3}, V16)) end end.
'case--checkIsType-4775'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Value.NType', E0} -> (fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); _ -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadTypeConType', V4, V3}, V9)) end end.
'nested--10909-4964--in--un--updateNSApp'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V4, V5) -> ('case--updateNS,updateNSApp-4973'(V0, V1, V2, V5, V4, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V5, V2)))) end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V6, V7, V8) -> {'Idris.TTImp.TTImp.IApp', V6, ('nested--10909-4964--in--un--updateNSApp'(V0, V1, V2, V7)), V8} end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E5, E6, E7} -> (fun (V9, V10, V11) -> {'Idris.TTImp.TTImp.IAutoApp', V9, ('nested--10909-4964--in--un--updateNSApp'(V0, V1, V2, V10)), V11} end(E5, E6, E7)); {'Idris.TTImp.TTImp.INamedApp', E8, E9, E10, E11} -> (fun (V12, V13, V14, V15) -> {'Idris.TTImp.TTImp.INamedApp', V12, ('nested--10909-4964--in--un--updateNSApp'(V0, V1, V2, V13)), V14, V15} end(E8, E9, E10, E11)); _ -> V3 end.
'nested--11365-5363--in--un--getRetType'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V8, V9, V10, V11) -> fun (V12) -> begin (V13 = (((V7(V2))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V4, 1}))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('nested--11365-5363--in--un--getRetType'(V0, V1, V2, V15))(V12)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V3} end end end(E0, E1, E2, E3)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', V3} end end.
'nested--11365-5364--in--un--getPats'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V9) -> ('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, [], V2, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V9)))) end, V8, [])) end(E0, E1, E2, E3, E4)); _ -> fun (V10) -> {'Idris.Prelude.Types.Right', []} end end.
'nested--11452-5474--in--un--getDisjointPos'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V6, V7) -> fun (V8) -> begin (V9 = (('nested--11452-5474--in--un--getDisjointPos'(V0, V1, V2, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V3)), V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = (('nested--11452-5473--in--un--allDisjoint'(V0, V1, V2, V6))(V8))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 0 -> {'Idris.Prelude.Types.Right', [V3 | V11]}; 1 -> {'Idris.Prelude.Types.Right', V11}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11452-5470--in--un--disjointArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 1} end; _ -> case V4 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', 1} end; _ -> case V3 of [E0 | E1] -> (fun (V7, V8) -> case V4 of [E2 | E3] -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('nested--11452-5471--in--un--disjoint'(V0, V1, V2, V7, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> case V14 of 0 -> {'Idris.Prelude.Types.Right', 0}; 1 -> (('nested--11452-5470--in--un--disjointArgs'(V0, V1, V2, V8, V10))(V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--11452-5471--in--un--disjoint'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> case V4 of {'Idris.Core.Value.NDCon', E5, E6, E7, E8, E9} -> (fun (V10, V11, V12, V13, V14) -> ('case--getDetags,disjoint-5560'(V0, V1, V2, V10, V11, V13, V5, V6, V8, V9, V7, V14, V12, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V7, V12)))) end(E5, E6, E7, E8, E9)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', 1} end end end(E0, E1, E2, E3, E4)); {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20) -> case V4 of {'Idris.Core.Value.NDCon', E15, E16, E17, E18, E19} -> (fun (V21, V22, V23, V24, V25) -> ('case--getDetags,disjoint-5685'(V0, V1, V2, V21, V23, V24, V16, V18, V19, V20, V17, V25, V22, ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V17, V22)))) end(E15, E16, E17, E18, E19)); _ -> fun (V26) -> {'Idris.Prelude.Types.Right', 1} end end end(E10, E11, E12, E13, E14)); {'Idris.Core.Value.NPrimVal', E20, E21} -> (fun (V27, V28) -> case V4 of {'Idris.Core.Value.NPrimVal', E22, E23} -> (fun (V29, V30) -> fun (V31) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Constant'(V28, V30))} end end(E22, E23)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', 1} end end end(E20, E21)); _ -> fun (V33) -> {'Idris.Prelude.Types.Right', 1} end end.
'nested--11452-5472--in--un--allDisjointWith'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', 0} end; _ -> case V3 of {'Idris.Core.Value.NErased', E4, E5} -> (fun (V6, V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', 1} end end(E4, E5)); _ -> case V4 of [E0 | E1] -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('nested--11452-5471--in--un--disjoint'(V0, V1, V2, V3, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> case V14 of 0 -> (('nested--11452-5472--in--un--allDisjointWith'(V0, V1, V2, V3, V10))(V11)); 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--11452-5473--in--un--allDisjoint'(V0, V1, V2, V3) -> case V3 of [] -> fun (V4) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V5, V6) -> case V5 of {'Idris.Core.Value.NErased', E4, E5} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', 1} end end(E4, E5)); _ -> fun (V10) -> begin (V11 = (('nested--11452-5473--in--un--allDisjoint'(V0, V1, V2, V6))(V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> case V13 of 0 -> (('nested--11452-5472--in--un--allDisjointWith'(V0, V1, V2, V5, V6))(V10)); 1 -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--updateNS'(V0, V1, V2) -> case V2 of {'Idris.TTImp.TTImp.IPi', E0, E1, E2, E3, E4, E5} -> (fun (V3, V4, V5, V6, V7, V8) -> {'Idris.TTImp.TTImp.IPi', V3, V4, V5, V6, V7, ('un--updateNS'(V0, V1, V8))} end(E0, E1, E2, E3, E4, E5)); _ -> ('nested--10909-4964--in--un--updateNSApp'(V2, V1, V0, V2)) end.
'un--processDataOpt'(V0, V1, V2, V3) -> case V3 of {'Idris.TTImp.TTImp.NoHints'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.TTImp.TTImp.SearchBy', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--setDetermining'(V0, V1, V2, V5, V6)) end end(E0)); {'Idris.TTImp.TTImp.UniqueSearch'} -> (fun () -> fun (V7) -> ('Idris.Idris2.Core.Context':'un--setUniqueSearch'(V0, V1, V2, 0, V7)) end end()); {'Idris.TTImp.TTImp.External'} -> (fun () -> fun (V8) -> ('Idris.Idris2.Core.Context':'un--setExternal'(V0, V1, V2, 0, V8)) end end()); {'Idris.TTImp.TTImp.NoNewtype'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processData'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.TTImp.TTImp.MkImpLater', E0, E1, E2} -> (fun (V10, V11, V12) -> fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V11))(V13))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, [], V0, V12, V13))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V21 = begin (V20 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V20} end), case V21 of {'Idris.Prelude.Types.Left', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V23) -> begin (V51 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V16, case V23 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V24 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V51 of {'Idris.Prelude.Types.Left', E36} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V53) -> case V53 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V62 = begin (V54 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V16))(V13))), case V54 of {'Idris.Prelude.Types.Left', E38} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V56) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V4, fun (V61) -> {'Idris.Core.Core.InCon', V7, V16, V61} end))(('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V56, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V57) -> fun (V58) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V57, V58)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V59) -> fun (V60) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V59, V60)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V19}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V10))}))))(V13)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V62 of {'Idris.Prelude.Types.Left', E40} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V64) -> case V64 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V65, V66) -> begin (V67 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V10, V6, V65))), begin (V68 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)))) end, {'Idris.Core.Env.Nil'}, V67))(V13))), case V68 of {'Idris.Prelude.Types.Left', E44} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V70) -> begin (V74 = begin (V71 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V23, V6, V65))(V13))), case V71 of {'Idris.Prelude.Types.Left', E46} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V73) -> (('un--checkIsType'('erased', V1, V7, V16, V6, V73))(V13)) end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V74 of {'Idris.Prelude.Types.Left', E48} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V23, {'Idris.Core.Env.Nil'}, V67, V13))), case V77 of {'Idris.Prelude.Types.Left', E50} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V79) -> begin (V84 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V16, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V16, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V80) -> fun (V81) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V80, V81)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V82) -> fun (V83) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V82, V83)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V0, V67, V8, {'Idris.Core.Context.TCon', 0, V79, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V13))), case V84 of {'Idris.Prelude.Types.Left', E52} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V86) -> begin (V87 = ('Idris.Idris2.Core.Context':'un--addMutData'(V1, {'Idris.Core.Name.Resolved', V86}, V13))), case V87 of {'Idris.Prelude.Types.Left', E54} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V89) -> begin (V91 = begin (V90 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V90} end), case V91 of {'Idris.Prelude.Types.Left', E56} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V93) -> begin (V150 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V94) -> fun (V95) -> ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V7, V94, case V93 of {'Idris.Core.Context.MkDefs', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V97 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V95)) end end, case V93 of {'Idris.Core.Context.MkDefs', E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111} -> (fun (V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149) -> V124 end(E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13))), case V150 of {'Idris.Prelude.Types.Left', E112} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V152) -> begin (V155 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V153) -> fun (V154) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V153, V154)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V65))))))(V13))), case V155 of {'Idris.Prelude.Types.Left', E114} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V157) -> begin (V158 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V16, V13))), case V158 of {'Idris.Prelude.Types.Left', E116} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V160) -> begin (V164 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V161) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V161)) end, fun (V162) -> fun (V163) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V162, V163)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V65)))))))))))) end))(V13))), case V164 of {'Idris.Prelude.Types.Left', E118} -> (fun (V165) -> {'Idris.Prelude.Types.Left', V165} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V166) -> case V8 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V174 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V167) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V167)) end, fun (V168) -> fun (V169) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V168, V169)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V170) -> fun (V171) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V170, V171)) end end, fun (V172) -> fun (V173) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V172, V173)) end end}, V16, V13))), case V174 of {'Idris.Prelude.Types.Left', E120} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V176) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V177) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V177)) end, fun (V178) -> fun (V179) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V178, V179)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V180) -> fun (V181) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V180, V181)) end end, fun (V182) -> fun (V183) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V182, V183)) end end}, V67, V13)) end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E122} -> (fun (V184) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V7, V16}, V13)) end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2)); {'Idris.TTImp.TTImp.MkImpData', E123, E124, E125, E126, E127} -> (fun (V185, V186, V187, V188, V189) -> fun (V190) -> begin (V191 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V186))(V190))), case V191 of {'Idris.Prelude.Types.Left', E128} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V193) -> begin (V194 = ('Idris.Idris2.TTImp.BindImplicits':'un--bindTypeNames'(V1, [], V0, V187, V190))), case V194 of {'Idris.Prelude.Types.Left', E130} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V196) -> begin (V197 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + 0), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Processing "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V193)))) end))(V190))), case V197 of {'Idris.Prelude.Types.Left', E132} -> (fun (V198) -> {'Idris.Prelude.Types.Left', V198} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V199) -> begin (V201 = begin (V200 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V200} end), case V201 of {'Idris.Prelude.Types.Left', E134} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V203) -> begin (V212 = begin (V204 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V193))(V190))), case V204 of {'Idris.Prelude.Types.Left', E136} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V206) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V4, fun (V211) -> {'Idris.Core.Core.InCon', V7, V193, V211} end))(('Idris.Idris2.TTImp.Elab':'un--elabTerm'(V0, V1, V2, V3, V206, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V7, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V207) -> fun (V208) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V207, V208)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V209) -> fun (V210) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V209, V210)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V196}, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V185))}))))(V190)) end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V212 of {'Idris.Prelude.Types.Left', E138} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V214) -> case V214 of {'Idris.Builtin.MkPair', E140, E141} -> (fun (V215, V216) -> begin (V217 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V185, V6, V215))), begin (V245 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V193, case V203 of {'Idris.Core.Context.MkDefs', E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168} -> (fun (V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244) -> V218 end(E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V190))), case V245 of {'Idris.Prelude.Types.Left', E169} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E169)); {'Idris.Prelude.Types.Right', E170} -> (fun (V247) -> begin (V272 = begin (V248 = {'Idris.Builtin.MkPair', V215, V216}), case V247 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', []} end()); {'Idris.Prelude.Types.Just', E171} -> (fun (V249) -> begin (V250 = {'Idris.Prelude.Types.Just', V249}), (('case--case block in case block in processData-7192'(V189, V188, V187, V186, V185, V8, V7, V0, V6, V5, V4, V3, V2, V1, V193, V196, V203, V216, V215, V248, V217, V249, V250, case V249 of {'Idris.Core.Context.MkGlobalDef', E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192} -> (fun (V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271) -> V268 end(E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V190)) end end(E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V272 of {'Idris.Prelude.Types.Left', E193} -> (fun (V273) -> {'Idris.Prelude.Types.Left', V273} end(E193)); {'Idris.Prelude.Types.Right', E194} -> (fun (V274) -> begin (V275 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"data "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V193)))) end, {'Idris.Core.Env.Nil'}, V217))(V190))), case V275 of {'Idris.Prelude.Types.Left', E195} -> (fun (V276) -> {'Idris.Prelude.Types.Left', V276} end(E195)); {'Idris.Prelude.Types.Right', E196} -> (fun (V277) -> begin (V281 = begin (V278 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V203, V6, V215))(V190))), case V278 of {'Idris.Prelude.Types.Left', E197} -> (fun (V279) -> {'Idris.Prelude.Types.Left', V279} end(E197)); {'Idris.Prelude.Types.Right', E198} -> (fun (V280) -> (('un--checkIsType'('erased', V1, V7, V193, V6, V280))(V190)) end(E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V281 of {'Idris.Prelude.Types.Left', E199} -> (fun (V282) -> {'Idris.Prelude.Types.Left', V282} end(E199)); {'Idris.Prelude.Types.Right', E200} -> (fun (V283) -> begin (V284 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V203, {'Idris.Core.Env.Nil'}, V217, V190))), case V284 of {'Idris.Prelude.Types.Left', E201} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V286) -> begin (V291 = ('Idris.Idris2.Core.Context':'un--addDef'(V1, V193, ('Idris.Idris2.Core.Context':'un--newDef'(V7, V193, ('Idris.Idris2.Algebra.Semiring':'un--linear'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V287) -> fun (V288) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V287, V288)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V289) -> fun (V290) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V289, V290)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())})), V0, V217, V8, {'Idris.Core.Context.TCon', 0, V286, [], [], ('Idris.Idris2.Core.Context':'un--defaultFlags'()), [], [], {'Idris.Prelude.Types.Nothing'}})), V190))), case V291 of {'Idris.Prelude.Types.Left', E203} -> (fun (V292) -> {'Idris.Prelude.Types.Left', V292} end(E203)); {'Idris.Prelude.Types.Right', E204} -> (fun (V293) -> begin (V311 = case V8 of {'Idris.Core.TT.Private'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> begin (V301 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V294) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V294)) end, fun (V295) -> fun (V296) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V295, V296)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V297) -> fun (V298) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V297, V298)) end end, fun (V299) -> fun (V300) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V299, V300)) end end}, V193, V190))), case V301 of {'Idris.Prelude.Types.Left', E205} -> (fun (V302) -> {'Idris.Prelude.Types.Left', V302} end(E205)); {'Idris.Prelude.Types.Right', E206} -> (fun (V303) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V304) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V304)) end, fun (V305) -> fun (V306) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V305, V306)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V307) -> fun (V308) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V307, V308)) end end, fun (V309) -> fun (V310) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V309, V310)) end end}, V217, V190)) end(E206)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V311 of {'Idris.Prelude.Types.Left', E207} -> (fun (V312) -> {'Idris.Prelude.Types.Left', V312} end(E207)); {'Idris.Prelude.Types.Right', E208} -> (fun (V313) -> begin (V315 = begin (V314 = {'Idris.Builtin.MkPair', V215, V216}), ('case--case block in processData-6826'(V189, V188, V187, V186, V185, V8, V7, V0, V6, V5, V4, V3, V2, V1, V193, V196, V203, V216, V215, V314, V217, V247, V274, V286, V293, ('Idris.Idris2.Core.TT':'dn--un--==_Eq_Visibility'(V8, {'Idris.Core.TT.Export'})))) end), begin (V317 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V316) -> ('un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V315, V186, {'Idris.Core.Name.Resolved', V293}, V316)) end, V189, []))(V190))), case V317 of {'Idris.Prelude.Types.Left', E209} -> (fun (V318) -> {'Idris.Prelude.Types.Left', V318} end(E209)); {'Idris.Prelude.Types.Right', E210} -> (fun (V319) -> begin (V320 = {'Idris.Core.Context.MkData', {'Idris.Core.Context.MkCon', V185, V193, V286, V217}, V319}), begin (V324 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V321) -> case V321 of {'Idris.Prelude.Types.Left', E211} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E211)); {'Idris.Prelude.Types.Right', E212} -> (fun (V323) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E212)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Context.Data':'un--addData'(V1, V0, V8, V293, V320)), V190))), case V324 of {'Idris.Prelude.Types.Left', E213} -> (fun (V325) -> {'Idris.Prelude.Types.Left', V325} end(E213)); {'Idris.Prelude.Types.Right', E214} -> (fun (V326) -> begin (V331 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V327) -> fun (V328) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V327, V328)) end end, fun (V329) -> fun (V330) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V329, V330)) end end}, {'Idris.TTImp.TTImp.NoNewtype'}, V188)))) of 0 -> (('un--findNewtype'(V1, V319))(V190)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V331 of {'Idris.Prelude.Types.Left', E215} -> (fun (V332) -> {'Idris.Prelude.Types.Left', V332} end(E215)); {'Idris.Prelude.Types.Right', E216} -> (fun (V333) -> begin (V335 = begin (V334 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V334} end), case V335 of {'Idris.Prelude.Types.Left', E217} -> (fun (V336) -> {'Idris.Prelude.Types.Left', V336} end(E217)); {'Idris.Prelude.Types.Right', E218} -> (fun (V337) -> begin (V341 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V193)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" defined in a mutual block with "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V338) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V338)) end, fun (V339) -> fun (V340) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V339, V340)) end end}, V274)))))) end))(V190))), case V341 of {'Idris.Prelude.Types.Left', E219} -> (fun (V342) -> {'Idris.Prelude.Types.Left', V342} end(E219)); {'Idris.Prelude.Types.Right', E220} -> (fun (V343) -> begin (V344 = ('Idris.Idris2.Core.Context':'un--setMutWith'(V1, V7, {'Idris.Core.Name.Resolved', V293}, V274, V190))), case V344 of {'Idris.Prelude.Types.Left', E221} -> (fun (V345) -> {'Idris.Prelude.Types.Left', V345} end(E221)); {'Idris.Prelude.Types.Right', E222} -> (fun (V346) -> begin (V348 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V347) -> ('un--processDataOpt'(V1, V7, {'Idris.Core.Name.Resolved', V293}, V347)) end, V188))(V190))), case V348 of {'Idris.Prelude.Types.Left', E223} -> (fun (V349) -> {'Idris.Prelude.Types.Left', V349} end(E223)); {'Idris.Prelude.Types.Right', E224} -> (fun (V350) -> begin (V351 = ('Idris.Idris2.Core.Context':'un--dropMutData'(V1, {'Idris.Core.Name.Resolved', V293}, V190))), case V351 of {'Idris.Prelude.Types.Left', E225} -> (fun (V352) -> {'Idris.Prelude.Types.Left', V352} end(E225)); {'Idris.Prelude.Types.Right', E226} -> (fun (V353) -> begin (V359 = (('un--getDetags'(V1, V7, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V354) -> case V354 of {'Idris.Core.Context.MkCon', E227, E228, E229, E230} -> (fun (V355, V356, V357, V358) -> V358 end(E227, E228, E229, E230)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V319))))(V190))), case V359 of {'Idris.Prelude.Types.Left', E231} -> (fun (V360) -> {'Idris.Prelude.Types.Left', V360} end(E231)); {'Idris.Prelude.Types.Right', E232} -> (fun (V361) -> begin (V362 = ('Idris.Idris2.Core.Context':'un--setDetags'(V1, V7, {'Idris.Core.Name.Resolved', V293}, V361, V190))), case V362 of {'Idris.Prelude.Types.Left', E233} -> (fun (V363) -> {'Idris.Prelude.Types.Left', V363} end(E233)); {'Idris.Prelude.Types.Right', E234} -> (fun (V364) -> begin (V367 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V365) -> fun (V366) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V365, V366)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V215))))))(V190))), case V367 of {'Idris.Prelude.Types.Left', E235} -> (fun (V368) -> {'Idris.Prelude.Types.Left', V368} end(E235)); {'Idris.Prelude.Types.Right', E236} -> (fun (V369) -> begin (V370 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V193, V190))), case V370 of {'Idris.Prelude.Types.Left', E237} -> (fun (V371) -> {'Idris.Prelude.Types.Left', V371} end(E237)); {'Idris.Prelude.Types.Right', E238} -> (fun (V372) -> begin (V376 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V193)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V373) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V373)) end, fun (V374) -> fun (V375) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V374, V375)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V215)))))))))))) end))(V190))), case V376 of {'Idris.Prelude.Types.Left', E239} -> (fun (V377) -> {'Idris.Prelude.Types.Left', V377} end(E239)); {'Idris.Prelude.Types.Right', E240} -> (fun (V378) -> begin (V380 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V379) -> ('un--conName'(V379)) end, V319))), begin (V387 = case ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V381) -> fun (V382) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--==_Eq_DataOpt'(V381, V382)) end end, fun (V383) -> fun (V384) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--/=_Eq_DataOpt'(V383, V384)) end end}, {'Idris.TTImp.TTImp.NoHints'}, V188)))) of 0 -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V385) -> fun (V386) -> ('Idris.Idris2.Core.Context':'un--addHintFor'(V1, V7, {'Idris.Core.Name.Resolved', V293}, V385, 0, 1, V386)) end end, V380))(V190)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V387 of {'Idris.Prelude.Types.Left', E241} -> (fun (V388) -> {'Idris.Prelude.Types.Left', V388} end(E241)); {'Idris.Prelude.Types.Right', E242} -> (fun (V389) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V390) -> fun (V391) -> ('Idris.Idris2.TTImp.Elab.Utils':'un--updateErasable'(V1, V390, V391)) end end, [{'Idris.Core.Name.Resolved', V293} | V380]))(V190)) end(E242)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E240)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E234)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E232)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E226)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E222)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E220)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E218)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E216)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E214)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E208)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E204)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E196)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E194)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E170)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E140, E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E123, E124, E125, E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--getRelevantArg'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V14 = (((V8(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V13))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> (('Idris.Idris2.Algebra.Semiring':'un--branchZero'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V17) -> fun (V18) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V17, V18)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V19) -> fun (V20) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V19, V20)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V23, V24)) end end}}, fun () -> ('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), V2, V3, V16)) end, case V12 of {'Idris.Core.Value.NPrimVal', E12, E13} -> (fun (V25, V26) -> case V26 of {'Idris.Core.TT.WorldType'} -> (fun () -> fun () -> fun (V27) -> begin (V28 = (((V8(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V27))), case V28 of {'Idris.Prelude.Types.Left', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V30) -> (('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), V2, 1, V30))(V27)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end()); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V31) -> begin (V32 = (((V8(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V31))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> (('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), {'Idris.Prelude.Types.Just', V1}, 1, V34))(V31)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V35) -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V2)) end end end(E12, E13)); _ -> fun () -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V37) -> begin (V38 = (((V8(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V5, 1}))))(V37))), case V38 of {'Idris.Prelude.Types.Left', E10} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V40) -> (('un--getRelevantArg'(V0, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V1)), {'Idris.Prelude.Types.Just', V1}, 1, V40))(V37)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, fun () -> fun (V41) -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end, V2)) end end, V10))(V13)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V44) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V44}} end end, V2))} end end end(E0, E1, E2, E3)); _ -> fun (V45) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> {'Idris.Prelude.Types.Nothing'} end, fun () -> fun (V46) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V3, V46}} end end, V2))} end end.
'un--getIndexPats'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V6, {'Idris.Core.Env.Nil'}, V1))(V2))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('nested--11365-5363--in--un--getRetType'(V1, V0, V6, V9))(V2))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> (('nested--11365-5364--in--un--getPats'(V1, V0, V6, V12))(V2)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDetags'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end; [E4 | E5] -> (fun (V4, V5) -> case V5 of [] -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', []}} end; _ -> fun (V7) -> begin (V10 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V8) -> fun (V9) -> ('un--getIndexPats'(V0, V8, V9)) end end, V2, []))(V7))), case V10 of {'Idris.Prelude.Types.Left', E6} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V12) -> begin (V13 = (('nested--11452-5474--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'('erased', V12))))(V7))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> case V15 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V15}} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> fun (V16) -> begin (V19 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V17) -> fun (V18) -> ('un--getIndexPats'(V0, V17, V18)) end end, V2, []))(V16))), case V19 of {'Idris.Prelude.Types.Left', E0} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V21) -> begin (V22 = (('nested--11452-5474--in--un--getDisjointPos'(V2, V1, V0, 0, ('Idris.Idris2.Data.List':'un--transpose'('erased', V21))))(V16))), case V22 of {'Idris.Prelude.Types.Left', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V24) -> case V24 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V24}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--findNewtype'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V3 of [] -> fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V16 = begin (V13 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V8, {'Idris.Core.Env.Nil'}, case V2 of {'Idris.Core.Context.MkCon', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> V12 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V13 of {'Idris.Prelude.Types.Left', E8} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V15) -> (('un--getRelevantArg'(V8, 0, {'Idris.Prelude.Types.Nothing'}, 0, V15))(V4)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E10} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V18) -> case V18 of {'Idris.Prelude.Types.Just', E12} -> (fun (V19) -> ('Idris.Idris2.Core.Context':'un--updateDef'(V0, case V2 of {'Idris.Core.Context.MkCon', E13, E14, E15, E16} -> (fun (V20, V21, V22, V23) -> V21 end(E13, E14, E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V24) -> case V24 of {'Idris.Core.Context.DCon', E17, E18, E19} -> (fun (V25, V26, V27) -> {'Idris.Prelude.Types.Just', {'Idris.Core.Context.DCon', V25, V26, {'Idris.Prelude.Types.Just', V19}}} end(E17, E18, E19)); _ -> {'Idris.Prelude.Types.Nothing'} end end, V4)) end(E12)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0, E1)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'un--conName'(V0) -> case V0 of {'Idris.Core.Context.MkCon', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> V2 end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--checkRetType'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> case V7 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V18 = (((V8(V17))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V2, {'Idris.Core.TT.Erased', V5, 1}))))(V13))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> (('un--checkRetType'('erased', V1, V2, V20, V4))(V13)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> (V4(V3)) end end(E0, E1, E2, E3)); _ -> (V4(V3)) end.
'un--checkIsType'(V0, V1, V2, V3, V4, V5) -> ('un--checkRetType'('erased', V1, V4, V5, fun (V6) -> case V6 of {'Idris.Core.Value.NType', E0} -> (fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); _ -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadTypeConType', V2, V3}, V9)) end end end)).
'un--checkFamily'(V0, V1, V2, V3, V4, V5, V6) -> ('un--checkRetType'('erased', V1, V5, V6, fun (V7) -> case V7 of {'Idris.Core.Value.NType', E0} -> (fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V2, V3, V4}, V9)) end end(E0)); {'Idris.Core.Value.NTCon', E1, E2, E3, E4, E5} -> (fun (V10, V11, V12, V13, V14) -> begin (V15 = {'Idris.Core.Value.NTCon', V10, V11, V12, V13, V14}), ('case--case block in checkFamily-4879'('erased', V6, V5, V4, V3, V2, V1, V10, V12, V13, V14, V11, V15, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V11)))) end end(E1, E2, E3, E4, E5)); _ -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.BadDataConType', V2, V3, V4}, V16)) end end end)).
'un--checkCon'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.TTImp.MkImpTy', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V1, V13))(V15))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = ('un--updateNS'(V8, V9, V14))), begin (V20 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Checking constructor type "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V19)))))))) end))(V15))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V29 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updated "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V23) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V23)) end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V24, V25)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V26) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V26)) end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V27, V28)) end end}}, {'Idris.Builtin.MkPair', V8, V9})))) end))(V15))), case V29 of {'Idris.Prelude.Types.Left', E8} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V31) -> begin (V33 = begin (V32 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E10} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V35) -> begin (V63 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V18, case V35 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V36 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V15))), case V63 of {'Idris.Prelude.Types.Left', E39} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V65) -> case V65 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V75 = begin (V66 = (('Idris.Idris2.Core.Context':'un--resolveName'(V1, V18))(V15))), case V66 of {'Idris.Prelude.Types.Left', E41} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V68) -> ((('Idris.Idris2.TTImp.Elab.Utils':'un--wrapErrorC'('erased', V4, fun (V74) -> {'Idris.Core.Core.InCon', V11, V18, V74} end))(fun (V69) -> ('Idris.Idris2.TTImp.Elab':'un--checkTerm'(V0, V1, V2, V3, V68, {'Idris.TTImp.Elab.Check.InType'}, V4, V5, V6, {'Idris.TTImp.TTImp.IBindHere', V11, {'Idris.TTImp.TTImp.PI', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V70) -> fun (V71) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V70, V71)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V72) -> fun (V73) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V72, V73)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, V19}, ('Idris.Idris2.Core.Normalise':'un--gType'('erased', V11)), V69)) end))(V15)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V75 of {'Idris.Prelude.Types.Left', E43} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V77) -> begin (V81 = begin (V78 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V35, V6, V77))(V15))), case V78 of {'Idris.Prelude.Types.Left', E45} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V80) -> (('un--checkFamily'('erased', V1, V11, V18, V9, V6, V80))(V15)) end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V81 of {'Idris.Prelude.Types.Left', E47} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V83) -> begin (V84 = ('Idris.Idris2.Core.Env':'un--abstractEnvType'(V0, V11, V6, V77))), begin (V85 = (('Idris.Idris2.Core.Normalise':'un--logTermNF'([], V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + 0))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constructor "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)))) end, {'Idris.Core.Env.Nil'}, V84))(V15))), case V85 of {'Idris.Prelude.Types.Left', E49} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V87) -> begin (V90 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V88) -> fun (V89) -> ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V88, V89)) end end, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V77))))))(V15))), case V90 of {'Idris.Prelude.Types.Left', E51} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V92) -> begin (V93 = ('Idris.Idris2.Core.Context':'un--addToSave'(V1, V18, V15))), case V93 of {'Idris.Prelude.Types.Left', E53} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V95) -> begin (V99 = (('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"declare.data.constructor"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Saving from "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V96) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V96)) end, fun (V97) -> fun (V98) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V97, V98)) end end}, ('Idris.Idris2.Libraries.Data.NameMap':'un--keys'('erased', ('Idris.Idris2.Core.TT':'un--getMetas'('erased', V77)))))))))))) end))(V15))), case V99 of {'Idris.Prelude.Types.Left', E55} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V101) -> begin (V119 = case V7 of {'Idris.Core.TT.Public'} -> (fun () -> begin (V109 = ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V102) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_Name'(V102)) end, fun (V103) -> fun (V104) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_Name'(V103, V104)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V105) -> fun (V106) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V105, V106)) end end, fun (V107) -> fun (V108) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V107, V108)) end end}, V18, V15))), case V109 of {'Idris.Prelude.Types.Left', E57} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V111) -> ('Idris.Idris2.Core.Context':'un--addHashWithNames'('erased', V1, {'Idris.Core.Hash.dn--un--__mkHashable', fun (V112) -> ('Idris.Idris2.Core.Hash':'dn--un--hash_Hashable_(Term $vars)'('erased', V112)) end, fun (V113) -> fun (V114) -> ('Idris.Idris2.Core.Hash':'dn--un--hashWithSalt_Hashable_(Term $vars)'('erased', V113, V114)) end end}, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V115) -> fun (V116) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_(Term $vars)'('erased', V115, V116)) end end, fun (V117) -> fun (V118) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'('erased', V117, V118)) end end}, V84, V15)) end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end), case V119 of {'Idris.Prelude.Types.Left', E59} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V121) -> begin (V122 = ('Idris.Idris2.Core.Normalise':'un--getArity'(V1, [], V35, {'Idris.Core.Env.Nil'}, V84, V15))), case V122 of {'Idris.Prelude.Types.Left', E61} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V124) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Context.MkCon', V11, V18, V124, V84}} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E63} -> (fun (V125) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.AlreadyDefined', V11, V18}, V15)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
