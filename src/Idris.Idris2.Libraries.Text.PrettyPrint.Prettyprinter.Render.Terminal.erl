-module('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Render.Terminal').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--renderString-1117'/5,
  'case--case block in renderString,go-1023'/7,
  'case--renderString,go-998'/7,
  'case--renderString,go-935'/7,
  'case--renderString,pop-828'/4,
  'case--renderString,peek-783'/4,
  'nested--3133-754--in--un--writeOutput'/5,
  'nested--3133-751--in--un--push'/5,
  'nested--3133-753--in--un--pop'/4,
  'nested--3133-752--in--un--peek'/4,
  'nested--3133-755--in--un--go'/5,
  'un--underline'/0,
  'un--strike'/0,
  'un--renderString'/1,
  'un--renderIO'/1,
  'un--putDoc'/1,
  'un--italic'/0,
  'un--color'/1,
  'un--bold'/0,
  'un--bgColor'/1,
  'un--AnsiStyle'/0
]).
'case--renderString-1117'(V0, V1, V2, V3, V4) -> case V4 of [] -> fun (V5) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V5)) end; [E0 | E1] -> (fun (V6, V7) -> case V7 of [] -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> {'Idris.Prelude.Types.Just', V13} end, fun (V14) -> ('erlang':'get'(V3)) end)); _ -> fun (V15) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V15)) end end end(E0, E1)); _ -> fun (V16) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V16)) end end.
'case--case block in renderString,go-1023'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V14, V15)) end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V18, V19, V20)) end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V27, V28)) end end end}, fun (V29) -> ('nested--3133-754--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Libraries.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Libraries.Control.ANSI.SGR.Reset'} | V7])), V29)) end, fun () -> ('nested--3133-755--in--un--go'(V0, 'erased', V4, V3, V2)) end)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V30) -> ('erlang':'put'(V4, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,go-998'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V7) -> ('nested--3133-752--in--un--peek'(V0, 'erased', V4, V7)) end, fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V16, V17)) end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V20, V21, V22)) end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V29, V30)) end end end}, fun (V31) -> ('nested--3133-754--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Libraries.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Libraries.Control.ANSI.SGR.Reset'} | V9])), V31)) end, fun () -> ('nested--3133-755--in--un--go'(V0, 'erased', V4, V3, V2)) end)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V32) -> ('erlang':'put'(V4, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V6)).
'case--renderString,go-935'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V2, V7))), ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V15, V16)) end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V19, V20, V21)) end end end end end}, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V24, V25, V26)) end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V28, V29)) end end end}, fun (V30) -> ('nested--3133-751--in--un--push'(V0, 'erased', V5, V8, V30)) end, fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V33, V34, V35)) end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V37, V38)) end end end, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V41, V42, V43)) end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V46, V47, V48)) end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V50, V51)) end end end}, fun (V52) -> ('nested--3133-754--in--un--writeOutput'(V0, 'erased', V4, ('Idris.Idris2.Libraries.Control.ANSI.SGR':'un--escapeSGR'(V8)), V52)) end, fun () -> ('nested--3133-755--in--un--go'(V0, 'erased', V5, V4, V3)) end)) end)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V53) -> ('erlang':'put'(V5, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,pop-828'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V12, V13)) end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V16, V17, V18)) end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V25, V26)) end end end}, fun (V27) -> ('erlang':'put'(V2, V5)) end, fun () -> fun (V28) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V4}, V28)) end end)) end(E0, E1)); [] -> fun (V29) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V29)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--renderString,peek-783'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V4}, V6)) end end(E0, E1)); [] -> fun (V7) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V7)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--3133-754--in--un--writeOutput'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Control.Monad.ST':'un--modifySTRef'('erased', 'erased', V2, fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V5, V3)) end, V4)).
'nested--3133-751--in--un--push'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Control.Monad.ST':'un--modifySTRef'('erased', 'erased', V2, fun (V5) -> [V3 | V5] end, V4)).
'nested--3133-753--in--un--pop'(V0, V1, V2, V3) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V4) -> ('erlang':'get'(V2)) end, fun (V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V14, V15)) end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V18, V19, V20)) end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V27, V28)) end end end}, fun (V29) -> ('erlang':'put'(V2, V7)) end, fun () -> fun (V30) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V6}, V30)) end end)) end(E0, E1)); [] -> fun (V31) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V31)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)).
'nested--3133-752--in--un--peek'(V0, V1, V2, V3) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V4) -> ('erlang':'get'(V2)) end, fun (V5) -> case V5 of [E0 | E1] -> (fun (V6, V7) -> fun (V8) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Just', V6}, V8)) end end(E0, E1)); [] -> fun (V9) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V9)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V3)).
'nested--3133-755--in--un--go'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.SEmpty'} -> (fun () -> fun (V5) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Builtin.MkUnit'}, V5)) end end()); {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.SChar', E0, E1} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V14, V15)) end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V18, V19, V20)) end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V27, V28)) end end end}, fun (V29) -> ('nested--3133-754--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Data.String':'un--singleton'(V6)), V29)) end, fun () -> ('nested--3133-755--in--un--go'(V0, 'erased', V2, V3, (V7()))) end)) end(E0, E1)); {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.SText', E2, E3, E4} -> (fun (V30, V31, V32) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V39, V40)) end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V43, V44, V45)) end end end end end}, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V52, V53)) end end end}, fun (V54) -> ('nested--3133-754--in--un--writeOutput'(V0, 'erased', V3, V31, V54)) end, fun () -> ('nested--3133-755--in--un--go'(V0, 'erased', V2, V3, (V32()))) end)) end(E2, E3, E4)); {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.SLine', E5, E6} -> (fun (V55, V56) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V63, V64)) end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V67, V68, V69)) end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V76, V77)) end end end}, fun (V78) -> ('nested--3133-754--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(('Idris.Idris2.Data.String':'un--singleton'($\x{a})), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--textSpaces'(V55)))), V78)) end, fun () -> ('nested--3133-755--in--un--go'(V0, 'erased', V2, V3, V56)) end)) end(E5, E6)); {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.SAnnPush', E7, E8} -> (fun (V79, V80) -> fun (V81) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V82) -> ('nested--3133-752--in--un--peek'(V0, 'erased', V2, V82)) end, fun (V83) -> case V83 of {'Idris.Prelude.Types.Just', E9} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V79, V84))), ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V88, V89, V90)) end end end end end, fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V92, V93)) end end end, fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V96, V97, V98)) end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V101, V102, V103)) end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V105, V106)) end end end}, fun (V107) -> ('nested--3133-751--in--un--push'(V0, 'erased', V2, V85, V107)) end, fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V110, V111, V112)) end end end end end, fun (V113) -> fun (V114) -> fun (V115) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V114, V115)) end end end, fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V118, V119, V120)) end end end end end}, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V123, V124, V125)) end end end end end, fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V127, V128)) end end end}, fun (V129) -> ('nested--3133-754--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Libraries.Control.ANSI.SGR':'un--escapeSGR'(V85)), V129)) end, fun () -> ('nested--3133-755--in--un--go'(V0, 'erased', V2, V3, V80)) end)) end)) end end(E9)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V130) -> ('erlang':'put'(V2, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V81)) end end(E7, E8)); {'Idris.Libraries.Text.PrettyPrint.Prettyprinter.Doc.SAnnPop', E10} -> (fun (V131) -> fun (V132) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V133) -> ('nested--3133-753--in--un--pop'(V0, 'erased', V2, V133)) end, fun (V134) -> fun (V135) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V136) -> ('nested--3133-752--in--un--peek'(V0, 'erased', V2, V136)) end, fun (V137) -> case V137 of {'Idris.Prelude.Types.Just', E11} -> (fun (V138) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V141, V142, V143)) end end end end end, fun (V144) -> fun (V145) -> fun (V146) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V145, V146)) end end end, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V149, V150, V151)) end end end end end}, fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V154, V155, V156)) end end end end end, fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V158, V159)) end end end}, fun (V160) -> ('nested--3133-754--in--un--writeOutput'(V0, 'erased', V3, ('Idris.Idris2.Libraries.Control.ANSI.SGR':'un--escapeSGR'([{'Idris.Libraries.Control.ANSI.SGR.Reset'} | V138])), V160)) end, fun () -> ('nested--3133-755--in--un--go'(V0, 'erased', V2, V3, V131)) end)) end(E11)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V161) -> ('erlang':'put'(V2, [])) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V135)) end end, V132)) end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--underline'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', {'Idris.Libraries.Control.ANSI.SGR.SetStyle', {'Idris.Libraries.Control.ANSI.SGR.SingleUnderline'}})).
'un--strike'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', {'Idris.Libraries.Control.ANSI.SGR.SetStyle', {'Idris.Libraries.Control.ANSI.SGR.Striked'}})).
'un--renderString'(V0) -> ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> <<"<internal pretty printing error>"/utf8>> end, ('Idris.Idris2.Control.Monad.ST':'un--runST'('erased', fun (V1) -> fun (V2) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V3) -> ('Idris.Idris2.Control.Monad.ST':'un--newSTRef'('erased', 'erased', [('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased')) | []], V3)) end, fun (V4) -> fun (V5) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V6) -> ('Idris.Idris2.Control.Monad.ST':'un--newSTRef'('erased', 'erased', ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'()), V6)) end, fun (V7) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', V14, V15)) end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--<*>_Applicative_(ST $s)'('erased', 'erased', 'erased', V18, V19, V20)) end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--join_Monad_(ST $s)'('erased', 'erased', V27, V28)) end end end}, ('nested--3133-755--in--un--go'(V0, 'erased', V4, V7, V0)), fun () -> fun (V29) -> ('Idris.Idris2.Control.Monad.ST':'dn--un-->>=_Monad_(ST $s)'('erased', 'erased', 'erased', fun (V30) -> ('erlang':'get'(V4)) end, fun (V31) -> case V31 of [] -> fun (V32) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V32)) end; [E0 | E1] -> (fun (V33, V34) -> case V34 of [] -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--map_Functor_(ST $s)'('erased', 'erased', 'erased', V37, V38, V39)) end end end end end, fun (V40) -> {'Idris.Prelude.Types.Just', V40} end, fun (V41) -> ('erlang':'get'(V7)) end)); _ -> fun (V42) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V42)) end end end(E0, E1)); _ -> fun (V43) -> ('Idris.Idris2.Control.Monad.ST':'dn--un--pure_Applicative_(ST $s)'('erased', 'erased', {'Idris.Prelude.Types.Nothing'}, V43)) end end end, V29)) end end)) end, V5)) end end, V2)) end end)))).
'un--renderIO'(V0) -> ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, ('un--renderString'(V0)))).
'un--putDoc'(V0) -> ('un--renderIO'((('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--layoutPretty'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--defaultLayoutOptions'())))(V0)))).
'un--italic'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', {'Idris.Libraries.Control.ANSI.SGR.SetStyle', {'Idris.Libraries.Control.ANSI.SGR.Italic'}})).
'un--color'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', {'Idris.Libraries.Control.ANSI.SGR.SetForeground', V0})).
'un--bold'() -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', {'Idris.Libraries.Control.ANSI.SGR.SetStyle', {'Idris.Libraries.Control.ANSI.SGR.Bold'}})).
'un--bgColor'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_List'('erased', {'Idris.Libraries.Control.ANSI.SGR.SetBackground', V0})).
'un--AnsiStyle'() -> {'Idris.Prelude.Types.List', {'Idris.Libraries.Control.ANSI.SGR.SGR'}}.
