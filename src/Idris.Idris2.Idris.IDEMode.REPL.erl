-module('Idris.Idris2.Idris.IDEMode.REPL').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in loop-6209'/13,
  'case--case block in case block in loop-6137'/11,
  'nested--15917-5628--in--un--versionSExp'/8,
  'nested--16600-6002--in--un--updateOutput'/7,
  'nested--15917-5627--in--un--tagSexp'/8,
  'nested--15917-5860--in--un--sexpOriginDesc'/9,
  'nested--15917-5626--in--un--semverSexp'/8,
  'nested--15917-5614--in--un--optionsSexp'/8,
  'nested--15917-5861--in--un--constructSExp'/9,
  'dn--un--toSExp_SExpable_REPLOpt'/1,
  'dn--un--toSExp_SExpable_REPLEval'/1,
  'un--todoCmd'/4,
  'un--socketToFile'/2,
  'un--returnFromIDE'/4,
  'un--replWrap'/2,
  'un--replIDE'/6,
  'un--processCatch'/7,
  'un--process'/6,
  'un--printIDEResultWithHighlight'/4,
  'un--printIDEResult'/4,
  'un--printIDEError'/6,
  'un--loop'/6,
  'un--initIDESocketFile'/3,
  'un--idePutStrLn'/4,
  'un--handleIDEResult'/8,
  'un--getNChars'/2,
  'un--getInput'/2,
  'un--getFLine'/2,
  'un--getChar'/2,
  'un--displayIDEResult'/8
]).
'case--case block in case block in case block in loop-6209'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V14, V15) -> begin (V16 = ('nested--16600-6002--in--un--updateOutput'(V0, V1, V2, V3, V4, V15, V12))), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> begin (V19 = ('un--processCatch'(V4, V3, V2, V1, V0, V14, V12))), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> begin (V22 = (('un--handleIDEResult'(V4, V3, V2, V1, V0, V5, V15, V21))(V12))), case V22 of {'Idris.Prelude.Types.Left', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V24) -> ('un--loop'(V4, V3, V2, V1, V0, V12)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V25 = ('un--printIDEError'(V0, V4, V5, V7, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Unrecognised command:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--show_Show_SExp'(V10)))))), V12))), case V25 of {'Idris.Prelude.Types.Left', E9} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V27) -> ('un--loop'(V4, V3, V2, V1, V0, V12)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in loop-6137'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> fun (V12) -> begin (V16 = begin (V13 = (('Idris.Idris2.Idris.Error':'un--perror'(V4, V2, V0, V11))(V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> ('un--printIDEError'(V0, V4, V5, V7, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Parse error:"/utf8>>)), V15)), V12)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> ('un--loop'(V4, V3, V2, V1, V0, V12)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> fun (V20) -> ('case--case block in case block in case block in loop-6209'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19, ('Idris.Idris2.Idris.IDEMode.Commands':'un--getMsg'(V19)), V20)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15917-5628--in--un--versionSExp'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', [('nested--15917-5626--in--un--semverSexp'(V0, V1, V2, V3, V4, V5, V6, V7)) | [('nested--15917-5627--in--un--tagSexp'(V0, V1, V2, V3, V4, V5, V6, V7)) | []]]}.
'nested--16600-6002--in--un--updateOutput'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Idris.REPL.Opts.IDEMode', E2, E3, E4} -> (fun (V10, V11, V12) -> ('Idris.Idris2.Idris.REPL.Opts':'un--setOutput'(V0, {'Idris.Idris.REPL.Opts.IDEMode', V5, V11, V12}, V6)) end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--15917-5627--in--un--tagSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Idris.Version.MkVersion', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', <<""/utf8>>} | []]} end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V10) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', V10} | []]} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15917-5860--in--un--sexpOriginDesc'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.FC.PhysicalIdrSrc', E0} -> (fun (V9) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V9)) end(E0)); {'Idris.Core.FC.PhysicalPkgSrc', E1} -> (fun (V10) -> V10 end(E1)); {'Idris.Core.FC.Virtual', E2} -> (fun (V11) -> case V11 of 0 -> <<"(Interactive)"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15917-5626--in--un--semverSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Idris.Version.MkVersion', E0, E1} -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V12, V13) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Nat'(V14)) end, [V10 | [V12 | [V13 | []]]]))} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--15917-5614--in--un--optionsSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('dn--un--toSExp_SExpable_REPLOpt'(V8)) end, V0))}.
'nested--15917-5861--in--un--constructSExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> fun (V15) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V16, V17) -> case V14 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V18, V19) -> begin (V20 = ('Idris.Idris2.Idris.Pretty':'un--render'(V3, ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'(V9)), V15))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', V22} | [{'Idris.Idris.IDEMode.Commands.StringAtom', ('nested--15917-5860--in--un--sexpOriginDesc'(V0, V1, V2, V3, V4, V5, V6, V7, V11))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V16))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V17))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V18))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V19))} | []]]]]]]}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_REPLOpt'(V0) -> case V0 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V1) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-implicits"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V1)) | []]]} end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V2) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-namespace"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V2)) | []]]} end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V3) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-types"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V3)) | []]]} end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V4) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"eval"/utf8>>} | [('dn--un--toSExp_SExpable_REPLEval'(V4)) | []]]} end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V5) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"editor"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V5)) | []]]} end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V6) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"cg"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V6)) | []]]} end(E5)); {'Idris.Idris.Syntax.Profile', E6} -> (fun (V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"profile"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V7)) | []]]} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_REPLEval'(V0) -> case V0 of 0 -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"typecheck"/utf8>>}; 1 -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"normalise"/utf8>>}; 2 -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"execute"/utf8>>}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--todoCmd'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.REPL.Common':'un--iputStrLn'(V0, V1, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<": command not yet implemented. Hopefully soon!"/utf8>>)))), V3)).
'un--socketToFile'(V0, V1) -> case V0 of {'Idris.Network.Socket.Data.MkSocket', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Prelude.Types.Left', <<"Failed to fdopen socket file descriptor"/utf8>>} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--returnFromIDE'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, fun (V4) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V4)) end, V1, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"return"/utf8>>} | [V3 | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V2)) | []]]]})).
'un--replWrap'(V0, V1) -> begin (V2 = (V0(V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', V4}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--replIDE'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Opts.REPL', E2} -> (fun (V9) -> ('Idris.Idris2.Idris.REPL.Common':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Running idemode but output isn\x{27}t"/utf8>>)), V5)) end(E2)); {'Idris.Idris.REPL.Opts.IDEMode', E3, E4, E5} -> (fun (V10, V11, V12) -> begin (V14 = (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, fun (V13) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V13)) end, V12, ('Idris.Idris2.Idris.IDEMode.Commands':'un--version'(2, 0))))(V5))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> ('un--loop'(V0, V1, V2, V3, V4, V5)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processCatch'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V22) -> begin (V23 = (('un--process'(V0, V1, V2, V3, V4, V5))(V22))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'un--commit'(V0, V22))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', V25} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V29) -> fun (V30) -> begin (V32 = begin (V31 = ('erlang':'put'(V0, V9))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'put'(V1, V13))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'put'(V2, V17))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V4, V21))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V29))(V30))), case V47 of {'Idris.Prelude.Types.Left', E20} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.REPLError', V49}}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--process'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.IDEMode.Commands.Interpret', E0} -> (fun (V6) -> fun (V7) -> ('un--replWrap'(fun (V8) -> ('Idris.Idris2.Idris.REPL':'un--interpret'(V0, V1, V2, V3, V4, V6, V8)) end, V7)) end end(E0)); {'Idris.Idris.IDEMode.Commands.LoadFile', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = ('Idris.Idris2.Idris.Package':'un--findIpkg'(V0, V4, V2, {'Idris.Prelude.Types.Just', V9}, V11))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> begin (V16 = case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V9 end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V15) -> V15 end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--replWrap'(fun (V17) -> begin (V18 = (('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Load', V16}))(V17))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--outputSyntaxHighlighting'(V0, V3, V2, V4, V16, V20, V17)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V11)) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); {'Idris.Idris.IDEMode.Commands.NameAt', E8, E9} -> (fun (V21, V22) -> fun (V23) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V25 = begin (V24 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V56 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'({'Idris.Core.Name.UN', V21}, case V27 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V28 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23))), case V56 of {'Idris.Prelude.Types.Left', E40} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V58) -> begin (V85 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V59) -> case V59 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V60, V61) -> case V61 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V62, V63) -> {'Idris.Builtin.MkPair', V60, case V63 of {'Idris.Core.Context.MkGlobalDef', E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> V64 end(E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E44, E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V58))), {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameLocList', V85}} end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E67} -> (fun (V86) -> begin (V87 = ('un--todoCmd'(V0, V4, <<"name-at <name> <line> <column>"/utf8>>, V23))), case V87 of {'Idris.Prelude.Types.Left', E68} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Edited', {'Idris.Idris.REPL.Common.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); {'Idris.Idris.IDEMode.Commands.TypeOf', E70, E71} -> (fun (V90, V91) -> case V91 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V92) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Check', {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--replFC'()), {'Idris.Core.Name.UN', V90}}})), V92)) end end()); {'Idris.Prelude.Types.Just', E72} -> (fun (V93) -> fun (V94) -> case V93 of {'Idris.Builtin.MkPair', E73, E74} -> (fun (V95, V96) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.TypeAt', V95, V96, {'Idris.Core.Name.UN', V90}}})), V94)) end(E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E70, E71)); {'Idris.Idris.IDEMode.Commands.CaseSplit', E75, E76, E77} -> (fun (V97, V98, V99) -> fun (V100) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.CaseSplit', 0, V97, V98, {'Idris.Core.Name.UN', V99}}})), V100)) end end(E75, E76, E77)); {'Idris.Idris.IDEMode.Commands.AddClause', E78, E79} -> (fun (V101, V102) -> fun (V103) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.AddClause', 0, V101, {'Idris.Core.Name.UN', V102}}})), V103)) end end(E78, E79)); {'Idris.Idris.IDEMode.Commands.AddMissing', E80, E81} -> (fun (V104, V105) -> fun (V106) -> begin (V107 = ('un--todoCmd'(V0, V4, <<"add-missing"/utf8>>, V106))), case V107 of {'Idris.Prelude.Types.Left', E82} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Edited', {'Idris.Idris.REPL.Common.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}}} end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E80, E81)); {'Idris.Idris.IDEMode.Commands.ExprSearch', E84, E85, E86, E87} -> (fun (V110, V111, V112, V113) -> fun (V114) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.ExprSearch', 0, V110, {'Idris.Core.Name.UN', V111}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V115) -> {'Idris.Core.Name.UN', V115} end, V112))}})), V114)) end end(E84, E85, E86, E87)); {'Idris.Idris.IDEMode.Commands.ExprSearchNext'} -> (fun () -> fun (V116) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.ExprSearchNext'}})), V116)) end end()); {'Idris.Idris.IDEMode.Commands.GenerateDef', E88, E89} -> (fun (V117, V118) -> fun (V119) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.GenerateDef', 0, V117, {'Idris.Core.Name.UN', V118}, 0}})), V119)) end end(E88, E89)); {'Idris.Idris.IDEMode.Commands.GenerateDefNext'} -> (fun () -> fun (V120) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.GenerateDefNext'}})), V120)) end end()); {'Idris.Idris.IDEMode.Commands.MakeLemma', E90, E91} -> (fun (V121, V122) -> fun (V123) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeLemma', 0, V121, {'Idris.Core.Name.UN', V122}}})), V123)) end end(E90, E91)); {'Idris.Idris.IDEMode.Commands.MakeCase', E92, E93} -> (fun (V124, V125) -> fun (V126) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeCase', 0, V124, {'Idris.Core.Name.UN', V125}}})), V126)) end end(E92, E93)); {'Idris.Idris.IDEMode.Commands.MakeWith', E94, E95} -> (fun (V127, V128) -> fun (V129) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeWith', 0, V127, {'Idris.Core.Name.UN', V128}}})), V129)) end end(E94, E95)); {'Idris.Idris.IDEMode.Commands.DocsFor', E96, E97} -> (fun (V130, V131) -> fun (V132) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Doc', {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', V130}}})), V132)) end end(E96, E97)); {'Idris.Idris.IDEMode.Commands.Apropos', E98} -> (fun (V133) -> fun (V134) -> begin (V135 = ('un--todoCmd'(V0, V4, <<"apropros"/utf8>>, V134))), case V135 of {'Idris.Prelude.Types.Left', E99} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V137) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}} end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E98)); {'Idris.Idris.IDEMode.Commands.Directive', E101} -> (fun (V138) -> fun (V139) -> begin (V140 = ('un--todoCmd'(V0, V4, <<"directive"/utf8>>, V139))), case V140 of {'Idris.Prelude.Types.Left', E102} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E102)); {'Idris.Prelude.Types.Right', E103} -> (fun (V142) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'())}}} end(E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E101)); {'Idris.Idris.IDEMode.Commands.WhoCalls', E104} -> (fun (V143) -> fun (V144) -> begin (V145 = ('un--todoCmd'(V0, V4, <<"who-calls"/utf8>>, V144))), case V145 of {'Idris.Prelude.Types.Left', E105} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V147) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E104)); {'Idris.Idris.IDEMode.Commands.CallsWho', E107} -> (fun (V148) -> fun (V149) -> begin (V150 = ('un--todoCmd'(V0, V4, <<"calls-who"/utf8>>, V149))), case V150 of {'Idris.Prelude.Types.Left', E108} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V152) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E107)); {'Idris.Idris.IDEMode.Commands.BrowseNamespace', E110} -> (fun (V153) -> fun (V154) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Browse', ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V153))})), V154)) end end(E110)); {'Idris.Idris.IDEMode.Commands.NormaliseTerm', E111} -> (fun (V155) -> fun (V156) -> begin (V157 = ('un--todoCmd'(V0, V4, <<"normalise-term"/utf8>>, V156))), case V157 of {'Idris.Prelude.Types.Left', E112} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V159) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V155}} end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E111)); {'Idris.Idris.IDEMode.Commands.ShowTermImplicits', E114} -> (fun (V160) -> fun (V161) -> begin (V162 = ('un--todoCmd'(V0, V4, <<"show-term-implicits"/utf8>>, V161))), case V162 of {'Idris.Prelude.Types.Left', E115} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E115)); {'Idris.Prelude.Types.Right', E116} -> (fun (V164) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V160}} end(E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E114)); {'Idris.Idris.IDEMode.Commands.HideTermImplicits', E117} -> (fun (V165) -> fun (V166) -> begin (V167 = ('un--todoCmd'(V0, V4, <<"hide-term-implicits"/utf8>>, V166))), case V167 of {'Idris.Prelude.Types.Left', E118} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E118)); {'Idris.Prelude.Types.Right', E119} -> (fun (V169) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V165}} end(E119)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E117)); {'Idris.Idris.IDEMode.Commands.ElaborateTerm', E120} -> (fun (V170) -> fun (V171) -> begin (V172 = ('un--todoCmd'(V0, V4, <<"elaborate-term"/utf8>>, V171))), case V172 of {'Idris.Prelude.Types.Left', E121} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V174) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.TTTerm', V170}} end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E120)); {'Idris.Idris.IDEMode.Commands.PrintDefinition', E123} -> (fun (V175) -> fun (V176) -> begin (V177 = ('un--todoCmd'(V0, V4, <<"print-definition"/utf8>>, V176))), case V177 of {'Idris.Prelude.Types.Left', E124} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V179) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V175))}}} end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E123)); {'Idris.Idris.IDEMode.Commands.ReplCompletions', E126} -> (fun (V180) -> fun (V181) -> begin (V182 = ('un--todoCmd'(V0, V4, <<"repl-completions"/utf8>>, V181))), case V182 of {'Idris.Prelude.Types.Left', E127} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V184) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126)); {'Idris.Idris.IDEMode.Commands.EnableSyntax', E129} -> (fun (V185) -> fun (V186) -> begin (V187 = ('Idris.Idris2.Idris.REPL.Opts':'un--setSynHighlightOn'(V4, V185, V186))), case V187 of {'Idris.Prelude.Types.Left', E130} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V189) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Common.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Syntax highlight option changed to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'(V185))))}}} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E129)); {'Idris.Idris.IDEMode.Commands.Version'} -> (fun () -> fun (V190) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.ShowVersion'})), V190)) end end()); {'Idris.Idris.IDEMode.Commands.Metavariables', E132} -> (fun (V191) -> fun (V192) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Metavars'})), V192)) end end(E132)); {'Idris.Idris.IDEMode.Commands.GetOptions'} -> (fun () -> fun (V193) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.GetOpts'})), V193)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--printIDEResultWithHighlight'(V0, V1, V2, V3) -> ('un--returnFromIDE'(V0, V1, V2, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"ok"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V3)) | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]]})).
'un--printIDEResult'(V0, V1, V2, V3) -> ('un--returnFromIDE'(V0, V1, V2, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"ok"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V3)) | []]]})).
'un--printIDEError'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.Pretty.Render':'un--renderWithoutColor'(V0, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('un--returnFromIDE'(V1, V2, V3, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"error"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V8)) | []]]}))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--loop'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPL.Opts':'un--getOutput'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Opts.REPL', E2} -> (fun (V9) -> ('Idris.Idris2.Idris.REPL.Common':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Running idemode but output isn\x{27}t"/utf8>>)), V5)) end(E2)); {'Idris.Idris.REPL.Opts.IDEMode', E3, E4, E5} -> (fun (V10, V11, V12) -> begin (V14 = begin (V13 = ('un--getInput'(V11, V5))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = {'Idris.Idris.REPL.Opts.IDEMode', V10, V11, V12}), (('case--case block in case block in loop-6137'(V4, V3, V2, V1, V0, V12, V11, V10, V17, V16, ('Idris.Idris2.Idris.IDEMode.Parser':'un--parseSExp'(V16))))(V5)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initIDESocketFile'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Network.Socket':'un--socket'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, 2, 1, 0))(V2))), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V31)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V111, V112, V113)) end end end end end, fun (V114) -> fun (V115) -> fun (V116) -> V115 end end end, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), begin (V123 = (V120(V121))), (V122(V123)) end end end end end end end}, fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> begin (V129 = (V126(V128))), ((V127(V129))(V128)) end end end end end end, fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V131(V132))), (V133(V132)) end end end end}, fun (V134) -> fun (V135) -> V135 end end}, <<"Failed to open socket"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V138, V139, V140)) end end end end end, fun (V141) -> fun (V142) -> fun (V143) -> V142 end end end, fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> begin (V149 = (V146(V148))), begin (V150 = (V147(V148))), (V149(V150)) end end end end end end end}, fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V153(V155))), ((V154(V156))(V155)) end end end end end end, fun (V157) -> fun (V158) -> fun (V159) -> begin (V160 = (V158(V159))), (V160(V159)) end end end end}, fun (V161) -> fun (V162) -> V162 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end)) end))(V2)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V163) -> begin (V191 = (('Idris.Idris2.Network.Socket':'un--bind'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V166, V167, V168)) end end end end end, fun (V169) -> fun (V170) -> fun (V171) -> V170 end end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), begin (V178 = (V175(V176))), (V177(V178)) end end end end end end end}, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V181(V183))), ((V182(V184))(V183)) end end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> begin (V188 = (V186(V187))), (V188(V187)) end end end end}, fun (V189) -> fun (V190) -> V190 end end}, V163, {'Idris.Prelude.Types.Just', {'Idris.Network.Socket.Data.Hostname', V0}}, V1))(V2))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V191, 0)) of 1 -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to bind socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V191))))}; 0 -> begin (V219 = (('Idris.Idris2.Network.Socket':'un--listen'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V194, V195, V196)) end end end end end, fun (V197) -> fun (V198) -> fun (V199) -> V198 end end end, fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> begin (V205 = (V202(V204))), begin (V206 = (V203(V204))), (V205(V206)) end end end end end end end}, fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> begin (V212 = (V209(V211))), ((V210(V212))(V211)) end end end end end end, fun (V213) -> fun (V214) -> fun (V215) -> begin (V216 = (V214(V215))), (V216(V215)) end end end end}, fun (V217) -> fun (V218) -> V218 end end}, V163))(V2))), case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V219, 0)) of 1 -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to listen on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V219))))}; 0 -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V222, V223, V224)) end end end end end, fun (V225) -> fun (V226) -> fun (V227) -> V226 end end end, fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> begin (V233 = (V230(V232))), begin (V234 = (V231(V232))), (V233(V234)) end end end end end end end}, fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> begin (V240 = (V237(V239))), ((V238(V240))(V239)) end end end end end end, fun (V241) -> fun (V242) -> fun (V243) -> begin (V244 = (V242(V243))), (V244(V243)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V245) -> fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V247, V248, V249)) end end end end end, fun (V250) -> fun (V251) -> fun (V252) -> V251 end end end, fun (V253) -> fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> begin (V258 = (V255(V257))), begin (V259 = (V256(V257))), (V258(V259)) end end end end end end end}, fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> begin (V265 = (V262(V264))), ((V263(V265))(V264)) end end end end end end, fun (V266) -> fun (V267) -> fun (V268) -> begin (V269 = (V267(V268))), (V269(V268)) end end end end}, fun (V270) -> fun (V271) -> V271 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V272) -> fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V274, V275, V276)) end end end end end, fun (V277) -> fun (V278) -> fun (V279) -> V278 end end end, fun (V280) -> fun (V281) -> fun (V282) -> fun (V283) -> fun (V284) -> begin (V285 = (V282(V284))), begin (V286 = (V283(V284))), (V285(V286)) end end end end end end end}, fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> fun (V291) -> begin (V292 = (V289(V291))), ((V290(V292))(V291)) end end end end end end, fun (V293) -> fun (V294) -> fun (V295) -> begin (V296 = (V294(V295))), (V296(V295)) end end end end}, ('Idris.Idris2.Erlang.System.File':'un--fflush'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V299, V300, V301)) end end end end end, fun (V302) -> fun (V303) -> fun (V304) -> V303 end end end, fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> begin (V310 = (V307(V309))), begin (V311 = (V308(V309))), (V310(V311)) end end end end end end end}, fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> begin (V317 = (V314(V316))), ((V315(V317))(V316)) end end end end end end, fun (V318) -> fun (V319) -> fun (V320) -> begin (V321 = (V319(V320))), (V321(V320)) end end end end}, fun (V322) -> fun (V323) -> V323 end end}, ('Idris.Idris2.Erlang.System.File':'un--stdout'()))), fun () -> fun (V324) -> begin (V352 = (('Idris.Idris2.Network.Socket':'un--accept'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V327, V328, V329)) end end end end end, fun (V330) -> fun (V331) -> fun (V332) -> V331 end end end, fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> fun (V337) -> begin (V338 = (V335(V337))), begin (V339 = (V336(V337))), (V338(V339)) end end end end end end end}, fun (V340) -> fun (V341) -> fun (V342) -> fun (V343) -> fun (V344) -> begin (V345 = (V342(V344))), ((V343(V345))(V344)) end end end end end end, fun (V346) -> fun (V347) -> fun (V348) -> begin (V349 = (V347(V348))), (V349(V348)) end end end end}, fun (V350) -> fun (V351) -> V351 end end}, V163))(V324))), case V352 of {'Idris.Prelude.Types.Left', E2} -> (fun (V353) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to accept on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V353))))} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V354) -> case V354 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V355, V356) -> ('un--socketToFile'(V355, V324)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end)) end))(V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--idePutStrLn'(V0, V1, V2, V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'(V0, fun (V4) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V4)) end, V1, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"write-string"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V3)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V2)) | []]]]})).
'un--handleIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.IDEMode.REPL.REPL', E0} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Common.Exited'} -> (fun () -> ('un--idePutStrLn'(V0, V5, V6, <<"Bye for now!"/utf8>>)) end()); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end end(E0)); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'un--getNChars'(V0, V1) -> case V1 of 0 -> fun (V2) -> [] end; _ -> begin (V3 = (V1 - 1)), fun (V4) -> begin (V5 = ('un--getChar'(V0, V4))), begin (V6 = (('un--getNChars'(V0, V3))(V4))), [V5 | V6] end end end end end.
'un--getInput'(V0, V1) -> begin (V2 = (('un--getNChars'(V0, (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))(V1))), case ('Idris.Idris2.Libraries.Utils.Hex':'un--fromHexChars'(('Idris.Idris2.Data.List':'un--reverse'(V2)))) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V3 = ('un--getFLine'(V0, V1))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--fastPack'(V2)), V3)) end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V5 = (('un--getNChars'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V4))))(V1))), ('Idris.Idris2.Prelude.Types':'un--fastPack'(V5)) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFLine'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fGetLine'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> V30 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V31) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, <<"Failed to read a line"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, fun (V109) -> fun (V110) -> V110 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getChar'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fGetChar'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> V30 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V31) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'({'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, <<"Failed to read a character"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, fun (V109) -> fun (V110) -> V110 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0})) end))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.IDEMode.REPL.REPL', E0} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Common.REPLError', E1} -> (fun (V9) -> fun (V10) -> ('un--printIDEError'(V4, V0, V5, V6, V9, V10)) end end(E1)); {'Idris.Idris.REPL.Common.RequestedHelp'} -> (fun () -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.REPL':'un--displayHelp'())})) end()); {'Idris.Idris.REPL.Common.Evaluated', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--printIDEResultWithHighlight'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V11))})) end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V13) -> ('un--printIDEResultWithHighlight'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V13))))))})) end(E4)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', 0} end end end(E2, E3)); {'Idris.Idris.REPL.Common.Printed', E5} -> (fun (V15) -> fun (V16) -> begin (V17 = ('Idris.Idris2.Idris.Pretty.Render':'un--renderWithoutColor'(V4, V15, V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> (('un--printIDEResultWithHighlight'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V19}))(V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); {'Idris.Idris.REPL.Common.TermChecked', E8, E9} -> (fun (V20, V21) -> ('un--printIDEResultWithHighlight'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V21))))))})) end(E8, E9)); {'Idris.Idris.REPL.Common.FileLoaded', E10} -> (fun (V22) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', []})) end(E10)); {'Idris.Idris.REPL.Common.ErrorLoadingFile', E11, E12} -> (fun (V23, V24) -> fun (V25) -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Error loading file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V23)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V24)))))))), V25)) end end(E11, E12)); {'Idris.Idris.REPL.Common.ErrorsBuildingFile', E13, E14} -> (fun (V26, V27) -> fun (V28) -> begin (V30 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V29) -> ('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V29)) end, V27, [], V28))), case V30 of {'Idris.Prelude.Types.Left', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V32) -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Error(s) building file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'(('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'(V26)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'()))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'(V32)))))), V28)) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14)); {'Idris.Idris.REPL.Common.NoFileLoaded'} -> (fun () -> fun (V33) -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"No file can be reloaded"/utf8>>)), V33)) end end()); {'Idris.Idris.REPL.Common.CurrentDirectory', E17} -> (fun (V34) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Current working directory is \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V34, <<"\x{22}"/utf8>>))))})) end(E17)); {'Idris.Idris.REPL.Common.CompilationFailed'} -> (fun () -> fun (V35) -> ('un--printIDEError'(V4, V0, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'(<<"Compilation failed"/utf8>>)), V35)) end end()); {'Idris.Idris.REPL.Common.Compiled', E18} -> (fun (V36) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"File "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V36, <<" written"/utf8>>))))})) end(E18)); {'Idris.Idris.REPL.Common.ProofFound', E19} -> (fun (V37) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V37))})) end(E19)); {'Idris.Idris.REPL.Common.Missed', E20} -> (fun (V38) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V39) -> ('Idris.Idris2.Idris.REPL':'un--handleMissing\x{27}'(V39)) end, V38))))})) end(E20)); {'Idris.Idris.REPL.Common.CheckedTotal', E21} -> (fun (V40) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V42, V43) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V42)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Totality'(V43)))))) end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V40))))})) end(E21)); {'Idris.Idris.REPL.Common.FoundHoles', E24} -> (fun (V44) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V45) -> ('Idris.Idris2.Idris.IDEMode.Holes':'un--sexpHole'(V45)) end, V44))})) end(E24)); {'Idris.Idris.REPL.Common.LogLevelSet', E25} -> (fun (V46) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Set loglevel to "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V47) -> ('Idris.Idris2.Core.Options.Log':'dn--un--show_Show_LogLevel'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Options.Log':'dn--un--showPrec_Show_LogLevel'(V48, V49)) end end}, V46))))})) end(E25)); {'Idris.Idris.REPL.Common.OptionsSet', E26} -> (fun (V50) -> ('un--printIDEResult'(V0, V5, V6, ('nested--15917-5614--in--un--optionsSexp'(V50, V6, V5, V4, V3, V2, V1, V0)))) end(E26)); {'Idris.Idris.REPL.Common.VersionIs', E27} -> (fun (V51) -> ('un--printIDEResult'(V0, V5, V6, ('nested--15917-5628--in--un--versionSExp'(V51, V6, V5, V4, V3, V2, V1, V0)))) end(E27)); {'Idris.Idris.REPL.Common.Edited', E28} -> (fun (V52) -> case V52 of {'Idris.Idris.REPL.Common.DisplayEdit', E29} -> (fun (V53) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(V53))})) end(E29)); {'Idris.Idris.REPL.Common.EditError', E30} -> (fun (V54) -> fun (V55) -> ('un--printIDEError'(V4, V0, V5, V6, V54, V55)) end end(E30)); {'Idris.Idris.REPL.Common.MadeLemma', E31, E32, E33, E34} -> (fun (V56, V57, V58, V59) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Parser.Unlit':'un--relit'(V56, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V57)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V58)), <<"\x{a}"/utf8>>)))))))), V59))})) end(E31, E32, E33, E34)); {'Idris.Idris.REPL.Common.MadeWith', E35, E36} -> (fun (V60, V61) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V62) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V60, V62)) end, V61))))})) end(E35, E36)); {'Idris.Idris.REPL.Common.MadeCase', E37, E38} -> (fun (V63, V64) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V65) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V63, V65)) end, V64))))})) end(E37, E38)); _ -> fun (V66) -> {'Idris.Prelude.Types.Right', 0} end end end(E28)); {'Idris.Idris.REPL.Common.ConsoleWidthSet', E39} -> (fun (V67) -> begin (V69 = case V67 of {'Idris.Prelude.Types.Just', E40} -> (fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V68)) end(E40)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"auto"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Set consolewidth to "/utf8>>, V69))})) end end(E39)); _ -> fun (V70) -> {'Idris.Prelude.Types.Right', 0} end end end(E0)); {'Idris.Idris.IDEMode.REPL.NameList', E41} -> (fun (V71) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V72) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Name'(V72)) end, V71))})) end(E41)); {'Idris.Idris.IDEMode.REPL.Term', E42} -> (fun (V73) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V73})) end(E42)); {'Idris.Idris.IDEMode.REPL.TTTerm', E43} -> (fun (V74) -> ('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V74})) end(E43)); {'Idris.Idris.IDEMode.REPL.NameLocList', E44} -> (fun (V75) -> fun (V76) -> begin (V80 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V77) -> ('nested--15917-5861--in--un--constructSExp'(V75, V6, V5, V4, V3, V2, V1, V0, case V77 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V78, V79) -> {'Idris.Builtin.MkPair', V78, ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V79))} end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V75, [], V76))), case V80 of {'Idris.Prelude.Types.Left', E47} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V82) -> (('un--printIDEResult'(V0, V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', V82}))(V76)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E44)); _ -> fun (V83) -> {'Idris.Prelude.Types.Right', 0} end end.
