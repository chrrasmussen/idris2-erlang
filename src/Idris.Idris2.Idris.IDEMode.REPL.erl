-module('Idris.Idris2.Idris.IDEMode.REPL').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--replIDE-6436'/6,
  'case--case block in case block in case block in loop-6329'/12,
  'case--case block in case block in loop-6257'/11,
  'case--case block in loop-6208'/11,
  'case--loop-6174'/6,
  'case--loop,updateOutput-6135'/7,
  'case--displayIDEResult-5968'/8,
  'case--displayIDEResult,tagSexp-5842'/9,
  'case--displayIDEResult,semverSexp-5794'/9,
  'case--displayIDEResult-5727'/9,
  'case--process-4935'/9,
  'case--process-4864'/8,
  'case--getInput-4784'/3,
  'case--getFLine-4709'/2,
  'case--case block in getChar-4662'/2,
  'case--getChar-4623'/2,
  'case--case block in case block in case block in initIDESocketFile-4572'/7,
  'case--case block in case block in initIDESocketFile-4498'/7,
  'case--case block in initIDESocketFile-4446'/6,
  'case--initIDESocketFile-4384'/3,
  'nested--24035-5790--in--un--versionSExp'/8,
  'nested--24658-6126--in--un--updateOutput'/7,
  'nested--24035-5789--in--un--tagSexp'/8,
  'nested--24035-5788--in--un--semverSexp'/8,
  'nested--24035-5777--in--un--optionsSexp'/8,
  'nested--24035-6010--in--un--constructSExp'/9,
  'dn--un--toSExp_SExpable_REPLOpt'/1,
  'dn--un--toSExp_SExpable_REPLEval'/1,
  'un--todoCmd'/3,
  'un--socketToFile'/1,
  'un--returnFromIDE'/3,
  'un--replWrap'/2,
  'un--replIDE'/6,
  'un--processCatch'/7,
  'un--process'/6,
  'un--printIDEResultWithHighlight'/3,
  'un--printIDEResult'/3,
  'un--printIDEError'/5,
  'un--loop'/6,
  'un--initIDESocketFile'/3,
  'un--idePutStrLn'/3,
  'un--handleIDEResult'/8,
  'un--getNChars'/2,
  'un--getInput'/2,
  'un--getFLine'/2,
  'un--getChar'/1,
  'un--displayIDEResult'/8
]).
'case--replIDE-6436'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V0, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Running idemode but output isn\x{27}t"/utf8>>)), V7)) end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E1, E2, E3} -> (fun (V8, V9, V10) -> fun (V11) -> begin (V13 = (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V12) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V12)) end, V10, ('Idris.Idris2.Idris.IDEMode.Commands':'un--version'(2, 0))))(V11))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('un--loop'(V4, V3, V2, V1, V0, V11)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in loop-6329'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V13, V14) -> fun (V15) -> begin (V16 = ('nested--24658-6126--in--un--updateOutput'(V0, V1, V2, V3, V4, V14, V15))), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> begin (V19 = ('un--processCatch'(V4, V3, V2, V1, V0, V13, V15))), case V19 of {'Idris.Prelude.Types.Left', E5} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V21) -> begin (V22 = (('un--handleIDEResult'(V4, V3, V2, V1, V0, V5, V14, V21))(V15))), case V22 of {'Idris.Prelude.Types.Left', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V24) -> ('un--loop'(V4, V3, V2, V1, V0, V15)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V25) -> begin (V26 = ('un--printIDEError'(V0, V5, V7, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Unrecognised command:"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--show_Show_SExp'(V10)))))), V25))), case V26 of {'Idris.Prelude.Types.Left', E9} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V28) -> ('un--loop'(V4, V3, V2, V1, V0, V25)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in loop-6257'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> fun (V12) -> begin (V16 = begin (V13 = (('Idris.Idris2.Idris.Error':'un--perror'(V4, V2, V0, V11))(V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> ('un--printIDEError'(V0, V5, V7, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Parse error:"/utf8>>)), V15)), V12)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> ('un--loop'(V4, V3, V2, V1, V0, V12)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> ('case--case block in case block in case block in loop-6329'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V19, ('Idris.Idris2.Idris.IDEMode.Commands':'un--getMsg'(V19)))) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in loop-6208'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> ('case--case block in case block in loop-6257'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, ('Idris.Idris2.Idris.IDEMode.Parser':'un--parseSExp'(V9)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--loop-6174'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.REPLOpts.REPL', E0} -> (fun (V6) -> fun (V7) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V0, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Running idemode but output isn\x{27}t"/utf8>>)), V7)) end end(E0)); {'Idris.Idris.REPLOpts.IDEMode', E1, E2, E3} -> (fun (V8, V9, V10) -> fun (V11) -> begin (V13 = begin (V12 = ('un--getInput'(V9, V11))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = {'Idris.Idris.REPLOpts.IDEMode', V8, V9, V10}), (('case--case block in loop-6208'(V0, V1, V2, V3, V4, V10, V9, V8, V16, V15, 1))(V11)) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--loop,updateOutput-6135'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Idris.REPLOpts.IDEMode', E0, E1, E2} -> (fun (V7, V8, V9) -> fun (V10) -> ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V0, {'Idris.Idris.REPLOpts.IDEMode', V5, V8, V9}, V10)) end end(E0, E1, E2)); _ -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
'case--displayIDEResult-5968'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V0 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8)) end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"auto"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayIDEResult,tagSexp-5842'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', <<""/utf8>>} | []]} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', V9} | []]} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayIDEResult,semverSexp-5794'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V13) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Nat'(V13)) end, [V9 | [V11 | [V12 | []]]]))} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--displayIDEResult-5727'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V9)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Totality'(V10)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-4935'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> {'Idris.Builtin.MkPair', V9, case V12 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V13 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--process-4864'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V1 end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> V8 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getInput-4784'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> begin (V4 = ('un--getFLine'(V0, V3))), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--pack'(V1)), V4)) end end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V7 = (('un--getNChars'(V0, ('Idris.Idris2.Prelude.Types':'un--prim__integerToNat'(V5))))(V6))), ('Idris.Idris2.Prelude.Types':'un--pack'(V7)) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getFLine-4709'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> V2 end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> V36 end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), begin (V44 = (V41(V42))), (V43(V44)) end end end end end end end}, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), ((V48(V50))(V49)) end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V52(V53))), (V54(V53)) end end end end}, fun (V55) -> fun (V56) -> V56 end end}, <<"Failed to read a line"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getChar-4662'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Right', E0} -> (fun (V2) -> fun (V3) -> V2 end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> V36 end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), begin (V44 = (V41(V42))), (V43(V44)) end end end end end end end}, fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> begin (V50 = (V47(V49))), ((V48(V50))(V49)) end end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V52(V53))), (V54(V53)) end end end end}, fun (V55) -> fun (V56) -> V56 end end}, <<"Failed to read a character"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getChar-4623'(V0, V1) -> case V1 of 0 -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V29, V30, V31)) end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> V33 end end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V37(V39))), begin (V41 = (V38(V39))), (V40(V41)) end end end end end end end}, fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V44(V46))), ((V45(V47))(V46)) end end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V49(V50))), (V51(V50)) end end end end}, fun (V52) -> fun (V53) -> V53 end end}, <<"Alas the file is done, aborting"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V56, V57, V58)) end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> V60 end end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V64(V66))), begin (V68 = (V65(V66))), (V67(V68)) end end end end end end end}, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V71(V73))), ((V72(V74))(V73)) end end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V76(V77))), (V78(V77)) end end end end}, fun (V79) -> fun (V80) -> V80 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end)); 1 -> fun (V81) -> begin (V109 = (('Idris.Idris2.Erlang.System.File':'un--fGetChar'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V84, V85, V86)) end end end end end, fun (V87) -> fun (V88) -> fun (V89) -> V88 end end end, fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> begin (V95 = (V92(V94))), begin (V96 = (V93(V94))), (V95(V96)) end end end end end end end}, fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> begin (V102 = (V99(V101))), ((V100(V102))(V101)) end end end end end end, fun (V103) -> fun (V104) -> fun (V105) -> begin (V106 = (V104(V105))), (V106(V105)) end end end end}, fun (V107) -> fun (V108) -> V108 end end}, V0))(V81))), case V109 of {'Idris.Prelude.Types.Right', E0} -> (fun (V110) -> V110 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V111) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V114, V115, V116)) end end end end end, fun (V117) -> fun (V118) -> fun (V119) -> V118 end end end, fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> begin (V125 = (V122(V124))), begin (V126 = (V123(V124))), (V125(V126)) end end end end end end end}, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V129(V131))), ((V130(V132))(V131)) end end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> begin (V136 = (V134(V135))), (V136(V135)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V139, V140, V141)) end end end end end, fun (V142) -> fun (V143) -> fun (V144) -> V143 end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V147(V149))), begin (V151 = (V148(V149))), (V150(V151)) end end end end end end end}, fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V154(V156))), ((V155(V157))(V156)) end end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V159(V160))), (V161(V160)) end end end end}, fun (V162) -> fun (V163) -> V163 end end}, <<"Failed to read a character"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V166, V167, V168)) end end end end end, fun (V169) -> fun (V170) -> fun (V171) -> V170 end end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), begin (V178 = (V175(V176))), (V177(V178)) end end end end end end end}, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V181(V183))), ((V182(V184))(V183)) end end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> begin (V188 = (V186(V187))), (V188(V187)) end end end end}, fun (V189) -> fun (V190) -> V190 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end))(V81)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in initIDESocketFile-4572'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> fun (V8) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to accept on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7))))} end end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> ('un--socketToFile'(V10)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in initIDESocketFile-4498'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to listen on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5))))} end; 1 -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V35, V36, V37)) end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> V39 end end end, fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> begin (V46 = (V43(V45))), begin (V47 = (V44(V45))), (V46(V47)) end end end end end end end}, fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V50(V52))), ((V51(V53))(V52)) end end end end end end, fun (V54) -> fun (V55) -> fun (V56) -> begin (V57 = (V55(V56))), (V57(V56)) end end end end}, fun (V58) -> fun (V59) -> V59 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V0)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V62, V63, V64)) end end end end end, fun (V65) -> fun (V66) -> fun (V67) -> V66 end end end, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), begin (V74 = (V71(V72))), (V73(V74)) end end end end end end end}, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V77(V79))), ((V78(V80))(V79)) end end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> begin (V84 = (V82(V83))), (V84(V83)) end end end end}, ('Idris.Idris2.Erlang.System.File':'un--fflush'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> V91 end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V95(V97))), begin (V99 = (V96(V97))), (V98(V99)) end end end end end end end}, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V102(V104))), ((V103(V105))(V104)) end end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> begin (V109 = (V107(V108))), (V109(V108)) end end end end}, fun (V110) -> fun (V111) -> V111 end end}, ('Idris.Idris2.Erlang.System.File':'un--stdout'()))), fun () -> fun (V112) -> begin (V140 = (('Idris.Idris2.Network.Socket':'un--accept'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V113) -> fun (V114) -> fun (V115) -> fun (V116) -> fun (V117) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V115, V116, V117)) end end end end end, fun (V118) -> fun (V119) -> fun (V120) -> V119 end end end, fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> begin (V126 = (V123(V125))), begin (V127 = (V124(V125))), (V126(V127)) end end end end end end end}, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V130(V132))), ((V131(V133))(V132)) end end end end end end, fun (V134) -> fun (V135) -> fun (V136) -> begin (V137 = (V135(V136))), (V137(V136)) end end end end}, fun (V138) -> fun (V139) -> V139 end end}, V2))(V112))), case V140 of {'Idris.Prelude.Types.Left', E0} -> (fun (V141) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to accept on socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V141))))} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V142) -> case V142 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V143, V144) -> (('un--socketToFile'(V143))(V112)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end)) end)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in initIDESocketFile-4446'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> {'Idris.Prelude.Types.Left', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Failed to bind socket with error: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V4))))} end; 1 -> fun (V7) -> begin (V35 = (('Idris.Idris2.Network.Socket':'un--listen'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, V2))(V7))), (('case--case block in case block in initIDESocketFile-4498'(V0, V1, V2, V3, V4, V35, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V35, 0))))(V7)) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--initIDESocketFile-4384'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V6, V7, V8)) end end end end end, fun (V9) -> fun (V10) -> fun (V11) -> V10 end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> begin (V17 = (V14(V16))), begin (V18 = (V15(V16))), (V17(V18)) end end end end end end end}, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), ((V22(V24))(V23)) end end end end end end, fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V26(V27))), (V28(V27)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V3)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V83, V84, V85)) end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> V87 end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V91(V93))), begin (V95 = (V92(V93))), (V94(V95)) end end end end end end end}, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V98(V100))), ((V99(V101))(V100)) end end end end end end, fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V103(V104))), (V105(V104)) end end end end}, fun (V106) -> fun (V107) -> V107 end end}, <<"Failed to open socket"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V110, V111, V112)) end end end end end, fun (V113) -> fun (V114) -> fun (V115) -> V114 end end end, fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> begin (V121 = (V118(V120))), begin (V122 = (V119(V120))), (V121(V122)) end end end end end end end}, fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> begin (V128 = (V125(V127))), ((V126(V128))(V127)) end end end end end end, fun (V129) -> fun (V130) -> fun (V131) -> begin (V132 = (V130(V131))), (V132(V131)) end end end end}, fun (V133) -> fun (V134) -> V134 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end)) end)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V135) -> fun (V136) -> begin (V164 = (('Idris.Idris2.Network.Socket':'un--bind'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V139, V140, V141)) end end end end end, fun (V142) -> fun (V143) -> fun (V144) -> V143 end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V147(V149))), begin (V151 = (V148(V149))), (V150(V151)) end end end end end end end}, fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V154(V156))), ((V155(V157))(V156)) end end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V159(V160))), (V161(V160)) end end end end}, fun (V162) -> fun (V163) -> V163 end end}, V135, {'Idris.Prelude.Types.Just', {'Idris.Network.Socket.Data.Hostname', V1}}, V0))(V136))), begin (V165 = {'Idris.Prelude.Types.Right', V135}), (('case--case block in initIDESocketFile-4446'(V0, V1, V135, V165, V164, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V164, 0))))(V136)) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--24035-5790--in--un--versionSExp'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', [('nested--24035-5788--in--un--semverSexp'(V0, V1, V2, V3, V4, V5, V6, V7)) | [('nested--24035-5789--in--un--tagSexp'(V0, V1, V2, V3, V4, V5, V6, V7)) | []]]}.
'nested--24658-6126--in--un--updateOutput'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Idris.REPLOpts':'un--getOutput'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Idris.REPLOpts.IDEMode', E2, E3, E4} -> (fun (V10, V11, V12) -> ('Idris.Idris2.Idris.REPLOpts':'un--setOutput'(V0, {'Idris.Idris.REPLOpts.IDEMode', V5, V11, V12}, V6)) end(E2, E3, E4)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--24035-5789--in--un--tagSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--displayIDEResult,tagSexp-5842'(V0, V1, V2, V3, V4, V5, V6, V7, case V0 of {'Idris.Idris.Version.MkVersion', E0, E1} -> (fun (V8, V9) -> V9 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--24035-5788--in--un--semverSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('case--displayIDEResult,semverSexp-5794'(V0, V1, V2, V3, V4, V5, V6, V7, case V0 of {'Idris.Idris.Version.MkVersion', E0, E1} -> (fun (V8, V9) -> V8 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--24035-5777--in--un--optionsSexp'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> ('dn--un--toSExp_SExpable_REPLOpt'(V8)) end, V0))}.
'nested--24035-6010--in--un--constructSExp'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V15, V16) -> case V14 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V17, V18) -> fun (V19) -> begin (V20 = ('Idris.Idris2.Idris.Pretty':'un--render'(V3, ('Idris.Idris2.Core.Name':'dn--un--pretty_Pretty_Name'('erased', V9)), V19))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.StringAtom', V22} | [{'Idris.Idris.IDEMode.Commands.StringAtom', V11} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V15))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V16))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V17))} | [{'Idris.Idris.IDEMode.Commands.IntegerAtom', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V18))} | []]]]]]]}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_REPLOpt'(V0) -> case V0 of {'Idris.Idris.Syntax.ShowImplicits', E0} -> (fun (V1) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-implicits"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V1)) | []]]} end(E0)); {'Idris.Idris.Syntax.ShowNamespace', E1} -> (fun (V2) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-namespace"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V2)) | []]]} end(E1)); {'Idris.Idris.Syntax.ShowTypes', E2} -> (fun (V3) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"show-types"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Bool'(V3)) | []]]} end(E2)); {'Idris.Idris.Syntax.EvalMode', E3} -> (fun (V4) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"eval"/utf8>>} | [('dn--un--toSExp_SExpable_REPLEval'(V4)) | []]]} end(E3)); {'Idris.Idris.Syntax.Editor', E4} -> (fun (V5) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"editor"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V5)) | []]]} end(E4)); {'Idris.Idris.Syntax.CG', E5} -> (fun (V6) -> {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"cg"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V6)) | []]]} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--toSExp_SExpable_REPLEval'(V0) -> case V0 of {'Idris.Idris.Syntax.EvalTC'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"typecheck"/utf8>>} end()); {'Idris.Idris.Syntax.NormaliseAll'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"normalise"/utf8>>} end()); {'Idris.Idris.Syntax.Execute'} -> (fun () -> {'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"execute"/utf8>>} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--todoCmd'(V0, V1, V2) -> ('Idris.Idris2.Idris.REPLCommon':'un--iputStrLn'(V0, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<": command not yet implemented. Hopefully soon!"/utf8>>)))), V2)).
'un--socketToFile'(V0) -> case V0 of {'Idris.Network.Socket.Data.MkSocket', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> fun (V5) -> {'Idris.Prelude.Types.Left', <<"Failed to fdopen socket file descriptor"/utf8>>} end end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--returnFromIDE'(V0, V1, V2) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V3)) end, V0, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"return"/utf8>>} | [V2 | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V1)) | []]]]})).
'un--replWrap'(V0, V1) -> begin (V2 = (V0(V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', V4}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--replIDE'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPLOpts':'un--getOutput'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Idris.REPLOpts.REPL', E2} -> (fun (V9) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Running idemode but output isn\x{27}t"/utf8>>)), V5)) end(E2)); {'Idris.Idris.REPLOpts.IDEMode', E3, E4, E5} -> (fun (V10, V11, V12) -> begin (V14 = (('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V13) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V13)) end, V12, ('Idris.Idris2.Idris.IDEMode.Commands':'un--version'(2, 0))))(V5))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> ('un--loop'(V0, V1, V2, V3, V4, V5)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processCatch'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Context':'un--branch'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V15 = begin (V14 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V22) -> begin (V23 = (('un--process'(V0, V1, V2, V3, V4, V5))(V22))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Core.Context':'un--commit'(V0, V22))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', V25} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V29) -> fun (V30) -> begin (V32 = begin (V31 = ('erlang':'put'(V0, V9))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V36 = begin (V35 = ('erlang':'put'(V1, V13))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E14} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V38) -> begin (V40 = begin (V39 = ('erlang':'put'(V2, V17))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E16} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'put'(V4, V21))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V29))(V30))), case V47 of {'Idris.Prelude.Types.Left', E20} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V49) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.REPLError', V49}}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--process'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.IDEMode.Commands.Interpret', E0} -> (fun (V6) -> fun (V7) -> ('un--replWrap'(fun (V8) -> ('Idris.Idris2.Idris.REPL':'un--interpret'(V0, V1, V2, V3, V4, V6, V8)) end, V7)) end end(E0)); {'Idris.Idris.IDEMode.Commands.LoadFile', E1, E2} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = ('Idris.Idris2.Idris.Package':'un--findIpkg'(V0, V4, V2, {'Idris.Prelude.Types.Just', V9}, V11))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> begin (V16 = case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> V9 end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V15) -> V15 end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--replWrap'(fun (V17) -> begin (V18 = (('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Load', V16}))(V17))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> ('Idris.Idris2.Idris.IDEMode.SyntaxHighlight':'un--outputSyntaxHighlighting'(V3, V4, V16, V20, V17)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V11)) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); {'Idris.Idris.IDEMode.Commands.NameAt', E8, E9} -> (fun (V21, V22) -> case V22 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> begin (V25 = begin (V24 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V24} end), case V25 of {'Idris.Prelude.Types.Left', E10} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V27) -> begin (V55 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'({'Idris.Core.Name.UN', V21}, case V27 of {'Idris.Core.Context.MkDefs', E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V28 end(E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V23))), case V55 of {'Idris.Prelude.Types.Left', E39} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V57) -> begin (V84 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V58) -> case V58 of {'Idris.Builtin.MkPair', E41, E42} -> (fun (V59, V60) -> case V60 of {'Idris.Builtin.MkPair', E43, E44} -> (fun (V61, V62) -> {'Idris.Builtin.MkPair', V59, case V62 of {'Idris.Core.Context.MkGlobalDef', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83) -> V63 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V57))), {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameLocList', V84}} end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E66} -> (fun (V85) -> fun (V86) -> begin (V87 = ('un--todoCmd'(V4, <<"name-at <name> <line> <column>"/utf8>>, V86))), case V87 of {'Idris.Prelude.Types.Left', E67} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V89) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Edited', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}}}} end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); {'Idris.Idris.IDEMode.Commands.TypeOf', E69, E70} -> (fun (V90, V91) -> case V91 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V92) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Check', {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), {'Idris.Core.Name.UN', V90}}})), V92)) end end()); {'Idris.Prelude.Types.Just', E71} -> (fun (V93) -> case V93 of {'Idris.Builtin.MkPair', E72, E73} -> (fun (V94, V95) -> fun (V96) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.TypeAt', V94, V95, {'Idris.Core.Name.UN', V90}}})), V96)) end end(E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E69, E70)); {'Idris.Idris.IDEMode.Commands.CaseSplit', E74, E75, E76} -> (fun (V97, V98, V99) -> fun (V100) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.CaseSplit', 1, V97, V98, {'Idris.Core.Name.UN', V99}}})), V100)) end end(E74, E75, E76)); {'Idris.Idris.IDEMode.Commands.AddClause', E77, E78} -> (fun (V101, V102) -> fun (V103) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.AddClause', 1, V101, {'Idris.Core.Name.UN', V102}}})), V103)) end end(E77, E78)); {'Idris.Idris.IDEMode.Commands.AddMissing', E79, E80} -> (fun (V104, V105) -> fun (V106) -> begin (V107 = ('un--todoCmd'(V4, <<"add-missing"/utf8>>, V106))), case V107 of {'Idris.Prelude.Types.Left', E81} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Edited', {'Idris.Idris.REPL.DisplayEdit', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}}}} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E79, E80)); {'Idris.Idris.IDEMode.Commands.ExprSearch', E83, E84, E85, E86} -> (fun (V110, V111, V112, V113) -> fun (V114) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.ExprSearch', 1, V110, {'Idris.Core.Name.UN', V111}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V115) -> {'Idris.Core.Name.UN', V115} end, V112))}})), V114)) end end(E83, E84, E85, E86)); {'Idris.Idris.IDEMode.Commands.ExprSearchNext'} -> (fun () -> fun (V116) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.ExprSearchNext'}})), V116)) end end()); {'Idris.Idris.IDEMode.Commands.GenerateDef', E87, E88} -> (fun (V117, V118) -> fun (V119) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.GenerateDef', 1, V117, {'Idris.Core.Name.UN', V118}, 0}})), V119)) end end(E87, E88)); {'Idris.Idris.IDEMode.Commands.GenerateDefNext'} -> (fun () -> fun (V120) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.GenerateDefNext'}})), V120)) end end()); {'Idris.Idris.IDEMode.Commands.MakeLemma', E89, E90} -> (fun (V121, V122) -> fun (V123) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeLemma', 1, V121, {'Idris.Core.Name.UN', V122}}})), V123)) end end(E89, E90)); {'Idris.Idris.IDEMode.Commands.MakeCase', E91, E92} -> (fun (V124, V125) -> fun (V126) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeCase', 1, V124, {'Idris.Core.Name.UN', V125}}})), V126)) end end(E91, E92)); {'Idris.Idris.IDEMode.Commands.MakeWith', E93, E94} -> (fun (V127, V128) -> fun (V129) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Editing', {'Idris.Idris.Syntax.MakeWith', 1, V127, {'Idris.Core.Name.UN', V128}}})), V129)) end end(E93, E94)); {'Idris.Idris.IDEMode.Commands.DocsFor', E95, E96} -> (fun (V130, V131) -> fun (V132) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Doc', {'Idris.Idris.Syntax.PRef', {'Idris.Core.FC.EmptyFC'}, {'Idris.Core.Name.UN', V130}}})), V132)) end end(E95, E96)); {'Idris.Idris.IDEMode.Commands.Apropos', E97} -> (fun (V133) -> fun (V134) -> begin (V135 = ('un--todoCmd'(V4, <<"apropros"/utf8>>, V134))), case V135 of {'Idris.Prelude.Types.Left', E98} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V137) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}}} end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E97)); {'Idris.Idris.IDEMode.Commands.Directive', E100} -> (fun (V138) -> fun (V139) -> begin (V140 = ('un--todoCmd'(V4, <<"directive"/utf8>>, V139))), case V140 of {'Idris.Prelude.Types.Left', E101} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V142) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--emptyDoc'('erased'))}}} end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E100)); {'Idris.Idris.IDEMode.Commands.WhoCalls', E103} -> (fun (V143) -> fun (V144) -> begin (V145 = ('un--todoCmd'(V4, <<"who-calls"/utf8>>, V144))), case V145 of {'Idris.Prelude.Types.Left', E104} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V147) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E103)); {'Idris.Idris.IDEMode.Commands.CallsWho', E106} -> (fun (V148) -> fun (V149) -> begin (V150 = ('un--todoCmd'(V4, <<"calls-who"/utf8>>, V149))), case V150 of {'Idris.Prelude.Types.Left', E107} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V152) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E106)); {'Idris.Idris.IDEMode.Commands.BrowseNamespace', E109} -> (fun (V153) -> fun (V154) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Browse', ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(V153))})), V154)) end end(E109)); {'Idris.Idris.IDEMode.Commands.NormaliseTerm', E110} -> (fun (V155) -> fun (V156) -> begin (V157 = ('un--todoCmd'(V4, <<"normalise-term"/utf8>>, V156))), case V157 of {'Idris.Prelude.Types.Left', E111} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V159) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V155}} end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E110)); {'Idris.Idris.IDEMode.Commands.ShowTermImplicits', E113} -> (fun (V160) -> fun (V161) -> begin (V162 = ('un--todoCmd'(V4, <<"show-term-implicits"/utf8>>, V161))), case V162 of {'Idris.Prelude.Types.Left', E114} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V164) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V160}} end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E113)); {'Idris.Idris.IDEMode.Commands.HideTermImplicits', E116} -> (fun (V165) -> fun (V166) -> begin (V167 = ('un--todoCmd'(V4, <<"hide-term-implicits"/utf8>>, V166))), case V167 of {'Idris.Prelude.Types.Left', E117} -> (fun (V168) -> {'Idris.Prelude.Types.Left', V168} end(E117)); {'Idris.Prelude.Types.Right', E118} -> (fun (V169) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.Term', V165}} end(E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E116)); {'Idris.Idris.IDEMode.Commands.ElaborateTerm', E119} -> (fun (V170) -> fun (V171) -> begin (V172 = ('un--todoCmd'(V4, <<"elaborate-term"/utf8>>, V171))), case V172 of {'Idris.Prelude.Types.Left', E120} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V174) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.TTTerm', V170}} end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E119)); {'Idris.Idris.IDEMode.Commands.PrintDefinition', E122} -> (fun (V175) -> fun (V176) -> begin (V177 = ('un--todoCmd'(V4, <<"print-definition"/utf8>>, V176))), case V177 of {'Idris.Prelude.Types.Left', E123} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V179) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V175))}}} end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E122)); {'Idris.Idris.IDEMode.Commands.ReplCompletions', E125} -> (fun (V180) -> fun (V181) -> begin (V182 = ('un--todoCmd'(V4, <<"repl-completions"/utf8>>, V181))), case V182 of {'Idris.Prelude.Types.Left', E126} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V184) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.NameList', []}} end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E125)); {'Idris.Idris.IDEMode.Commands.EnableSyntax', E128} -> (fun (V185) -> fun (V186) -> begin (V187 = ('Idris.Idris2.Idris.REPLOpts':'un--setSynHighlightOn'(V4, V185, V186))), case V187 of {'Idris.Prelude.Types.Left', E129} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V189) -> {'Idris.Prelude.Types.Right', {'Idris.Idris.IDEMode.REPL.REPL', {'Idris.Idris.REPL.Printed', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Syntax highlight option changed to"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_Bool'('erased', V185))))}}} end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E128)); {'Idris.Idris.IDEMode.Commands.Version'} -> (fun () -> fun (V190) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.ShowVersion'})), V190)) end end()); {'Idris.Idris.IDEMode.Commands.Metavariables', E131} -> (fun (V191) -> fun (V192) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.Metavars'})), V192)) end end(E131)); {'Idris.Idris.IDEMode.Commands.GetOptions'} -> (fun () -> fun (V193) -> ('un--replWrap'(('Idris.Idris2.Idris.REPL':'un--process'(V0, V1, V2, V3, V4, {'Idris.Idris.Syntax.GetOpts'})), V193)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--printIDEResultWithHighlight'(V0, V1, V2) -> ('un--returnFromIDE'(V0, V1, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"ok"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V2)) | [{'Idris.Idris.IDEMode.Commands.SExpList', []} | []]]]})).
'un--printIDEResult'(V0, V1, V2) -> ('un--returnFromIDE'(V0, V1, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"ok"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V2)) | []]]})).
'un--printIDEError'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Idris.Pretty':'un--renderWithoutColor'(V0, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> (('un--returnFromIDE'(V1, V2, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"error"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V7)) | []]]}))(V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--loop'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Idris.REPLOpts':'un--getOutput'(V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Idris.REPLOpts.REPL', E2} -> (fun (V9) -> ('Idris.Idris2.Idris.REPLCommon':'un--printError'(V4, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Running idemode but output isn\x{27}t"/utf8>>)), V5)) end(E2)); {'Idris.Idris.REPLOpts.IDEMode', E3, E4, E5} -> (fun (V10, V11, V12) -> begin (V14 = begin (V13 = ('un--getInput'(V11, V5))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V17 = {'Idris.Idris.REPLOpts.IDEMode', V10, V11, V12}), (('case--case block in loop-6208'(V4, V3, V2, V1, V0, V12, V11, V10, V17, V16, 1))(V5)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initIDESocketFile'(V0, V1, V2) -> begin (V30 = (('Idris.Idris2.Network.Socket':'un--socket'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> V9 end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> begin (V16 = (V13(V15))), begin (V17 = (V14(V15))), (V16(V17)) end end end end end end end}, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> begin (V23 = (V20(V22))), ((V21(V23))(V22)) end end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V25(V26))), (V27(V26)) end end end end}, fun (V28) -> fun (V29) -> V29 end end}, {'Idris.Network.Socket.Data.AF_INET'}, {'Idris.Network.Socket.Data.Stream'}, 0))(V2))), case V30 of {'Idris.Prelude.Types.Left', E0} -> (fun (V31) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V31)))), fun () -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V111, V112, V113)) end end end end end, fun (V114) -> fun (V115) -> fun (V116) -> V115 end end end, fun (V117) -> fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> begin (V122 = (V119(V121))), begin (V123 = (V120(V121))), (V122(V123)) end end end end end end end}, fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> begin (V129 = (V126(V128))), ((V127(V129))(V128)) end end end end end end, fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V131(V132))), (V133(V132)) end end end end}, fun (V134) -> fun (V135) -> V135 end end}, <<"Failed to open socket"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V138, V139, V140)) end end end end end, fun (V141) -> fun (V142) -> fun (V143) -> V142 end end end, fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> begin (V149 = (V146(V148))), begin (V150 = (V147(V148))), (V149(V150)) end end end end end end end}, fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V153(V155))), ((V154(V156))(V155)) end end end end end end, fun (V157) -> fun (V158) -> fun (V159) -> begin (V160 = (V158(V159))), (V160(V159)) end end end end}, fun (V161) -> fun (V162) -> V162 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end)) end))(V2)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V163) -> begin (V191 = (('Idris.Idris2.Network.Socket':'un--bind'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V166, V167, V168)) end end end end end, fun (V169) -> fun (V170) -> fun (V171) -> V170 end end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), begin (V178 = (V175(V176))), (V177(V178)) end end end end end end end}, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V181(V183))), ((V182(V184))(V183)) end end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> begin (V188 = (V186(V187))), (V188(V187)) end end end end}, fun (V189) -> fun (V190) -> V190 end end}, V163, {'Idris.Prelude.Types.Just', {'Idris.Network.Socket.Data.Hostname', V0}}, V1))(V2))), begin (V192 = {'Idris.Prelude.Types.Right', V163}), (('case--case block in initIDESocketFile-4446'(V1, V0, V163, V192, V191, ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V191, 0))))(V2)) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--idePutStrLn'(V0, V1, V2) -> ('Idris.Idris2.Idris.IDEMode.Commands':'un--send'('erased', fun (V3) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_SExp'(V3)) end, V0, {'Idris.Idris.IDEMode.Commands.SExpList', [{'Idris.Idris.IDEMode.Commands.SymbolAtom', <<"write-string"/utf8>>} | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_String'(V2)) | [('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Integer'(V1)) | []]]]})).
'un--handleIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.IDEMode.REPL.REPL', E0} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.Exited'} -> (fun () -> ('un--idePutStrLn'(V5, V6, <<"Bye for now!"/utf8>>)) end()); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end end(E0)); _ -> ('un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'un--getNChars'(V0, V1) -> case V1 of 0 -> fun (V2) -> [] end; _ -> begin (V3 = (V1 - 1)), fun (V4) -> begin (V5 = (('un--getChar'(V0))(V4))), begin (V6 = (('un--getNChars'(V0, V3))(V4))), [V5 | V6] end end end end end.
'un--getInput'(V0, V1) -> begin (V2 = (('un--getNChars'(V0, (1 + (1 + (1 + (1 + (1 + (1 + 0))))))))(V1))), (('case--getInput-4784'(V0, V2, ('Idris.Idris2.Libraries.Utils.Hex':'un--fromHexChars'(('Idris.Idris2.Data.List':'un--reverse'('erased', V2))))))(V1)) end.
'un--getFLine'(V0, V1) -> begin (V29 = (('Idris.Idris2.Erlang.System.File':'un--fGetLine'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, V0))(V1))), case V29 of {'Idris.Prelude.Types.Right', E0} -> (fun (V30) -> V30 end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V31) -> (('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> V38 end end end, fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> begin (V45 = (V42(V44))), begin (V46 = (V43(V44))), (V45(V46)) end end end end end end end}, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), ((V50(V52))(V51)) end end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V54(V55))), (V56(V55)) end end end end}, ('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, <<"Failed to read a line"/utf8>>)), fun () -> ('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> V90 end end end, fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> begin (V97 = (V94(V96))), begin (V98 = (V95(V96))), (V97(V98)) end end end end end end end}, fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> begin (V104 = (V101(V103))), ((V102(V104))(V103)) end end end end end end, fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V106(V107))), (V108(V107)) end end end end}, fun (V109) -> fun (V110) -> V110 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}})) end))(V1)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getChar'(V0) -> ('case--getChar-4623'(V0, 1)).
'un--displayIDEResult'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.IDEMode.REPL.REPL', E0} -> (fun (V8) -> case V8 of {'Idris.Idris.REPL.REPLError', E1} -> (fun (V9) -> fun (V10) -> ('un--printIDEError'(V4, V5, V6, V9, V10)) end end(E1)); {'Idris.Idris.REPL.RequestedHelp'} -> (fun () -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.REPL':'un--displayHelp'())})) end()); {'Idris.Idris.REPL.Evaluated', E2, E3} -> (fun (V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--printIDEResultWithHighlight'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V11))})) end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V13) -> ('un--printIDEResultWithHighlight'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V13))))))})) end(E4)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E2, E3)); {'Idris.Idris.REPL.Printed', E5} -> (fun (V15) -> fun (V16) -> begin (V17 = ('Idris.Idris2.Idris.Pretty':'un--renderWithoutColor'(V4, V15, V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> (('un--printIDEResultWithHighlight'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V19}))(V16)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); {'Idris.Idris.REPL.TermChecked', E8, E9} -> (fun (V20, V21) -> ('un--printIDEResultWithHighlight'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V20)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V21))))))})) end(E8, E9)); {'Idris.Idris.REPL.FileLoaded', E10} -> (fun (V22) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', []})) end(E10)); {'Idris.Idris.REPL.ErrorLoadingFile', E11, E12} -> (fun (V23, V24) -> fun (V25) -> ('un--printIDEError'(V4, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error loading file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V23)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V24)))))))), V25)) end end(E11, E12)); {'Idris.Idris.REPL.ErrorsBuildingFile', E13, E14} -> (fun (V26, V27) -> fun (V28) -> begin (V30 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V29) -> ('Idris.Idris2.Idris.Error':'un--perror'(V0, V2, V4, V29)) end, V27, []))(V28))), case V30 of {'Idris.Prelude.Types.Left', E15} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V32) -> ('un--printIDEError'(V4, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Error(s) building file"/utf8>>)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--<++>'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--<+>_Semigroup_(Doc $ann)'('erased', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--pretty_Pretty_String'('erased', V26)), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Symbols':'un--colon'('erased')))), ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vsep'('erased', V32)))))), V28)) end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13, E14)); {'Idris.Idris.REPL.NoFileLoaded'} -> (fun () -> fun (V33) -> ('un--printIDEError'(V4, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"No file can be reloaded"/utf8>>)), V33)) end end()); {'Idris.Idris.REPL.CurrentDirectory', E17} -> (fun (V34) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Current working directory is \x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V34, <<"\x{22}"/utf8>>))))})) end(E17)); {'Idris.Idris.REPL.CompilationFailed'} -> (fun () -> fun (V35) -> ('un--printIDEError'(V4, V5, V6, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Util':'un--reflow'('erased', <<"Compilation failed"/utf8>>)), V35)) end end()); {'Idris.Idris.REPL.Compiled', E18} -> (fun (V36) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"File "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V36, <<" written"/utf8>>))))})) end(E18)); {'Idris.Idris.REPL.ProofFound', E19} -> (fun (V37) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V37))})) end(E19)); {'Idris.Idris.REPL.Missed', E20} -> (fun (V38) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V39) -> ('Idris.Idris2.Idris.REPL':'un--handleMissing\x{27}'(V39)) end, V38))))})) end(E20)); {'Idris.Idris.REPL.CheckedTotal', E21} -> (fun (V40) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V41) -> case V41 of {'Idris.Builtin.MkPair', E22, E23} -> (fun (V42, V43) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V42)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" is "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Totality'(V43)))))) end(E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V40))))})) end(E21)); {'Idris.Idris.REPL.FoundHoles', E24} -> (fun (V44) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V45) -> ('Idris.Idris2.Idris.IDEMode.Holes':'un--sexpHole'(V45)) end, V44))})) end(E24)); {'Idris.Idris.REPL.LogLevelSet', E25} -> (fun (V46) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Set loglevel to "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V47) -> ('Idris.Idris2.Core.Options.Log':'dn--un--show_Show_LogLevel'(V47)) end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Options.Log':'dn--un--showPrec_Show_LogLevel'(V48, V49)) end end}, V46))))})) end(E25)); {'Idris.Idris.REPL.OptionsSet', E26} -> (fun (V50) -> ('un--printIDEResult'(V5, V6, ('nested--24035-5777--in--un--optionsSexp'(V50, V6, V5, V4, V3, V2, V1, V0)))) end(E26)); {'Idris.Idris.REPL.VersionIs', E27} -> (fun (V51) -> ('un--printIDEResult'(V5, V6, ('nested--24035-5790--in--un--versionSExp'(V51, V6, V5, V4, V3, V2, V1, V0)))) end(E27)); {'Idris.Idris.REPL.Edited', E28} -> (fun (V52) -> case V52 of {'Idris.Idris.REPL.DisplayEdit', E29} -> (fun (V53) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'('erased', V53))})) end(E29)); {'Idris.Idris.REPL.EditError', E30} -> (fun (V54) -> fun (V55) -> ('un--printIDEError'(V4, V5, V6, V54, V55)) end end(E30)); {'Idris.Idris.REPL.MadeLemma', E31, E32, E33, E34} -> (fun (V56, V57, V58, V59) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Parser.Unlit':'un--relit'(V56, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V57)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V58)), <<"\x{a}"/utf8>>)))))))), V59))})) end(E31, E32, E33, E34)); {'Idris.Idris.REPL.MadeWith', E35, E36} -> (fun (V60, V61) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V62) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V60, V62)) end, V61))))})) end(E35, E36)); {'Idris.Idris.REPL.MadeCase', E37, E38} -> (fun (V63, V64) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V65) -> ('Idris.Idris2.Parser.Unlit':'un--relit'(V63, V65)) end, V64))))})) end(E37, E38)); _ -> fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E28)); {'Idris.Idris.REPL.ConsoleWidthSet', E39} -> (fun (V67) -> begin (V69 = case V67 of {'Idris.Prelude.Types.Just', E40} -> (fun (V68) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V68)) end(E40)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"auto"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Set consolewidth to "/utf8>>, V69))})) end end(E39)); _ -> fun (V70) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E0)); {'Idris.Idris.IDEMode.REPL.NameList', E41} -> (fun (V71) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V72) -> ('Idris.Idris2.Idris.IDEMode.Commands':'dn--un--toSExp_SExpable_Name'(V72)) end, V71))})) end(E41)); {'Idris.Idris.IDEMode.REPL.Term', E42} -> (fun (V73) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V73})) end(E42)); {'Idris.Idris.IDEMode.REPL.TTTerm', E43} -> (fun (V74) -> ('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.StringAtom', V74})) end(E43)); {'Idris.Idris.IDEMode.REPL.NameLocList', E44} -> (fun (V75) -> fun (V76) -> begin (V80 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V77) -> ('nested--24035-6010--in--un--constructSExp'(V75, V6, V5, V4, V3, V2, V1, V0, case V77 of {'Idris.Builtin.MkPair', E45, E46} -> (fun (V78, V79) -> {'Idris.Builtin.MkPair', V78, ('Idris.Idris2.Core.FC':'un--toNonEmptyFC'(V79))} end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, V75, []))(V76))), case V80 of {'Idris.Prelude.Types.Left', E47} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V82) -> (('un--printIDEResult'(V5, V6, {'Idris.Idris.IDEMode.Commands.SExpList', V82}))(V76)) end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E44)); _ -> fun (V83) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end.
