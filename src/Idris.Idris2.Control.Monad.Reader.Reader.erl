-module('Idris.Idris2.Control.Monad.Reader.Reader').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case-->>=-776'/10,
  'dn--un--pure_Applicative_((ReaderT $stateType) $f)'/6,
  'dn--un--map_Functor_((ReaderT $stateType) $f)'/8,
  'dn--un--lift_MonadTrans_(ReaderT $stateType)'/6,
  'dn--un--liftIO_HasIO_((ReaderT $stateType) $m)'/6,
  'dn--un--join_Monad_((ReaderT $stateType) $m)'/6,
  'dn--un--empty_Alternative_((ReaderT $stateType) $f)'/5,
  'dn--un--__Impl_Monad_((ReaderT $stateType) $m)'/3,
  'dn--un--__Impl_MonadTrans_(ReaderT $stateType)'/6,
  'dn--un--__Impl_HasIO_((ReaderT $stateType) $m)'/3,
  'dn--un--__Impl_Functor_((ReaderT $stateType) $f)'/8,
  'dn--un--__Impl_Applicative_((ReaderT $stateType) $f)'/3,
  'dn--un--__Impl_Alternative_((ReaderT $stateType) $f)'/3,
  'dn--un-->>=_Monad_((ReaderT $stateType) $m)'/8,
  'dn--un--<|>_Alternative_((ReaderT $stateType) $f)'/6,
  'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'/8,
  'un--runReaderT'/5,
  'un--runReader'/4,
  'un--mapReaderT'/8,
  'un--Reader'/2
]).
'case-->>=-776'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> (V9(V7)).
'dn--un--pure_Applicative_((ReaderT $stateType) $f)'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V6, V7, V8) -> ((V7('erased'))(V4)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--map_Functor_((ReaderT $stateType) $f)'(V0, V1, V2, V3, V4, V5, V6, V7) -> ((((V4('erased'))('erased'))(V5))((V6(V7)))).
'dn--un--lift_MonadTrans_(ReaderT $stateType)'(V0, V1, V2, V3, V4, V5) -> V4.
'dn--un--liftIO_HasIO_((ReaderT $stateType) $m)'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E0, E1} -> (fun (V6, V7) -> ((V7('erased'))(V4)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--join_Monad_((ReaderT $stateType) $m)'(V0, V1, V2, V3, V4, V5) -> ('dn--un-->>=_Monad_((ReaderT $stateType) $m)'('erased', 'erased', 'erased', 'erased', V3, V4, fun (V6) -> V6 end, V5)).
'dn--un--empty_Alternative_((ReaderT $stateType) $f)'(V0, V1, V2, V3, V4) -> ('dn--un--lift_MonadTrans_(ReaderT $stateType)'('erased', 'erased', 'erased', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V3)), case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', E0, E1, E2} -> (fun (V5, V6, V7) -> (V6('erased')) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)).
'dn--un--__Impl_Monad_((ReaderT $stateType) $m)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V11, V12, V13) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6, V7)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--pure_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V17, V18, V19) -> V17 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, V16)) end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('dn--un--<*>_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V25, V26, V27) -> V25 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V22, V23, V24)) end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('dn--un-->>=_Monad_((ReaderT $stateType) $m)'('erased', 'erased', 'erased', 'erased', V2, V30, V31, V32)) end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--join_Monad_((ReaderT $stateType) $m)'('erased', 'erased', 'erased', V2, V34, V35)) end end end}.
'dn--un--__Impl_MonadTrans_(ReaderT $stateType)'(V0, V1, V2, V3, V4, V5) -> ('dn--un--lift_MonadTrans_(ReaderT $stateType)'('erased', 'erased', 'erased', V3, V4, V5)).
'dn--un--__Impl_HasIO_((ReaderT $stateType) $m)'(V0, V1, V2) -> {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E6, E7} -> (fun (V8, V9) -> V8 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V10, V11, V12) -> V10 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V13, V14, V15) -> V13 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6, V7)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--pure_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E11, E12} -> (fun (V19, V20) -> V19 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E8, E9, E10} -> (fun (V21, V22, V23) -> V21 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V17, V18)) end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('dn--un--<*>_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E16, E17} -> (fun (V29, V30) -> V29 end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E13, E14, E15} -> (fun (V31, V32, V33) -> V31 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26, V27, V28)) end end end end end}, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('dn--un-->>=_Monad_((ReaderT $stateType) $m)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E18, E19} -> (fun (V39, V40) -> V39 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V36, V37, V38)) end end end end end, fun (V41) -> fun (V42) -> fun (V43) -> ('dn--un--join_Monad_((ReaderT $stateType) $m)'('erased', 'erased', 'erased', case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V44, V45) -> V44 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V42, V43)) end end end}, fun (V46) -> fun (V47) -> fun (V48) -> ('dn--un--liftIO_HasIO_((ReaderT $stateType) $m)'('erased', 'erased', 'erased', V2, V47, V48)) end end end}.
'dn--un--__Impl_Functor_((ReaderT $stateType) $f)'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', V2, V5, V6, V7)).
'dn--un--__Impl_Applicative_((ReaderT $stateType) $f)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V8, V9, V10) -> V8 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6, V7)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--pure_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', V2, V12, V13)) end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('dn--un--<*>_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', V2, V16, V17, V18)) end end end end end}.
'dn--un--__Impl_Alternative_((ReaderT $stateType) $f)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('dn--un--map_Functor_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V11, V12, V13) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V6, V7)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> ('dn--un--pure_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', E6, E7, E8} -> (fun (V17, V18, V19) -> V17 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15, V16)) end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('dn--un--<*>_Applicative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', 'erased', case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', E9, E10, E11} -> (fun (V25, V26, V27) -> V25 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V22, V23, V24)) end end end end end}, fun (V28) -> fun (V29) -> ('dn--un--empty_Alternative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', V2, V29)) end end, fun (V30) -> fun (V31) -> fun (V32) -> ('dn--un--<|>_Alternative_((ReaderT $stateType) $f)'('erased', 'erased', 'erased', V2, V31, V32)) end end end}.
'dn--un-->>=_Monad_((ReaderT $stateType) $m)'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V8, V9, V10) -> ((((V9('erased'))('erased'))((V5(V7))))(fun (V11) -> ('case-->>=-776'('erased', 'erased', 'erased', 'erased', V4, V5, V6, V7, V11, (V6(V11)))) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<|>_Alternative_((ReaderT $stateType) $f)'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (V5())), fun (V7) -> case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V3)) of {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', E0, E1, E2} -> (fun (V8, V9, V10) -> (((V10('erased'))((V4(V7))))(fun () -> (V6(V7)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'dn--un--<*>_Applicative_((ReaderT $stateType) $f)'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (V5(V7))), begin (V9 = (V6(V7))), case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V10, V11, V12) -> ((((V12('erased'))('erased'))(V8))(V9)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'un--runReaderT'(V0, V1, V2, V3, V4) -> (V4(V3)).
'un--runReader'(V0, V1, V2, V3) -> (V3(V2)).
'un--mapReaderT'(V0, V1, V2, V3, V4, V5, V6, V7) -> (V5((V6(V7)))).
'un--Reader'(V0, V1) -> {'Idris.Control.Monad.Reader.Reader.ReaderT', V0, fun (V2) -> {'Idris.Control.Monad.Identity.Identity', V2} end, V1}.
