-module('Idris.Idris2.Idris.Package').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--partitionOpts,pOptUpdate-9660'/4,
  'case--case block in processPackage-8787'/7,
  'case--installSrcFrom-6283'/8,
  'nested--16587-7138--in--un--visible'/8,
  'nested--14493-5279--in--un--toSource'/7,
  'nested--12069-2943--in--un--strField'/3,
  'nested--19382-9636--in--un--pOptUpdate'/3,
  'nested--19382-9635--in--un--optType'/2,
  'nested--12069-2941--in--un--mkBound'/3,
  'nested--19721-9947--in--un--loadDependencies'/6,
  'nested--16587-7139--in--un--inNS'/7,
  'nested--17536-7979--in--un--go'/6,
  'nested--14493-5280--in--un--go'/10,
  'nested--16587-7140--in--un--fileError'/8,
  'nested--12069-2942--in--un--depends'/1,
  'nested--17637-8075--in--un--deleteFolder'/7,
  'nested--17637-8076--in--un--deleteBin'/7,
  'nested--17637-8074--in--un--delete'/6,
  'nested--12069-2940--in--un--bound'/1,
  'un--runScript'/2,
  'un--runRepl'/5,
  'un--processPackageOpts'/5,
  'un--processPackage'/6,
  'un--processOptions'/3,
  'un--prepareCompilation'/6,
  'un--partitionOpts'/1,
  'un--parsePkgFile'/5,
  'un--parsePkgDesc'/1,
  'un--makeDoc'/6,
  'un--installSrcFrom'/4,
  'un--installFrom'/4,
  'un--installDir'/1,
  'un--install'/6,
  'un--foldWithKeysC'/5,
  'un--findIpkg'/5,
  'un--filterChangedModules'/2,
  'un--field'/1,
  'un--errorMsg'/0,
  'un--copyFile'/3,
  'un--compileMain'/7,
  'un--compileLibHelper'/7,
  'un--clean'/5,
  'un--check'/6,
  'un--build'/6,
  'un--bitraverseC'/4,
  'un--addFields'/6,
  'un--addField'/8,
  'un--addDeps'/3
]).
'with--partitionOpts,pOptUpdate-9660'(V0, V1, V2, V3) -> case V2 of {'Idris.Idris.Package.nested--19382-9631--in--un--PPackage', E0, E1, E2} -> (fun (V4, V5, V6) -> case V3 of {'Idris.Idris.Package.MkPFR', E3, E4, E5} -> (fun (V7, V8, V9) -> {'Idris.Idris.Package.MkPFR', [{'Idris.Builtin.MkPair', V5, V6} | V7], V8, V9} end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', E6} -> (fun (V10) -> case V3 of {'Idris.Idris.Package.MkPFR', E7, E8, E9} -> (fun (V11, V12, V13) -> {'Idris.Idris.Package.MkPFR', V11, [V1 | V12], V13} end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Idris.Package.nested--19382-9633--in--un--PIgnore', E10} -> (fun (V14) -> V3 end(E10)); {'Idris.Idris.Package.nested--19382-9634--in--un--PErr', E11} -> (fun (V15) -> case V3 of {'Idris.Idris.Package.MkPFR', E12, E13, E14} -> (fun (V16, V17, V18) -> {'Idris.Idris.Package.MkPFR', V16, V17, 1} end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processPackage-8787'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> case V7 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V9, V10) -> case ('Idris.Idris2.Data.String':'un--isSuffixOf'(<<".ipkg"/utf8>>, V10)) of 1 -> begin (V11 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V5, V9, V8))), case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> begin (V18 = begin (V17 = ('Idris.Idris2.Parser.Package':'un--parseFile'(V10, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V14) -> fun (V15) -> V14 end end, ('un--parsePkgDesc'(V10)))), fun (V16) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, V16, ('Idris.Idris2.Parser.Rule.Package':'un--eoi'()))) end}, V8))), {'Idris.Prelude.Types.Right', V17} end), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> case V20 of {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V22, V23) -> begin (V24 = ('un--addFields'(V5, V4, V3, V23, ('Idris.Idris2.Idris.Package.Types':'un--initPkgDesc'(V22)), V8))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> begin (V53 = case V26 of {'Idris.Idris.Package.Types.MkPkgDesc', E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> case V44 of {'Idris.Prelude.Types.Just', E39} -> (fun (V52) -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V5, V52, V8)) end(E39)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V53 of {'Idris.Prelude.Types.Left', E40} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V55) -> begin (V81 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V5, case V26 of {'Idris.Idris.Package.Types.MkPkgDesc', E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V74 end(E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V81 of {'Idris.Prelude.Types.Left', E67} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V83) -> case V0 of 0 -> begin (V84 = ('un--build'(V5, V4, V3, V26, V2, V8))), case V84 of {'Idris.Prelude.Types.Left', E69} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V86) -> case V86 of [] -> {'Idris.Prelude.Types.Right', 0}; _ -> begin (V114 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V89, V90, V91)) end end end end end, fun (V92) -> fun (V93) -> fun (V94) -> V93 end end end, fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V97(V99))), begin (V101 = (V98(V99))), (V100(V101)) end end end end end end end}, fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V104(V106))), ((V105(V107))(V106)) end end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> begin (V111 = (V109(V110))), (V111(V110)) end end end end}, fun (V112) -> fun (V113) -> V113 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V8))), {'Idris.Prelude.Types.Right', V114} end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 3 -> begin (V115 = ('un--makeDoc'(V5, V4, V3, V26, V2, V8))), case V115 of {'Idris.Prelude.Types.Left', E71} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E71)); {'Idris.Prelude.Types.Right', E72} -> (fun (V117) -> case V117 of [] -> {'Idris.Prelude.Types.Right', 0}; _ -> begin (V145 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V120, V121, V122)) end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> V124 end end end, fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> begin (V131 = (V128(V130))), begin (V132 = (V129(V130))), (V131(V132)) end end end end end end end}, fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> begin (V138 = (V135(V137))), ((V136(V138))(V137)) end end end end end end, fun (V139) -> fun (V140) -> fun (V141) -> begin (V142 = (V140(V141))), (V142(V141)) end end end end}, fun (V143) -> fun (V144) -> V144 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V8))), {'Idris.Prelude.Types.Right', V145} end end end(E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> begin (V146 = ('un--build'(V5, V4, V3, V26, V2, V8))), case V146 of {'Idris.Prelude.Types.Left', E73} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V148) -> case V148 of [] -> ('un--install'(V5, V3, V26, V2, 0, V8)); _ -> begin (V176 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V151, V152, V153)) end end end end end, fun (V154) -> fun (V155) -> fun (V156) -> V155 end end end, fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> begin (V162 = (V159(V161))), begin (V163 = (V160(V161))), (V162(V163)) end end end end end end end}, fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> begin (V169 = (V166(V168))), ((V167(V169))(V168)) end end end end end end, fun (V170) -> fun (V171) -> fun (V172) -> begin (V173 = (V171(V172))), (V173(V172)) end end end end}, fun (V174) -> fun (V175) -> V175 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V8))), {'Idris.Prelude.Types.Right', V176} end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 2 -> begin (V177 = ('un--build'(V5, V4, V3, V26, V2, V8))), case V177 of {'Idris.Prelude.Types.Left', E75} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V179) -> case V179 of [] -> ('un--install'(V5, V3, V26, V2, 1, V8)); _ -> begin (V207 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V182, V183, V184)) end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> V186 end end end, fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> begin (V193 = (V190(V192))), begin (V194 = (V191(V192))), (V193(V194)) end end end end end end end}, fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> begin (V200 = (V197(V199))), ((V198(V200))(V199)) end end end end end end, fun (V201) -> fun (V202) -> fun (V203) -> begin (V204 = (V202(V203))), (V204(V203)) end end end end}, fun (V205) -> fun (V206) -> V206 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V8))), {'Idris.Prelude.Types.Right', V207} end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 4 -> begin (V208 = ('un--check'(V5, V4, V3, V26, V2, V8))), case V208 of {'Idris.Prelude.Types.Left', E77} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V210) -> case V210 of [] -> {'Idris.Prelude.Types.Right', 0}; _ -> begin (V238 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V213, V214, V215)) end end end end end, fun (V216) -> fun (V217) -> fun (V218) -> V217 end end end, fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> begin (V224 = (V221(V223))), begin (V225 = (V222(V223))), (V224(V225)) end end end end end end end}, fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> begin (V231 = (V228(V230))), ((V229(V231))(V230)) end end end end end end, fun (V232) -> fun (V233) -> fun (V234) -> begin (V235 = (V233(V234))), (V235(V234)) end end end end}, fun (V236) -> fun (V237) -> V237 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V8))), {'Idris.Prelude.Types.Right', V238} end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 5 -> ('un--clean'(V5, V3, V26, V2, V8)); 6 -> begin (V239 = ('un--build'(V5, V4, V3, V26, V2, V8))), case V239 of {'Idris.Prelude.Types.Left', E79} -> (fun (V240) -> {'Idris.Prelude.Types.Left', V240} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V241) -> case V241 of [] -> ('un--runRepl'(V5, V4, V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'(fun (V242) -> ('Idris.Idris2.Builtin':'un--snd'(V242)) end, case V26 of {'Idris.Idris.Package.Types.MkPkgDesc', E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105} -> (fun (V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267) -> V255 end(E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V8)); _ -> begin (V295 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V270, V271, V272)) end end end end end, fun (V273) -> fun (V274) -> fun (V275) -> V274 end end end, fun (V276) -> fun (V277) -> fun (V278) -> fun (V279) -> fun (V280) -> begin (V281 = (V278(V280))), begin (V282 = (V279(V280))), (V281(V282)) end end end end end end end}, fun (V283) -> fun (V284) -> fun (V285) -> fun (V286) -> fun (V287) -> begin (V288 = (V285(V287))), ((V286(V288))(V287)) end end end end end end, fun (V289) -> fun (V290) -> fun (V291) -> begin (V292 = (V290(V291))), (V292(V291)) end end end end}, fun (V293) -> fun (V294) -> V294 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V8))), {'Idris.Prelude.Types.Right', V295} end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 7 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); {'Idris.Prelude.Types.Left', E106} -> (fun (V296) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V296, V8)) end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V325 = begin (V324 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V297) -> fun (V298) -> fun (V299) -> fun (V300) -> fun (V301) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V299, V300, V301)) end end end end end, fun (V302) -> fun (V303) -> fun (V304) -> V303 end end end, fun (V305) -> fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> begin (V310 = (V307(V309))), begin (V311 = (V308(V309))), (V310(V311)) end end end end end end end}, fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> fun (V316) -> begin (V317 = (V314(V316))), ((V315(V317))(V316)) end end end end end end, fun (V318) -> fun (V319) -> fun (V320) -> begin (V321 = (V319(V320))), (V321(V320)) end end end end}, fun (V322) -> fun (V323) -> V323 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Packages must have an \x{27}.ipkg\x{27} extension: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1)), <<"."/utf8>>))))))(V8))), {'Idris.Prelude.Types.Right', V324} end), case V325 of {'Idris.Prelude.Types.Left', E3} -> (fun (V326) -> {'Idris.Prelude.Types.Left', V326} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V327) -> begin (V355 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V328) -> fun (V329) -> fun (V330) -> fun (V331) -> fun (V332) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V330, V331, V332)) end end end end end, fun (V333) -> fun (V334) -> fun (V335) -> V334 end end end, fun (V336) -> fun (V337) -> fun (V338) -> fun (V339) -> fun (V340) -> begin (V341 = (V338(V340))), begin (V342 = (V339(V340))), (V341(V342)) end end end end end end end}, fun (V343) -> fun (V344) -> fun (V345) -> fun (V346) -> fun (V347) -> begin (V348 = (V345(V347))), ((V346(V348))(V347)) end end end end end end, fun (V349) -> fun (V350) -> fun (V351) -> begin (V352 = (V350(V351))), (V352(V351)) end end end end}, fun (V353) -> fun (V354) -> V354 end end}, {'Idris.Erlang.System.ExitFailure', 1, 0}))(V8))), {'Idris.Prelude.Types.Right', V355} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Tried to split empty string"/utf8>>}, V8)) end end end(E0)); _ -> fun (V356) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Tried to split empty string"/utf8>>}, V356)) end end.
'case--installSrcFrom-6283'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Data.List':'un--reverse'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Data.List':'un--tail\x{27}'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V0))))))))), begin (V10 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V9))), begin (V11 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V10))), begin (V12 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V5, V8))))), fun (V13) -> begin (V15 = begin (V14 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V10, V13))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E1} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V17) -> case V17 of {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> begin (V47 = begin (V46 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> V25 end end end, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), begin (V33 = (V30(V31))), (V32(V33)) end end end end end end end}, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V36(V38))), ((V37(V39))(V38)) end end end end end end, fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V41(V42))), (V43(V42)) end end end end}, fun (V44) -> fun (V45) -> V45 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Installing "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V11))))))))(V13))), {'Idris.Prelude.Types.Right', V46} end), case V47 of {'Idris.Prelude.Types.Left', E4} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V49) -> begin (V87 = begin (V51 = begin (V50 = ('Idris.Idris2.Compiler.Common':'un--exists'(V12, V13))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E6} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V53) -> case V53 of 1 -> begin (V82 = begin (V81 = (('Idris.Idris2.Erlang.System.File':'un--chmod'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V56, V57, V58)) end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> V60 end end end, fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V64(V66))), begin (V68 = (V65(V66))), (V67(V68)) end end end end end end end}, fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V71(V73))), ((V72(V74))(V73)) end end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> begin (V78 = (V76(V77))), (V78(V77)) end end end end}, fun (V79) -> fun (V80) -> V80 end end}, V12, {'Idris.Erlang.System.File.MkPermissions', [0 | [1 | []]], [0 | [1 | []]], [0 | [1 | []]]}))(V13))), {'Idris.Prelude.Types.Right', V81} end), case V82 of {'Idris.Prelude.Types.Left', E8} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V84) -> case V84 of {'Idris.Prelude.Types.Right', E10} -> (fun (V85) -> {'Idris.Prelude.Types.Right', 0} end(E10)); {'Idris.Prelude.Types.Left', E11} -> (fun (V86) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.UserError', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V86))}, V13)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V87 of {'Idris.Prelude.Types.Left', E12} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V89) -> begin (V91 = begin (V90 = ('un--copyFile'(V6, V12, V13))), {'Idris.Prelude.Types.Right', V90} end), case V91 of {'Idris.Prelude.Types.Left', E14} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V93) -> case V93 of {'Idris.Prelude.Types.Right', E16} -> (fun (V94) -> begin (V123 = begin (V122 = (('Idris.Idris2.Erlang.System.File':'un--chmod'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V95) -> fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V97, V98, V99)) end end end end end, fun (V100) -> fun (V101) -> fun (V102) -> V101 end end end, fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> begin (V108 = (V105(V107))), begin (V109 = (V106(V107))), (V108(V109)) end end end end end end end}, fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> begin (V115 = (V112(V114))), ((V113(V115))(V114)) end end end end end end, fun (V116) -> fun (V117) -> fun (V118) -> begin (V119 = (V117(V118))), (V119(V118)) end end end end}, fun (V120) -> fun (V121) -> V121 end end}, V12, {'Idris.Erlang.System.File.MkPermissions', [0 | []], [0 | []], [0 | []]}))(V13))), {'Idris.Prelude.Types.Right', V122} end), case V123 of {'Idris.Prelude.Types.Left', E17} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V125) -> case V125 of {'Idris.Prelude.Types.Right', E19} -> (fun (V126) -> {'Idris.Prelude.Types.Right', 0} end(E19)); {'Idris.Prelude.Types.Left', E20} -> (fun (V127) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.UserError', ('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V127))}, V13)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); {'Idris.Prelude.Types.Left', E21} -> (fun (V128) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t copy file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V11)))))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V128)) | []]]))}, V13)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Prelude.Types.Left', E22} -> (fun (V129) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directories "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V130) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V130)) end, fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V131, V132)) end end}, V9)))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V129)) | []]]))}, V13)) end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end(E0)); _ -> fun (V133) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unexpected failure when installing source file:\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, <<"Can\x{27}t extract file extension."/utf8>>))))))}, V133)) end end.
'nested--16587-7138--in--un--visible'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V36 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V6, case V5 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V8 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V36 of {'Idris.Prelude.Types.Left', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E30} -> (fun (V39) -> {'Idris.Prelude.Types.Right', case V39 of {'Idris.Core.Context.MkGlobalDef', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60) -> case V57 of {'Idris.Core.Context.DCon', E73, E74, E75} -> (fun (V61, V62, V63) -> 0 end(E73, E74, E75)); _ -> ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V39 of {'Idris.Core.Context.MkGlobalDef', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84) -> V73 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0)) end end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E30)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--14493-5279--in--un--toSource'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> begin (V9 = ('Idris.Idris2.Core.Directory':'un--nsToSource'(V4, V7, V8, V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, V11}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12069-2943--in--un--strField'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V4) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(V2)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', ((V1({'Idris.Core.FC.MkFC', {'Idris.Core.FC.PhysicalPkgSrc', V0}, V3, V6}))(V5))} end} end end} end} end} end}.
'nested--19382-9636--in--un--pOptUpdate'(V0, V1, V2) -> ('with--partitionOpts,pOptUpdate-9660'(V0, V1, ('nested--19382-9635--in--un--optType'(V0, V1)), V2)).
'nested--19382-9635--in--un--optType'(V0, V1) -> case V1 of {'Idris.Idris.CommandLine.Package', E0, E1} -> (fun (V2, V3) -> {'Idris.Idris.Package.nested--19382-9631--in--un--PPackage', V0, V2, V3} end(E0, E1)); {'Idris.Idris.CommandLine.Quiet'} -> (fun () -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.Verbose'} -> (fun () -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.Timing'} -> (fun () -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.Logging', E2} -> (fun (V4) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E2)); {'Idris.Idris.CommandLine.DumpCases', E3} -> (fun (V5) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E3)); {'Idris.Idris.CommandLine.DumpLifted', E4} -> (fun (V6) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E4)); {'Idris.Idris.CommandLine.DumpVMCode', E5} -> (fun (V7) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E5)); {'Idris.Idris.CommandLine.DebugElabCheck'} -> (fun () -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.SetCG', E6} -> (fun (V8) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E6)); {'Idris.Idris.CommandLine.Directive', E7} -> (fun (V9) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E7)); {'Idris.Idris.CommandLine.BuildDir', E8} -> (fun (V10) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E8)); {'Idris.Idris.CommandLine.OutputDir', E9} -> (fun (V11) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E9)); {'Idris.Idris.CommandLine.WarningsAsErrors'} -> (fun () -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.ChangedModules', E10} -> (fun (V12) -> {'Idris.Idris.Package.nested--19382-9632--in--un--POpt', V0} end(E10)); {'Idris.Idris.CommandLine.ConsoleWidth', E11} -> (fun (V13) -> {'Idris.Idris.Package.nested--19382-9633--in--un--PIgnore', V0} end(E11)); {'Idris.Idris.CommandLine.Color', E12} -> (fun (V14) -> {'Idris.Idris.Package.nested--19382-9633--in--un--PIgnore', V0} end(E12)); {'Idris.Idris.CommandLine.NoBanner'} -> (fun () -> {'Idris.Idris.Package.nested--19382-9633--in--un--PIgnore', V0} end()); _ -> {'Idris.Idris.Package.nested--19382-9634--in--un--PErr', V0} end.
'nested--12069-2941--in--un--mkBound'(V0, V1, V2) -> case V1 of [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Idris.Package.nested--12069-2938--in--un--LT', E2, E3, E4} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('nested--12069-2941--in--un--mkBound'(V0, V4, case V2 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E5, E6, E7, E8} -> (fun (V8, V9, V10, V11) -> {'Idris.Idris.Package.Types.MkPkgVersionBounds', V8, V9, {'Idris.Prelude.Types.Just', V6}, V7} end(E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Dependency already has an upper bound"/utf8>>} end end, case V2 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E9, E10, E11, E12} -> (fun (V13, V14, V15, V16) -> V15 end(E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E2, E3, E4)); {'Idris.Idris.Package.nested--12069-2939--in--un--GT', E13, E14, E15} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('nested--12069-2941--in--un--mkBound'(V0, V4, case V2 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E16, E17, E18, E19} -> (fun (V20, V21, V22, V23) -> {'Idris.Idris.Package.Types.MkPkgVersionBounds', {'Idris.Prelude.Types.Just', V18}, V19, V22, V23} end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V24) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 0, <<"Dependency already has a lower bound"/utf8>>} end end, case V2 of {'Idris.Idris.Package.Types.MkPkgVersionBounds', E20, E21, E22, E23} -> (fun (V25, V26, V27, V28) -> V25 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); [] -> {'Idris.Libraries.Text.Parser.Core.Empty', V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--19721-9947--in--un--loadDependencies'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V6) -> fun (V7) -> ('Idris.Idris2.Core.Context':'un--addPkg'(V3, case V6 of {'Idris.Idris.Package.Types.MkDepends', E0, E1} -> (fun (V8, V9) -> V8 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7)) end end, V4, V5)).
'nested--16587-7139--in--un--inNS'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Core.Name.UN', E2} -> (fun (V9) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_Namespace'(V5, V7)) end(E2)); _ -> 0 end end(E0, E1)); _ -> 0 end.
'nested--17536-7979--in--un--go'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.These':'un--bifold'(V0, V8))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V9) -> ('un--bitraverseC'((V1(V3)), fun (V10) -> ('Idris.Idris2.Core.Core':'un--foldlC'({'Idris.Prelude.Interfaces.MkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V22)) end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V26, V27, V28, V29)) end end end end end end end, fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V31)) end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V34, V35, V36)) end end end end end}, fun (V37) -> fun (V38) -> case V38 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V39, V40) -> begin (V41 = ('Idris.Idris2.Prelude.Types.List':'un--++'(V3, [V39 | []]))), fun (V42) -> begin (V43 = ('nested--17536-7979--in--un--go'(V0, V1, V2, V41, V40, V42))), case V43 of {'Idris.Prelude.Types.Left', E4} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V45) -> begin (V46 = ((V2(V41))(V42))), case V46 of {'Idris.Prelude.Types.Left', E6} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V48) -> {'Idris.Prelude.Types.Right', case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E8, E9} -> (fun (V49, V50) -> ((V49(case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E10, E11} -> (fun (V51, V52) -> ((V51(V37))(V45)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V48)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V0 of {'Idris.Prelude.Interfaces.MkMonoid', E12, E13} -> (fun (V53, V54) -> V54 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Data.StringMap':'un--toList'(V10)))) end, V4, V9)) end, V5)).
'nested--14493-5280--in--un--go'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of [] -> {'Idris.Prelude.Types.Right', V8}; [E0 | E1] -> (fun (V10, V11) -> begin (V12 = ('un--addField'(V4, V3, V2, V5, V6, V10, V8, V9))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> ('nested--14493-5280--in--un--go'(V0, V1, V2, V3, V4, V5, V6, V11, V14, V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--16587-7140--in--un--fileError'(V0, V1, V2, V3, V4, V5, V6, V7) -> {'Idris.Prelude.Types.Right', [{'Idris.Core.Core.FileErr', V5, V6} | []]}.
'nested--12069-2942--in--un--depends'(V0) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'(1, ('Idris.Idris2.Parser.Rule.Package':'un--andop'()), ('nested--12069-2940--in--un--bound'(V0)))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('nested--12069-2941--in--un--mkBound'(V0, ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V14)) end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V18, V19, V20, V21)) end end end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V23)) end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V26, V27, V28)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V29, V30)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V2)), ('Idris.Idris2.Idris.Package.Types':'un--anyBounds'()))), fun (V31) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.Types.MkDepends', V1, V31}} end} end} end end}.
'nested--17637-8075--in--un--deleteFolder'(V0, V1, V2, V3, V4, V5, V6) -> ('nested--17637-8074--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V5)))), V6)).
'nested--17637-8076--in--un--deleteBin'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V5)), V6))))), fun (V8) -> begin (V9 = ('nested--17637-8074--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V7, <<"ttc"/utf8>>)), V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> ('nested--17637-8074--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V7, <<"ttm"/utf8>>)), V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--17637-8074--in--un--delete'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--removeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Right', E2} -> (fun (V37) -> case V37 of 0 -> begin (V65 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Removed: "/utf8>>, V4))))(V5))), {'Idris.Prelude.Types.Right', V65} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V66) -> {'Idris.Prelude.Types.Right', 0} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--12069-2940--in--un--bound'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--lte'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--12069-2938--in--un--LT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V4, V5)) end end end end, fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V6)) end, V1)), 1} | []]} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--gte'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--12069-2939--in--un--GT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V10, V11)) end end end end, fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V12)) end, V7)), 1} | []]} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--lt'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--12069-2938--in--un--LT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V16, V17)) end end end end, fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V18)) end, V13)), 0} | []]} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--gt'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--12069-2939--in--un--GT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V22, V23)) end end end end, fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V24)) end, V19)), 0} | []]} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--eqop'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V25) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--12069-2938--in--un--LT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V28, V29)) end end end end, fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V30)) end, V25)), 1} | [{'Idris.Idris.Package.nested--12069-2939--in--un--GT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V33, V34)) end end end end, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V35)) end, V25)), 1} | []]]} end end} end} end} end} end} end}.
'un--runScript'(V0, V1) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case V2 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V3, V4) -> begin (V33 = begin (V32 = (('Idris.Idris2.Erlang.System':'un--system'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V7, V8, V9)) end end end end end, fun (V10) -> fun (V11) -> fun (V12) -> V11 end end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> begin (V18 = (V15(V17))), begin (V19 = (V16(V17))), (V18(V19)) end end end end end end end}, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), ((V23(V25))(V24)) end end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V27(V28))), (V29(V28)) end end end end}, fun (V30) -> fun (V31) -> V31 end end}, V4))(V1))), {'Idris.Prelude.Types.Right', V32} end), case V33 of {'Idris.Prelude.Types.Left', E3} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V35) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V35, 0)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V3, <<"Script failed"/utf8>>}, V1)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--runRepl'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V14 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.Virtual', 0}} end end, fun () -> fun (V9) -> fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V9, V10))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.PhysicalIdrSrc', V13}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, V3))(V4))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'(V16)), V4))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V24 = case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V0, V7, V1, V19, V2, V20, V4))), case V21 of {'Idris.Prelude.Types.Left', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V23) -> ('Idris.Idris2.Idris.REPL':'un--displayErrors'(V0, V7, V1, V19, V2, V23, V4)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V24 of {'Idris.Prelude.Types.Left', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V26) -> ('Idris.Idris2.Idris.REPL':'un--repl'(V0, V7, V1, V19, V2, V4)) end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processPackageOpts'(V0, V1, V2, V3, V4) -> begin (V5 = {'Idris.Prelude.Types.Right', ('un--partitionOpts'(V3))}), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Idris.Package.MkPFR', E2, E3, E4} -> (fun (V8, V9, V10) -> case V8 of [E5 | E6] -> (fun (V11, V12) -> begin (V44 = begin (V13 = [V11 | V12]), case V10 of 1 -> begin (V41 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--errorMsg'()), <<"\x{a}"/utf8>>))))(V4))), {'Idris.Prelude.Types.Right', V41} end; 0 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V42) -> fun (V43) -> ('un--processPackage'(V0, V1, V2, V9, V42, V43)) end end, V13, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V44 of {'Idris.Prelude.Types.Left', E7} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V46) -> {'Idris.Prelude.Types.Right', 1} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); [] -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processPackage'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> ('Idris.Idris2.Core.Context':'un--withCtxt'(V0, fun (V8) -> ('Idris.Idris2.Idris.Syntax':'un--withSyn'(V1, fun (V9) -> ('Idris.Idris2.Idris.REPL.Opts':'un--withROpts'(V2, case V6 of 7 -> fun (V10) -> begin (V12 = begin (V11 = ('Idris.Idris2.Idris.Package.Init':'un--interactive'(V10))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V40 = case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V7, <<""/utf8>>)) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case V14 of {'Idris.Idris.Package.Types.MkPkgDesc', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V15 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<".ipkg"/utf8>>)); 0 -> V7; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V42 = begin (V41 = ('Idris.Idris2.Compiler.Common':'un--exists'(V40, V10))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E29} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V44) -> case V44 of 0 -> begin (V73 = begin (V72 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> V51 end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), begin (V59 = (V56(V57))), (V58(V59)) end end end end end end end}, fun (V60) -> fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V62(V64))), ((V63(V65))(V64)) end end end end end end, fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V67(V68))), (V69(V68)) end end end end}, fun (V70) -> fun (V71) -> V71 end end}, V40, ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'dn--un--show_Show_(Doc $ann)'(('Idris.Idris2.Idris.Package.Types':'dn--un--pretty_Pretty_PkgDesc'(V14))))))(V10))), {'Idris.Prelude.Types.Right', V72} end), case V73 of {'Idris.Prelude.Types.Left', E31} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V75) -> case V75 of {'Idris.Prelude.Types.Right', E33} -> (fun (V76) -> case V76 of 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33)); {'Idris.Prelude.Types.Left', E34} -> (fun (V77) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.FileErr', V40, V77}, V10)) end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.FC':'un--emptyFC'()), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"File "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V40, <<" already exists"/utf8>>))))}, V10)) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('case--case block in processPackage-8787'(V6, V7, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--splitParent'(V7)))) end, V9)) end, V8)) end, V5)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processOptions'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', 0} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> fun (V5) -> case V4 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V6, V7) -> case ('Idris.Idris2.Idris.CommandLine':'un--getOpts'(('Idris.Idris2.Data.String':'un--words'(V7)))) of {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V9) -> case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> {'Idris.Prelude.Types.Right', 0} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V0, V1, V8)), V5)) end(E3)); {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V6, V12}, V5)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prepareCompilation'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V35 = (('un--processOptions'(V0, V2, case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V25 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V35 of {'Idris.Prelude.Types.Left', E27} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V37) -> begin (V38 = ('un--addDeps'(V0, V3, V5))), case V38 of {'Idris.Prelude.Types.Left', E29} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V40) -> begin (V44 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E31} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Right', 0} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V0, V2, V4)), V5))), case V44 of {'Idris.Prelude.Types.Left', E33} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V46) -> begin (V72 = ('un--runScript'(case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V66 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V72 of {'Idris.Prelude.Types.Left', E60} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V74) -> begin (V153 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V75) -> ('Idris.Idris2.Builtin':'un--snd'(V75)) end, case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V87 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V101) -> [('Idris.Idris2.Builtin':'un--snd'(V101)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V102) -> ('Idris.Idris2.Builtin':'un--snd'(V102)) end, case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V114 end(E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))] end end, case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> V140 end(E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V154 = ('Idris.Idris2.Idris.ModTree':'un--getAllBuildMods'(V0, V1, V2, V153, V5))), case V154 of {'Idris.Prelude.Types.Left', E137} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V156) -> begin (V157 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V5))), case V157 of {'Idris.Prelude.Types.Left', E139} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V159) -> case V159 of {'Idris.Core.Options.MkSessionOpts', E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159} -> (fun (V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178) -> case V166 of {'Idris.Prelude.Types.Just', E160} -> (fun (V179) -> begin (V180 = ('un--filterChangedModules'(('Idris.Idris2.Data.List1':'un--forget'(V179)), V156))), begin (V181 = ('Idris.Idris2.Idris.ModTree':'un--buildAll'(V0, V1, V2, V180, V5))), case V181 of {'Idris.Prelude.Types.Left', E161} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E161)); {'Idris.Prelude.Types.Right', E162} -> (fun (V183) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V183, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V184) -> case V184 of {'Idris.Idris.ModTree.MkBuildMod', E163, E164, E165} -> (fun (V185, V186, V187) -> V186 end(E163, E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V180))}}} end(E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E160)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V188 = ('Idris.Idris2.Idris.ModTree':'un--buildAll'(V0, V1, V2, V156, V5))), case V188 of {'Idris.Prelude.Types.Left', E166} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V190) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V190, {'Idris.Prelude.Types.Nothing'}}} end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--partitionOpts'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(fun (V1) -> fun (V2) -> ('nested--19382-9636--in--un--pOptUpdate'(V0, V1, V2)) end end, {'Idris.Idris.Package.MkPFR', [], [], 0}, V0)).
'un--parsePkgFile'(V0, V1, V2, V3, V4) -> begin (V7 = begin (V6 = ('Idris.Idris2.Parser.Package':'un--parseFile'(V3, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--parsePkgDesc'(V3)), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--eoi'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V5} end} end end}, V4))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V11, V12) -> ('un--addFields'(V0, V1, V2, V12, ('Idris.Idris2.Idris.Package.Types':'un--initPkgDesc'(V11)), V4)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V13, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--parsePkgDesc'(V0) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V1) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"package"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()), fun () -> fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--many'(('un--field'(V0)))), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V2, V3}} end} end end} end}.
'un--makeDoc'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--prepareCompilation'(V0, V1, V2, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V9 of [] -> begin (V12 = begin (V11 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V62 = case V14 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42) -> case V19 of {'Idris.Core.Options.MkOptions', E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51) -> case V43 of {'Idris.Core.Options.MkDirs', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V54 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V63 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V62, <<"docs"/utf8>>))), begin (V64 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V63, <<"docs"/utf8>>))), begin (V66 = begin (V65 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V64, V5))), {'Idris.Prelude.Types.Right', V65} end), case V66 of {'Idris.Prelude.Types.Left', E53} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V68) -> case V68 of {'Idris.Prelude.Types.Right', E55} -> (fun (V69) -> case V69 of 0 -> begin (V70 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V5))), case V70 of {'Idris.Prelude.Types.Left', E56} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V72) -> begin (V73 = ('Idris.Idris2.Core.Context':'un--setPPrint'(V0, {'Idris.Core.Options.MkPPOpts', 0, 0, 1}, V5))), case V73 of {'Idris.Prelude.Types.Left', E58} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V75) -> begin (V255 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V76) -> case V76 of {'Idris.Prelude.Types.Left', E60} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V78) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V81, V82, V83)) end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V90)) end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V94, V95, V96, V97)) end end end end end end end, fun (V98) -> fun (V99) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V99)) end end, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V102, V103, V104)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V105) -> fun (V106) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'(V105, V106)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'())}}, V78))} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V107) -> fun (V108) -> fun (V109) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V107, V108, [], V109)) end end end, case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134) -> V121 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V135) -> case V135 of {'Idris.Builtin.MkPair', E87, E88} -> (fun (V136, V137) -> begin (V138 = ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V136))), fun (V139) -> begin (V140 = ('Idris.Idris2.Idris.ProcessIdr':'un--addImport'(V0, V72, V1, {'Idris.Idris.Syntax.MkImport', ('Idris.Idris2.Core.FC':'un--emptyFC'()), 0, V136, V138}, V139))), case V140 of {'Idris.Prelude.Types.Left', E89} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V142) -> begin (V144 = begin (V143 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V143} end), case V144 of {'Idris.Prelude.Types.Left', E91} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V146) -> begin (V175 = ('Idris.Idris2.Core.Context':'un--allNames'(case V146 of {'Idris.Core.Context.MkDefs', E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120} -> (fun (V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174) -> V147 end(E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V139))), case V175 of {'Idris.Prelude.Types.Left', E121} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V177) -> begin (V179 = ('Idris.Idris2.Data.List':'un--filter'(fun (V178) -> ('nested--16587-7139--in--un--inNS'(V4, V3, V2, V1, V0, V138, V178)) end, V177))), begin (V182 = ('Idris.Idris2.Core.Core':'un--filterM'(fun (V180) -> fun (V181) -> ('nested--16587-7138--in--un--visible'(V4, V3, V2, V1, V0, V146, V180, V181)) end end, V179, V139))), case V182 of {'Idris.Prelude.Types.Left', E123} -> (fun (V183) -> {'Idris.Prelude.Types.Left', V183} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V184) -> begin (V185 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V64, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'dn--un--show_Show_ModuleIdent'(V136)), <<".html"/utf8>>))))), begin (V216 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V186) -> case V186 of {'Idris.Prelude.Types.Left', E125} -> (fun (V187) -> {'Idris.Prelude.Types.Left', V187} end(E125)); {'Idris.Prelude.Types.Right', E126} -> (fun (V188) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--annotate'({'Idris.Idris.Doc.String.Declarations'}, V188))} end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V189) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V190) -> case V190 of {'Idris.Prelude.Types.Left', E127} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V192) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Libraries.Text.PrettyPrint.Prettyprinter.Doc':'un--vcat'(V192))} end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V193) -> fun (V194) -> fun (V195) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(V193, V194, [], V195)) end end end, ('Idris.Idris2.Data.List':'un--sort'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V196) -> fun (V197) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V196, V197)) end end, fun (V198) -> fun (V199) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V198, V199)) end end}, fun (V200) -> fun (V201) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V200, V201)) end end, fun (V202) -> fun (V203) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V202, V203)) end end, fun (V204) -> fun (V205) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V204, V205)) end end, fun (V206) -> fun (V207) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V206, V207)) end end, fun (V208) -> fun (V209) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V208, V209)) end end, fun (V210) -> fun (V211) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V210, V211)) end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V212, V213)) end end}, V184)), fun (V214) -> fun (V215) -> ('Idris.Idris2.Idris.Doc.String':'un--getDocsForName'(V2, V0, V1, ('Idris.Idris2.Core.FC':'un--emptyFC'()), V214, V215)) end end)), V189)) end, V139))), case V216 of {'Idris.Prelude.Types.Left', E129} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V218) -> begin (V250 = begin (V219 = ('Idris.Idris2.Idris.Doc.HTML':'un--renderModuleDoc'(V0, V136, V218, V139))), case V219 of {'Idris.Prelude.Types.Left', E131} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V221) -> begin (V249 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V224, V225, V226)) end end end end end, fun (V227) -> fun (V228) -> fun (V229) -> V228 end end end, fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> begin (V235 = (V232(V234))), begin (V236 = (V233(V234))), (V235(V236)) end end end end end end end}, fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> fun (V241) -> begin (V242 = (V239(V241))), ((V240(V242))(V241)) end end end end end end, fun (V243) -> fun (V244) -> fun (V245) -> begin (V246 = (V244(V245))), (V246(V245)) end end end end}, fun (V247) -> fun (V248) -> V248 end end}, V185, V221))(V139))), {'Idris.Prelude.Types.Right', V249} end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V250 of {'Idris.Prelude.Types.Left', E133} -> (fun (V251) -> {'Idris.Prelude.Types.Left', V251} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V252) -> case V252 of {'Idris.Prelude.Types.Right', E135} -> (fun (V253) -> case V253 of 0 -> {'Idris.Prelude.Types.Right', []}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E135)); {'Idris.Prelude.Types.Left', E136} -> (fun (V254) -> ('nested--16587-7140--in--un--fileError'(V4, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V63, <<"index.html"/utf8>>)), V254, V139)) end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)), V5))), case V255 of {'Idris.Prelude.Types.Left', E137} -> (fun (V256) -> {'Idris.Prelude.Types.Left', V256} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V257) -> case V257 of [] -> begin (V286 = begin (V285 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V260, V261, V262)) end end end end end, fun (V263) -> fun (V264) -> fun (V265) -> V264 end end end, fun (V266) -> fun (V267) -> fun (V268) -> fun (V269) -> fun (V270) -> begin (V271 = (V268(V270))), begin (V272 = (V269(V270))), (V271(V272)) end end end end end end end}, fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> fun (V277) -> begin (V278 = (V275(V277))), ((V276(V278))(V277)) end end end end end end, fun (V279) -> fun (V280) -> fun (V281) -> begin (V282 = (V280(V281))), (V282(V281)) end end end end}, fun (V283) -> fun (V284) -> V284 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V63, <<"index.html"/utf8>>)), ('Idris.Idris2.Idris.Doc.HTML':'un--renderDocIndex'(V3))))(V5))), {'Idris.Prelude.Types.Right', V285} end), case V286 of {'Idris.Prelude.Types.Left', E139} -> (fun (V287) -> {'Idris.Prelude.Types.Left', V287} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V288) -> case V288 of {'Idris.Prelude.Types.Right', E141} -> (fun (V289) -> case V289 of 0 -> begin (V290 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, <<"docs/styles.css"/utf8>>, V5))), case V290 of {'Idris.Prelude.Types.Left', E142} -> (fun (V291) -> {'Idris.Prelude.Types.Left', V291} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V292) -> begin (V321 = begin (V320 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V295, V296, V297)) end end end end end, fun (V298) -> fun (V299) -> fun (V300) -> V299 end end end, fun (V301) -> fun (V302) -> fun (V303) -> fun (V304) -> fun (V305) -> begin (V306 = (V303(V305))), begin (V307 = (V304(V305))), (V306(V307)) end end end end end end end}, fun (V308) -> fun (V309) -> fun (V310) -> fun (V311) -> fun (V312) -> begin (V313 = (V310(V312))), ((V311(V313))(V312)) end end end end end end, fun (V314) -> fun (V315) -> fun (V316) -> begin (V317 = (V315(V316))), (V317(V316)) end end end end}, fun (V318) -> fun (V319) -> V319 end end}, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V63, <<"styles.css"/utf8>>)), V292))(V5))), {'Idris.Prelude.Types.Right', V320} end), case V321 of {'Idris.Prelude.Types.Left', E144} -> (fun (V322) -> {'Idris.Prelude.Types.Left', V322} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V323) -> case V323 of {'Idris.Prelude.Types.Right', E146} -> (fun (V324) -> case V324 of 0 -> begin (V350 = ('un--runScript'(case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171} -> (fun (V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349) -> V345 end(E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V350 of {'Idris.Prelude.Types.Left', E172} -> (fun (V351) -> {'Idris.Prelude.Types.Left', V351} end(E172)); {'Idris.Prelude.Types.Right', E173} -> (fun (V352) -> {'Idris.Prelude.Types.Right', []} end(E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E146)); {'Idris.Prelude.Types.Left', E174} -> (fun (V353) -> ('nested--16587-7140--in--un--fileError'(V4, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V63, <<"styles.css"/utf8>>)), V353, V5)) end(E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E141)); {'Idris.Prelude.Types.Left', E175} -> (fun (V354) -> ('nested--16587-7140--in--un--fileError'(V4, V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V63, <<"index.html"/utf8>>)), V354, V5)) end(E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V257} end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55)); {'Idris.Prelude.Types.Left', E176} -> (fun (V355) -> ('nested--16587-7140--in--un--fileError'(V4, V3, V2, V1, V0, V64, V355, V5)) end(E176)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V9} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--installSrcFrom'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V4))), begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V1, V5))), ('case--installSrcFrom-6283'(V4, V5, V2, V1, V0, V6, V7, ('Idris.Idris2.Libraries.Utils.Path':'un--extension'(V7)))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--installFrom'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Name.Namespace.ModuleIdent':'un--toPath'(V3))), begin (V5 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V1, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(<<"ttc"/utf8>>, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V4, <<"ttc"/utf8>>))))))), begin (V6 = ('Idris.Idris2.Data.List':'un--reverse'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> [] end, ('Idris.Idris2.Data.List':'un--tail\x{27}'(('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V3))))))))), begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V6))), begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V7))), begin (V9 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V4, <<"ttc"/utf8>>))))), fun (V10) -> begin (V12 = begin (V11 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V7, V10))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> case V14 of {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> begin (V44 = begin (V43 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Installing "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V8))))))))(V10))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E3} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V46) -> begin (V48 = begin (V47 = ('un--copyFile'(V5, V9, V10))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E5} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V50) -> case V50 of {'Idris.Prelude.Types.Right', E7} -> (fun (V51) -> {'Idris.Prelude.Types.Right', 0} end(E7)); {'Idris.Prelude.Types.Left', E8} -> (fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t copy file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V8)))))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V52)) | []]]))}, V10)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E9} -> (fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directories "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V55, V56)) end end}, V6)))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V53)) | []]]))}, V10)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end end.
'un--installDir'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V1 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Idris.Package.Types':'dn--un--show_Show_PkgVersion'(('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> {'Idris.Data.List1.:::', 0, []} end, case V0 of {'Idris.Idris.Package.Types.MkPkgDesc', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V27 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))).
'un--install'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V57 = case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> case V14 of {'Idris.Core.Options.MkOptions', E30, E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46) -> case V38 of {'Idris.Core.Options.MkDirs', E39, E40, E41, E42, E43, E44, E45, E46, E47, E48} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V49 end(E39, E40, E41, E42, E43, E44, E45, E46, E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V83 = ('un--runScript'(case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73} -> (fun (V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82) -> V79 end(E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V83 of {'Idris.Prelude.Types.Left', E74} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V85) -> begin (V162 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100} -> (fun (V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110) -> V97 end(E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun () -> fun (V111) -> [V111 | case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136) -> V123 end(E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end] end end, case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150} -> (fun (V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161) -> V149 end(E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149, E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V191 = begin (V190 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V165, V166, V167)) end end end end end, fun (V168) -> fun (V169) -> fun (V170) -> V169 end end end, fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> begin (V176 = (V173(V175))), begin (V177 = (V174(V175))), (V176(V177)) end end end end end end end}, fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> begin (V183 = (V180(V182))), ((V181(V183))(V182)) end end end end end end, fun (V184) -> fun (V185) -> fun (V186) -> begin (V187 = (V185(V186))), (V187(V186)) end end end end}, fun (V188) -> fun (V189) -> V189 end end}))(V5))), {'Idris.Prelude.Types.Right', V190} end), case V191 of {'Idris.Prelude.Types.Left', E151} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V193) -> case V193 of {'Idris.Prelude.Types.Just', E153} -> (fun (V194) -> begin (V242 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V9 of {'Idris.Core.Context.MkDefs', E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181} -> (fun (V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222) -> case V199 of {'Idris.Core.Options.MkOptions', E182, E183, E184, E185, E186, E187, E188, E189, E190} -> (fun (V223, V224, V225, V226, V227, V228, V229, V230, V231) -> case V223 of {'Idris.Core.Options.MkDirs', E191, E192, E193, E194, E195, E196, E197, E198, E199, E200} -> (fun (V232, V233, V234, V235, V236, V237, V238, V239, V240, V241) -> V237 end(E191, E192, E193, E194, E195, E196, E197, E198, E199, E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E182, E183, E184, E185, E186, E187, E188, E189, E190)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Idris.Version':'un--showVersion'(0, ('Idris.Idris2.Idris.Version':'un--version'()))))), ('un--installDir'(V2))))))), begin (V244 = begin (V243 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V242, V5))), {'Idris.Prelude.Types.Right', V243} end), case V244 of {'Idris.Prelude.Types.Left', E201} -> (fun (V245) -> {'Idris.Prelude.Types.Left', V245} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V246) -> case V246 of {'Idris.Prelude.Types.Right', E203} -> (fun (V247) -> begin (V276 = begin (V275 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> fun (V252) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V250, V251, V252)) end end end end end, fun (V253) -> fun (V254) -> fun (V255) -> V254 end end end, fun (V256) -> fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> begin (V261 = (V258(V260))), begin (V262 = (V259(V260))), (V261(V262)) end end end end end end end}, fun (V263) -> fun (V264) -> fun (V265) -> fun (V266) -> fun (V267) -> begin (V268 = (V265(V267))), ((V266(V268))(V267)) end end end end end end, fun (V269) -> fun (V270) -> fun (V271) -> begin (V272 = (V270(V271))), (V272(V271)) end end end end}, fun (V273) -> fun (V274) -> V274 end end}, V242))(V5))), {'Idris.Prelude.Types.Right', V275} end), case V276 of {'Idris.Prelude.Types.Left', E204} -> (fun (V277) -> {'Idris.Prelude.Types.Left', V277} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V278) -> case V278 of 1 -> begin (V280 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V279) -> ('un--installFrom'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V194, V57)), V242, ('Idris.Idris2.Builtin':'un--fst'(V279)))) end, V162, V5))), case V280 of {'Idris.Prelude.Types.Left', E206} -> (fun (V281) -> {'Idris.Prelude.Types.Left', V281} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V282) -> begin (V284 = case V4 of 1 -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V283) -> ('un--installSrcFrom'(V0, V194, V242, V283)) end, V162, V5)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V284 of {'Idris.Prelude.Types.Left', E208} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V286) -> begin (V319 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V287) -> case V287 of {'Idris.Prelude.Types.Left', E210} -> (fun (V288) -> {'Idris.Prelude.Types.Left', V288} end(E210)); {'Idris.Prelude.Types.Right', E211} -> (fun (V289) -> {'Idris.Prelude.Types.Right', 0} end(E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V290) -> begin (V318 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V291) -> fun (V292) -> fun (V293) -> fun (V294) -> fun (V295) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V293, V294, V295)) end end end end end, fun (V296) -> fun (V297) -> fun (V298) -> V297 end end end, fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> begin (V304 = (V301(V303))), begin (V305 = (V302(V303))), (V304(V305)) end end end end end end end}, fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> fun (V310) -> begin (V311 = (V308(V310))), ((V309(V311))(V310)) end end end end end end, fun (V312) -> fun (V313) -> fun (V314) -> begin (V315 = (V313(V314))), (V315(V314)) end end end end}, fun (V316) -> fun (V317) -> V317 end end}, V194))(V290))), {'Idris.Prelude.Types.Right', V318} end end, V5))), case V319 of {'Idris.Prelude.Types.Left', E212} -> (fun (V320) -> {'Idris.Prelude.Types.Left', V320} end(E212)); {'Idris.Prelude.Types.Right', E213} -> (fun (V321) -> ('un--runScript'(case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238} -> (fun (V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346) -> V344 end(E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5)) end(E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, V242))}, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E203)); {'Idris.Prelude.Types.Left', E239} -> (fun (V347) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directory "/utf8>>, V242)) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V347)) | []]]))}, V5)) end(E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E153)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--foldWithKeysC'(V0, V1, V2, V3, V4) -> ('nested--17536-7979--in--un--go'(V0, V2, V1, [], V3, V4)).
'un--findIpkg'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('Idris.Idris2.Core.Directory':'un--findIpkgFile'(V4))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E2} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> begin (V46 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Right', 0} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V17) -> begin (V45 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> V24 end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), begin (V32 = (V29(V30))), (V31(V32)) end end end end end end end}, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V35(V37))), ((V36(V38))(V37)) end end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V40(V41))), (V42(V41)) end end end end}, fun (V43) -> fun (V44) -> V44 end end}, V10))(V17))), {'Idris.Prelude.Types.Right', V45} end end, V4))), case V46 of {'Idris.Prelude.Types.Left', E9} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V0, V10, V4))), case V49 of {'Idris.Prelude.Types.Left', E11} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V51) -> begin (V54 = begin (V53 = ('Idris.Idris2.Parser.Package':'un--parseFile'(V12, {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('un--parsePkgDesc'(V12)), fun () -> fun (V52) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--eoi'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V52} end} end end}, V4))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E13} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V56) -> case V56 of {'Idris.Prelude.Types.Right', E15} -> (fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V58, V59) -> begin (V60 = ('un--addFields'(V0, V2, V1, V59, ('Idris.Idris2.Idris.Package.Types':'un--initPkgDesc'(V58)), V4))), case V60 of {'Idris.Prelude.Types.Left', E18} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V62) -> begin (V91 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V63) -> {'Idris.Prelude.Types.Right', 0} end end, fun () -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V0, V64, V65)) end end end, case V62 of {'Idris.Idris.Package.Types.MkPkgDesc', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V83 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V91 of {'Idris.Prelude.Types.Left', E45} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V93) -> begin (V119 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V0, case V62 of {'Idris.Idris.Package.Types.MkPkgDesc', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V112 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V119 of {'Idris.Prelude.Types.Left', E72} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V121) -> begin (V147 = (('un--processOptions'(V0, V1, case V62 of {'Idris.Idris.Package.Types.MkPkgDesc', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98} -> (fun (V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146) -> V137 end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V147 of {'Idris.Prelude.Types.Left', E99} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V149) -> begin (V175 = ('nested--19721-9947--in--un--loadDependencies'(V3, V2, V1, V0, case V62 of {'Idris.Idris.Package.Types.MkPkgDesc', E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125} -> (fun (V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174) -> V160 end(E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V175 of {'Idris.Prelude.Types.Left', E126} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V177) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E128} -> (fun (V178) -> begin (V179 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V13, V178))), begin (V180 = ('Idris.Idris2.Idris.REPL.Opts':'un--setSource'(V1, V179, V4))), case V180 of {'Idris.Prelude.Types.Left', E129} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V182) -> begin (V184 = begin (V183 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V183} end), case V184 of {'Idris.Prelude.Types.Left', E131} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V186) -> begin (V204 = begin (V203 = ('erlang':'put'(V1, case V186 of {'Idris.Idris.REPL.Opts.MkREPLOpts', E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148} -> (fun (V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202) -> {'Idris.Idris.REPL.Opts.MkREPLOpts', V187, V188, {'Idris.Prelude.Types.Just', V179}, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202} end(E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V203} end), case V204 of {'Idris.Prelude.Types.Left', E149} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V206) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V179}} end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); {'Idris.Prelude.Types.Left', E151} -> (fun (V207) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'(V207, V4)) end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V3} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--filterChangedModules'(V0, V1) -> case ('Idris.Idris2.Data.List':'un--partition'(fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V5, V6)) end end}, case V2 of {'Idris.Idris.ModTree.MkBuildMod', E2, E3, E4} -> (fun (V7, V8, V9) -> V8 end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0)) end, V1)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> begin (V12 = ('Idris.Idris2.Idris.ModTree':'un--filterUsedByMods'(V0, V11))), ('Idris.Idris2.Prelude.Types.List':'un--++'(V10, V12)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--field'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V1) -> fun (V2) -> {'Idris.Idris.Package.PAuthors', V1, V2} end end, <<"authors"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V3) -> fun (V4) -> {'Idris.Idris.Package.PMaintainers', V3, V4} end end, <<"maintainers"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V5) -> fun (V6) -> {'Idris.Idris.Package.PLicense', V5, V6} end end, <<"license"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V7) -> fun (V8) -> {'Idris.Idris.Package.PBrief', V7, V8} end end, <<"brief"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V9) -> fun (V10) -> {'Idris.Idris.Package.PReadMe', V9, V10} end end, <<"readme"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V11) -> fun (V12) -> {'Idris.Idris.Package.PHomePage', V11, V12} end end, <<"homepage"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V13) -> fun (V14) -> {'Idris.Idris.Package.PSourceLoc', V13, V14} end end, <<"sourceloc"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V15) -> fun (V16) -> {'Idris.Idris.Package.PBugTracker', V15, V16} end end, <<"bugtracker"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V17) -> fun (V18) -> {'Idris.Idris.Package.POpts', V17, V18} end end, <<"options"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V19) -> fun (V20) -> {'Idris.Idris.Package.POpts', V19, V20} end end, <<"opts"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V21) -> fun (V22) -> {'Idris.Idris.Package.PSourceDir', V21, V22} end end, <<"sourcedir"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V23) -> fun (V24) -> {'Idris.Idris.Package.PBuildDir', V23, V24} end end, <<"builddir"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V25) -> fun (V26) -> {'Idris.Idris.Package.POutputDir', V25, V26} end end, <<"outputdir"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V27) -> fun (V28) -> {'Idris.Idris.Package.PPrebuild', V27, V28} end end, <<"prebuild"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V29) -> fun (V30) -> {'Idris.Idris.Package.PPostbuild', V29, V30} end end, <<"postbuild"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V31) -> fun (V32) -> {'Idris.Idris.Package.PPreinstall', V31, V32} end end, <<"preinstall"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V33) -> fun (V34) -> {'Idris.Idris.Package.PPostinstall', V33, V34} end end, <<"postinstall"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V35) -> fun (V36) -> {'Idris.Idris.Package.PPreclean', V35, V36} end end, <<"preclean"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('nested--12069-2943--in--un--strField'(V0, fun (V37) -> fun (V38) -> {'Idris.Idris.Package.PPostclean', V37, V38} end end, <<"postclean"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V39) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V40) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"version"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'(1, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V41) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V42) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PVersion', {'Idris.Core.FC.MkFC', {'Idris.Core.FC.PhysicalPkgSrc', V0}, V39, V42}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'(fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> ('Idris.Idris2.Data.List1':'dn--un--map_Functor_List1'(V45, V46)) end end end end, fun (V47) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V47)) end, V41))}} end} end end} end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V48) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V49) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"version"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> fun (V50) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V51) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PVersionDep', {'Idris.Core.FC.MkFC', {'Idris.Core.FC.PhysicalPkgSrc', V0}, V48, V51}, V50}} end} end end} end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V52) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"depends"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--sep'(('nested--12069-2942--in--un--depends'(V0)))), fun () -> fun (V53) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PDepends', V53}} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V54) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"modules"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--sep'({'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V55) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--moduleIdent'()), fun () -> fun (V56) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V57) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', {'Idris.Core.FC.MkFC', {'Idris.Core.FC.PhysicalPkgSrc', V0}, V55, V57}, V56}} end} end end} end})), fun () -> fun (V58) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PModules', V58}} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V59) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"main"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V60) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--moduleIdent'()), fun () -> fun (V61) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 0, 0, ('Idris.Idris2.Libraries.Text.Parser':'un--location'()), fun (V62) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PMainMod', {'Idris.Core.FC.MkFC', {'Idris.Core.FC.PhysicalPkgSrc', V0}, V60, V62}, V61}} end} end end} end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V63) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"executable"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()) end}, fun () -> fun (V64) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PExec', V64}} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_(((Grammar $state) $tok) $c)'(1, fun (V65) -> 0 end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"library"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, {'Idris.Libraries.Text.Parser.Core.Alt', 1, 1, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()) end}, fun () -> fun (V66) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PLibrary', V66}} end end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--errorMsg'() -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"Not all command line options can be used to override package options.\x{a}"/utf8>> | [<<"Overridable options are:"/utf8>> | [<<"    --quiet"/utf8>> | [<<"    --verbose"/utf8>> | [<<"    --console-width <console width>"/utf8>> | [<<"    --color, --colour"/utf8>> | [<<"    --no-color, --no-colour"/utf8>> | [<<"    --timing"/utf8>> | [<<"    --log <log level>"/utf8>> | [<<"    --dumpcases <file>"/utf8>> | [<<"    --dumplifted <file>"/utf8>> | [<<"    --dumpvmcode <file>"/utf8>> | [<<"    --debug-elab-check"/utf8>> | [<<"    --codegen <cg>"/utf8>> | [<<"    --directive <directive>"/utf8>> | [<<"    --build-dir <dir>"/utf8>> | [<<"    --output-dir <dir>"/utf8>> | [<<"    --changed-modules <namespaces>"/utf8>> | []]]]]]]]]]]]]]]]]]])).
'un--copyFile'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V0, V2))), case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> (('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V1, V4))(V2)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileMain'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Directory':'un--ctxtPathToNS'(V0, V4, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalIdrSrc', V9})), V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V6))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V20 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V16) -> case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Right', 0} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V19) -> ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V0, V15, V1, V12, V2, V4, V19)) end, V6))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V23) -> case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', 0} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V26) -> ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V15, V1, V12, V2, {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Core.FC':'un--replFC'()), V3}, V5, V26)) end, V6)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileLibHelper'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.PhysicalPkgSrc', V3})), V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'(fun () -> V4 end, V5))), begin (V14 = ('Idris.Idris2.Idris.ModTree':'un--loadModules'(V0, V1, V9, V12, V2, V3, V13, V6))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Right', 0} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V20) -> ('Idris.Idris2.Idris.REPL':'un--compileLib'(V0, V2, V3, V5, V20)) end, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clean'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V34 = ('un--runScript'(case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V32 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V34 of {'Idris.Prelude.Types.Left', E27} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V36) -> begin (V115 = ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V37) -> ('Idris.Idris2.Builtin':'un--fst'(V37)) end, case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V49 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V63) -> [('Idris.Idris2.Builtin':'un--fst'(V63)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V64) -> ('Idris.Idris2.Builtin':'un--fst'(V64)) end, case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V76 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))] end end, case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114) -> V102 end(E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V119 = ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V116) -> case ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V116)) of [] -> {'Idris.Prelude.Types.Nothing'}; [E104 | E105] -> (fun (V117, V118) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V118, V117}} end(E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V115))), begin (V148 = begin (V147 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V120) -> fun (V121) -> fun (V122) -> fun (V123) -> fun (V124) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V122, V123, V124)) end end end end end, fun (V125) -> fun (V126) -> fun (V127) -> V126 end end end, fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> begin (V133 = (V130(V132))), begin (V134 = (V131(V132))), (V133(V134)) end end end end end end end}, fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> begin (V140 = (V137(V139))), ((V138(V140))(V139)) end end end end end end, fun (V141) -> fun (V142) -> fun (V143) -> begin (V144 = (V142(V143))), (V144(V143)) end end end end}, fun (V145) -> fun (V146) -> V146 end end}))(V4))), {'Idris.Prelude.Types.Right', V147} end), case V148 of {'Idris.Prelude.Types.Left', E106} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V150) -> case V150 of {'Idris.Prelude.Types.Just', E108} -> (fun (V151) -> begin (V189 = case V8 of {'Idris.Core.Context.MkDefs', E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136} -> (fun (V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179) -> case V156 of {'Idris.Core.Options.MkOptions', E137, E138, E139, E140, E141, E142, E143, E144, E145} -> (fun (V180, V181, V182, V183, V184, V185, V186, V187, V188) -> V180 end(E137, E138, E139, E140, E141, E142, E143, E144, E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V200 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V151, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V189 of {'Idris.Core.Options.MkDirs', E146, E147, E148, E149, E150, E151, E152, E153, E154, E155} -> (fun (V190, V191, V192, V193, V194, V195, V196, V197, V198, V199) -> V192 end(E146, E147, E148, E149, E150, E151, E152, E153, E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"ttc"/utf8>>))))), begin (V201 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V151, ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V189))))), begin (V208 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(fun (V202) -> fun (V203) -> begin (V204 = ('Idris.Idris2.Builtin':'un--fst'(V203))), begin (V205 = ('Idris.Idris2.Builtin':'un--snd'(V203))), ('Idris.Idris2.Libraries.Data.StringTrie':'un--insertWith'(('Idris.Idris2.Data.List':'un--reverse'(V204)), fun (V206) -> ('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> [V205 | []] end, fun () -> fun (V207) -> [V205 | V207] end end, V206)) end, V202)) end end end end, ('Idris.Idris2.Libraries.Data.StringTrie':'un--empty'()), V119))), begin (V249 = ('un--foldWithKeysC'({'Idris.Prelude.Interfaces.MkMonoid', fun (V209) -> fun (V210) -> ('Idris.Idris2.Prelude.Interfaces':'dn--un--<+>_Semigroup_(|Unit,MkUnit|)'(V209, V210)) end end, ('Idris.Idris2.Prelude.Interfaces':'dn--un--neutral_Monoid_(|Unit,MkUnit|)'())}, fun (V211) -> fun (V212) -> ('nested--17637-8075--in--un--deleteFolder'(V3, V2, V1, V0, V200, V211, V212)) end end, fun (V213) -> fun (V214) -> fun (V215) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V216) -> case V216 of {'Idris.Prelude.Types.Left', E156} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E156)); {'Idris.Prelude.Types.Right', E157} -> (fun (V218) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V221, V222, V223)) end end end end end, fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V226, V227, V228)) end end end end end, fun (V229) -> fun (V230) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V230)) end end, fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V234, V235, V236, V237)) end end end end end end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V239)) end end, fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V242, V243, V244)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V245) -> fun (V246) -> ('Idris.Idris2.Prelude.Interfaces':'dn--un--<+>_Semigroup_(|Unit,MkUnit|)'(V245, V246)) end end, ('Idris.Idris2.Prelude.Interfaces':'dn--un--neutral_Monoid_(|Unit,MkUnit|)'())}}, V218))} end(E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V247) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V248) -> ('nested--17637-8076--in--un--deleteBin'(V3, V2, V1, V0, V200, V213, V248)) end, V214, [], V247)) end, V215)) end end end, V208, V4))), case V249 of {'Idris.Prelude.Types.Left', E158} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E158)); {'Idris.Prelude.Types.Right', E159} -> (fun (V251) -> begin (V252 = ('nested--17637-8075--in--un--deleteFolder'(V3, V2, V1, V0, V200, [], V4))), case V252 of {'Idris.Prelude.Types.Left', E160} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E160)); {'Idris.Prelude.Types.Right', E161} -> (fun (V254) -> begin (V283 = (('Idris.Idris2.Prelude.Types':'un--maybe'(fun () -> fun (V255) -> {'Idris.Prelude.Types.Right', 0} end end, fun () -> fun (V256) -> fun (V257) -> ('nested--17637-8074--in--un--delete'(V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V201, V256)), V257)) end end end, case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186} -> (fun (V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282) -> V271 end(E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V283 of {'Idris.Prelude.Types.Left', E187} -> (fun (V284) -> {'Idris.Prelude.Types.Left', V284} end(E187)); {'Idris.Prelude.Types.Right', E188} -> (fun (V285) -> ('un--runScript'(case V2 of {'Idris.Idris.Package.Types.MkPkgDesc', E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213} -> (fun (V286, V287, V288, V289, V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310) -> V310 end(E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4)) end(E188)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E108)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--check'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--prepareCompilation'(V0, V1, V2, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V9 of [] -> begin (V36 = ('un--runScript'(case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V31 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Right', []} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V9} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--build'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--prepareCompilation'(V0, V1, V2, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V9 of [] -> begin (V66 = case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> case V24 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E29} -> (fun (V36) -> case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> case V49 of {'Idris.Prelude.Types.Just', E55} -> (fun (V62) -> case V62 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V63, V64) -> begin (V65 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V63)), {'Idris.Core.Name.UN', <<"main"/utf8>>}}), ('un--compileMain'(V0, V1, V2, V65, V64, V36, V5)) end end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<"No main module given"/utf8>>}, V5)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V66 of {'Idris.Prelude.Types.Left', E58} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V68) -> begin (V122 = case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> case V83 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E85} -> (fun (V94) -> begin (V121 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V95) -> ('Idris.Idris2.Builtin':'un--fst'(V95)) end, case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> V107 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), ('un--compileLibHelper'(V0, V1, V2, V94, V121, V10, V5)) end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V122 of {'Idris.Prelude.Types.Left', E111} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V124) -> begin (V150 = ('un--runScript'(case V3 of {'Idris.Idris.Package.Types.MkPkgDesc', E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137} -> (fun (V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149) -> V145 end(E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V150 of {'Idris.Prelude.Types.Left', E138} -> (fun (V151) -> {'Idris.Prelude.Types.Left', V151} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V152) -> {'Idris.Prelude.Types.Right', []} end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V9} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bitraverseC'(V0, V1, V2, V3) -> case V2 of {'Idris.Data.These.This', E0} -> (fun (V4) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V5) -> {'Idris.Prelude.Types.Right', fun (V6) -> {'Idris.Data.These.This', V6} end} end, (V0(V4)), V3)) end(E0)); {'Idris.Data.These.That', E1} -> (fun (V7) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V8) -> {'Idris.Prelude.Types.Right', fun (V9) -> {'Idris.Data.These.That', V9} end} end, (V1(V7)), V3)) end(E1)); {'Idris.Data.These.Both', E2, E3} -> (fun (V10, V11) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V12) -> ('Idris.Idris2.Core.Core':'un--<*>'(fun (V13) -> {'Idris.Prelude.Types.Right', fun (V14) -> fun (V15) -> {'Idris.Data.These.Both', V14, V15} end end} end, (V0(V10)), V12)) end, (V1(V11)), V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addFields'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.Package.ParsedMods'}, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Idris.Package.MainMod'}, {'Idris.Prelude.Types.Nothing'}, V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = ('nested--14493-5280--in--un--go'(V4, V3, V2, V1, V0, V8, V11, V3, V4, V5))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V40 = ('Idris.Idris2.Core.Context':'un--setSourceDir'(V0, case V14 of {'Idris.Idris.Package.Types.MkPkgDesc', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V31 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V40 of {'Idris.Prelude.Types.Left', E31} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E33} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V46) -> begin (V48 = begin (V47 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E35} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V50) -> begin (V53 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V51) -> fun (V52) -> ('nested--14493-5279--in--un--toSource'(V4, V3, V2, V1, V0, V51, V52)) end end, V46, [], V5))), case V53 of {'Idris.Prelude.Types.Left', E37} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V55) -> begin (V61 = case V50 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E39} -> (fun (V56) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V57) -> case V57 of {'Idris.Prelude.Types.Left', E40} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V59) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V59}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V60) -> ('nested--14493-5279--in--un--toSource'(V4, V3, V2, V1, V0, V56, V60)) end, V5)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V61 of {'Idris.Prelude.Types.Left', E42} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V63) -> {'Idris.Prelude.Types.Right', case V14 of {'Idris.Idris.Package.Types.MkPkgDesc', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88) -> {'Idris.Idris.Package.Types.MkPkgDesc', V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V55, V63, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88} end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addField'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of {'Idris.Idris.Package.PVersion', E0, E1} -> (fun (V8, V9) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Idris.Package.Types.MkPkgDesc', V10, {'Idris.Prelude.Types.Just', V9}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E0, E1)); {'Idris.Idris.Package.PVersionDep', E27, E28} -> (fun (V35, V36) -> begin (V37 = ('Idris.Idris2.Idris.REPL.Common':'un--emitWarning'(V0, V2, V1, {'Idris.Core.Core.Deprecated', <<"version numbers must now be of the form x.y.z"/utf8>>}, V7))), case V37 of {'Idris.Prelude.Types.Left', E29} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V39) -> {'Idris.Prelude.Types.Right', V6} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27, E28)); {'Idris.Idris.Package.PAuthors', E31, E32} -> (fun (V40, V41) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66) -> {'Idris.Idris.Package.Types.MkPkgDesc', V42, V43, {'Idris.Prelude.Types.Just', V41}, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66} end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E31, E32)); {'Idris.Idris.Package.PMaintainers', E58, E59} -> (fun (V67, V68) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> {'Idris.Idris.Package.Types.MkPkgDesc', V69, V70, V71, {'Idris.Prelude.Types.Just', V68}, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93} end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E58, E59)); {'Idris.Idris.Package.PLicense', E85, E86} -> (fun (V94, V95) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111} -> (fun (V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120) -> {'Idris.Idris.Package.Types.MkPkgDesc', V96, V97, V98, V99, {'Idris.Prelude.Types.Just', V95}, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120} end(E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E85, E86)); {'Idris.Idris.Package.PBrief', E112, E113} -> (fun (V121, V122) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138} -> (fun (V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147) -> {'Idris.Idris.Package.Types.MkPkgDesc', V123, V124, V125, V126, V127, {'Idris.Prelude.Types.Just', V122}, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147} end(E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E112, E113)); {'Idris.Idris.Package.PReadMe', E139, E140} -> (fun (V148, V149) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165} -> (fun (V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174) -> {'Idris.Idris.Package.Types.MkPkgDesc', V150, V151, V152, V153, V154, V155, {'Idris.Prelude.Types.Just', V149}, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174} end(E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E139, E140)); {'Idris.Idris.Package.PHomePage', E166, E167} -> (fun (V175, V176) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192} -> (fun (V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201) -> {'Idris.Idris.Package.Types.MkPkgDesc', V177, V178, V179, V180, V181, V182, V183, {'Idris.Prelude.Types.Just', V176}, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201} end(E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E166, E167)); {'Idris.Idris.Package.PSourceLoc', E193, E194} -> (fun (V202, V203) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219} -> (fun (V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228) -> {'Idris.Idris.Package.Types.MkPkgDesc', V204, V205, V206, V207, V208, V209, V210, V211, {'Idris.Prelude.Types.Just', V203}, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228} end(E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E193, E194)); {'Idris.Idris.Package.PBugTracker', E220, E221} -> (fun (V229, V230) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246} -> (fun (V231, V232, V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255) -> {'Idris.Idris.Package.Types.MkPkgDesc', V231, V232, V233, V234, V235, V236, V237, V238, V239, {'Idris.Prelude.Types.Just', V230}, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255} end(E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E220, E221)); {'Idris.Idris.Package.PDepends', E247} -> (fun (V256) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272} -> (fun (V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281) -> {'Idris.Idris.Package.Types.MkPkgDesc', V257, V258, V259, V260, V261, V262, V263, V264, V265, V266, V256, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281} end(E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E247)); {'Idris.Idris.Package.PModules', E273} -> (fun (V282) -> begin (V284 = begin (V283 = ('erlang':'put'(V3, V282))), {'Idris.Prelude.Types.Right', V283} end), case V284 of {'Idris.Prelude.Types.Left', E274} -> (fun (V285) -> {'Idris.Prelude.Types.Left', V285} end(E274)); {'Idris.Prelude.Types.Right', E275} -> (fun (V286) -> {'Idris.Prelude.Types.Right', V6} end(E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E273)); {'Idris.Idris.Package.PMainMod', E276, E277} -> (fun (V287, V288) -> begin (V290 = begin (V289 = ('erlang':'put'(V4, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V287, V288}}))), {'Idris.Prelude.Types.Right', V289} end), case V290 of {'Idris.Prelude.Types.Left', E278} -> (fun (V291) -> {'Idris.Prelude.Types.Left', V291} end(E278)); {'Idris.Prelude.Types.Right', E279} -> (fun (V292) -> {'Idris.Prelude.Types.Right', V6} end(E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E276, E277)); {'Idris.Idris.Package.PExec', E280} -> (fun (V293) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305} -> (fun (V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318) -> {'Idris.Idris.Package.Types.MkPkgDesc', V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, {'Idris.Prelude.Types.Just', V293}, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318} end(E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E280)); {'Idris.Idris.Package.PLibrary', E306} -> (fun (V319) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331} -> (fun (V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344) -> {'Idris.Idris.Package.Types.MkPkgDesc', V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, {'Idris.Prelude.Types.Just', V319}, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344} end(E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E306)); {'Idris.Idris.Package.POpts', E332, E333} -> (fun (V345, V346) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358} -> (fun (V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371) -> {'Idris.Idris.Package.Types.MkPkgDesc', V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V345, V346}}, V363, V364, V365, V366, V367, V368, V369, V370, V371} end(E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E332, E333)); {'Idris.Idris.Package.PSourceDir', E359, E360} -> (fun (V372, V373) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385} -> (fun (V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392, V393, V394, V395, V396, V397, V398) -> {'Idris.Idris.Package.Types.MkPkgDesc', V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, {'Idris.Prelude.Types.Just', V373}, V391, V392, V393, V394, V395, V396, V397, V398} end(E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E359, E360)); {'Idris.Idris.Package.PBuildDir', E386, E387} -> (fun (V399, V400) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412} -> (fun (V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418, V419, V420, V421, V422, V423, V424, V425) -> {'Idris.Idris.Package.Types.MkPkgDesc', V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, {'Idris.Prelude.Types.Just', V400}, V419, V420, V421, V422, V423, V424, V425} end(E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E386, E387)); {'Idris.Idris.Package.POutputDir', E413, E414} -> (fun (V426, V427) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439} -> (fun (V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, V446, V447, V448, V449, V450, V451, V452) -> {'Idris.Idris.Package.Types.MkPkgDesc', V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444, V445, {'Idris.Prelude.Types.Just', V427}, V447, V448, V449, V450, V451, V452} end(E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E413, E414)); {'Idris.Idris.Package.PPrebuild', E440, E441} -> (fun (V453, V454) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466} -> (fun (V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, V474, V475, V476, V477, V478, V479) -> {'Idris.Idris.Package.Types.MkPkgDesc', V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470, V471, V472, V473, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V453, V454}}, V475, V476, V477, V478, V479} end(E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E440, E441)); {'Idris.Idris.Package.PPostbuild', E467, E468} -> (fun (V480, V481) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493} -> (fun (V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, V502, V503, V504, V505, V506) -> {'Idris.Idris.Package.Types.MkPkgDesc', V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498, V499, V500, V501, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V480, V481}}, V503, V504, V505, V506} end(E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E467, E468)); {'Idris.Idris.Package.PPreinstall', E494, E495} -> (fun (V507, V508) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520} -> (fun (V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, V530, V531, V532, V533) -> {'Idris.Idris.Package.Types.MkPkgDesc', V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526, V527, V528, V529, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V507, V508}}, V531, V532, V533} end(E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E494, E495)); {'Idris.Idris.Package.PPostinstall', E521, E522} -> (fun (V534, V535) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E523, E524, E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547} -> (fun (V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560) -> {'Idris.Idris.Package.Types.MkPkgDesc', V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554, V555, V556, V557, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V534, V535}}, V559, V560} end(E523, E524, E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E521, E522)); {'Idris.Idris.Package.PPreclean', E548, E549} -> (fun (V561, V562) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574} -> (fun (V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587) -> {'Idris.Idris.Package.Types.MkPkgDesc', V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V561, V562}}, V587} end(E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E548, E549)); {'Idris.Idris.Package.PPostclean', E575, E576} -> (fun (V588, V589) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.Types.MkPkgDesc', E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601} -> (fun (V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614) -> {'Idris.Idris.Package.Types.MkPkgDesc', V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V588, V589}}} end(E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E575, E576)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addDeps'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'un--addPkg'(V0, case V7 of {'Idris.Idris.Package.Types.MkDepends', E2, E3} -> (fun (V9, V10) -> V9 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8)) end end, case V1 of {'Idris.Idris.Package.Types.MkPkgDesc', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V21 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
