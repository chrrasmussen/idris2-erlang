-module('Idris.Idris2.Idris.Package').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'with--partitionOpts,pOptUpdate-6893'/3,
  'case--case block in case block in case block in findIpkg-7438'/15,
  'case--case block in case block in findIpkg-7343'/12,
  'case--case block in findIpkg-7291'/9,
  'case--findIpkg-7231'/5,
  'case--case block in processPackageOpts-7097'/10,
  'case--processPackageOpts-7075'/5,
  'case--with block in partitionOpts,pOptUpdate-6954'/3,
  'case--with block in partitionOpts,pOptUpdate-6931'/3,
  'case--with block in partitionOpts,pOptUpdate-6903'/5,
  'case--case block in case block in case block in processPackage-6759'/11,
  'case--case block in case block in case block in processPackage-6657'/11,
  'case--case block in case block in case block in processPackage-6575'/11,
  'case--case block in case block in case block in processPackage-6493'/11,
  'case--case block in case block in processPackage-6463'/10,
  'case--case block in processPackage-6424'/7,
  'case--processPackage-6344'/7,
  'case--parsePkgFile-6295'/5,
  'case--runRepl-6221'/6,
  'case--clean-6049'/8,
  'case--clean-5994'/8,
  'case--clean,delete-5903'/6,
  'case--foldWithKeysC,go-5824'/10,
  'case--check-5607'/6,
  'case--case block in case block in case block in install-5419'/14,
  'case--case block in case block in install-5379'/12,
  'case--case block in install-5348'/11,
  'case--install-5313'/8,
  'case--case block in installFrom-5134'/13,
  'case--installFrom-5085'/11,
  'case--copyFile-5030'/3,
  'case--case block in build-4950'/8,
  'case--case block in case block in build-4894'/9,
  'case--case block in build-4855'/8,
  'case--build-4824'/6,
  'case--prepareCompilation-4720'/10,
  'case--filterChangedModules-4639'/3,
  'case--processOptions-4525'/5,
  'case--addFields-4434'/12,
  'case--addField-4274'/8,
  'case--addField-4222'/8,
  'case--addField-4170'/8,
  'case--addField-4118'/8,
  'case--addField-4066'/8,
  'case--addField-4014'/8,
  'case--addField-3966'/8,
  'case--addField-3918'/8,
  'case--addField-3870'/8,
  'case--addField-3818'/8,
  'case--addField-3772'/7,
  'case--addField-3726'/7,
  'case--addField-3656'/7,
  'case--addField-3608'/8,
  'case--addField-3560'/8,
  'case--addField-3512'/8,
  'case--addField-3464'/8,
  'case--addField-3416'/8,
  'case--addField-3368'/8,
  'case--addField-3320'/8,
  'case--addField-3274'/8,
  'case--addField-3218'/8,
  'case--field,mkBound-2411'/5,
  'case--field,mkBound-2377'/5,
  'nested--21185-4300--in--un--toSource'/6,
  'nested--18920-2125--in--un--strField'/3,
  'nested--23982-6870--in--un--pOptUpdate'/2,
  'nested--23982-6869--in--un--optType'/2,
  'nested--18920-2123--in--un--mkBound'/3,
  'nested--24309-7166--in--un--loadDependencies'/5,
  'nested--22803-5789--in--un--go'/8,
  'nested--21185-4301--in--un--go'/9,
  'nested--18920-2124--in--un--depends'/1,
  'nested--22904-5885--in--un--deleteFolder'/7,
  'nested--22904-5886--in--un--deleteBin'/7,
  'nested--22904-5884--in--un--delete'/6,
  'nested--18920-2122--in--un--bound'/1,
  'dn--un--show_Show_PkgDesc'/1,
  'dn--un--show_Show_Depends'/1,
  'dn--un--showPrec_Show_PkgDesc'/2,
  'dn--un--showPrec_Show_Depends'/2,
  'dn--un--__Impl_Show_PkgDesc'/0,
  'dn--un--__Impl_Show_Depends'/0,
  'un--runScript'/1,
  'un--runRepl'/5,
  'un--processPackageOpts'/5,
  'un--processPackage'/5,
  'un--processOptions'/3,
  'un--prepareCompilation'/6,
  'un--partitionOpts'/1,
  'un--parsePkgFile'/5,
  'un--parsePkgDesc'/1,
  'un--installFrom'/4,
  'un--installDir'/1,
  'un--install'/5,
  'un--initPkgDesc'/1,
  'un--foldlC'/6,
  'un--foldWithKeysC'/7,
  'un--findIpkg'/5,
  'un--filterChangedModules'/2,
  'un--field'/1,
  'un--errorMsg'/0,
  'un--copyFile'/3,
  'un--compileMain'/7,
  'un--compileLibHelper'/7,
  'un--clean'/5,
  'un--check'/6,
  'un--build'/6,
  'un--bitraverseC'/7,
  'un--addFields'/6,
  'un--addField'/7,
  'un--addDeps'/3
]).
'with--partitionOpts,pOptUpdate-6893'(V0, V1, V2) -> case V2 of {'Idris.Idris.Package.nested--23982-6865--in--un--PPackage', E0, E1, E2} -> (fun (V3, V4, V5) -> fun (V6) -> case V6 of {'Idris.Idris.Package.MkPFR', E3, E4, E5} -> (fun (V7, V8, V9) -> {'Idris.Idris.Package.MkPFR', [{'Idris.Builtin.MkPair', V4, V5} | V7], V8, V9} end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', E6} -> (fun (V10) -> fun (V11) -> case V11 of {'Idris.Idris.Package.MkPFR', E7, E8, E9} -> (fun (V12, V13, V14) -> {'Idris.Idris.Package.MkPFR', V12, [V1 | V13], V14} end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Idris.Package.nested--23982-6867--in--un--PIgnore', E10} -> (fun (V15) -> fun (V16) -> V16 end end(E10)); {'Idris.Idris.Package.nested--23982-6868--in--un--PErr', E11} -> (fun (V17) -> fun (V18) -> case V18 of {'Idris.Idris.Package.MkPFR', E12, E13, E14} -> (fun (V19, V20, V21) -> {'Idris.Idris.Package.MkPFR', V19, V20, 0} end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in findIpkg-7438'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of {'Idris.Idris.REPLOpts.MkREPLOpts', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V15, V16, {'Idris.Prelude.Types.Just', V13}, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in findIpkg-7343'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V6, V13))), fun (V15) -> begin (V16 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V2, V14, V15))), case V16 of {'Idris.Prelude.Types.Left', E1} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E3} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V22) -> begin (V40 = begin (V39 = ('erlang':'put'(V2, case V22 of {'Idris.Idris.REPLOpts.MkREPLOpts', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V23, V24, {'Idris.Prelude.Types.Just', V14}, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38} end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V39} end), case V40 of {'Idris.Prelude.Types.Left', E21} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V14}} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findIpkg-7291'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Right', E0} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V10, V11) -> fun (V12) -> begin (V13 = ('un--addFields'(V3, V1, V2, V11, ('un--initPkgDesc'(V10)), V12))), case V13 of {'Idris.Prelude.Types.Left', E3} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V15) -> begin (V44 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V3, V17, V18)) end end end, case V15 of {'Idris.Idris.Package.MkPkgDesc', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43) -> V36 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12))), case V44 of {'Idris.Prelude.Types.Left', E30} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V46) -> begin (V72 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V3, case V15 of {'Idris.Idris.Package.MkPkgDesc', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V65 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V12))), case V72 of {'Idris.Prelude.Types.Left', E57} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V74) -> begin (V100 = (('un--processOptions'(V3, V2, case V15 of {'Idris.Idris.Package.MkPkgDesc', E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83} -> (fun (V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99) -> V90 end(E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12))), case V100 of {'Idris.Prelude.Types.Left', E84} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V102) -> begin (V128 = (('nested--24309-7166--in--un--loadDependencies'(V0, V1, V2, V3, case V15 of {'Idris.Idris.Package.MkPkgDesc', E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V113 end(E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V12))), case V128 of {'Idris.Prelude.Types.Left', E111} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V130) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E113} -> (fun (V131) -> begin (V132 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V6, V131))), begin (V133 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V2, V132, V12))), case V133 of {'Idris.Prelude.Types.Left', E114} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V135) -> begin (V137 = begin (V136 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V136} end), case V137 of {'Idris.Prelude.Types.Left', E116} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V139) -> begin (V157 = begin (V156 = ('erlang':'put'(V2, case V139 of {'Idris.Idris.REPLOpts.MkREPLOpts', E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133} -> (fun (V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V140, V141, {'Idris.Prelude.Types.Just', V132}, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155} end(E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V156} end), case V157 of {'Idris.Prelude.Types.Left', E134} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E134)); {'Idris.Prelude.Types.Right', E135} -> (fun (V159) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V132}} end(E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E136} -> (fun (V160) -> fun (V161) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V160, V161)) end end(E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findIpkg-7231'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V8, V9) -> fun (V10) -> begin (V43 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V14) -> begin (V42 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> fun (V22) -> V21 end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), begin (V29 = (V26(V27))), (V28(V29)) end end end end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V32(V34))), ((V33(V35))(V34)) end end end end end end, fun (V36) -> fun (V37) -> fun (V38) -> begin (V39 = (V37(V38))), (V39(V38)) end end end end}, fun (V40) -> fun (V41) -> V41 end end}, V6))(V14))), {'Idris.Prelude.Types.Right', V42} end end, V10))), case V43 of {'Idris.Prelude.Types.Left', E7} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V3, V6, V10))), case V46 of {'Idris.Prelude.Types.Left', E9} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V48) -> begin (V51 = begin (V50 = ('Idris.Idris2.Parser.Package':'un--parseFile'('erased', V8, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--parsePkgDesc'(V8)), fun () -> fun (V49) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--eoi'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V49} end} end end}, V10))), {'Idris.Prelude.Types.Right', V50} end), case V51 of {'Idris.Prelude.Types.Left', E11} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V53) -> case V53 of {'Idris.Prelude.Types.Right', E13} -> (fun (V54) -> case V54 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V55, V56) -> begin (V57 = ('un--addFields'(V3, V1, V2, V56, ('un--initPkgDesc'(V55)), V10))), case V57 of {'Idris.Prelude.Types.Left', E16} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V59) -> begin (V88 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V3, V61, V62)) end end end, case V59 of {'Idris.Idris.Package.MkPkgDesc', E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87) -> V80 end(E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V88 of {'Idris.Prelude.Types.Left', E43} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V90) -> begin (V116 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V3, case V59 of {'Idris.Idris.Package.MkPkgDesc', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69} -> (fun (V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115) -> V109 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V116 of {'Idris.Prelude.Types.Left', E70} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V118) -> begin (V144 = (('un--processOptions'(V3, V2, case V59 of {'Idris.Idris.Package.MkPkgDesc', E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96} -> (fun (V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143) -> V134 end(E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V144 of {'Idris.Prelude.Types.Left', E97} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V146) -> begin (V172 = (('nested--24309-7166--in--un--loadDependencies'(V0, V1, V2, V3, case V59 of {'Idris.Idris.Package.MkPkgDesc', E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123} -> (fun (V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171) -> V157 end(E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V172 of {'Idris.Prelude.Types.Left', E124} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V174) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E126} -> (fun (V175) -> begin (V176 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V9, V175))), begin (V177 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V2, V176, V10))), case V177 of {'Idris.Prelude.Types.Left', E127} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E127)); {'Idris.Prelude.Types.Right', E128} -> (fun (V179) -> begin (V181 = begin (V180 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V180} end), case V181 of {'Idris.Prelude.Types.Left', E129} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V183) -> begin (V201 = begin (V200 = ('erlang':'put'(V2, case V183 of {'Idris.Idris.REPLOpts.MkREPLOpts', E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146} -> (fun (V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V184, V185, {'Idris.Prelude.Types.Just', V176}, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199} end(E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V200} end), case V201 of {'Idris.Prelude.Types.Left', E147} -> (fun (V202) -> {'Idris.Prelude.Types.Left', V202} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V203) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V176}} end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); {'Idris.Prelude.Types.Left', E149} -> (fun (V204) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V204, V10)) end(E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V205) -> {'Idris.Prelude.Types.Right', V0} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processPackageOpts-7097'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V6 of 0 -> fun (V10) -> begin (V38 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> V17 end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> begin (V24 = (V21(V23))), begin (V25 = (V22(V23))), (V24(V25)) end end end end end end end}, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), ((V29(V31))(V30)) end end end end end end, fun (V32) -> fun (V33) -> fun (V34) -> begin (V35 = (V33(V34))), (V35(V34)) end end end end}, fun (V36) -> fun (V37) -> V37 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--errorMsg'()), <<"\x{a}"/utf8>>))))(V10))), {'Idris.Prelude.Types.Right', V38} end end; 1 -> ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V39) -> ('un--processPackage'(V3, V2, V1, V7, V39)) end, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processPackageOpts-7075'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Package.MkPFR', E0, E1, E2} -> (fun (V5, V6, V7) -> case V5 of [E3 | E4] -> (fun (V8, V9) -> fun (V10) -> begin (V41 = begin (V11 = [V8 | V9]), case V7 of 0 -> begin (V39 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> V18 end end end, fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V22(V24))), begin (V26 = (V23(V24))), (V25(V26)) end end end end end end end}, fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V29(V31))), ((V30(V32))(V31)) end end end end end end, fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V34(V35))), (V36(V35)) end end end end}, fun (V37) -> fun (V38) -> V38 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--errorMsg'()), <<"\x{a}"/utf8>>))))(V10))), {'Idris.Prelude.Types.Right', V39} end; 1 -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V40) -> ('un--processPackage'(V3, V2, V1, V6, V40)) end, V11))(V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V41 of {'Idris.Prelude.Types.Left', E5} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V43) -> {'Idris.Prelude.Types.Right', 0} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); [] -> fun (V44) -> {'Idris.Prelude.Types.Right', 1} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in partitionOpts,pOptUpdate-6954'(V0, V1, V2) -> case V2 of {'Idris.Idris.Package.MkPFR', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Idris.Package.MkPFR', V3, V4, 0} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in partitionOpts,pOptUpdate-6931'(V0, V1, V2) -> case V2 of {'Idris.Idris.Package.MkPFR', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Idris.Package.MkPFR', V3, [V1 | V4], V5} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--with block in partitionOpts,pOptUpdate-6903'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.Package.MkPFR', E0, E1, E2} -> (fun (V5, V6, V7) -> {'Idris.Idris.Package.MkPFR', [{'Idris.Builtin.MkPair', V2, V1} | V5], V6, V7} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in processPackage-6759'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> fun (V11) -> ('un--runRepl'(V4, V3, V2, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V12) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V12)) end, case V8 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V25 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V11)) end; _ -> fun (V38) -> begin (V66 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V38))), {'Idris.Prelude.Types.Right', V66} end end end.
'case--case block in case block in case block in processPackage-6657'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> fun (V12) -> begin (V40 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V12))), {'Idris.Prelude.Types.Right', V40} end end end.
'case--case block in case block in case block in processPackage-6575'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> fun (V11) -> ('un--install'(V4, V2, V8, V1, V11)) end; _ -> fun (V12) -> begin (V40 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V12))), {'Idris.Prelude.Types.Right', V40} end end end.
'case--case block in case block in case block in processPackage-6493'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [] -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> fun (V12) -> begin (V40 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V12))), {'Idris.Prelude.Types.Right', V40} end end end.
'case--case block in case block in processPackage-6463'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V0 of {'Idris.Idris.CommandLine.Build'} -> (fun () -> fun (V10) -> begin (V11 = ('un--build'(V5, V4, V3, V9, V2, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> case V13 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> begin (V41 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V10))), {'Idris.Prelude.Types.Right', V41} end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.Install'} -> (fun () -> fun (V42) -> begin (V43 = ('un--build'(V5, V4, V3, V9, V2, V42))), case V43 of {'Idris.Prelude.Types.Left', E2} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V45) -> case V45 of [] -> ('un--install'(V5, V3, V9, V2, V42)); _ -> begin (V73 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> V52 end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), begin (V60 = (V57(V58))), (V59(V60)) end end end end end end end}, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), ((V64(V66))(V65)) end end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V68(V69))), (V70(V69)) end end end end}, fun (V71) -> fun (V72) -> V72 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V42))), {'Idris.Prelude.Types.Right', V73} end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.Typecheck'} -> (fun () -> fun (V74) -> begin (V75 = ('un--check'(V5, V4, V3, V9, V2, V74))), case V75 of {'Idris.Prelude.Types.Left', E4} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V77) -> case V77 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> begin (V105 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V80, V81, V82)) end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> V84 end end end, fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V88(V90))), begin (V92 = (V89(V90))), (V91(V92)) end end end end end end end}, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V95(V97))), ((V96(V98))(V97)) end end end end end end, fun (V99) -> fun (V100) -> fun (V101) -> begin (V102 = (V100(V101))), (V102(V101)) end end end end}, fun (V103) -> fun (V104) -> V104 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V74))), {'Idris.Prelude.Types.Right', V105} end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Idris.CommandLine.Clean'} -> (fun () -> fun (V106) -> ('un--clean'(V5, V3, V9, V2, V106)) end end()); {'Idris.Idris.CommandLine.REPL'} -> (fun () -> fun (V107) -> begin (V108 = ('un--build'(V5, V4, V3, V9, V2, V107))), case V108 of {'Idris.Prelude.Types.Left', E6} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V110) -> case V110 of [] -> ('un--runRepl'(V5, V4, V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V111) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V111)) end, case V9 of {'Idris.Idris.Package.MkPkgDesc', E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136) -> V124 end(E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V107)); _ -> begin (V164 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V139, V140, V141)) end end end end end, fun (V142) -> fun (V143) -> fun (V144) -> V143 end end end, fun (V145) -> fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V147(V149))), begin (V151 = (V148(V149))), (V150(V151)) end end end end end end end}, fun (V152) -> fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V154(V156))), ((V155(V157))(V156)) end end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V159(V160))), (V161(V160)) end end end end}, fun (V162) -> fun (V163) -> V163 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V107))), {'Idris.Prelude.Types.Right', V164} end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in processPackage-6424'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Right', E0} -> (fun (V7) -> case V7 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = ('un--addFields'(V5, V4, V3, V9, ('un--initPkgDesc'(V8)), V10))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> begin (V42 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V5, V15, V16)) end end end, case V13 of {'Idris.Idris.Package.MkPkgDesc', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V34 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V10))), case V42 of {'Idris.Prelude.Types.Left', E30} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V44) -> begin (V70 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V5, case V13 of {'Idris.Idris.Package.MkPkgDesc', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69) -> V63 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V10))), case V70 of {'Idris.Prelude.Types.Left', E57} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V72) -> case V0 of {'Idris.Idris.CommandLine.Build'} -> (fun () -> begin (V73 = ('un--build'(V5, V4, V3, V13, V2, V10))), case V73 of {'Idris.Prelude.Types.Left', E59} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V75) -> case V75 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> begin (V103 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V78, V79, V80)) end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> V82 end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> begin (V89 = (V86(V88))), begin (V90 = (V87(V88))), (V89(V90)) end end end end end end end}, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> begin (V96 = (V93(V95))), ((V94(V96))(V95)) end end end end end end, fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V98(V99))), (V100(V99)) end end end end}, fun (V101) -> fun (V102) -> V102 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V10))), {'Idris.Prelude.Types.Right', V103} end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Idris.CommandLine.Install'} -> (fun () -> begin (V104 = ('un--build'(V5, V4, V3, V13, V2, V10))), case V104 of {'Idris.Prelude.Types.Left', E61} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V106) -> case V106 of [] -> ('un--install'(V5, V3, V13, V2, V10)); _ -> begin (V134 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V107) -> fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V109, V110, V111)) end end end end end, fun (V112) -> fun (V113) -> fun (V114) -> V113 end end end, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> begin (V120 = (V117(V119))), begin (V121 = (V118(V119))), (V120(V121)) end end end end end end end}, fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> begin (V127 = (V124(V126))), ((V125(V127))(V126)) end end end end end end, fun (V128) -> fun (V129) -> fun (V130) -> begin (V131 = (V129(V130))), (V131(V130)) end end end end}, fun (V132) -> fun (V133) -> V133 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V10))), {'Idris.Prelude.Types.Right', V134} end end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Idris.CommandLine.Typecheck'} -> (fun () -> begin (V135 = ('un--check'(V5, V4, V3, V13, V2, V10))), case V135 of {'Idris.Prelude.Types.Left', E63} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V137) -> case V137 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> begin (V165 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V140, V141, V142)) end end end end end, fun (V143) -> fun (V144) -> fun (V145) -> V144 end end end, fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> begin (V151 = (V148(V150))), begin (V152 = (V149(V150))), (V151(V152)) end end end end end end end}, fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> begin (V158 = (V155(V157))), ((V156(V158))(V157)) end end end end end end, fun (V159) -> fun (V160) -> fun (V161) -> begin (V162 = (V160(V161))), (V162(V161)) end end end end}, fun (V163) -> fun (V164) -> V164 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V10))), {'Idris.Prelude.Types.Right', V165} end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Idris.CommandLine.Clean'} -> (fun () -> ('un--clean'(V5, V3, V13, V2, V10)) end()); {'Idris.Idris.CommandLine.REPL'} -> (fun () -> begin (V166 = ('un--build'(V5, V4, V3, V13, V2, V10))), case V166 of {'Idris.Prelude.Types.Left', E65} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V168) -> case V168 of [] -> ('un--runRepl'(V5, V4, V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V169) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V169)) end, case V13 of {'Idris.Idris.Package.MkPkgDesc', E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91} -> (fun (V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194) -> V182 end(E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V10)); _ -> begin (V222 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V197, V198, V199)) end end end end end, fun (V200) -> fun (V201) -> fun (V202) -> V201 end end end, fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V205(V207))), begin (V209 = (V206(V207))), (V208(V209)) end end end end end end end}, fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> begin (V215 = (V212(V214))), ((V213(V215))(V214)) end end end end end end, fun (V216) -> fun (V217) -> fun (V218) -> begin (V219 = (V217(V218))), (V219(V218)) end end end end}, fun (V220) -> fun (V221) -> V221 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V10))), {'Idris.Prelude.Types.Right', V222} end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E92} -> (fun (V223) -> fun (V224) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V223, V224)) end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processPackage-6344'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> begin (V36 = begin (V35 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Packages must have an \x{27}.ipkg\x{27} extension: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V1)), <<"."/utf8>>))))))(V7))), {'Idris.Prelude.Types.Right', V35} end), case V36 of {'Idris.Prelude.Types.Left', E0} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V38) -> begin (V66 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V7))), {'Idris.Prelude.Types.Right', V66} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V67) -> begin (V70 = begin (V69 = ('Idris.Idris2.Parser.Package':'un--parseFile'('erased', V1, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--parsePkgDesc'(V1)), fun () -> fun (V68) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--eoi'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V68} end} end end}, V67))), {'Idris.Prelude.Types.Right', V69} end), case V70 of {'Idris.Prelude.Types.Left', E2} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V72) -> case V72 of {'Idris.Prelude.Types.Right', E4} -> (fun (V73) -> case V73 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V74, V75) -> begin (V76 = ('un--addFields'(V5, V4, V3, V75, ('un--initPkgDesc'(V74)), V67))), case V76 of {'Idris.Prelude.Types.Left', E7} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V78) -> begin (V107 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V5, V80, V81)) end end end, case V78 of {'Idris.Idris.Package.MkPkgDesc', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106) -> V99 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V67))), case V107 of {'Idris.Prelude.Types.Left', E34} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V109) -> begin (V135 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V5, case V78 of {'Idris.Idris.Package.MkPkgDesc', E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60} -> (fun (V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134) -> V128 end(E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V67))), case V135 of {'Idris.Prelude.Types.Left', E61} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V137) -> case V0 of {'Idris.Idris.CommandLine.Build'} -> (fun () -> begin (V138 = ('un--build'(V5, V4, V3, V78, V2, V67))), case V138 of {'Idris.Prelude.Types.Left', E63} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V140) -> case V140 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> begin (V168 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V143, V144, V145)) end end end end end, fun (V146) -> fun (V147) -> fun (V148) -> V147 end end end, fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> begin (V154 = (V151(V153))), begin (V155 = (V152(V153))), (V154(V155)) end end end end end end end}, fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> begin (V161 = (V158(V160))), ((V159(V161))(V160)) end end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> begin (V165 = (V163(V164))), (V165(V164)) end end end end}, fun (V166) -> fun (V167) -> V167 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V67))), {'Idris.Prelude.Types.Right', V168} end end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Idris.CommandLine.Install'} -> (fun () -> begin (V169 = ('un--build'(V5, V4, V3, V78, V2, V67))), case V169 of {'Idris.Prelude.Types.Left', E65} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V171) -> case V171 of [] -> ('un--install'(V5, V3, V78, V2, V67)); _ -> begin (V199 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V174, V175, V176)) end end end end end, fun (V177) -> fun (V178) -> fun (V179) -> V178 end end end, fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> begin (V185 = (V182(V184))), begin (V186 = (V183(V184))), (V185(V186)) end end end end end end end}, fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> begin (V192 = (V189(V191))), ((V190(V192))(V191)) end end end end end end, fun (V193) -> fun (V194) -> fun (V195) -> begin (V196 = (V194(V195))), (V196(V195)) end end end end}, fun (V197) -> fun (V198) -> V198 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V67))), {'Idris.Prelude.Types.Right', V199} end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Idris.CommandLine.Typecheck'} -> (fun () -> begin (V200 = ('un--check'(V5, V4, V3, V78, V2, V67))), case V200 of {'Idris.Prelude.Types.Left', E67} -> (fun (V201) -> {'Idris.Prelude.Types.Left', V201} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V202) -> case V202 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> begin (V230 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V205, V206, V207)) end end end end end, fun (V208) -> fun (V209) -> fun (V210) -> V209 end end end, fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> begin (V216 = (V213(V215))), begin (V217 = (V214(V215))), (V216(V217)) end end end end end end end}, fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> begin (V223 = (V220(V222))), ((V221(V223))(V222)) end end end end end end, fun (V224) -> fun (V225) -> fun (V226) -> begin (V227 = (V225(V226))), (V227(V226)) end end end end}, fun (V228) -> fun (V229) -> V229 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V67))), {'Idris.Prelude.Types.Right', V230} end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Idris.CommandLine.Clean'} -> (fun () -> ('un--clean'(V5, V3, V78, V2, V67)) end()); {'Idris.Idris.CommandLine.REPL'} -> (fun () -> begin (V231 = ('un--build'(V5, V4, V3, V78, V2, V67))), case V231 of {'Idris.Prelude.Types.Left', E69} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V233) -> case V233 of [] -> ('un--runRepl'(V5, V4, V3, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V234) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V234)) end, case V78 of {'Idris.Idris.Package.MkPkgDesc', E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95} -> (fun (V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259) -> V247 end(E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V67)); _ -> begin (V287 = (('Idris.Idris2.Libraries.Utils.System':'un--softExitWith'('erased', 'erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V262, V263, V264)) end end end end end, fun (V265) -> fun (V266) -> fun (V267) -> V266 end end end, fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> begin (V273 = (V270(V272))), begin (V274 = (V271(V272))), (V273(V274)) end end end end end end end}, fun (V275) -> fun (V276) -> fun (V277) -> fun (V278) -> fun (V279) -> begin (V280 = (V277(V279))), ((V278(V280))(V279)) end end end end end end, fun (V281) -> fun (V282) -> fun (V283) -> begin (V284 = (V282(V283))), (V284(V283)) end end end end}, fun (V285) -> fun (V286) -> V286 end end}, {'Idris.Erlang.System.ExitFailure', 1, {'Idris.Data.So.Oh'}}))(V67))), {'Idris.Prelude.Types.Right', V287} end end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); {'Idris.Prelude.Types.Left', E96} -> (fun (V288) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V288, V67)) end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--parsePkgFile-6295'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> case V5 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V6, V7) -> fun (V8) -> ('un--addFields'(V3, V2, V1, V7, ('un--initPkgDesc'(V6)), V8)) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V9, V10)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--runRepl-6221'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V9 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V3, V4, V2, V5, V1, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> (('Idris.Idris2.Idris.REPL':'un--displayErrors'(V3, V4, V2, V5, V1, V11))(V8)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clean-6049'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V45 = case case V4 of {'Idris.Core.Context.MkDefs', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V13 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V36 end(E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V56 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V8, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V45 of {'Idris.Core.Options.MkDirs', E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54, V55) -> V48 end(E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"ttc"/utf8>>))))), begin (V57 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V8, ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V45))))), begin (V64 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V58) -> fun (V59) -> begin (V60 = ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V59))), begin (V61 = ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V59))), ('Idris.Idris2.Libraries.Data.StringTrie':'un--insertWith'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V60)), fun (V62) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> [V61 | []] end, fun () -> fun (V63) -> [V61 | V63] end end, V62)) end, V58)) end end end end, ('Idris.Idris2.Libraries.Data.StringTrie':'un--empty'('erased')), V6))), fun (V65) -> begin (V91 = ('un--foldWithKeysC'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.Interfaces':'dn--un--<+>_Semigroup_(|Unit,MkUnit|)'(V66, V67)) end end, ('Idris.Idris2.Prelude.Interfaces':'dn--un--neutral_Monoid_(|Unit,MkUnit|)'())}, fun (V68) -> fun (V69) -> ('nested--22904-5885--in--un--deleteFolder'(V0, V1, V2, V3, V56, V68, V69)) end end, fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V73) -> case V73 of {'Idris.Prelude.Types.Left', E47} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V75) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V78, V79, V80)) end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V83, V84, V85)) end end end end end, fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V87)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.Interfaces':'dn--un--<+>_Semigroup_(|Unit,MkUnit|)'(V88, V89)) end end, ('Idris.Idris2.Prelude.Interfaces':'dn--un--neutral_Monoid_(|Unit,MkUnit|)'())}}))(V75))} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V90) -> ('nested--22904-5886--in--un--deleteBin'(V0, V1, V2, V3, V56, V70, V90)) end, V71, [])), V72)) end end end, V64, V65))), case V91 of {'Idris.Prelude.Types.Left', E49} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V93) -> begin (V94 = ('nested--22904-5885--in--un--deleteFolder'(V0, V1, V2, V3, V56, [], V65))), case V94 of {'Idris.Prelude.Types.Left', E51} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V96) -> begin (V125 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V97) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V98) -> fun (V99) -> ('nested--22904-5884--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V57, V98)), V99)) end end end, case V1 of {'Idris.Idris.Package.MkPkgDesc', E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77} -> (fun (V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> V113 end(E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V65))), case V125 of {'Idris.Prelude.Types.Left', E78} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V127) -> (('un--runScript'(case V1 of {'Idris.Idris.Package.MkPkgDesc', E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> V152 end(E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V65)) end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V153) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V153)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clean-5994'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V8, V9) -> {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V9, V8}} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--clean,delete-5903'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Right', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkUnit'} -> (fun () -> fun (V7) -> begin (V35 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Removed: "/utf8>>, V4))))(V7))), {'Idris.Prelude.Types.Right', V35} end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V36) -> fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--foldWithKeysC,go-5824'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V10, V11) -> begin (V12 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V6, [V10 | []]))), fun (V13) -> begin (V14 = ('nested--22803-5789--in--un--go'('erased', V1, 'erased', V3, V4, V12, V11, V13))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = ((V4(V12))(V13))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E6, E7} -> (fun (V20, V21) -> ((V20(case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E8, E9} -> (fun (V22, V23) -> ((V22(V8))(V16)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V19)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--check-5607'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V6 of [] -> fun (V8) -> begin (V34 = (('un--runScript'(case V1 of {'Idris.Idris.Package.MkPkgDesc', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V29 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V34 of {'Idris.Prelude.Types.Left', E27} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V36) -> {'Idris.Prelude.Types.Right', []} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V37) -> {'Idris.Prelude.Types.Right', V6} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in install-5419'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> begin (V16 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V15) -> ('un--installFrom'(V3, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V7, V5)), ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V9, ('un--installDir'(V1)))), V15)) end, V6))(V14))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V51 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V19) -> case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V22) -> begin (V50 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> fun (V30) -> V29 end end end, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), begin (V37 = (V34(V35))), (V36(V37)) end end end end end end end}, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> begin (V43 = (V40(V42))), ((V41(V43))(V42)) end end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> begin (V47 = (V45(V46))), (V47(V46)) end end end end}, fun (V48) -> fun (V49) -> V49 end end}, V7))(V22))), {'Idris.Prelude.Types.Right', V50} end end, V14))), case V51 of {'Idris.Prelude.Types.Left', E4} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V53) -> (('un--runScript'(case V1 of {'Idris.Idris.Package.MkPkgDesc', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78) -> V76 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V79) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, ('un--installDir'(V1))))}, V79)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in install-5379'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Right', E0} -> (fun (V12) -> fun (V13) -> begin (V42 = begin (V41 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, ('un--installDir'(V1))))(V13))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E1} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V44) -> case V44 of 0 -> begin (V46 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V45) -> ('un--installFrom'(V3, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V7, V5)), ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V9, ('un--installDir'(V1)))), V45)) end, V6))(V13))), case V46 of {'Idris.Prelude.Types.Left', E3} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V48) -> begin (V81 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V49) -> case V49 of {'Idris.Prelude.Types.Left', E5} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V52) -> begin (V80 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> fun (V60) -> V59 end end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), begin (V67 = (V64(V65))), (V66(V67)) end end end end end end end}, fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> begin (V73 = (V70(V72))), ((V71(V73))(V72)) end end end end end end, fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V75(V76))), (V77(V76)) end end end end}, fun (V78) -> fun (V79) -> V79 end end}, V7))(V52))), {'Idris.Prelude.Types.Right', V80} end end, V13))), case V81 of {'Idris.Prelude.Types.Left', E7} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V83) -> (('un--runScript'(case V1 of {'Idris.Idris.Package.MkPkgDesc', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108) -> V106 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V13)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, ('un--installDir'(V1))))}, V13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E34} -> (fun (V109) -> fun (V110) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directory "/utf8>>, ('un--installDir'(V1)))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V109)) | []]]))}, V110)) end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in install-5348'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> begin (V13 = begin (V12 = (('Idris.Idris2.Core.Directory':'un--mkdirAll'(('un--installDir'(V1))))(V11))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> case V15 of {'Idris.Prelude.Types.Right', E2} -> (fun (V16) -> begin (V45 = begin (V44 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> V23 end end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V27(V29))), begin (V31 = (V28(V29))), (V30(V31)) end end end end end end end}, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), ((V35(V37))(V36)) end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> begin (V41 = (V39(V40))), (V41(V40)) end end end end}, fun (V42) -> fun (V43) -> V43 end end}, ('un--installDir'(V1))))(V11))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E3} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V47) -> case V47 of 0 -> begin (V49 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V48) -> ('un--installFrom'(V3, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V7, V5)), ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V9, ('un--installDir'(V1)))), V48)) end, V6))(V11))), case V49 of {'Idris.Prelude.Types.Left', E5} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V51) -> begin (V84 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V52) -> case V52 of {'Idris.Prelude.Types.Left', E7} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V55) -> begin (V83 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V58, V59, V60)) end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> V62 end end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> begin (V69 = (V66(V68))), begin (V70 = (V67(V68))), (V69(V70)) end end end end end end end}, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), ((V74(V76))(V75)) end end end end end end, fun (V77) -> fun (V78) -> fun (V79) -> begin (V80 = (V78(V79))), (V80(V79)) end end end end}, fun (V81) -> fun (V82) -> V82 end end}, V7))(V55))), {'Idris.Prelude.Types.Right', V83} end end, V11))), case V84 of {'Idris.Prelude.Types.Left', E9} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V86) -> (('un--runScript'(case V1 of {'Idris.Idris.Package.MkPkgDesc', E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111) -> V109 end(E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, ('un--installDir'(V1))))}, V11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E36} -> (fun (V112) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directory "/utf8>>, ('un--installDir'(V1)))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V112)) | []]]))}, V11)) end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V113) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, V9))}, V113)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--install-5313'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V55 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case case case V4 of {'Idris.Core.Context.MkDefs', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V13 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E11, E12, E13, E14, E15, E16, E17, E18, E19} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V36 end(E11, E12, E13, E14, E15, E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkDirs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V50 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Idris.Version':'un--showVersion'(1, ('Idris.Idris2.Idris.Version':'un--version'())))))))), fun (V56) -> begin (V85 = begin (V84 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> V63 end end end, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), begin (V71 = (V68(V69))), (V70(V71)) end end end end end end end}, fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> begin (V77 = (V74(V76))), ((V75(V77))(V76)) end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V79(V80))), (V81(V80)) end end end end}, fun (V82) -> fun (V83) -> V83 end end}, V55))(V56))), {'Idris.Prelude.Types.Right', V84} end), case V85 of {'Idris.Prelude.Types.Left', E47} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V87) -> case V87 of 0 -> begin (V89 = begin (V88 = (('Idris.Idris2.Core.Directory':'un--mkdirAll'(('un--installDir'(V1))))(V56))), {'Idris.Prelude.Types.Right', V88} end), case V89 of {'Idris.Prelude.Types.Left', E49} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V91) -> case V91 of {'Idris.Prelude.Types.Right', E51} -> (fun (V92) -> begin (V121 = begin (V120 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V95, V96, V97)) end end end end end, fun (V98) -> fun (V99) -> fun (V100) -> V99 end end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> begin (V106 = (V103(V105))), begin (V107 = (V104(V105))), (V106(V107)) end end end end end end end}, fun (V108) -> fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> begin (V113 = (V110(V112))), ((V111(V113))(V112)) end end end end end end, fun (V114) -> fun (V115) -> fun (V116) -> begin (V117 = (V115(V116))), (V117(V116)) end end end end}, fun (V118) -> fun (V119) -> V119 end end}, ('un--installDir'(V1))))(V56))), {'Idris.Prelude.Types.Right', V120} end), case V121 of {'Idris.Prelude.Types.Left', E52} -> (fun (V122) -> {'Idris.Prelude.Types.Left', V122} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V123) -> case V123 of 0 -> begin (V125 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V124) -> ('un--installFrom'(V3, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V8, V5)), ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V55, ('un--installDir'(V1)))), V124)) end, V6))(V56))), case V125 of {'Idris.Prelude.Types.Left', E54} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V127) -> begin (V160 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V128) -> case V128 of {'Idris.Prelude.Types.Left', E56} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V130) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V131) -> begin (V159 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V134, V135, V136)) end end end end end, fun (V137) -> fun (V138) -> fun (V139) -> V138 end end end, fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> begin (V145 = (V142(V144))), begin (V146 = (V143(V144))), (V145(V146)) end end end end end end end}, fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> begin (V152 = (V149(V151))), ((V150(V152))(V151)) end end end end end end, fun (V153) -> fun (V154) -> fun (V155) -> begin (V156 = (V154(V155))), (V156(V155)) end end end end}, fun (V157) -> fun (V158) -> V158 end end}, V8))(V131))), {'Idris.Prelude.Types.Right', V159} end end, V56))), case V160 of {'Idris.Prelude.Types.Left', E58} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V162) -> (('un--runScript'(case V1 of {'Idris.Idris.Package.MkPkgDesc', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180, V181, V182, V183, V184, V185, V186, V187) -> V185 end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V56)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, ('un--installDir'(V1))))}, V56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); {'Idris.Prelude.Types.Left', E85} -> (fun (V188) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directory "/utf8>>, ('un--installDir'(V1)))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V188)) | []]]))}, V56)) end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, V55))}, V56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V189) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V189)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in installFrom-5134'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Right', E0} -> (fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t copy file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V8)))))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V15)) | []]]))}, V16)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--installFrom-5085'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Prelude.Types.Right', E0} -> (fun (V11) -> fun (V12) -> begin (V41 = begin (V40 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> V19 end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), begin (V27 = (V24(V25))), (V26(V27)) end end end end end end end}, fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> begin (V33 = (V30(V32))), ((V31(V33))(V32)) end end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V35(V36))), (V37(V36)) end end end end}, fun (V38) -> fun (V39) -> V39 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Installing "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V8))))))))(V12))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E1} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V43) -> begin (V45 = begin (V44 = ('un--copyFile'(V5, V9, V12))), {'Idris.Prelude.Types.Right', V44} end), case V45 of {'Idris.Prelude.Types.Left', E3} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V47) -> case V47 of {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); {'Idris.Prelude.Types.Left', E6} -> (fun (V49) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t copy file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V8)))))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V49)) | []]]))}, V12)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Left', E7} -> (fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directories "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V52) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V52)) end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V53, V54)) end end}, V6)))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V50)) | []]]))}, V51)) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--copyFile-5030'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Right', E0} -> (fun (V3) -> ('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V0, V3)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Left', V4} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in build-4950'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> begin (V36 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V10)) end, case V1 of {'Idris.Idris.Package.MkPkgDesc', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V22 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V37) -> ('un--compileLibHelper'(V4, V3, V2, V9, V36, V5, V37)) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in build-4894'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V10, V11) -> begin (V12 = {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--miAsNamespace'(V10)), {'Idris.Core.Name.UN', <<"main"/utf8>>}}), fun (V13) -> ('un--compileMain'(V4, V3, V2, V12, V11, V7, V13)) end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.FC':'un--emptyFC'()), <<"No main module given"/utf8>>}, V14)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in build-4855'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V9) -> ('case--case block in case block in build-4894'(V0, V1, V2, V3, V4, V5, V6, V9, case V1 of {'Idris.Idris.Package.MkPkgDesc', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V22 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--build-4824'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case V6 of [] -> fun (V8) -> begin (V35 = begin (V9 = {'Idris.Builtin.MkPair', [], V7}), (('case--case block in build-4855'(V0, V1, V2, V3, V4, V7, V9, case V1 of {'Idris.Idris.Package.MkPkgDesc', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V23 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8)) end), case V35 of {'Idris.Prelude.Types.Left', E27} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V37) -> begin (V64 = begin (V38 = {'Idris.Builtin.MkPair', [], V7}), (('case--case block in build-4950'(V0, V1, V2, V3, V4, V7, V38, case V1 of {'Idris.Idris.Package.MkPkgDesc', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V53 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8)) end), case V64 of {'Idris.Prelude.Types.Left', E54} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V66) -> begin (V92 = (('un--runScript'(case V1 of {'Idris.Idris.Package.MkPkgDesc', E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80} -> (fun (V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91) -> V87 end(E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V8))), case V92 of {'Idris.Prelude.Types.Left', E81} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V94) -> {'Idris.Prelude.Types.Right', []} end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V95) -> {'Idris.Prelude.Types.Right', V6} end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--prepareCompilation-4720'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Prelude.Types.Just', E0} -> (fun (V10) -> begin (V11 = ('un--filterChangedModules'(('Idris.Idris2.Data.List1':'un--forget'('erased', V10)), V7))), fun (V12) -> begin (V13 = (('Idris.Idris2.Idris.ModTree':'un--buildAll'(V4, V3, V2, V11))(V12))), case V13 of {'Idris.Prelude.Types.Left', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V15, {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> case V16 of {'Idris.Idris.ModTree.MkBuildMod', E3, E4, E5} -> (fun (V17, V18, V19) -> V18 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V11))}}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V20) -> begin (V21 = (('Idris.Idris2.Idris.ModTree':'un--buildAll'(V4, V3, V2, V7))(V20))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V23, {'Idris.Prelude.Types.Nothing'}}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--filterChangedModules-4639'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> begin (V5 = ('Idris.Idris2.Idris.ModTree':'un--filterUsedByMods'(V1, V4))), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V3, V5)) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--processOptions-4525'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Right', E0} -> (fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V7) -> case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V3, V2, V5)), V6)) end end(E0)); {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V0, V10}, V11)) end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addFields-4434'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V7 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> {'Idris.Idris.Package.MkPkgDesc', V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V10, V11, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-4274'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-4222'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-4170'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-4118'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-4066'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-4014'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3966'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, {'Idris.Prelude.Types.Just', V0}, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3918'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, {'Idris.Prelude.Types.Just', V0}, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3870'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, {'Idris.Prelude.Types.Just', V0}, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3818'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V1, V0}}, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3772'(V0, V1, V2, V3, V4, V5, V6) -> case V1 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Idris.Package.MkPkgDesc', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, {'Idris.Prelude.Types.Just', V0}, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3726'(V0, V1, V2, V3, V4, V5, V6) -> case V1 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Idris.Package.MkPkgDesc', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, {'Idris.Prelude.Types.Just', V0}, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3656'(V0, V1, V2, V3, V4, V5, V6) -> case V1 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31) -> {'Idris.Idris.Package.MkPkgDesc', V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V0, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3608'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, V16, {'Idris.Prelude.Types.Just', V0}, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3560'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, V15, {'Idris.Prelude.Types.Just', V0}, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3512'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, V14, {'Idris.Prelude.Types.Just', V0}, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3464'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, V13, {'Idris.Prelude.Types.Just', V0}, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3416'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, V12, {'Idris.Prelude.Types.Just', V0}, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3368'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, V11, {'Idris.Prelude.Types.Just', V0}, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3320'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V10, {'Idris.Prelude.Types.Just', V0}, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3274'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V9, V0, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addField-3218'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V2 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> {'Idris.Idris.Package.MkPkgDesc', V8, V0, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32} end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--field,mkBound-2411'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.CommandLine.MkPkgVersionBounds', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> {'Idris.Idris.CommandLine.MkPkgVersionBounds', {'Idris.Prelude.Types.Just', V2}, V1, V7, V8} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--field,mkBound-2377'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Idris.CommandLine.MkPkgVersionBounds', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> {'Idris.Idris.CommandLine.MkPkgVersionBounds', V5, V6, {'Idris.Prelude.Types.Just', V2}, V1} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--21185-4300--in--un--toSource'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Directory':'un--nsToSource'(V4, V6, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V7, V11}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18920-2125--in--un--strField'(V0, V1, V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V3) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)), ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V6, V7)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(V2)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> fun (V8) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V9) -> {'Idris.Libraries.Text.Parser.Core.Empty', ((V1({'Idris.Core.FC.MkFC', V0, V3, V9}))(V8))} end} end end} end} end} end}.
'nested--23982-6870--in--un--pOptUpdate'(V0, V1) -> ('with--partitionOpts,pOptUpdate-6893'(V0, V1, ('nested--23982-6869--in--un--optType'(V0, V1)))).
'nested--23982-6869--in--un--optType'(V0, V1) -> case V1 of {'Idris.Idris.CommandLine.Package', E0, E1} -> (fun (V2, V3) -> {'Idris.Idris.Package.nested--23982-6865--in--un--PPackage', V0, V2, V3} end(E0, E1)); {'Idris.Idris.CommandLine.Quiet'} -> (fun () -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.Verbose'} -> (fun () -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.Timing'} -> (fun () -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.Logging', E2} -> (fun (V4) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E2)); {'Idris.Idris.CommandLine.DumpCases', E3} -> (fun (V5) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E3)); {'Idris.Idris.CommandLine.DumpLifted', E4} -> (fun (V6) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E4)); {'Idris.Idris.CommandLine.DumpVMCode', E5} -> (fun (V7) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E5)); {'Idris.Idris.CommandLine.DebugElabCheck'} -> (fun () -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end()); {'Idris.Idris.CommandLine.SetCG', E6} -> (fun (V8) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E6)); {'Idris.Idris.CommandLine.BuildDir', E7} -> (fun (V9) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E7)); {'Idris.Idris.CommandLine.OutputDir', E8} -> (fun (V10) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E8)); {'Idris.Idris.CommandLine.Directive', E9} -> (fun (V11) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E9)); {'Idris.Idris.CommandLine.ChangedModules', E10} -> (fun (V12) -> {'Idris.Idris.Package.nested--23982-6866--in--un--POpt', V0} end(E10)); {'Idris.Idris.CommandLine.ConsoleWidth', E11} -> (fun (V13) -> {'Idris.Idris.Package.nested--23982-6867--in--un--PIgnore', V0} end(E11)); {'Idris.Idris.CommandLine.Color', E12} -> (fun (V14) -> {'Idris.Idris.Package.nested--23982-6867--in--un--PIgnore', V0} end(E12)); {'Idris.Idris.CommandLine.NoBanner'} -> (fun () -> {'Idris.Idris.Package.nested--23982-6867--in--un--PIgnore', V0} end()); _ -> {'Idris.Idris.Package.nested--23982-6868--in--un--PErr', V0} end.
'nested--18920-2123--in--un--mkBound'(V0, V1, V2) -> case V1 of [E0 | E1] -> (fun (V3, V4) -> case V3 of {'Idris.Idris.Package.nested--18920-2120--in--un--LT', E2, E3, E4} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('nested--18920-2123--in--un--mkBound'(V0, V4, case V2 of {'Idris.Idris.CommandLine.MkPkgVersionBounds', E5, E6, E7, E8} -> (fun (V8, V9, V10, V11) -> {'Idris.Idris.CommandLine.MkPkgVersionBounds', V8, V9, {'Idris.Prelude.Types.Just', V6}, V7} end(E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V12) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Dependency already has an upper bound"/utf8>>} end end, case V2 of {'Idris.Idris.CommandLine.MkPkgVersionBounds', E9, E10, E11, E12} -> (fun (V13, V14, V15, V16) -> V15 end(E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E2, E3, E4)); {'Idris.Idris.Package.nested--18920-2121--in--un--GT', E13, E14, E15} -> (fun (V17, V18, V19) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('nested--18920-2123--in--un--mkBound'(V0, V4, case V2 of {'Idris.Idris.CommandLine.MkPkgVersionBounds', E16, E17, E18, E19} -> (fun (V20, V21, V22, V23) -> {'Idris.Idris.CommandLine.MkPkgVersionBounds', {'Idris.Prelude.Types.Just', V18}, V19, V22, V23} end(E16, E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V24) -> {'Idris.Libraries.Text.Parser.Core.Fail', {'Idris.Prelude.Types.Nothing'}, 1, <<"Dependency already has a lower bound"/utf8>>} end end, case V2 of {'Idris.Idris.CommandLine.MkPkgVersionBounds', E20, E21, E22, E23} -> (fun (V25, V26, V27, V28) -> V25 end(E20, E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); [] -> {'Idris.Libraries.Text.Parser.Core.Empty', V2}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--24309-7166--in--un--loadDependencies'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Context':'un--addPkg'(V3, case V5 of {'Idris.Idris.Package.MkDepends', E0, E1} -> (fun (V7, V8) -> V7 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6)) end end, V4)).
'nested--22803-5789--in--un--go'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.These':'un--bifold'('erased', V1, V10))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--bitraverseC'('erased', 'erased', 'erased', 'erased', (V3(V5)), fun (V11) -> (('un--foldlC'('erased', 'erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V23)) end end}, fun (V24) -> fun (V25) -> case V25 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V26, V27) -> begin (V28 = ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V5, [V26 | []]))), fun (V29) -> begin (V30 = ('nested--22803-5789--in--un--go'('erased', V1, 'erased', V3, V4, V28, V27, V29))), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> begin (V33 = ((V4(V28))(V29))), case V33 of {'Idris.Prelude.Types.Left', E6} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V35) -> {'Idris.Prelude.Types.Right', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E8, E9} -> (fun (V36, V37) -> ((V36(case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E10, E11} -> (fun (V38, V39) -> ((V38(V24))(V32)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V35)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', E12, E13} -> (fun (V40, V41) -> V41 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(('Idris.Idris2.Libraries.Data.StringMap':'un--toList'('erased', V11)))) end, V6)), V7)).
'nested--21185-4301--in--un--go'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> fun (V9) -> {'Idris.Prelude.Types.Right', V8} end; [E0 | E1] -> (fun (V10, V11) -> fun (V12) -> begin (V13 = (('un--addField'(V4, V3, V2, V5, V6, V10, V8))(V12))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> (('nested--21185-4301--in--un--go'(V0, V1, V2, V3, V4, V5, V6, V11, V15))(V12)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--18920-2124--in--un--depends'(V0) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Package':'un--andop'()), ('nested--18920-2122--in--un--bound'(V0)))), fun (V2) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('nested--18920-2123--in--un--mkBound'(V0, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V5, V6, V7)) end end end end end, fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V14)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V15, V16)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}))(V2)), ('Idris.Idris2.Idris.CommandLine':'un--anyBounds'()))), fun (V17) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.MkDepends', V1, V17}} end} end} end end}.
'nested--22904-5885--in--un--deleteFolder'(V0, V1, V2, V3, V4, V5, V6) -> ('nested--22904-5884--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V5)))), V6)).
'nested--22904-5886--in--un--deleteBin'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V4, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V5)), V6))))), fun (V8) -> begin (V9 = ('nested--22904-5884--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V7, <<"ttc"/utf8>>)), V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> ('nested--22904-5884--in--un--delete'(V0, V1, V2, V3, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V7, <<"ttm"/utf8>>)), V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--22904-5884--in--un--delete'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System.File':'un--removeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> case V36 of {'Idris.Prelude.Types.Right', E2} -> (fun (V37) -> case V37 of {'Idris.Builtin.MkUnit'} -> (fun () -> begin (V65 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V40, V41, V42)) end end end end end, fun (V43) -> fun (V44) -> fun (V45) -> V44 end end end, fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> begin (V51 = (V48(V50))), begin (V52 = (V49(V50))), (V51(V52)) end end end end end end end}, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> begin (V58 = (V55(V57))), ((V56(V58))(V57)) end end end end end end, fun (V59) -> fun (V60) -> fun (V61) -> begin (V62 = (V60(V61))), (V62(V61)) end end end end}, fun (V63) -> fun (V64) -> V64 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Removed: "/utf8>>, V4))))(V5))), {'Idris.Prelude.Types.Right', V65} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E3} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--18920-2122--in--un--bound'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--lte'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V1) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--18920-2120--in--un--LT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V4, V5)) end end end end, fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V6)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', V1)))), 0} | []]} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--gte'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V7) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--18920-2121--in--un--GT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V10, V11)) end end end end, fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V12)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', V7)))), 0} | []]} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--lt'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V13) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--18920-2120--in--un--LT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V16, V17)) end end end end, fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V18)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', V13)))), 1} | []]} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--gt'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V19) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--18920-2121--in--un--GT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V22, V23)) end end end end, fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V24)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', V19)))), 1} | []]} end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--eqop'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V25) -> {'Idris.Libraries.Text.Parser.Core.Empty', [{'Idris.Idris.Package.nested--18920-2120--in--un--LT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V28, V29)) end end end end, fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V30)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', V25)))), 0} | [{'Idris.Idris.Package.nested--18920-2121--in--un--GT', V0, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V33, V34)) end end end end, fun (V35) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V35)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', V25)))), 0} | []]]} end end} end} end} end} end} end}.
'dn--un--show_Show_PkgDesc'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Package: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V1 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Version: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.CommandLine':'dn--un--show_Show_PkgVersion'(case V0 of {'Idris.Idris.Package.MkPkgDesc', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V27 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Authors: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.Package.MkPkgDesc', E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74} -> (fun (V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75) -> V53 end(E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V76) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Maintainers: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V76, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101) -> V80 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V102) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"License: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V102, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V107 end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V128) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Brief: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V128, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153) -> V134 end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V154) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"ReadMe: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V154, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174} -> (fun (V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179) -> V161 end(E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V180) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"HomePage: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V180, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199} -> (fun (V181, V182, V183, V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205) -> V188 end(E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V206) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"SourceLoc: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V206, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224} -> (fun (V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231) -> V215 end(E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V232) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"BugTracker: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V232, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249} -> (fun (V233, V234, V235, V236, V237, V238, V239, V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257) -> V242 end(E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246, E247, E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Depends: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V258) -> ('dn--un--show_Show_Depends'(V258)) end, fun (V259) -> fun (V260) -> ('dn--un--showPrec_Show_Depends'(V259, V260)) end end}, case V0 of {'Idris.Idris.Package.MkPkgDesc', E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274} -> (fun (V261, V262, V263, V264, V265, V266, V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285) -> V271 end(E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272, E273, E274)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Modules: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V286) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V286)) end, fun (V287) -> fun (V288) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V287, V288)) end end}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V289) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V289)) end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299} -> (fun (V290, V291, V292, V293, V294, V295, V296, V297, V298, V299, V300, V301, V302, V303, V304, V305, V306, V307, V308, V309, V310, V311, V312, V313, V314) -> V301 end(E275, E276, E277, E278, E279, E280, E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V315) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Main: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V315)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324} -> (fun (V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331, V332, V333, V334, V335, V336, V337, V338, V339, V340) -> V328 end(E300, E301, E302, E303, E304, E305, E306, E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V341) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Exec: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V341, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349} -> (fun (V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366) -> V355 end(E325, E326, E327, E328, E329, E330, E331, E332, E333, E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V367) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Library: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V367, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374} -> (fun (V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386, V387, V388, V389, V390, V391, V392) -> V382 end(E350, E351, E352, E353, E354, E355, E356, E357, E358, E359, E360, E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V393) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Opts: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V393)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399} -> (fun (V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414, V415, V416, V417, V418) -> V409 end(E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385, E386, E387, E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V419) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"SourceDir: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V419, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424} -> (fun (V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442, V443, V444) -> V436 end(E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412, E413, E414, E415, E416, E417, E418, E419, E420, E421, E422, E423, E424)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V445) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"BuildDir: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V445, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449} -> (fun (V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470) -> V463 end(E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439, E440, E441, E442, E443, E444, E445, E446, E447, E448, E449)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V471) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OutputDir: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V471, <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474} -> (fun (V472, V473, V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496) -> V490 end(E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466, E467, E468, E469, E470, E471, E472, E473, E474)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V497) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Prebuild: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V497)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499} -> (fun (V498, V499, V500, V501, V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522) -> V517 end(E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493, E494, E495, E496, E497, E498, E499)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V523) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postbuild: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V523)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524} -> (fun (V524, V525, V526, V527, V528, V529, V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548) -> V544 end(E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520, E521, E522, E523, E524)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V549) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Preinstall: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V549)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549} -> (fun (V550, V551, V552, V553, V554, V555, V556, V557, V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574) -> V571 end(E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547, E548, E549)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V575) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postinstall: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V575)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574} -> (fun (V576, V577, V578, V579, V580, V581, V582, V583, V584, V585, V586, V587, V588, V589, V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600) -> V598 end(E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V601) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Preclean: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V601)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599} -> (fun (V602, V603, V604, V605, V606, V607, V608, V609, V610, V611, V612, V613, V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626) -> V625 end(E575, E576, E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V627) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Postclean: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V627)), <<"\x{a}"/utf8>>)))) end end, case V0 of {'Idris.Idris.Package.MkPkgDesc', E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620, E621, E622, E623, E624} -> (fun (V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638, V639, V640, V641, V642, V643, V644, V645, V646, V647, V648, V649, V650, V651, V652) -> V652 end(E600, E601, E602, E603, E604, E605, E606, E607, E608, E609, E610, E611, E612, E613, E614, E615, E616, E617, E618, E619, E620, E621, E622, E623, E624)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
'dn--un--show_Show_Depends'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.Package.MkDepends', E0, E1} -> (fun (V1, V2) -> V1 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Idris.CommandLine':'dn--un--show_Show_PkgVersionBounds'(case V0 of {'Idris.Idris.Package.MkDepends', E2, E3} -> (fun (V3, V4) -> V4 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'dn--un--showPrec_Show_PkgDesc'(V0, V1) -> ('dn--un--show_Show_PkgDesc'(V1)).
'dn--un--showPrec_Show_Depends'(V0, V1) -> ('dn--un--show_Show_Depends'(V1)).
'dn--un--__Impl_Show_PkgDesc'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_PkgDesc'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_PkgDesc'(V1, V2)) end end}.
'dn--un--__Impl_Show_Depends'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_Depends'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_Depends'(V1, V2)) end end}.
'un--runScript'(V0) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V2) -> case V2 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V3, V4) -> fun (V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Erlang.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, V4))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E3} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V36) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(V36, 0)) of 0 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.GenericMsg', V3, <<"Script failed"/utf8>>}, V5)); 1 -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--runRepl'(V0, V1, V2, V3, V4) -> begin (V5 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V8 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V4))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V15 = case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V11) -> begin (V12 = ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V0, V7, V1, V10, V2, V11, V4))), case V12 of {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V14) -> (('Idris.Idris2.Idris.REPL':'un--displayErrors'(V0, V7, V1, V10, V2, V14))(V4)) end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> ('Idris.Idris2.Idris.REPL':'un--repl'(V0, V7, V1, V10, V2, V4)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processPackageOpts'(V0, V1, V2, V3, V4) -> begin (V5 = {'Idris.Prelude.Types.Right', ('un--partitionOpts'(V3))}), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of {'Idris.Idris.Package.MkPFR', E2, E3, E4} -> (fun (V8, V9, V10) -> case V8 of [E5 | E6] -> (fun (V11, V12) -> begin (V43 = begin (V13 = [V11 | V12]), case V10 of 0 -> begin (V41 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--errorMsg'()), <<"\x{a}"/utf8>>))))(V4))), {'Idris.Prelude.Types.Right', V41} end; 1 -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V42) -> ('un--processPackage'(V0, V1, V2, V9, V42)) end, V13))(V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V43 of {'Idris.Prelude.Types.Left', E7} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V45) -> {'Idris.Prelude.Types.Right', 0} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); [] -> {'Idris.Prelude.Types.Right', 1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--processPackage'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> ('case--processPackage-6344'(V5, V6, V3, V2, V1, V0, ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Data.String':'un--isSuffixOf'(<<".ipkg"/utf8>>, V6)))))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--processOptions'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V5, V6) -> ('case--processOptions-4525'(V5, V6, V1, V0, ('Idris.Idris2.Idris.CommandLine':'un--getOpts'(('Idris.Idris2.Data.String':'un--words'(V6)))))) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prepareCompilation'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V35 = (('un--processOptions'(V0, V2, case V3 of {'Idris.Idris.Package.MkPkgDesc', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V25 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V35 of {'Idris.Prelude.Types.Left', E27} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V37) -> begin (V38 = ('un--addDeps'(V0, V3, V5))), case V38 of {'Idris.Prelude.Types.Left', E29} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V40) -> begin (V44 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V41) -> case V41 of {'Idris.Prelude.Types.Left', E31} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Idris.SetOptions':'un--preOptions'(V0, V2, V4)), V5))), case V44 of {'Idris.Prelude.Types.Left', E33} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V46) -> begin (V72 = (('un--runScript'(case V3 of {'Idris.Idris.Package.MkPkgDesc', E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59} -> (fun (V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V66 end(E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V72 of {'Idris.Prelude.Types.Left', E60} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V74) -> begin (V153 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V75) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V75)) end, case V3 of {'Idris.Idris.Package.MkPkgDesc', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100) -> V87 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V101) -> [('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V101)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V102) -> ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V102)) end, case V3 of {'Idris.Idris.Package.MkPkgDesc', E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111} -> (fun (V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127) -> V114 end(E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))] end end, case V3 of {'Idris.Idris.Package.MkPkgDesc', E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> V140 end(E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V154 = ('Idris.Idris2.Idris.ModTree':'un--getAllBuildMods'(V0, V1, V2, V153, V5))), case V154 of {'Idris.Prelude.Types.Left', E137} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E137)); {'Idris.Prelude.Types.Right', E138} -> (fun (V156) -> begin (V157 = ('Idris.Idris2.Core.Context':'un--getSession'(V0, V5))), case V157 of {'Idris.Prelude.Types.Left', E139} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E139)); {'Idris.Prelude.Types.Right', E140} -> (fun (V159) -> (('case--prepareCompilation-4720'(V4, V3, V2, V1, V0, V9, V153, V156, V159, case V159 of {'Idris.Core.Options.MkSessionOpts', E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155} -> (fun (V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174) -> V166 end(E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end(E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--partitionOpts'(V0) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', fun (V1) -> ('nested--23982-6870--in--un--pOptUpdate'(V0, V1)) end, {'Idris.Idris.Package.MkPFR', [], [], 1}, V0)).
'un--parsePkgFile'(V0, V1, V2, V3, V4) -> begin (V7 = begin (V6 = ('Idris.Idris2.Parser.Package':'un--parseFile'('erased', V3, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--parsePkgDesc'(V3)), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--eoi'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V5} end} end end}, V4))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> case V9 of {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> case V10 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V11, V12) -> ('un--addFields'(V0, V1, V2, V12, ('un--initPkgDesc'(V11)), V4)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Left', E5} -> (fun (V13) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V13, V4)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--parsePkgDesc'(V0) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V3, V4)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"package"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()), fun () -> fun (V5) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Libraries.Text.Parser':'un--many'('erased', 'erased', ('un--field'(V0)))), fun (V6) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', V5, V6}} end} end end} end}.
'un--installFrom'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V3))))))), begin (V5 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V1, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(<<"ttc"/utf8>>, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V4, <<"ttc"/utf8>>))))))), begin (V6 = ('Idris.Idris2.Data.List':'un--reverse'('erased', ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> [] end, ('Idris.Idris2.Data.List':'un--tail\x{27}'('erased', ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V3))))))))), begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--joinPath'(V6))), begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, V7))), begin (V9 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V2, ('Idris.Idris2.Libraries.Utils.Path':'un--<.>'(V4, <<"ttc"/utf8>>))))), fun (V10) -> begin (V12 = begin (V11 = (('Idris.Idris2.Core.Directory':'un--mkdirAll'(V7))(V10))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> case V14 of {'Idris.Prelude.Types.Right', E2} -> (fun (V15) -> begin (V44 = begin (V43 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> V22 end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> begin (V29 = (V26(V28))), begin (V30 = (V27(V28))), (V29(V30)) end end end end end end end}, fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> begin (V36 = (V33(V35))), ((V34(V36))(V35)) end end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> begin (V40 = (V38(V39))), (V40(V39)) end end end end}, fun (V41) -> fun (V42) -> V42 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Installing "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V8))))))))(V10))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E3} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V46) -> begin (V48 = begin (V47 = ('un--copyFile'(V5, V9, V10))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E5} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V50) -> case V50 of {'Idris.Prelude.Types.Right', E7} -> (fun (V51) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E7)); {'Idris.Prelude.Types.Left', E8} -> (fun (V52) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t copy file "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" to "/utf8>>, V8)))))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V52)) | []]]))}, V10)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); {'Idris.Prelude.Types.Left', E9} -> (fun (V53) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directories "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V54) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V54)) end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V55, V56)) end end}, V6)))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V53)) | []]]))}, V10)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end end end.
'un--installDir'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(case V0 of {'Idris.Idris.Package.MkPkgDesc', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25) -> V1 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-"/utf8>>, ('Idris.Idris2.Idris.CommandLine':'dn--un--show_Show_PkgVersion'(case V0 of {'Idris.Idris.Package.MkPkgDesc', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V27 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))))).
'un--install'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V55 = case case case V8 of {'Idris.Core.Context.MkDefs', E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V13 end(E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V36, V37, V38, V39, V40, V41, V42, V43, V44) -> V36 end(E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkDirs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V47 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V81 = (('un--runScript'(case V2 of {'Idris.Idris.Package.MkPkgDesc', E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72} -> (fun (V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80) -> V77 end(E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V81 of {'Idris.Prelude.Types.Left', E73} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E73)); {'Idris.Prelude.Types.Right', E74} -> (fun (V83) -> begin (V162 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V84) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V84)) end, case V2 of {'Idris.Idris.Package.MkPkgDesc', E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99} -> (fun (V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109) -> V96 end(E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V110) -> [('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V110)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V111) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V111)) end, case V2 of {'Idris.Idris.Package.MkPkgDesc', E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124} -> (fun (V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136) -> V123 end(E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))] end end, case V2 of {'Idris.Idris.Package.MkPkgDesc', E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149} -> (fun (V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161) -> V149 end(E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148, E149)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V191 = begin (V190 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V165, V166, V167)) end end end end end, fun (V168) -> fun (V169) -> fun (V170) -> V169 end end end, fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> begin (V176 = (V173(V175))), begin (V177 = (V174(V175))), (V176(V177)) end end end end end end end}, fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> begin (V183 = (V180(V182))), ((V181(V183))(V182)) end end end end end end, fun (V184) -> fun (V185) -> fun (V186) -> begin (V187 = (V185(V186))), (V187(V186)) end end end end}, fun (V188) -> fun (V189) -> V189 end end}))(V4))), {'Idris.Prelude.Types.Right', V190} end), case V191 of {'Idris.Prelude.Types.Left', E150} -> (fun (V192) -> {'Idris.Prelude.Types.Left', V192} end(E150)); {'Idris.Prelude.Types.Right', E151} -> (fun (V193) -> case V193 of {'Idris.Prelude.Types.Just', E152} -> (fun (V194) -> begin (V241 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case case case V8 of {'Idris.Core.Context.MkDefs', E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198} -> (fun (V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208, V209, V210, V211, V212, V213, V214, V215, V216, V217, V218, V219, V220, V221) -> V199 end(E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E163, E164, E165, E166, E167, E168, E169, E170, E171} -> (fun (V222, V223, V224, V225, V226, V227, V228, V229, V230) -> V222 end(E163, E164, E165, E166, E167, E168, E169, E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkDirs', E153, E154, E155, E156, E157, E158, E159, E160, E161, E162} -> (fun (V231, V232, V233, V234, V235, V236, V237, V238, V239, V240) -> V236 end(E153, E154, E155, E156, E157, E158, E159, E160, E161, E162)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Idris.Version':'un--showVersion'(1, ('Idris.Idris2.Idris.Version':'un--version'())))))))), begin (V270 = begin (V269 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V242) -> fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V244, V245, V246)) end end end end end, fun (V247) -> fun (V248) -> fun (V249) -> V248 end end end, fun (V250) -> fun (V251) -> fun (V252) -> fun (V253) -> fun (V254) -> begin (V255 = (V252(V254))), begin (V256 = (V253(V254))), (V255(V256)) end end end end end end end}, fun (V257) -> fun (V258) -> fun (V259) -> fun (V260) -> fun (V261) -> begin (V262 = (V259(V261))), ((V260(V262))(V261)) end end end end end end, fun (V263) -> fun (V264) -> fun (V265) -> begin (V266 = (V264(V265))), (V266(V265)) end end end end}, fun (V267) -> fun (V268) -> V268 end end}, V241))(V4))), {'Idris.Prelude.Types.Right', V269} end), case V270 of {'Idris.Prelude.Types.Left', E199} -> (fun (V271) -> {'Idris.Prelude.Types.Left', V271} end(E199)); {'Idris.Prelude.Types.Right', E200} -> (fun (V272) -> case V272 of 0 -> begin (V274 = begin (V273 = (('Idris.Idris2.Core.Directory':'un--mkdirAll'(('un--installDir'(V2))))(V4))), {'Idris.Prelude.Types.Right', V273} end), case V274 of {'Idris.Prelude.Types.Left', E201} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E201)); {'Idris.Prelude.Types.Right', E202} -> (fun (V276) -> case V276 of {'Idris.Prelude.Types.Right', E203} -> (fun (V277) -> begin (V306 = begin (V305 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V278) -> fun (V279) -> fun (V280) -> fun (V281) -> fun (V282) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V280, V281, V282)) end end end end end, fun (V283) -> fun (V284) -> fun (V285) -> V284 end end end, fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> fun (V290) -> begin (V291 = (V288(V290))), begin (V292 = (V289(V290))), (V291(V292)) end end end end end end end}, fun (V293) -> fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> begin (V298 = (V295(V297))), ((V296(V298))(V297)) end end end end end end, fun (V299) -> fun (V300) -> fun (V301) -> begin (V302 = (V300(V301))), (V302(V301)) end end end end}, fun (V303) -> fun (V304) -> V304 end end}, ('un--installDir'(V2))))(V4))), {'Idris.Prelude.Types.Right', V305} end), case V306 of {'Idris.Prelude.Types.Left', E204} -> (fun (V307) -> {'Idris.Prelude.Types.Left', V307} end(E204)); {'Idris.Prelude.Types.Right', E205} -> (fun (V308) -> case V308 of 0 -> begin (V310 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V309) -> ('un--installFrom'(V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V194, V55)), ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V241, ('un--installDir'(V2)))), V309)) end, V162))(V4))), case V310 of {'Idris.Prelude.Types.Left', E206} -> (fun (V311) -> {'Idris.Prelude.Types.Left', V311} end(E206)); {'Idris.Prelude.Types.Right', E207} -> (fun (V312) -> begin (V345 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V313) -> case V313 of {'Idris.Prelude.Types.Left', E208} -> (fun (V314) -> {'Idris.Prelude.Types.Left', V314} end(E208)); {'Idris.Prelude.Types.Right', E209} -> (fun (V315) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E209)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V316) -> begin (V344 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V317) -> fun (V318) -> fun (V319) -> fun (V320) -> fun (V321) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V319, V320, V321)) end end end end end, fun (V322) -> fun (V323) -> fun (V324) -> V323 end end end, fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> begin (V330 = (V327(V329))), begin (V331 = (V328(V329))), (V330(V331)) end end end end end end end}, fun (V332) -> fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> begin (V337 = (V334(V336))), ((V335(V337))(V336)) end end end end end end, fun (V338) -> fun (V339) -> fun (V340) -> begin (V341 = (V339(V340))), (V341(V340)) end end end end}, fun (V342) -> fun (V343) -> V343 end end}, V194))(V316))), {'Idris.Prelude.Types.Right', V344} end end, V4))), case V345 of {'Idris.Prelude.Types.Left', E210} -> (fun (V346) -> {'Idris.Prelude.Types.Left', V346} end(E210)); {'Idris.Prelude.Types.Right', E211} -> (fun (V347) -> (('un--runScript'(case V2 of {'Idris.Idris.Package.MkPkgDesc', E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236} -> (fun (V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358, V359, V360, V361, V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372) -> V370 end(E212, E213, E214, E215, E216, E217, E218, E219, E220, E221, E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, ('un--installDir'(V2))))}, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E203)); {'Idris.Prelude.Types.Left', E237} -> (fun (V373) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t make directory "/utf8>>, ('un--installDir'(V2)))) | [('Idris.Idris2.Erlang.System.File':'dn--un--show_Show_FileError'(V373)) | []]]))}, V4)) end(E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E202)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t change directory to "/utf8>>, V241))}, V4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E200)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E152)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--initPkgDesc'(V0) -> {'Idris.Idris.Package.MkPkgDesc', V0, [0 | [0 | []]], <<"Anonymous"/utf8>>, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, [], [], {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}, {'Idris.Prelude.Types.Nothing'}}.
'un--foldlC'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', E0, E1, E2} -> (fun (V6, V7, V8) -> fun (V9) -> (((((V7('erased'))('erased'))(fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), case V14 of {'Idris.Prelude.Types.Left', E3} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V16) -> (('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', V4, V12, V16))(V13)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end))(fun (V10) -> {'Idris.Prelude.Types.Right', V5} end))(V9)) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--foldWithKeysC'(V0, V1, V2, V3, V4, V5, V6) -> ('nested--22803-5789--in--un--go'('erased', V2, 'erased', V4, V3, [], V5, V6)).
'un--findIpkg'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('Idris.Idris2.Core.Directory':'un--findIpkgFile'(V4))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E2} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> begin (V46 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V17) -> begin (V45 = (('Idris.Idris2.Erlang.System.Directory':'un--changeDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> V24 end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> begin (V31 = (V28(V30))), begin (V32 = (V29(V30))), (V31(V32)) end end end end end end end}, fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V35(V37))), ((V36(V38))(V37)) end end end end end end, fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V40(V41))), (V42(V41)) end end end end}, fun (V43) -> fun (V44) -> V44 end end}, V10))(V17))), {'Idris.Prelude.Types.Right', V45} end end, V4))), case V46 of {'Idris.Prelude.Types.Left', E9} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V48) -> begin (V49 = ('Idris.Idris2.Core.Context':'un--setWorkingDir'(V0, V10, V4))), case V49 of {'Idris.Prelude.Types.Left', E11} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V51) -> begin (V54 = begin (V53 = ('Idris.Idris2.Parser.Package':'un--parseFile'('erased', V12, {'Idris.Libraries.Text.Parser.Core.SeqEat', 0, ('un--parsePkgDesc'(V12)), fun () -> fun (V52) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--eoi'()), fun () -> {'Idris.Libraries.Text.Parser.Core.Empty', V52} end} end end}, V4))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E13} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V56) -> case V56 of {'Idris.Prelude.Types.Right', E15} -> (fun (V57) -> case V57 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V58, V59) -> begin (V60 = ('un--addFields'(V0, V2, V1, V59, ('un--initPkgDesc'(V58)), V4))), case V60 of {'Idris.Prelude.Types.Left', E18} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V62) -> begin (V91 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V64) -> fun (V65) -> ('Idris.Idris2.Core.Context':'un--setBuildDir'(V0, V64, V65)) end end end, case V62 of {'Idris.Idris.Package.MkPkgDesc', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90) -> V83 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V91 of {'Idris.Prelude.Types.Left', E45} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V93) -> begin (V119 = ('Idris.Idris2.Core.Context':'un--setOutputDir'(V0, case V62 of {'Idris.Idris.Package.MkPkgDesc', E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71} -> (fun (V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118) -> V112 end(E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V119 of {'Idris.Prelude.Types.Left', E72} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V121) -> begin (V147 = (('un--processOptions'(V0, V1, case V62 of {'Idris.Idris.Package.MkPkgDesc', E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98} -> (fun (V122, V123, V124, V125, V126, V127, V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146) -> V137 end(E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V147 of {'Idris.Prelude.Types.Left', E99} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V149) -> begin (V175 = (('nested--24309-7166--in--un--loadDependencies'(V3, V2, V1, V0, case V62 of {'Idris.Idris.Package.MkPkgDesc', E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125} -> (fun (V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174) -> V160 end(E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V175 of {'Idris.Prelude.Types.Left', E126} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V177) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E128} -> (fun (V178) -> begin (V179 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V13, V178))), begin (V180 = ('Idris.Idris2.Idris.REPLOpts':'un--setSource'(V1, V179, V4))), case V180 of {'Idris.Prelude.Types.Left', E129} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V182) -> begin (V184 = begin (V183 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V183} end), case V184 of {'Idris.Prelude.Types.Left', E131} -> (fun (V185) -> {'Idris.Prelude.Types.Left', V185} end(E131)); {'Idris.Prelude.Types.Right', E132} -> (fun (V186) -> begin (V204 = begin (V203 = ('erlang':'put'(V1, case V186 of {'Idris.Idris.REPLOpts.MkREPLOpts', E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148} -> (fun (V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202) -> {'Idris.Idris.REPLOpts.MkREPLOpts', V187, V188, {'Idris.Prelude.Types.Just', V179}, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202} end(E133, E134, E135, E136, E137, E138, E139, E140, E141, E142, E143, E144, E145, E146, E147, E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V203} end), case V204 of {'Idris.Prelude.Types.Left', E149} -> (fun (V205) -> {'Idris.Prelude.Types.Left', V205} end(E149)); {'Idris.Prelude.Types.Right', E150} -> (fun (V206) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V179}} end(E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E128)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); {'Idris.Prelude.Types.Left', E151} -> (fun (V207) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', V207, V4)) end(E151)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V3} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--filterChangedModules'(V0, V1) -> ('case--filterChangedModules-4639'(V1, V0, ('Idris.Idris2.Data.List':'un--partition'('erased', fun (V2) -> ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V3) -> fun (V4) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--==_Eq_ModuleIdent'(V3, V4)) end end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'dn--un--/=_Eq_ModuleIdent'(V5, V6)) end end}, case V2 of {'Idris.Idris.ModTree.MkBuildMod', E0, E1, E2} -> (fun (V7, V8, V9) -> V8 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V0)) end, V1)))).
'un--field'(V0) -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V1) -> fun (V2) -> {'Idris.Idris.Package.PAuthors', V1, V2} end end, <<"authors"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V3) -> fun (V4) -> {'Idris.Idris.Package.PMaintainers', V3, V4} end end, <<"maintainers"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V5) -> fun (V6) -> {'Idris.Idris.Package.PLicense', V5, V6} end end, <<"license"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V7) -> fun (V8) -> {'Idris.Idris.Package.PBrief', V7, V8} end end, <<"brief"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V9) -> fun (V10) -> {'Idris.Idris.Package.PReadMe', V9, V10} end end, <<"readme"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V11) -> fun (V12) -> {'Idris.Idris.Package.PHomePage', V11, V12} end end, <<"homepage"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V13) -> fun (V14) -> {'Idris.Idris.Package.PSourceLoc', V13, V14} end end, <<"sourceloc"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V15) -> fun (V16) -> {'Idris.Idris.Package.PBugTracker', V15, V16} end end, <<"bugtracker"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V17) -> fun (V18) -> {'Idris.Idris.Package.POpts', V17, V18} end end, <<"options"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V19) -> fun (V20) -> {'Idris.Idris.Package.POpts', V19, V20} end end, <<"opts"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V21) -> fun (V22) -> {'Idris.Idris.Package.PSourceDir', V21, V22} end end, <<"sourcedir"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V23) -> fun (V24) -> {'Idris.Idris.Package.PBuildDir', V23, V24} end end, <<"builddir"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V25) -> fun (V26) -> {'Idris.Idris.Package.POutputDir', V25, V26} end end, <<"outputdir"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V27) -> fun (V28) -> {'Idris.Idris.Package.PPrebuild', V27, V28} end end, <<"prebuild"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V29) -> fun (V30) -> {'Idris.Idris.Package.PPostbuild', V29, V30} end end, <<"postbuild"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V31) -> fun (V32) -> {'Idris.Idris.Package.PPreinstall', V31, V32} end end, <<"preinstall"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V33) -> fun (V34) -> {'Idris.Idris.Package.PPostinstall', V33, V34} end end, <<"postinstall"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V35) -> fun (V36) -> {'Idris.Idris.Package.PPreclean', V35, V36} end end, <<"preclean"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('nested--18920-2125--in--un--strField'(V0, fun (V37) -> fun (V38) -> {'Idris.Idris.Package.PPostclean', V37, V38} end end, <<"postclean"/utf8>>)), fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)) end)) end)) end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V39) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 0 end)), ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V42, V43)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"version"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', 0, ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Libraries.Text.Parser':'un--sepBy1'('erased', 'erased', 'erased', 0, ('Idris.Idris2.Parser.Rule.Package':'un--dot\x{27}'()), ('Idris.Idris2.Parser.Rule.Package':'un--integerLit'()))), fun () -> fun (V44) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V45) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PVersion', {'Idris.Core.FC.MkFC', V0, V39, V45}, ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', V48, V49)) end end end end, fun (V50) -> ('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(V50)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', V44))))}} end} end end} end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)) end)) end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V51) -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)), ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V54, V55)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"version"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> fun (V56) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V57) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PVersionDep', {'Idris.Core.FC.MkFC', V0, V51, V57}, V56}} end} end end} end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)) end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)) end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)), ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V60, V61)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"depends"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--sep'('erased', ('nested--18920-2124--in--un--depends'(V0)))), fun () -> fun (V62) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PDepends', V62}} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)) end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)) end)), ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V65, V66)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"modules"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> 1 end)), ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--sep'('erased', {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V67) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--moduleIdent'()), fun () -> fun (V68) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V69) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Builtin.MkPair', {'Idris.Core.FC.MkFC', V0, V67, V69}, V68}} end} end end} end})), fun () -> fun (V70) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PModules', V70}} end end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)) end)) end)), ('Idris.Idris2.Prelude.Basics':'un--&&'(('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)) end)), ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V73, V74)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"main"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(1, fun () -> 0 end)), ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 0, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V75) -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, ('Idris.Idris2.Parser.Rule.Package':'un--moduleIdent'()), fun () -> fun (V76) -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, ('Idris.Idris2.Parser.Rule.Common':'un--location'({'Idris.Parser.Lexer.Package.Token'})), fun (V77) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PMainMod', {'Idris.Core.FC.MkFC', V0, V75, V77}, V76}} end} end end} end} end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.Alt', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)), ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)) end)), {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)), ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V80, V81)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"executable"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)), ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> case ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)) of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()) end}, fun () -> fun (V82) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PExec', V82}} end end}; 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()) end}, fun () -> fun (V83) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PExec', V83}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end}, fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(0, fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)) end)), ('Idris.Idris2.Prelude.Interfaces':'un--ignore'('erased', 'erased', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Libraries.Text.Parser.Core':'dn--un--map_Functor_((Grammar $tok) $c)'('erased', 'erased', 'erased', 0, V86, V87)) end end end end, ('Idris.Idris2.Parser.Rule.Package':'un--exactProperty'(<<"library"/utf8>>)))), fun () -> {'Idris.Libraries.Text.Parser.Core.ThenEat', ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)), fun () -> 1 end)), ('Idris.Idris2.Parser.Rule.Package':'un--equals'()), fun () -> case ('Idris.Idris2.Prelude.Basics':'un--&&'(0, fun () -> 0 end)) of 1 -> {'Idris.Libraries.Text.Parser.Core.SeqEmpty', 1, 1, {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()) end}, fun () -> fun (V88) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PLibrary', V88}} end end}; 0 -> {'Idris.Libraries.Text.Parser.Core.SeqEat', 1, {'Idris.Libraries.Text.Parser.Core.Alt', 0, 0, ('Idris.Idris2.Parser.Rule.Package':'un--stringLit'()), fun () -> ('Idris.Idris2.Parser.Rule.Package':'un--packageName'()) end}, fun () -> fun (V89) -> {'Idris.Libraries.Text.Parser.Core.Empty', {'Idris.Idris.Package.PLibrary', V89}} end end}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end} end}.
'un--errorMsg'() -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"Not all command line options can be used to override package options.\x{a}"/utf8>> | [<<"Overridable options are:"/utf8>> | [<<"    --quiet"/utf8>> | [<<"    --verbose"/utf8>> | [<<"    --console-width <console width>"/utf8>> | [<<"    --color, --colour"/utf8>> | [<<"    --no-color, --no-colour"/utf8>> | [<<"    --timing"/utf8>> | [<<"    --log <log level>"/utf8>> | [<<"    --dumpcases <file>"/utf8>> | [<<"    --dumplifted <file>"/utf8>> | [<<"    --dumpvmcode <file>"/utf8>> | [<<"    --debug-elab-check"/utf8>> | [<<"    --codegen <cg>"/utf8>> | [<<"    --directive <directive>"/utf8>> | [<<"    --build-dir <dir>"/utf8>> | [<<"    --output-dir <dir>"/utf8>> | [<<"    --changed-modules <namespaces>"/utf8>> | []]]]]]]]]]]]]]]]]]])).
'un--copyFile'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Libraries.Utils.Binary':'un--readFromFile'(V0, V2))), case V3 of {'Idris.Prelude.Types.Right', E0} -> (fun (V4) -> (('Idris.Idris2.Libraries.Utils.Binary':'un--writeToFile'(V1, V4))(V2)) end(E0)); {'Idris.Prelude.Types.Left', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileMain'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V17 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V13) -> case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V16) -> ('Idris.Idris2.Idris.REPL':'un--loadMainFile'(V0, V12, V1, V9, V2, V4, V16)) end, V6))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V20) -> case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V23) -> ('Idris.Idris2.Idris.REPL':'un--compileExp'(V0, V12, V1, V9, V2, {'Idris.Idris.Syntax.PRef', ('Idris.Idris2.Idris.REPLOpts':'un--replFC'()), V3}, V5, V23)) end, V6)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileLibHelper'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.UnifyState.UST'}, ('Idris.Idris2.Core.UnifyState':'un--initUState'()), V6))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('Idris.Idris2.Data.Maybe':'un--fromMaybe'('erased', fun () -> V4 end, V5))), begin (V14 = ('Idris.Idris2.Idris.ModTree':'un--loadModules'(V0, V1, V9, V12, V2, V13, V6))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V17) -> case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V20) -> ('Idris.Idris2.Idris.REPL':'un--compileLib'(V0, V2, V3, V5, V20)) end, V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--clean'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V34 = (('un--runScript'(case V2 of {'Idris.Idris.Package.MkPkgDesc', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33) -> V32 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V34 of {'Idris.Prelude.Types.Left', E27} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V36) -> begin (V115 = ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V37) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V37)) end, case V2 of {'Idris.Idris.Package.MkPkgDesc', E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V49 end(E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end, fun () -> fun (V63) -> [('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V63)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V64) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V64)) end, case V2 of {'Idris.Idris.Package.MkPkgDesc', E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78} -> (fun (V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89) -> V76 end(E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))] end end, case V2 of {'Idris.Idris.Package.MkPkgDesc', E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103} -> (fun (V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114) -> V102 end(E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V117 = ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V116) -> ('case--clean-5994'(V3, V2, V1, V0, V8, V115, V116, ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V116)))) end, V115))), begin (V146 = begin (V145 = (('Idris.Idris2.Erlang.System.Directory':'un--currentDir'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V120, V121, V122)) end end end end end, fun (V123) -> fun (V124) -> fun (V125) -> V124 end end end, fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> begin (V131 = (V128(V130))), begin (V132 = (V129(V130))), (V131(V132)) end end end end end end end}, fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> begin (V138 = (V135(V137))), ((V136(V138))(V137)) end end end end end end, fun (V139) -> fun (V140) -> fun (V141) -> begin (V142 = (V140(V141))), (V142(V141)) end end end end}, fun (V143) -> fun (V144) -> V144 end end}))(V4))), {'Idris.Prelude.Types.Right', V145} end), case V146 of {'Idris.Prelude.Types.Left', E104} -> (fun (V147) -> {'Idris.Prelude.Types.Left', V147} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V148) -> case V148 of {'Idris.Prelude.Types.Just', E106} -> (fun (V149) -> begin (V186 = case case V8 of {'Idris.Core.Context.MkDefs', E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142} -> (fun (V150, V151, V152, V153, V154, V155, V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176) -> V154 end(E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138, E139, E140, E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Core.Options.MkOptions', E107, E108, E109, E110, E111, E112, E113, E114, E115} -> (fun (V177, V178, V179, V180, V181, V182, V183, V184, V185) -> V177 end(E107, E108, E109, E110, E111, E112, E113, E114, E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V197 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V149, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V186 of {'Idris.Core.Options.MkDirs', E143, E144, E145, E146, E147, E148, E149, E150, E151, E152} -> (fun (V187, V188, V189, V190, V191, V192, V193, V194, V195, V196) -> V189 end(E143, E144, E145, E146, E147, E148, E149, E150, E151, E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<"ttc"/utf8>>))))), begin (V198 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V149, ('Idris.Idris2.Core.Options':'un--outputDirWithDefault'(V186))))), begin (V205 = ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', fun (V199) -> fun (V200) -> begin (V201 = ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V200))), begin (V202 = ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V200))), ('Idris.Idris2.Libraries.Data.StringTrie':'un--insertWith'('erased', ('Idris.Idris2.Data.List':'un--reverse'('erased', V201)), fun (V203) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> [V202 | []] end, fun () -> fun (V204) -> [V202 | V204] end end, V203)) end, V199)) end end end end, ('Idris.Idris2.Libraries.Data.StringTrie':'un--empty'('erased')), V117))), begin (V231 = ('un--foldWithKeysC'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V206) -> fun (V207) -> ('Idris.Idris2.Prelude.Interfaces':'dn--un--<+>_Semigroup_(|Unit,MkUnit|)'(V206, V207)) end end, ('Idris.Idris2.Prelude.Interfaces':'dn--un--neutral_Monoid_(|Unit,MkUnit|)'())}, fun (V208) -> fun (V209) -> ('nested--22904-5885--in--un--deleteFolder'(V3, V2, V1, V0, V197, V208, V209)) end end, fun (V210) -> fun (V211) -> fun (V212) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V213) -> case V213 of {'Idris.Prelude.Types.Left', E153} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V215) -> {'Idris.Prelude.Types.Right', (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V218, V219, V220)) end end end end end, fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V223, V224, V225)) end end end end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V227)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V228) -> fun (V229) -> ('Idris.Idris2.Prelude.Interfaces':'dn--un--<+>_Semigroup_(|Unit,MkUnit|)'(V228, V229)) end end, ('Idris.Idris2.Prelude.Interfaces':'dn--un--neutral_Monoid_(|Unit,MkUnit|)'())}}))(V215))} end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V230) -> ('nested--22904-5886--in--un--deleteBin'(V3, V2, V1, V0, V197, V210, V230)) end, V211, [])), V212)) end end end, V205, V4))), case V231 of {'Idris.Prelude.Types.Left', E155} -> (fun (V232) -> {'Idris.Prelude.Types.Left', V232} end(E155)); {'Idris.Prelude.Types.Right', E156} -> (fun (V233) -> begin (V234 = ('nested--22904-5885--in--un--deleteFolder'(V3, V2, V1, V0, V197, [], V4))), case V234 of {'Idris.Prelude.Types.Left', E157} -> (fun (V235) -> {'Idris.Prelude.Types.Left', V235} end(E157)); {'Idris.Prelude.Types.Right', E158} -> (fun (V236) -> begin (V265 = (('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> fun (V237) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end, fun () -> fun (V238) -> fun (V239) -> ('nested--22904-5884--in--un--delete'(V3, V2, V1, V0, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V198, V238)), V239)) end end end, case V2 of {'Idris.Idris.Package.MkPkgDesc', E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183} -> (fun (V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264) -> V253 end(E159, E160, E161, E162, E163, E164, E165, E166, E167, E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V265 of {'Idris.Prelude.Types.Left', E184} -> (fun (V266) -> {'Idris.Prelude.Types.Left', V266} end(E184)); {'Idris.Prelude.Types.Right', E185} -> (fun (V267) -> (('un--runScript'(case V2 of {'Idris.Idris.Package.MkPkgDesc', E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210} -> (fun (V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291, V292) -> V292 end(E186, E187, E188, E189, E190, E191, E192, E193, E194, E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E106)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'('erased', {'Idris.Core.Core.InternalError', <<"Can\x{27}t get current directory"/utf8>>}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--check'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--prepareCompilation'(V0, V1, V2, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V9 of [] -> begin (V36 = (('un--runScript'(case V3 of {'Idris.Idris.Package.MkPkgDesc', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V31 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Right', []} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V9} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--build'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--prepareCompilation'(V0, V1, V2, V3, V4, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V9 of [] -> begin (V37 = begin (V11 = {'Idris.Builtin.MkPair', [], V10}), (('case--case block in build-4855'(V4, V3, V2, V1, V0, V10, V11, case V3 of {'Idris.Idris.Package.MkPkgDesc', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V25 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end), case V37 of {'Idris.Prelude.Types.Left', E29} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V39) -> begin (V66 = begin (V40 = {'Idris.Builtin.MkPair', [], V10}), (('case--case block in build-4950'(V4, V3, V2, V1, V0, V10, V40, case V3 of {'Idris.Idris.Package.MkPkgDesc', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65) -> V55 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end), case V66 of {'Idris.Prelude.Types.Left', E56} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V68) -> begin (V94 = (('un--runScript'(case V3 of {'Idris.Idris.Package.MkPkgDesc', E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82} -> (fun (V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93) -> V89 end(E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V94 of {'Idris.Prelude.Types.Left', E83} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V96) -> {'Idris.Prelude.Types.Right', []} end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', V9} end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--bitraverseC'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Data.These.This', E0} -> (fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V9) -> {'Idris.Prelude.Types.Right', fun (V10) -> {'Idris.Data.These.This', V10} end} end, (V4(V7)), V8)) end end(E0)); {'Idris.Data.These.That', E1} -> (fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V13) -> {'Idris.Prelude.Types.Right', fun (V14) -> {'Idris.Data.These.That', V14} end} end, (V5(V11)), V12)) end end(E1)); {'Idris.Data.These.Both', E2, E3} -> (fun (V15, V16) -> fun (V17) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V18) -> ('Idris.Idris2.Core.Core':'un--<*>'('erased', 'erased', fun (V19) -> {'Idris.Prelude.Types.Right', fun (V20) -> fun (V21) -> {'Idris.Data.These.Both', V20, V21} end end} end, (V4(V15)), V18)) end, (V5(V16)), V17)) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addFields'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Package.ParsedMods'}, [], V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Idris.Package.MainMod'}, {'Idris.Prelude.Types.Nothing'}, V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = (('nested--21185-4301--in--un--go'(V4, V3, V2, V1, V0, V8, V11, V3, V4))(V5))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V40 = ('Idris.Idris2.Core.Context':'un--setSourceDir'(V0, case V14 of {'Idris.Idris.Package.MkPkgDesc', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V31 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V40 of {'Idris.Prelude.Types.Left', E31} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V42) -> begin (V44 = begin (V43 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V43} end), case V44 of {'Idris.Prelude.Types.Left', E33} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V46) -> begin (V48 = begin (V47 = ('erlang':'get'(V11))), {'Idris.Prelude.Types.Right', V47} end), case V48 of {'Idris.Prelude.Types.Left', E35} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V50) -> begin (V52 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V51) -> ('nested--21185-4300--in--un--toSource'(V4, V3, V2, V1, V0, V51)) end, V46, []))(V5))), case V52 of {'Idris.Prelude.Types.Left', E37} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V54) -> begin (V59 = case V50 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); {'Idris.Prelude.Types.Just', E39} -> (fun (V55) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V56) -> case V56 of {'Idris.Prelude.Types.Left', E40} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V58) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V58}} end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--21185-4300--in--un--toSource'(V4, V3, V2, V1, V0, V55)), V5)) end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V59 of {'Idris.Prelude.Types.Left', E42} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V61) -> {'Idris.Prelude.Types.Right', case V14 of {'Idris.Idris.Package.MkPkgDesc', E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68} -> (fun (V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86) -> {'Idris.Idris.Package.MkPkgDesc', V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V54, V61, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86} end(E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addField'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Idris.Package.PVersion', E0, E1} -> (fun (V7, V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> {'Idris.Idris.Package.MkPkgDesc', V10, V8, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34} end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E0, E1)); {'Idris.Idris.Package.PVersionDep', E27, E28} -> (fun (V35, V36) -> fun (V37) -> begin (V38 = ('Idris.Idris2.Idris.REPLCommon':'un--emitWarning'(V0, V2, V1, {'Idris.Core.Core.Deprecated', <<"version numbers must now be of the form x.y.z"/utf8>>}, V37))), case V38 of {'Idris.Prelude.Types.Left', E29} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V40) -> {'Idris.Prelude.Types.Right', V6} end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27, E28)); {'Idris.Idris.Package.PAuthors', E31, E32} -> (fun (V41, V42) -> fun (V43) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68) -> {'Idris.Idris.Package.MkPkgDesc', V44, V45, V42, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68} end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E31, E32)); {'Idris.Idris.Package.PMaintainers', E58, E59} -> (fun (V69, V70) -> fun (V71) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84} -> (fun (V72, V73, V74, V75, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96) -> {'Idris.Idris.Package.MkPkgDesc', V72, V73, V74, {'Idris.Prelude.Types.Just', V70}, V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96} end(E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E58, E59)); {'Idris.Idris.Package.PLicense', E85, E86} -> (fun (V97, V98) -> fun (V99) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111} -> (fun (V100, V101, V102, V103, V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> {'Idris.Idris.Package.MkPkgDesc', V100, V101, V102, V103, {'Idris.Prelude.Types.Just', V98}, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124} end(E87, E88, E89, E90, E91, E92, E93, E94, E95, E96, E97, E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E85, E86)); {'Idris.Idris.Package.PBrief', E112, E113} -> (fun (V125, V126) -> fun (V127) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138} -> (fun (V128, V129, V130, V131, V132, V133, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152) -> {'Idris.Idris.Package.MkPkgDesc', V128, V129, V130, V131, V132, {'Idris.Prelude.Types.Just', V126}, V134, V135, V136, V137, V138, V139, V140, V141, V142, V143, V144, V145, V146, V147, V148, V149, V150, V151, V152} end(E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125, E126, E127, E128, E129, E130, E131, E132, E133, E134, E135, E136, E137, E138)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E112, E113)); {'Idris.Idris.Package.PReadMe', E139, E140} -> (fun (V153, V154) -> fun (V155) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165} -> (fun (V156, V157, V158, V159, V160, V161, V162, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180) -> {'Idris.Idris.Package.MkPkgDesc', V156, V157, V158, V159, V160, V161, {'Idris.Prelude.Types.Just', V154}, V163, V164, V165, V166, V167, V168, V169, V170, V171, V172, V173, V174, V175, V176, V177, V178, V179, V180} end(E141, E142, E143, E144, E145, E146, E147, E148, E149, E150, E151, E152, E153, E154, E155, E156, E157, E158, E159, E160, E161, E162, E163, E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E139, E140)); {'Idris.Idris.Package.PHomePage', E166, E167} -> (fun (V181, V182) -> fun (V183) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192} -> (fun (V184, V185, V186, V187, V188, V189, V190, V191, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208) -> {'Idris.Idris.Package.MkPkgDesc', V184, V185, V186, V187, V188, V189, V190, {'Idris.Prelude.Types.Just', V182}, V192, V193, V194, V195, V196, V197, V198, V199, V200, V201, V202, V203, V204, V205, V206, V207, V208} end(E168, E169, E170, E171, E172, E173, E174, E175, E176, E177, E178, E179, E180, E181, E182, E183, E184, E185, E186, E187, E188, E189, E190, E191, E192)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E166, E167)); {'Idris.Idris.Package.PSourceLoc', E193, E194} -> (fun (V209, V210) -> fun (V211) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219} -> (fun (V212, V213, V214, V215, V216, V217, V218, V219, V220, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236) -> {'Idris.Idris.Package.MkPkgDesc', V212, V213, V214, V215, V216, V217, V218, V219, {'Idris.Prelude.Types.Just', V210}, V221, V222, V223, V224, V225, V226, V227, V228, V229, V230, V231, V232, V233, V234, V235, V236} end(E195, E196, E197, E198, E199, E200, E201, E202, E203, E204, E205, E206, E207, E208, E209, E210, E211, E212, E213, E214, E215, E216, E217, E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E193, E194)); {'Idris.Idris.Package.PBugTracker', E220, E221} -> (fun (V237, V238) -> fun (V239) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246} -> (fun (V240, V241, V242, V243, V244, V245, V246, V247, V248, V249, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264) -> {'Idris.Idris.Package.MkPkgDesc', V240, V241, V242, V243, V244, V245, V246, V247, V248, {'Idris.Prelude.Types.Just', V238}, V250, V251, V252, V253, V254, V255, V256, V257, V258, V259, V260, V261, V262, V263, V264} end(E222, E223, E224, E225, E226, E227, E228, E229, E230, E231, E232, E233, E234, E235, E236, E237, E238, E239, E240, E241, E242, E243, E244, E245, E246)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E220, E221)); {'Idris.Idris.Package.PDepends', E247} -> (fun (V265) -> fun (V266) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272} -> (fun (V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V277, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291) -> {'Idris.Idris.Package.MkPkgDesc', V267, V268, V269, V270, V271, V272, V273, V274, V275, V276, V265, V278, V279, V280, V281, V282, V283, V284, V285, V286, V287, V288, V289, V290, V291} end(E248, E249, E250, E251, E252, E253, E254, E255, E256, E257, E258, E259, E260, E261, E262, E263, E264, E265, E266, E267, E268, E269, E270, E271, E272)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E247)); {'Idris.Idris.Package.PModules', E273} -> (fun (V292) -> fun (V293) -> begin (V295 = begin (V294 = ('erlang':'put'(V3, V292))), {'Idris.Prelude.Types.Right', V294} end), case V295 of {'Idris.Prelude.Types.Left', E274} -> (fun (V296) -> {'Idris.Prelude.Types.Left', V296} end(E274)); {'Idris.Prelude.Types.Right', E275} -> (fun (V297) -> {'Idris.Prelude.Types.Right', V6} end(E275)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E273)); {'Idris.Idris.Package.PMainMod', E276, E277} -> (fun (V298, V299) -> fun (V300) -> begin (V302 = begin (V301 = ('erlang':'put'(V4, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V298, V299}}))), {'Idris.Prelude.Types.Right', V301} end), case V302 of {'Idris.Prelude.Types.Left', E278} -> (fun (V303) -> {'Idris.Prelude.Types.Left', V303} end(E278)); {'Idris.Prelude.Types.Right', E279} -> (fun (V304) -> {'Idris.Prelude.Types.Right', V6} end(E279)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E276, E277)); {'Idris.Idris.Package.PExec', E280} -> (fun (V305) -> fun (V306) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305} -> (fun (V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, V320, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331) -> {'Idris.Idris.Package.MkPkgDesc', V307, V308, V309, V310, V311, V312, V313, V314, V315, V316, V317, V318, V319, {'Idris.Prelude.Types.Just', V305}, V321, V322, V323, V324, V325, V326, V327, V328, V329, V330, V331} end(E281, E282, E283, E284, E285, E286, E287, E288, E289, E290, E291, E292, E293, E294, E295, E296, E297, E298, E299, E300, E301, E302, E303, E304, E305)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E280)); {'Idris.Idris.Package.PLibrary', E306} -> (fun (V332) -> fun (V333) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331} -> (fun (V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, V348, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358) -> {'Idris.Idris.Package.MkPkgDesc', V334, V335, V336, V337, V338, V339, V340, V341, V342, V343, V344, V345, V346, V347, {'Idris.Prelude.Types.Just', V332}, V349, V350, V351, V352, V353, V354, V355, V356, V357, V358} end(E307, E308, E309, E310, E311, E312, E313, E314, E315, E316, E317, E318, E319, E320, E321, E322, E323, E324, E325, E326, E327, E328, E329, E330, E331)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E306)); {'Idris.Idris.Package.POpts', E332, E333} -> (fun (V359, V360) -> fun (V361) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358} -> (fun (V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, V377, V378, V379, V380, V381, V382, V383, V384, V385, V386) -> {'Idris.Idris.Package.MkPkgDesc', V362, V363, V364, V365, V366, V367, V368, V369, V370, V371, V372, V373, V374, V375, V376, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V359, V360}}, V378, V379, V380, V381, V382, V383, V384, V385, V386} end(E334, E335, E336, E337, E338, E339, E340, E341, E342, E343, E344, E345, E346, E347, E348, E349, E350, E351, E352, E353, E354, E355, E356, E357, E358)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E332, E333)); {'Idris.Idris.Package.PSourceDir', E359, E360} -> (fun (V387, V388) -> fun (V389) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385} -> (fun (V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, V406, V407, V408, V409, V410, V411, V412, V413, V414) -> {'Idris.Idris.Package.MkPkgDesc', V390, V391, V392, V393, V394, V395, V396, V397, V398, V399, V400, V401, V402, V403, V404, V405, {'Idris.Prelude.Types.Just', V388}, V407, V408, V409, V410, V411, V412, V413, V414} end(E361, E362, E363, E364, E365, E366, E367, E368, E369, E370, E371, E372, E373, E374, E375, E376, E377, E378, E379, E380, E381, E382, E383, E384, E385)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E359, E360)); {'Idris.Idris.Package.PBuildDir', E386, E387} -> (fun (V415, V416) -> fun (V417) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412} -> (fun (V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, V435, V436, V437, V438, V439, V440, V441, V442) -> {'Idris.Idris.Package.MkPkgDesc', V418, V419, V420, V421, V422, V423, V424, V425, V426, V427, V428, V429, V430, V431, V432, V433, V434, {'Idris.Prelude.Types.Just', V416}, V436, V437, V438, V439, V440, V441, V442} end(E388, E389, E390, E391, E392, E393, E394, E395, E396, E397, E398, E399, E400, E401, E402, E403, E404, E405, E406, E407, E408, E409, E410, E411, E412)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E386, E387)); {'Idris.Idris.Package.POutputDir', E413, E414} -> (fun (V443, V444) -> fun (V445) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439} -> (fun (V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, V464, V465, V466, V467, V468, V469, V470) -> {'Idris.Idris.Package.MkPkgDesc', V446, V447, V448, V449, V450, V451, V452, V453, V454, V455, V456, V457, V458, V459, V460, V461, V462, V463, {'Idris.Prelude.Types.Just', V444}, V465, V466, V467, V468, V469, V470} end(E415, E416, E417, E418, E419, E420, E421, E422, E423, E424, E425, E426, E427, E428, E429, E430, E431, E432, E433, E434, E435, E436, E437, E438, E439)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E413, E414)); {'Idris.Idris.Package.PPrebuild', E440, E441} -> (fun (V471, V472) -> fun (V473) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466} -> (fun (V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, V493, V494, V495, V496, V497, V498) -> {'Idris.Idris.Package.MkPkgDesc', V474, V475, V476, V477, V478, V479, V480, V481, V482, V483, V484, V485, V486, V487, V488, V489, V490, V491, V492, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V471, V472}}, V494, V495, V496, V497, V498} end(E442, E443, E444, E445, E446, E447, E448, E449, E450, E451, E452, E453, E454, E455, E456, E457, E458, E459, E460, E461, E462, E463, E464, E465, E466)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E440, E441)); {'Idris.Idris.Package.PPostbuild', E467, E468} -> (fun (V499, V500) -> fun (V501) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493} -> (fun (V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, V522, V523, V524, V525, V526) -> {'Idris.Idris.Package.MkPkgDesc', V502, V503, V504, V505, V506, V507, V508, V509, V510, V511, V512, V513, V514, V515, V516, V517, V518, V519, V520, V521, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V499, V500}}, V523, V524, V525, V526} end(E469, E470, E471, E472, E473, E474, E475, E476, E477, E478, E479, E480, E481, E482, E483, E484, E485, E486, E487, E488, E489, E490, E491, E492, E493)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E467, E468)); {'Idris.Idris.Package.PPreinstall', E494, E495} -> (fun (V527, V528) -> fun (V529) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520} -> (fun (V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, V551, V552, V553, V554) -> {'Idris.Idris.Package.MkPkgDesc', V530, V531, V532, V533, V534, V535, V536, V537, V538, V539, V540, V541, V542, V543, V544, V545, V546, V547, V548, V549, V550, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V527, V528}}, V552, V553, V554} end(E496, E497, E498, E499, E500, E501, E502, E503, E504, E505, E506, E507, E508, E509, E510, E511, E512, E513, E514, E515, E516, E517, E518, E519, E520)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E494, E495)); {'Idris.Idris.Package.PPostinstall', E521, E522} -> (fun (V555, V556) -> fun (V557) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E523, E524, E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547} -> (fun (V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, V580, V581, V582) -> {'Idris.Idris.Package.MkPkgDesc', V558, V559, V560, V561, V562, V563, V564, V565, V566, V567, V568, V569, V570, V571, V572, V573, V574, V575, V576, V577, V578, V579, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V555, V556}}, V581, V582} end(E523, E524, E525, E526, E527, E528, E529, E530, E531, E532, E533, E534, E535, E536, E537, E538, E539, E540, E541, E542, E543, E544, E545, E546, E547)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E521, E522)); {'Idris.Idris.Package.PPreclean', E548, E549} -> (fun (V583, V584) -> fun (V585) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574} -> (fun (V586, V587, V588, V589, V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, V609, V610) -> {'Idris.Idris.Package.MkPkgDesc', V586, V587, V588, V589, V590, V591, V592, V593, V594, V595, V596, V597, V598, V599, V600, V601, V602, V603, V604, V605, V606, V607, V608, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V583, V584}}, V610} end(E550, E551, E552, E553, E554, E555, E556, E557, E558, E559, E560, E561, E562, E563, E564, E565, E566, E567, E568, E569, E570, E571, E572, E573, E574)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E548, E549)); {'Idris.Idris.Package.PPostclean', E575, E576} -> (fun (V611, V612) -> fun (V613) -> {'Idris.Prelude.Types.Right', case V6 of {'Idris.Idris.Package.MkPkgDesc', E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601} -> (fun (V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, V638) -> {'Idris.Idris.Package.MkPkgDesc', V614, V615, V616, V617, V618, V619, V620, V621, V622, V623, V624, V625, V626, V627, V628, V629, V630, V631, V632, V633, V634, V635, V636, V637, {'Idris.Prelude.Types.Just', {'Idris.Builtin.MkPair', V611, V612}}} end(E577, E578, E579, E580, E581, E582, E583, E584, E585, E586, E587, E588, E589, E590, E591, E592, E593, E594, E595, E596, E597, E598, E599, E600, E601)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end end(E575, E576)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addDeps'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Context':'un--addPkg'(V0, case V7 of {'Idris.Idris.Package.MkDepends', E2, E3} -> (fun (V9, V10) -> V9 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8)) end end, case V1 of {'Idris.Idris.Package.MkPkgDesc', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V21 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
