-module('Idris.Idris2.TTImp.Unelab').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in unelabCase-4172'/8,
  'nested--6178-3680--in--un--usedBinder'/6,
  'nested--6439-4868--in--un--uniqueLocal'/10,
  'nested--9466-6460--in--un--toName'/8,
  'nested--9466-6462--in--un--showScope'/8,
  'nested--9466-6461--in--un--showNScope'/8,
  'nested--6426-3928--in--un--nthArg'/7,
  'nested--6439-4867--in--un--next'/9,
  'nested--6426-3929--in--un--mkClause'/7,
  'nested--6426-3930--in--un--mkCase'/8,
  'nested--6448-5933--in--un--isNoSugar'/14,
  'nested--6448-5934--in--un--isDefImp'/14,
  'nested--6426-3926--in--un--idxOrDefault'/7,
  'nested--6426-3927--in--un--getNth'/6,
  'nested--6426-3925--in--un--findArgPos'/5,
  'dn--un--show_Show_IArg'/1,
  'dn--un--showPrec_Show_IArg'/2,
  'un--used'/2,
  'un--unelabUniqueBinders'/5,
  'un--unelabTy\x{27}'/5,
  'un--unelabTy'/6,
  'un--unelabSugar'/3,
  'un--unelabPi'/6,
  'un--unelabNoSugar'/5,
  'un--unelabNoPatvars'/5,
  'un--unelabCase'/5,
  'un--unelabBinder'/11,
  'un--unelab'/4,
  'un--getFnArgs'/2
]).
'case--case block in unelabCase-4172'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> case ('nested--6426-3925--in--un--findArgPos'(V0, V1, V2, V3, V10)) of {'Idris.Prelude.Types.Just', E5} -> (fun (V13) -> case ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V1)), ('Idris.Idris2.Prelude.Types.List':'un--length'(V9)))) of 1 -> ('nested--6426-3930--in--un--mkCase'(V0, V1, V2, V3, V12, V13, 0, V1)); 0 -> fun (V14) -> {'Idris.Prelude.Types.Right', V0} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', V0} end end end(E0, E1, E2, E3, E4)); _ -> fun (V16) -> {'Idris.Prelude.Types.Right', V0} end end.
'nested--6178-3680--in--un--usedBinder'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Let', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case ('un--used'(V4, V8)) of 1 -> 1; 0 -> ('un--used'(V4, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1, E2, E3)); _ -> ('un--used'(V4, ('Idris.Idris2.Core.TT':'un--binderType'(V5)))) end.
'nested--6439-4868--in--un--uniqueLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V13)) end end}, V9, V8)) of 1 -> ('nested--6439-4868--in--un--uniqueLocal'(V0, V1, V2, V3, V4, V5, V6, V7, V8, ('nested--6439-4867--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V9)))); 0 -> V9; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9466-6460--in--un--toName'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V8, V9, V10) -> {'Idris.Prelude.Types.Just', ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V10))} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'nested--9466-6462--in--un--showScope'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--9466-6461--in--un--showNScope'(V0, V1, V2, V3, V4, V5, V6, ('Idris.Idris2.Data.List':'un--mapMaybe'(fun (V8) -> ('nested--9466-6460--in--un--toName'(V0, V1, V2, V3, V4, V5, V6, V8)) end, V7)))))).
'nested--9466-6461--in--un--showNScope'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> <<"[no locals in scope]"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"[locals in scope: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)) end, ('Idris.Idris2.Data.List':'un--nub'({'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V11, V12)) end end}, V7)))))), <<"]"/utf8>>)))) end.
'nested--6426-3928--in--un--nthArg'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.App', E0, E1, E2} -> (fun (V7, V8, V9) -> ('nested--6426-3927--in--un--getNth'(V0, V1, V2, V3, V5, {'Idris.Core.TT.App', V7, V8, V9})) end(E0, E1, E2)); _ -> {'Idris.Core.TT.Erased', V4, 0} end.
'nested--6439-4867--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Name.MN', E0, E1} -> (fun (V9, V10) -> {'Idris.Core.Name.MN', V9, ((V10 + 1) rem 9223372036854775808)} end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V11) -> {'Idris.Core.Name.MN', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V11)), 0} end(E2)); {'Idris.Core.Name.NS', E3, E4} -> (fun (V12, V13) -> {'Idris.Core.Name.NS', V12, ('nested--6439-4867--in--un--next'(V0, V1, V2, V3, V4, V5, V6, V7, V13))} end(E3, E4)); _ -> {'Idris.Core.Name.MN', ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)), 0} end.
'nested--6426-3929--in--un--mkClause'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.DPair.MkDPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V11, V12) -> begin (V13 = ('nested--6426-3928--in--un--nthArg'(V0, V1, V2, V3, V4, V5, V11))), fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V7, V3, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Unelaborating LHS"/utf8>> end, V13, V14))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = ('un--unelabTy'(V7, V3, {'Idris.TTImp.Unelab.Full'}, V9, V13, V14))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'(V7, V3, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> <<"Unelaborating RHS"/utf8>> end, V12, V14))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Core.Normalise':'un--logEnv'(V7, V3, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), <<"In Env"/utf8>>, V9, V14))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> begin (V27 = ('un--unelabTy'(V7, V3, {'Idris.TTImp.Unelab.Full'}, V9, V12, V14))), case V27 of {'Idris.Prelude.Types.Left', E14} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.PatClause', V4, ('Idris.Idris2.Builtin':'un--fst'(V20)), ('Idris.Idris2.Builtin':'un--fst'(V29))}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6426-3930--in--un--mkCase'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of 0 -> fun (V8) -> case V7 of [E2 | E3] -> (fun (V9, V10) -> case V9 of {'Idris.TTImp.Unelab.Exp', E4, E5} -> (fun (V11, V12) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V13) -> ('nested--6426-3929--in--un--mkClause'(V0, V1, V2, V3, V11, V6, V13)) end, V4, [], V8))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.ICase', V11, V12, {'Idris.TTImp.TTImp.Implicit', V11, 0}, V16}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> {'Idris.Prelude.Types.Right', V0} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Right', V0} end end; _ -> begin (V17 = (V5 - 1)), case V7 of [E0 | E1] -> (fun (V18, V19) -> ('nested--6426-3930--in--un--mkCase'(V0, V1, V2, V3, V4, V17, (1 + V6), V19)) end(E0, E1)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', V0} end end end end.
'nested--6448-5933--in--un--isNoSugar'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.TTImp.Unelab.NoSugar', E0} -> (fun (V14) -> 1 end(E0)); _ -> 0 end.
'nested--6448-5934--in--un--isDefImp'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.TT.DefImplicit', E0} -> (fun (V14) -> 1 end(E0)); _ -> 0 end.
'nested--6426-3926--in--un--idxOrDefault'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of 0 -> case V6 of [E2 | E3] -> (fun (V7, V8) -> V7 end(E2, E3)); _ -> case V6 of [] -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> begin (V9 = (V4 - 1)), case V6 of [E0 | E1] -> (fun (V10, V11) -> ('nested--6426-3926--in--un--idxOrDefault'(V0, V1, V2, V3, V9, V5, V11)) end(E0, E1)); _ -> case V6 of [] -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'nested--6426-3927--in--un--getNth'(V0, V1, V2, V3, V4, V5) -> case ('Idris.Idris2.Core.TT':'un--getFnArgs'(V5)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> ('nested--6426-3926--in--un--idxOrDefault'(V0, V1, V2, V3, V4, V6, V7)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--6426-3925--in--un--findArgPos'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.CaseTree.Case', E0, E1, E2, E3} -> (fun (V5, V6, V7, V8) -> {'Idris.Prelude.Types.Just', V6} end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'dn--un--show_Show_IArg'(V0) -> case V0 of {'Idris.TTImp.Unelab.Exp', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V2)) end(E0, E1)); {'Idris.TTImp.Unelab.Auto', E2, E3} -> (fun (V3, V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"@{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V4)), <<"}"/utf8>>)))) end(E2, E3)); {'Idris.TTImp.Unelab.Named', E4, E5, E6} -> (fun (V5, V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V6)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V7)), <<"}"/utf8>>)))))))) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_IArg'(V0, V1) -> ('dn--un--show_Show_IArg'(V1)).
'un--used'(V0, V1) -> case V1 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V2, V3, V4) -> ('Idris.Idris2.Prelude.Types':'dn--un--==_Eq_Nat'(V0, V4)) end(E0, E1, E2)); {'Idris.Core.TT.Bind', E3, E4, E5, E6} -> (fun (V5, V6, V7, V8) -> case ('nested--6178-3680--in--un--usedBinder'(V5, V6, V8, V7, V0, V7)) of 1 -> 1; 0 -> ('un--used'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--fromInteger_Num_Nat'(1)), V0)), V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4, E5, E6)); {'Idris.Core.TT.Meta', E7, E8, E9, E10} -> (fun (V9, V10, V11, V12) -> ('Idris.Idris2.Prelude.Interfaces':'un--any'({'Idris.Prelude.Interfaces.MkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V24)) end end, fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V28, V29, V30, V31)) end end end end end end end, fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V33)) end end, fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V36, V37, V38)) end end end end end}, fun (V39) -> ('un--used'(V0, V39)) end, V12)) end(E7, E8, E9, E10)); {'Idris.Core.TT.App', E11, E12, E13} -> (fun (V40, V41, V42) -> case ('un--used'(V0, V41)) of 1 -> 1; 0 -> ('un--used'(V0, V42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12, E13)); {'Idris.Core.TT.As', E14, E15, E16, E17} -> (fun (V43, V44, V45, V46) -> ('un--used'(V0, V46)) end(E14, E15, E16, E17)); {'Idris.Core.TT.TDelayed', E18, E19, E20} -> (fun (V47, V48, V49) -> ('un--used'(V0, V49)) end(E18, E19, E20)); {'Idris.Core.TT.TDelay', E21, E22, E23, E24} -> (fun (V50, V51, V52, V53) -> ('un--used'(V0, V53)) end(E21, E22, E23, E24)); {'Idris.Core.TT.TForce', E25, E26, E27} -> (fun (V54, V55, V56) -> ('un--used'(V0, V56)) end(E25, E26, E27)); _ -> 0 end.
'un--unelabUniqueBinders'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--unelabTy'(V0, V1, {'Idris.TTImp.Unelab.NoSugar', 1}, V2, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabTy\x{27}'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.TT.Local', E0, E1, E2} -> (fun (V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Core.TT':'un--nameAt'(V0, V7))), fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found local name: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V8)))) end, V9))), case V10 of {'Idris.Prelude.Types.Left', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V12) -> begin (V20 = ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--binderType'(('Idris.Idris2.Core.Env':'un--getBinder'({'Idris.Core.TT.dn--un--__mkWeaken', fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Core.TT':'dn--un--weaken_Weaken_Term'(V15)) end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.TT':'dn--un--weakenNs_Weaken_Term'(V18, V19)) end end end end}, V0, V7, V3))))))), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', V5, V8}, V20}} end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1, E2)); {'Idris.Core.TT.Ref', E5, E6, E7} -> (fun (V21, V22, V23) -> fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E8} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V28) -> begin (V57 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V23, case V28 of {'Idris.Core.Context.MkDefs', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56) -> V29 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V24))), case V57 of {'Idris.Prelude.Types.Left', E38} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V59) -> case V59 of {'Idris.Prelude.Types.Just', E40} -> (fun (V60) -> begin (V65 = case V2 of {'Idris.TTImp.Unelab.NoSugar', E43} -> (fun (V61) -> ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V23, V24)) end(E43)); _ -> begin (V62 = ('Idris.Idris2.Core.Context':'un--getFullName'(V1, V23, V24))), case V62 of {'Idris.Prelude.Types.Left', E41} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V64) -> ('Idris.Idris2.Core.Context':'un--aliasName'(V1, V64, V24)) end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V65 of {'Idris.Prelude.Types.Left', E44} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', V21, V67}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'(V60))))}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V2 of {'Idris.TTImp.Unelab.ImplicitHoles'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.Implicit', V21, 1}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V21))}} end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IVar', V21, V23}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V21))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6, E7)); {'Idris.Core.TT.Meta', E46, E47, E48, E49} -> (fun (V68, V69, V70, V71) -> fun (V72) -> begin (V74 = begin (V73 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V73} end), case V74 of {'Idris.Prelude.Types.Left', E50} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V76) -> begin (V77 = ('Idris.Idris2.Core.Name':'un--nameRoot'(V69))), begin (V106 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'({'Idris.Core.Name.Resolved', V70}, case V76 of {'Idris.Core.Context.MkDefs', E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79} -> (fun (V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103, V104, V105) -> V78 end(E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V72))), case V106 of {'Idris.Prelude.Types.Left', E80} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V108) -> case V108 of {'Idris.Prelude.Types.Just', E82} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IHole', V68, V77}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V3, ('Idris.Idris2.Core.TT':'un--embed'(V109))))}} end(E82)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> case V2 of {'Idris.TTImp.Unelab.ImplicitHoles'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.Implicit', V68, 1}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V68))}} end()); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IHole', V68, V77}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V68))}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46, E47, E48, E49)); {'Idris.Core.TT.Bind', E83, E84, E85, E86} -> (fun (V110, V111, V112, V113) -> fun (V114) -> begin (V115 = ('un--unelabTy'([V111 | V0], V1, V2, {'Idris.Core.Env.::', V112, V3}, V113, V114))), case V115 of {'Idris.Prelude.Types.Left', E87} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V117) -> case V117 of {'Idris.Builtin.MkPair', E89, E90} -> (fun (V118, V119) -> case V2 of {'Idris.TTImp.Unelab.NoSugar', E93} -> (fun (V120) -> case V120 of 1 -> begin (V121 = ('nested--6439-4868--in--un--uniqueLocal'(V0, V111, V113, V112, V110, V3, V2, V1, V0, V111))), begin (V122 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V119))(V114))), case V122 of {'Idris.Prelude.Types.Left', E96} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V124) -> ('un--unelabBinder'(V0, V1, V2, V110, V3, V121, V112, ('Idris.Idris2.Core.TT':'un--renameVars'({'Idris.Core.TT.CompatExt', {'Idris.Core.TT.CompatPre'}}, V113)), V118, ('Idris.Idris2.Core.TT':'un--renameVars'({'Idris.Core.TT.CompatExt', {'Idris.Core.TT.CompatPre'}}, V124)), V114)) end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V125 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V119))(V114))), case V125 of {'Idris.Prelude.Types.Left', E94} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V127) -> ('un--unelabBinder'(V0, V1, V2, V110, V3, V111, V112, V113, V118, V127, V114)) end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E93)); _ -> begin (V128 = (('Idris.Idris2.Core.Normalise':'un--getTerm'(V119))(V114))), case V128 of {'Idris.Prelude.Types.Left', E91} -> (fun (V129) -> {'Idris.Prelude.Types.Left', V129} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V130) -> ('un--unelabBinder'(V0, V1, V2, V110, V3, V111, V112, V113, V118, V130, V114)) end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E83, E84, E85, E86)); {'Idris.Core.TT.App', E98, E99, E100} -> (fun (V131, V132, V133) -> fun (V134) -> begin (V135 = ('un--unelabTy'(V0, V1, V2, V3, V132, V134))), case V135 of {'Idris.Prelude.Types.Left', E101} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E101)); {'Idris.Prelude.Types.Right', E102} -> (fun (V137) -> case V137 of {'Idris.Builtin.MkPair', E103, E104} -> (fun (V138, V139) -> begin (V140 = ('un--unelabTy'(V0, V1, V2, V3, V133, V134))), case V140 of {'Idris.Prelude.Types.Left', E105} -> (fun (V141) -> {'Idris.Prelude.Types.Left', V141} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V142) -> case V142 of {'Idris.Builtin.MkPair', E107, E108} -> (fun (V143, V144) -> begin (V145 = (('Idris.Idris2.Core.Normalise':'un--getNF'(V1, V139))(V134))), case V145 of {'Idris.Prelude.Types.Left', E109} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V147) -> begin (V149 = begin (V148 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V148} end), case V149 of {'Idris.Prelude.Types.Left', E111} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V151) -> case V147 of {'Idris.Core.Value.NBind', E113, E114, E115, E116} -> (fun (V152, V153, V154, V155) -> case V154 of {'Idris.Core.TT.Pi', E117, E118, E119, E120} -> (fun (V156, V157, V158, V159) -> case V158 of {'Idris.Core.TT.Explicit'} -> (fun () -> begin (V160 = (((V155(V151))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, V133))))(V134))), case V160 of {'Idris.Prelude.Types.Left', E123} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E123)); {'Idris.Prelude.Types.Right', E124} -> (fun (V162) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IApp', V131, V138, V143}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V151, V3, V162))}} end(E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V163 = (((V155(V151))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V3, V133))))(V134))), case V163 of {'Idris.Prelude.Types.Left', E121} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V165) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.INamedApp', V131, V138, V153, V143}, ('Idris.Idris2.Core.Normalise':'un--glueBack'(V1, V0, V151, V3, V165))}} end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E117, E118, E119, E120)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IApp', V131, V138, V143}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V131))}} end end(E113, E114, E115, E116)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IApp', V131, V138, V143}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V131))}} end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107, E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E103, E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E98, E99, E100)); {'Idris.Core.TT.As', E125, E126, E127, E128} -> (fun (V166, V167, V168, V169) -> fun (V170) -> begin (V171 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V168))(V170))), case V171 of {'Idris.Prelude.Types.Left', E129} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E129)); {'Idris.Prelude.Types.Right', E130} -> (fun (V173) -> case V173 of {'Idris.Builtin.MkPair', E131, E132} -> (fun (V174, V175) -> begin (V176 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V169))(V170))), case V176 of {'Idris.Prelude.Types.Left', E133} -> (fun (V177) -> {'Idris.Prelude.Types.Left', V177} end(E133)); {'Idris.Prelude.Types.Right', E134} -> (fun (V178) -> case V178 of {'Idris.Builtin.MkPair', E135, E136} -> (fun (V179, V180) -> case V174 of {'Idris.TTImp.TTImp.IVar', E137, E138} -> (fun (V181, V182) -> case V2 of {'Idris.TTImp.Unelab.NoSugar', E139} -> (fun (V183) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IAs', V166, ('Idris.Idris2.Core.TT':'un--getLoc'(V168)), V167, V182, V179}, V180}} end(E139)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V179, V180}} end end(E137, E138)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V179, V180}} end end(E135, E136)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E134)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E131, E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E125, E126, E127, E128)); {'Idris.Core.TT.TDelayed', E140, E141, E142} -> (fun (V184, V185, V186) -> fun (V187) -> begin (V188 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V186))(V187))), case V188 of {'Idris.Prelude.Types.Left', E143} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E143)); {'Idris.Prelude.Types.Right', E144} -> (fun (V190) -> case V190 of {'Idris.Builtin.MkPair', E145, E146} -> (fun (V191, V192) -> begin (V194 = begin (V193 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V193} end), case V194 of {'Idris.Prelude.Types.Left', E147} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E147)); {'Idris.Prelude.Types.Right', E148} -> (fun (V196) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IDelayed', V184, V185, V191}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V184))}} end(E148)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E145, E146)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E144)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E140, E141, E142)); {'Idris.Core.TT.TDelay', E149, E150, E151, E152} -> (fun (V197, V198, V199, V200) -> fun (V201) -> begin (V202 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V200))(V201))), case V202 of {'Idris.Prelude.Types.Left', E153} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E153)); {'Idris.Prelude.Types.Right', E154} -> (fun (V204) -> case V204 of {'Idris.Builtin.MkPair', E155, E156} -> (fun (V205, V206) -> begin (V208 = begin (V207 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V207} end), case V208 of {'Idris.Prelude.Types.Left', E157} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E157)); {'Idris.Prelude.Types.Right', E158} -> (fun (V210) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IDelay', V197, V205}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V197))}} end(E158)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E155, E156)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E154)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E149, E150, E151, E152)); {'Idris.Core.TT.TForce', E159, E160, E161} -> (fun (V211, V212, V213) -> fun (V214) -> begin (V215 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V213))(V214))), case V215 of {'Idris.Prelude.Types.Left', E162} -> (fun (V216) -> {'Idris.Prelude.Types.Left', V216} end(E162)); {'Idris.Prelude.Types.Right', E163} -> (fun (V217) -> case V217 of {'Idris.Builtin.MkPair', E164, E165} -> (fun (V218, V219) -> begin (V221 = begin (V220 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V220} end), case V221 of {'Idris.Prelude.Types.Left', E166} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E166)); {'Idris.Prelude.Types.Right', E167} -> (fun (V223) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IForce', V211, V218}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V211))}} end(E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E159, E160, E161)); {'Idris.Core.TT.PrimVal', E168, E169} -> (fun (V224, V225) -> fun (V226) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IPrimVal', V224, V225}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V224))}} end end(E168, E169)); {'Idris.Core.TT.Erased', E170, E171} -> (fun (V227, V228) -> fun (V229) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.Implicit', V227, 1}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V227))}} end end(E170, E171)); {'Idris.Core.TT.TType', E172} -> (fun (V230) -> fun (V231) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IType', V230}, ('Idris.Idris2.Core.Normalise':'un--gType'(V230))}} end end(E172)); _ -> begin (V232 = ('Idris.Idris2.Core.TT':'un--getLoc'(V4))), fun (V233) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.Implicit', V232, 0}, ('Idris.Idris2.Core.Normalise':'un--gErased'(V232))}} end end end.
'un--unelabTy'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('un--unelabTy\x{27}'(V0, V1, V2, V3, V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> (('un--unelabSugar'(V1, V2, V8))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabSugar'(V0, V1, V2) -> case V1 of {'Idris.TTImp.Unelab.NoSugar', E16} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', V2} end end(E16)); {'Idris.TTImp.Unelab.ImplicitHoles'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', V2} end end()); _ -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V6, V7) -> case ('un--getFnArgs'(V6, [])) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> case V8 of {'Idris.TTImp.TTImp.IVar', E4, E5} -> (fun (V10, V11) -> fun (V12) -> case V11 of {'Idris.Core.Name.NS', E6, E7} -> (fun (V13, V14) -> case V14 of {'Idris.Core.Name.CaseBlock', E8, E9} -> (fun (V15, V16) -> begin (V26 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Data.String':'un--fastUnlines'([('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unelaborating case "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V17) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V17)) end, fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V18, V19)) end end}, {'Idris.Prelude.Show.MkShow', fun (V20) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V20)) end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V21, V22)) end end}}, {'Idris.Builtin.MkPair', V15, V16})))) | [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with arguments: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V23) -> ('dn--un--show_Show_IArg'(V23)) end, fun (V24) -> fun (V25) -> ('dn--un--showPrec_Show_IArg'(V24, V25)) end end}, V9)))) | []]])) end, V12))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V29 = ('un--unelabCase'(V0, {'Idris.Core.Name.NS', V13, {'Idris.Core.Name.CaseBlock', V15, V16}}, V9, V6, V12))), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> begin (V32 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"unelab.case"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unelaborated to: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V31)))) end, V12))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V31, V7}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, V7}} end end(E6, E7)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, V7}} end end end(E4, E5)); _ -> fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, V7}} end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabPi'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Explicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}} end()); {'Idris.Core.TT.Implicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}} end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}} end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V6) -> begin (V7 = ('un--unelabTy'(V0, V1, V2, V3, V6, V5))), case V7 of {'Idris.Prelude.Types.Left', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V10}} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unelabNoSugar'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--unelabTy'(V0, V1, {'Idris.TTImp.Unelab.NoSugar', 0}, V2, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabNoPatvars'(V0, V1, V2, V3, V4) -> begin (V5 = ('un--unelabTy'(V0, V1, {'Idris.TTImp.Unelab.ImplicitHoles'}, V2, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V7))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabCase'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V1, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V41 = {'Idris.Prelude.Types.Just', V40}), (('case--case block in unelabCase-4172'(V3, V2, V1, V0, V8, V40, V41, case V40 of {'Idris.Core.Context.MkGlobalDef', E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53} -> (fun (V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62) -> V59 end(E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', V3} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--unelabBinder'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V6 of {'Idris.Core.TT.Lam', E0, E1, E2, E3} -> (fun (V11, V12, V13, V14) -> begin (V15 = ('un--unelabTy'(V0, V1, V2, V4, V14, V10))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V18, V19) -> begin (V20 = ('un--unelabPi'(V0, V1, V2, V4, V13, V10))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.ILam', V3, V12, V22, {'Idris.Prelude.Types.Just', V5}, V18, V8}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, {'Idris.Core.TT.Bind', V3, V5, {'Idris.Core.TT.Pi', V11, V12, V13, V14}, V9}))}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); {'Idris.Core.TT.Let', E10, E11, E12, E13} -> (fun (V23, V24, V25, V26) -> begin (V27 = ('un--unelabTy'(V0, V1, V2, V4, V25, V10))), case V27 of {'Idris.Prelude.Types.Left', E14} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V29) -> case V29 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V30, V31) -> begin (V32 = ('un--unelabTy'(V0, V1, V2, V4, V26, V10))), case V32 of {'Idris.Prelude.Types.Left', E18} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V34) -> case V34 of {'Idris.Builtin.MkPair', E20, E21} -> (fun (V35, V36) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.ILet', V3, {'Idris.Core.FC.EmptyFC'}, V24, V5, V35, V30, V8}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, {'Idris.Core.TT.Bind', V3, V5, {'Idris.Core.TT.Let', V23, V24, V25, V26}, V9}))}} end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11, E12, E13)); {'Idris.Core.TT.Pi', E22, E23, E24, E25} -> (fun (V37, V38, V39, V40) -> begin (V41 = ('un--unelabTy'(V0, V1, V2, V4, V40, V10))), case V41 of {'Idris.Prelude.Types.Left', E26} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V43) -> case V43 of {'Idris.Builtin.MkPair', E28, E29} -> (fun (V44, V45) -> begin (V46 = ('un--unelabPi'(V0, V1, V2, V4, V39, V10))), case V46 of {'Idris.Prelude.Types.Left', E30} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V48) -> begin (V49 = case case ('un--used'(0, V7)) of 1 -> 1; 0 -> ('nested--6448-5933--in--un--isNoSugar'(V0, V37, V40, V39, V38, V5, V9, V8, V7, V4, V3, V2, V1, V2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', V5}; 0 -> case case ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V38, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'()))) of 1 -> 1; 0 -> ('nested--6448-5934--in--un--isDefImp'(V0, V37, V40, V39, V38, V5, V9, V8, V7, V4, V3, V2, V1, V39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> {'Idris.Prelude.Types.Just', {'Idris.Core.Name.UN', <<"_"/utf8>>}}; 0 -> {'Idris.Prelude.Types.Nothing'}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.IPi', V3, V38, V48, V49, V44, V8}, ('Idris.Idris2.Core.Normalise':'un--gType'(V3))}} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23, E24, E25)); {'Idris.Core.TT.PVar', E32, E33, E34, E35} -> (fun (V50, V51, V52, V53) -> begin (V54 = ('un--unelabTy'(V0, V1, V2, V4, V53, V10))), case V54 of {'Idris.Prelude.Types.Left', E36} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V56) -> case V56 of {'Idris.Builtin.MkPair', E38, E39} -> (fun (V57, V58) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, {'Idris.Core.TT.Bind', V3, V5, {'Idris.Core.TT.PVTy', V50, V51, V53}, V9}))}} end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32, E33, E34, E35)); {'Idris.Core.TT.PLet', E40, E41, E42, E43} -> (fun (V59, V60, V61, V62) -> begin (V63 = ('un--unelabTy'(V0, V1, V2, V4, V61, V10))), case V63 of {'Idris.Prelude.Types.Left', E44} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V65) -> case V65 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V66, V67) -> begin (V68 = ('un--unelabTy'(V0, V1, V2, V4, V62, V10))), case V68 of {'Idris.Prelude.Types.Left', E48} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V70) -> case V70 of {'Idris.Builtin.MkPair', E50, E51} -> (fun (V71, V72) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', {'Idris.TTImp.TTImp.ILet', V3, {'Idris.Core.FC.EmptyFC'}, V60, V5, V71, V66, V8}, ('Idris.Idris2.Core.Normalise':'un--gnf'(V0, V4, {'Idris.Core.TT.Bind', V3, V5, {'Idris.Core.TT.PLet', V59, V60, V61, V62}, V9}))}} end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40, E41, E42, E43)); {'Idris.Core.TT.PVTy', E52, E53, E54} -> (fun (V73, V74, V75) -> begin (V76 = ('un--unelabTy'(V0, V1, V2, V4, V75, V10))), case V76 of {'Idris.Prelude.Types.Left', E55} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V78) -> case V78 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V79, V80) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V8, ('Idris.Idris2.Core.Normalise':'un--gType'(V3))}} end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unelab'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.TT.Meta', E2, E3, E4, E5} -> (fun (V4, V5, V6, V7) -> begin (V8 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V5)), ('nested--9466-6462--in--un--showScope'(V0, V7, V6, V5, V4, V2, V1, V7))))), fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IHole', V4, V8}} end end end(E2, E3, E4, E5)); _ -> fun (V10) -> begin (V11 = ('un--unelabTy'(V0, V1, {'Idris.TTImp.Unelab.Full'}, V2, V3, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Builtin':'un--fst'(V13))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getFnArgs'(V0, V1) -> case V0 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V2, V3, V4) -> ('un--getFnArgs'(V3, [{'Idris.TTImp.Unelab.Exp', V2, V4} | V1])) end(E0, E1, E2)); {'Idris.TTImp.TTImp.INamedApp', E3, E4, E5, E6} -> (fun (V5, V6, V7, V8) -> ('un--getFnArgs'(V6, [{'Idris.TTImp.Unelab.Named', V5, V7, V8} | V1])) end(E3, E4, E5, E6)); {'Idris.TTImp.TTImp.IAutoApp', E7, E8, E9} -> (fun (V9, V10, V11) -> ('un--getFnArgs'(V10, [{'Idris.TTImp.Unelab.Auto', V9, V11} | V1])) end(E7, E8, E9)); _ -> {'Idris.Builtin.MkPair', V0, V1} end.
