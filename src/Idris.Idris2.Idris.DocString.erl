-module('Idris.Idris2.Idris.DocString').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getContents,visible-5839'/6,
  'case--case block in case block in summarise-5699'/10,
  'case--case block in summarise-5670'/8,
  'case--summarise-5652'/6,
  'case--case block in getDocsForName-5440'/11,
  'case--getDocsForName-5395'/7,
  'case--getDocsForName,showDoc-5291'/8,
  'case--case block in case block in getDocsForName,getExtra-5122'/17,
  'case--case block in getDocsForName,getExtra-5039'/8,
  'case--getDocsForName,getExtra-5020'/8,
  'case--getDocsForName,getIFaceDoc-4942'/12,
  'case--getDocsForName,getIFaceDoc-4877'/8,
  'case--getDocsForName,getIFaceDoc-4802'/13,
  'case--getDocsForName,getIFaceDoc-4731'/10,
  'case--getDocsForName,getIFaceDoc-4668'/7,
  'case--getDocsForName,getMethDoc-4583'/7,
  'case--getDocsForName,getImplDoc-4511'/7,
  'case--case block in getDocsForName,getConstructorDoc-4392'/10,
  'case--getDocsForName,getConstructorDoc-4365'/7,
  'case--getDocsForName,showTotal-4312'/7,
  'case--getDocsForName,addNL-4270'/6,
  'case--getDocsForPrimitive-4205'/4,
  'case--addDocStringNS-4178'/8,
  'case--addDocStringNS-4130'/6,
  'case--addDocString-4101'/6,
  'nested--13266-5827--in--un--visible'/6,
  'nested--11545-4254--in--un--showTotal'/6,
  'nested--11545-4260--in--un--showDoc'/5,
  'nested--11545-4253--in--un--indent'/5,
  'nested--13266-5828--in--un--inNS'/4,
  'nested--11545-4257--in--un--getMethDoc'/6,
  'nested--11545-4256--in--un--getImplDoc'/6,
  'nested--11545-4258--in--un--getIFaceDoc'/5,
  'nested--11545-4259--in--un--getExtra'/7,
  'nested--11545-4255--in--un--getConstructorDoc'/6,
  'nested--11545-4252--in--un--addNL'/5,
  'un--summarise'/4,
  'un--getDocsForPrimitive'/3,
  'un--getDocsForPTerm'/3,
  'un--getDocsForName'/5,
  'un--getContents'/4,
  'un--addDocStringNS'/6,
  'un--addDocString'/5
]).
'case--getContents,visible-5839'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V6 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V17 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Private'}))} end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V29) -> {'Idris.Prelude.Types.Right', 1} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in summarise-5699'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V10, V11) -> case V10 of <<""/utf8>> -> {'Idris.Prelude.Types.Nothing'}; _ -> {'Idris.Prelude.Types.Just', V10} end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in summarise-5670'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> case V9 of [] -> ('case--case block in case block in summarise-5699'(V0, V1, V2, V3, V4, V5, V6, V10, V11, ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V11)))); _ -> {'Idris.Prelude.Types.Nothing'} end end(E2, E3)); _ -> {'Idris.Prelude.Types.Nothing'} end end(E0, E1)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--summarise-5652'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> begin (V17 = begin (V7 = {'Idris.Prelude.Types.Just', V6}), ('case--case block in summarise-5670'(V0, V1, V2, V3, V4, V6, V7, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V0, case V3 of {'Idris.Idris.Syntax.MkSyntax', E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V12 end(E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), fun (V18) -> begin (V40 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V2, [], V4, {'Idris.Core.Env.Nil'}, case V6 of {'Idris.Core.Context.MkGlobalDef', E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V21 end(E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V18))), case V40 of {'Idris.Prelude.Types.Left', E31} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V2, V1, {'Idris.Core.Env.Nil'}, V42, V18))), case V43 of {'Idris.Prelude.Types.Left', E33} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V45) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V45)), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V46) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, V46)) end end, V17))))))))} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0)); _ -> fun (V47) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end.
'case--case block in getDocsForName-5440'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of [E0 | E1] -> (fun (V11, V12) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V13) -> ('nested--11545-4260--in--un--showDoc'(V0, V1, V2, V3, V13)) end, V10, [])) end(E0, E1)); [] -> fun (V14) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No documentation for "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)))) | []]} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsForName-5395'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [E0 | E1] -> (fun (V7, V8) -> begin (V9 = [V7 | V8]), begin (V10 = [V7 | V8]), ('case--case block in getDocsForName-5440'(V0, V1, V2, V3, V4, V5, V8, V7, V9, V10, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V19, V20, V21)) end end end end end, fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V23)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V24, V25)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V26) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V26, case V4 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V31 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V11) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V11)) end, V10)))))) end end end(E0, E1)); _ -> fun (V36) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V3, V1, V0, V36)) end end.
'case--getDocsForName,showDoc-5291'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> fun (V9) -> begin (V31 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V6, {'Idris.Core.Env.Nil'}, case V8 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30) -> V12 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V9))), case V31 of {'Idris.Prelude.Types.Left', E22} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V33) -> begin (V34 = ('Idris.Idris2.Core.Context':'un--aliasName'(V3, V4, V9))), case V34 of {'Idris.Prelude.Types.Left', E24} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V36) -> begin (V37 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V33, V9))), case V37 of {'Idris.Prelude.Types.Left', E26} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V36)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V39)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('nested--11545-4252--in--un--addNL'(V0, V1, V2, V3, ('nested--11545-4253--in--un--indent'(V0, V1, V2, V3, V5))))))))))))), begin (V41 = ('nested--11545-4259--in--un--getExtra'(V0, V1, V2, V3, V4, V8, V9))), case V41 of {'Idris.Prelude.Types.Left', E28} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V43) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V40, V43))} end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V44) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V3, V1, V4, V44)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in getDocsForName,getExtra-5122'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of [] -> fun (V17) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end; _ -> fun (V18) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Constructors:\x{a}"/utf8>>, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V30)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V31, V32)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}))(V16))))} end end.
'case--case block in getDocsForName,getExtra-5039'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Context.PMDef', E0, E1, E2, E3, E4} -> (fun (V8, V9, V10, V11, V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', ('nested--11545-4254--in--un--showTotal'(V0, V1, V2, V3, V5, case V4 of {'Idris.Core.Context.MkGlobalDef', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V24 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))} end end(E0, E1, E2, E3, E4)); {'Idris.Core.Context.TCon', E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V35, V36, V37, V38, V39, V40, V41, V42) -> fun (V43) -> begin (V55 = begin (V50 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V44) -> fun (V45) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V3, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V46) -> fun (V47) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V46, V47)) end end, fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V48, V49)) end end}, V44, V45)) end end, V41, []))(V43))), case V50 of {'Idris.Prelude.Types.Left', E34} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V52) -> (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V53) -> fun (V54) -> ('nested--11545-4255--in--un--getConstructorDoc'(V0, V1, V2, V3, V53, V54)) end end, V52, []))(V43)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V55 of {'Idris.Prelude.Types.Left', E36} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V57) -> (('case--case block in case block in getDocsForName,getExtra-5122'(V0, V1, V2, V3, V4, V5, V6, V35, V36, V37, V38, V39, V40, V42, V41, V57, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V58) -> V58 end, V57))))(V43)) end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26, E27, E28, E29, E30, E31, E32, E33)); _ -> fun (V59) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end.
'case--getDocsForName,getExtra-5020'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> ('case--case block in getDocsForName,getExtra-5039'(V0, V1, V2, V3, V4, V5, V6, case V4 of {'Idris.Core.Context.MkGlobalDef', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28) -> V25 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)); [E21 | E22] -> (fun (V29, V30) -> case V30 of [] -> ('nested--11545-4258--in--un--getIFaceDoc'(V0, V1, V2, V3, V29)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end end(E21, E22)); _ -> fun (V32) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end.
'case--getDocsForName,getIFaceDoc-4942'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of [] -> fun (V12) -> {'Idris.Prelude.Types.Right', []} end; [E0 | E1] -> (fun (V13, V14) -> case V13 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V15, V16) -> ('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V17) -> fun (V18) -> ('nested--11545-4256--in--un--getImplDoc'(V0, V1, V2, V3, V17, V18)) end end, V16, [])) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsForName,getIFaceDoc-4877'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end; _ -> fun (V9) -> begin (V12 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V10) -> fun (V11) -> ('Idris.Idris2.Idris.Resugar':'un--pterm'(V3, V2, V10, V11)) end end, V7, []))(V9))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Constraints: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V15) -> ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V15)) end, V14)))), <<"\x{a}"/utf8>>))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--getDocsForName,getIFaceDoc-4802'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of [] -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Implementations:\x{a}"/utf8>>, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V15, V16, V17)) end end end end end, fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V24)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V25, V26)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}))(V12)))) end.
'case--getDocsForName,getIFaceDoc-4731'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Methods:\x{a}"/utf8>>, (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V21)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V22, V23)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}))(V9)))) end.
'case--getDocsForName,getIFaceDoc-4668'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [] -> <<""/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Parameters: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V7) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V7)) end, V6)))), <<"\x{a}"/utf8>>)))) end.
'case--getDocsForName,getMethDoc-4583'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of [E0 | E1] -> (fun (V7, V8) -> case V7 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V9, V10) -> case V8 of [] -> fun (V11) -> begin (V16 = ('Idris.Idris2.Idris.Resugar':'un--pterm'(V3, V2, case V4 of {'Idris.Idris.Syntax.MkMethod', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> V15 end(E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(case V4 of {'Idris.Idris.Syntax.MkMethod', E10, E11, E12, E13} -> (fun (V19, V20, V21, V22) -> V19 end(E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V18)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_TotalReq'(V23)))) end end, case V4 of {'Idris.Idris.Syntax.MkMethod', E14, E15, E16, E17} -> (fun (V24, V25, V26, V27) -> V26 end(E14, E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('nested--11545-4252--in--un--addNL'(V0, V1, V2, V3, ('nested--11545-4253--in--un--indent'(V0, V1, V2, V3, V10))))))))))))))}} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E2, E3)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1)); _ -> fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--getDocsForName,getImplDoc-4511'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V30 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V5, {'Idris.Core.Env.Nil'}, case V7 of {'Idris.Core.Context.MkGlobalDef', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29) -> V11 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V30 of {'Idris.Prelude.Types.Left', E22} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V32, V8))), case V33 of {'Idris.Prelude.Types.Left', E24} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('nested--11545-4252--in--un--addNL'(V0, V1, V2, V3, ('nested--11545-4253--in--un--indent'(V0, V1, V2, V3, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V35))))))}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getDocsForName,getConstructorDoc-4392'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V12, V13) -> case V11 of [] -> fun (V14) -> begin (V36 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V5, {'Idris.Core.Env.Nil'}, case V6 of {'Idris.Core.Context.MkGlobalDef', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V17 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V14))), case V36 of {'Idris.Prelude.Types.Left', E25} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V38) -> begin (V39 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V38, V14))), case V39 of {'Idris.Prelude.Types.Left', E27} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V12)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V41)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('nested--11545-4252--in--un--addNL'(V0, V1, V2, V3, ('nested--11545-4253--in--un--indent'(V0, V1, V2, V3, V13))))))))))))}} end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V42) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E2, E3)); _ -> fun (V43) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end end(E0, E1)); _ -> fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--getDocsForName,getConstructorDoc-4365'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E1} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V12) -> begin (V13 = {'Idris.Prelude.Types.Just', V7}), (('case--case block in getDocsForName,getConstructorDoc-4392'(V0, V1, V2, V3, V4, V5, V7, V13, V12, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V4, case V12 of {'Idris.Idris.Syntax.MkSyntax', E3, E4, E5, E6, E7, E8, E9, E10, E11} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V18 end(E3, E4, E5, E6, E7, E8, E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V8)) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsForName,showTotal-4312'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.TT.Unchecked'} -> (fun () -> <<""/utf8>> end()); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}Totality: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Totality'(V4)))) end.
'case--getDocsForName,addNL-4270'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> <<""/utf8>>; 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, <<"\x{a}"/utf8>>)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDocsForPrimitive-4205'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> fun (V6) -> begin (V7 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V2, V1, {'Idris.Core.Env.Nil'}, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V9))))))), {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.String':'un--++'(V10, <<"\x{a}\x{9}Primitive"/utf8>>)) | []]} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addDocStringNS-4178'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16) -> {'Idris.Idris.Syntax.MkSyntax', V8, V9, V10, V11, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'('erased', V6, V0, V12)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V6, {'Idris.Builtin.MkUnit'}, V13)), V14, V15, V16} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addDocStringNS-4130'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V6, V7) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V6, V2)), V7} end(E0, E1)); _ -> {'Idris.Core.Name.NS', V2, V5} end.
'case--addDocString-4101'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Idris.Syntax.MkSyntax', E0, E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14) -> {'Idris.Idris.Syntax.MkSyntax', V6, V7, V8, V9, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'('erased', V4, V0, V10)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V4, {'Idris.Builtin.MkUnit'}, V11)), V12, V13, V14} end(E0, E1, E2, E3, E4, E5, E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13266-5827--in--un--visible'(V0, V1, V2, V3, V4, V5) -> begin (V33 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V3 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26} -> (fun (V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V6 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V33 of {'Idris.Prelude.Types.Left', E27} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.TT':'dn--un--/=_Eq_Visibility'(case V36 of {'Idris.Core.Context.MkGlobalDef', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50} -> (fun (V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57) -> V46 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Private'}))} end(E29)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 1} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11545-4254--in--un--showTotal'(V0, V1, V2, V3, V4, V5) -> ('case--getDocsForName,showTotal-4312'(V0, V1, V2, V3, V5, V4, case V5 of {'Idris.Core.TT.MkTotality', E0, E1} -> (fun (V6, V7) -> V6 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'nested--11545-4260--in--un--showDoc'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V39 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V5, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V39 of {'Idris.Prelude.Types.Left', E31} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E33} -> (fun (V42) -> begin (V64 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V11, {'Idris.Core.Env.Nil'}, case V42 of {'Idris.Core.Context.MkGlobalDef', E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63) -> V45 end(E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V64 of {'Idris.Prelude.Types.Left', E55} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V66) -> begin (V67 = ('Idris.Idris2.Core.Context':'un--aliasName'(V3, V5, V7))), case V67 of {'Idris.Prelude.Types.Left', E57} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V69) -> begin (V70 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V66, V7))), case V70 of {'Idris.Prelude.Types.Left', E59} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V72) -> begin (V73 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V69)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V72)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('nested--11545-4252--in--un--addNL'(V0, V1, V2, V3, ('nested--11545-4253--in--un--indent'(V0, V1, V2, V3, V6))))))))))))), begin (V74 = ('nested--11545-4259--in--un--getExtra'(V0, V1, V2, V3, V5, V42, V7))), case V74 of {'Idris.Prelude.Types.Left', E61} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V76) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V73, V76))} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V3, V1, V5, V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11545-4253--in--un--indent'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{9}"/utf8>>, V5)) end, ('Idris.Idris2.Data.List1':'un--forget'('erased', ('Idris.Idris2.Libraries.Data.String.Extra':'un--lines'(V4)))))))).
'nested--13266-5828--in--un--inNS'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E2} -> (fun (V6) -> ('Idris.Idris2.Core.Name.Namespace':'un--isParentOf'(V0, V4)) end(E2)); _ -> 1 end end(E0, E1)); _ -> 1 end.
'nested--11545-4257--in--un--getMethDoc'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> (('case--getDocsForName,getMethDoc-4583'(V0, V1, V2, V3, V4, V9, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', case V4 of {'Idris.Idris.Syntax.MkMethod', E2, E3, E4, E5} -> (fun (V10, V11, V12, V13) -> V10 end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case V9 of {'Idris.Idris.Syntax.MkSyntax', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22) -> V18 end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11545-4256--in--un--getImplDoc'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V37 of {'Idris.Prelude.Types.Left', E29} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E31} -> (fun (V40) -> begin (V62 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V3, [], V9, {'Idris.Core.Env.Nil'}, case V40 of {'Idris.Core.Context.MkGlobalDef', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61) -> V43 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5))), case V62 of {'Idris.Prelude.Types.Left', E53} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V64) -> begin (V65 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V3, V2, {'Idris.Core.Env.Nil'}, V64, V5))), case V65 of {'Idris.Prelude.Types.Left', E55} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', ('nested--11545-4252--in--un--addNL'(V0, V1, V2, V3, ('nested--11545-4253--in--un--indent'(V0, V1, V2, V3, ('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V67))))))}} end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11545-4258--in--un--getIFaceDoc'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> begin (V13 = ('case--getDocsForName,getIFaceDoc-4668'(V0, V1, V2, V3, V5, V6, case V6 of {'Idris.Idris.Syntax.MkIFaceInfo', E2, E3, E4, E5, E6, E7} -> (fun (V7, V8, V9, V10, V11, V12) -> V9 end(E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), fun (V14) -> begin (V21 = (('case--getDocsForName,getIFaceDoc-4877'(V0, V1, V2, V3, V5, V6, V13, case V6 of {'Idris.Idris.Syntax.MkIFaceInfo', E8, E9, E10, E11, E12, E13} -> (fun (V15, V16, V17, V18, V19, V20) -> V18 end(E8, E9, E10, E11, E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V21 of {'Idris.Prelude.Types.Left', E14} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V23) -> begin (V32 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V24) -> fun (V25) -> ('nested--11545-4257--in--un--getMethDoc'(V0, V1, V2, V3, V24, V25)) end end, case V6 of {'Idris.Idris.Syntax.MkIFaceInfo', E16, E17, E18, E19, E20, E21} -> (fun (V26, V27, V28, V29, V30, V31) -> V30 end(E16, E17, E18, E19, E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, []))(V14))), case V32 of {'Idris.Prelude.Types.Left', E22} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V34) -> begin (V36 = ('case--getDocsForName,getIFaceDoc-4731'(V0, V1, V2, V3, V5, V6, V13, V23, V34, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V35) -> V35 end, V34))))), begin (V37 = ('Idris.Idris2.Core.Context':'un--getSearchData'(V3, V1, 1, V5, V14))), case V37 of {'Idris.Prelude.Types.Left', E24} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V39) -> begin (V42 = (('case--getDocsForName,getIFaceDoc-4942'(V0, V1, V2, V3, V5, V6, V13, V23, V34, V36, V39, case V39 of {'Idris.Core.Context.MkSearchData', E26, E27} -> (fun (V40, V41) -> V41 end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V14))), case V42 of {'Idris.Prelude.Types.Left', E28} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V44) -> begin (V46 = ('case--getDocsForName,getIFaceDoc-4802'(V0, V1, V2, V3, V5, V6, V13, V23, V34, V36, V39, V44, ('Idris.Idris2.Data.List':'un--mapMaybe'('erased', 'erased', fun (V45) -> V45 end, V44))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, ('Idris.Idris2.Prelude.Types.String':'un--++'(V23, ('Idris.Idris2.Prelude.Types.String':'un--++'(V36, V46))))))} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11545-4259--in--un--getExtra'(V0, V1, V2, V3, V4, V5, V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> (('case--getDocsForName,getExtra-5020'(V0, V1, V2, V3, V5, V4, V10, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V4, case V10 of {'Idris.Idris.Syntax.MkSyntax', E2, E3, E4, E5, E6, E7, E8, E9, E10} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19) -> V13 end(E2, E3, E4, E5, E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11545-4255--in--un--getConstructorDoc'(V0, V1, V2, V3, V4, V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V37 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V4, case V9 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V10 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5))), case V37 of {'Idris.Prelude.Types.Left', E29} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E31} -> (fun (V40) -> begin (V42 = begin (V41 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E32} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V44) -> begin (V45 = {'Idris.Prelude.Types.Just', V40}), (('case--case block in getDocsForName,getConstructorDoc-4392'(V0, V1, V2, V3, V4, V9, V40, V45, V44, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V4, case V44 of {'Idris.Idris.Syntax.MkSyntax', E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53, V54) -> V50 end(E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V5)) end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--11545-4252--in--un--addNL'(V0, V1, V2, V3, V4) -> ('case--getDocsForName,addNL-4270'(V0, V1, V2, V3, V4, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(('Idris.Idris2.Data.String':'un--trim'(V4)), <<""/utf8>>)))).
'un--summarise'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V39 = (('Idris.Idris2.Core.Context':'un--lookupCtxtExact'(V2, case V11 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V12 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V39 of {'Idris.Prelude.Types.Left', E31} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V41) -> case V41 of {'Idris.Prelude.Types.Just', E33} -> (fun (V42) -> begin (V53 = begin (V43 = {'Idris.Prelude.Types.Just', V42}), ('case--case block in summarise-5670'(V2, V1, V0, V7, V11, V42, V43, ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V2, case V7 of {'Idris.Idris.Syntax.MkSyntax', E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V48 end(E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)))) end), begin (V75 = ('Idris.Idris2.Core.Normalise':'un--normaliseHoles'(V0, [], V11, {'Idris.Core.Env.Nil'}, case V42 of {'Idris.Core.Context.MkGlobalDef', E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63} -> (fun (V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67, V68, V69, V70, V71, V72, V73, V74) -> V56 end(E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58, E59, E60, E61, E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V75 of {'Idris.Prelude.Types.Left', E64} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V77) -> begin (V78 = ('Idris.Idris2.Idris.Resugar':'un--resugar'([], V0, V1, {'Idris.Core.Env.Nil'}, V77, V3))), case V78 of {'Idris.Prelude.Types.Left', E66} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V80) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'un--nameRoot'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V80)), ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> <<""/utf8>> end, fun () -> fun (V81) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{9}"/utf8>>, V81)) end end, V53))))))))} end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E33)); _ -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getDocsForPrimitive'(V0, V1, V2) -> ('case--getDocsForPrimitive-4205'(V2, V1, V0, ('Idris.Idris2.TTImp.Elab.Prim':'un--checkPrim'('erased', {'Idris.Core.FC.EmptyFC'}, V2)))).
'un--getDocsForPTerm'(V0, V1, V2) -> case V2 of {'Idris.Idris.Syntax.PRef', E0, E1} -> (fun (V3, V4) -> fun (V5) -> ('un--getDocsForName'(V0, V1, V3, V4, V5)) end end(E0, E1)); {'Idris.Idris.Syntax.PPrimVal', E2, E3} -> (fun (V6, V7) -> ('un--getDocsForPrimitive'(V0, V1, V7)) end(E2, E3)); {'Idris.Idris.Syntax.PType', E4} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', [<<"Type : Type\x{a}\x{9}The type of all types is Type. The type of Type is Type."/utf8>> | []]} end end(E4)); {'Idris.Idris.Syntax.PString', E5, E6} -> (fun (V10, V11) -> fun (V12) -> {'Idris.Prelude.Types.Right', [<<"String Literal\x{a}\x{9}Desugars to a fromString call"/utf8>> | []]} end end(E5, E6)); {'Idris.Idris.Syntax.PList', E7, E8} -> (fun (V13, V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', [<<"List Literal\x{a}\x{9}Desugars to (::) and Nil"/utf8>> | []]} end end(E7, E8)); {'Idris.Idris.Syntax.PPair', E9, E10, E11} -> (fun (V16, V17, V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', [<<"Pair Literal\x{a}\x{9}Desugars to MkPair or Pair"/utf8>> | []]} end end(E9, E10, E11)); {'Idris.Idris.Syntax.PDPair', E12, E13, E14, E15} -> (fun (V20, V21, V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', [<<"Dependant Pair Literal\x{a}\x{9}Desugars to MkDPair or DPair"/utf8>> | []]} end end(E12, E13, E14, E15)); {'Idris.Idris.Syntax.PUnit', E16} -> (fun (V25) -> fun (V26) -> {'Idris.Prelude.Types.Right', [<<"Unit Literal\x{a}\x{9}Desugars to MkUnit or Unit"/utf8>> | []]} end end(E16)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Docs not implemented for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Idris.Syntax':'dn--un--show_Show_PTerm'(V2)), <<" yet"/utf8>>)))) | []]} end end.
'un--getDocsForName'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V40 = (('Idris.Idris2.Core.Context':'un--lookupCtxtName'(V3, case V12 of {'Idris.Core.Context.MkDefs', E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39) -> V13 end(E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4))), case V40 of {'Idris.Prelude.Types.Left', E31} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V42) -> case V42 of [E33 | E34] -> (fun (V43, V44) -> begin (V45 = [V43 | V44]), begin (V46 = [V43 | V44]), (('case--case block in getDocsForName-5440'(V3, V2, V1, V0, V8, V12, V44, V43, V45, V46, (('Idris.Idris2.Prelude.Interfaces':'un--concatMap'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V55, V56, V57)) end end end end end, fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V59)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_(List $a)'('erased', V60, V61)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_(List $a)'('erased'))}}, fun (V62) -> ('Idris.Idris2.Libraries.Data.ANameMap':'un--lookupName'('erased', V62, case V8 of {'Idris.Idris.Syntax.MkSyntax', E35, E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V63, V64, V65, V66, V67, V68, V69, V70, V71) -> V67 end(E35, E36, E37, E38, E39, E40, E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V47) -> ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V47)) end, V46))))))(V4)) end end end(E33, E34)); _ -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V2, V3, V4)) end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getContents'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V35 = (('Idris.Idris2.Core.Context':'un--allNames'(case V7 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34) -> V8 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V3))), case V35 of {'Idris.Prelude.Types.Left', E29} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V37) -> begin (V39 = ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V38) -> ('nested--13266-5828--in--un--inNS'(V2, V1, V0, V38)) end, V37))), begin (V42 = (('Idris.Idris2.Core.Core':'un--filterM'('erased', fun (V40) -> fun (V41) -> ('nested--13266-5827--in--un--visible'(V2, V1, V0, V7, V40, V41)) end end, V39))(V3))), case V42 of {'Idris.Prelude.Types.Left', E31} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V44) -> (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V45) -> fun (V46) -> ('un--summarise'(V0, V1, V45, V46)) end end, ('Idris.Idris2.Data.List':'un--sort'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V47, V48)) end end, fun (V49) -> fun (V50) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V49, V50)) end end}, fun (V51) -> fun (V52) -> ('Idris.Idris2.Core.Name':'dn--un--compare_Ord_Name'(V51, V52)) end end, fun (V53) -> fun (V54) -> ('Idris.Idris2.Core.Name':'dn--un--<_Ord_Name'(V53, V54)) end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Name':'dn--un-->_Ord_Name'(V55, V56)) end end, fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Name':'dn--un--<=_Ord_Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Name':'dn--un-->=_Ord_Name'(V59, V60)) end end, fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Name':'dn--un--max_Ord_Name'(V61, V62)) end end, fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Name':'dn--un--min_Ord_Name'(V63, V64)) end end}, V44)), []))(V3)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDocStringNS'(V0, V1, V2, V3, V4, V5) -> begin (V6 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V3))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V11 = case V8 of {'Idris.Core.Name.NS', E2, E3} -> (fun (V9, V10) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--<.>'(V9, V2)), V10} end(E2, E3)); _ -> {'Idris.Core.Name.NS', V2, V8} end), begin (V13 = begin (V12 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V12} end), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V25 = ('erlang':'put'(V1, case V15 of {'Idris.Idris.Syntax.MkSyntax', E6, E7, E8, E9, E10, E11, E12, E13, E14} -> (fun (V16, V17, V18, V19, V20, V21, V22, V23, V24) -> {'Idris.Idris.Syntax.MkSyntax', V16, V17, V18, V19, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'('erased', V11, V4, V20)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V11, {'Idris.Builtin.MkUnit'}, V21)), V22, V23, V24} end(E6, E7, E8, E9, E10, E11, E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V25} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addDocString'(V0, V1, V2, V3, V4) -> begin (V5 = (('Idris.Idris2.Core.Context':'un--inCurrentNS'(V0, V2))(V4))), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V21 = ('erlang':'put'(V1, case V11 of {'Idris.Idris.Syntax.MkSyntax', E4, E5, E6, E7, E8, E9, E10, E11, E12} -> (fun (V12, V13, V14, V15, V16, V17, V18, V19, V20) -> {'Idris.Idris.Syntax.MkSyntax', V12, V13, V14, V15, ('Idris.Idris2.Libraries.Data.ANameMap':'un--addName'('erased', V7, V3, V16)), ('Idris.Idris2.Libraries.Data.NameMap':'un--insert'('erased', V7, {'Idris.Builtin.MkUnit'}, V17)), V18, V19, V20} end(E4, E5, E6, E7, E8, E9, E10, E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V21} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
