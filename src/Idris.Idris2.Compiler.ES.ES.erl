-module('Idris.Idris2.Compiler.ES.ES').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--searchForeign-4188'/4,
  'case--constPrimitives,intImpl-3090'/7,
  'case--addToPreamble-1865'/7,
  'nested--7280-2993--in--un--truncInt'/4,
  'nested--7280-2994--in--un--shrink'/4,
  'nested--6281-2065--in--un--okchar'/2,
  'nested--5939-1748--in--un--okchar'/2,
  'nested--7280-2996--in--un--intImpl'/4,
  'nested--7280-2995--in--un--expand'/4,
  'un--useBigInt\x{27}'/1,
  'un--useBigInt'/1,
  'un--toInt'/2,
  'un--toBigInt'/1,
  'un--tag2es'/1,
  'un--static_preamble'/0,
  'un--searchForeign'/2,
  'un--readCCPart'/1,
  'un--nSpaces'/1,
  'un--mult'/4,
  'un--makeIntBound'/3,
  'un--makeForeign'/4,
  'un--keywordSafe'/1,
  'un--jsString'/1,
  'un--jsPrim'/4,
  'un--jsOp'/3,
  'un--jsNumberOfString'/3,
  'un--jsName'/1,
  'un--jsIntOfString'/4,
  'un--jsIntOfDouble'/2,
  'un--jsIntOfChar'/2,
  'un--jsIdent'/1,
  'un--jsCrashExp'/3,
  'un--jsConstant'/2,
  'un--jsCharOfInt'/4,
  'un--jsBigIntOfString'/3,
  'un--jsAnyToString'/1,
  'un--imperative2es'/5,
  'un--impExp2es'/3,
  'un--fromInt'/2,
  'un--fromBigInt'/1,
  'un--foreignDecl'/5,
  'un--esName'/1,
  'un--div'/4,
  'un--constPrimitives'/1,
  'un--compileToES'/4,
  'un--boundedUIntOp'/5,
  'un--boundedUInt'/4,
  'un--boundedIntOp'/5,
  'un--boundedInt'/4,
  'un--boolOp'/3,
  'un--bitOp'/5,
  'un--binOp'/3,
  'un--arithOp'/5,
  'un--alt2es'/5,
  'un--addToPreamble'/5,
  'un--addSupportToPreamble'/4,
  'un--addStringIteratorToPreamble'/1,
  'un--addConstToPreamble'/3
]).
'case--searchForeign-4188'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V6) -> fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V6, V7)) end end, fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V8, V9)) end end}, V4, V2)) of 1 -> {'Idris.Prelude.Types.Just', V5}; 0 -> ('un--searchForeign'(V2, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--constPrimitives,intImpl-3090'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V7, V8) -> case V8 of {'Idris.Core.TT.Signed', E8} -> (fun (V9) -> case V9 of {'Idris.Core.TT.Unlimited'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', V4} end end()); _ -> case V7 of {'Idris.Core.TT.Signed', E9} -> (fun (V11) -> case V8 of {'Idris.Core.TT.Signed', E10} -> (fun (V12) -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'(V12, V11)) of 1 -> fun (V13) -> {'Idris.Prelude.Types.Right', V4} end; 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Core.TT.Unsigned', E11} -> (fun (V14) -> case ('un--useBigInt'(V3)) of 0 -> case ('un--useBigInt'(V2)) of 1 -> ('nested--7280-2993--in--un--truncInt'(V0, 1, V2, ('un--toBigInt'(V1)))); _ -> V5 end; _ -> V5 end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); {'Idris.Core.TT.Unsigned', E12} -> (fun (V15) -> case V8 of {'Idris.Core.TT.Unsigned', E13} -> (fun (V16) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V16, V15)) of 1 -> fun (V17) -> {'Idris.Prelude.Types.Right', V4} end; 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13)); {'Idris.Core.TT.Signed', E14} -> (fun (V18) -> case ('Idris.Idris2.Core.TT':'dn--un-->_Ord_Precision'(V18, {'Idris.Core.TT.P', V15})) of 1 -> fun (V19) -> {'Idris.Prelude.Types.Right', V4} end; 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> case V7 of {'Idris.Core.TT.Signed', E2} -> (fun (V20) -> case V8 of {'Idris.Core.TT.Signed', E3} -> (fun (V21) -> case ('Idris.Idris2.Core.TT':'dn--un-->=_Ord_Precision'(V21, V20)) of 1 -> fun (V22) -> {'Idris.Prelude.Types.Right', V4} end; 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Core.TT.Unsigned', E4} -> (fun (V23) -> case ('un--useBigInt'(V3)) of 0 -> case ('un--useBigInt'(V2)) of 1 -> ('nested--7280-2993--in--un--truncInt'(V0, 1, V2, ('un--toBigInt'(V1)))); _ -> V5 end; _ -> V5 end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Core.TT.Unsigned', E5} -> (fun (V24) -> case V8 of {'Idris.Core.TT.Unsigned', E6} -> (fun (V25) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V25, V24)) of 1 -> fun (V26) -> {'Idris.Prelude.Types.Right', V4} end; 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.Core.TT.Signed', E7} -> (fun (V27) -> case ('Idris.Idris2.Core.TT':'dn--un-->_Ord_Precision'(V27, {'Idris.Core.TT.P', V24})) of 1 -> fun (V28) -> {'Idris.Prelude.Types.Right', V4} end; 0 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--addToPreamble-1865'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V12 = begin (V11 = ('erlang':'put'(V3, case V4 of {'Idris.Compiler.ES.ES.MkESSt', E0, E1} -> (fun (V7, V8) -> {'Idris.Compiler.ES.ES.MkESSt', ('Idris.Idris2.Libraries.Data.SortedMap':'un--insert'(V2, V0, case V4 of {'Idris.Compiler.ES.ES.MkESSt', E2, E3} -> (fun (V9, V10) -> V9 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V8} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V11} end), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Right', V1} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E6} -> (fun (V15) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V15, V0)) of 1 -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"two incompatible definitions for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"<|"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"|> <|"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<"|>"/utf8>>))))))))))))}, V6)); 0 -> {'Idris.Prelude.Types.Right', V1}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7280-2993--in--un--truncInt'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.TT.Signed', E0} -> (fun (V4) -> case V4 of {'Idris.Core.TT.Unlimited'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', V3} end end()); {'Idris.Core.TT.P', E1} -> (fun (V6) -> ('un--boundedInt'(V0, V1, V6, V3)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Unsigned', E2} -> (fun (V7) -> ('un--boundedUInt'(V0, V1, V7, V3)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7280-2994--in--un--shrink'(V0, V1, V2, V3) -> case ('un--useBigInt'(V1)) of 1 -> case ('un--useBigInt'(V2)) of 0 -> ('un--fromBigInt'(V3)); _ -> V3 end; _ -> V3 end.
'nested--6281-2065--in--un--okchar'(V0, V1) -> case V1 of $_ -> <<"_"/utf8>>; _ -> case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V1)) of 1 -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_String'(V1)); 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"$"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'nested--5939-1748--in--un--okchar'(V0, V1) -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Char'(V1, $ )) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{5c})) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{22})) of 1 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Char'(V1, $\x{27})) of 1 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_Char'(V1, $~)); 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> 0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_String'(V1)); 0 -> case V1 of $\x{0} -> <<"\x{5c}0"/utf8>>; $\x{27} -> <<"\x{5c}\x{27}"/utf8>>; $\x{22} -> <<"\x{5c}\x{22}"/utf8>>; $\x{d} -> <<"\x{5c}r"/utf8>>; $\x{a} -> <<"\x{5c}n"/utf8>>; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}u{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))), <<"}"/utf8>>)))) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7280-2996--in--un--intImpl'(V0, V1, V2, V3) -> begin (V4 = ('nested--7280-2995--in--un--expand'(V0, V1, V2, V3))), begin (V9 = fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V6) -> case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> {'Idris.Prelude.Types.Right', ('nested--7280-2994--in--un--shrink'(V0, V1, V2, V8))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('nested--7280-2993--in--un--truncInt'(V0, ('un--useBigInt'(V1)), V2, V3)), V5)) end), ('case--constPrimitives,intImpl-3090'(V0, V3, V2, V1, V4, V9, {'Idris.Builtin.MkPair', V1, V2})) end end.
'nested--7280-2995--in--un--expand'(V0, V1, V2, V3) -> case ('un--useBigInt'(V1)) of 0 -> case ('un--useBigInt'(V2)) of 1 -> ('un--toBigInt'(V3)); _ -> V3 end; _ -> V3 end.
'un--useBigInt\x{27}'(V0) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Int'(V0, 32)).
'un--useBigInt'(V0) -> case V0 of {'Idris.Core.TT.Signed', E0} -> (fun (V1) -> case V1 of {'Idris.Core.TT.P', E1} -> (fun (V2) -> ('un--useBigInt\x{27}'(V2)) end(E1)); {'Idris.Core.TT.Unlimited'} -> (fun () -> 1 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Unsigned', E2} -> (fun (V3) -> ('un--useBigInt\x{27}'(V3)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toInt'(V0, V1) -> case ('un--useBigInt'(V0)) of 1 -> ('un--toBigInt'(V1)); 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toBigInt'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"BigInt("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<")"/utf8>>)))).
'un--tag2es'(V0) -> case V0 of {'Idris.Prelude.Types.Left', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V2) -> ('un--jsString'(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--static_preamble'() -> [<<"class IdrisError extends Error { }"/utf8>> | [<<"function __prim_js2idris_array(x){if(x.length ===0){return {h:0}}else{return {h:1,a1:x[0],a2: __prim_js2idris_array(x.slice(1))}}}"/utf8>> | [<<"function __prim_idris2js_array(x){const result = Array();while (x.h != 0) {result.push(x.a1); x = x.a2;}return result;}"/utf8>> | []]]].
'un--searchForeign'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> ('case--searchForeign-4188'(V2, V3, V0, ('un--readCCPart'(V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--readCCPart'(V0) -> case ('Idris.Idris2.Data.String':'un--break'(fun (V1) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V1, $:)) end, V0)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V2, V3) -> {'Idris.Builtin.MkPair', V2, ('Idris.Idris2.Libraries.Data.String.Extra':'un--drop'((1 + 0), V3))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--nSpaces'(V0) -> ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(V0, $ )))).
'un--mult'(V0, V1, V2, V3) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of {'Idris.Core.TT.Signed', E1} -> (fun (V5) -> case V5 of {'Idris.Core.TT.P', E2} -> (fun (V6) -> case V6 of 32 -> fun (V7) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V8) -> case V8 of {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('un--fromBigInt'(V10))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--boundedInt'(V0, 1, 32, ('un--binOp'(<<"*"/utf8>>, ('un--toBigInt'(V2)), ('un--toBigInt'(V3)))))), V7)) end; _ -> ('un--boundedIntOp'(V0, V6, <<"*"/utf8>>, V2, V3)) end end(E2)); _ -> fun (V11) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"*"/utf8>>, V2, V3))} end end end(E1)); {'Idris.Core.TT.Unsigned', E5} -> (fun (V12) -> case V12 of 32 -> fun (V13) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V14) -> case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', ('un--fromBigInt'(V16))} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--boundedUInt'(V0, 1, 32, ('un--binOp'(<<"*"/utf8>>, ('un--toBigInt'(V2)), ('un--toBigInt'(V3)))))), V13)) end; _ -> ('un--boundedUIntOp'(V0, V12, <<"*"/utf8>>, V2, V3)) end end(E5)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"*"/utf8>>, V2, V3))} end end end(E0)); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"*"/utf8>>, V2, V3))} end end.
'un--makeIntBound'(V0, V1, V2) -> begin (V4 = fun (V3) -> case V1 of 1 -> ('un--toBigInt'(V3)); 0 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), begin (V5 = case V1 of 1 -> <<"bigint_bound_"/utf8>>; 0 -> <<"int_bound_"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), ('un--addConstToPreamble'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)))), ('Idris.Idris2.Prelude.Types.String':'un--++'((V4(<<"2"/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ** "/utf8>>, (V4(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)))))))))) end end.
'un--makeForeign'(V0, V1, V2, V3) -> case ('un--readCCPart'(V3)) of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> case V4 of <<"lambda"/utf8>> -> fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"const "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<")\x{a}"/utf8>>))))))))} end; <<"support"/utf8>> -> case ('Idris.Idris2.Data.String':'un--break'(fun (V7) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V7, $,)) end, V5)) of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V8, V9) -> begin (V10 = ('Idris.Idris2.Libraries.Data.String.Extra':'un--drop'((1 + 0), V9))), fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Directory':'un--readDataFile'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"js/"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, <<".js"/utf8>>)))), V11))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> begin (V19 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V15) -> case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Right', 0} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V18) -> ('un--addSupportToPreamble'(V1, V10, V14, V18)) end, V11))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"const "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, <<"\x{a}"/utf8>>))))))))))))} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; <<"stringIterator"/utf8>> -> fun (V22) -> begin (V26 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V23) -> case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> {'Idris.Prelude.Types.Right', 0} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--addStringIteratorToPreamble'(V1)), V22))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> case V5 of <<"new"/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"const "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V2)), <<" = __prim_stringIteratorNew;\x{a}"/utf8>>))))}; <<"next"/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"const "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V2)), <<" = __prim_stringIteratorNext;\x{a}"/utf8>>))))}; <<"toString"/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"const "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V2)), <<" = __prim_stringIteratorToString;\x{a}"/utf8>>))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid string iterator function: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<", supported functions are \x{22}new\x{22}, \x{22}next\x{22}, \x{22}toString\x{22}"/utf8>>))))}, V22)) end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V29) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"invalid foreign type : "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, <<", supported types are \x{22}lambda\x{22}, \x{22}support\x{22}"/utf8>>))))}, V29)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--keywordSafe'(V0) -> case V0 of <<"var"/utf8>> -> <<"var_"/utf8>>; _ -> V0 end.
'un--jsString'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{27}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V27, V28)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V29) -> ('nested--5939-1748--in--un--okchar'(V0, V29)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))), <<"\x{27}"/utf8>>)))).
'un--jsPrim'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V4, V5) -> case V5 of {'Idris.Core.Name.UN', E2} -> (fun (V6) -> case V6 of <<"prim__newIORef"/utf8>> -> case V3 of [E3 | E4] -> (fun (V7, V8) -> case V8 of [E5 | E6] -> (fun (V9, V10) -> fun (V11) -> case V10 of [E7 | E8] -> (fun (V12, V13) -> case V13 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"({value: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<"})"/utf8>>))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V11)) end end(E7, E8)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V11)) end end end(E5, E6)); _ -> fun (V14) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V14)) end end end(E3, E4)); _ -> fun (V15) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V15)) end end; <<"prim__readIORef"/utf8>> -> case V3 of [E9 | E10] -> (fun (V16, V17) -> case V17 of [E11 | E12] -> (fun (V18, V19) -> fun (V20) -> case V19 of [E13 | E14] -> (fun (V21, V22) -> case V22 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V18, <<".value)"/utf8>>))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V20)) end end(E13, E14)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V20)) end end end(E11, E12)); _ -> fun (V23) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V23)) end end end(E9, E10)); _ -> fun (V24) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V24)) end end; <<"prim__writeIORef"/utf8>> -> case V3 of [E15 | E16] -> (fun (V25, V26) -> case V26 of [E17 | E18] -> (fun (V27, V28) -> case V28 of [E19 | E20] -> (fun (V29, V30) -> fun (V31) -> case V30 of [E21 | E22] -> (fun (V32, V33) -> case V33 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V27, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<".value="/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V29, <<")"/utf8>>))))))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V31)) end end(E21, E22)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V31)) end end end(E19, E20)); _ -> fun (V34) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V34)) end end end(E17, E18)); _ -> fun (V35) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V35)) end end end(E15, E16)); _ -> fun (V36) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V36)) end end; <<"prim__newArray"/utf8>> -> case V3 of [E23 | E24] -> (fun (V37, V38) -> case V38 of [E25 | E26] -> (fun (V39, V40) -> case V40 of [E27 | E28] -> (fun (V41, V42) -> fun (V43) -> case V42 of [E29 | E30] -> (fun (V44, V45) -> case V45 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Array(Number("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V39, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")).fill("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V41, <<"))"/utf8>>))))))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V43)) end end(E29, E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V43)) end end end(E27, E28)); _ -> fun (V46) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V46)) end end end(E25, E26)); _ -> fun (V47) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V47)) end end end(E23, E24)); _ -> fun (V48) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V48)) end end; <<"prim__arrayGet"/utf8>> -> case V3 of [E31 | E32] -> (fun (V49, V50) -> case V50 of [E33 | E34] -> (fun (V51, V52) -> case V52 of [E35 | E36] -> (fun (V53, V54) -> fun (V55) -> case V54 of [E37 | E38] -> (fun (V56, V57) -> case V57 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V51, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V53, <<"])"/utf8>>))))))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V55)) end end(E37, E38)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V55)) end end end(E35, E36)); _ -> fun (V58) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V58)) end end end(E33, E34)); _ -> fun (V59) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V59)) end end end(E31, E32)); _ -> fun (V60) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V60)) end end; <<"prim__arraySet"/utf8>> -> case V3 of [E39 | E40] -> (fun (V61, V62) -> case V62 of [E41 | E42] -> (fun (V63, V64) -> case V64 of [E43 | E44] -> (fun (V65, V66) -> case V66 of [E45 | E46] -> (fun (V67, V68) -> fun (V69) -> case V68 of [E47 | E48] -> (fun (V70, V71) -> case V71 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V63, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V65, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V67, <<")"/utf8>>))))))))))))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V69)) end end(E47, E48)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V69)) end end end(E45, E46)); _ -> fun (V72) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V72)) end end end(E43, E44)); _ -> fun (V73) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V73)) end end end(E41, E42)); _ -> fun (V74) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V74)) end end end(E39, E40)); _ -> fun (V75) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V75)) end end; <<"prim__os"/utf8>> -> case V3 of [] -> begin (V76 = <<"(o => o === \x{27}linux\x{27}?\x{27}unix\x{27}:o===\x{27}win32\x{27}?\x{27}windows\x{27}:o)"/utf8>>), fun (V77) -> begin (V78 = (('un--addConstToPreamble'(V1, <<"sysos"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V76, <<"(require(\x{27}os\x{27}).platform())"/utf8>>))))(V77))), case V78 of {'Idris.Prelude.Types.Left', E49} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V80) -> {'Idris.Prelude.Types.Right', V80} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end; _ -> fun (V81) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V81)) end end; <<"prim__unpack"/utf8>> -> fun (V82) -> case V3 of [E51 | E52] -> (fun (V83, V84) -> case V84 of [] -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V83, <<".split(\x{27}\x{27}).reduceRight((acc, x) => ({h: 1, a1: x, a2: acc}), {h: 0})"/utf8>>))}; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V82)) end end(E51, E52)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V82)) end end; <<"void"/utf8>> -> case V3 of [E53 | E54] -> (fun (V85, V86) -> case V86 of [E55 | E56] -> (fun (V87, V88) -> fun (V89) -> case V88 of [] -> ('un--jsCrashExp'(V1, ('un--jsString'(<<"Error: Executed \x{27}void\x{27}"/utf8>>)), V89)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V89)) end end end(E55, E56)); _ -> fun (V90) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V90)) end end end(E53, E54)); _ -> fun (V91) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V91)) end end; <<"prim__void"/utf8>> -> case V3 of [E57 | E58] -> (fun (V92, V93) -> case V93 of [E59 | E60] -> (fun (V94, V95) -> fun (V96) -> case V95 of [] -> ('un--jsCrashExp'(V1, ('un--jsString'(<<"Error: Executed \x{27}void\x{27}"/utf8>>)), V96)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V96)) end end end(E59, E60)); _ -> fun (V97) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V97)) end end end(E57, E58)); _ -> fun (V98) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V98)) end end; <<"prim__codegen"/utf8>> -> fun (V99) -> case V3 of [] -> begin (V107 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V100) -> case V100 of {'Idris.Prelude.Types.Left', E61} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V102) -> {'Idris.Prelude.Types.Right', case V102 of {'Idris.Compiler.ES.ES.MkESSt', E63, E64} -> (fun (V103, V104) -> V104 end(E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V105) -> begin (V106 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V106} end end, V99))), case V107 of {'Idris.Prelude.Types.Left', E65} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V109) -> case V109 of [E67 | E68] -> (fun (V110, V111) -> {'Idris.Prelude.Types.Right', ('un--jsString'(V110))} end(E67, E68)); _ -> {'Idris.Prelude.Types.Right', <<"\x{22}javascript\x{22}"/utf8>>} end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V99)) end end; _ -> fun (V112) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V112)) end end end(E2)); _ -> fun (V113) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V113)) end end end(E0, E1)); _ -> fun (V114) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"prim not implemented: "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2))))}, V114)) end end.
'un--jsOp'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Add', E0} -> (fun (V3) -> case V2 of {'Idris.Data.Vect.::', E1, E2} -> (fun (V4, V5) -> case V5 of {'Idris.Data.Vect.::', E3, E4} -> (fun (V6, V7) -> case V7 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--arithOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V3)), <<"+"/utf8>>, V4, V6)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Core.TT.Sub', E5} -> (fun (V8) -> case V2 of {'Idris.Data.Vect.::', E6, E7} -> (fun (V9, V10) -> case V10 of {'Idris.Data.Vect.::', E8, E9} -> (fun (V11, V12) -> case V12 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--arithOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V8)), <<"-"/utf8>>, V9, V11)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); {'Idris.Core.TT.Mul', E10} -> (fun (V13) -> case V2 of {'Idris.Data.Vect.::', E11, E12} -> (fun (V14, V15) -> case V15 of {'Idris.Data.Vect.::', E13, E14} -> (fun (V16, V17) -> case V17 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--mult'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V13)), V14, V16)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10)); {'Idris.Core.TT.Div', E15} -> (fun (V18) -> case V2 of {'Idris.Data.Vect.::', E16, E17} -> (fun (V19, V20) -> case V20 of {'Idris.Data.Vect.::', E18, E19} -> (fun (V21, V22) -> case V22 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--div'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V18)), V19, V21)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15)); {'Idris.Core.TT.Mod', E20} -> (fun (V23) -> case V2 of {'Idris.Data.Vect.::', E21, E22} -> (fun (V24, V25) -> case V25 of {'Idris.Data.Vect.::', E23, E24} -> (fun (V26, V27) -> case V27 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--arithOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V23)), <<"%"/utf8>>, V24, V26)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E20)); {'Idris.Core.TT.Neg', E25} -> (fun (V28) -> fun (V29) -> case V2 of {'Idris.Data.Vect.::', E26, E27} -> (fun (V30, V31) -> case V31 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(-("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V30, <<"))"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); {'Idris.Core.TT.ShiftL', E28} -> (fun (V32) -> case V32 of {'Idris.Core.TT.Int32Type'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E37, E38} -> (fun (V33, V34) -> case V34 of {'Idris.Data.Vect.::', E43, E44} -> (fun (V35, V36) -> case V36 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V37) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"<<"/utf8>>, V33, V35))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E45, E46} -> (fun (V38, V39) -> case V39 of {'Idris.Data.Vect.::', E47, E48} -> (fun (V40, V41) -> case V41 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--bitOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V32)), <<"<<"/utf8>>, V38, V40)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43, E44)); _ -> case V2 of {'Idris.Data.Vect.::', E39, E40} -> (fun (V42, V43) -> case V43 of {'Idris.Data.Vect.::', E41, E42} -> (fun (V44, V45) -> case V45 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--bitOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V32)), <<"<<"/utf8>>, V42, V44)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37, E38)); _ -> case V2 of {'Idris.Data.Vect.::', E33, E34} -> (fun (V46, V47) -> case V47 of {'Idris.Data.Vect.::', E35, E36} -> (fun (V48, V49) -> case V49 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--bitOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V32)), <<"<<"/utf8>>, V46, V48)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E29, E30} -> (fun (V50, V51) -> case V51 of {'Idris.Data.Vect.::', E31, E32} -> (fun (V52, V53) -> case V53 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--bitOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V32)), <<"<<"/utf8>>, V50, V52)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); {'Idris.Core.TT.ShiftR', E49} -> (fun (V54) -> case V54 of {'Idris.Core.TT.Int32Type'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E58, E59} -> (fun (V55, V56) -> case V56 of {'Idris.Data.Vect.::', E64, E65} -> (fun (V57, V58) -> case V58 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V59) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<">>"/utf8>>, V55, V57))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E66, E67} -> (fun (V60, V61) -> case V61 of {'Idris.Data.Vect.::', E68, E69} -> (fun (V62, V63) -> case V63 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--bitOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V54)), <<">>"/utf8>>, V60, V62)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E66, E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E64, E65)); _ -> case V2 of {'Idris.Data.Vect.::', E60, E61} -> (fun (V64, V65) -> case V65 of {'Idris.Data.Vect.::', E62, E63} -> (fun (V66, V67) -> case V67 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--bitOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V54)), <<">>"/utf8>>, V64, V66)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60, E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58, E59)); _ -> case V2 of {'Idris.Data.Vect.::', E54, E55} -> (fun (V68, V69) -> case V69 of {'Idris.Data.Vect.::', E56, E57} -> (fun (V70, V71) -> case V71 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--bitOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V54)), <<">>"/utf8>>, V68, V70)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E54, E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E50, E51} -> (fun (V72, V73) -> case V73 of {'Idris.Data.Vect.::', E52, E53} -> (fun (V74, V75) -> case V75 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--bitOp'(V0, ('Idris.Idris2.Core.TT':'un--intKind'(V54)), <<">>"/utf8>>, V72, V74)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E52, E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); {'Idris.Core.TT.BAnd', E70} -> (fun (V76) -> case V76 of {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E79, E80} -> (fun (V77, V78) -> case V78 of {'Idris.Data.Vect.::', E85, E86} -> (fun (V79, V80) -> case V80 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V81) -> {'Idris.Prelude.Types.Right', ('un--fromBigInt'(('un--binOp'(<<"&"/utf8>>, ('un--toBigInt'(V77)), ('un--toBigInt'(V79))))))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E87, E88} -> (fun (V82, V83) -> fun (V84) -> case V83 of {'Idris.Data.Vect.::', E89, E90} -> (fun (V85, V86) -> case V86 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V82, V85))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E89, E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E87, E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85, E86)); _ -> case V2 of {'Idris.Data.Vect.::', E81, E82} -> (fun (V87, V88) -> fun (V89) -> case V88 of {'Idris.Data.Vect.::', E83, E84} -> (fun (V90, V91) -> case V91 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V87, V90))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E83, E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81, E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79, E80)); _ -> case V2 of {'Idris.Data.Vect.::', E75, E76} -> (fun (V92, V93) -> fun (V94) -> case V93 of {'Idris.Data.Vect.::', E77, E78} -> (fun (V95, V96) -> case V96 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V92, V95))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E77, E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75, E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E71, E72} -> (fun (V97, V98) -> fun (V99) -> case V98 of {'Idris.Data.Vect.::', E73, E74} -> (fun (V100, V101) -> case V101 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"&"/utf8>>, V97, V100))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E73, E74)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E71, E72)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E70)); {'Idris.Core.TT.BOr', E91} -> (fun (V102) -> case V102 of {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E100, E101} -> (fun (V103, V104) -> case V104 of {'Idris.Data.Vect.::', E106, E107} -> (fun (V105, V106) -> case V106 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V107) -> {'Idris.Prelude.Types.Right', ('un--fromBigInt'(('un--binOp'(<<"|"/utf8>>, ('un--toBigInt'(V103)), ('un--toBigInt'(V105))))))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E108, E109} -> (fun (V108, V109) -> fun (V110) -> case V109 of {'Idris.Data.Vect.::', E110, E111} -> (fun (V111, V112) -> case V112 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V108, V111))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E110, E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108, E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106, E107)); _ -> case V2 of {'Idris.Data.Vect.::', E102, E103} -> (fun (V113, V114) -> fun (V115) -> case V114 of {'Idris.Data.Vect.::', E104, E105} -> (fun (V116, V117) -> case V117 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V113, V116))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E104, E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100, E101)); _ -> case V2 of {'Idris.Data.Vect.::', E96, E97} -> (fun (V118, V119) -> fun (V120) -> case V119 of {'Idris.Data.Vect.::', E98, E99} -> (fun (V121, V122) -> case V122 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V118, V121))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E98, E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96, E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E92, E93} -> (fun (V123, V124) -> fun (V125) -> case V124 of {'Idris.Data.Vect.::', E94, E95} -> (fun (V126, V127) -> case V127 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"|"/utf8>>, V123, V126))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E94, E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92, E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E91)); {'Idris.Core.TT.BXOr', E112} -> (fun (V128) -> case V128 of {'Idris.Core.TT.Bits32Type'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E121, E122} -> (fun (V129, V130) -> case V130 of {'Idris.Data.Vect.::', E127, E128} -> (fun (V131, V132) -> case V132 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V133) -> {'Idris.Prelude.Types.Right', ('un--fromBigInt'(('un--binOp'(<<"^"/utf8>>, ('un--toBigInt'(V129)), ('un--toBigInt'(V131))))))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E129, E130} -> (fun (V134, V135) -> fun (V136) -> case V135 of {'Idris.Data.Vect.::', E131, E132} -> (fun (V137, V138) -> case V138 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V134, V137))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E131, E132)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129, E130)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127, E128)); _ -> case V2 of {'Idris.Data.Vect.::', E123, E124} -> (fun (V139, V140) -> fun (V141) -> case V140 of {'Idris.Data.Vect.::', E125, E126} -> (fun (V142, V143) -> case V143 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V139, V142))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E125, E126)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E123, E124)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E121, E122)); _ -> case V2 of {'Idris.Data.Vect.::', E117, E118} -> (fun (V144, V145) -> fun (V146) -> case V145 of {'Idris.Data.Vect.::', E119, E120} -> (fun (V147, V148) -> case V148 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V144, V147))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E119, E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E117, E118)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E113, E114} -> (fun (V149, V150) -> fun (V151) -> case V150 of {'Idris.Data.Vect.::', E115, E116} -> (fun (V152, V153) -> case V153 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"^"/utf8>>, V149, V152))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E115, E116)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113, E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); {'Idris.Core.TT.LT', E133} -> (fun (V154) -> case V2 of {'Idris.Data.Vect.::', E134, E135} -> (fun (V155, V156) -> fun (V157) -> case V156 of {'Idris.Data.Vect.::', E136, E137} -> (fun (V158, V159) -> case V159 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<"<"/utf8>>, V155, V158))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E136, E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E133)); {'Idris.Core.TT.LTE', E138} -> (fun (V160) -> case V2 of {'Idris.Data.Vect.::', E139, E140} -> (fun (V161, V162) -> fun (V163) -> case V162 of {'Idris.Data.Vect.::', E141, E142} -> (fun (V164, V165) -> case V165 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<"<="/utf8>>, V161, V164))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E141, E142)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139, E140)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E138)); {'Idris.Core.TT.EQ', E143} -> (fun (V166) -> case V2 of {'Idris.Data.Vect.::', E144, E145} -> (fun (V167, V168) -> fun (V169) -> case V168 of {'Idris.Data.Vect.::', E146, E147} -> (fun (V170, V171) -> case V171 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<"==="/utf8>>, V167, V170))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E146, E147)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E144, E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E143)); {'Idris.Core.TT.GTE', E148} -> (fun (V172) -> case V2 of {'Idris.Data.Vect.::', E149, E150} -> (fun (V173, V174) -> fun (V175) -> case V174 of {'Idris.Data.Vect.::', E151, E152} -> (fun (V176, V177) -> case V177 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<">="/utf8>>, V173, V176))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E151, E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E149, E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E148)); {'Idris.Core.TT.GT', E153} -> (fun (V178) -> case V2 of {'Idris.Data.Vect.::', E154, E155} -> (fun (V179, V180) -> fun (V181) -> case V180 of {'Idris.Data.Vect.::', E156, E157} -> (fun (V182, V183) -> case V183 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--boolOp'(<<">"/utf8>>, V179, V182))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E156, E157)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E154, E155)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E153)); {'Idris.Core.TT.StrLength'} -> (fun () -> fun (V184) -> case V2 of {'Idris.Data.Vect.::', E158, E159} -> (fun (V185, V186) -> case V186 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--toBigInt'(('Idris.Idris2.Prelude.Types.String':'un--++'(V185, <<".length"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E158, E159)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> fun (V187) -> case V2 of {'Idris.Data.Vect.::', E160, E161} -> (fun (V188, V189) -> case V189 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V188, <<".charAt(0))"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E160, E161)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> fun (V190) -> case V2 of {'Idris.Data.Vect.::', E162, E163} -> (fun (V191, V192) -> case V192 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V191, <<".slice(1))"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E162, E163)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrIndex'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E164, E165} -> (fun (V193, V194) -> fun (V195) -> case V194 of {'Idris.Data.Vect.::', E166, E167} -> (fun (V196, V197) -> case V197 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V193, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<".charAt("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--fromBigInt'(V196)), <<"))"/utf8>>))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E166, E167)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E164, E165)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E168, E169} -> (fun (V198, V199) -> fun (V200) -> case V199 of {'Idris.Data.Vect.::', E170, E171} -> (fun (V201, V202) -> case V202 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"+"/utf8>>, V198, V201))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E170, E171)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E168, E169)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E172, E173} -> (fun (V203, V204) -> fun (V205) -> case V204 of {'Idris.Data.Vect.::', E174, E175} -> (fun (V206, V207) -> case V207 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"+"/utf8>>, V203, V206))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E174, E175)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E172, E173)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> fun (V208) -> case V2 of {'Idris.Data.Vect.::', E176, E177} -> (fun (V209, V210) -> case V210 of {'Idris.Data.Vect.Nil'} -> (fun () -> begin (V211 = (('un--addConstToPreamble'(V0, <<"strReverse"/utf8>>, <<"x => x.split(\x{27}\x{27}).reverse().join(\x{27}\x{27})"/utf8>>))(V208))), case V211 of {'Idris.Prelude.Types.Left', E178} -> (fun (V212) -> {'Idris.Prelude.Types.Left', V212} end(E178)); {'Idris.Prelude.Types.Right', E179} -> (fun (V213) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V213, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V209, <<")"/utf8>>))))))} end(E179)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E176, E177)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E180, E181} -> (fun (V214, V215) -> case V215 of {'Idris.Data.Vect.::', E182, E183} -> (fun (V216, V217) -> fun (V218) -> case V217 of {'Idris.Data.Vect.::', E184, E185} -> (fun (V219, V220) -> case V220 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V219, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<".slice("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--fromBigInt'(V214)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--fromBigInt'(V214)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" + "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--fromBigInt'(V216)), <<")"/utf8>>))))))))))))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E184, E185)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E182, E183)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E180, E181)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.DoubleExp'} -> (fun () -> fun (V221) -> case V2 of {'Idris.Data.Vect.::', E186, E187} -> (fun (V222, V223) -> case V223 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.exp("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V222, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E186, E187)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> fun (V224) -> case V2 of {'Idris.Data.Vect.::', E188, E189} -> (fun (V225, V226) -> case V226 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.log("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V225, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E188, E189)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> fun (V227) -> case V2 of {'Idris.Data.Vect.::', E190, E191} -> (fun (V228, V229) -> case V229 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.sin("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V228, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E190, E191)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> fun (V230) -> case V2 of {'Idris.Data.Vect.::', E192, E193} -> (fun (V231, V232) -> case V232 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.cos("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V231, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E192, E193)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> fun (V233) -> case V2 of {'Idris.Data.Vect.::', E194, E195} -> (fun (V234, V235) -> case V235 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.tan("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V234, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E194, E195)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> fun (V236) -> case V2 of {'Idris.Data.Vect.::', E196, E197} -> (fun (V237, V238) -> case V238 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.asin("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V237, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E196, E197)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> fun (V239) -> case V2 of {'Idris.Data.Vect.::', E198, E199} -> (fun (V240, V241) -> case V241 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.acos("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V240, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E198, E199)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> fun (V242) -> case V2 of {'Idris.Data.Vect.::', E200, E201} -> (fun (V243, V244) -> case V244 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.atan("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V243, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E200, E201)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> fun (V245) -> case V2 of {'Idris.Data.Vect.::', E202, E203} -> (fun (V246, V247) -> case V247 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.sqrt("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V246, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E202, E203)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> fun (V248) -> case V2 of {'Idris.Data.Vect.::', E204, E205} -> (fun (V249, V250) -> case V250 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.floor("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V249, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E204, E205)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> fun (V251) -> case V2 of {'Idris.Data.Vect.::', E206, E207} -> (fun (V252, V253) -> case V253 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.ceil("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V252, <<")"/utf8>>))))} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E206, E207)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Core.TT.Cast', E208, E209} -> (fun (V254, V255) -> case V254 of {'Idris.Core.TT.StringType'} -> (fun () -> case V255 of {'Idris.Core.TT.DoubleType'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E234, E235} -> (fun (V256, V257) -> case V257 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V258) -> ('un--jsNumberOfString'(V0, V256, V258)) end end()); _ -> case V255 of {'Idris.Core.TT.StringType'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E240, E241} -> (fun (V259, V260) -> case V260 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V261) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V259))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E242, E243} -> (fun (V262, V263) -> case V263 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V262)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E242, E243)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E240, E241)); _ -> case V2 of {'Idris.Data.Vect.::', E238, E239} -> (fun (V264, V265) -> case V265 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V264)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E238, E239)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E236, E237} -> (fun (V266, V267) -> case V267 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V266)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E236, E237)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E234, E235)); _ -> case V255 of {'Idris.Core.TT.StringType'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E230, E231} -> (fun (V268, V269) -> case V269 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V270) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V268))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E232, E233} -> (fun (V271, V272) -> case V272 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V271)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E232, E233)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E230, E231)); _ -> case V2 of {'Idris.Data.Vect.::', E228, E229} -> (fun (V273, V274) -> case V274 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V273)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E228, E229)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E226, E227} -> (fun (V275, V276) -> case V276 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V275)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E226, E227)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> case V255 of {'Idris.Core.TT.StringType'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E222, E223} -> (fun (V277, V278) -> case V278 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V279) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V277))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E224, E225} -> (fun (V280, V281) -> case V281 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V280)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E224, E225)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E222, E223)); _ -> case V2 of {'Idris.Data.Vect.::', E220, E221} -> (fun (V282, V283) -> case V283 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V282)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E220, E221)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E218, E219} -> (fun (V284, V285) -> case V285 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V284)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E218, E219)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> case V255 of {'Idris.Core.TT.StringType'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E214, E215} -> (fun (V286, V287) -> case V287 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V288) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V286))} end end()); _ -> case V2 of {'Idris.Data.Vect.::', E216, E217} -> (fun (V289, V290) -> case V290 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V289)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E216, E217)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E214, E215)); _ -> case V2 of {'Idris.Data.Vect.::', E212, E213} -> (fun (V291, V292) -> case V292 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V291)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E212, E213)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> case V2 of {'Idris.Data.Vect.::', E210, E211} -> (fun (V293, V294) -> case V294 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Compiler.Common':'un--castInt'(('un--constPrimitives'(V0)), V254, V255, V293)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E210, E211)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E208, E209)); {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E244, E245} -> (fun (V295, V296) -> case V296 of {'Idris.Data.Vect.::', E246, E247} -> (fun (V297, V298) -> fun (V299) -> case V298 of {'Idris.Data.Vect.::', E248, E249} -> (fun (V300, V301) -> case V301 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', V300} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E248, E249)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E246, E247)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E244, E245)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Core.TT.Crash'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E250, E251} -> (fun (V302, V303) -> case V303 of {'Idris.Data.Vect.::', E252, E253} -> (fun (V304, V305) -> fun (V306) -> case V305 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('un--jsCrashExp'(V0, V304, V306)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E252, E253)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E250, E251)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--jsNumberOfString'(V0, V1, V2) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"parseFloat("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>))))}.
'un--jsName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsIdent'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"_"/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--jsName'(V2)))))) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> ('un--keywordSafe'(('un--jsIdent'(V3)))) end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsIdent'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5)))))) end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pat__"/utf8>>, ('un--jsName'(V6)))) end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> ('un--jsName'(V9)) end(E7, E8)); {'Idris.Core.Name.RF', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rf__"/utf8>>, ('un--jsIdent'(V10)))) end(E9)); {'Idris.Core.Name.Nested', E10, E11} -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V13, V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"n__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--jsName'(V12)))))))))))) end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E10, E11)); {'Idris.Core.Name.CaseBlock', E14, E15} -> (fun (V15, V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsIdent'(V15)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V16)))))))) end(E14, E15)); {'Idris.Core.Name.WithBlock', E16, E17} -> (fun (V17, V18) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsIdent'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)))))))) end(E16, E17)); {'Idris.Core.Name.Resolved', E18} -> (fun (V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fn__"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V19)))) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--jsIntOfString'(V0, V1, V2, V3) -> case ('un--useBigInt'(V1)) of 1 -> ('un--jsBigIntOfString'(V0, V2, V3)); 0 -> ('un--jsNumberOfString'(V0, V2, V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--jsIntOfDouble'(V0, V1) -> ('un--toInt'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Math.trunc("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))))).
'un--jsIntOfChar'(V0, V1) -> ('un--toInt'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<".codePointAt(0)"/utf8>>)))).
'un--jsIdent'(V0) -> ('Idris.Idris2.Prelude.Interfaces':'un--concatMap'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V16, V17, V18, V19)) end end end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V21)) end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V24, V25, V26)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V27, V28)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, fun (V29) -> ('nested--6281-2065--in--un--okchar'(V0, V29)) end, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)))).
'un--jsCrashExp'(V0, V1, V2) -> begin (V3 = (('un--addConstToPreamble'(V0, <<"crashExp"/utf8>>, <<"x=>{throw new IdrisError(x)}"/utf8>>))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>))))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--jsConstant'(V0, V1) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> fun (V3) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)), <<"n"/utf8>>))} end end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V4) -> fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V4))} end end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V6) -> fun (V7) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6))} end end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V8) -> fun (V9) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V8))} end end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V10) -> fun (V11) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V10)), <<"n"/utf8>>))} end end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V12) -> fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V12)), <<"n"/utf8>>))} end end(E5)); {'Idris.Core.TT.Str', E6} -> (fun (V14) -> fun (V15) -> {'Idris.Prelude.Types.Right', ('un--jsString'(V14))} end end(E6)); {'Idris.Core.TT.Ch', E7} -> (fun (V16) -> fun (V17) -> {'Idris.Prelude.Types.Right', ('un--jsString'(('Idris.Idris2.Data.String':'un--singleton'(V16))))} end end(E7)); {'Idris.Core.TT.Db', E8} -> (fun (V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V18))} end end(E8)); {'Idris.Core.TT.WorldVal'} -> (fun () -> ('un--addConstToPreamble'(V0, <<"idrisworld"/utf8>>, <<"Symbol(\x{27}idrisworld\x{27})"/utf8>>)) end()); {'Idris.Core.TT.B8', E9} -> (fun (V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V20))} end end(E9)); {'Idris.Core.TT.B16', E10} -> (fun (V22) -> fun (V23) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V22))} end end(E10)); {'Idris.Core.TT.B32', E11} -> (fun (V24) -> fun (V25) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V24))} end end(E11)); {'Idris.Core.TT.B64', E12} -> (fun (V26) -> fun (V27) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V26)), <<"n"/utf8>>))} end end(E12)); _ -> fun (V28) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unsuported constant "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V1))))}, V28)) end end.
'un--jsCharOfInt'(V0, V1, V2, V3) -> begin (V4 = (('un--addConstToPreamble'(V0, <<"truncToChar"/utf8>>, <<"x=>(x >= 0 && x <= 55295) || (x >= 57344 && x <= 1114111) ? x : 0"/utf8>>))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"String.fromCodePoint("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--fromInt'(V1, V2)), <<"))"/utf8>>))))))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--jsBigIntOfString'(V0, V1, V2) -> begin (V3 = (('un--addConstToPreamble'(V0, <<"bigIntOfString"/utf8>>, <<"s=>{const idx = s.indexOf(\x{27}.\x{27}); return idx === -1 ? BigInt(s) : BigInt(s.slice(0, idx));}"/utf8>>))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>))))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--jsAnyToString'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(\x{27}\x{27}+"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<")"/utf8>>)))).
'un--imperative2es'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Compiler.ES.ImperativeAst.DoNothing'} -> (fun () -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end()); {'Idris.Compiler.ES.ImperativeAst.SeqStatement', E0, E1} -> (fun (V5, V6) -> begin (V7 = ('un--imperative2es'(V0, V1, V2, V5, V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('un--imperative2es'(V0, V1, V2, V6, V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, V12))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Compiler.ES.ImperativeAst.FunDecl', E6, E7, E8, E9} -> (fun (V13, V14, V15, V16) -> begin (V17 = ('un--imperative2es'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V2, (1 + 0))), V16, V4))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"function "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V20) -> ('un--jsName'(V20)) end, V15)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"){//"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V19, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), <<"}\x{a}"/utf8>>))))))))))))))))))))))} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7, E8, E9)); {'Idris.Compiler.ES.ImperativeAst.ForeignDecl', E12, E13, E14, E15, E16} -> (fun (V21, V22, V23, V24, V25) -> begin (V26 = ('un--foreignDecl'(V0, V1, V22, V23, V4))), case V26 of {'Idris.Prelude.Types.Left', E17} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V28, <<"\x{a}"/utf8>>))} end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12, E13, E14, E15, E16)); {'Idris.Compiler.ES.ImperativeAst.ReturnStatement', E19} -> (fun (V29) -> begin (V30 = (('un--impExp2es'(V0, V1, V29))(V4))), case V30 of {'Idris.Prelude.Types.Left', E20} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V32) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V32, <<";"/utf8>>))))))} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); {'Idris.Compiler.ES.ImperativeAst.SwitchStatement', E22, E23, E24} -> (fun (V33, V34, V35) -> begin (V40 = case V35 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', <<""/utf8>>} end()); {'Idris.Prelude.Types.Just', E25} -> (fun (V36) -> begin (V37 = ('un--imperative2es'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V2, (1 + (1 + 0)))), V36, V4))), case V37 of {'Idris.Prelude.Types.Left', E26} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V39) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V2, (1 + 0))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"default:\x{a}"/utf8>>, V39))))} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), case V40 of {'Idris.Prelude.Types.Left', E28} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V42) -> begin (V43 = (('un--impExp2es'(V0, V1, V33))(V4))), case V43 of {'Idris.Prelude.Types.Left', E30} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V45) -> begin (V46 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"switch("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V45, <<"){\x{a}"/utf8>>))))))), begin (V49 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V47) -> fun (V48) -> ('un--alt2es'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V2, (1 + 0))), V47, V48)) end end, V34, [], V4))), case V49 of {'Idris.Prelude.Types.Left', E32} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V51) -> begin (V80 = ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V54, V55, V56)) end end end end end, fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V59, V60, V61)) end end end end end, fun (V62) -> fun (V63) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V63)) end end, fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> fun (V70) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V67, V68, V69, V70)) end end end end end end end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V72)) end end, fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V75, V76, V77)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V78) -> fun (V79) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V78, V79)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, V51))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V46, ('Idris.Idris2.Prelude.Types.String':'un--++'(V80, ('Idris.Idris2.Prelude.Types.String':'un--++'(V42, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), <<"}"/utf8>>))))))))))} end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22, E23, E24)); {'Idris.Compiler.ES.ImperativeAst.LetDecl', E34, E35} -> (fun (V81, V82) -> case V82 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V81)), <<";"/utf8>>))))))} end()); {'Idris.Prelude.Types.Just', E36} -> (fun (V83) -> begin (V84 = (('un--impExp2es'(V0, V1, V83))(V4))), case V84 of {'Idris.Prelude.Types.Left', E37} -> (fun (V85) -> {'Idris.Prelude.Types.Left', V85} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V86) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"let "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V81)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V86, <<";"/utf8>>))))))))))} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E34, E35)); {'Idris.Compiler.ES.ImperativeAst.ConstDecl', E39, E40} -> (fun (V87, V88) -> begin (V89 = (('un--impExp2es'(V0, V1, V88))(V4))), case V89 of {'Idris.Prelude.Types.Left', E41} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V91) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"const "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V87)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V91, <<";"/utf8>>))))))))))} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39, E40)); {'Idris.Compiler.ES.ImperativeAst.MutateStatement', E43, E44} -> (fun (V92, V93) -> begin (V94 = (('un--impExp2es'(V0, V1, V93))(V4))), case V94 of {'Idris.Prelude.Types.Left', E45} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V96) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsName'(V92)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V96, <<";"/utf8>>))))))))} end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43, E44)); {'Idris.Compiler.ES.ImperativeAst.ErrorStatement', E47} -> (fun (V97) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"throw new Error("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--jsString'(V97)), <<");"/utf8>>))))))} end(E47)); {'Idris.Compiler.ES.ImperativeAst.EvalExpStatement', E48} -> (fun (V98) -> begin (V99 = (('un--impExp2es'(V0, V1, V98))(V4))), case V99 of {'Idris.Prelude.Types.Left', E49} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V101) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(V101, <<";"/utf8>>))))} end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); {'Idris.Compiler.ES.ImperativeAst.CommentStatement', E51} -> (fun (V102) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}/*"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V102, <<"*/\x{a}"/utf8>>))))} end(E51)); {'Idris.Compiler.ES.ImperativeAst.ForEverLoop', E52} -> (fun (V103) -> begin (V104 = ('un--imperative2es'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V2, (1 + 0))), V103, V4))), case V104 of {'Idris.Prelude.Types.Left', E53} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V106) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"while(true){\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V106, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), <<"}"/utf8>>))))))))))} end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--impExp2es'(V0, V1, V2) -> case V2 of {'Idris.Compiler.ES.ImperativeAst.IEVar', E0} -> (fun (V3) -> fun (V4) -> {'Idris.Prelude.Types.Right', ('un--jsName'(V3))} end end(E0)); {'Idris.Compiler.ES.ImperativeAst.IELambda', E1, E2} -> (fun (V5, V6) -> fun (V7) -> begin (V8 = ('un--imperative2es'(V0, V1, 0, V6, V7))), case V8 of {'Idris.Prelude.Types.Left', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V11) -> ('un--jsName'(V11)) end, V5)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<") => {"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, <<"}"/utf8>>))))))))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); {'Idris.Compiler.ES.ImperativeAst.IEApp', E5, E6} -> (fun (V12, V13) -> fun (V14) -> begin (V15 = (('un--impExp2es'(V0, V1, V12))(V14))), case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> begin (V19 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V18) -> ('un--impExp2es'(V0, V1, V18)) end, V13, [], V14))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V17, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V21)), <<")"/utf8>>))))))} end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5, E6)); {'Idris.Compiler.ES.ImperativeAst.IEConstant', E11} -> (fun (V22) -> ('un--jsConstant'(V1, V22)) end(E11)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFn', E12, E13} -> (fun (V23, V24) -> fun (V25) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--traverseVect'(fun (V26) -> ('un--impExp2es'(V0, V1, V26)) end, V24, V25))), case V27 of {'Idris.Prelude.Types.Left', E14} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V29) -> (('un--jsOp'(V1, V23, V29))(V25)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12, E13)); {'Idris.Compiler.ES.ImperativeAst.IEPrimFnExt', E16, E17} -> (fun (V30, V31) -> fun (V32) -> begin (V34 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V33) -> ('un--impExp2es'(V0, V1, V33)) end, V31, [], V32))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> (('un--jsPrim'(V0, V1, V30, V36))(V32)) end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorHead', E20} -> (fun (V37) -> fun (V38) -> begin (V39 = (('un--impExp2es'(V0, V1, V37))(V38))), case V39 of {'Idris.Prelude.Types.Left', E21} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V41) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V41, <<".h"/utf8>>))} end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E20)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorTag', E23} -> (fun (V42) -> fun (V43) -> {'Idris.Prelude.Types.Right', ('un--tag2es'(V42))} end end(E23)); {'Idris.Compiler.ES.ImperativeAst.IEConstructorArg', E24, E25} -> (fun (V44, V45) -> fun (V46) -> begin (V47 = (('un--impExp2es'(V0, V1, V45))(V46))), case V47 of {'Idris.Prelude.Types.Left', E26} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V49) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V49, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<".a"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V44))))))} end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E24, E25)); {'Idris.Compiler.ES.ImperativeAst.IEConstructor', E28, E29} -> (fun (V50, V51) -> fun (V52) -> begin (V54 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V53) -> ('un--impExp2es'(V0, V1, V53)) end, V51, [], V52))), case V54 of {'Idris.Prelude.Types.Left', E30} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V56) -> begin (V59 = ('Idris.Idris2.Data.List':'dn--un--zipWith_Zippable_List'(fun (V57) -> fun (V58) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"a"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V57)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": "/utf8>>, V58)))))) end end, ('Idris.Idris2.Prelude.Types':'dn--un--rangeFromTo_Range_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V51)))), V56))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"({"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"h:"/utf8>>, ('un--tag2es'(V50)))) | V59])), <<"})"/utf8>>))))} end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E28, E29)); {'Idris.Compiler.ES.ImperativeAst.IEDelay', E32} -> (fun (V60) -> fun (V61) -> begin (V62 = (('un--impExp2es'(V0, V1, V60))(V61))), case V62 of {'Idris.Prelude.Types.Left', E33} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V64) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(()=>"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V64, <<")"/utf8>>))))} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32)); {'Idris.Compiler.ES.ImperativeAst.IEForce', E35} -> (fun (V65) -> fun (V66) -> begin (V67 = (('un--impExp2es'(V0, V1, V65))(V66))), case V67 of {'Idris.Prelude.Types.Left', E36} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V69) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V69, <<"()"/utf8>>))} end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E35)); {'Idris.Compiler.ES.ImperativeAst.IENull'} -> (fun () -> fun (V70) -> {'Idris.Prelude.Types.Right', <<"undefined"/utf8>>} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromInt'(V0, V1) -> case ('un--useBigInt'(V0)) of 1 -> ('un--fromBigInt'(V1)); 0 -> V1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--fromBigInt'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Number("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, <<")"/utf8>>)))).
'un--foreignDecl'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case ('un--searchForeign'(case V8 of {'Idris.Compiler.ES.ES.MkESSt', E3, E4} -> (fun (V9, V10) -> V10 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3)) of {'Idris.Prelude.Types.Just', E2} -> (fun (V11) -> (('un--makeForeign'(V0, V1, V2, V11))(V4)) end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.InternalError', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"No node or javascript definition found for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" in "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_String'(V13, V14)) end end}, V3))))))))}, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--esName'(V0) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__esPrim_"/utf8>>, V0)).
'un--div'(V0, V1, V2, V3) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> case V4 of {'Idris.Core.TT.Signed', E1} -> (fun (V5) -> case V5 of {'Idris.Core.TT.Unlimited'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"/"/utf8>>, V2, V3))} end end()); {'Idris.Core.TT.P', E2} -> (fun (V7) -> begin (V8 = {'Idris.Core.TT.Signed', {'Idris.Core.TT.P', V7}}), case ('un--useBigInt'(V8)) of 1 -> ('un--boundedIntOp'(V0, V7, <<"/"/utf8>>, V2, V3)); 0 -> ('un--boundedInt'(V0, 0, V7, ('un--jsIntOfDouble'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" / "/utf8>>, V3)))))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V9) -> begin (V10 = {'Idris.Core.TT.Unsigned', V9}), fun (V11) -> case ('un--useBigInt'(V10)) of 1 -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"/"/utf8>>, V2, V3))}; 0 -> {'Idris.Prelude.Types.Right', ('un--jsIntOfDouble'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" / "/utf8>>, V3))))))}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', ('un--binOp'(<<"/"/utf8>>, V2, V3))} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--constPrimitives'(V0) -> {'Idris.Compiler.Common.MkConstantPrimitives', fun (V1) -> fun (V2) -> ('nested--7280-2993--in--un--truncInt'(V0, ('un--useBigInt'(V1)), V1, ('un--jsIntOfChar'(V1, V2)))) end end, fun (V3) -> fun (V4) -> fun (V5) -> ('un--jsCharOfInt'(V0, V3, V4, V5)) end end end, fun (V6) -> fun (V7) -> fun (V8) -> begin (V9 = ('un--jsIntOfString'(V0, V6, V7, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> (('nested--7280-2993--in--un--truncInt'(V0, ('un--useBigInt'(V6)), V6, V11))(V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> {'Idris.Prelude.Types.Right', ('un--jsAnyToString'(V13))} end end end, fun (V15) -> fun (V16) -> ('nested--7280-2993--in--un--truncInt'(V0, ('un--useBigInt'(V15)), V15, ('un--jsIntOfDouble'(V15, V16)))) end end, fun (V17) -> fun (V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', ('un--fromInt'(V17, V18))} end end end, fun (V20) -> fun (V21) -> fun (V22) -> ('nested--7280-2996--in--un--intImpl'(V0, V20, V21, V22)) end end end}.
'un--compileToES'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Compiler.ES.Imperative':'un--compileToImperative'(V0, V1, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> begin (V27 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.ES.ES.ESs'}, {'Idris.Compiler.ES.ES.MkESSt', ('Idris.Idris2.Libraries.Data.SortedMap':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V9, V10)) end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V11, V12)) end end}, fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V13, V14)) end end, fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V19, V20)) end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V25, V26)) end end})), V2}, V3))), case V27 of {'Idris.Prelude.Types.Left', E4} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V29) -> begin (V30 = ('un--imperative2es'(V0, V29, 0, V7, V3))), case V30 of {'Idris.Prelude.Types.Left', E6} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V32) -> begin (V33 = ('un--imperative2es'(V0, V29, 0, V8, V3))), case V33 of {'Idris.Prelude.Types.Left', E8} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V35) -> begin (V36 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"try{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V35, <<"}catch(e){if(e instanceof IdrisError){console.log(\x{27}ERROR: \x{27} + e.message)}else{throw e} }"/utf8>>))))), begin (V38 = begin (V37 = ('erlang':'get'(V29))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E10} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V40) -> begin (V43 = ('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.List':'un--++'(('un--static_preamble'()), ('Idris.Idris2.Libraries.Data.SortedMap':'un--values'(case V40 of {'Idris.Compiler.ES.ES.MkESSt', E12, E13} -> (fun (V41, V42) -> V41 end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V43, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V32, V36))))))} end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--boundedUIntOp'(V0, V1, V2, V3, V4) -> ('un--boundedUInt'(V0, ('un--useBigInt\x{27}'(V1)), V1, ('un--binOp'(V2, V3, V4)))).
'un--boundedUInt'(V0, V1, V2, V3) -> begin (V4 = case V1 of 1 -> <<"truncToUBigInt"/utf8>>; 0 -> <<"truncToUInt"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V5) -> begin (V6 = (('un--makeIntBound'(V0, V1, V2))(V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V9 = (('un--addConstToPreamble'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"x=>{const m = x%"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<";return m>=0?m:m+"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, <<"}"/utf8>>))))))))))(V5))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<")"/utf8>>))))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--boundedIntOp'(V0, V1, V2, V3, V4) -> ('un--boundedInt'(V0, ('un--useBigInt\x{27}'(V1)), V1, ('un--binOp'(V2, V3, V4)))).
'un--boundedInt'(V0, V1, V2, V3) -> begin (V5 = fun (V4) -> case V1 of 1 -> ('un--toBigInt'(V4)); 0 -> V4; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), begin (V6 = case V1 of 1 -> <<"truncToBigInt"/utf8>>; 0 -> <<"truncToInt"/utf8>>; _ -> ('erlang':'throw'("Error: Unreachable branch")) end), fun (V7) -> begin (V8 = (('un--makeIntBound'(V0, V1, V2))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = (('un--makeIntBound'(V0, V1, ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V2, 1))))(V7))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V42 = (('un--addConstToPreamble'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V2)))), ('Idris.Idris2.Prelude.Interfaces':'un--concat'({'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.MkFoldable', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'(V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'(V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'(V25)) end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldlM_Foldable_List'(V29, V30, V31, V32)) end end end end end end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.Types':'dn--un--toList_Foldable_List'(V34)) end end, fun (V35) -> fun (V36) -> fun (V37) -> fun (V38) -> fun (V39) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldMap_Foldable_List'(V37, V38, V39)) end end end end end}, {'Idris.Prelude.Interfaces.MkMonoid', fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V40, V41)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}, [<<"x=>{ const v = x<"/utf8>> | [(V5(<<"0"/utf8>>)) | [<<"?x%"/utf8>> | [V10 | [<<"+"/utf8>> | [V10 | [<<":x%"/utf8>> | [V10 | [<<";"/utf8>> | [<<"return v>="/utf8>> | [V13 | [<<"?"/utf8>> | [<<"v-"/utf8>> | [V10 | [<<":v}"/utf8>> | []]]]]]]]]]]]]]]]))))(V7))), case V42 of {'Idris.Prelude.Types.Left', E4} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V44) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(V44, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<")"/utf8>>))))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--boolOp'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--binOp'(V0, V1, V2)), <<" ? BigInt(1) : BigInt(0))"/utf8>>)))).
'un--bitOp'(V0, V1, V2, V3, V4) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Core.TT.Signed', E1} -> (fun (V6) -> case V6 of {'Idris.Core.TT.P', E2} -> (fun (V7) -> ('un--boundedIntOp'(V0, V7, V2, V3, V4)) end(E2)); _ -> fun (V8) -> {'Idris.Prelude.Types.Right', ('un--binOp'(V2, V3, V4))} end end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V9) -> case V9 of 32 -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V11) -> case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('un--fromBigInt'(V13))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--boundedUInt'(V0, 1, 32, ('un--binOp'(V2, ('un--toBigInt'(V3)), ('un--toBigInt'(V4)))))), V10)) end; _ -> ('un--boundedUIntOp'(V0, V9, V2, V3, V4)) end end(E3)); _ -> fun (V14) -> {'Idris.Prelude.Types.Right', ('un--binOp'(V2, V3, V4))} end end end(E0)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', ('un--binOp'(V2, V3, V4))} end end.
'un--binOp'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<")"/utf8>>)))))))))))).
'un--arithOp'(V0, V1, V2, V3, V4) -> case V1 of {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> case V5 of {'Idris.Core.TT.Signed', E1} -> (fun (V6) -> case V6 of {'Idris.Core.TT.P', E2} -> (fun (V7) -> ('un--boundedIntOp'(V0, V7, V2, V3, V4)) end(E2)); _ -> fun (V8) -> {'Idris.Prelude.Types.Right', ('un--binOp'(V2, V3, V4))} end end end(E1)); {'Idris.Core.TT.Unsigned', E3} -> (fun (V9) -> ('un--boundedUIntOp'(V0, V9, V2, V3, V4)) end(E3)); _ -> fun (V10) -> {'Idris.Prelude.Types.Right', ('un--binOp'(V2, V3, V4))} end end end(E0)); _ -> fun (V11) -> {'Idris.Prelude.Types.Right', ('un--binOp'(V2, V3, V4))} end end.
'un--alt2es'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V5, V6) -> begin (V7 = (('un--impExp2es'(V0, V1, V5))(V4))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('un--imperative2es'(V0, V1, ('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V2, (1 + 0))), V6, V4))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<": {\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--nSpaces'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(V2, (1 + 0))))), <<"break; }\x{a}"/utf8>>))))))))))))))} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addToPreamble'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('case--addToPreamble-1865'(V3, V2, V1, V0, V8, ('Idris.Idris2.Libraries.Data.SortedMap':'un--lookup'(V1, case V8 of {'Idris.Compiler.ES.ES.MkESSt', E2, E3} -> (fun (V9, V10) -> V9 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V4)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addSupportToPreamble'(V0, V1, V2, V3) -> ('un--addToPreamble'(V0, V1, V1, V2, V3)).
'un--addStringIteratorToPreamble'(V0) -> begin (V1 = ('Idris.Idris2.Libraries.Data.String.Extra':'un--unlines'([<<"function __prim_stringIteratorNew(str) {"/utf8>> | [<<"  return 0;"/utf8>> | [<<"}"/utf8>> | [<<"function __prim_stringIteratorToString(_, str, it, f) {"/utf8>> | [<<"  return f(str.slice(it));"/utf8>> | [<<"}"/utf8>> | [<<"function __prim_stringIteratorNext(str, it) {"/utf8>> | [<<"  if (it >= str.length)"/utf8>> | [<<"    return {h: 0};"/utf8>> | [<<"  else"/utf8>> | [<<"    return {h: 1, a1: str.charAt(it), a2: it + 1};"/utf8>> | [<<"}"/utf8>> | []]]]]]]]]]]]]))), begin (V2 = <<"stringIterator"/utf8>>), begin (V3 = ('un--esName'(V2))), fun (V4) -> ('un--addToPreamble'(V0, V2, V3, V1, V4)) end end end end.
'un--addConstToPreamble'(V0, V1, V2) -> begin (V3 = ('un--esName'(V1))), begin (V4 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"const "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<");"/utf8>>))))))))), fun (V5) -> ('un--addToPreamble'(V0, V1, V3, V4, V5)) end end end.
