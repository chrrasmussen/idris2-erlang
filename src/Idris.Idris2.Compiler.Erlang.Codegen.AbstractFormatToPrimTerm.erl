-module('Idris.Idris2.Compiler.Erlang.Codegen.AbstractFormatToPrimTerm').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--genBitEndianness-5767'/1,
  'case--genBitSignedness-5758'/1,
  'case--genBitType-5735'/1,
  'un--genTypeSpecifierList'/1,
  'un--genPattern'/1,
  'un--genMapFieldExact'/3,
  'un--genMapFieldAssoc'/3,
  'un--genLiteral'/1,
  'un--genLine'/1,
  'un--genGuardAlt'/1,
  'un--genGuard'/1,
  'un--genFunClause'/2,
  'un--genExpr'/1,
  'un--genExportFun'/1,
  'un--genDecl'/1,
  'un--genCatchClause'/1,
  'un--genCaseClause'/1,
  'un--genBitUnit'/1,
  'un--genBitType'/1,
  'un--genBitSize'/1,
  'un--genBitSignedness'/1,
  'un--genBitSegment'/3,
  'un--genBitPattern'/1,
  'un--genBitEndianness'/1
]).
'case--genBitEndianness-5767'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBig'} -> (fun () -> <<"big"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABLittle'} -> (fun () -> <<"little"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABNative'} -> (fun () -> <<"native"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--genBitSignedness-5758'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUnsigned'} -> (fun () -> <<"unsigned"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSigned'} -> (fun () -> <<"signed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--genBitType-5735'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABInteger'} -> (fun () -> <<"integer"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABFloat'} -> (fun () -> <<"float"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBinary'} -> (fun () -> <<"binary"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBytes'} -> (fun () -> <<"bytes"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBitstring'} -> (fun () -> <<"bitstring"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBits'} -> (fun () -> <<"bits"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf8'} -> (fun () -> <<"utf8"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf16'} -> (fun () -> <<"utf16"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf32'} -> (fun () -> <<"utf32"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genTypeSpecifierList'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkTSL', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'('erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'('erased', V17)) end end}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V5) -> ('un--genBitSignedness'(V5)) end, V1)))), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> fun (V23) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'('erased', 'erased', V21, V22, V23)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'('erased', V30)) end end}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V18) -> ('un--genBitEndianness'(V18)) end, V2)))), ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'('erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'('erased', 'erased', V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'('erased', V43)) end end}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V31) -> ('un--genBitType'(V31)) end, V3)))), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_Maybe'('erased', 'erased', V47, V48, V49)) end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_Maybe'('erased', 'erased', V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_Maybe'('erased', V56)) end end}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', fun (V44) -> ('un--genBitUnit'(V44)) end, V4))))))))))} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genPattern'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.APLiteral', E0} -> (fun (V1) -> ('un--genLiteral'(V1)) end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APBitstring', E1, E2} -> (fun (V2, V3) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin"/utf8>>} | [('un--genLine'(V2)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V4) -> ('un--genBitSegment'('erased', fun (V5) -> ('un--genBitPattern'(V5)) end, V4)) end, V3))} | []]]]} end(E1, E2)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APCons', E3, E4, E5} -> (fun (V6, V7, V8) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V6)) | [('un--genPattern'(V7)) | [('un--genPattern'(V8)) | []]]]]} end(E3, E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APMap', E6, E7} -> (fun (V9, V10) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map"/utf8>>} | [('un--genLine'(V9)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V11) -> ('un--genMapFieldExact'('erased', fun (V12) -> ('un--genPattern'(V12)) end, V11)) end, V10))} | []]]]} end(E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APNil', E8} -> (fun (V13) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V13)) | []]]} end(E8)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', E9, E10} -> (fun (V14, V15) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V14)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V16) -> ('un--genPattern'(V16)) end, V15))} | []]]]} end(E9, E10)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APUniversal', E11} -> (fun (V17) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V17)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"_"/utf8>>} | []]]]} end(E11)); {'Idris.Compiler.Erlang.IR.AbstractFormat.APVar', E12, E13} -> (fun (V18, V19) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V18)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V19} | []]]]} end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genMapFieldExact'(V0, V1, V2) -> case V2 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkExact', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map_field_exact"/utf8>>} | [('un--genLine'(V3)) | [(V1(V4)) | [(V1(V5)) | []]]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genMapFieldAssoc'(V0, V1, V2) -> case V2 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkAssoc', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map_field_assoc"/utf8>>} | [('un--genLine'(V3)) | [(V1(V4)) | [(V1(V5)) | []]]]]} end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genLiteral'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ALAtom', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"atom"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V2} | []]]]} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALChar', E2, E3} -> (fun (V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"char"/utf8>>} | [('un--genLine'(V3)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PChar', V4} | []]]]} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALFloat', E4, E5} -> (fun (V5, V6) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"float"/utf8>>} | [('un--genLine'(V5)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PFloat', V6} | []]]]} end(E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALInteger', E6, E7} -> (fun (V7, V8) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V7)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V8} | []]]]} end(E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ALCharlist', E8, E9} -> (fun (V9, V10) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"string"/utf8>>} | [('un--genLine'(V9)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PCharlist', V10} | []]]]} end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genLine'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V0))}.
'un--genGuardAlt'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V1) -> ('un--genGuard'(V1)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V13)) end end}))(V0))))}.
'un--genGuard'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.AGLiteral', E0} -> (fun (V1) -> ('un--genLiteral'(V1)) end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGCons', E1, E2, E3} -> (fun (V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V2)) | [('un--genGuard'(V3)) | [('un--genGuard'(V4)) | []]]]]} end(E1, E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGFunCall', E4, E5, E6} -> (fun (V5, V6, V7) -> begin (V8 = {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"remote"/utf8>>} | [('un--genLine'(V5)) | [('un--genLiteral'({'Idris.Compiler.Erlang.IR.AbstractFormat.ALAtom', V5, <<"erlang"/utf8>>})) | [('un--genLiteral'({'Idris.Compiler.Erlang.IR.AbstractFormat.ALAtom', V5, V6})) | []]]]]}), {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"call"/utf8>>} | [('un--genLine'(V5)) | [V8 | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V9) -> ('un--genGuard'(V9)) end, V7))} | []]]]]} end end(E4, E5, E6)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGNil', E7} -> (fun (V10) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V10)) | []]]} end(E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGOp', E8, E9, E10, E11} -> (fun (V11, V12, V13, V14) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"op"/utf8>>} | [('un--genLine'(V11)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V12} | [('un--genGuard'(V13)) | [('un--genGuard'(V14)) | []]]]]]} end(E8, E9, E10, E11)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGTuple', E12, E13} -> (fun (V15, V16) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V15)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V17) -> ('un--genGuard'(V17)) end, V16))} | []]]]} end(E12, E13)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AGVar', E14, E15} -> (fun (V18, V19) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V18)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V19} | []]]]} end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genFunClause'(V0, V1) -> case V1 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkFunClause', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V2)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V18)) end end}))(('Idris.Idris2.Data.Vect':'dn--un--map_Functor_(Vect $n)'('erased', 'erased', 'erased', fun (V6) -> ('un--genPattern'(V6)) end, V3))))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> ('un--genGuardAlt'(V19)) end, V4))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V20) -> ('un--genExpr'(V20)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V23, V24, V25)) end end end end end, fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> fun (V30) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V28, V29, V30)) end end end end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V32)) end end}))(V5))))} | []]]]]]} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genExpr'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.AELiteral', E0} -> (fun (V1) -> ('un--genLiteral'(V1)) end(E0)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBitstring', E1, E2} -> (fun (V2, V3) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin"/utf8>>} | [('un--genLine'(V2)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V4) -> ('un--genBitSegment'('erased', fun (V5) -> ('un--genExpr'(V5)) end, V4)) end, V3))} | []]]]} end(E1, E2)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEBlock', E3, E4} -> (fun (V6, V7) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"block"/utf8>>} | [('un--genLine'(V6)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> ('un--genExpr'(V8)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V11, V12, V13)) end end end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V20)) end end}))(V7))))} | []]]]} end(E3, E4)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AECase', E5, E6, E7} -> (fun (V21, V22, V23) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"case"/utf8>>} | [('un--genLine'(V21)) | [('un--genExpr'(V22)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V24) -> ('un--genCaseClause'(V24)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V27, V28, V29)) end end end end end, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V32, V33, V34)) end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V36)) end end}))(V23))))} | []]]]]} end(E5, E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AECons', E8, E9, E10} -> (fun (V37, V38, V39) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"cons"/utf8>>} | [('un--genLine'(V37)) | [('un--genExpr'(V38)) | [('un--genExpr'(V39)) | []]]]]} end(E8, E9, E10)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFun', E11, E12, E13} -> (fun (V40, V41, V42) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"fun"/utf8>>} | [('un--genLine'(V40)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clauses"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V43) -> ('un--genFunClause'('erased', V43)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V46, V47, V48)) end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V55)) end end}))(V42))))} | []]]} | []]]]} end(E11, E12, E13)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEFunCall', E14, E15, E16} -> (fun (V56, V57, V58) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"call"/utf8>>} | [('un--genLine'(V56)) | [('un--genExpr'(V57)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V59) -> ('un--genExpr'(V59)) end, V58))} | []]]]]} end(E14, E15, E16)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AERemoteRef', E17, E18, E19} -> (fun (V60, V61, V62) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"remote"/utf8>>} | [('un--genLine'(V60)) | [('un--genExpr'(V61)) | [('un--genExpr'(V62)) | []]]]]} end(E17, E18, E19)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMapNew', E20, E21} -> (fun (V63, V64) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"map"/utf8>>} | [('un--genLine'(V63)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V65) -> ('un--genMapFieldAssoc'('erased', fun (V66) -> ('un--genExpr'(V66)) end, V65)) end, V64))} | []]]]} end(E20, E21)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEMatch', E22, E23, E24} -> (fun (V67, V68, V69) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"match"/utf8>>} | [('un--genLine'(V67)) | [('un--genPattern'(V68)) | [('un--genExpr'(V69)) | []]]]]} end(E22, E23, E24)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AENil', E25} -> (fun (V70) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"nil"/utf8>>} | [('un--genLine'(V70)) | []]]} end(E25)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEOp', E26, E27, E28, E29} -> (fun (V71, V72, V73, V74) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"op"/utf8>>} | [('un--genLine'(V71)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V72} | [('un--genExpr'(V73)) | [('un--genExpr'(V74)) | []]]]]]} end(E26, E27, E28, E29)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEReceive', E30, E31, E32} -> (fun (V75, V76, V77) -> case V77 of {'Idris.Compiler.Erlang.IR.AbstractFormat.NoTimeout'} -> (fun () -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"receive"/utf8>>} | [('un--genLine'(V75)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V78) -> ('un--genCaseClause'(V78)) end, V76))} | []]]]} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.TimeoutAfter', E33, E34} -> (fun (V79, V80) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"receive"/utf8>>} | [('un--genLine'(V75)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V81) -> ('un--genCaseClause'(V81)) end, V76))} | [('un--genExpr'(V79)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V82) -> ('un--genExpr'(V82)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V85, V86, V87)) end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V90, V91, V92)) end end end end end, fun (V93) -> fun (V94) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V94)) end end}))(V80))))} | []]]]]]} end(E33, E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30, E31, E32)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AETuple', E35, E36} -> (fun (V95, V96) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"tuple"/utf8>>} | [('un--genLine'(V95)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V97) -> ('un--genExpr'(V97)) end, V96))} | []]]]} end(E35, E36)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AETry', E37, E38, E39, E40, E41} -> (fun (V98, V99, V100, V101, V102) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"try"/utf8>>} | [('un--genLine'(V98)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V103) -> ('un--genExpr'(V103)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> fun (V108) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V106, V107, V108)) end end end end end, fun (V109) -> fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V111, V112, V113)) end end end end end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V115)) end end}))(V99))))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V116) -> ('un--genCaseClause'(V116)) end, V100))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V117) -> ('un--genCatchClause'(V117)) end, V101))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V118) -> ('un--genExpr'(V118)) end, V102))} | []]]]]]]} end(E37, E38, E39, E40, E41)); {'Idris.Compiler.Erlang.IR.AbstractFormat.AEVar', E42, E43} -> (fun (V119, V120) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V119)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V120} | []]]]} end(E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genExportFun'(V0) -> case V0 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V1} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genDecl'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ADExport', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"export"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V3) -> ('un--genExportFun'(V3)) end, V2))} | []]]]]} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADModule', E2, E3} -> (fun (V4, V5) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V4)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"module"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V5} | []]]]]} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADFunDef', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"function"/utf8>>} | [('un--genLine'(V6)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V7} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V8} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> ('un--genFunClause'('erased', V10)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V18, V19, V20)) end end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V22)) end end}))(V9))))} | []]]]]]} end(E4, E5, E6, E7)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ADAttribute', E8, E9, E10} -> (fun (V23, V24, V25) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"attribute"/utf8>>} | [('un--genLine'(V23)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V24} | [V25 | []]]]]} end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCatchClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkCatchClause', E0, E1, E2, E3, E4, E5} -> (fun (V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--genPattern'({'Idris.Compiler.Erlang.IR.AbstractFormat.APTuple', V1, [V2 | [V3 | [V4 | []]]]}))), {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', [V7 | []]} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> ('un--genGuardAlt'(V8)) end, V5))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V9) -> ('un--genExpr'(V9)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V12, V13, V14)) end end end end end, fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V17, V18, V19)) end end end end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V21)) end end}))(V6))))} | []]]]]]} end end(E0, E1, E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genCaseClause'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkCaseClause', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"clause"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', [('un--genPattern'(V2)) | []]} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V5) -> ('un--genGuardAlt'(V5)) end, V3))} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PList', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V6) -> ('un--genExpr'(V6)) end, (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V18)) end end}))(V4))))} | []]]]]]} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitUnit'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"unit"/utf8>>} | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', (('Idris.Idris2.Data.Fin':'dn--un--cast_Cast_(Fin $n)_Integer'('erased', V0)) + 1)} | []]]}.
'un--genBitType'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABInteger'} -> (fun () -> <<"integer"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABFloat'} -> (fun () -> <<"float"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBinary'} -> (fun () -> <<"binary"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBytes'} -> (fun () -> <<"bytes"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBitstring'} -> (fun () -> <<"bitstring"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBits'} -> (fun () -> <<"bits"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf8'} -> (fun () -> <<"utf8"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf16'} -> (fun () -> <<"utf16"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUtf32'} -> (fun () -> <<"utf32"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--genBitSize'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSDefault'} -> (fun () -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"default"/utf8>>} end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSInteger', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]]} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSVar', E2, E3} -> (fun (V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V3)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V4} | []]]]} end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitSignedness'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABUnsigned'} -> (fun () -> <<"unsigned"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABSigned'} -> (fun () -> <<"signed"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
'un--genBitSegment'(V0, V1, V2) -> case V2 of {'Idris.Compiler.Erlang.IR.AbstractFormat.MkBitSegment', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"bin_element"/utf8>>} | [('un--genLine'(V3)) | [(V1(V4)) | [('un--genBitSize'(V5)) | [('un--genTypeSpecifierList'(V6)) | []]]]]]} end(E0, E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitPattern'(V0) -> case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPInteger', E0, E1} -> (fun (V1, V2) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"integer"/utf8>>} | [('un--genLine'(V1)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PInteger', V2} | []]]]} end(E0, E1)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPFloat', E2, E3} -> (fun (V3, V4) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"float"/utf8>>} | [('un--genLine'(V3)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PFloat', V4} | []]]]} end(E2, E3)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPCharlist', E4, E5} -> (fun (V5, V6) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"string"/utf8>>} | [('un--genLine'(V5)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PCharlist', V6} | []]]]} end(E4, E5)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPUniversal', E6} -> (fun (V7) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V7)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"_"/utf8>>} | []]]]} end(E6)); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABPVar', E7, E8} -> (fun (V8, V9) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PTuple', [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', <<"var"/utf8>>} | [('un--genLine'(V8)) | [{'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', V9} | []]]]} end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--genBitEndianness'(V0) -> {'Idris.Compiler.Erlang.Utils.PrimTerm.PAtom', case V0 of {'Idris.Compiler.Erlang.IR.AbstractFormat.ABBig'} -> (fun () -> <<"big"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABLittle'} -> (fun () -> <<"little"/utf8>> end()); {'Idris.Compiler.Erlang.IR.AbstractFormat.ABNative'} -> (fun () -> <<"native"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}.
