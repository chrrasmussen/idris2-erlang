-module('Idris.Idris2.TTImp.Interactive.CaseSplit').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--getSplits-7143'/6,
  'case--case block in getSplitsLHS-7014'/17,
  'case--getSplitsLHS-6961'/11,
  'case--mkCase-6780'/9,
  'case--case block in mkCase-6664'/18,
  'case--mkCase-6621'/9,
  'case--case block in case block in findUpdates-6429'/9,
  'case--case block in case block in findUpdates-6373'/8,
  'case--case block in findUpdates-6343'/9,
  'case--findUpdates-6297'/7,
  'case--recordUpdate-6252'/6,
  'case--newLHS-6158'/8,
  'case--case block in updateArg-5988'/7,
  'case--updateArg-5968'/7,
  'case--expandCon-5905'/6,
  'case--getArgNames-5734'/13,
  'case--getArgName,findNames-5593'/13,
  'case--getArgName,lookupName-5467'/15,
  'case--unique-5351'/7,
  'case--case block in case block in findCons-5165'/8,
  'case--case block in findCons-5121'/6,
  'case--findCons-5077'/4,
  'case--getDefining-5049'/3,
  'case--case block in findTyName-4900'/14,
  'case--findTyName-4862'/14,
  'nested--12162-5428--in--un--notBound'/8,
  'nested--12057-5336--in--un--mkVarN'/7,
  'nested--12162-5427--in--un--lookupName'/10,
  'nested--12162-5430--in--un--getName'/10,
  'nested--12162-5429--in--un--findNames'/8,
  'dn--un--show_Show_SplitError'/1,
  'dn--un--show_Show_ClauseUpdate'/1,
  'dn--un--show_Show_(SplitResult $a)'/3,
  'dn--un--showPrec_Show_SplitError'/2,
  'dn--un--showPrec_Show_ClauseUpdate'/2,
  'dn--un--showPrec_Show_(SplitResult $a)'/4,
  'dn--un--__Impl_Show_SplitError'/0,
  'dn--un--__Impl_Show_ClauseUpdate'/0,
  'dn--un--__Impl_Show_(SplitResult $a)'/2,
  'un--updateArg'/5,
  'un--update'/5,
  'un--unique'/4,
  'un--substLets'/2,
  'un--recordUpdate'/5,
  'un--newLHS'/7,
  'un--mkCase'/6,
  'un--getUpdates'/4,
  'un--getSplitsLHS'/7,
  'un--getSplits'/6,
  'un--getFnArgs'/2,
  'un--getEnvArgNames'/4,
  'un--getDefining'/2,
  'un--getArgNames'/7,
  'un--getArgName'/8,
  'un--findUpdates'/4,
  'un--findTyName'/6,
  'un--findCons'/3,
  'un--findAllVars'/2,
  'un--explicitlyBound'/2,
  'un--expandCon'/5,
  'un--defaultNames'/0,
  'un--combine'/2,
  'un--apply'/2
]).
'case--getSplits-7143'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case V6 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V9, V10) -> ('un--getSplitsLHS'(V3, V4, V2, ('Idris.Idris2.Core.FC':'un--justFC'(V7)), V9, V10, V0)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantFindLHS'}}} end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in getSplitsLHS-7014'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> fun (V18) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V19) -> fun (V20) -> ('un--mkCase'(V5, V4, V17, V14, V19, V20)) end end, V15, []))(V18))), case V21 of {'Idris.Prelude.Types.Left', E1} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V23) -> {'Idris.Prelude.Types.Right', ('un--combine'(V23, []))} end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V24) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V5, V3, V10, V24)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getSplitsLHS-6961'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.TTImp.Interactive.CaseSplit.OK', E0} -> (fun (V11) -> case V11 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'([], V5, {'Idris.Core.Env.Nil'}, V7, V16))), case V17 of {'Idris.Prelude.Types.Left', E5} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V19) -> begin (V21 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V20) -> ('un--newLHS'(V5, V3, V2, V8, V0, V20, V19)) end, V15, []))(V16))), case V21 of {'Idris.Prelude.Types.Left', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V23) -> begin (V24 = {'Idris.TTImp.Interactive.CaseSplit.OK', {'Idris.Builtin.MkPair', V12, {'Idris.Builtin.MkPair', V14, V15}}}), (('case--case block in getSplitsLHS-7014'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V12, V14, V15, V24, V19, V23, ('Idris.Idris2.Core.Context':'un--getNameID'(V12, case V9 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51) -> V25 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V16)) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E36} -> (fun (V52) -> fun (V53) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', V52}} end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkCase-6780'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = ('Idris.Idris2.Core.Context':'un--setAllPublic'(V4, 1, V11))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V16 = begin (V15 = ('erlang':'put'(V4, V6))), {'Idris.Prelude.Types.Right', V15} end), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V20 = begin (V19 = ('erlang':'put'(V3, V7))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'([], V4, {'Idris.Core.Env.Nil'}, V9, V11))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Original LHS: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V1)))) end))(V11))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V29 = (('Idris.Idris2.Core.Context.Log':'un--log'(V4, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"New LHS: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V25)))) end))(V11))), case V29 of {'Idris.Prelude.Types.Left', E12} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V31) -> begin (V32 = ('un--getUpdates'(V6, V1, V25, V11))), case V32 of {'Idris.Prelude.Types.Left', E14} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Valid', V25, V34}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in mkCase-6664'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V17 of 0 -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Impossible', V0}} end; 1 -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Invalid'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--mkCase-6621'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Core.Core.WhenUnifying', E0, E1, E2, E3, E4, E5} -> (fun (V9, V10, V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--nf'(V4, V9, V6, V11, V12))(V15))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = (('Idris.Idris2.Core.Normalise':'un--nf'(V4, V9, V6, V11, V13))(V15))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = (('Idris.Idris2.TTImp.ProcessDef':'un--impossibleOK'(V4, V9, V6, V18, V21))(V15))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> case V24 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Impossible', V0}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Invalid'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3, E4, E5)); _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Invalid'}} end end.
'case--case block in case block in findUpdates-6429'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E0, E1} -> (fun (V9, V10) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', V9, [{'Idris.Builtin.MkPair', V1, {'Idris.TTImp.TTImp.IVar', V2, V8}} | V10]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in findUpdates-6373'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E0, E1} -> (fun (V8, V9) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', [{'Idris.Builtin.MkPair', V3, V1} | V8], V9} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findUpdates-6343'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> begin (V12 = ('erlang':'put'(V5, case V7 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E0, E1} -> (fun (V10, V11) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', [{'Idris.Builtin.MkPair', V3, V1} | V10], V11} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V12} end end end()); {'Idris.Prelude.Types.Just', E2} -> (fun (V13) -> fun (V14) -> begin (V17 = ('erlang':'put'(V5, case V7 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E3, E4} -> (fun (V15, V16) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', V15, [{'Idris.Builtin.MkPair', V1, {'Idris.TTImp.TTImp.IVar', V2, V13}} | V16]} end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V17} end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findUpdates-6297'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> ('un--recordUpdate'(V5, V2, V1, {'Idris.TTImp.TTImp.IVar', V2, V3}, V8)) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V5))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> begin (V14 = {'Idris.Prelude.Types.Nothing'}), (('case--case block in findUpdates-6343'(V0, V1, V2, V3, V4, V5, V14, V13, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V15) -> fun (V16) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V15, V16)) end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V17, V18)) end end}, V3, case V13 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E3, E4} -> (fun (V19, V20) -> V19 end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V9)) end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--recordUpdate-6252'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E0, E1} -> (fun (V6, V7) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', V6, [{'Idris.Builtin.MkPair', V1, ('Idris.Idris2.TTImp.Utils':'un--substNames'([], V5, V0))} | V7]} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--newLHS-6158'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> {'Idris.TTImp.Interactive.CaseSplit.Explicit', V5, {'Idris.TTImp.TTImp.Implicit', V5, 0}} end, ('Idris.Idris2.Data.List':'un--take'('erased', V4, V9))))), begin (V12 = ('Idris.Idris2.Data.List':'un--drop'('erased', V4, V9))), fun (V13) -> begin (V15 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V14) -> ('un--update'(V6, V3, V2, V1, V14)) end, V12, []))(V13))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Right', ('un--apply'(V8, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V11, V17))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in updateArg-5988'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> fun (V7) -> ('un--expandCon'(V5, V1, ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V8, V0)) end, V4)), V2, V7)) end; 1 -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', V1, 0}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--updateArg-5968'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> ('case--case block in updateArg-5988'(V0, V1, V2, V3, V4, V5, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V0, V3)))); 1 -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V1, V0}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--expandCon-5905'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> fun (V7) -> begin (V8 = (('Idris.Idris2.Core.Normalise':'un--nf'(V3, [], V4, {'Idris.Core.Env.Nil'}, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> begin (V11 = (('un--getArgNames'('erased', V3, V4, [], V1, {'Idris.Core.Env.Nil'}, V10))(V7))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V2, V0}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> {'Idris.TTImp.TTImp.IBindVar', V2, V14} end, V13))))} end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V15) -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V3, V2, V0, V15)) end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getArgNames-5734'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V4 of {'Idris.Core.TT.Explicit'} -> (fun () -> fun (V13) -> begin (V14 = ('un--getArgName'('erased', V12, V11, V6, V10, V9, V3, V13))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> {'Idris.Prelude.Types.Right', [V16 | []]} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', []} end end.
'case--getArgName,findNames-5593'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> case V12 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V14) -> ('nested--12162-5428--in--un--notBound'('erased', V1, V2, V3, V4, V5, V6, V14)) end, ('un--defaultNames'())))} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V17) -> ('nested--12162-5428--in--un--notBound'('erased', V1, V2, V3, V4, V5, V6, V17)) end, V15))} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getArgName,lookupName-5467'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V14 of 0 -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V9}} end; 1 -> ('nested--12162-5427--in--un--lookupName'('erased', V1, V2, V3, V4, V5, V6, 'erased', V11, V10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--unique-5351'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> ('un--unique'(V1, V4, V3, V2)); 1 -> V5; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in findCons-5165'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> case V8 of {'Idris.Core.Context.TCon', E1, E2, E3, E4, E5, E6, E7, E8} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16) -> fun (V17) -> begin (V22 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V18) -> fun (V19) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V18, V19)) end end, fun (V20) -> fun (V21) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V20, V21)) end end}, V5, V17))), case V22 of {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V24) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V25) -> fun (V26) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V27) -> fun (V28) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V29, V30)) end end}, V25, V26)) end end, V15, []))(V17))), case V31 of {'Idris.Prelude.Types.Left', E11} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.OK', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V24, V33}}}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2, E3, E4, E5, E6, E7, E8)); _ -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a type constructor "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V35) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V35)) end, fun (V36) -> fun (V37) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Def'(V36, V37)) end end}, V7))))}}} end end end(E0)); _ -> fun (V38) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a type constructor "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V39) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V39)) end, fun (V40) -> fun (V41) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Def'(V40, V41)) end end}, V7))))}}} end end.
'case--case block in findCons-5121'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t find type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<" in LHS"/utf8>>))))}}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V7, case V4 of {'Idris.Core.Context.MkDefs', E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V36 of {'Idris.Prelude.Types.Left', E28} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E30} -> (fun (V39) -> case V39 of {'Idris.Core.Context.TCon', E31, E32, E33, E34, E35, E36, E37, E38} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47) -> begin (V52 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V48) -> fun (V49) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V48, V49)) end end, fun (V50) -> fun (V51) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V50, V51)) end end}, V7, V8))), case V52 of {'Idris.Prelude.Types.Left', E39} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V54) -> begin (V61 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V55) -> fun (V56) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V57, V58)) end end, fun (V59) -> fun (V60) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V59, V60)) end end}, V55, V56)) end end, V46, []))(V8))), case V61 of {'Idris.Prelude.Types.Left', E41} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V63) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.OK', {'Idris.Builtin.MkPair', V3, {'Idris.Builtin.MkPair', V54, V63}}}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31, E32, E33, E34, E35, E36, E37, E38)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a type constructor "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V64) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V64)) end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Def'(V65, V66)) end end}, V38))))}}} end end(E30)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a type constructor "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V67) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V67)) end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Def'(V68, V69)) end end}, V38))))}}} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findCons-5077'(V0, V1, V2, V3) -> case V3 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, <<"Can\x{27}t find function name on LHS"/utf8>>}}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V5) -> fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> begin (V11 = (('un--findTyName'([], V2, V10, {'Idris.Core.Env.Nil'}, V1, V0))(V6))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> case V13 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t find type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<" in LHS"/utf8>>))))}}} end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V14) -> begin (V42 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V14, case V10 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V15 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V42 of {'Idris.Prelude.Types.Left', E33} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V44) -> case V44 of {'Idris.Prelude.Types.Just', E35} -> (fun (V45) -> case V45 of {'Idris.Core.Context.TCon', E36, E37, E38, E39, E40, E41, E42, E43} -> (fun (V46, V47, V48, V49, V50, V51, V52, V53) -> begin (V58 = ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V54, V55)) end end, fun (V56) -> fun (V57) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V56, V57)) end end}, V14, V6))), case V58 of {'Idris.Prelude.Types.Left', E44} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V60) -> begin (V67 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V61) -> fun (V62) -> ('Idris.Idris2.Core.Context':'un--toFullNames'('erased', V2, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V63) -> fun (V64) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V63, V64)) end end, fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V65, V66)) end end}, V61, V62)) end end, V52, []))(V6))), case V67 of {'Idris.Prelude.Types.Left', E46} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.OK', {'Idris.Builtin.MkPair', V5, {'Idris.Builtin.MkPair', V60, V69}}}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36, E37, E38, E39, E40, E41, E42, E43)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a type constructor "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V70) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V70)) end, fun (V71) -> fun (V72) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Def'(V71, V72)) end end}, V44))))}}} end end(E35)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a type constructor "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V73) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Def'(V74, V75)) end end}, V44))))}}} end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--getDefining-5049'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V3, V4, V5) -> {'Idris.Prelude.Types.Just', V5} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end.
'case--case block in findTyName-4900'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Core.Value.NTCon', E0, E1, E2, E3, E4} -> (fun (V14, V15, V16, V17, V18) -> fun (V19) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V15}} end end(E0, E1, E2, E3, E4)); _ -> fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--findTyName-4862'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of 0 -> fun (V14) -> begin (V15 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V12, V11, V6))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> case V17 of {'Idris.Core.Value.NTCon', E2, E3, E4, E5, E6} -> (fun (V18, V19, V20, V21, V22) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V19}} end(E2, E3, E4, E5, E6)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> ('un--findTyName'([V4 | V0], V1, V12, {'Idris.Core.Env.::', V9, V11}, V10, V5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12162-5428--in--un--notBound'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V8) -> fun (V9) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V8, V9)) end end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V10, V11)) end end}, {'Idris.Core.Name.UN', V7}, V3)))).
'nested--12057-5336--in--un--mkVarN'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> V5; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)))) end.
'nested--12162-5427--in--un--lookupName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V9 of [] -> fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end; [E0 | E1] -> (fun (V11, V12) -> case V11 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V13, V14) -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Context':'un--getFullName'(V6, V8))(V15))), case V16 of {'Idris.Prelude.Types.Left', E4} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V18) -> begin (V19 = (('Idris.Idris2.Core.Context':'un--getFullName'(V6, V13))(V15))), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> (('case--getArgName,lookupName-5467'('erased', V1, V2, V3, V4, V5, V6, 'erased', V13, V14, V12, V8, V18, V21, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V18, V21))))(V15)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--12162-5430--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of {'Idris.Core.Name.UN', E0} -> (fun (V10) -> ('un--unique'([V10 | V8], [V10 | V8], 0, V9)) end(E0)); _ -> ('un--unique'(V8, V8, 0, V9)) end.
'nested--12162-5429--in--un--findNames'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V17) -> ('nested--12162-5428--in--un--notBound'('erased', V1, V2, V3, V4, V5, V6, V17)) end, [<<"f"/utf8>> | [<<"g"/utf8>> | []]]))} end end(E4, E5, E6, E7)); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V19) -> ('nested--12162-5428--in--un--notBound'('erased', V1, V2, V3, V4, V5, V6, V19)) end, ('un--defaultNames'())))} end end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E8, E9, E10, E11, E12} -> (fun (V20, V21, V22, V23, V24) -> fun (V25) -> begin (V53 = (('nested--12162-5427--in--un--lookupName'('erased', V1, V2, V3, V4, V5, V6, 'erased', V21, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'('erased', case V5 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52) -> V41 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V25))), case V53 of {'Idris.Prelude.Types.Left', E40} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V55) -> case V55 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V56) -> ('nested--12162-5428--in--un--notBound'('erased', V1, V2, V3, V4, V5, V6, V56)) end, ('un--defaultNames'())))} end()); {'Idris.Prelude.Types.Just', E42} -> (fun (V57) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V58) -> ('nested--12162-5428--in--un--notBound'('erased', V1, V2, V3, V4, V5, V6, V58)) end, V57))} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10, E11, E12)); _ -> fun (V59) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'('erased', fun (V60) -> ('nested--12162-5428--in--un--notBound'('erased', V1, V2, V3, V4, V5, V6, V60)) end, ('un--defaultNames'())))} end end.
'dn--un--show_Show_SplitError'(V0) -> case V0 of {'Idris.TTImp.Interactive.CaseSplit.NoValidSplit'} -> (fun () -> <<"No valid case splits"/utf8>> end()); {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t split on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<")"/utf8>>)))))))) end(E0, E1)); {'Idris.TTImp.Interactive.CaseSplit.CantFindLHS'} -> (fun () -> <<"No clause to split here"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ClauseUpdate'(V0) -> case V0 of {'Idris.TTImp.Interactive.CaseSplit.Valid', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Valid: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updates: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V6)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V7) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V8, V9)) end end}}, V3)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V13, V14)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V15) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V16, V17)) end end}}, V10, V11)) end end}, V2)))))))))) end(E0, E1)); {'Idris.TTImp.Interactive.CaseSplit.Impossible', E2} -> (fun (V18) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Impossible: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V18)))) end(E2)); {'Idris.TTImp.Interactive.CaseSplit.Invalid'} -> (fun () -> <<"Invalid"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(SplitResult $a)'(V0, V1, V2) -> case V2 of {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E0} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Split error: "/utf8>>, ('dn--un--show_Show_SplitError'(V3)))) end(E0)); {'Idris.TTImp.Interactive.CaseSplit.OK', E1} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OK: "/utf8>>, case V1 of {'Idris.Prelude.Show.dn--un--__mkShow', E2, E3} -> (fun (V5, V6) -> (V5(V4)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_SplitError'(V0, V1) -> ('dn--un--show_Show_SplitError'(V1)).
'dn--un--showPrec_Show_ClauseUpdate'(V0, V1) -> ('dn--un--show_Show_ClauseUpdate'(V1)).
'dn--un--showPrec_Show_(SplitResult $a)'(V0, V1, V2, V3) -> ('dn--un--show_Show_(SplitResult $a)'('erased', V1, V3)).
'dn--un--__Impl_Show_SplitError'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_SplitError'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SplitError'(V1, V2)) end end}.
'dn--un--__Impl_Show_ClauseUpdate'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_ClauseUpdate'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ClauseUpdate'(V1, V2)) end end}.
'dn--un--__Impl_Show_(SplitResult $a)'(V0, V1) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V2) -> ('dn--un--show_Show_(SplitResult $a)'('erased', V1, V2)) end, fun (V3) -> fun (V4) -> ('dn--un--showPrec_Show_(SplitResult $a)'('erased', V1, V3, V4)) end end}.
'un--updateArg'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V5, V6) -> ('case--updateArg-5968'(V6, V5, V3, V2, V1, V0, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, V6, V1)))) end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V11, V12, V13) -> fun (V14) -> begin (V15 = (('un--updateArg'(V0, V1, V2, V3, V12))(V14))), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> begin (V18 = (('un--updateArg'(V0, V1, V2, V3, V13))(V14))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V11, V17, V20}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V21, V22, V23) -> fun (V24) -> begin (V25 = (('un--updateArg'(V0, V1, V2, V3, V22))(V24))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = (('un--updateArg'(V0, V1, V2, V3, V23))(V24))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAutoApp', V21, V27, V30}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); {'Idris.TTImp.TTImp.INamedApp', E16, E17, E18, E19} -> (fun (V31, V32, V33, V34) -> fun (V35) -> begin (V36 = (('un--updateArg'(V0, V1, V2, V3, V32))(V35))), case V36 of {'Idris.Prelude.Types.Left', E20} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V38) -> begin (V39 = (('un--updateArg'(V0, V1, V2, V3, V34))(V35))), case V39 of {'Idris.Prelude.Types.Left', E22} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.INamedApp', V31, V38, V33, V41}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19)); {'Idris.TTImp.TTImp.IAs', E24, E25, E26, E27, E28} -> (fun (V42, V43, V44, V45, V46) -> ('un--updateArg'(V0, V1, V2, V3, V46)) end(E24, E25, E26, E27, E28)); _ -> fun (V47) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V4)), 0}} end end.
'un--update'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.Interactive.CaseSplit.Explicit', E0, E1} -> (fun (V5, V6) -> fun (V7) -> begin (V8 = (('un--updateArg'(V0, V1, V2, V3, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Explicit', V5, V10}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.TTImp.Interactive.CaseSplit.Auto', E4, E5} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = (('un--updateArg'(V0, V1, V2, V3, V12))(V13))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Auto', V11, V16}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); {'Idris.TTImp.Interactive.CaseSplit.Named', E8, E9, E10} -> (fun (V17, V18, V19) -> fun (V20) -> begin (V21 = (('un--updateArg'(V0, V1, V2, V3, V19))(V20))), case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Named', V17, V18, V23}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unique'(V0, V1, V2, V3) -> case V0 of [] -> ('un--unique'(V1, V1, ((V2 + 1) rem 9223372036854775808), V3)); [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('nested--12057-5336--in--un--mkVarN'(V4, V5, V3, V2, V1, V4, V2))), ('case--unique-5351'(V4, V5, V3, V2, V1, V6, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, {'Idris.Core.Name.UN', V6}, V3)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLets'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--substLets'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'('erased', 'erased', V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.PLet', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> ('un--substLets'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'('erased', 'erased', V12, V5)))) end(E8, E9, E10, E11)); _ -> {'Idris.Core.TT.Bind', V2, V3, V4, ('un--substLets'([V3 | V0], V5))} end end(E0, E1, E2, E3)); _ -> V1 end.
'un--recordUpdate'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V12 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V9) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V9)), {'Idris.TTImp.TTImp.IVar', V1, ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V9))}} end, case V8 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E2, E3} -> (fun (V10, V11) -> V10 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V15 = ('erlang':'put'(V0, case V8 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E4, E5} -> (fun (V13, V14) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', V13, [{'Idris.Builtin.MkPair', V2, ('Idris.Idris2.TTImp.Utils':'un--substNames'([], V12, V3))} | V14]} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V15} end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--newLHS'(V0, V1, V2, V3, V4, V5, V6) -> ('case--newLHS-6158'(V6, V5, V4, V3, V2, V1, V0, ('un--getFnArgs'(V6, [])))).
'un--mkCase'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'()), V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'('erased', fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--setAllPublic'(V0, 0, V17))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V25 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V8, V1, V2, {'Idris.TTImp.Elab.Check.InLHS', ('Idris.Idris2.Algebra.Semiring':'un--erased'('erased', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, [], [], {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IBindHere', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V4)), {'Idris.TTImp.TTImp.PATTERN'}, V4}, {'Idris.Prelude.Types.Nothing'}))(V17))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--setAllPublic'(V0, 1, V17))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'put'(V0, V12))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V38 = begin (V37 = ('erlang':'put'(V1, V16))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E16} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'([], V0, {'Idris.Core.Env.Nil'}, V28, V17))), case V41 of {'Idris.Prelude.Types.Left', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V43) -> begin (V44 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Original LHS: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V3)))) end))(V17))), case V44 of {'Idris.Prelude.Types.Left', E20} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V46) -> begin (V47 = (('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"New LHS: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V43)))) end))(V17))), case V47 of {'Idris.Prelude.Types.Left', E22} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V49) -> begin (V50 = ('un--getUpdates'(V12, V3, V43, V17))), case V50 of {'Idris.Prelude.Types.Left', E24} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Valid', V43, V52}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V53) -> fun (V54) -> begin (V56 = begin (V55 = ('erlang':'put'(V0, V12))), {'Idris.Prelude.Types.Right', V55} end), case V56 of {'Idris.Prelude.Types.Left', E26} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V58) -> begin (V60 = begin (V59 = ('erlang':'put'(V1, V16))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E28} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V62) -> case V53 of {'Idris.Core.Core.WhenUnifying', E30, E31, E32, E33, E34, E35} -> (fun (V63, V64, V65, V66, V67, V68) -> begin (V69 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V63, V12, V65, V66))(V54))), case V69 of {'Idris.Prelude.Types.Left', E36} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V71) -> begin (V72 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V63, V12, V65, V67))(V54))), case V72 of {'Idris.Prelude.Types.Left', E38} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V74) -> begin (V75 = (('Idris.Idris2.TTImp.ProcessDef':'un--impossibleOK'(V0, V63, V12, V71, V74))(V54))), case V75 of {'Idris.Prelude.Types.Left', E40} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V77) -> case V77 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Impossible', V4}}; 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Invalid'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31, E32, E33, E34, E35)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Invalid'}} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V5)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getUpdates'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.TTImp.Interactive.CaseSplit.UPD'}, {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', [], []}, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('un--findUpdates'(V6, V0, V1, V2))(V3))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V6))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', case V13 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E6, E7} -> (fun (V14, V15) -> V15 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSplitsLHS'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--substLets'([], V5))), fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Splitting"/utf8>> end, V5, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('un--findAllVars'('erased', V5))), begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = (('un--findCons'(V1, V6, V7))(V8))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> case V19 of {'Idris.TTImp.Interactive.CaseSplit.OK', E6} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V23, V24) -> begin (V25 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'([], V1, {'Idris.Core.Env.Nil'}, V7, V8))), case V25 of {'Idris.Prelude.Types.Left', E11} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V27) -> begin (V29 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V28) -> ('un--newLHS'(V1, V3, V4, V12, V6, V28, V27)) end, V24, []))(V8))), case V29 of {'Idris.Prelude.Types.Left', E13} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V31) -> begin (V32 = {'Idris.TTImp.Interactive.CaseSplit.OK', {'Idris.Builtin.MkPair', V21, {'Idris.Builtin.MkPair', V23, V24}}}), (('case--case block in getSplitsLHS-7014'(V6, V5, V4, V3, V2, V1, V0, V7, V12, V16, V21, V23, V24, V32, V27, V31, ('Idris.Idris2.Core.Context':'un--getNameID'(V21, case V16 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V33 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V8)) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E42} -> (fun (V60) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', V60}} end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getSplits'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Metadata':'un--findLHSAt'(V1, V3, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E2} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> (('un--getSplitsLHS'(V1, V0, V2, ('Idris.Idris2.Core.FC':'un--justFC'(V10)), V12, V13, V4))(V5)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantFindLHS'}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFnArgs'(V0, V1) -> case V0 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V2, V3, V4) -> ('un--getFnArgs'(V3, [{'Idris.TTImp.Interactive.CaseSplit.Explicit', V2, V4} | V1])) end(E0, E1, E2)); {'Idris.TTImp.TTImp.IAutoApp', E3, E4, E5} -> (fun (V5, V6, V7) -> ('un--getFnArgs'(V6, [{'Idris.TTImp.Interactive.CaseSplit.Auto', V5, V7} | V1])) end(E3, E4, E5)); {'Idris.TTImp.TTImp.INamedApp', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> ('un--getFnArgs'(V9, [{'Idris.TTImp.Interactive.CaseSplit.Named', V8, V10, V11} | V1])) end(E6, E7, E8, E9)); _ -> {'Idris.Builtin.MkPair', V0, V1} end.
'un--getEnvArgNames'(V0, V1, V2, V3) -> case V2 of 0 -> fun (V4) -> begin (V5 = (('un--explicitlyBound'(V1, V3))(V4))), case V5 of {'Idris.Prelude.Types.Left', E6} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V7) -> (('un--getArgNames'('erased', V0, V1, V7, [], {'Idris.Core.Env.Nil'}, V3))(V4)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V8 = (V2 - 1)), case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V14 = (((V12(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V9, 1}))))(V13))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> (('un--getEnvArgNames'(V0, V1, V8, V16))(V13)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1, E2, E3)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', []} end end end end.
'un--getDefining'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> ('un--getDefining'('erased', V5)) end(E0, E1, E2, E3)); _ -> ('case--getDefining-5049'('erased', V1, ('Idris.Idris2.Core.TT':'un--getFn'('erased', V1)))) end.
'un--getArgNames'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V19 = case V13 of {'Idris.Core.TT.Explicit'} -> (fun () -> begin (V16 = ('un--getArgName'('erased', V1, V2, V8, V3, V4, V14, V15))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> {'Idris.Prelude.Types.Right', [V18 | []]} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', []} end), case V19 of {'Idris.Prelude.Types.Left', E10} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V21) -> begin (V22 = (((V10(V2))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), V5, {'Idris.Core.TT.Erased', V7, 1}))))(V15))), case V22 of {'Idris.Prelude.Types.Left', E12} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V24) -> begin (V26 = (('un--getArgNames'('erased', V1, V2, V3, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V25) -> {'Idris.Core.Name.UN', V25} end, V21)), V4)), V5, V24))(V15))), case V26 of {'Idris.Prelude.Types.Left', E14} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V28) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V21, V28))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V29) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1, E2, E3)); _ -> fun (V30) -> {'Idris.Prelude.Types.Right', []} end end.
'un--getArgName'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V8 = (('nested--12162-5429--in--un--findNames'('erased', V6, V5, V4, V3, V2, V1, V6))(V7))), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Right', ('nested--12162-5430--in--un--getName'('erased', V6, V5, V4, V3, V2, V1, V3, V10, V5))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findUpdates'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.IVar', E27, E28} -> (fun (V4, V5) -> case V3 of {'Idris.TTImp.TTImp.IVar', E29, E30} -> (fun (V6, V7) -> fun (V8) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V7, case V1 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V8))), case V36 of {'Idris.Prelude.Types.Left', E58} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E60} -> (fun (V39) -> ('un--recordUpdate'(V0, V4, V5, {'Idris.TTImp.TTImp.IVar', V4, V7}, V8)) end(E60)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V41 = begin (V40 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E61} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V43) -> begin (V44 = {'Idris.Prelude.Types.Nothing'}), (('case--case block in findUpdates-6343'(V6, V5, V4, V7, V1, V0, V44, V43, ('Idris.Idris2.Data.List':'un--lookup'('erased', 'erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V47, V48)) end end}, V7, case V43 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E63, E64} -> (fun (V49, V50) -> V49 end(E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))(V8)) end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E29, E30)); _ -> fun (V51) -> ('un--recordUpdate'(V0, V4, V5, V3, V51)) end end end(E27, E28)); {'Idris.TTImp.TTImp.IApp', E65, E66, E67} -> (fun (V52, V53, V54) -> case V3 of {'Idris.TTImp.TTImp.IApp', E95, E96, E97} -> (fun (V55, V56, V57) -> fun (V58) -> begin (V59 = (('un--findUpdates'(V0, V1, V53, V56))(V58))), case V59 of {'Idris.Prelude.Types.Left', E98} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V61) -> (('un--findUpdates'(V0, V1, V54, V57))(V58)) end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E95, E96, E97)); _ -> case V3 of {'Idris.TTImp.TTImp.IAutoApp', E92, E93, E94} -> (fun (V62, V63, V64) -> ('un--findUpdates'(V0, V1, V2, V63)) end(E92, E93, E94)); _ -> case V2 of {'Idris.TTImp.TTImp.INamedApp', E82, E83, E84, E85} -> (fun (V65, V66, V67, V68) -> case V3 of {'Idris.TTImp.TTImp.INamedApp', E86, E87, E88, E89} -> (fun (V69, V70, V71, V72) -> fun (V73) -> begin (V74 = (('un--findUpdates'(V0, V1, V66, V70))(V73))), case V74 of {'Idris.Prelude.Types.Left', E90} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V76) -> (('un--findUpdates'(V0, V1, V68, V72))(V73)) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E86, E87, E88, E89)); _ -> ('un--findUpdates'(V0, V1, V66, V3)) end end(E82, E83, E84, E85)); _ -> case V3 of {'Idris.TTImp.TTImp.INamedApp', E78, E79, E80, E81} -> (fun (V77, V78, V79, V80) -> ('un--findUpdates'(V0, V1, V2, V78)) end(E78, E79, E80, E81)); _ -> case V2 of {'Idris.TTImp.TTImp.IAs', E73, E74, E75, E76, E77} -> (fun (V81, V82, V83, V84, V85) -> ('un--findUpdates'(V0, V1, V85, V3)) end(E73, E74, E75, E76, E77)); _ -> case V3 of {'Idris.TTImp.TTImp.IAs', E68, E69, E70, E71, E72} -> (fun (V86, V87, V88, V89, V90) -> ('un--findUpdates'(V0, V1, V2, V90)) end(E68, E69, E70, E71, E72)); _ -> fun (V91) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end end end end end end(E65, E66, E67)); {'Idris.TTImp.TTImp.IAutoApp', E100, E101, E102} -> (fun (V92, V93, V94) -> case V3 of {'Idris.TTImp.TTImp.IAutoApp', E103, E104, E105} -> (fun (V95, V96, V97) -> fun (V98) -> begin (V99 = (('un--findUpdates'(V0, V1, V93, V96))(V98))), case V99 of {'Idris.Prelude.Types.Left', E106} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V101) -> (('un--findUpdates'(V0, V1, V94, V97))(V98)) end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E103, E104, E105)); _ -> ('un--findUpdates'(V0, V1, V93, V3)) end end(E100, E101, E102)); _ -> case V3 of {'Idris.TTImp.TTImp.IAutoApp', E24, E25, E26} -> (fun (V102, V103, V104) -> ('un--findUpdates'(V0, V1, V2, V103)) end(E24, E25, E26)); _ -> case V2 of {'Idris.TTImp.TTImp.INamedApp', E14, E15, E16, E17} -> (fun (V105, V106, V107, V108) -> case V3 of {'Idris.TTImp.TTImp.INamedApp', E18, E19, E20, E21} -> (fun (V109, V110, V111, V112) -> fun (V113) -> begin (V114 = (('un--findUpdates'(V0, V1, V106, V110))(V113))), case V114 of {'Idris.Prelude.Types.Left', E22} -> (fun (V115) -> {'Idris.Prelude.Types.Left', V115} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V116) -> (('un--findUpdates'(V0, V1, V108, V112))(V113)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20, E21)); _ -> ('un--findUpdates'(V0, V1, V106, V3)) end end(E14, E15, E16, E17)); _ -> case V3 of {'Idris.TTImp.TTImp.INamedApp', E10, E11, E12, E13} -> (fun (V117, V118, V119, V120) -> ('un--findUpdates'(V0, V1, V2, V118)) end(E10, E11, E12, E13)); _ -> case V2 of {'Idris.TTImp.TTImp.IAs', E5, E6, E7, E8, E9} -> (fun (V121, V122, V123, V124, V125) -> ('un--findUpdates'(V0, V1, V125, V3)) end(E5, E6, E7, E8, E9)); _ -> case V3 of {'Idris.TTImp.TTImp.IAs', E0, E1, E2, E3, E4} -> (fun (V126, V127, V128, V129, V130) -> ('un--findUpdates'(V0, V1, V2, V130)) end(E0, E1, E2, E3, E4)); _ -> fun (V131) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end end end end end.
'un--findTyName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> begin (V14 = {'Idris.Core.TT.PVar', V10, V11, V12, V13}), ('case--findTyName-4862'(V0, V1, V6, V10, V7, V9, V13, V12, V11, V14, V4, V3, V2, ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V7)))) end end(E4, E5, E6, E7)); _ -> ('un--findTyName'([V7 | V0], V1, V2, {'Idris.Core.Env.::', V8, V3}, V4, V9)) end end(E0, E1, E2, E3)); _ -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--findCons'(V0, V1, V2) -> ('case--findCons-5077'(V2, V1, V0, ('un--getDefining'('erased', V2)))).
'un--findAllVars'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> [V3 | ('un--findAllVars'('erased', V5))] end(E4, E5, E6, E7)); {'Idris.Core.TT.Let', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> [V3 | ('un--findAllVars'('erased', V5))] end(E8, E9, E10, E11)); {'Idris.Core.TT.PLet', E12, E13, E14, E15} -> (fun (V14, V15, V16, V17) -> [V3 | ('un--findAllVars'('erased', V5))] end(E12, E13, E14, E15)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'un--explicitlyBound'(V0, V1) -> case V1 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> fun (V10) -> begin (V11 = (((V5(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'('erased', ('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V2, 1}))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> begin (V14 = (('un--explicitlyBound'(V0, V13))(V10))), case V14 of {'Idris.Prelude.Types.Left', E10} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V16) -> {'Idris.Prelude.Types.Right', [V3 | V16]} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5, E6, E7)); _ -> fun (V17) -> {'Idris.Prelude.Types.Right', []} end end end(E0, E1, E2, E3)); _ -> fun (V18) -> {'Idris.Prelude.Types.Right', []} end end.
'un--expandCon'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V36 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V36 of {'Idris.Prelude.Types.Left', E29} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V38) -> case V38 of {'Idris.Prelude.Types.Just', E31} -> (fun (V39) -> begin (V40 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V8, {'Idris.Core.Env.Nil'}, V39))(V4))), case V40 of {'Idris.Prelude.Types.Left', E32} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V42) -> begin (V43 = (('un--getArgNames'('erased', V0, V8, [], V2, {'Idris.Core.Env.Nil'}, V42))(V4))), case V43 of {'Idris.Prelude.Types.Left', E34} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V45) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V1, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V46) -> {'Idris.TTImp.TTImp.IBindVar', V1, V46} end, V45))))} end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'('erased', V0, V1, V3, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--defaultNames'() -> [<<"x"/utf8>> | [<<"y"/utf8>> | [<<"z"/utf8>> | [<<"w"/utf8>> | [<<"v"/utf8>> | [<<"s"/utf8>> | [<<"t"/utf8>> | [<<"u"/utf8>> | []]]]]]]]].
'un--combine'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.NoValidSplit'}}; _ -> {'Idris.TTImp.Interactive.CaseSplit.OK', ('Idris.Idris2.Data.List':'un--reverse'('erased', V1))} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.TTImp.Interactive.CaseSplit.Invalid'} -> (fun () -> ('un--combine'(V3, V1)) end()); _ -> ('un--combine'(V3, [V2 | V1])) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--apply'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.TTImp.Interactive.CaseSplit.Explicit', E2, E3} -> (fun (V4, V5) -> ('un--apply'({'Idris.TTImp.TTImp.IApp', V4, V0, V5}, V3)) end(E2, E3)); {'Idris.TTImp.Interactive.CaseSplit.Auto', E4, E5} -> (fun (V6, V7) -> ('un--apply'({'Idris.TTImp.TTImp.IAutoApp', V6, V0, V7}, V3)) end(E4, E5)); {'Idris.TTImp.Interactive.CaseSplit.Named', E6, E7, E8} -> (fun (V8, V9, V10) -> ('un--apply'({'Idris.TTImp.TTImp.INamedApp', V8, V0, V9, V10}, V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); [] -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
