-module('Idris.Idris2.TTImp.Interactive.CaseSplit').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--newLHS-7438'/8,
  'nested--8720-6709--in--un--notBound'/7,
  'nested--8615-6616--in--un--mkVarN'/7,
  'nested--8720-6708--in--un--lookupName'/9,
  'nested--8720-6711--in--un--getName'/9,
  'nested--8720-6710--in--un--findNames'/8,
  'dn--un--show_Show_SplitError'/1,
  'dn--un--show_Show_ClauseUpdate'/1,
  'dn--un--show_Show_(SplitResult $a)'/2,
  'dn--un--showPrec_Show_SplitError'/2,
  'dn--un--showPrec_Show_ClauseUpdate'/2,
  'dn--un--showPrec_Show_(SplitResult $a)'/3,
  'dn--un--__Impl_Show_SplitError'/0,
  'dn--un--__Impl_Show_ClauseUpdate'/0,
  'dn--un--__Impl_Show_(SplitResult $a)'/1,
  'un--updateArg'/5,
  'un--update'/6,
  'un--unique'/4,
  'un--substLets'/2,
  'un--recordUpdate'/5,
  'un--newLHS'/7,
  'un--mkCase'/6,
  'un--getUpdates'/4,
  'un--getSplitsLHS'/7,
  'un--getSplits'/6,
  'un--getFnArgs'/2,
  'un--getEnvArgNames'/4,
  'un--getDefining'/1,
  'un--getArgNames'/7,
  'un--getArgName'/7,
  'un--findUpdates'/4,
  'un--findTyName'/6,
  'un--findCons'/4,
  'un--findAllVars'/1,
  'un--explicitlyBound'/3,
  'un--expandCon'/5,
  'un--defaultNames'/0,
  'un--combine'/2,
  'un--apply'/2
]).
'case--newLHS-7438'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V10) -> {'Idris.TTImp.Interactive.CaseSplit.Explicit', V5, {'Idris.TTImp.TTImp.Implicit', V5, 1}} end, ('Idris.Idris2.Data.List':'un--take'(V4, V9))))), begin (V12 = ('Idris.Idris2.Data.List':'un--drop'(V4, V9))), fun (V13) -> begin (V16 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V14) -> fun (V15) -> ('un--update'(V6, V3, V2, V1, V14, V15)) end end, V12, [], V13))), case V16 of {'Idris.Prelude.Types.Left', E2} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V18) -> {'Idris.Prelude.Types.Right', ('un--apply'(V8, ('Idris.Idris2.Prelude.Types.List':'un--++'(V11, V18))))} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8720-6709--in--un--notBound'(V0, V1, V2, V3, V4, V5, V6) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, {'Idris.Core.Name.UN', V6}, V2)) of 1 -> 0; 0 -> 1; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8615-6616--in--un--mkVarN'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of 0 -> V5; _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)))) end.
'nested--8720-6708--in--un--lookupName'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V11, V12) -> begin (V13 = ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V6, V8))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> begin (V16 = ('Idris.Idris2.Core.Context':'un--getFullName'(V5, V11, V8))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V15, V18)) of 1 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V12}}; 0 -> ('nested--8720-6708--in--un--lookupName'(V0, V1, V2, V3, V4, V5, V6, V10, V8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--8720-6711--in--un--getName'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V6 of {'Idris.Core.Name.UN', E0} -> (fun (V9) -> ('un--unique'([V9 | V7], [V9 | V7], 0, V8)) end(E0)); _ -> ('un--unique'(V7, V7, 0, V8)) end.
'nested--8720-6710--in--un--findNames'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V8, V9, V10, V11) -> case V10 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V12, V13, V14, V15) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'(fun (V16) -> ('nested--8720-6709--in--un--notBound'(V0, V1, V2, V3, V4, V5, V16)) end, [<<"f"/utf8>> | [<<"g"/utf8>> | []]]))} end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'(fun (V17) -> ('nested--8720-6709--in--un--notBound'(V0, V1, V2, V3, V4, V5, V17)) end, ('un--defaultNames'())))} end end(E0, E1, E2, E3)); {'Idris.Core.Value.NTCon', E8, E9, E10, E11, E12} -> (fun (V18, V19, V20, V21, V22) -> begin (V51 = ('nested--8720-6708--in--un--lookupName'(V0, V1, V2, V3, V4, V5, V19, ('Idris.Idris2.Libraries.Data.NameMap':'un--toList'(case V4 of {'Idris.Core.Context.MkDefs', E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V39 end(E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)), V7))), case V51 of {'Idris.Prelude.Types.Left', E41} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V53) -> case V53 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'(fun (V54) -> ('nested--8720-6709--in--un--notBound'(V0, V1, V2, V3, V4, V5, V54)) end, ('un--defaultNames'())))} end()); {'Idris.Prelude.Types.Just', E43} -> (fun (V55) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'(fun (V56) -> ('nested--8720-6709--in--un--notBound'(V0, V1, V2, V3, V4, V5, V56)) end, V55))} end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10, E11, E12)); _ -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'un--filter'(fun (V57) -> ('nested--8720-6709--in--un--notBound'(V0, V1, V2, V3, V4, V5, V57)) end, ('un--defaultNames'())))} end.
'dn--un--show_Show_SplitError'(V0) -> case V0 of {'Idris.TTImp.Interactive.CaseSplit.NoValidSplit'} -> (fun () -> <<"No valid case splits"/utf8>> end()); {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t split on "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" ("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, <<")"/utf8>>)))))))) end(E0, E1)); {'Idris.TTImp.Interactive.CaseSplit.CantFindLHS'} -> (fun () -> <<"No clause to split here"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ClauseUpdate'(V0) -> case V0 of {'Idris.TTImp.Interactive.CaseSplit.Valid', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Valid: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V1)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Updates: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V4) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V4)) end, fun (V5) -> fun (V6) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V5, V6)) end end}, {'Idris.Prelude.Show.MkShow', fun (V7) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V7)) end, fun (V8) -> fun (V9) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V8, V9)) end end}}, V3)) end, fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V12)) end, fun (V13) -> fun (V14) -> ('Idris.Idris2.Core.Name':'dn--un--showPrec_Show_Name'(V13, V14)) end end}, {'Idris.Prelude.Show.MkShow', fun (V15) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V15)) end, fun (V16) -> fun (V17) -> ('Idris.Idris2.TTImp.TTImp':'dn--un--showPrec_Show_RawImp'(V16, V17)) end end}}, V10, V11)) end end}, V2)))))))))) end(E0, E1)); {'Idris.TTImp.Interactive.CaseSplit.Impossible', E2} -> (fun (V18) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Impossible: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V18)))) end(E2)); {'Idris.TTImp.Interactive.CaseSplit.Invalid'} -> (fun () -> <<"Invalid"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_(SplitResult $a)'(V0, V1) -> case V1 of {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Split error: "/utf8>>, ('dn--un--show_Show_SplitError'(V2)))) end(E0)); {'Idris.TTImp.Interactive.CaseSplit.OK', E1} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"OK: "/utf8>>, case V0 of {'Idris.Prelude.Show.MkShow', E2, E3} -> (fun (V4, V5) -> (V4(V3)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_SplitError'(V0, V1) -> ('dn--un--show_Show_SplitError'(V1)).
'dn--un--showPrec_Show_ClauseUpdate'(V0, V1) -> ('dn--un--show_Show_ClauseUpdate'(V1)).
'dn--un--showPrec_Show_(SplitResult $a)'(V0, V1, V2) -> ('dn--un--show_Show_(SplitResult $a)'(V0, V2)).
'dn--un--__Impl_Show_SplitError'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_SplitError'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_SplitError'(V1, V2)) end end}.
'dn--un--__Impl_Show_ClauseUpdate'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ClauseUpdate'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ClauseUpdate'(V1, V2)) end end}.
'dn--un--__Impl_Show_(SplitResult $a)'(V0) -> {'Idris.Prelude.Show.MkShow', fun (V1) -> ('dn--un--show_Show_(SplitResult $a)'(V0, V1)) end, fun (V2) -> fun (V3) -> ('dn--un--showPrec_Show_(SplitResult $a)'(V0, V2, V3)) end end}.
'un--updateArg'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.TTImp.TTImp.IVar', E0, E1} -> (fun (V5, V6) -> case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, V6, V1)) of 1 -> fun (V11) -> case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V6, V2)) of 1 -> ('un--expandCon'(V0, V5, ('Idris.Idris2.Data.List':'un--filter'(fun (V12) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V12, V6)) end, V1)), V3, V11)); 0 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', V5, 1}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> fun (V13) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IVar', V5, V6}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); {'Idris.TTImp.TTImp.IApp', E2, E3, E4} -> (fun (V14, V15, V16) -> fun (V17) -> begin (V18 = (('un--updateArg'(V0, V1, V2, V3, V15))(V17))), case V18 of {'Idris.Prelude.Types.Left', E5} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V20) -> begin (V21 = (('un--updateArg'(V0, V1, V2, V3, V16))(V17))), case V21 of {'Idris.Prelude.Types.Left', E7} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IApp', V14, V20, V23}} end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4)); {'Idris.TTImp.TTImp.IAutoApp', E9, E10, E11} -> (fun (V24, V25, V26) -> fun (V27) -> begin (V28 = (('un--updateArg'(V0, V1, V2, V3, V25))(V27))), case V28 of {'Idris.Prelude.Types.Left', E12} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V30) -> begin (V31 = (('un--updateArg'(V0, V1, V2, V3, V26))(V27))), case V31 of {'Idris.Prelude.Types.Left', E14} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V33) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.IAutoApp', V24, V30, V33}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9, E10, E11)); {'Idris.TTImp.TTImp.INamedApp', E16, E17, E18, E19} -> (fun (V34, V35, V36, V37) -> fun (V38) -> begin (V39 = (('un--updateArg'(V0, V1, V2, V3, V35))(V38))), case V39 of {'Idris.Prelude.Types.Left', E20} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V41) -> begin (V42 = (('un--updateArg'(V0, V1, V2, V3, V37))(V38))), case V42 of {'Idris.Prelude.Types.Left', E22} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.INamedApp', V34, V41, V36, V44}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E16, E17, E18, E19)); {'Idris.TTImp.TTImp.IAs', E24, E25, E26, E27, E28} -> (fun (V45, V46, V47, V48, V49) -> ('un--updateArg'(V0, V1, V2, V3, V49)) end(E24, E25, E26, E27, E28)); _ -> fun (V50) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.TTImp.Implicit', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V4)), 1}} end end.
'un--update'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.TTImp.Interactive.CaseSplit.Explicit', E0, E1} -> (fun (V6, V7) -> begin (V8 = (('un--updateArg'(V0, V1, V2, V3, V7))(V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Explicit', V6, V10}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.TTImp.Interactive.CaseSplit.Auto', E4, E5} -> (fun (V11, V12) -> begin (V13 = (('un--updateArg'(V0, V1, V2, V3, V12))(V5))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Auto', V11, V15}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); {'Idris.TTImp.Interactive.CaseSplit.Named', E8, E9, E10} -> (fun (V16, V17, V18) -> begin (V19 = (('un--updateArg'(V0, V1, V2, V3, V18))(V5))), case V19 of {'Idris.Prelude.Types.Left', E11} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Named', V16, V17, V21}} end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--unique'(V0, V1, V2, V3) -> case V0 of [] -> ('un--unique'(V1, V1, ((V2 + 1) rem 9223372036854775808), V3)); [E0 | E1] -> (fun (V4, V5) -> begin (V6 = ('nested--8615-6616--in--un--mkVarN'(V4, V5, V3, V2, V1, V4, V2))), case ('Idris.Idris2.Prelude.Types':'un--elem'({'Idris.Prelude.EqOrd.MkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V9, V10)) end end}, {'Idris.Core.Name.UN', V6}, V3)) of 1 -> ('un--unique'(V5, V1, V2, V3)); 0 -> V6; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--substLets'(V0, V1) -> case V1 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V2, V3, V4, V5) -> case V4 of {'Idris.Core.TT.Let', E4, E5, E6, E7} -> (fun (V6, V7, V8, V9) -> ('un--substLets'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V8, V5)))) end(E4, E5, E6, E7)); {'Idris.Core.TT.PLet', E8, E9, E10, E11} -> (fun (V10, V11, V12, V13) -> ('un--substLets'(V0, ('Idris.Idris2.Core.TT.SubstEnv':'un--subst'(V12, V5)))) end(E8, E9, E10, E11)); _ -> {'Idris.Core.TT.Bind', V2, V3, V4, ('un--substLets'([V3 | V0], V5))} end end(E0, E1, E2, E3)); _ -> V1 end.
'un--recordUpdate'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V12 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V9) -> {'Idris.Builtin.MkPair', ('Idris.Idris2.Builtin':'un--fst'(V9)), {'Idris.TTImp.TTImp.IVar', V1, ('Idris.Idris2.Builtin':'un--snd'(V9))}} end, case V8 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E2, E3} -> (fun (V10, V11) -> V10 end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), begin (V15 = ('erlang':'put'(V0, case V8 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E4, E5} -> (fun (V13, V14) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', V13, [{'Idris.Builtin.MkPair', V2, ('Idris.Idris2.TTImp.Utils':'un--substNames'([], V12, V3))} | V14]} end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V15} end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--newLHS'(V0, V1, V2, V3, V4, V5, V6) -> ('case--newLHS-7438'(V6, V5, V4, V3, V2, V1, V0, ('un--getFnArgs'(V6, [])))).
'un--mkCase'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Core.Metadata.MD'}, ('Idris.Idris2.Core.Metadata':'un--initMetadata'({'Idris.Core.FC.Virtual', 0})), V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V10 = begin (V9 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V9} end), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> ('Idris.Idris2.Core.Core':'dn--un--catch_Catchable_Core_Error'(fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Context':'un--setAllPublic'(V0, 1, V17))), case V18 of {'Idris.Prelude.Types.Left', E6} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V20) -> begin (V25 = (('Idris.Idris2.TTImp.Elab':'un--elabTerm'([], V0, V8, V1, V2, {'Idris.TTImp.Elab.Check.InLHS', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V21) -> fun (V22) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V21, V22)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V23) -> fun (V24) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V23, V24)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}, [], [], {'Idris.Core.Env.Nil'}, {'Idris.TTImp.TTImp.IBindHere', ('Idris.Idris2.TTImp.TTImp':'un--getFC'(V4)), {'Idris.TTImp.TTImp.PATTERN'}, V4}, {'Idris.Prelude.Types.Nothing'}))(V17))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> begin (V30 = ('Idris.Idris2.Core.Context':'un--setAllPublic'(V0, 0, V17))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'put'(V0, V12))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V38 = begin (V37 = ('erlang':'put'(V1, V16))), {'Idris.Prelude.Types.Right', V37} end), case V38 of {'Idris.Prelude.Types.Left', E16} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V40) -> begin (V41 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'([], V0, {'Idris.Core.Env.Nil'}, V28, V17))), case V41 of {'Idris.Prelude.Types.Left', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V43) -> begin (V44 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Original LHS: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V3)))) end, V17))), case V44 of {'Idris.Prelude.Types.Left', E20} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"New LHS: "/utf8>>, ('Idris.Idris2.TTImp.TTImp':'dn--un--show_Show_RawImp'(V43)))) end, V17))), case V47 of {'Idris.Prelude.Types.Left', E22} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V49) -> begin (V50 = ('un--getUpdates'(V12, V3, V43, V17))), case V50 of {'Idris.Prelude.Types.Left', E24} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V52) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Valid', V43, V52}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, fun (V53) -> fun (V54) -> begin (V56 = begin (V55 = ('erlang':'put'(V0, V12))), {'Idris.Prelude.Types.Right', V55} end), case V56 of {'Idris.Prelude.Types.Left', E26} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V58) -> begin (V60 = begin (V59 = ('erlang':'put'(V1, V16))), {'Idris.Prelude.Types.Right', V59} end), case V60 of {'Idris.Prelude.Types.Left', E28} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V62) -> case V53 of {'Idris.Core.Core.WhenUnifying', E30, E31, E32, E33, E34, E35} -> (fun (V63, V64, V65, V66, V67, V68) -> begin (V69 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V63, V12, V65, V66))(V54))), case V69 of {'Idris.Prelude.Types.Left', E36} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V71) -> begin (V72 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, V63, V12, V65, V67))(V54))), case V72 of {'Idris.Prelude.Types.Left', E38} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V74) -> begin (V75 = (('Idris.Idris2.TTImp.ProcessDef':'un--impossibleOK'(V0, V63, V12, V71, V74))(V54))), case V75 of {'Idris.Prelude.Types.Left', E40} -> (fun (V76) -> {'Idris.Prelude.Types.Left', V76} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V77) -> case V77 of 1 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Impossible', V4}}; 0 -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Invalid'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30, E31, E32, E33, E34, E35)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.Invalid'}} end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end, V5)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getUpdates'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.TTImp.Interactive.CaseSplit.UPD'}, {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', [], []}, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('un--findUpdates'(V6, V0, V1, V2))(V3))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V11 = begin (V10 = ('erlang':'get'(V6))), {'Idris.Prelude.Types.Right', V10} end), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> {'Idris.Prelude.Types.Right', case V13 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E6, E7} -> (fun (V14, V15) -> V15 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getSplitsLHS'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--substLets'([], V5))), fun (V8) -> begin (V9 = ('Idris.Idris2.Core.Context.Log':'un--logTerm'([], V1, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> <<"Splitting"/utf8>> end, V5, V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> begin (V12 = ('un--findAllVars'(V5))), begin (V14 = begin (V13 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V13} end), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = ('un--findCons'(V1, V6, V7, V8))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> case V19 of {'Idris.TTImp.Interactive.CaseSplit.OK', E6} -> (fun (V20) -> case V20 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V21, V22) -> case V22 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V23, V24) -> begin (V25 = ('Idris.Idris2.TTImp.Unelab':'un--unelabNoSugar'([], V1, {'Idris.Core.Env.Nil'}, V7, V8))), case V25 of {'Idris.Prelude.Types.Left', E11} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V27) -> begin (V29 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V28) -> ('un--newLHS'(V1, V3, V4, V12, V6, V28, V27)) end, V24, [], V8))), case V29 of {'Idris.Prelude.Types.Left', E13} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V31) -> case ('Idris.Idris2.Core.Context':'un--getNameID'(V21, case V16 of {'Idris.Core.Context.MkDefs', E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47} -> (fun (V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59) -> V32 end(E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Just', E15} -> (fun (V60) -> begin (V63 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V61) -> fun (V62) -> ('un--mkCase'(V1, V2, V60, V27, V61, V62)) end end, V31, [], V8))), case V63 of {'Idris.Prelude.Types.Left', E16} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V65) -> begin (V69 = ('Idris.Idris2.Core.Context.Log':'un--log'(V1, <<"interaction.casesplit"/utf8>>, (1 + (1 + (1 + 0))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Found cases: "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(List $a)'({'Idris.Prelude.Show.MkShow', fun (V66) -> ('dn--un--show_Show_ClauseUpdate'(V66)) end, fun (V67) -> fun (V68) -> ('dn--un--showPrec_Show_ClauseUpdate'(V67, V68)) end end}, V65)))) end, V8))), case V69 of {'Idris.Prelude.Types.Left', E18} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V71) -> {'Idris.Prelude.Types.Right', ('un--combine'(V65, []))} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V1, V3, V21, V8)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E6)); {'Idris.TTImp.Interactive.CaseSplit.SplitFail', E48} -> (fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', V72}} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getSplits'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('Idris.Idris2.Core.Metadata':'un--findLHSAt'(V1, V3, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E2} -> (fun (V9) -> case V9 of {'Idris.Builtin.MkPair', E3, E4} -> (fun (V10, V11) -> case V11 of {'Idris.Builtin.MkPair', E5, E6} -> (fun (V12, V13) -> (('un--getSplitsLHS'(V1, V0, V2, ('Idris.Idris2.Core.FC':'un--justFC'(V10)), V12, V13, V4))(V5)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantFindLHS'}}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getFnArgs'(V0, V1) -> case V0 of {'Idris.TTImp.TTImp.IApp', E0, E1, E2} -> (fun (V2, V3, V4) -> ('un--getFnArgs'(V3, [{'Idris.TTImp.Interactive.CaseSplit.Explicit', V2, V4} | V1])) end(E0, E1, E2)); {'Idris.TTImp.TTImp.IAutoApp', E3, E4, E5} -> (fun (V5, V6, V7) -> ('un--getFnArgs'(V6, [{'Idris.TTImp.Interactive.CaseSplit.Auto', V5, V7} | V1])) end(E3, E4, E5)); {'Idris.TTImp.TTImp.INamedApp', E6, E7, E8, E9} -> (fun (V8, V9, V10, V11) -> ('un--getFnArgs'(V9, [{'Idris.TTImp.Interactive.CaseSplit.Named', V8, V10, V11} | V1])) end(E6, E7, E8, E9)); _ -> {'Idris.Builtin.MkPair', V0, V1} end.
'un--getEnvArgNames'(V0, V1, V2, V3) -> case V2 of 0 -> fun (V4) -> begin (V5 = ('un--explicitlyBound'(V1, V3, V4))), case V5 of {'Idris.Prelude.Types.Left', E6} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V7) -> ('un--getArgNames'(V0, V1, V7, [], {'Idris.Core.Env.Nil'}, V3, V4)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V8 = (V2 - 1)), fun (V9) -> case V3 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V10, V11, V12, V13) -> begin (V14 = (((V13(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V10, 0}))))(V9))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> (('un--getEnvArgNames'(V0, V1, V8, V16))(V9)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end end end end.
'un--getDefining'(V0) -> case V0 of {'Idris.Core.TT.Bind', E3, E4, E5, E6} -> (fun (V1, V2, V3, V4) -> ('un--getDefining'(V4)) end(E3, E4, E5, E6)); _ -> case ('Idris.Idris2.Core.TT':'un--getFn'(V0)) of {'Idris.Core.TT.Ref', E0, E1, E2} -> (fun (V5, V6, V7) -> {'Idris.Prelude.Types.Just', V7} end(E0, E1, E2)); _ -> {'Idris.Prelude.Types.Nothing'} end end.
'un--getArgNames'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V7, V8, V9, V10) -> case V9 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V11, V12, V13, V14) -> begin (V18 = case V13 of {'Idris.Core.TT.Explicit'} -> (fun () -> begin (V15 = ('un--getArgName'(V0, V1, V8, V2, V3, V14, V6))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> {'Idris.Prelude.Types.Right', [V17 | []]} end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> {'Idris.Prelude.Types.Right', []} end), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = (((V10(V1))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), V4, {'Idris.Core.TT.Erased', V7, 0}))))(V6))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> begin (V25 = ('un--getArgNames'(V0, V1, V2, ('Idris.Idris2.Prelude.Types.List':'un--++'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V24) -> {'Idris.Core.Name.UN', V24} end, V20)), V3)), V4, V23, V6))), case V25 of {'Idris.Prelude.Types.Left', E14} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V27) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.List':'un--++'(V20, V27))} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end.
'un--getArgName'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('nested--8720-6710--in--un--findNames'(V5, V4, V3, V2, V1, V0, V5, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Right', ('nested--8720-6711--in--un--getName'(V5, V4, V3, V2, V1, V0, V2, V9, V4))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findUpdates'(V0, V1, V2, V3) -> case V2 of {'Idris.TTImp.TTImp.IVar', E27, E28} -> (fun (V4, V5) -> fun (V6) -> case V3 of {'Idris.TTImp.TTImp.IVar', E29, E30} -> (fun (V7, V8) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V8, case V1 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6))), case V37 of {'Idris.Prelude.Types.Left', E59} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E61} -> (fun (V40) -> ('un--recordUpdate'(V0, V4, V5, {'Idris.TTImp.TTImp.IVar', V4, V8}, V6)) end(E61)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V42 = begin (V41 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V41} end), case V42 of {'Idris.Prelude.Types.Left', E62} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V44) -> case ('Idris.Idris2.Data.List':'un--lookup'({'Idris.Prelude.EqOrd.MkEq', fun (V45) -> fun (V46) -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V45, V46)) end end, fun (V47) -> fun (V48) -> ('Idris.Idris2.Core.Name':'dn--un--/=_Eq_Name'(V47, V48)) end end}, V8, case V44 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E69, E70} -> (fun (V49, V50) -> V49 end(E69, E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V53 = ('erlang':'put'(V0, case V44 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E64, E65} -> (fun (V51, V52) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', [{'Idris.Builtin.MkPair', V8, V5} | V51], V52} end(E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V53} end end()); {'Idris.Prelude.Types.Just', E66} -> (fun (V54) -> begin (V57 = ('erlang':'put'(V0, case V44 of {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', E67, E68} -> (fun (V55, V56) -> {'Idris.TTImp.Interactive.CaseSplit.MkUpdates', V55, [{'Idris.Builtin.MkPair', V5, {'Idris.TTImp.TTImp.IVar', V4, V54}} | V56]} end(E67, E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V57} end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29, E30)); _ -> ('un--recordUpdate'(V0, V4, V5, V3, V6)) end end end(E27, E28)); {'Idris.TTImp.TTImp.IApp', E71, E72, E73} -> (fun (V58, V59, V60) -> case V3 of {'Idris.TTImp.TTImp.IApp', E101, E102, E103} -> (fun (V61, V62, V63) -> fun (V64) -> begin (V65 = (('un--findUpdates'(V0, V1, V59, V62))(V64))), case V65 of {'Idris.Prelude.Types.Left', E104} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V67) -> (('un--findUpdates'(V0, V1, V60, V63))(V64)) end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E101, E102, E103)); _ -> case V3 of {'Idris.TTImp.TTImp.IAutoApp', E98, E99, E100} -> (fun (V68, V69, V70) -> ('un--findUpdates'(V0, V1, V2, V69)) end(E98, E99, E100)); _ -> case V2 of {'Idris.TTImp.TTImp.INamedApp', E88, E89, E90, E91} -> (fun (V71, V72, V73, V74) -> case V3 of {'Idris.TTImp.TTImp.INamedApp', E92, E93, E94, E95} -> (fun (V75, V76, V77, V78) -> fun (V79) -> begin (V80 = (('un--findUpdates'(V0, V1, V72, V76))(V79))), case V80 of {'Idris.Prelude.Types.Left', E96} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V82) -> (('un--findUpdates'(V0, V1, V74, V78))(V79)) end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E92, E93, E94, E95)); _ -> ('un--findUpdates'(V0, V1, V72, V3)) end end(E88, E89, E90, E91)); _ -> case V3 of {'Idris.TTImp.TTImp.INamedApp', E84, E85, E86, E87} -> (fun (V83, V84, V85, V86) -> ('un--findUpdates'(V0, V1, V2, V84)) end(E84, E85, E86, E87)); _ -> case V2 of {'Idris.TTImp.TTImp.IAs', E79, E80, E81, E82, E83} -> (fun (V87, V88, V89, V90, V91) -> ('un--findUpdates'(V0, V1, V91, V3)) end(E79, E80, E81, E82, E83)); _ -> case V3 of {'Idris.TTImp.TTImp.IAs', E74, E75, E76, E77, E78} -> (fun (V92, V93, V94, V95, V96) -> ('un--findUpdates'(V0, V1, V2, V96)) end(E74, E75, E76, E77, E78)); _ -> fun (V97) -> {'Idris.Prelude.Types.Right', 0} end end end end end end end end(E71, E72, E73)); {'Idris.TTImp.TTImp.IAutoApp', E106, E107, E108} -> (fun (V98, V99, V100) -> case V3 of {'Idris.TTImp.TTImp.IAutoApp', E109, E110, E111} -> (fun (V101, V102, V103) -> fun (V104) -> begin (V105 = (('un--findUpdates'(V0, V1, V99, V102))(V104))), case V105 of {'Idris.Prelude.Types.Left', E112} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V107) -> (('un--findUpdates'(V0, V1, V100, V103))(V104)) end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E109, E110, E111)); _ -> ('un--findUpdates'(V0, V1, V99, V3)) end end(E106, E107, E108)); _ -> case V3 of {'Idris.TTImp.TTImp.IAutoApp', E24, E25, E26} -> (fun (V108, V109, V110) -> ('un--findUpdates'(V0, V1, V2, V109)) end(E24, E25, E26)); _ -> case V2 of {'Idris.TTImp.TTImp.INamedApp', E14, E15, E16, E17} -> (fun (V111, V112, V113, V114) -> case V3 of {'Idris.TTImp.TTImp.INamedApp', E18, E19, E20, E21} -> (fun (V115, V116, V117, V118) -> fun (V119) -> begin (V120 = (('un--findUpdates'(V0, V1, V112, V116))(V119))), case V120 of {'Idris.Prelude.Types.Left', E22} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V122) -> (('un--findUpdates'(V0, V1, V114, V118))(V119)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20, E21)); _ -> ('un--findUpdates'(V0, V1, V112, V3)) end end(E14, E15, E16, E17)); _ -> case V3 of {'Idris.TTImp.TTImp.INamedApp', E10, E11, E12, E13} -> (fun (V123, V124, V125, V126) -> ('un--findUpdates'(V0, V1, V2, V124)) end(E10, E11, E12, E13)); _ -> case V2 of {'Idris.TTImp.TTImp.IAs', E5, E6, E7, E8, E9} -> (fun (V127, V128, V129, V130, V131) -> ('un--findUpdates'(V0, V1, V131, V3)) end(E5, E6, E7, E8, E9)); _ -> case V3 of {'Idris.TTImp.TTImp.IAs', E0, E1, E2, E3, E4} -> (fun (V132, V133, V134, V135, V136) -> ('un--findUpdates'(V0, V1, V2, V136)) end(E0, E1, E2, E3, E4)); _ -> fun (V137) -> {'Idris.Prelude.Types.Right', 0} end end end end end end end.
'un--findTyName'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V6, V7, V8, V9) -> case V8 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V10, V11, V12, V13) -> begin (V14 = {'Idris.Core.TT.PVar', V10, V11, V12, V13}), case ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V4, V7)) of 1 -> fun (V15) -> begin (V16 = (('Idris.Idris2.Core.Normalise':'un--nf'(V1, V0, V2, V3, V13))(V15))), case V16 of {'Idris.Prelude.Types.Left', E8} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V18) -> case V18 of {'Idris.Core.Value.NTCon', E10, E11, E12, E13, E14} -> (fun (V19, V20, V21, V22, V23) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V20}} end(E10, E11, E12, E13, E14)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 0 -> ('un--findTyName'([V7 | V0], V1, V2, {'Idris.Core.Env.::', V14, V3}, V4, V9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> ('un--findTyName'([V7 | V0], V1, V2, {'Idris.Core.Env.::', V8, V3}, V4, V9)) end end(E0, E1, E2, E3)); _ -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--findCons'(V0, V1, V2, V3) -> case ('un--getDefining'(V2)) of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, <<"Can\x{27}t find function name on LHS"/utf8>>}}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E1} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V8) -> begin (V9 = (('un--findTyName'([], V0, V8, {'Idris.Core.Env.Nil'}, V1, V2))(V3))), case V9 of {'Idris.Prelude.Types.Left', E3} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t find type of "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)), <<" in LHS"/utf8>>))))}}} end()); {'Idris.Prelude.Types.Just', E5} -> (fun (V12) -> begin (V41 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V12, case V8 of {'Idris.Core.Context.MkDefs', E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40) -> V13 end(E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3))), case V41 of {'Idris.Prelude.Types.Left', E34} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V43) -> case V43 of {'Idris.Prelude.Types.Just', E36} -> (fun (V44) -> case V44 of {'Idris.Core.Context.TCon', E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V45, V46, V47, V48, V49, V50, V51, V52) -> begin (V59 = ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V53) -> fun (V54) -> fun (V55) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V53, V54, V55)) end end end, fun (V56) -> fun (V57) -> fun (V58) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V56, V57, V58)) end end end}, V12, V3))), case V59 of {'Idris.Prelude.Types.Left', E45} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V61) -> begin (V70 = ('Idris.Idris2.Core.Core':'un--traverse\x{27}'(fun (V62) -> fun (V63) -> ('Idris.Idris2.Core.Context':'un--toFullNames'(V0, {'Idris.Core.Context.dn--un--__mkHasNames', fun (V64) -> fun (V65) -> fun (V66) -> ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(V64, V65, V66)) end end end, fun (V67) -> fun (V68) -> fun (V69) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_Name'(V67, V68, V69)) end end end}, V62, V63)) end end, V51, [], V3))), case V70 of {'Idris.Prelude.Types.Left', E47} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.OK', {'Idris.Builtin.MkPair', V4, {'Idris.Builtin.MkPair', V61, V72}}}} end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37, E38, E39, E40, E41, E42, E43, E44)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a type constructor "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V73) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V73)) end, fun (V74) -> fun (V75) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Def'(V74, V75)) end end}, V43))))}}} end end(E36)); _ -> {'Idris.Prelude.Types.Right', {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.CantSplitThis', V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Not a type constructor "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V76) -> ('Idris.Idris2.Core.Context':'dn--un--show_Show_Def'(V76)) end, fun (V77) -> fun (V78) -> ('Idris.Idris2.Core.Context':'dn--un--showPrec_Show_Def'(V77, V78)) end end}, V43))))}}} end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--findAllVars'(V0) -> case V0 of {'Idris.Core.TT.Bind', E0, E1, E2, E3} -> (fun (V1, V2, V3, V4) -> case V3 of {'Idris.Core.TT.PVar', E4, E5, E6, E7} -> (fun (V5, V6, V7, V8) -> [V2 | ('un--findAllVars'(V4))] end(E4, E5, E6, E7)); {'Idris.Core.TT.Let', E8, E9, E10, E11} -> (fun (V9, V10, V11, V12) -> [V2 | ('un--findAllVars'(V4))] end(E8, E9, E10, E11)); {'Idris.Core.TT.PLet', E12, E13, E14, E15} -> (fun (V13, V14, V15, V16) -> [V2 | ('un--findAllVars'(V4))] end(E12, E13, E14, E15)); _ -> [] end end(E0, E1, E2, E3)); _ -> [] end.
'un--explicitlyBound'(V0, V1, V2) -> case V1 of {'Idris.Core.Value.NBind', E0, E1, E2, E3} -> (fun (V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.Pi', E4, E5, E6, E7} -> (fun (V7, V8, V9, V10) -> begin (V11 = (((V6(V0))(('Idris.Idris2.Core.Normalise':'un--toClosure'(('Idris.Idris2.Core.Value':'un--defaultOpts'()), {'Idris.Core.Env.Nil'}, {'Idris.Core.TT.Erased', V3, 0}))))(V2))), case V11 of {'Idris.Prelude.Types.Left', E8} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V13) -> begin (V14 = ('un--explicitlyBound'(V0, V13, V2))), case V14 of {'Idris.Prelude.Types.Left', E10} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V16) -> {'Idris.Prelude.Types.Right', [V4 | V16]} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5, E6, E7)); _ -> {'Idris.Prelude.Types.Right', []} end end(E0, E1, E2, E3)); _ -> {'Idris.Prelude.Types.Right', []} end.
'un--expandCon'(V0, V1, V2, V3, V4) -> begin (V6 = begin (V5 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V5} end), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> begin (V37 = ('Idris.Idris2.Core.Context':'un--lookupTyExact'(V3, case V8 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V37 of {'Idris.Prelude.Types.Left', E30} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V39) -> case V39 of {'Idris.Prelude.Types.Just', E32} -> (fun (V40) -> begin (V41 = (('Idris.Idris2.Core.Normalise':'un--nf'(V0, [], V8, {'Idris.Core.Env.Nil'}, V40))(V4))), case V41 of {'Idris.Prelude.Types.Left', E33} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V43) -> begin (V44 = ('un--getArgNames'(V0, V8, [], V2, {'Idris.Core.Env.Nil'}, V43, V4))), case V44 of {'Idris.Prelude.Types.Left', E35} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V46) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.TTImp.TTImp':'un--apply'({'Idris.TTImp.TTImp.IVar', V1, V3}, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V47) -> {'Idris.TTImp.TTImp.IBindVar', V1, V47} end, V46))))} end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('Idris.Idris2.Core.Context':'un--undefinedName'(V0, V1, V3, V4)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--defaultNames'() -> [<<"x"/utf8>> | [<<"y"/utf8>> | [<<"z"/utf8>> | [<<"w"/utf8>> | [<<"v"/utf8>> | [<<"s"/utf8>> | [<<"t"/utf8>> | [<<"u"/utf8>> | []]]]]]]]].
'un--combine'(V0, V1) -> case V0 of [] -> case V1 of [] -> {'Idris.TTImp.Interactive.CaseSplit.SplitFail', {'Idris.TTImp.Interactive.CaseSplit.NoValidSplit'}}; _ -> {'Idris.TTImp.Interactive.CaseSplit.OK', ('Idris.Idris2.Data.List':'un--reverse'(V1))} end; [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.TTImp.Interactive.CaseSplit.Invalid'} -> (fun () -> ('un--combine'(V3, V1)) end()); _ -> ('un--combine'(V3, [V2 | V1])) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--apply'(V0, V1) -> case V1 of [E0 | E1] -> (fun (V2, V3) -> case V2 of {'Idris.TTImp.Interactive.CaseSplit.Explicit', E2, E3} -> (fun (V4, V5) -> ('un--apply'({'Idris.TTImp.TTImp.IApp', V4, V0, V5}, V3)) end(E2, E3)); {'Idris.TTImp.Interactive.CaseSplit.Auto', E4, E5} -> (fun (V6, V7) -> ('un--apply'({'Idris.TTImp.TTImp.IAutoApp', V6, V0, V7}, V3)) end(E4, E5)); {'Idris.TTImp.Interactive.CaseSplit.Named', E6, E7, E8} -> (fun (V8, V9, V10) -> ('un--apply'({'Idris.TTImp.TTImp.INamedApp', V8, V0, V9, V10}, V3)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); [] -> V0; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
