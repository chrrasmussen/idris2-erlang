-module('Idris.Idris2.Libraries.Data.IOMatrix').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--read-588'/7,
  'case--write-509'/8,
  'un--write'/7,
  'un--width'/2,
  'un--toPosition'/4,
  'un--read'/6,
  'un--new'/5,
  'un--height'/2
]).
'case--read-588'(V0, V1, V2, V3, V4, V5, V6) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E6, E7} -> (fun (V7, V8) -> V7 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V9, V10, V11) -> V9 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V12, V13, V14) -> ((V13('erased'))({'Idris.Prelude.Types.Nothing'})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V15) -> case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E9, E10} -> (fun (V16, V17) -> ((V17('erased'))(fun (V18) -> ('erlang':'throw'("Error: Badly formed external primitive Data.IOArray.Prims.prim__arrayGet")) end)) end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--write-509'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> case case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E6, E7} -> (fun (V8, V9) -> V8 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V10, V11, V12) -> V10 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V13, V14, V15) -> ((V14('erased'))(1)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end()); {'Idris.Prelude.Types.Just', E8} -> (fun (V16) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$'('erased', 'erased', 'erased', case case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E15, E16} -> (fun (V17, V18) -> V17 end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E12, E13, E14} -> (fun (V19, V20, V21) -> V19 end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E9, E10, E11} -> (fun (V22, V23, V24) -> V22 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, 0, case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E17, E18} -> (fun (V25, V26) -> ((V26('erased'))(fun (V27) -> ('erlang':'throw'("Error: Badly formed external primitive Data.IOArray.Prims.prim__arraySet")) end)) end(E17, E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--write'(V0, V1, V2, V3, V4, V5, V6) -> ('case--write-509'('erased', 'erased', V2, V6, V5, V4, V3, ('un--toPosition'('erased', V3, V4, V5)))).
'un--width'(V0, V1) -> case V1 of {'Idris.Libraries.Data.IOMatrix.MkIOMatrix', E0, E1, E2} -> (fun (V2, V3, V4) -> V2 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPosition'(V0, V1, V2, V3) -> case V1 of {'Idris.Libraries.Data.IOMatrix.MkIOMatrix', E0, E1, E2} -> (fun (V4, V5, V6) -> ('Idris.Idris2.Prelude.Interfaces':'un-->>'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V9, V10)) end end end end, fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V12)) end end, fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V15, V16)) end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un-->>=_Monad_Maybe'('erased', 'erased', V19, V20)) end end end end, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.Types':'dn--un--join_Monad_Maybe'('erased', V22)) end end}, ('Idris.Idris2.Prelude.Interfaces':'un--guard'('erased', {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V25, V26)) end end end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', V28)) end end, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V31, V32)) end end end end}, fun (V33) -> ('Idris.Idris2.Prelude.Types':'dn--un--empty_Alternative_Maybe'('erased')) end, fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Types':'dn--un--<|>_Alternative_Maybe'('erased', V35, V36)) end end end}, ('Idris.Idris2.Prelude.Basics':'un--not'(('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V2, 0)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Int'(V3, 0)), fun () -> ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V2, V4)), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_Int'(V3, V5)) end)) end)) end)))))), fun () -> ('Idris.Idris2.Prelude.Types':'dn--un--pure_Applicative_Maybe'('erased', ((((V2 * V5) rem 9223372036854775808) + V3) rem 9223372036854775808))) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--read'(V0, V1, V2, V3, V4, V5) -> ('case--read-588'('erased', 'erased', V2, V5, V4, V3, ('un--toPosition'('erased', V3, V4, V5)))).
'un--new'(V0, V1, V2, V3, V4) -> case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E13, E14} -> (fun (V5, V6) -> V5 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E3, E4} -> (fun (V19, V20) -> ((V20('erased'))(fun (V21) -> ('erlang':'throw'("Error: Badly formed external primitive Data.IOArray.Prims.prim__newArray")) end)) end(E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V10) -> case case case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E11, E12} -> (fun (V11, V12) -> V11 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E8, E9, E10} -> (fun (V13, V14, V15) -> V13 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E5, E6, E7} -> (fun (V16, V17, V18) -> ((V17('erased'))({'Idris.Libraries.Data.IOMatrix.MkIOMatrix', V3, V4, V10})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--height'(V0, V1) -> case V1 of {'Idris.Libraries.Data.IOMatrix.MkIOMatrix', E0, E1, E2} -> (fun (V2, V3, V4) -> V3 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
