-module('Idris.Idris2.Prelude.Interfaces.Traversable').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--traverse_Traversable_Compose((. $t) $f)'/8,
  'un--Compose'/3
]).
'dn--un--traverse_Traversable_Compose((. $t) $f)'(V0, V1, V2, V3, V4, V5, V6, V7) -> case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V5)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E0, E1, E2} -> (fun (V8, V9, V10) -> fun (V11) -> ((((((V10('erased'))('erased'))('erased'))(V6))(case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V5)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E3, E4, E5} -> (fun (V12, V13, V14) -> fun (V15) -> ((((((V14('erased'))('erased'))('erased'))(V6))(V7))(V15)) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V11)) end end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--Compose'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.Interfaces.Functor':'dn--un--map_Functor_Compose((. $f) $g)'('erased', 'erased', 'erased', 'erased', {'Idris.Builtin.MkPair', case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E0, E1, E2} -> (fun (V7, V8, V9) -> V7 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E3, E4, E5} -> (fun (V10, V11, V12) -> V10 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V5, V6)) end end end end, {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> ((('Idris.Idris2.Prelude.Interfaces.Foldable':'dn--un--foldr_Foldable_Compose((. $t) $f)'('erased', 'erased', 'erased', 'erased', {'Idris.Builtin.MkPair', case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E6, E7, E8} -> (fun (V18, V19, V20) -> V19 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E9, E10, E11} -> (fun (V21, V22, V23) -> V22 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V15))(V16))(V17)) end end end end end, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ((('Idris.Idris2.Prelude.Interfaces.Foldable':'dn--un--foldl_Foldable_Compose((. $t) $f)'('erased', 'erased', 'erased', 'erased', {'Idris.Builtin.MkPair', case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E12, E13, E14} -> (fun (V29, V30, V31) -> V30 end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E15, E16, E17} -> (fun (V32, V33, V34) -> V33 end(E15, E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V26))(V27))(V28)) end end end end end, fun (V35) -> fun (V36) -> ('Idris.Idris2.Prelude.Interfaces.Foldable':'dn--un--null_Foldable_Compose((. $t) $f)'('erased', 'erased', 'erased', {'Idris.Builtin.MkPair', case ('Idris.Idris2.Builtin':'un--fst'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E18, E19, E20} -> (fun (V37, V38, V39) -> V38 end(E18, E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, case ('Idris.Idris2.Builtin':'un--snd'('erased', 'erased', V2)) of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E21, E22, E23} -> (fun (V40, V41, V42) -> V41 end(E21, E22, E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end}, V36)) end end}, fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> (('dn--un--traverse_Traversable_Compose((. $t) $f)'('erased', 'erased', 'erased', 'erased', 'erased', V2, V46, V47))(V48)) end end end end end end}.
