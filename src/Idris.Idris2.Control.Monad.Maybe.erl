-module('Idris.Idris2.Control.Monad.Maybe').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--<+>-1204'/6,
  'case--max-997'/6,
  'case--min-959'/6,
  'dn--un--traverse_Traversable_(MaybeT $m)'/8,
  'dn--un--show_Show_((MaybeT $m) $a)'/4,
  'dn--un--showPrec_Show_((MaybeT $m) $a)'/5,
  'dn--un--pure_Applicative_(MaybeT $m)'/4,
  'dn--un--null_Foldable_(MaybeT $m)'/4,
  'dn--un--neutral_Monoid_((MaybeT $m) $a)'/3,
  'dn--un--min_Ord_((MaybeT $m) $a)'/5,
  'dn--un--max_Ord_((MaybeT $m) $a)'/5,
  'dn--un--map_Functor_(MaybeT $m)'/6,
  'dn--un--lift_MonadTrans_MaybeT'/4,
  'dn--un--liftIO_HasIO_(MaybeT $m)'/4,
  'dn--un--join_Monad_(MaybeT $m)'/4,
  'dn--un--foldr_Foldable_(MaybeT $m)'/7,
  'dn--un--foldl_Foldable_(MaybeT $m)'/7,
  'dn--un--empty_Alternative_(MaybeT $m)'/3,
  'dn--un--compare_Ord_((MaybeT $m) $a)'/5,
  'dn--un--__Impl_Traversable_(MaybeT $m)'/2,
  'dn--un--__Impl_Show_((MaybeT $m) $a)'/3,
  'dn--un--__Impl_Semigroup_((MaybeT $m) $a)'/5,
  'dn--un--__Impl_Ord_((MaybeT $m) $a)'/3,
  'dn--un--__Impl_Monoid_((MaybeT $m) $a)'/3,
  'dn--un--__Impl_Monad_(MaybeT $m)'/2,
  'dn--un--__Impl_MonadTrans_MaybeT'/4,
  'dn--un--__Impl_HasIO_(MaybeT $m)'/2,
  'dn--un--__Impl_Functor_(MaybeT $m)'/6,
  'dn--un--__Impl_Foldable_(MaybeT $m)'/2,
  'dn--un--__Impl_Eq_((MaybeT $m) $a)'/3,
  'dn--un--__Impl_Applicative_(MaybeT $m)'/2,
  'dn--un--__Impl_Alternative_(MaybeT $m)'/2,
  'dn--un-->_Ord_((MaybeT $m) $a)'/5,
  'dn--un-->>=_Monad_(MaybeT $m)'/6,
  'dn--un-->=_Ord_((MaybeT $m) $a)'/5,
  'dn--un--==_Eq_((MaybeT $m) $a)'/5,
  'dn--un--<|>_Alternative_(MaybeT $m)'/5,
  'dn--un--<_Ord_((MaybeT $m) $a)'/5,
  'dn--un--<=_Ord_((MaybeT $m) $a)'/5,
  'dn--un--<+>_Semigroup_((MaybeT $m) $a)'/5,
  'dn--un--<*>_Applicative_(MaybeT $m)'/6,
  'dn--un--/=_Eq_((MaybeT $m) $a)'/5,
  'un--toMaybeT'/5,
  'un--runMaybeT'/3,
  'un--nothing'/3,
  'un--maybeT'/7,
  'un--mapMaybeT'/6,
  'un--just'/4,
  'un--isNothingT'/4,
  'un--isJustT'/4,
  'un--fromMaybeT'/5
]).
'case--<+>-1204'(V0, V1, V2, V3, V4, V5) -> case V5 of {'Idris.Prelude.Types.Just', E0} -> (fun (V6) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E4, E5, E6} -> (fun (V7, V8, V9) -> V7 end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E1, E2, E3} -> (fun (V10, V11, V12) -> ((V11('erased'))(V5)) end(E1, E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> V4 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--max-997'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> V4; 1 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--min-959'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> V4; 1 -> V3; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--traverse_Traversable_(MaybeT $m)'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', case V5 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V8, V9, V10) -> V8 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V11) -> V11 end, case V4 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E3, E4, E5} -> (fun (V12, V13, V14) -> ((((((V14('erased'))('erased'))('erased'))(V5))(fun (V15) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> case V5 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E6, E7, E8} -> (fun (V16, V17, V18) -> ((V17('erased'))({'Idris.Prelude.Types.Nothing'})) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun () -> fun (V19) -> case V5 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E9, E10, E11} -> (fun (V20, V21, V22) -> ((((V20('erased'))('erased'))(fun (V23) -> {'Idris.Prelude.Types.Just', V23} end))((V6(V19)))) end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end, V15)) end))(V7)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end)).
'dn--un--show_Show_((MaybeT $m) $a)'(V0, V1, V2, V3) -> ('dn--un--showPrec_Show_((MaybeT $m) $a)'('erased', 'erased', V2, {'Idris.Prelude.Show.Open'}, V3)).
'dn--un--showPrec_Show_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Show':'un--showCon'(V3, <<"MkMaybeT"/utf8>>, ('Idris.Idris2.Prelude.Show':'un--showArg'('erased', V2, V4)))).
'dn--un--pure_Applicative_(MaybeT $m)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V4, V5, V6) -> ((V5('erased'))({'Idris.Prelude.Types.Just', V3})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--null_Foldable_(MaybeT $m)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', E0, E1, E2} -> (fun (V4, V5, V6) -> ((V6('erased'))(V3)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--neutral_Monoid_((MaybeT $m) $a)'(V0, V1, V2) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V3, V4, V5) -> V3 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V6, V7, V8) -> ((V7('erased'))({'Idris.Prelude.Types.Nothing'})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--min_Ord_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('case--min-959'('erased', 'erased', V2, V4, V3, ('dn--un--<_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)))).
'dn--un--max_Ord_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('case--max-997'('erased', 'erased', V2, V4, V3, ('dn--un-->_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)))).
'dn--un--map_Functor_(MaybeT $m)'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Prelude.Interfaces':'un--<$>'('erased', 'erased', 'erased', V3, fun (V6) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_Maybe'('erased', 'erased', V4, V6)) end, V5)).
'dn--un--lift_MonadTrans_MaybeT'(V0, V1, V2, V3) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V4, V5, V6) -> V4 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V7('erased'))('erased'))(fun (V10) -> {'Idris.Prelude.Types.Just', V10} end))(V3)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--liftIO_HasIO_(MaybeT $m)'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E0, E1} -> (fun (V4, V5) -> ((V5('erased'))(fun (V6) -> begin (V7 = (V3(V6))), {'Idris.Prelude.Types.Just', V7} end end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--join_Monad_(MaybeT $m)'(V0, V1, V2, V3) -> ('dn--un-->>=_Monad_(MaybeT $m)'('erased', 'erased', 'erased', V2, V3, fun (V4) -> V4 end)).
'dn--un--foldr_Foldable_(MaybeT $m)'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', E0, E1, E2} -> (fun (V7, V8, V9) -> (((((V7('erased'))('erased'))(fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V11 end, fun () -> fun (V12) -> ((V4(V12))(V11)) end end, V10)) end end))(V5))(V6)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--foldl_Foldable_(MaybeT $m)'(V0, V1, V2, V3, V4, V5, V6) -> (('dn--un--foldr_Foldable_(MaybeT $m)'('erased', 'erased', 'erased', V3, fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V9) -> fun (V10) -> fun (V11) -> (V9((V10(V11)))) end end end, fun (V12) -> ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', V4, V7, V12)) end, V8)) end end, fun (V13) -> V13 end, V6))(V5)).
'dn--un--empty_Alternative_(MaybeT $m)'(V0, V1, V2) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V3, V4, V5) -> V3 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V6, V7, V8) -> ((V7('erased'))({'Idris.Prelude.Types.Nothing'})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--compare_Ord_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Basics':'un--on'('erased', 'erased', 'erased', case V2 of {'Idris.Prelude.EqOrd.dn--un--__mkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12) -> fun (V13) -> fun (V14) -> ((V6(V13))(V14)) end end end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V15) -> V15 end, V3, V4)).
'dn--un--__Impl_Traversable_(MaybeT $m)'(V0, V1) -> {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_(MaybeT $m)'('erased', 'erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5)) end end end end, {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--foldr_Foldable_(MaybeT $m)'('erased', 'erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E3, E4, E5} -> (fun (V14, V15, V16) -> V15 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V11, V12, V13)) end end end end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> ('dn--un--foldl_Foldable_(MaybeT $m)'('erased', 'erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E6, E7, E8} -> (fun (V22, V23, V24) -> V23 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V19, V20, V21)) end end end end end, fun (V25) -> fun (V26) -> ('dn--un--null_Foldable_(MaybeT $m)'('erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkTraversable', E9, E10, E11} -> (fun (V27, V28, V29) -> V28 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V26)) end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> ('dn--un--traverse_Traversable_(MaybeT $m)'('erased', 'erased', 'erased', 'erased', V1, V33, V34, V35)) end end end end end end}.
'dn--un--__Impl_Show_((MaybeT $m) $a)'(V0, V1, V2) -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V3) -> ('dn--un--show_Show_((MaybeT $m) $a)'('erased', 'erased', V2, V3)) end, fun (V4) -> fun (V5) -> ('dn--un--showPrec_Show_((MaybeT $m) $a)'('erased', 'erased', V2, V4, V5)) end end}.
'dn--un--__Impl_Semigroup_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('dn--un--<+>_Semigroup_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)).
'dn--un--__Impl_Ord_((MaybeT $m) $a)'(V0, V1, V2) -> {'Idris.Prelude.EqOrd.dn--un--__mkOrd', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V3) -> fun (V4) -> ('dn--un--==_Eq_((MaybeT $m) $a)'('erased', 'erased', case V2 of {'Idris.Prelude.EqOrd.dn--un--__mkOrd', E0, E1, E2, E3, E4, E5, E6, E7} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V3, V4)) end end, fun (V13) -> fun (V14) -> ('dn--un--/=_Eq_((MaybeT $m) $a)'('erased', 'erased', case V2 of {'Idris.Prelude.EqOrd.dn--un--__mkOrd', E8, E9, E10, E11, E12, E13, E14, E15} -> (fun (V15, V16, V17, V18, V19, V20, V21, V22) -> V15 end(E8, E9, E10, E11, E12, E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13, V14)) end end}, fun (V23) -> fun (V24) -> ('dn--un--compare_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V23, V24)) end end, fun (V25) -> fun (V26) -> ('dn--un--<_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V25, V26)) end end, fun (V27) -> fun (V28) -> ('dn--un-->_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V27, V28)) end end, fun (V29) -> fun (V30) -> ('dn--un--<=_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V29, V30)) end end, fun (V31) -> fun (V32) -> ('dn--un-->=_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V31, V32)) end end, fun (V33) -> fun (V34) -> ('dn--un--max_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V33, V34)) end end, fun (V35) -> fun (V36) -> ('dn--un--min_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V35, V36)) end end}.
'dn--un--__Impl_Monoid_((MaybeT $m) $a)'(V0, V1, V2) -> {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V3) -> fun (V4) -> ('dn--un--<+>_Semigroup_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)) end end, ('dn--un--neutral_Monoid_((MaybeT $m) $a)'('erased', 'erased', V2))}.
'dn--un--__Impl_Monad_(MaybeT $m)'(V0, V1) -> {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_(MaybeT $m)'('erased', 'erased', 'erased', case case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V6, V7, V8) -> V6 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V9, V10, V11) -> V9 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5)) end end end end, fun (V12) -> fun (V13) -> ('dn--un--pure_Applicative_(MaybeT $m)'('erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V14, V15, V16) -> V14 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--<*>_Applicative_(MaybeT $m)'('erased', 'erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V21, V22, V23) -> V21 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V19, V20)) end end end end}, fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un-->>=_Monad_(MaybeT $m)'('erased', 'erased', 'erased', V1, V26, V27)) end end end end, fun (V28) -> fun (V29) -> ('dn--un--join_Monad_(MaybeT $m)'('erased', 'erased', V1, V29)) end end}.
'dn--un--__Impl_MonadTrans_MaybeT'(V0, V1, V2, V3) -> ('dn--un--lift_MonadTrans_MaybeT'('erased', 'erased', V2, V3)).
'dn--un--__Impl_HasIO_(MaybeT $m)'(V0, V1) -> {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_(MaybeT $m)'('erased', 'erased', 'erased', case case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E6, E7} -> (fun (V6, V7) -> V6 end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V8, V9, V10) -> V8 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V11, V12, V13) -> V11 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5)) end end end end, fun (V14) -> fun (V15) -> ('dn--un--pure_Applicative_(MaybeT $m)'('erased', 'erased', case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E11, E12} -> (fun (V16, V17) -> V16 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E8, E9, E10} -> (fun (V18, V19, V20) -> V18 end(E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V15)) end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> ('dn--un--<*>_Applicative_(MaybeT $m)'('erased', 'erased', 'erased', case case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E16, E17} -> (fun (V25, V26) -> V25 end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E13, E14, E15} -> (fun (V27, V28, V29) -> V27 end(E13, E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V23, V24)) end end end end}, fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('dn--un-->>=_Monad_(MaybeT $m)'('erased', 'erased', 'erased', case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E18, E19} -> (fun (V34, V35) -> V34 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V32, V33)) end end end end, fun (V36) -> fun (V37) -> ('dn--un--join_Monad_(MaybeT $m)'('erased', 'erased', case V1 of {'Idris.Prelude.IO.dn--un--__mkHasIO', E20, E21} -> (fun (V38, V39) -> V38 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V37)) end end}, fun (V40) -> fun (V41) -> ('dn--un--liftIO_HasIO_(MaybeT $m)'('erased', 'erased', V1, V41)) end end}.
'dn--un--__Impl_Functor_(MaybeT $m)'(V0, V1, V2, V3, V4, V5) -> ('dn--un--map_Functor_(MaybeT $m)'('erased', 'erased', 'erased', V1, V4, V5)).
'dn--un--__Impl_Foldable_(MaybeT $m)'(V0, V1) -> {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('dn--un--foldr_Foldable_(MaybeT $m)'('erased', 'erased', 'erased', V1, V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('dn--un--foldl_Foldable_(MaybeT $m)'('erased', 'erased', 'erased', V1, V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> ('dn--un--null_Foldable_(MaybeT $m)'('erased', 'erased', V1, V13)) end end}.
'dn--un--__Impl_Eq_((MaybeT $m) $a)'(V0, V1, V2) -> {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V3) -> fun (V4) -> ('dn--un--==_Eq_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)) end end, fun (V5) -> fun (V6) -> ('dn--un--/=_Eq_((MaybeT $m) $a)'('erased', 'erased', V2, V5, V6)) end end}.
'dn--un--__Impl_Applicative_(MaybeT $m)'(V0, V1) -> {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_(MaybeT $m)'('erased', 'erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V6, V7, V8) -> V6 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5)) end end end end, fun (V9) -> fun (V10) -> ('dn--un--pure_Applicative_(MaybeT $m)'('erased', 'erased', V1, V10)) end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('dn--un--<*>_Applicative_(MaybeT $m)'('erased', 'erased', 'erased', V1, V13, V14)) end end end end}.
'dn--un--__Impl_Alternative_(MaybeT $m)'(V0, V1) -> {'Idris.Prelude.Interfaces.dn--un--__mkAlternative', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('dn--un--map_Functor_(MaybeT $m)'('erased', 'erased', 'erased', case case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E3, E4, E5} -> (fun (V6, V7, V8) -> V6 end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V9, V10, V11) -> V9 end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4, V5)) end end end end, fun (V12) -> fun (V13) -> ('dn--un--pure_Applicative_(MaybeT $m)'('erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V14, V15, V16) -> V14 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V13)) end end, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--<*>_Applicative_(MaybeT $m)'('erased', 'erased', 'erased', case V1 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E9, E10, E11} -> (fun (V21, V22, V23) -> V21 end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V19, V20)) end end end end}, fun (V24) -> ('dn--un--empty_Alternative_(MaybeT $m)'('erased', 'erased', V1)) end, fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--<|>_Alternative_(MaybeT $m)'('erased', 'erased', V1, V26, V27)) end end end}.
'dn--un-->_Ord_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)), 2)).
'dn--un-->>=_Monad_(MaybeT $m)'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V7('erased'))('erased'))(V4))(fun (V9) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> case case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V10, V11, V12) -> V10 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V13, V14, V15) -> ((V14('erased'))({'Idris.Prelude.Types.Nothing'})) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun () -> fun (V16) -> (V5(V16)) end end, V9)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un-->=_Ord_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)), 0)).
'dn--un--==_Eq_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Basics':'un--on'('erased', 'erased', 'erased', case V2 of {'Idris.Prelude.EqOrd.dn--un--__mkEq', E0, E1} -> (fun (V5, V6) -> fun (V7) -> fun (V8) -> ((V5(V7))(V8)) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, fun (V9) -> V9 end, V3, V4)).
'dn--un--<|>_Alternative_(MaybeT $m)'(V0, V1, V2, V3, V4) -> ('dn--un--<+>_Semigroup_((MaybeT $m) $a)'('erased', 'erased', V2, V3, (V4()))).
'dn--un--<_Ord_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Ordering'(('dn--un--compare_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)), 0)).
'dn--un--<=_Ord_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Ordering'(('dn--un--compare_Ord_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)), 2)).
'dn--un--<+>_Semigroup_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(V3))(fun (V8) -> case V8 of {'Idris.Prelude.Types.Just', E3} -> (fun (V9) -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E7, E8, E9} -> (fun (V10, V11, V12) -> V10 end(E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E4, E5, E6} -> (fun (V13, V14, V15) -> ((V14('erased'))(V8)) end(E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E3)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> V4 end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--<*>_Applicative_(MaybeT $m)'(V0, V1, V2, V3, V4, V5) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V6, V7, V8) -> ((((V8('erased'))('erased'))(case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V9, V10, V11) -> ((((V11('erased'))('erased'))(case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E6, E7, E8} -> (fun (V12, V13, V14) -> ((V13('erased'))(fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--<*>_Applicative_Maybe'('erased', 'erased', V15, V16)) end end)) end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V4)) end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V5)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--/=_Eq_((MaybeT $m) $a)'(V0, V1, V2, V3, V4) -> ('Idris.Idris2.Prelude.Basics':'un--not'(('dn--un--==_Eq_((MaybeT $m) $a)'('erased', 'erased', V2, V3, V4)))).
'un--toMaybeT'(V0, V1, V2, V3, V4) -> ((((V2('erased'))('erased'))(fun (V5) -> ('Idris.Idris2.Data.Maybe':'un--toMaybe'('erased', V3, fun () -> V5 end)) end))(V4)).
'un--runMaybeT'(V0, V1, V2) -> V2.
'un--nothing'(V0, V1, V2) -> case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V3, V4, V5) -> ((V4('erased'))({'Idris.Prelude.Types.Nothing'})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--maybeT'(V0, V1, V2, V3, V4, V5, V6) -> case V3 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V7, V8, V9) -> ((((V8('erased'))('erased'))(V6))(fun (V10) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V4 end, fun () -> V5 end, V10)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--mapMaybeT'(V0, V1, V2, V3, V4, V5) -> (V4(V5)).
'un--just'(V0, V1, V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E0, E1, E2} -> (fun (V4, V5, V6) -> ((V5('erased'))({'Idris.Prelude.Types.Just', V3})) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--isNothingT'(V0, V1, V2, V3) -> ((((V2('erased'))('erased'))(fun (V4) -> ('Idris.Idris2.Data.Maybe':'un--isNothing'('erased', V4)) end))(V3)).
'un--isJustT'(V0, V1, V2, V3) -> ((((V2('erased'))('erased'))(fun (V4) -> ('Idris.Idris2.Data.Maybe':'un--isJust'('erased', V4)) end))(V3)).
'un--fromMaybeT'(V0, V1, V2, V3, V4) -> case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E0, E1, E2} -> (fun (V5, V6, V7) -> ((((V6('erased'))('erased'))(V4))(fun (V8) -> ('Idris.Idris2.Prelude.Types':'un--maybe'('erased', 'erased', fun () -> V3 end, fun () -> case case V2 of {'Idris.Prelude.Interfaces.dn--un--__mkMonad', E6, E7, E8} -> (fun (V9, V10, V11) -> V9 end(E6, E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', E3, E4, E5} -> (fun (V12, V13, V14) -> fun (V15) -> ((V13('erased'))(V15)) end end(E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V8)) end)) end(E0, E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
