-module('Idris.Idris2.System.Directory').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'un--returnError'/1,
  'un--removeDir'/2,
  'un--prim__removeDir'/2,
  'un--prim__openDir'/2,
  'un--prim__fileErrno'/1,
  'un--prim__dirEntry'/2,
  'un--prim__currentDir'/1,
  'un--prim__createDir'/2,
  'un--prim__closeDir'/2,
  'un--prim__changeDir'/2,
  'un--openDir'/2,
  'un--ok'/2,
  'un--dirEntry'/2,
  'un--currentDir'/1,
  'un--createDir'/2,
  'un--closeDir'/2,
  'un--changeDir'/2,
  'un--DirPtr'/0
]).
'un--returnError'(V0) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V55, V56) -> ((V56('erased'))(fun (V57) -> ('un--prim__fileErrno'(V57)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V6) -> case V6 of 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V7, V8) -> case V7 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V12, V13, V14) -> ((V13('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.FileReadError'}})) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E23, E24} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E25, E26, E27} -> (fun (V17, V18, V19) -> case V17 of {'Idris.Prelude.Interfaces.MkApplicative', E28, E29, E30} -> (fun (V20, V21, V22) -> ((V21('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.FileWriteError'}})) end(E28, E29, E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 2 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E31, E32} -> (fun (V23, V24) -> case V23 of {'Idris.Prelude.Interfaces.MkMonad', E33, E34, E35} -> (fun (V25, V26, V27) -> case V25 of {'Idris.Prelude.Interfaces.MkApplicative', E36, E37, E38} -> (fun (V28, V29, V30) -> ((V29('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.FileNotFound'}})) end(E36, E37, E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 3 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E39, E40} -> (fun (V31, V32) -> case V31 of {'Idris.Prelude.Interfaces.MkMonad', E41, E42, E43} -> (fun (V33, V34, V35) -> case V33 of {'Idris.Prelude.Interfaces.MkApplicative', E44, E45, E46} -> (fun (V36, V37, V38) -> ((V37('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.PermissionDenied'}})) end(E44, E45, E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E41, E42, E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E39, E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 4 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E47, E48} -> (fun (V39, V40) -> case V39 of {'Idris.Prelude.Interfaces.MkMonad', E49, E50, E51} -> (fun (V41, V42, V43) -> case V41 of {'Idris.Prelude.Interfaces.MkApplicative', E52, E53, E54} -> (fun (V44, V45, V46) -> ((V45('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.FileExists'}})) end(E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E49, E50, E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E47, E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V47, V48) -> case V47 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V49, V50, V51) -> case V49 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V52, V53, V54) -> ((V53('erased'))({'Idris.Prelude.Types.Left', {'Idris.System.File.GenericFileError', ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V6, 5))}})) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--removeDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> ('un--prim__removeDir'(V1, V4)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--prim__removeDir'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.Directory.prim__removeDir")).
'un--prim__openDir'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.Directory.prim__openDir")).
'un--prim__fileErrno'(V0) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.Directory.prim__fileErrno")).
'un--prim__dirEntry'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.Directory.prim__dirEntry")).
'un--prim__currentDir'(V0) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.Directory.prim__currentDir")).
'un--prim__createDir'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.Directory.prim__createDir")).
'un--prim__closeDir'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.Directory.prim__closeDir")).
'un--prim__changeDir'(V0, V1) -> ('erlang':'throw'("Error: Unsupported %foreign primitive System.Directory.prim__changeDir")).
'un--openDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__openDir'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(('Idris.Idris2.PrimIO':'un--prim__nullAnyPtr'(V7)), 0)) of 1 -> ('un--returnError'(V0)); 0 -> ('un--ok'(V0, V7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--ok'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> case V4 of {'Idris.Prelude.Interfaces.MkApplicative', E5, E6, E7} -> (fun (V7, V8, V9) -> ((V8('erased'))({'Idris.Prelude.Types.Right', V1})) end(E5, E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--dirEntry'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__dirEntry'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(('Idris.Idris2.PrimIO':'un--prim__nullAnyPtr'(('Idris.Idris2.PrimIO':'un--prim__forgetPtr'(V7)))), 0)) of 1 -> ('un--returnError'(V0)); 0 -> ('un--ok'(V0, ('Idris.Idris2.Prelude.IO':'un--prim__getString'(V7)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--currentDir'(V0) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V1, V2) -> case V1 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V3, V4, V5) -> ((((V4('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V23, V24) -> ((V24('erased'))(fun (V25) -> ('un--prim__currentDir'(V25)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V6) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_Int'(('Idris.Idris2.PrimIO':'un--prim__nullAnyPtr'(('Idris.Idris2.PrimIO':'un--prim__forgetPtr'(V6)))), 0)) of 1 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V7, V8) -> case V7 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V9, V10, V11) -> case V9 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V12, V13, V14) -> ((V13('erased'))({'Idris.Prelude.Types.Nothing'})) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; 0 -> case V0 of {'Idris.Prelude.IO.MkHasIO', E15, E16} -> (fun (V15, V16) -> case V15 of {'Idris.Prelude.Interfaces.MkMonad', E17, E18, E19} -> (fun (V17, V18, V19) -> case V17 of {'Idris.Prelude.Interfaces.MkApplicative', E20, E21, E22} -> (fun (V20, V21, V22) -> ((V21('erased'))({'Idris.Prelude.Types.Just', ('Idris.Idris2.Prelude.IO':'un--prim__getString'(V6))})) end(E20, E21, E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E17, E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E15, E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--createDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V8, V9) -> ((V9('erased'))(fun (V10) -> ('un--prim__createDir'(V1, V10)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7, 0)) of 1 -> ('un--ok'(V0, 0)); 0 -> ('un--returnError'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--closeDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> ((V3('erased'))(fun (V4) -> ('un--prim__closeDir'(V1, V4)) end)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--changeDir'(V0, V1) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E0, E1} -> (fun (V2, V3) -> case V2 of {'Idris.Prelude.Interfaces.MkMonad', E2, E3, E4} -> (fun (V4, V5, V6) -> ((((V5('erased'))('erased'))(case V0 of {'Idris.Prelude.IO.MkHasIO', E5, E6} -> (fun (V16, V17) -> ((V17('erased'))(fun (V18) -> ('un--prim__changeDir'(V1, V18)) end)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(fun (V7) -> case V0 of {'Idris.Prelude.IO.MkHasIO', E7, E8} -> (fun (V8, V9) -> case V8 of {'Idris.Prelude.Interfaces.MkMonad', E9, E10, E11} -> (fun (V10, V11, V12) -> case V10 of {'Idris.Prelude.Interfaces.MkApplicative', E12, E13, E14} -> (fun (V13, V14, V15) -> ((V14('erased'))(('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Int'(V7, 0)))) end(E12, E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9, E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7, E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end)) end(E2, E3, E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--DirPtr'() -> {'Idris.PrimIO.AnyPtr'}.
