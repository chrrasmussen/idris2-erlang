-module('Idris.Idris2.Compiler.RefC.RefC').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--createCFunctions-6780'/12,
  'nested--9681-4682--in--un--varBindLines'/17,
  'nested--7515-2415--in--un--showCString'/3,
  'nested--7515-2414--in--un--showCChar'/2,
  'nested--9363-4193--in--un--pushArgToArglist'/10,
  'nested--9671-4544--in--un--getNameTag'/18,
  'dn--un--show_Show_ExtPrim'/1,
  'dn--un--showPrec_Show_ExtPrim'/2,
  'dn--un--__Impl_Show_ExtPrim'/0,
  'un--varNamesFromList'/2,
  'un--varName'/1,
  'un--toPrim'/1,
  'un--showcCleanStringChar'/2,
  'un--showcCleanString'/2,
  'un--showTag'/1,
  'un--registerVariableForAutomaticFreeing'/3,
  'un--plainOp'/2,
  'un--packCFType'/2,
  'un--newTemporaryVariableLevel'/2,
  'un--maxLineLengthForComment'/0,
  'un--makeNonIntSwitchStatementConst'/8,
  'un--makeArglist'/7,
  'un--lJust'/3,
  'un--integer_switch'/1,
  'un--indentation'/2,
  'un--increaseIndentation'/2,
  'un--header'/5,
  'un--getNextCounter'/2,
  'un--getNewVarThatWillNotBeFreedAtEndOfBlock'/2,
  'un--getArgsNrList'/2,
  'un--generateCSourceFile'/4,
  'un--functionDefSignatureArglist'/3,
  'un--functionDefSignature'/3,
  'un--freeTmpVars'/4,
  'un--footer'/4,
  'un--fillConstructorArgs'/6,
  'un--extractValue'/2,
  'un--extractConstant'/1,
  'un--executeExpr'/4,
  'un--escapeChar'/1,
  'un--emitFDef'/4,
  'un--emit'/4,
  'un--discardLastArgument'/1,
  'un--decreaseIndentation'/2,
  'un--createFFIArgList'/1,
  'un--createCFunctions'/9,
  'un--copyConstructors'/10,
  'un--constDefaultBlock'/7,
  'un--constBlockSwitch'/7,
  'un--const2Integer'/2,
  'un--conBlocks'/9,
  'un--compileLibrary'/6,
  'un--compileExpr'/6,
  'un--codegenRefC'/0,
  'un--cTypeOfCFType'/1,
  'un--cStringQuoted'/1,
  'un--cStatementsFromANF'/5,
  'un--cOp'/2,
  'un--cName'/1,
  'un--cConstant'/1,
  'un--cCleanString'/1,
  'un--cArgsVectANF'/2,
  'un--addHeader'/3,
  'un--addCommaToList'/1
]).
'case--createCFunctions-6780'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V13, V14) -> case V14 of [E3 | E4] -> (fun (V15, V16) -> fun (V17) -> begin (V22 = case V16 of [E5 | E6] -> (fun (V18, V19) -> case V19 of [E7 | E8] -> (fun (V20, V21) -> case V21 of [] -> ('un--addHeader'(V4, V20, V17)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E7, E8)); _ -> {'Idris.Prelude.Types.Right', 0} end end(E5, E6)); _ -> {'Idris.Prelude.Types.Right', 0} end), case V22 of {'Idris.Prelude.Types.Left', E9} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V24) -> begin (V26 = begin (V25 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V25} end), case V26 of {'Idris.Prelude.Types.Left', E11} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V28) -> begin (V29 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Data.List':'un--replicate'(('Idris.Idris2.Prelude.Types.List':'un--length'(V1)), <<"Value *"/utf8>>)))), <<");"/utf8>>))))))))), begin (V30 = ('un--functionDefSignatureArglist'(V10, V3, V17))), case V30 of {'Idris.Prelude.Types.Left', E13} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'put'(V8, [('Idris.Idris2.Prelude.Types.String':'un--++'(V29, <<"\x{a}"/utf8>>)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(V32, <<";\x{a}"/utf8>>)) | V28]]))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E15} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V36) -> begin (V37 = (('un--createFFIArgList'(V1))(V17))), case V37 of {'Idris.Prelude.Types.Left', E17} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V39) -> begin (V40 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, V32))(V17))), case V40 of {'Idris.Prelude.Types.Left', E19} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V42) -> begin (V43 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V17))), case V43 of {'Idris.Prelude.Types.Left', E21} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V45) -> begin (V46 = ('un--increaseIndentation'(V5, V17))), case V46 of {'Idris.Prelude.Types.Left', E23} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V48) -> begin (V49 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return "/utf8>>, ('un--cName'(V3))))))(V17))), case V49 of {'Idris.Prelude.Types.Left', E25} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V51) -> begin (V52 = ('un--increaseIndentation'(V5, V17))), case V52 of {'Idris.Prelude.Types.Left', E27} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V54) -> begin (V55 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V17))), case V55 of {'Idris.Prelude.Types.Left', E29} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V57) -> begin (V58 = ('un--increaseIndentation'(V5, V17))), case V58 of {'Idris.Prelude.Types.Left', E31} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V60) -> begin (V62 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V61) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"arglist->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V61)), <<"]"/utf8>>)))) end, ('un--getArgsNrList'(V1, 0))))))), begin (V64 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V63) -> ('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, V63)) end, V62, V17))), case V64 of {'Idris.Prelude.Types.Left', E33} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V66) -> begin (V67 = ('un--decreaseIndentation'(V5, V17))), case V67 of {'Idris.Prelude.Types.Left', E35} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V69) -> begin (V70 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<");"/utf8>>))(V17))), case V70 of {'Idris.Prelude.Types.Left', E37} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V72) -> begin (V73 = ('un--decreaseIndentation'(V5, V17))), case V73 of {'Idris.Prelude.Types.Left', E39} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V75) -> begin (V76 = ('un--decreaseIndentation'(V5, V17))), case V76 of {'Idris.Prelude.Types.Left', E41} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V78) -> begin (V79 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V17))), case V79 of {'Idris.Prelude.Types.Left', E43} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V81) -> begin (V82 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V17))), case V82 of {'Idris.Prelude.Types.Left', E45} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V84) -> begin (V85 = (('un--emitFDef'(V6, V5, V3, V39))(V17))), case V85 of {'Idris.Prelude.Types.Left', E47} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V87) -> begin (V88 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V17))), case V88 of {'Idris.Prelude.Types.Left', E49} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V90) -> begin (V91 = ('un--increaseIndentation'(V5, V17))), case V91 of {'Idris.Prelude.Types.Left', E51} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V93) -> begin (V94 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" // ffi call to "/utf8>>, V15))))(V17))), case V94 of {'Idris.Prelude.Types.Left', E53} -> (fun (V95) -> {'Idris.Prelude.Types.Left', V95} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V96) -> begin (V122 = case V0 of {'Idris.Core.CompileExpr.CFIORes', E61} -> (fun (V97) -> case V97 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> begin (V103 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V98) -> case V98 of {'Idris.Builtin.MkPair', E68, E69} -> (fun (V99, V100) -> case V100 of {'Idris.Builtin.MkPair', E70, E71} -> (fun (V101, V102) -> ('un--extractValue'(V102, V101)) end(E70, E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E68, E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'(V39)))))), <<");"/utf8>>))))))))(V17))), case V103 of {'Idris.Prelude.Types.Left', E72} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V105) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"return NULL;"/utf8>>))(V17)) end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V111 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cTypeOfCFType'(V97)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" retVal = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V106) -> case V106 of {'Idris.Builtin.MkPair', E62, E63} -> (fun (V107, V108) -> case V108 of {'Idris.Builtin.MkPair', E64, E65} -> (fun (V109, V110) -> ('un--extractValue'(V110, V109)) end(E64, E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E62, E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'(V39)))))), <<");"/utf8>>))))))))))))(V17))), case V111 of {'Idris.Prelude.Types.Left', E66} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V113) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return (Value*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--packCFType'(V97, <<"retVal"/utf8>>)), <<";"/utf8>>))))))(V17)) end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E61)); _ -> begin (V119 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cTypeOfCFType'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" retVal = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V114) -> case V114 of {'Idris.Builtin.MkPair', E55, E56} -> (fun (V115, V116) -> case V116 of {'Idris.Builtin.MkPair', E57, E58} -> (fun (V117, V118) -> ('un--extractValue'(V118, V117)) end(E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E55, E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V39)))), <<");"/utf8>>))))))))))))(V17))), case V119 of {'Idris.Prelude.Types.Left', E59} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V121) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return (Value*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--packCFType'(V0, <<"retVal"/utf8>>)), <<";"/utf8>>))))))(V17)) end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end), case V122 of {'Idris.Prelude.Types.Left', E74} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V124) -> begin (V125 = ('un--decreaseIndentation'(V5, V17))), case V125 of {'Idris.Prelude.Types.Left', E76} -> (fun (V126) -> {'Idris.Prelude.Types.Left', V126} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V127) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V17)) end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E3, E4)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: FFI not found for "/utf8>>, ('un--cName'(V3)))))) end end(E1, E2)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: FFI not found for "/utf8>>, ('un--cName'(V3)))))) end end(E0)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: FFI not found for "/utf8>>, ('un--cName'(V3)))))) end.
'nested--9681-4682--in--un--varBindLines'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V14 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V17, V18) -> begin (V19 = (('un--emit'(V10, V9, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V17)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = ((Value_Constructor*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V15)), <<"];"/utf8>>))))))))))))))(V16))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V22 = ('nested--9681-4682--in--un--varBindLines'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V18, (1 + V15), V16))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Right', 0} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7515-2415--in--un--showCString'(V0, V1, V2) -> case V1 of [] -> V2; [E0 | E1] -> (fun (V3, V4) -> case V3 of $\x{22} -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}\x{22}"/utf8>>, ('nested--7515-2415--in--un--showCString'(V0, V4, V2)))); _ -> (('nested--7515-2414--in--un--showCChar'(V0, V3))(('nested--7515-2415--in--un--showCString'(V0, V4, V2)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--7515-2414--in--un--showCChar'(V0, V1) -> case V1 of $\x{5c} -> fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}\x{5c}"/utf8>>, V2)) end; _ -> fun (V3) -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(32)))) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}x"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + 0)), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))))), <<"\x{22}\x{22}"/utf8>>)), V3)); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(127)))) of 1 -> ('Idris.Idris2.Prelude.Types':'un--strCons'(V1, V3)); 0 -> case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(65536)))) of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}u"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + (1 + (1 + 0)))), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))))), <<"\x{22}\x{22}"/utf8>>)), V3)); 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}U"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))))), <<"\x{22}\x{22}"/utf8>>)), V3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'nested--9363-4193--in--un--pushArgToArglist'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V7 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V10, V11) -> begin (V12 = (('un--emit'(V3, V2, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V10)), <<");"/utf8>>))))))))))))))(V9))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> ('nested--9363-4193--in--un--pushArgToArglist'(V0, V1, V2, V3, V4, V5, V6, V11, (1 + V8), V9)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--9671-4544--in--un--getNameTag'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V15 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<"-1"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V16)), <<"\x{22}"/utf8>>))))}} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V18)), <<"NULL"/utf8>>}} end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--show_Show_ExtPrim'(V0) -> case V0 of {'Idris.Compiler.RefC.RefC.NewIORef'} -> (fun () -> <<"newIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ReadIORef'} -> (fun () -> <<"readIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.WriteIORef'} -> (fun () -> <<"writeIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.NewArray'} -> (fun () -> <<"newArray"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ArrayGet'} -> (fun () -> <<"arrayGet"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ArraySet'} -> (fun () -> <<"arraySet"/utf8>> end()); {'Idris.Compiler.RefC.RefC.GetField'} -> (fun () -> <<"getField"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SetField'} -> (fun () -> <<"setField"/utf8>> end()); {'Idris.Compiler.RefC.RefC.VoidElim'} -> (fun () -> <<"voidElim"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SysOS'} -> (fun () -> <<"sysOS"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SysCodegen'} -> (fun () -> <<"sysCodegen"/utf8>> end()); {'Idris.Compiler.RefC.RefC.OnCollect'} -> (fun () -> <<"onCollect"/utf8>> end()); {'Idris.Compiler.RefC.RefC.OnCollectAny'} -> (fun () -> <<"onCollectAny"/utf8>> end()); {'Idris.Compiler.RefC.RefC.Unknown', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_ExtPrim'(V0, V1) -> ('dn--un--show_Show_ExtPrim'(V1)).
'dn--un--__Impl_Show_ExtPrim'() -> {'Idris.Prelude.Show.MkShow', fun (V0) -> ('dn--un--show_Show_ExtPrim'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ExtPrim'(V1, V2)) end end}.
'un--varNamesFromList'(V0, V1) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V2)))) end, ('un--getArgsNrList'(V0, V1)))).
'un--varName'(V0) -> case V0 of {'Idris.Compiler.ANF.ALocal', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))) end(E0)); {'Idris.Compiler.ANF.ANull'} -> (fun () -> <<"NULL"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPrim'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Core.Core':'un--cond'([{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__newIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.NewIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__readIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ReadIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__writeIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.WriteIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__newArray"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.NewArray'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__arrayGet"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ArrayGet'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__arraySet"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ArraySet'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__getField"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.GetField'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__setField"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SetField'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"void"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.VoidElim'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__void"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.VoidElim'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__os"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SysOS'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__codegen"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SysCodegen'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__onCollect"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.OnCollect'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__onCollectAny"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.OnCollectAny'} end} | []]]]]]]]]]]]]]], {'Idris.Compiler.RefC.RefC.Unknown', V0})) end(E0, E1)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unknown primitive: "/utf8>>, ('un--cName'(V0)))))) end.
'un--showcCleanStringChar'(V0, V1) -> case V0 of $+ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_plus"/utf8>>, V1)); $- -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__"/utf8>>, V1)); $* -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_star"/utf8>>, V1)); $/ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_slash"/utf8>>, V1)); $\x{5c} -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_backslash"/utf8>>, V1)); $< -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_lt"/utf8>>, V1)); $> -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_gt"/utf8>>, V1)); $= -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_eq"/utf8>>, V1)); $& -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_and"/utf8>>, V1)); $| -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_or"/utf8>>, V1)); $\x{27} -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_tick"/utf8>>, V1)); $\x{22} -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_quotation"/utf8>>, V1)); $( -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_parenOpen"/utf8>>, V1)); $) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_parenClose"/utf8>>, V1)); ${ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_braceOpen"/utf8>>, V1)); $} -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_braceClose"/utf8>>, V1)); $  -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, V1)); $: -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_colon"/utf8>>, V1)); $. -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_dot"/utf8>>, V1)); $$ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_dollar"/utf8>>, V1)); $, -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_comma"/utf8>>, V1)); $# -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_number"/utf8>>, V1)); $% -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_percent"/utf8>>, V1)); $~ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_tilde"/utf8>>, V1)); _ -> case case ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V0, ('Idris.Idris2.Prelude.Types':'un--chr'(32)))) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V0, ('Idris.Idris2.Prelude.Types':'un--chr'(126)))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"u"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + (1 + (1 + 0)))), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V0)))))))), V1)); 0 -> ('Idris.Idris2.Prelude.Types':'un--strCons'(V0, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--showcCleanString'(V0, V1) -> case V0 of [] -> V1; [E0 | E1] -> (fun (V2, V3) -> ('un--showcCleanStringChar'(V2, ('un--showcCleanString'(V3, V1)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showTag'(V0) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"-1"/utf8>> end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--registerVariableForAutomaticFreeing'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V9 = ('erlang':'put'(V0, case V6 of [] -> [[V1 | []] | []]; [E2 | E3] -> (fun (V7, V8) -> [[V1 | V7] | V8] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V9} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--plainOp'(V0, V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V1)), <<")"/utf8>>)))))).
'un--packCFType'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> <<"NULL"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFInt8'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt8("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFInt16'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt16("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFInt32'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFInt64'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeBits64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeBits32("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeBits16("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeBits8("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeString("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeChar("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makePointer("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makePointer("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeBuffer("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeWorld("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeFunction("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V4) -> ('un--packCFType'(V4, V1)) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeStruct("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V7, V8) -> V1 end(E5, E6)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unknonw FFI type in C backend: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V0)))))) end.
'un--newTemporaryVariableLevel'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('erlang':'put'(V0, [[] | V5]))), {'Idris.Prelude.Types.Right', V6} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--maxLineLengthForComment'() -> (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
'un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, V7}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V11, V12) -> fun (V13) -> case V5 of 0 -> case V11 of {'Idris.Core.TT.Str', E6} -> (fun (V14) -> begin (V15 = ('un--getNextCounter'(V0, V13))), case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V17))))), begin (V19 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"char **"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = (char**)malloc(sizeof(char*) * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V10)))))), <<");"/utf8>>))))))))))(V13))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, [{'Idris.Compiler.ANF.MkAConstAlt', V11, V12} | V10], 1, V18, <<"multiStringCompare"/utf8>>))(V13)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Core.TT.Db', E11} -> (fun (V22) -> begin (V23 = ('un--getNextCounter'(V0, V13))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> begin (V26 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V25))))), begin (V27 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"double *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V26, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = (double*)malloc(sizeof(double) * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'(V10)))))), <<");"/utf8>>))))))))))(V13))), case V27 of {'Idris.Prelude.Types.Left', E14} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V29) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, [{'Idris.Compiler.ANF.MkAConstAlt', V11, V12} | V10], 1, V26, <<"multiDoubleCompare"/utf8>>))(V13)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>, <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>}} end; _ -> begin (V30 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V5, 1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--extractConstant'(V11)), <<";"/utf8>>))))))))))))(V13))), case V30 of {'Idris.Prelude.Types.Left', E4} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V32) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V10, ((V5 + 1) rem 9223372036854775808), V6, V7))(V13)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeArglist'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--getNextCounter'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"arglist_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V9))))), begin (V11 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value_Arglist *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = newArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<","/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V5)), V4)))), <<");"/utf8>>))))))))))))))(V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = ('nested--9363-4193--in--un--pushArgToArglist'(V5, V4, V3, V2, V1, V0, V10, V5, 0, V6))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Right', V10} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lJust'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Prelude.Types.String':'un--length'(V0))), case ('Idris.Idris2.Data.Nat':'un--isLTE'(V3, V1)) of {'Idris.Prelude.Types.Yes', E0} -> (fun (V4) -> begin (V5 = ('Idris.Idris2.Prelude.Types':'un--minus'(V1, V3))), begin (V6 = ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(V5, V2))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, V6)) end end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V7) -> V0 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--integer_switch'(V0) -> case V0 of [] -> 1; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V3, V4) -> case V3 of {'Idris.Core.TT.I', E4} -> (fun (V5) -> 1 end(E4)); {'Idris.Core.TT.I8', E5} -> (fun (V6) -> 1 end(E5)); {'Idris.Core.TT.I16', E6} -> (fun (V7) -> 1 end(E6)); {'Idris.Core.TT.I32', E7} -> (fun (V8) -> 1 end(E7)); {'Idris.Core.TT.I64', E8} -> (fun (V9) -> 1 end(E8)); {'Idris.Core.TT.BI', E9} -> (fun (V10) -> 1 end(E9)); {'Idris.Core.TT.Ch', E10} -> (fun (V11) -> 1 end(E10)); _ -> 0 end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--indentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--fastPack'(('Idris.Idris2.Data.List':'un--replicate'(('Idris.Idris2.Prelude.Types':'dn--un--*_Num_Nat'((1 + (1 + (1 + (1 + 0)))), V5)), $ ))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--increaseIndentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('erlang':'put'(V0, (1 + V5)))), {'Idris.Prelude.Types.Right', V6} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--header'(V0, V1, V2, V3, V4) -> begin (V5 = [<<"#include <runtime.h>"/utf8>> | [<<"/* automatically generated using the Idris2 C Backend */"/utf8>> | []]]), fun (V6) -> begin (V8 = begin (V7 = ('erlang':'get'(V4))), {'Idris.Prelude.Types.Right', V7} end), case V8 of {'Idris.Prelude.Types.Left', E0} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V10) -> begin (V11 = ('Idris.Idris2.Libraries.Data.SortedSet':'un--toList'(V10))), begin (V13 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"#include <"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, <<">\x{a}"/utf8>>)))) end, V11))), begin (V15 = begin (V14 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V14} end), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V23 = ('erlang':'put'(V2, fun (V22) -> ('Idris.Idris2.Libraries.Data.DList':'un--appendL'(('Idris.Idris2.Prelude.Types.List':'un--++'(V5, ('Idris.Idris2.Prelude.Types.List':'un--++'(V13, ('Idris.Idris2.Prelude.Types.List':'un--++'([<<"\x{a}// function definitions"/utf8>> | []], V17)))))), V21, V22)) end))), {'Idris.Prelude.Types.Right', V23} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getNextCounter'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'put'(V0, (1 + V5)))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V5} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V1) -> begin (V2 = ('un--getNextCounter'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"tmp_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getArgsNrList'(V0, V1) -> case V0 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> [V1 | ('un--getArgsNrList'(V3, (1 + V1)))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--generateCSourceFile'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.RefC.RefC.ArgCounter'}, 0, V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.RefC.RefC.FunctionDefinitions'}, [], V3))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.RefC.RefC.TemporaryVariableTracker'}, [], V3))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V14 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.RefC.RefC.OutfileText'}, fun (V13) -> ('Idris.Idris2.Libraries.Data.DList':'un--Nil'(V13)) end, V3))), case V14 of {'Idris.Prelude.Types.Left', E6} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V16) -> begin (V35 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.RefC.RefC.HeaderFiles'}, ('Idris.Idris2.Libraries.Data.SortedSet':'un--empty'({'Idris.Prelude.EqOrd.MkOrd', {'Idris.Prelude.EqOrd.MkEq', fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V17, V18)) end end, fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V19, V20)) end end}, fun (V21) -> fun (V22) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--compare_Ord_String'(V21, V22)) end end, fun (V23) -> fun (V24) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_String'(V23, V24)) end end, fun (V25) -> fun (V26) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_String'(V25, V26)) end end, fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--<=_Ord_String'(V27, V28)) end end, fun (V29) -> fun (V30) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->=_Ord_String'(V29, V30)) end end, fun (V31) -> fun (V32) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--max_Ord_String'(V31, V32)) end end, fun (V33) -> fun (V34) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--min_Ord_String'(V33, V34)) end end})), V3))), case V35 of {'Idris.Prelude.Types.Left', E8} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V37) -> begin (V38 = ('Idris.Idris2.Core.Core':'un--newRef'({'Idris.Compiler.RefC.RefC.IndentLevel'}, 0, V3))), case V38 of {'Idris.Prelude.Types.Left', E10} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V40) -> begin (V44 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V41) -> ('Idris.Idris2.Prelude.Basics':'un--uncurry'(fun (V42) -> fun (V43) -> ('un--createCFunctions'(V0, V6, V9, V12, V16, V40, V37, V42, V43)) end end, V41)) end, V1, V3))), case V44 of {'Idris.Prelude.Types.Left', E12} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V46) -> begin (V47 = (('un--header'(V0, V9, V16, V40, V37))(V3))), case V47 of {'Idris.Prelude.Types.Left', E14} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V49) -> begin (V50 = ('un--footer'(V40, V16, V37, V3))), case V50 of {'Idris.Prelude.Types.Left', E16} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V52) -> begin (V54 = begin (V53 = ('erlang':'get'(V16))), {'Idris.Prelude.Types.Right', V53} end), case V54 of {'Idris.Prelude.Types.Left', E18} -> (fun (V55) -> {'Idris.Prelude.Types.Left', V55} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V56) -> begin (V58 = ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V57) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V57, <<"\x{a}"/utf8>>)) end, ('Idris.Idris2.Libraries.Data.DList':'un--reify'(V56))))))), begin (V91 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V59) -> case V59 of {'Idris.Prelude.Types.Left', E20} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V61) -> {'Idris.Prelude.Types.Right', 0} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V62) -> begin (V90 = (('Idris.Idris2.Erlang.System.File':'un--writeFile'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> fun (V70) -> V69 end end end, fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> begin (V76 = (V73(V75))), begin (V77 = (V74(V75))), (V76(V77)) end end end end end end end}, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> begin (V83 = (V80(V82))), ((V81(V83))(V82)) end end end end end end, fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V85(V86))), (V87(V86)) end end end end}, fun (V88) -> fun (V89) -> V89 end end}, V2, V58))(V62))), {'Idris.Prelude.Types.Right', V90} end end, V3))), case V91 of {'Idris.Prelude.Types.Left', E22} -> (fun (V92) -> {'Idris.Prelude.Types.Left', V92} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V93) -> ('Idris.Idris2.Core.Context.Log':'un--log'(V0, <<"compiler.refc"/utf8>>, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))), fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated C file "/utf8>>, V2)) end, V3)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--functionDefSignatureArglist'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1, V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V5)), <<"_arglist(Value_Arglist* arglist)"/utf8>>))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--functionDefSignature'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> begin (V4 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1, V3))), case V4 of {'Idris.Prelude.Types.Left', E2} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V6) -> begin (V7 = ('un--cName'(V6))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{a}Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, <<"(void)"/utf8>>))))} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V9 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)))) end, V2))))), fun (V10) -> begin (V11 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1, V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('un--cName'(V13))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{a}Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}(\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, V9)), <<"\x{a})"/utf8>>))))))))} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--freeTmpVars'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of [E2 | E3] -> (fun (V8, V9) -> begin (V11 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V10) -> ('un--emit'(V1, V2, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"removeReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, <<");"/utf8>>)))))) end, V8, V3))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = ('erlang':'put'(V0, V9))), {'Idris.Prelude.Types.Right', V14} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); [] -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--footer'(V0, V1, V2, V3) -> begin (V4 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V3))), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<" // main function"/utf8>>))(V3))), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> begin (V10 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"int main(int argc, char *argv[])"/utf8>>))(V3))), case V10 of {'Idris.Prelude.Types.Left', E4} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V12) -> begin (V13 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V3))), case V13 of {'Idris.Prelude.Types.Left', E6} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V15) -> begin (V20 = begin (V17 = begin (V16 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V16} end), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> case ('Idris.Idris2.Libraries.Data.SortedSet':'un--contains'(<<"idris_support.h"/utf8>>, V19)) of 1 -> (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   idris2_setArgs(argc, argv);"/utf8>>))(V3)); 0 -> {'Idris.Prelude.Types.Right', 0}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> begin (V23 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   Value *mainExprVal = __mainExpression_0();"/utf8>>))(V3))), case V23 of {'Idris.Prelude.Types.Left', E12} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V25) -> begin (V26 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   trampoline(mainExprVal);"/utf8>>))(V3))), case V26 of {'Idris.Prelude.Types.Left', E14} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V28) -> begin (V29 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   return 0; // bye bye"/utf8>>))(V3))), case V29 of {'Idris.Prelude.Types.Left', E16} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V31) -> (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V3)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fillConstructorArgs'(V0, V1, V2, V3, V4, V5) -> case V3 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V6, V7) -> begin (V8 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] = newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V6)), <<");"/utf8>>))))))))))))(V5))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> ('un--fillConstructorArgs'(V0, V1, V2, V7, (1 + V4), V5)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extractValue'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> <<"void"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int64*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i64"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFInt8'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int8*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i8"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFInt16'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int16*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i16"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFInt32'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int32*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i32"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFInt64'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int64*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i64"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Bits8*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->ui8"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Bits16*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->ui16"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Bits32*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->ui32"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Bits64*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->ui64"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_String*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->str"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Double*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->d"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Char*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->c"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Pointer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->p"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_GCPointer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->p->p"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Buffer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->buffer"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value_World*)"/utf8>>, V1)) end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value_Closure*)"/utf8>>, V1)) end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V4) -> ('un--extractValue'(V4, V1)) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V5, V6) -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Struct access not implemented: "/utf8>>, V1)))) end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)"/utf8>>, V1)) end(E5, E6)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unknonw FFI type in C backend: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V0)))))) end.
'un--extractConstant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2)) end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V3)) end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V4)) end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V5)) end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6)) end(E5)); {'Idris.Core.TT.Db', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V7)) end(E6)); {'Idris.Core.TT.Ch', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V8)) end(E7)); {'Idris.Core.TT.Str', E8} -> (fun (V9) -> ('un--cStringQuoted'(V9)) end(E8)); {'Idris.Core.TT.B8', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V10)) end(E9)); {'Idris.Core.TT.B16', E10} -> (fun (V11) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11)) end(E10)); {'Idris.Core.TT.B32', E11} -> (fun (V12) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)) end(E11)); {'Idris.Core.TT.B64', E12} -> (fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V13)) end(E12)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unable to extract constant: "/utf8>>, ('un--cConstant'(V0)))))) end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V36 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V7) -> begin (V35 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, <<"Execute expression not yet implemented for refc"/utf8>>))(V7))), {'Idris.Prelude.Types.Right', V35} end end, V3))), case V36 of {'Idris.Prelude.Types.Left', E2} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E4} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V41) -> {'Idris.Prelude.Types.Right', 0} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> begin (V70 = (('Idris.Idris2.Erlang.System':'un--system'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> V49 end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), begin (V57 = (V54(V55))), (V56(V57)) end end end end end end end}, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), ((V61(V63))(V62)) end end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V65(V66))), (V67(V66)) end end end end}, fun (V68) -> fun (V69) -> V69 end end}, <<"false"/utf8>>))(V42))), {'Idris.Prelude.Types.Right', V70} end end, V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--escapeChar'(V0) -> case case ('Idris.Idris2.Prelude.Types':'un--isAlphaNum'(V0)) of 1 -> 1; 0 -> ('Idris.Idris2.Prelude.Types':'un--isNL'(V0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end of 1 -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V0)); 0 -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(char)"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Prelude.Types':'un--ord'(V0)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--emitFDef'(V0, V1, V2, V3) -> case V3 of [] -> ('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V2)), <<"(void)"/utf8>>)))))); [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V7, V8) -> case V8 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V9, V10) -> begin (V11 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('un--cName'(V2))))))(V6))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V6))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = ('un--increaseIndentation'(V1, V6))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> begin (V20 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  Value *"/utf8>>, V9))))(V6))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> begin (V28 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V26, V27) -> ('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", Value *"/utf8>>, V26)))) end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V5, V6))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> begin (V31 = ('un--decreaseIndentation'(V1, V6))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, <<")"/utf8>>))(V6)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--emit'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.FC.EmptyFC'} -> (fun () -> fun (V4) -> begin (V5 = ('un--indentation'(V1, V4))), case V5 of {'Idris.Prelude.Types.Left', E6} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E8} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V11) -> begin (V15 = ('erlang':'put'(V0, ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Data.DList':'un--snoc'(V12, V13, V14)) end end end, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, V3)), V11))))), {'Idris.Prelude.Types.Right', V15} end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> begin (V16 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V2))))), fun (V17) -> begin (V18 = ('un--indentation'(V1, V17))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V20, V3))), begin (V23 = begin (V22 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V34 = ('erlang':'put'(V0, case ('Idris.Idris2.Data.Nat':'un--isLTE'(('Idris.Idris2.Prelude.Types.String':'un--length'(V21)), ('un--maxLineLengthForComment'()))) of {'Idris.Prelude.Types.Yes', E4} -> (fun (V26) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V27) -> fun (V28) -> fun (V29) -> ('Idris.Idris2.Libraries.Data.DList':'un--snoc'(V27, V28, V29)) end end end, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--lJust'(V21, ('un--maxLineLengthForComment'()), $ )), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, V16)))), V25)) end(E4)); {'Idris.Prelude.Types.No', E5} -> (fun (V30) -> ('Idris.Idris2.Prelude.Basics':'un--flip'(fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Libraries.Data.DList':'un--appendR'(V31, V32, V33)) end end end, [V21 | [('Idris.Idris2.Prelude.Types.String':'un--++'(('un--lJust'(<<""/utf8>>, ('un--maxLineLengthForComment'()), $ )), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, V16)))) | []]], V25)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V34} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--discardLastArgument'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> ('Idris.Idris2.Data.List':'un--init'(V0)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--decreaseIndentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('erlang':'put'(V0, ('Idris.Idris2.Data.Nat':'un--pred'(V5))))), {'Idris.Prelude.Types.Right', V6} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--createFFIArgList'(V0) -> begin (V2 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V1) -> ('un--cTypeOfCFType'(V1)) end, V0))), begin (V3 = ('un--varNamesFromList'(V0, (1 + 0)))), fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'dn--un--zip3_Zippable_List'(V2, V3, V0))} end end end.
'un--createCFunctions'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Compiler.ANF.MkAFun', E0, E1} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--functionDefSignature'(V0, V7, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('un--functionDefSignatureArglist'(V0, V7, V11))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V23 = begin (V22 = ('erlang':'put'(V2, [('Idris.Idris2.Prelude.Types.String':'un--++'(V14, <<";\x{a}"/utf8>>)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(V17, <<";\x{a}"/utf8>>)) | V21]]))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('un--newTemporaryVariableLevel'(V3, V11))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V29 = ('un--getArgsNrList'(V9, 0))), begin (V30 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V14))(V11))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V33 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V11))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V36 = ('un--increaseIndentation'(V5, V11))), case V36 of {'Idris.Prelude.Types.Left', E16} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V38) -> begin (V39 = (('un--cStatementsFromANF'(V1, V3, V4, V5, V10))(V11))), case V39 of {'Idris.Prelude.Types.Left', E18} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V41) -> begin (V44 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *returnValue = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V41 of {'Idris.Compiler.RefC.RefC.MkRS', E20, E21} -> (fun (V42, V43) -> V43 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))(V11))), case V44 of {'Idris.Prelude.Types.Left', E22} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V46) -> begin (V47 = ('un--freeTmpVars'(V3, V4, V5, V11))), case V47 of {'Idris.Prelude.Types.Left', E24} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V49) -> begin (V50 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"return returnValue;"/utf8>>))(V11))), case V50 of {'Idris.Prelude.Types.Left', E26} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V52) -> begin (V53 = ('un--decreaseIndentation'(V5, V11))), case V53 of {'Idris.Prelude.Types.Left', E28} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V55) -> begin (V56 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V11))), case V56 of {'Idris.Prelude.Types.Left', E30} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V58) -> begin (V59 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V11))), case V59 of {'Idris.Prelude.Types.Left', E32} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V61) -> begin (V62 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V17))(V11))), case V62 of {'Idris.Prelude.Types.Left', E34} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V64) -> begin (V65 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V11))), case V65 of {'Idris.Prelude.Types.Left', E36} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V67) -> begin (V68 = ('un--increaseIndentation'(V5, V11))), case V68 of {'Idris.Prelude.Types.Left', E38} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V70) -> begin (V74 = begin (V71 = ('Idris.Idris2.Core.Context':'un--getFullName'(V0, V7, V11))), case V71 of {'Idris.Prelude.Types.Left', E40} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V73) -> (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return "/utf8>>, ('un--cName'(V73))))))(V11)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V74 of {'Idris.Prelude.Types.Left', E42} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V76) -> begin (V77 = ('un--increaseIndentation'(V5, V11))), case V77 of {'Idris.Prelude.Types.Left', E44} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V79) -> begin (V80 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V11))), case V80 of {'Idris.Prelude.Types.Left', E46} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V82) -> begin (V83 = ('un--increaseIndentation'(V5, V11))), case V83 of {'Idris.Prelude.Types.Left', E48} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V85) -> begin (V87 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V86) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"arglist->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V86)), <<"]"/utf8>>)))) end, V29))))), begin (V89 = ('Idris.Idris2.Core.Core':'un--traverse_'(fun (V88) -> ('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V88)) end, V87, V11))), case V89 of {'Idris.Prelude.Types.Left', E50} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V91) -> begin (V92 = ('un--decreaseIndentation'(V5, V11))), case V92 of {'Idris.Prelude.Types.Left', E52} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V94) -> begin (V95 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<");"/utf8>>))(V11))), case V95 of {'Idris.Prelude.Types.Left', E54} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V97) -> begin (V98 = ('un--decreaseIndentation'(V5, V11))), case V98 of {'Idris.Prelude.Types.Left', E56} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V100) -> begin (V101 = ('un--decreaseIndentation'(V5, V11))), case V101 of {'Idris.Prelude.Types.Left', E58} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V103) -> begin (V104 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V11))), case V104 of {'Idris.Prelude.Types.Left', E60} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V106) -> begin (V107 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V11))), case V107 of {'Idris.Prelude.Types.Left', E62} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V109) -> {'Idris.Prelude.Types.Right', 0} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Compiler.ANF.MkACon', E64, E65, E66} -> (fun (V110, V111, V112) -> ('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// Constructor tag "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'({'Idris.Prelude.Show.MkShow', fun (V113) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V114, V115)) end end}, V110)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" arity "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V111)))))))))) end(E64, E65, E66)); {'Idris.Compiler.ANF.MkAForeign', E67, E68, E69} -> (fun (V116, V117, V118) -> ('case--createCFunctions-6780'(V118, V117, V116, V7, V6, V5, V4, V3, V2, V1, V0, ('Idris.Idris2.Compiler.Common':'un--parseCC'([<<"RefC"/utf8>> | [<<"C"/utf8>> | []]], V116)))) end(E67, E68, E69)); {'Idris.Compiler.ANF.MkAError', E70} -> (fun (V119) -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Error with expression: "/utf8>>, ('Idris.Idris2.Compiler.ANF':'dn--un--show_Show_ANF'(V119)))))) end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--copyConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9) -> case V5 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Compiler.ANF.MkAConAlt', E2, E3, E4, E5, E6} -> (fun (V12, V13, V14, V15, V16) -> begin (V17 = ('nested--9671-4544--in--un--getNameTag'(V13, V16, V15, V14, V12, V11, V8, V7, V6, V4, V3, V2, V1, V0, V0, V14, V12, V9))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V20, V21) -> begin (V22 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"].tag = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V20, <<";"/utf8>>))))))))))))(V9))), case V22 of {'Idris.Prelude.Types.Left', E11} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V24) -> begin (V25 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"].name = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V21, <<";"/utf8>>))))))))))))(V9))), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> ('un--copyConstructors'(V0, V1, V2, V3, V4, V11, V6, V7, (1 + V8), V9)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--constDefaultBlock'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', 0} end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> begin (V8 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  default :"/utf8>>))(V6))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> begin (V11 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V6))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> begin (V14 = ('un--increaseIndentation'(V3, V6))), case V14 of {'Idris.Prelude.Types.Left', E5} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V16) -> begin (V17 = ('un--newTemporaryVariableLevel'(V1, V6))), case V17 of {'Idris.Prelude.Types.Left', E7} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V19) -> begin (V20 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V7))(V6))), case V20 of {'Idris.Prelude.Types.Left', E9} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V22) -> begin (V25 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V22 of {'Idris.Compiler.RefC.RefC.MkRS', E11, E12} -> (fun (V23, V24) -> V23 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V6))), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> begin (V28 = ('un--freeTmpVars'(V1, V2, V3, V6))), case V28 of {'Idris.Prelude.Types.Left', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V30) -> begin (V31 = ('un--decreaseIndentation'(V3, V6))), case V31 of {'Idris.Prelude.Types.Left', E17} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V33) -> (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V6)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--constBlockSwitch'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', 0} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V10, V11) -> begin (V12 = ('un--const2Integer'(V10, V6))), fun (V13) -> begin (V14 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V12)), <<" :"/utf8>>))))))(V13))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V13))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = ('un--increaseIndentation'(V3, V13))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('un--newTemporaryVariableLevel'(V1, V13))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V11))(V13))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> begin (V31 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V28 of {'Idris.Compiler.RefC.RefC.MkRS', E14, E15} -> (fun (V29, V30) -> V29 end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V13))), case V31 of {'Idris.Prelude.Types.Left', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V33) -> begin (V34 = ('un--freeTmpVars'(V1, V2, V3, V13))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V37 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"break;"/utf8>>))(V13))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> begin (V40 = ('un--decreaseIndentation'(V3, V13))), case V40 of {'Idris.Prelude.Types.Left', E22} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V42) -> begin (V43 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V13))), case V43 of {'Idris.Prelude.Types.Left', E24} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V45) -> (('un--constBlockSwitch'(V0, V1, V2, V3, V9, V5, (V6 + 1)))(V13)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--const2Integer'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V2)) end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V3) -> V3 end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V4) -> V4 end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V5) -> V5 end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V6) -> V6 end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V7) -> V7 end(E5)); {'Idris.Core.TT.Ch', E6} -> (fun (V8) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Integer'(V8)) end(E6)); {'Idris.Core.TT.B8', E7} -> (fun (V9) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V9)) end(E7)); {'Idris.Core.TT.B16', E8} -> (fun (V10) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V10)) end(E8)); {'Idris.Core.TT.B32', E9} -> (fun (V11) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V11)) end(E9)); {'Idris.Core.TT.B64', E10} -> (fun (V12) -> V12 end(E10)); _ -> V1 end.
'un--conBlocks'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of [] -> {'Idris.Prelude.Types.Right', 0}; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Compiler.ANF.MkAConAlt', E2, E3, E4, E5, E6} -> (fun (V11, V12, V13, V14, V15) -> begin (V16 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7)), <<":"/utf8>>))))))(V8))), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> begin (V19 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V8))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> begin (V22 = ('un--increaseIndentation'(V3, V8))), case V22 of {'Idris.Prelude.Types.Left', E11} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V24) -> begin (V25 = ('un--newTemporaryVariableLevel'(V1, V8))), case V25 of {'Idris.Prelude.Types.Left', E13} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V27) -> begin (V28 = ('nested--9681-4682--in--un--varBindLines'(V12, V15, V14, V13, V11, V10, V7, V6, V4, V3, V2, V1, V0, V4, V14, 0, V8))), case V28 of {'Idris.Prelude.Types.Left', E15} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V30) -> begin (V31 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V15))(V8))), case V31 of {'Idris.Prelude.Types.Left', E17} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V33) -> begin (V36 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V33 of {'Idris.Compiler.RefC.RefC.MkRS', E19, E20} -> (fun (V34, V35) -> V34 end(E19, E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V8))), case V36 of {'Idris.Prelude.Types.Left', E21} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V38) -> begin (V39 = ('un--freeTmpVars'(V1, V2, V3, V8))), case V39 of {'Idris.Prelude.Types.Left', E23} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V41) -> begin (V42 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"break;"/utf8>>))(V8))), case V42 of {'Idris.Prelude.Types.Left', E25} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V44) -> begin (V45 = ('un--decreaseIndentation'(V3, V8))), case V45 of {'Idris.Prelude.Types.Left', E27} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V47) -> begin (V48 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V8))), case V48 of {'Idris.Prelude.Types.Left', E29} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V50) -> ('un--conBlocks'(V0, V1, V2, V3, V4, V10, V6, (1 + V7), V8)) end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3, E4, E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--compileLibrary'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'({'Idris.Prelude.IO.MkHasIO', {'Idris.Prelude.Interfaces.MkMonad', {'Idris.Prelude.Interfaces.MkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"Compiling to library is not supported."/utf8>>))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5) -> case V0 of 2 -> begin (V6 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<".c"/utf8>>))))), begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<".o"/utf8>>))))), begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, V5))), fun (V9) -> begin (V15 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'(fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', 0} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> begin (V14 = ('Idris.Idris2.Core.Directory':'un--mkdirAll'(V3, V13))), {'Idris.Prelude.Types.Right', V14} end end, V9))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V1, 0, 2, V4, V9))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V26 = case V20 of {'Idris.Compiler.Common.MkCompileData', E6, E7, E8, E9, E10} -> (fun (V21, V22, V23, V24, V25) -> V24 end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V27 = ('un--generateCSourceFile'(V1, V26, V6, V9))), case V27 of {'Idris.Prelude.Types.Left', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Compiler.RefC.CC':'un--compileCObjectFile'(V1, 0, V6, V7, V9))), case V30 of {'Idris.Prelude.Types.Left', E13} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V32) -> case V32 of {'Idris.Prelude.Types.Just', E15} -> (fun (V33) -> ('Idris.Idris2.Compiler.RefC.CC':'un--compileCFile'(V1, 0, V7, V8, V9)) end(E15)); {'Idris.Prelude.Types.Nothing'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end; _ -> fun (V34) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--codegenRefC'() -> {'Idris.Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('un--compileExpr'(2, V0, V1, V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('un--executeExpr'(V5, V6, V7, V8)) end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V9, V10, V11, V12, V13, V14)) end end end end end end}.
'un--cTypeOfCFType'(V0) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> <<"void"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> <<"int64_t"/utf8>> end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> <<"uint8_t"/utf8>> end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> <<"uint16_t"/utf8>> end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> <<"uint32_t"/utf8>> end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> <<"uint64_t"/utf8>> end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> <<"char *"/utf8>> end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> <<"double"/utf8>> end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> <<"char"/utf8>> end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> <<"void *"/utf8>> end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> <<"void *"/utf8>> end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> <<"void *"/utf8>> end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> <<"void *"/utf8>> end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V1, V2) -> <<"void *"/utf8>> end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V3) -> <<"void *"/utf8>> end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V4, V5) -> <<"void *"/utf8>> end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V6, V7) -> <<"void *"/utf8>> end(E5, E6)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unknonw FFI type in C backend: "/utf8>>, ('Idris.Idris2.Core.CompileExpr':'dn--un--show_Show_CFType'(V0)))))) end.
'un--cStringQuoted'(V0) -> ('Idris.Idris2.Prelude.Types':'un--strCons'($\x{22}, ('nested--7515-2415--in--un--showCString'(V0, ('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<"\x{22}"/utf8>>)))).
'un--cStatementsFromANF'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Compiler.ANF.AV', E0, E1} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V6)), <<")"/utf8>>))))), fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V7, V7}} end end end(E0, E1)); {'Idris.Compiler.ANF.AAppName', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V15 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// start "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V14) -> ('un--varName'(V14)) end, V12)))), <<")"/utf8>>))))))))))(V13))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = ('un--makeArglist'(V0, V1, V2, V3, 0, V12, V13))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = ('un--getNextCounter'(V0, V13))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fPtr_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V23))))), begin (V25 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *(*"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V24, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")(Value_Arglist*) = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V11)), <<"_arglist;"/utf8>>))))))))))(V13))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"closure_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V23))))), begin (V29 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V28, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = (Value*)makeClosureFromArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V24, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V20, <<");"/utf8>>))))))))))))))(V13))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V33 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// end   "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V32) -> ('un--varName'(V32)) end, V12)))), <<")"/utf8>>))))))))))(V13))), case V33 of {'Idris.Prelude.Types.Left', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"trampoline("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V28, <<")"/utf8>>)))), V28}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); {'Idris.Compiler.ANF.AUnderApp', E18, E19, E20, E21} -> (fun (V36, V37, V38, V39) -> fun (V40) -> begin (V41 = ('un--makeArglist'(V0, V1, V2, V3, V38, V39, V40))), case V41 of {'Idris.Prelude.Types.Left', E22} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V43) -> begin (V44 = ('un--getNextCounter'(V0, V40))), case V44 of {'Idris.Prelude.Types.Left', E24} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"closure_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V46))))), begin (V48 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *(*"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V47, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")(Value_Arglist*) = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V37)), <<"_arglist;"/utf8>>))))))))), begin (V49 = (('un--emit'(V2, V3, V36, V48))(V40))), case V49 of {'Idris.Prelude.Types.Left', E26} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeClosureFromArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V47, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V43, <<")"/utf8>>))))))))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V52, V52}} end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20, E21)); {'Idris.Compiler.ANF.AApp', E28, E29, E30, E31} -> (fun (V53, V54, V55, V56) -> fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"apply_closure("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V55)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V56)), <<")"/utf8>>)))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"tailcall_apply_closure("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V55)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V56)), <<")"/utf8>>))))))))}} end end(E28, E29, E30, E31)); {'Idris.Compiler.ANF.ALet', E32, E33, E34, E35} -> (fun (V58, V59, V60, V61) -> fun (V62) -> begin (V63 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V60))(V62))), case V63 of {'Idris.Prelude.Types.Left', E36} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V65) -> begin (V68 = (('un--emit'(V2, V3, V58, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V59)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V65 of {'Idris.Compiler.RefC.RefC.MkRS', E38, E39} -> (fun (V66, V67) -> V66 end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))))(V62))), case V68 of {'Idris.Prelude.Types.Left', E40} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V70) -> begin (V71 = ('un--registerVariableForAutomaticFreeing'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V59)))), V62))), case V71 of {'Idris.Prelude.Types.Left', E42} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V73) -> begin (V74 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V61))(V62))), case V74 of {'Idris.Prelude.Types.Left', E44} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V76) -> {'Idris.Prelude.Types.Right', V76} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33, E34, E35)); {'Idris.Compiler.ANF.ACon', E46, E47, E48, E49, E50} -> (fun (V77, V78, V79, V80, V81) -> fun (V82) -> begin (V83 = ('un--getNextCounter'(V0, V82))), case V83 of {'Idris.Prelude.Types.Left', E51} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E51)); {'Idris.Prelude.Types.Right', E52} -> (fun (V85) -> begin (V86 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constructor_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V85))))), begin (V87 = (('un--emit'(V2, V3, V77, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value_Constructor* "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V86, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = newConstructor("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V81)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showTag'(V80)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V78)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, <<");"/utf8>>))))))))))))))))))))))(V82))), case V87 of {'Idris.Prelude.Types.Left', E53} -> (fun (V88) -> {'Idris.Prelude.Types.Left', V88} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V89) -> begin (V90 = (('un--emit'(V2, V3, V77, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" // constructor "/utf8>>, ('un--cName'(V78))))))(V82))), case V90 of {'Idris.Prelude.Types.Left', E55} -> (fun (V91) -> {'Idris.Prelude.Types.Left', V91} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V92) -> begin (V93 = ('un--fillConstructorArgs'(V2, V3, V86, V81, 0, V82))), case V93 of {'Idris.Prelude.Types.Left', E57} -> (fun (V94) -> {'Idris.Prelude.Types.Left', V94} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V95) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)"/utf8>>, V86)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)"/utf8>>, V86))}} end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46, E47, E48, E49, E50)); {'Idris.Compiler.ANF.AOp', E59, E60, E61, E62} -> (fun (V96, V97, V98, V99) -> fun (V100) -> begin (V101 = ('un--cArgsVectANF'(V99, V100))), case V101 of {'Idris.Prelude.Types.Left', E63} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E63)); {'Idris.Prelude.Types.Right', E64} -> (fun (V103) -> begin (V104 = ('un--cOp'(V98, V103))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V104, V104}} end end(E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E59, E60, E61, E62)); {'Idris.Compiler.ANF.AExtPrim', E65, E66, E67, E68} -> (fun (V105, V106, V107, V108) -> fun (V109) -> begin (V110 = (('un--emit'(V2, V3, V105, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// call to external primitive "/utf8>>, ('un--cName'(V107))))))(V109))), case V110 of {'Idris.Prelude.Types.Left', E69} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V112) -> begin (V114 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('dn--un--show_Show_ExtPrim'(('un--toPrim'(V107)))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V113) -> ('un--varName'(V113)) end, V108)))), <<")"/utf8>>))))))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V114, V114}} end end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E65, E66, E67, E68)); {'Idris.Compiler.ANF.AConCase', E71, E72, E73, E74} -> (fun (V115, V116, V117, V118) -> fun (V119) -> begin (V120 = ('un--getNextCounter'(V0, V119))), case V120 of {'Idris.Prelude.Types.Left', E75} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E75)); {'Idris.Prelude.Types.Right', E76} -> (fun (V122) -> begin (V123 = ('un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V119))), case V123 of {'Idris.Prelude.Types.Left', E77} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E77)); {'Idris.Prelude.Types.Right', E78} -> (fun (V125) -> begin (V126 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V125, <<" = NULL;"/utf8>>))))), begin (V127 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constructorField_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V122))))), begin (V128 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"AConAlt * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V127, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"= newConstructorField("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V117)))), <<");"/utf8>>))))))))), begin (V129 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"switch(compareConstructors("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V116)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V127, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V117)))), <<")){"/utf8>>))))))))))))), begin (V130 = (('un--emit'(V2, V3, V115, V126))(V119))), case V130 of {'Idris.Prelude.Types.Left', E79} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E79)); {'Idris.Prelude.Types.Right', E80} -> (fun (V132) -> begin (V133 = (('un--emit'(V2, V3, V115, V128))(V119))), case V133 of {'Idris.Prelude.Types.Left', E81} -> (fun (V134) -> {'Idris.Prelude.Types.Left', V134} end(E81)); {'Idris.Prelude.Types.Right', E82} -> (fun (V135) -> begin (V136 = ('un--copyConstructors'(V0, V1, V2, V3, ('un--varName'(V116)), V117, V127, V125, 0, V119))), case V136 of {'Idris.Prelude.Types.Left', E83} -> (fun (V137) -> {'Idris.Prelude.Types.Left', V137} end(E83)); {'Idris.Prelude.Types.Right', E84} -> (fun (V138) -> begin (V139 = (('un--emit'(V2, V3, V115, V129))(V119))), case V139 of {'Idris.Prelude.Types.Left', E85} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E85)); {'Idris.Prelude.Types.Right', E86} -> (fun (V141) -> begin (V142 = ('un--conBlocks'(V0, V1, V2, V3, ('un--varName'(V116)), V117, V125, 0, V119))), case V142 of {'Idris.Prelude.Types.Left', E87} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E87)); {'Idris.Prelude.Types.Right', E88} -> (fun (V144) -> case V118 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V145 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V119))), case V145 of {'Idris.Prelude.Types.Left', E89} -> (fun (V146) -> {'Idris.Prelude.Types.Left', V146} end(E89)); {'Idris.Prelude.Types.Right', E90} -> (fun (V147) -> begin (V148 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V127, <<");"/utf8>>))))))(V119))), case V148 of {'Idris.Prelude.Types.Left', E91} -> (fun (V149) -> {'Idris.Prelude.Types.Left', V149} end(E91)); {'Idris.Prelude.Types.Right', E92} -> (fun (V150) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V125, V125}} end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E90)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E93} -> (fun (V151) -> begin (V152 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  default : {"/utf8>>))(V119))), case V152 of {'Idris.Prelude.Types.Left', E94} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E94)); {'Idris.Prelude.Types.Right', E95} -> (fun (V154) -> begin (V155 = ('un--increaseIndentation'(V3, V119))), case V155 of {'Idris.Prelude.Types.Left', E96} -> (fun (V156) -> {'Idris.Prelude.Types.Left', V156} end(E96)); {'Idris.Prelude.Types.Right', E97} -> (fun (V157) -> begin (V158 = ('un--newTemporaryVariableLevel'(V1, V119))), case V158 of {'Idris.Prelude.Types.Left', E98} -> (fun (V159) -> {'Idris.Prelude.Types.Left', V159} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V160) -> begin (V161 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V151))(V119))), case V161 of {'Idris.Prelude.Types.Left', E100} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V163) -> begin (V166 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V125, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V163 of {'Idris.Compiler.RefC.RefC.MkRS', E102, E103} -> (fun (V164, V165) -> V164 end(E102, E103)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V119))), case V166 of {'Idris.Prelude.Types.Left', E104} -> (fun (V167) -> {'Idris.Prelude.Types.Left', V167} end(E104)); {'Idris.Prelude.Types.Right', E105} -> (fun (V168) -> begin (V169 = ('un--freeTmpVars'(V1, V2, V3, V119))), case V169 of {'Idris.Prelude.Types.Left', E106} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V171) -> begin (V172 = ('un--decreaseIndentation'(V3, V119))), case V172 of {'Idris.Prelude.Types.Left', E108} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V174) -> begin (V175 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V119))), case V175 of {'Idris.Prelude.Types.Left', E110} -> (fun (V176) -> {'Idris.Prelude.Types.Left', V176} end(E110)); {'Idris.Prelude.Types.Right', E111} -> (fun (V177) -> begin (V178 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V119))), case V178 of {'Idris.Prelude.Types.Left', E112} -> (fun (V179) -> {'Idris.Prelude.Types.Left', V179} end(E112)); {'Idris.Prelude.Types.Right', E113} -> (fun (V180) -> begin (V181 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V127, <<");"/utf8>>))))))(V119))), case V181 of {'Idris.Prelude.Types.Left', E114} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V183) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V125, V125}} end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E113)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E111)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E105)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E97)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E95)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E88)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E86)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E84)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E82)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E80)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E78)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E76)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E71, E72, E73, E74)); {'Idris.Compiler.ANF.AConstCase', E116, E117, E118, E119} -> (fun (V184, V185, V186, V187) -> fun (V188) -> begin (V189 = ('un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V188))), case V189 of {'Idris.Prelude.Types.Left', E120} -> (fun (V190) -> {'Idris.Prelude.Types.Left', V190} end(E120)); {'Idris.Prelude.Types.Right', E121} -> (fun (V191) -> begin (V192 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V191, <<" = NULL;"/utf8>>))))), begin (V193 = (('un--emit'(V2, V3, V184, V192))(V188))), case V193 of {'Idris.Prelude.Types.Left', E122} -> (fun (V194) -> {'Idris.Prelude.Types.Left', V194} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V195) -> case ('un--integer_switch'(V186)) of 1 -> begin (V196 = (('un--emit'(V2, V3, V184, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"switch(extractInt("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V185)), <<")){"/utf8>>))))))(V188))), case V196 of {'Idris.Prelude.Types.Left', E124} -> (fun (V197) -> {'Idris.Prelude.Types.Left', V197} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V198) -> begin (V199 = (('un--constBlockSwitch'(V0, V1, V2, V3, V186, V191, 0))(V188))), case V199 of {'Idris.Prelude.Types.Left', E126} -> (fun (V200) -> {'Idris.Prelude.Types.Left', V200} end(E126)); {'Idris.Prelude.Types.Right', E127} -> (fun (V201) -> begin (V202 = ('un--constDefaultBlock'(V0, V1, V2, V3, V187, V191, V188))), case V202 of {'Idris.Prelude.Types.Left', E128} -> (fun (V203) -> {'Idris.Prelude.Types.Left', V203} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V204) -> begin (V205 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V188))), case V205 of {'Idris.Prelude.Types.Left', E130} -> (fun (V206) -> {'Idris.Prelude.Types.Left', V206} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V207) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V191, V191}} end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; 0 -> begin (V208 = (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V186, 0, <<""/utf8>>, <<""/utf8>>))(V188))), case V208 of {'Idris.Prelude.Types.Left', E132} -> (fun (V209) -> {'Idris.Prelude.Types.Left', V209} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V210) -> case V210 of {'Idris.Builtin.MkPair', E134, E135} -> (fun (V211, V212) -> begin (V213 = (('un--emit'(V2, V3, V184, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"switch("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V212, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V185)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'(V186)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V211, <<")){"/utf8>>))))))))))))))))))(V188))), case V213 of {'Idris.Prelude.Types.Left', E136} -> (fun (V214) -> {'Idris.Prelude.Types.Left', V214} end(E136)); {'Idris.Prelude.Types.Right', E137} -> (fun (V215) -> begin (V216 = (('un--constBlockSwitch'(V0, V1, V2, V3, V186, V191, 0))(V188))), case V216 of {'Idris.Prelude.Types.Left', E138} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V218) -> begin (V219 = ('un--constDefaultBlock'(V0, V1, V2, V3, V187, V191, V188))), case V219 of {'Idris.Prelude.Types.Left', E140} -> (fun (V220) -> {'Idris.Prelude.Types.Left', V220} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V221) -> begin (V222 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V188))), case V222 of {'Idris.Prelude.Types.Left', E142} -> (fun (V223) -> {'Idris.Prelude.Types.Left', V223} end(E142)); {'Idris.Prelude.Types.Right', E143} -> (fun (V224) -> begin (V225 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V211, <<");"/utf8>>))))))(V188))), case V225 of {'Idris.Prelude.Types.Left', E144} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E144)); {'Idris.Prelude.Types.Right', E145} -> (fun (V227) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V191, V191}} end(E145)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E143)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E137)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E134, E135)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E121)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E116, E117, E118, E119)); {'Idris.Compiler.ANF.APrimVal', E146, E147} -> (fun (V228, V229) -> fun (V230) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('un--cConstant'(V229)), ('un--cConstant'(V229))}} end end(E146, E147)); {'Idris.Compiler.ANF.AErased', E148} -> (fun (V231) -> fun (V232) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', <<"NULL"/utf8>>, <<"NULL"/utf8>>}} end end(E148)); {'Idris.Compiler.ANF.ACrash', E149, E150} -> (fun (V233, V234) -> fun (V235) -> begin (V236 = (('un--emit'(V2, V3, V233, <<"// CRASH"/utf8>>))(V235))), case V236 of {'Idris.Prelude.Types.Left', E151} -> (fun (V237) -> {'Idris.Prelude.Types.Left', V237} end(E151)); {'Idris.Prelude.Types.Right', E152} -> (fun (V238) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', <<"NULL"/utf8>>, <<"NULL"/utf8>>}} end(E152)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E149, E150)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cOp'(V0, V1) -> case V0 of {'Idris.Core.TT.Neg', E0} -> (fun (V2) -> case V1 of {'Idris.Data.Vect.::', E1, E2} -> (fun (V3, V4) -> case V4 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"negate_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V3, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E1, E2)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E0)); {'Idris.Core.TT.StrLength'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E3, E4} -> (fun (V5, V6) -> case V6 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"stringLength("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E3, E4)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V7, V8) -> case V8 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"head("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E5, E6)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E7, E8} -> (fun (V9, V10) -> case V10 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"tail("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E7, E8)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E9, E10} -> (fun (V11, V12) -> case V12 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"reverse("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E9, E10)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.Cast', E11, E12} -> (fun (V13, V14) -> case V1 of {'Idris.Data.Vect.::', E13, E14} -> (fun (V15, V16) -> case V16 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"cast_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V13)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_to_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V14)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E13, E14)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E11, E12)); {'Idris.Core.TT.DoubleExp'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E15, E16} -> (fun (V17, V18) -> case V18 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(exp(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V17, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E15, E16)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E17, E18} -> (fun (V19, V20) -> case V20 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(log(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V19, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E17, E18)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E19, E20} -> (fun (V21, V22) -> case V22 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(sin(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V21, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E19, E20)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E21, E22} -> (fun (V23, V24) -> case V24 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(cos(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V23, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E21, E22)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E23, E24} -> (fun (V25, V26) -> case V26 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(tan(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V25, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E23, E24)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E25, E26} -> (fun (V27, V28) -> case V28 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(asin(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V27, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E25, E26)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E27, E28} -> (fun (V29, V30) -> case V30 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(acos(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V29, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E27, E28)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E29, E30} -> (fun (V31, V32) -> case V32 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(atan(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V31, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E29, E30)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E31, E32} -> (fun (V33, V34) -> case V34 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(sqrt(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V33, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E31, E32)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E33, E34} -> (fun (V35, V36) -> case V36 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(floor(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V35, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E33, E34)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E35, E36} -> (fun (V37, V38) -> case V38 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(ceil(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V37, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E35, E36)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.Add', E37} -> (fun (V39) -> case V1 of {'Idris.Data.Vect.::', E38, E39} -> (fun (V40, V41) -> case V41 of {'Idris.Data.Vect.::', E40, E41} -> (fun (V42, V43) -> case V43 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"add_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V39)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V40, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V42, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E40, E41)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E38, E39)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E37)); {'Idris.Core.TT.Sub', E42} -> (fun (V44) -> case V1 of {'Idris.Data.Vect.::', E43, E44} -> (fun (V45, V46) -> case V46 of {'Idris.Data.Vect.::', E45, E46} -> (fun (V47, V48) -> case V48 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sub_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V44)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V45, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V47, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E45, E46)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E43, E44)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E42)); {'Idris.Core.TT.Mul', E47} -> (fun (V49) -> case V1 of {'Idris.Data.Vect.::', E48, E49} -> (fun (V50, V51) -> case V51 of {'Idris.Data.Vect.::', E50, E51} -> (fun (V52, V53) -> case V53 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"mul_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V49)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V50, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V52, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E50, E51)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E48, E49)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E47)); {'Idris.Core.TT.Div', E52} -> (fun (V54) -> case V1 of {'Idris.Data.Vect.::', E53, E54} -> (fun (V55, V56) -> case V56 of {'Idris.Data.Vect.::', E55, E56} -> (fun (V57, V58) -> case V58 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"div_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V54)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V55, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V57, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E55, E56)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E53, E54)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E52)); {'Idris.Core.TT.Mod', E57} -> (fun (V59) -> case V1 of {'Idris.Data.Vect.::', E58, E59} -> (fun (V60, V61) -> case V61 of {'Idris.Data.Vect.::', E60, E61} -> (fun (V62, V63) -> case V63 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"mod_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V59)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V60, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V62, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E60, E61)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E58, E59)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E57)); {'Idris.Core.TT.ShiftL', E62} -> (fun (V64) -> case V1 of {'Idris.Data.Vect.::', E63, E64} -> (fun (V65, V66) -> case V66 of {'Idris.Data.Vect.::', E65, E66} -> (fun (V67, V68) -> case V68 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shiftl_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V64)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V65, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V67, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E65, E66)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E63, E64)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E62)); {'Idris.Core.TT.ShiftR', E67} -> (fun (V69) -> case V1 of {'Idris.Data.Vect.::', E68, E69} -> (fun (V70, V71) -> case V71 of {'Idris.Data.Vect.::', E70, E71} -> (fun (V72, V73) -> case V73 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shiftr_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V69)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V70, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V72, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E70, E71)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E68, E69)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E67)); {'Idris.Core.TT.BAnd', E72} -> (fun (V74) -> case V1 of {'Idris.Data.Vect.::', E73, E74} -> (fun (V75, V76) -> case V76 of {'Idris.Data.Vect.::', E75, E76} -> (fun (V77, V78) -> case V78 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"and_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V74)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V75, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V77, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E75, E76)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E73, E74)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E72)); {'Idris.Core.TT.BOr', E77} -> (fun (V79) -> case V1 of {'Idris.Data.Vect.::', E78, E79} -> (fun (V80, V81) -> case V81 of {'Idris.Data.Vect.::', E80, E81} -> (fun (V82, V83) -> case V83 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"or_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V79)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V80, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V82, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E80, E81)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E78, E79)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E77)); {'Idris.Core.TT.BXOr', E82} -> (fun (V84) -> case V1 of {'Idris.Data.Vect.::', E83, E84} -> (fun (V85, V86) -> case V86 of {'Idris.Data.Vect.::', E85, E86} -> (fun (V87, V88) -> case V88 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"xor_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V84)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V85, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V87, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E85, E86)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E83, E84)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E82)); {'Idris.Core.TT.LT', E87} -> (fun (V89) -> case V1 of {'Idris.Data.Vect.::', E88, E89} -> (fun (V90, V91) -> case V91 of {'Idris.Data.Vect.::', E90, E91} -> (fun (V92, V93) -> case V93 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"lt_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V89)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V90, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V92, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E90, E91)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E88, E89)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E87)); {'Idris.Core.TT.GT', E92} -> (fun (V94) -> case V1 of {'Idris.Data.Vect.::', E93, E94} -> (fun (V95, V96) -> case V96 of {'Idris.Data.Vect.::', E95, E96} -> (fun (V97, V98) -> case V98 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"gt_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V94)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V95, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V97, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E95, E96)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E93, E94)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E92)); {'Idris.Core.TT.EQ', E97} -> (fun (V99) -> case V1 of {'Idris.Data.Vect.::', E98, E99} -> (fun (V100, V101) -> case V101 of {'Idris.Data.Vect.::', E100, E101} -> (fun (V102, V103) -> case V103 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"eq_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V99)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V100, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V102, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E100, E101)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E98, E99)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E97)); {'Idris.Core.TT.LTE', E102} -> (fun (V104) -> case V1 of {'Idris.Data.Vect.::', E103, E104} -> (fun (V105, V106) -> case V106 of {'Idris.Data.Vect.::', E105, E106} -> (fun (V107, V108) -> case V108 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"lte_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V104)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V105, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V107, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E105, E106)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E103, E104)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E102)); {'Idris.Core.TT.GTE', E107} -> (fun (V109) -> case V1 of {'Idris.Data.Vect.::', E108, E109} -> (fun (V110, V111) -> case V111 of {'Idris.Data.Vect.::', E110, E111} -> (fun (V112, V113) -> case V113 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"gte_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V109)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V110, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V112, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E110, E111)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E108, E109)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E107)); {'Idris.Core.TT.StrIndex'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E112, E113} -> (fun (V114, V115) -> case V115 of {'Idris.Data.Vect.::', E114, E115} -> (fun (V116, V117) -> case V117 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"strIndex("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V114, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V116, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E114, E115)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E112, E113)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E116, E117} -> (fun (V118, V119) -> case V119 of {'Idris.Data.Vect.::', E118, E119} -> (fun (V120, V121) -> case V121 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"strCons("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V118, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V120, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E118, E119)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E116, E117)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E120, E121} -> (fun (V122, V123) -> case V123 of {'Idris.Data.Vect.::', E122, E123} -> (fun (V124, V125) -> case V125 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"strAppend("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V122, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V124, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E122, E123)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E120, E121)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E124, E125} -> (fun (V126, V127) -> case V127 of {'Idris.Data.Vect.::', E126, E127} -> (fun (V128, V129) -> case V129 of {'Idris.Data.Vect.::', E128, E129} -> (fun (V130, V131) -> case V131 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"strSubstr("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V126, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V128, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V130, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E128, E129)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E126, E127)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E124, E125)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E130, E131} -> (fun (V132, V133) -> case V133 of {'Idris.Data.Vect.::', E132, E133} -> (fun (V134, V135) -> case V135 of {'Idris.Data.Vect.::', E134, E135} -> (fun (V136, V137) -> case V137 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V136, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E134, E135)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E132, E133)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E130, E131)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); {'Idris.Core.TT.Crash'} -> (fun () -> case V1 of {'Idris.Data.Vect.::', E136, E137} -> (fun (V138, V139) -> case V139 of {'Idris.Data.Vect.::', E138, E139} -> (fun (V140, V141) -> case V141 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2_crash("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V140, <<");"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E138, E139)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end(E136, E137)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'(V0)), ('Idris.Idris2.Data.Vect':'dn--un--toList_Foldable_(Vect $n)'(V1)))) end.
'un--cName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"_"/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cName'(V2)))))) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> ('un--cCleanString'(V3)) end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5)))))))) end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pat__"/utf8>>, ('un--cName'(V6)))) end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> ('un--cName'(V9)) end(E7, E8)); {'Idris.Core.Name.RF', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rec__"/utf8>>, ('un--cCleanString'(V10)))) end(E9)); {'Idris.Core.Name.Nested', E10, E11} -> (fun (V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"n__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', {'Idris.Prelude.Show.MkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V14, V15)) end end}, {'Idris.Prelude.Show.MkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V17, V18)) end end}}, V11)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cName'(V12)))))))) end(E10, E11)); {'Idris.Core.Name.CaseBlock', E12, E13} -> (fun (V19, V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V19)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V20)))))))))) end(E12, E13)); {'Idris.Core.Name.WithBlock', E14, E15} -> (fun (V21, V22) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V21)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V22)))))))))) end(E14, E15)); {'Idris.Core.Name.Resolved', E16} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fn__"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V23)))))) end(E16)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unsupported name in C backend "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)))))) end.
'un--cConstant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)), <<")"/utf8>>)))) end(E0)); {'Idris.Core.TT.I8', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt8("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2)), <<")"/utf8>>)))) end(E1)); {'Idris.Core.TT.I16', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt16("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V3)), <<")"/utf8>>)))) end(E2)); {'Idris.Core.TT.I32', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V4)), <<")"/utf8>>)))) end(E3)); {'Idris.Core.TT.I64', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V5)), <<")"/utf8>>)))) end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeIntegerLiteral(\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V6)), <<"\x{22})"/utf8>>)))) end(E5)); {'Idris.Core.TT.Db', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V7)), <<")"/utf8>>)))) end(E6)); {'Idris.Core.TT.Ch', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeChar("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--escapeChar'(V8)), <<")"/utf8>>)))) end(E7)); {'Idris.Core.TT.Str', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeString("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cStringQuoted'(V9)), <<")"/utf8>>)))) end(E8)); {'Idris.Core.TT.WorldVal'} -> (fun () -> <<"(Value*)makeWorld()"/utf8>> end()); {'Idris.Core.TT.IntType'} -> (fun () -> <<"Int64"/utf8>> end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> <<"Int8"/utf8>> end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> <<"Int16"/utf8>> end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> <<"Int32"/utf8>> end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> <<"Int64"/utf8>> end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> <<"Integer"/utf8>> end()); {'Idris.Core.TT.StringType'} -> (fun () -> <<"string"/utf8>> end()); {'Idris.Core.TT.CharType'} -> (fun () -> <<"char"/utf8>> end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> <<"double"/utf8>> end()); {'Idris.Core.TT.WorldType'} -> (fun () -> <<"f32"/utf8>> end()); {'Idris.Core.TT.B8', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeBits8("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V10)), <<")"/utf8>>)))) end(E9)); {'Idris.Core.TT.B16', E10} -> (fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeBits16("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V11)), <<")"/utf8>>)))) end(E10)); {'Idris.Core.TT.B32', E11} -> (fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeBits32("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V12)), <<")"/utf8>>)))) end(E11)); {'Idris.Core.TT.B64', E12} -> (fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeBits64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V13)), <<")"/utf8>>)))) end(E12)); {'Idris.Core.TT.Bits8Type'} -> (fun () -> <<"Bits8"/utf8>> end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> <<"Bits16"/utf8>> end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> <<"Bits32"/utf8>> end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> <<"Bits64"/utf8>> end()); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unknonw constant in C backend: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V0)))))) end.
'un--cCleanString'(V0) -> ('un--showcCleanString'(('Idris.Idris2.Prelude.Types':'un--fastUnpack'(V0)), <<""/utf8>>)).
'un--cArgsVectANF'(V0, V1) -> case V0 of {'Idris.Data.Vect.Nil'} -> (fun () -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V2, V3) -> begin (V4 = ('un--cArgsVectANF'(V3, V1))), case V4 of {'Idris.Prelude.Types.Left', E2} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', ('un--varName'(V2)), V6}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addHeader'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V7 = ('erlang':'put'(V0, ('Idris.Idris2.Libraries.Data.SortedSet':'un--insert'(V1, V6))))), {'Idris.Prelude.Types.Right', V7} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addCommaToList'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, V1)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'(fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, V3)) end, V2))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
