-module('Idris.Idris2.Compiler.RefC.RefC').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'case--case block in case block in case block in case block in case block in case block in case block in compileExpr-8019'/24,
  'case--case block in case block in case block in case block in case block in case block in compileExpr-7950'/23,
  'case--case block in case block in case block in case block in case block in case block in compileExpr-7904'/17,
  'case--case block in case block in case block in case block in case block in compileExpr-7752'/17,
  'case--case block in case block in case block in case block in compileExpr-7708'/16,
  'case--case block in case block in case block in compileExpr-7666'/15,
  'case--case block in case block in compileExpr-7626'/14,
  'case--case block in compileExpr-7588'/13,
  'case--compileExpr-7552'/12,
  'case--case block in case block in createCFunctions-7183'/20,
  'case--case block in case block in createCFunctions-7048'/19,
  'case--case block in createCFunctions-6977'/18,
  'case--case block in createCFunctions-6757'/12,
  'case--createCFunctions-6727'/12,
  'case--emitFDef-6273'/8,
  'case--case block in extractFFILocation-5952'/6,
  'case--extractFFILocation-5934'/4,
  'case--readCCPart-5907'/3,
  'case--case block in cStatementsFromANF-5774'/11,
  'case--cStatementsFromANF-5679'/11,
  'case--cStatementsFromANF-5488'/14,
  'case--makeNonIntSwitchStatementConst-4875'/9,
  'case--copyConstructors-4513'/14,
  'case--const2Integer-4375'/2,
  'case--integer_switch-4352'/3,
  'case--addExternalLib-4136'/4,
  'case--freeTmpVars-4083'/4,
  'case--emit-3991'/8,
  'case--lJust-3886'/5,
  'case--registerVariableForAutomaticFreeing-3813'/3,
  'case--case block in case block in cStringQuoted,showCChar-2541'/3,
  'case--case block in cStringQuoted,showCChar-2519'/3,
  'case--cStringQuoted,showCChar-2484'/3,
  'case--showcCleanStringChar-2245'/2,
  'case--case block in findCC-2108'/2,
  'case--findCC-2088'/1,
  'nested--13067-4597--in--un--varBindLines'/15,
  'nested--11002-2467--in--un--showCString'/2,
  'nested--11002-2466--in--un--showCChar'/2,
  'nested--12776-4167--in--un--pushArgToArglist'/9,
  'nested--13062-4465--in--un--getNameTag'/16,
  'nested--16416-7493--in--un--fullprefix_dir'/7,
  'nested--14662-5888--in--un--drop'/4,
  'nested--16416-7494--in--un--clibdirs'/6,
  'dn--un--show_Show_ExtPrim'/1,
  'dn--un--showPrec_Show_ExtPrim'/2,
  'dn--un--__Impl_Show_ExtPrim'/0,
  'un--varNamesFromList'/3,
  'un--varName'/1,
  'un--toPrim'/1,
  'un--showcCleanStringChar'/1,
  'un--showcCleanString'/1,
  'un--showTag'/1,
  'un--registerVariableForAutomaticFreeing'/3,
  'un--readCCPart'/2,
  'un--plainOp'/2,
  'un--packCFType'/2,
  'un--newTemporaryVariableLevel'/2,
  'un--maxLineLengthForComment'/0,
  'un--makeNonIntSwitchStatementConst'/8,
  'un--makeArglist'/7,
  'un--lJust'/3,
  'un--integer_switch'/1,
  'un--indentation'/2,
  'un--increaseIndentation'/2,
  'un--header'/4,
  'un--getNextCounter'/2,
  'un--getNewVarThatWillNotBeFreedAtEndOfBlock'/2,
  'un--getArgsNrList'/3,
  'un--functionDefSignatureArglist'/3,
  'un--functionDefSignature'/3,
  'un--freeTmpVars'/4,
  'un--footer'/3,
  'un--findCC'/1,
  'un--fillConstructorArgs'/5,
  'un--extractValue'/2,
  'un--extractFFILocation'/2,
  'un--extractConstant'/1,
  'un--executeExpr'/4,
  'un--escapeChar'/1,
  'un--emitFDef'/4,
  'un--emit'/4,
  'un--discardLastArgument'/2,
  'un--decreaseIndentation'/2,
  'un--createFFIArgList'/2,
  'un--createCFunctions'/9,
  'un--copyConstructors'/9,
  'un--constDefaultBlock'/6,
  'un--constBlockSwitch'/7,
  'un--const2Integer'/2,
  'un--conBlocks'/8,
  'un--compileLibrary'/6,
  'un--compileExpr'/6,
  'un--codegenRefC'/0,
  'un--cTypeOfCFType'/1,
  'un--cStringQuoted'/1,
  'un--cStatementsFromANF'/5,
  'un--cOp'/3,
  'un--cName'/1,
  'un--cConstant'/1,
  'un--cCleanString'/1,
  'un--cArgsVectANF'/2,
  'un--addExternalLib'/3,
  'un--addCommaToList'/1
]).
'case--case block in case block in case block in case block in case block in case block in case block in compileExpr-8019'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23) -> case V23 of 0 -> fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}} end; _ -> fun (V25) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--case block in case block in case block in case block in case block in case block in compileExpr-7950'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22) -> case V22 of 0 -> fun (V23) -> begin (V52 = begin (V51 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> fun (V28) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V26, V27, V28)) end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> V30 end end end, fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> begin (V37 = (V34(V36))), begin (V38 = (V35(V36))), (V37(V38)) end end end end end end end}, fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> begin (V44 = (V41(V43))), ((V42(V44))(V43)) end end end end end end, fun (V45) -> fun (V46) -> fun (V47) -> begin (V48 = (V46(V47))), (V48(V47)) end end end end}, fun (V49) -> fun (V50) -> V50 end end}, V21))(V23))), {'Idris.Prelude.Types.Right', V51} end), case V52 of {'Idris.Prelude.Types.Left', E0} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V54) -> begin (V83 = begin (V82 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V57, V58, V59)) end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> V61 end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), begin (V69 = (V66(V67))), (V68(V69)) end end end end end end end}, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> begin (V75 = (V72(V74))), ((V73(V75))(V74)) end end end end end end, fun (V76) -> fun (V77) -> fun (V78) -> begin (V79 = (V77(V78))), (V79(V78)) end end end end}, fun (V80) -> fun (V81) -> V81 end end}, V21))(V23))), {'Idris.Prelude.Types.Right', V82} end), case V83 of {'Idris.Prelude.Types.Left', E2} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V85) -> case V85 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> fun (V86) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'case--case block in case block in case block in case block in case block in case block in compileExpr-7904'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> case V16 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V17, V18) -> ('un--createCFunctions'(V4, V10, V11, V12, V13, V15, V14, V17, V18)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in case block in case block in case block in compileExpr-7752'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> begin (V20 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V17) -> case V17 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V18, V19) -> ('un--createCFunctions'(V4, V10, V11, V12, V13, V15, V14, V18, V19)) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V9))(V16))), case V20 of {'Idris.Prelude.Types.Left', E2} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V22) -> begin (V23 = (('un--header'(V11, V13, V15, V14))(V16))), case V23 of {'Idris.Prelude.Types.Left', E4} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V25) -> begin (V26 = ('un--footer'(V15, V13, V16))), case V26 of {'Idris.Prelude.Types.Left', E6} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V28) -> begin (V30 = begin (V29 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V29} end), case V30 of {'Idris.Prelude.Types.Left', E8} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V32) -> begin (V34 = ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V33) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V33, <<"\x{a}"/utf8>>)) end, ('Idris.Idris2.Libraries.Data.DList':'un--reify'('erased', V32))))))), begin (V67 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V35) -> case V35 of {'Idris.Prelude.Types.Left', E10} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V37) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V38) -> begin (V66 = (('Idris.Idris2.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V41, V42, V43)) end end end end end, fun (V44) -> fun (V45) -> fun (V46) -> V45 end end end, fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> begin (V52 = (V49(V51))), begin (V53 = (V50(V51))), (V52(V53)) end end end end end end end}, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), ((V57(V59))(V58)) end end end end end end, fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V61(V62))), (V63(V62)) end end end end}, fun (V64) -> fun (V65) -> V65 end end}, V5, V34))(V38))), {'Idris.Prelude.Types.Right', V66} end end, V16))), case V67 of {'Idris.Prelude.Types.Left', E12} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V69) -> begin (V102 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V70) -> case V70 of {'Idris.Prelude.Types.Left', E14} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V72) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V73) -> begin (V101 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V76, V77, V78)) end end end end end, fun (V79) -> fun (V80) -> fun (V81) -> V80 end end end, fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> begin (V87 = (V84(V86))), begin (V88 = (V85(V86))), (V87(V88)) end end end end end end end}, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V91(V93))), ((V92(V94))(V93)) end end end end end end, fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V96(V97))), (V98(V97)) end end end end}, fun (V99) -> fun (V100) -> V100 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated C file "/utf8>>, V5))))(V73))), {'Idris.Prelude.Types.Right', V101} end end, V16))), case V102 of {'Idris.Prelude.Types.Left', E16} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V104) -> begin (V106 = begin (V105 = ('un--findCC'(V16))), {'Idris.Prelude.Types.Right', V105} end), case V106 of {'Idris.Prelude.Types.Left', E18} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V108) -> begin (V109 = ('Idris.Idris2.Core.Context':'un--getDirs'(V4, V16))), case V109 of {'Idris.Prelude.Types.Left', E20} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V111) -> begin (V112 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V108, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -c "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V111, <<"refc "/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V111, <<"include"/utf8>>))))))))))))))))))))), begin (V123 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(V108, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V111, <<"lib"/utf8>>)))))))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"libidris2_support.a"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-lidris2_refc "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V111, <<"refc "/utf8>>)), ('nested--16416-7494--in--un--clibdirs'(V0, V1, V2, V3, V4, case V111 of {'Idris.Core.Options.MkDirs', E22, E23, E24, E25, E26, E27, E28, E29, E30, E31} -> (fun (V113, V114, V115, V116, V117, V118, V119, V120, V121, V122) -> V121 end(E22, E23, E24, E25, E26, E27, E28, E29, E30, E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))), begin (V152 = begin (V151 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V124) -> fun (V125) -> fun (V126) -> fun (V127) -> fun (V128) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V126, V127, V128)) end end end end end, fun (V129) -> fun (V130) -> fun (V131) -> V130 end end end, fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> begin (V137 = (V134(V136))), begin (V138 = (V135(V136))), (V137(V138)) end end end end end end end}, fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> begin (V144 = (V141(V143))), ((V142(V144))(V143)) end end end end end end, fun (V145) -> fun (V146) -> fun (V147) -> begin (V148 = (V146(V147))), (V148(V147)) end end end end}, fun (V149) -> fun (V150) -> V150 end end}, V112))(V16))), {'Idris.Prelude.Types.Right', V151} end), case V152 of {'Idris.Prelude.Types.Left', E32} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V154) -> begin (V183 = begin (V182 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V157, V158, V159)) end end end end end, fun (V160) -> fun (V161) -> fun (V162) -> V161 end end end, fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> begin (V168 = (V165(V167))), begin (V169 = (V166(V167))), (V168(V169)) end end end end end end end}, fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> begin (V175 = (V172(V174))), ((V173(V175))(V174)) end end end end end end, fun (V176) -> fun (V177) -> fun (V178) -> begin (V179 = (V177(V178))), (V179(V178)) end end end end}, fun (V180) -> fun (V181) -> V181 end end}, V112))(V16))), {'Idris.Prelude.Types.Right', V182} end), case V183 of {'Idris.Prelude.Types.Left', E34} -> (fun (V184) -> {'Idris.Prelude.Types.Left', V184} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V185) -> case V185 of 0 -> begin (V214 = begin (V213 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V186) -> fun (V187) -> fun (V188) -> fun (V189) -> fun (V190) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V188, V189, V190)) end end end end end, fun (V191) -> fun (V192) -> fun (V193) -> V192 end end end, fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> begin (V199 = (V196(V198))), begin (V200 = (V197(V198))), (V199(V200)) end end end end end end end}, fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> begin (V206 = (V203(V205))), ((V204(V206))(V205)) end end end end end end, fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V208(V209))), (V210(V209)) end end end end}, fun (V211) -> fun (V212) -> V212 end end}, V123))(V16))), {'Idris.Prelude.Types.Right', V213} end), case V214 of {'Idris.Prelude.Types.Left', E36} -> (fun (V215) -> {'Idris.Prelude.Types.Left', V215} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V216) -> begin (V245 = begin (V244 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> fun (V221) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V219, V220, V221)) end end end end end, fun (V222) -> fun (V223) -> fun (V224) -> V223 end end end, fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> begin (V230 = (V227(V229))), begin (V231 = (V228(V229))), (V230(V231)) end end end end end end end}, fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> begin (V237 = (V234(V236))), ((V235(V237))(V236)) end end end end end end, fun (V238) -> fun (V239) -> fun (V240) -> begin (V241 = (V239(V240))), (V241(V240)) end end end end}, fun (V242) -> fun (V243) -> V243 end end}, V123))(V16))), {'Idris.Prelude.Types.Right', V244} end), case V245 of {'Idris.Prelude.Types.Left', E38} -> (fun (V246) -> {'Idris.Prelude.Types.Left', V246} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V247) -> case V247 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in case block in case block in case block in compileExpr-7708'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> begin (V16 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.IndentLevel'}, 0, V15))), case V16 of {'Idris.Prelude.Types.Left', E0} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V18) -> begin (V22 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V20, V21) -> ('un--createCFunctions'(V4, V10, V11, V12, V13, V18, V14, V20, V21)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V9))(V15))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> begin (V25 = (('un--header'(V11, V13, V18, V14))(V15))), case V25 of {'Idris.Prelude.Types.Left', E6} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V27) -> begin (V28 = ('un--footer'(V18, V13, V15))), case V28 of {'Idris.Prelude.Types.Left', E8} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V30) -> begin (V32 = begin (V31 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V31} end), case V32 of {'Idris.Prelude.Types.Left', E10} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V34) -> begin (V36 = ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V35) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V35, <<"\x{a}"/utf8>>)) end, ('Idris.Idris2.Libraries.Data.DList':'un--reify'('erased', V34))))))), begin (V69 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V37) -> case V37 of {'Idris.Prelude.Types.Left', E12} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V39) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V40) -> begin (V68 = (('Idris.Idris2.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> fun (V45) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V43, V44, V45)) end end end end end, fun (V46) -> fun (V47) -> fun (V48) -> V47 end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> begin (V54 = (V51(V53))), begin (V55 = (V52(V53))), (V54(V55)) end end end end end end end}, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), ((V59(V61))(V60)) end end end end end end, fun (V62) -> fun (V63) -> fun (V64) -> begin (V65 = (V63(V64))), (V65(V64)) end end end end}, fun (V66) -> fun (V67) -> V67 end end}, V5, V36))(V40))), {'Idris.Prelude.Types.Right', V68} end end, V15))), case V69 of {'Idris.Prelude.Types.Left', E14} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V71) -> begin (V104 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V72) -> case V72 of {'Idris.Prelude.Types.Left', E16} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V75) -> begin (V103 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V78, V79, V80)) end end end end end, fun (V81) -> fun (V82) -> fun (V83) -> V82 end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> begin (V89 = (V86(V88))), begin (V90 = (V87(V88))), (V89(V90)) end end end end end end end}, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> begin (V96 = (V93(V95))), ((V94(V96))(V95)) end end end end end end, fun (V97) -> fun (V98) -> fun (V99) -> begin (V100 = (V98(V99))), (V100(V99)) end end end end}, fun (V101) -> fun (V102) -> V102 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated C file "/utf8>>, V5))))(V75))), {'Idris.Prelude.Types.Right', V103} end end, V15))), case V104 of {'Idris.Prelude.Types.Left', E18} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V106) -> begin (V108 = begin (V107 = ('un--findCC'(V15))), {'Idris.Prelude.Types.Right', V107} end), case V108 of {'Idris.Prelude.Types.Left', E20} -> (fun (V109) -> {'Idris.Prelude.Types.Left', V109} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V110) -> begin (V111 = ('Idris.Idris2.Core.Context':'un--getDirs'(V4, V15))), case V111 of {'Idris.Prelude.Types.Left', E22} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V113) -> begin (V114 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V110, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -c "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V113, <<"refc "/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V113, <<"include"/utf8>>))))))))))))))))))))), begin (V125 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(V110, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V113, <<"lib"/utf8>>)))))))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"libidris2_support.a"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-lidris2_refc "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V113, <<"refc "/utf8>>)), ('nested--16416-7494--in--un--clibdirs'(V0, V1, V2, V3, V4, case V113 of {'Idris.Core.Options.MkDirs', E24, E25, E26, E27, E28, E29, E30, E31, E32, E33} -> (fun (V115, V116, V117, V118, V119, V120, V121, V122, V123, V124) -> V123 end(E24, E25, E26, E27, E28, E29, E30, E31, E32, E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))), begin (V154 = begin (V153 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V126) -> fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V128, V129, V130)) end end end end end, fun (V131) -> fun (V132) -> fun (V133) -> V132 end end end, fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> begin (V139 = (V136(V138))), begin (V140 = (V137(V138))), (V139(V140)) end end end end end end end}, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V143(V145))), ((V144(V146))(V145)) end end end end end end, fun (V147) -> fun (V148) -> fun (V149) -> begin (V150 = (V148(V149))), (V150(V149)) end end end end}, fun (V151) -> fun (V152) -> V152 end end}, V114))(V15))), {'Idris.Prelude.Types.Right', V153} end), case V154 of {'Idris.Prelude.Types.Left', E34} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V156) -> begin (V185 = begin (V184 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V157) -> fun (V158) -> fun (V159) -> fun (V160) -> fun (V161) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V159, V160, V161)) end end end end end, fun (V162) -> fun (V163) -> fun (V164) -> V163 end end end, fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> begin (V170 = (V167(V169))), begin (V171 = (V168(V169))), (V170(V171)) end end end end end end end}, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), ((V175(V177))(V176)) end end end end end end, fun (V178) -> fun (V179) -> fun (V180) -> begin (V181 = (V179(V180))), (V181(V180)) end end end end}, fun (V182) -> fun (V183) -> V183 end end}, V114))(V15))), {'Idris.Prelude.Types.Right', V184} end), case V185 of {'Idris.Prelude.Types.Left', E36} -> (fun (V186) -> {'Idris.Prelude.Types.Left', V186} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V187) -> case V187 of 0 -> begin (V216 = begin (V215 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V188) -> fun (V189) -> fun (V190) -> fun (V191) -> fun (V192) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V190, V191, V192)) end end end end end, fun (V193) -> fun (V194) -> fun (V195) -> V194 end end end, fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> begin (V201 = (V198(V200))), begin (V202 = (V199(V200))), (V201(V202)) end end end end end end end}, fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V205(V207))), ((V206(V208))(V207)) end end end end end end, fun (V209) -> fun (V210) -> fun (V211) -> begin (V212 = (V210(V211))), (V212(V211)) end end end end}, fun (V213) -> fun (V214) -> V214 end end}, V125))(V15))), {'Idris.Prelude.Types.Right', V215} end), case V216 of {'Idris.Prelude.Types.Left', E38} -> (fun (V217) -> {'Idris.Prelude.Types.Left', V217} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V218) -> begin (V247 = begin (V246 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V219) -> fun (V220) -> fun (V221) -> fun (V222) -> fun (V223) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V221, V222, V223)) end end end end end, fun (V224) -> fun (V225) -> fun (V226) -> V225 end end end, fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> begin (V232 = (V229(V231))), begin (V233 = (V230(V231))), (V232(V233)) end end end end end end end}, fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> begin (V239 = (V236(V238))), ((V237(V239))(V238)) end end end end end end, fun (V240) -> fun (V241) -> fun (V242) -> begin (V243 = (V241(V242))), (V243(V242)) end end end end}, fun (V244) -> fun (V245) -> V245 end end}, V125))(V15))), {'Idris.Prelude.Types.Right', V246} end), case V247 of {'Idris.Prelude.Types.Left', E40} -> (fun (V248) -> {'Idris.Prelude.Types.Left', V248} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V249) -> case V249 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in case block in case block in compileExpr-7666'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.ExternalLibs'}, [], V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.IndentLevel'}, 0, V14))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V24 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V21) -> case V21 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V22, V23) -> ('un--createCFunctions'(V4, V10, V11, V12, V13, V20, V17, V22, V23)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V9))(V14))), case V24 of {'Idris.Prelude.Types.Left', E6} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V26) -> begin (V27 = (('un--header'(V11, V13, V20, V17))(V14))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> begin (V30 = ('un--footer'(V20, V13, V14))), case V30 of {'Idris.Prelude.Types.Left', E10} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V32) -> begin (V34 = begin (V33 = ('erlang':'get'(V13))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E12} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V36) -> begin (V38 = ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V37) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V37, <<"\x{a}"/utf8>>)) end, ('Idris.Idris2.Libraries.Data.DList':'un--reify'('erased', V36))))))), begin (V71 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E14} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> begin (V70 = (('Idris.Idris2.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> V49 end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), begin (V57 = (V54(V55))), (V56(V57)) end end end end end end end}, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), ((V61(V63))(V62)) end end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V65(V66))), (V67(V66)) end end end end}, fun (V68) -> fun (V69) -> V69 end end}, V5, V38))(V42))), {'Idris.Prelude.Types.Right', V70} end end, V14))), case V71 of {'Idris.Prelude.Types.Left', E16} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V73) -> begin (V106 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V74) -> case V74 of {'Idris.Prelude.Types.Left', E18} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V76) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V77) -> begin (V105 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V80, V81, V82)) end end end end end, fun (V83) -> fun (V84) -> fun (V85) -> V84 end end end, fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> fun (V90) -> begin (V91 = (V88(V90))), begin (V92 = (V89(V90))), (V91(V92)) end end end end end end end}, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V95(V97))), ((V96(V98))(V97)) end end end end end end, fun (V99) -> fun (V100) -> fun (V101) -> begin (V102 = (V100(V101))), (V102(V101)) end end end end}, fun (V103) -> fun (V104) -> V104 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated C file "/utf8>>, V5))))(V77))), {'Idris.Prelude.Types.Right', V105} end end, V14))), case V106 of {'Idris.Prelude.Types.Left', E20} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V108) -> begin (V110 = begin (V109 = ('un--findCC'(V14))), {'Idris.Prelude.Types.Right', V109} end), case V110 of {'Idris.Prelude.Types.Left', E22} -> (fun (V111) -> {'Idris.Prelude.Types.Left', V111} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V112) -> begin (V113 = ('Idris.Idris2.Core.Context':'un--getDirs'(V4, V14))), case V113 of {'Idris.Prelude.Types.Left', E24} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V115) -> begin (V116 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V112, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -c "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V115, <<"refc "/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V115, <<"include"/utf8>>))))))))))))))))))))), begin (V127 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(V112, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V115, <<"lib"/utf8>>)))))))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"libidris2_support.a"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-lidris2_refc "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V115, <<"refc "/utf8>>)), ('nested--16416-7494--in--un--clibdirs'(V0, V1, V2, V3, V4, case V115 of {'Idris.Core.Options.MkDirs', E26, E27, E28, E29, E30, E31, E32, E33, E34, E35} -> (fun (V117, V118, V119, V120, V121, V122, V123, V124, V125, V126) -> V125 end(E26, E27, E28, E29, E30, E31, E32, E33, E34, E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))), begin (V156 = begin (V155 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> fun (V132) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V130, V131, V132)) end end end end end, fun (V133) -> fun (V134) -> fun (V135) -> V134 end end end, fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> fun (V140) -> begin (V141 = (V138(V140))), begin (V142 = (V139(V140))), (V141(V142)) end end end end end end end}, fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> begin (V148 = (V145(V147))), ((V146(V148))(V147)) end end end end end end, fun (V149) -> fun (V150) -> fun (V151) -> begin (V152 = (V150(V151))), (V152(V151)) end end end end}, fun (V153) -> fun (V154) -> V154 end end}, V116))(V14))), {'Idris.Prelude.Types.Right', V155} end), case V156 of {'Idris.Prelude.Types.Left', E36} -> (fun (V157) -> {'Idris.Prelude.Types.Left', V157} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V158) -> begin (V187 = begin (V186 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V159) -> fun (V160) -> fun (V161) -> fun (V162) -> fun (V163) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V161, V162, V163)) end end end end end, fun (V164) -> fun (V165) -> fun (V166) -> V165 end end end, fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> begin (V172 = (V169(V171))), begin (V173 = (V170(V171))), (V172(V173)) end end end end end end end}, fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> begin (V179 = (V176(V178))), ((V177(V179))(V178)) end end end end end end, fun (V180) -> fun (V181) -> fun (V182) -> begin (V183 = (V181(V182))), (V183(V182)) end end end end}, fun (V184) -> fun (V185) -> V185 end end}, V116))(V14))), {'Idris.Prelude.Types.Right', V186} end), case V187 of {'Idris.Prelude.Types.Left', E38} -> (fun (V188) -> {'Idris.Prelude.Types.Left', V188} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V189) -> case V189 of 0 -> begin (V218 = begin (V217 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V192, V193, V194)) end end end end end, fun (V195) -> fun (V196) -> fun (V197) -> V196 end end end, fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> begin (V203 = (V200(V202))), begin (V204 = (V201(V202))), (V203(V204)) end end end end end end end}, fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V207(V209))), ((V208(V210))(V209)) end end end end end end, fun (V211) -> fun (V212) -> fun (V213) -> begin (V214 = (V212(V213))), (V214(V213)) end end end end}, fun (V215) -> fun (V216) -> V216 end end}, V127))(V14))), {'Idris.Prelude.Types.Right', V217} end), case V218 of {'Idris.Prelude.Types.Left', E40} -> (fun (V219) -> {'Idris.Prelude.Types.Left', V219} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V220) -> begin (V249 = begin (V248 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V223, V224, V225)) end end end end end, fun (V226) -> fun (V227) -> fun (V228) -> V227 end end end, fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> begin (V234 = (V231(V233))), begin (V235 = (V232(V233))), (V234(V235)) end end end end end end end}, fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> begin (V241 = (V238(V240))), ((V239(V241))(V240)) end end end end end end, fun (V242) -> fun (V243) -> fun (V244) -> begin (V245 = (V243(V244))), (V245(V244)) end end end end}, fun (V246) -> fun (V247) -> V247 end end}, V127))(V14))), {'Idris.Prelude.Types.Right', V248} end), case V249 of {'Idris.Prelude.Types.Left', E42} -> (fun (V250) -> {'Idris.Prelude.Types.Left', V250} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V251) -> case V251 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in case block in compileExpr-7626'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.OutfileText'}, fun (V14) -> ('Idris.Idris2.Libraries.Data.DList':'un--Nil'('erased', V14)) end, V13))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.ExternalLibs'}, [], V13))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.IndentLevel'}, 0, V13))), case V21 of {'Idris.Prelude.Types.Left', E4} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V23) -> begin (V27 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V24) -> case V24 of {'Idris.Builtin.MkPair', E6, E7} -> (fun (V25, V26) -> ('un--createCFunctions'(V4, V10, V11, V12, V17, V23, V20, V25, V26)) end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V9))(V13))), case V27 of {'Idris.Prelude.Types.Left', E8} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V29) -> begin (V30 = (('un--header'(V11, V17, V23, V20))(V13))), case V30 of {'Idris.Prelude.Types.Left', E10} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V32) -> begin (V33 = ('un--footer'(V23, V17, V13))), case V33 of {'Idris.Prelude.Types.Left', E12} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V35) -> begin (V37 = begin (V36 = ('erlang':'get'(V17))), {'Idris.Prelude.Types.Right', V36} end), case V37 of {'Idris.Prelude.Types.Left', E14} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V39) -> begin (V41 = ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V40) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V40, <<"\x{a}"/utf8>>)) end, ('Idris.Idris2.Libraries.Data.DList':'un--reify'('erased', V39))))))), begin (V74 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V42) -> case V42 of {'Idris.Prelude.Types.Left', E16} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V45) -> begin (V73 = (('Idris.Idris2.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V46) -> fun (V47) -> fun (V48) -> fun (V49) -> fun (V50) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V48, V49, V50)) end end end end end, fun (V51) -> fun (V52) -> fun (V53) -> V52 end end end, fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> begin (V59 = (V56(V58))), begin (V60 = (V57(V58))), (V59(V60)) end end end end end end end}, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> begin (V66 = (V63(V65))), ((V64(V66))(V65)) end end end end end end, fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V68(V69))), (V70(V69)) end end end end}, fun (V71) -> fun (V72) -> V72 end end}, V5, V41))(V45))), {'Idris.Prelude.Types.Right', V73} end end, V13))), case V74 of {'Idris.Prelude.Types.Left', E18} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V76) -> begin (V109 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V77) -> case V77 of {'Idris.Prelude.Types.Left', E20} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V79) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V80) -> begin (V108 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> fun (V85) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V83, V84, V85)) end end end end end, fun (V86) -> fun (V87) -> fun (V88) -> V87 end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> begin (V94 = (V91(V93))), begin (V95 = (V92(V93))), (V94(V95)) end end end end end end end}, fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> begin (V101 = (V98(V100))), ((V99(V101))(V100)) end end end end end end, fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V103(V104))), (V105(V104)) end end end end}, fun (V106) -> fun (V107) -> V107 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated C file "/utf8>>, V5))))(V80))), {'Idris.Prelude.Types.Right', V108} end end, V13))), case V109 of {'Idris.Prelude.Types.Left', E22} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V111) -> begin (V113 = begin (V112 = ('un--findCC'(V13))), {'Idris.Prelude.Types.Right', V112} end), case V113 of {'Idris.Prelude.Types.Left', E24} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V115) -> begin (V116 = ('Idris.Idris2.Core.Context':'un--getDirs'(V4, V13))), case V116 of {'Idris.Prelude.Types.Left', E26} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V118) -> begin (V119 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V115, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -c "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V118, <<"refc "/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V118, <<"include"/utf8>>))))))))))))))))))))), begin (V130 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(V115, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V118, <<"lib"/utf8>>)))))))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"libidris2_support.a"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-lidris2_refc "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V118, <<"refc "/utf8>>)), ('nested--16416-7494--in--un--clibdirs'(V0, V1, V2, V3, V4, case V118 of {'Idris.Core.Options.MkDirs', E28, E29, E30, E31, E32, E33, E34, E35, E36, E37} -> (fun (V120, V121, V122, V123, V124, V125, V126, V127, V128, V129) -> V128 end(E28, E29, E30, E31, E32, E33, E34, E35, E36, E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))), begin (V159 = begin (V158 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V131) -> fun (V132) -> fun (V133) -> fun (V134) -> fun (V135) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V133, V134, V135)) end end end end end, fun (V136) -> fun (V137) -> fun (V138) -> V137 end end end, fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> fun (V143) -> begin (V144 = (V141(V143))), begin (V145 = (V142(V143))), (V144(V145)) end end end end end end end}, fun (V146) -> fun (V147) -> fun (V148) -> fun (V149) -> fun (V150) -> begin (V151 = (V148(V150))), ((V149(V151))(V150)) end end end end end end, fun (V152) -> fun (V153) -> fun (V154) -> begin (V155 = (V153(V154))), (V155(V154)) end end end end}, fun (V156) -> fun (V157) -> V157 end end}, V119))(V13))), {'Idris.Prelude.Types.Right', V158} end), case V159 of {'Idris.Prelude.Types.Left', E38} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V161) -> begin (V190 = begin (V189 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> fun (V166) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V164, V165, V166)) end end end end end, fun (V167) -> fun (V168) -> fun (V169) -> V168 end end end, fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> fun (V174) -> begin (V175 = (V172(V174))), begin (V176 = (V173(V174))), (V175(V176)) end end end end end end end}, fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> fun (V181) -> begin (V182 = (V179(V181))), ((V180(V182))(V181)) end end end end end end, fun (V183) -> fun (V184) -> fun (V185) -> begin (V186 = (V184(V185))), (V186(V185)) end end end end}, fun (V187) -> fun (V188) -> V188 end end}, V119))(V13))), {'Idris.Prelude.Types.Right', V189} end), case V190 of {'Idris.Prelude.Types.Left', E40} -> (fun (V191) -> {'Idris.Prelude.Types.Left', V191} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V192) -> case V192 of 0 -> begin (V221 = begin (V220 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> fun (V197) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V195, V196, V197)) end end end end end, fun (V198) -> fun (V199) -> fun (V200) -> V199 end end end, fun (V201) -> fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> begin (V206 = (V203(V205))), begin (V207 = (V204(V205))), (V206(V207)) end end end end end end end}, fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> fun (V212) -> begin (V213 = (V210(V212))), ((V211(V213))(V212)) end end end end end end, fun (V214) -> fun (V215) -> fun (V216) -> begin (V217 = (V215(V216))), (V217(V216)) end end end end}, fun (V218) -> fun (V219) -> V219 end end}, V130))(V13))), {'Idris.Prelude.Types.Right', V220} end), case V221 of {'Idris.Prelude.Types.Left', E42} -> (fun (V222) -> {'Idris.Prelude.Types.Left', V222} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V223) -> begin (V252 = begin (V251 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> fun (V228) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V226, V227, V228)) end end end end end, fun (V229) -> fun (V230) -> fun (V231) -> V230 end end end, fun (V232) -> fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> begin (V237 = (V234(V236))), begin (V238 = (V235(V236))), (V237(V238)) end end end end end end end}, fun (V239) -> fun (V240) -> fun (V241) -> fun (V242) -> fun (V243) -> begin (V244 = (V241(V243))), ((V242(V244))(V243)) end end end end end end, fun (V245) -> fun (V246) -> fun (V247) -> begin (V248 = (V246(V247))), (V248(V247)) end end end end}, fun (V249) -> fun (V250) -> V250 end end}, V130))(V13))), {'Idris.Prelude.Types.Right', V251} end), case V252 of {'Idris.Prelude.Types.Left', E44} -> (fun (V253) -> {'Idris.Prelude.Types.Left', V253} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V254) -> case V254 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in compileExpr-7588'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12) -> begin (V13 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.TemporaryVariableTracker'}, [], V12))), case V13 of {'Idris.Prelude.Types.Left', E0} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V15) -> begin (V17 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.OutfileText'}, fun (V16) -> ('Idris.Idris2.Libraries.Data.DList':'un--Nil'('erased', V16)) end, V12))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V20 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.ExternalLibs'}, [], V12))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.IndentLevel'}, 0, V12))), case V23 of {'Idris.Prelude.Types.Left', E6} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V25) -> begin (V29 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V26) -> case V26 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V27, V28) -> ('un--createCFunctions'(V4, V10, V11, V15, V19, V25, V22, V27, V28)) end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V9))(V12))), case V29 of {'Idris.Prelude.Types.Left', E10} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V31) -> begin (V32 = (('un--header'(V11, V19, V25, V22))(V12))), case V32 of {'Idris.Prelude.Types.Left', E12} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V34) -> begin (V35 = ('un--footer'(V25, V19, V12))), case V35 of {'Idris.Prelude.Types.Left', E14} -> (fun (V36) -> {'Idris.Prelude.Types.Left', V36} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V37) -> begin (V39 = begin (V38 = ('erlang':'get'(V19))), {'Idris.Prelude.Types.Right', V38} end), case V39 of {'Idris.Prelude.Types.Left', E16} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V41) -> begin (V43 = ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V42) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V42, <<"\x{a}"/utf8>>)) end, ('Idris.Idris2.Libraries.Data.DList':'un--reify'('erased', V41))))))), begin (V76 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V44) -> case V44 of {'Idris.Prelude.Types.Left', E18} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V46) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V47) -> begin (V75 = (('Idris.Idris2.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V48) -> fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V50, V51, V52)) end end end end end, fun (V53) -> fun (V54) -> fun (V55) -> V54 end end end, fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> begin (V61 = (V58(V60))), begin (V62 = (V59(V60))), (V61(V62)) end end end end end end end}, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> begin (V68 = (V65(V67))), ((V66(V68))(V67)) end end end end end end, fun (V69) -> fun (V70) -> fun (V71) -> begin (V72 = (V70(V71))), (V72(V71)) end end end end}, fun (V73) -> fun (V74) -> V74 end end}, V5, V43))(V47))), {'Idris.Prelude.Types.Right', V75} end end, V12))), case V76 of {'Idris.Prelude.Types.Left', E20} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V78) -> begin (V111 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V79) -> case V79 of {'Idris.Prelude.Types.Left', E22} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V81) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V82) -> begin (V110 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V85, V86, V87)) end end end end end, fun (V88) -> fun (V89) -> fun (V90) -> V89 end end end, fun (V91) -> fun (V92) -> fun (V93) -> fun (V94) -> fun (V95) -> begin (V96 = (V93(V95))), begin (V97 = (V94(V95))), (V96(V97)) end end end end end end end}, fun (V98) -> fun (V99) -> fun (V100) -> fun (V101) -> fun (V102) -> begin (V103 = (V100(V102))), ((V101(V103))(V102)) end end end end end end, fun (V104) -> fun (V105) -> fun (V106) -> begin (V107 = (V105(V106))), (V107(V106)) end end end end}, fun (V108) -> fun (V109) -> V109 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated C file "/utf8>>, V5))))(V82))), {'Idris.Prelude.Types.Right', V110} end end, V12))), case V111 of {'Idris.Prelude.Types.Left', E24} -> (fun (V112) -> {'Idris.Prelude.Types.Left', V112} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V113) -> begin (V115 = begin (V114 = ('un--findCC'(V12))), {'Idris.Prelude.Types.Right', V114} end), case V115 of {'Idris.Prelude.Types.Left', E26} -> (fun (V116) -> {'Idris.Prelude.Types.Left', V116} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V117) -> begin (V118 = ('Idris.Idris2.Core.Context':'un--getDirs'(V4, V12))), case V118 of {'Idris.Prelude.Types.Left', E28} -> (fun (V119) -> {'Idris.Prelude.Types.Left', V119} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V120) -> begin (V121 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V117, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -c "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V120, <<"refc "/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V120, <<"include"/utf8>>))))))))))))))))))))), begin (V132 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(V117, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V120, <<"lib"/utf8>>)))))))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"libidris2_support.a"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-lidris2_refc "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V120, <<"refc "/utf8>>)), ('nested--16416-7494--in--un--clibdirs'(V0, V1, V2, V3, V4, case V120 of {'Idris.Core.Options.MkDirs', E30, E31, E32, E33, E34, E35, E36, E37, E38, E39} -> (fun (V122, V123, V124, V125, V126, V127, V128, V129, V130, V131) -> V130 end(E30, E31, E32, E33, E34, E35, E36, E37, E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))), begin (V161 = begin (V160 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V133) -> fun (V134) -> fun (V135) -> fun (V136) -> fun (V137) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V135, V136, V137)) end end end end end, fun (V138) -> fun (V139) -> fun (V140) -> V139 end end end, fun (V141) -> fun (V142) -> fun (V143) -> fun (V144) -> fun (V145) -> begin (V146 = (V143(V145))), begin (V147 = (V144(V145))), (V146(V147)) end end end end end end end}, fun (V148) -> fun (V149) -> fun (V150) -> fun (V151) -> fun (V152) -> begin (V153 = (V150(V152))), ((V151(V153))(V152)) end end end end end end, fun (V154) -> fun (V155) -> fun (V156) -> begin (V157 = (V155(V156))), (V157(V156)) end end end end}, fun (V158) -> fun (V159) -> V159 end end}, V121))(V12))), {'Idris.Prelude.Types.Right', V160} end), case V161 of {'Idris.Prelude.Types.Left', E40} -> (fun (V162) -> {'Idris.Prelude.Types.Left', V162} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V163) -> begin (V192 = begin (V191 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V166, V167, V168)) end end end end end, fun (V169) -> fun (V170) -> fun (V171) -> V170 end end end, fun (V172) -> fun (V173) -> fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V174(V176))), begin (V178 = (V175(V176))), (V177(V178)) end end end end end end end}, fun (V179) -> fun (V180) -> fun (V181) -> fun (V182) -> fun (V183) -> begin (V184 = (V181(V183))), ((V182(V184))(V183)) end end end end end end, fun (V185) -> fun (V186) -> fun (V187) -> begin (V188 = (V186(V187))), (V188(V187)) end end end end}, fun (V189) -> fun (V190) -> V190 end end}, V121))(V12))), {'Idris.Prelude.Types.Right', V191} end), case V192 of {'Idris.Prelude.Types.Left', E42} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V194) -> case V194 of 0 -> begin (V223 = begin (V222 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V197, V198, V199)) end end end end end, fun (V200) -> fun (V201) -> fun (V202) -> V201 end end end, fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V205(V207))), begin (V209 = (V206(V207))), (V208(V209)) end end end end end end end}, fun (V210) -> fun (V211) -> fun (V212) -> fun (V213) -> fun (V214) -> begin (V215 = (V212(V214))), ((V213(V215))(V214)) end end end end end end, fun (V216) -> fun (V217) -> fun (V218) -> begin (V219 = (V217(V218))), (V219(V218)) end end end end}, fun (V220) -> fun (V221) -> V221 end end}, V132))(V12))), {'Idris.Prelude.Types.Right', V222} end), case V223 of {'Idris.Prelude.Types.Left', E44} -> (fun (V224) -> {'Idris.Prelude.Types.Left', V224} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V225) -> begin (V254 = begin (V253 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V226) -> fun (V227) -> fun (V228) -> fun (V229) -> fun (V230) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V228, V229, V230)) end end end end end, fun (V231) -> fun (V232) -> fun (V233) -> V232 end end end, fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> fun (V238) -> begin (V239 = (V236(V238))), begin (V240 = (V237(V238))), (V239(V240)) end end end end end end end}, fun (V241) -> fun (V242) -> fun (V243) -> fun (V244) -> fun (V245) -> begin (V246 = (V243(V245))), ((V244(V246))(V245)) end end end end end end, fun (V247) -> fun (V248) -> fun (V249) -> begin (V250 = (V248(V249))), (V250(V249)) end end end end}, fun (V251) -> fun (V252) -> V252 end end}, V132))(V12))), {'Idris.Prelude.Types.Right', V253} end), case V254 of {'Idris.Prelude.Types.Left', E46} -> (fun (V255) -> {'Idris.Prelude.Types.Left', V255} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V256) -> case V256 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--compileExpr-7552'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> begin (V12 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.FunctionDefinitions'}, [], V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V15 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.TemporaryVariableTracker'}, [], V11))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V19 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.OutfileText'}, fun (V18) -> ('Idris.Idris2.Libraries.Data.DList':'un--Nil'('erased', V18)) end, V11))), case V19 of {'Idris.Prelude.Types.Left', E4} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V21) -> begin (V22 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.ExternalLibs'}, [], V11))), case V22 of {'Idris.Prelude.Types.Left', E6} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V24) -> begin (V25 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.IndentLevel'}, 0, V11))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> begin (V31 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V28) -> case V28 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V29, V30) -> ('un--createCFunctions'(V4, V10, V14, V17, V21, V27, V24, V29, V30)) end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V9))(V11))), case V31 of {'Idris.Prelude.Types.Left', E12} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V33) -> begin (V34 = (('un--header'(V14, V21, V27, V24))(V11))), case V34 of {'Idris.Prelude.Types.Left', E14} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V36) -> begin (V37 = ('un--footer'(V27, V21, V11))), case V37 of {'Idris.Prelude.Types.Left', E16} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V39) -> begin (V41 = begin (V40 = ('erlang':'get'(V21))), {'Idris.Prelude.Types.Right', V40} end), case V41 of {'Idris.Prelude.Types.Left', E18} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V43) -> begin (V45 = ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V44) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V44, <<"\x{a}"/utf8>>)) end, ('Idris.Idris2.Libraries.Data.DList':'un--reify'('erased', V43))))))), begin (V78 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V46) -> case V46 of {'Idris.Prelude.Types.Left', E20} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V48) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V49) -> begin (V77 = (('Idris.Idris2.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V52, V53, V54)) end end end end end, fun (V55) -> fun (V56) -> fun (V57) -> V56 end end end, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), begin (V64 = (V61(V62))), (V63(V64)) end end end end end end end}, fun (V65) -> fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> begin (V70 = (V67(V69))), ((V68(V70))(V69)) end end end end end end, fun (V71) -> fun (V72) -> fun (V73) -> begin (V74 = (V72(V73))), (V74(V73)) end end end end}, fun (V75) -> fun (V76) -> V76 end end}, V5, V45))(V49))), {'Idris.Prelude.Types.Right', V77} end end, V11))), case V78 of {'Idris.Prelude.Types.Left', E22} -> (fun (V79) -> {'Idris.Prelude.Types.Left', V79} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V80) -> begin (V113 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V81) -> case V81 of {'Idris.Prelude.Types.Left', E24} -> (fun (V82) -> {'Idris.Prelude.Types.Left', V82} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V83) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V84) -> begin (V112 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> fun (V89) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V87, V88, V89)) end end end end end, fun (V90) -> fun (V91) -> fun (V92) -> V91 end end end, fun (V93) -> fun (V94) -> fun (V95) -> fun (V96) -> fun (V97) -> begin (V98 = (V95(V97))), begin (V99 = (V96(V97))), (V98(V99)) end end end end end end end}, fun (V100) -> fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> begin (V105 = (V102(V104))), ((V103(V105))(V104)) end end end end end end, fun (V106) -> fun (V107) -> fun (V108) -> begin (V109 = (V107(V108))), (V109(V108)) end end end end}, fun (V110) -> fun (V111) -> V111 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated C file "/utf8>>, V5))))(V84))), {'Idris.Prelude.Types.Right', V112} end end, V11))), case V113 of {'Idris.Prelude.Types.Left', E26} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V115) -> begin (V117 = begin (V116 = ('un--findCC'(V11))), {'Idris.Prelude.Types.Right', V116} end), case V117 of {'Idris.Prelude.Types.Left', E28} -> (fun (V118) -> {'Idris.Prelude.Types.Left', V118} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V119) -> begin (V120 = ('Idris.Idris2.Core.Context':'un--getDirs'(V4, V11))), case V120 of {'Idris.Prelude.Types.Left', E30} -> (fun (V121) -> {'Idris.Prelude.Types.Left', V121} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V122) -> begin (V123 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V119, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -c "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V122, <<"refc "/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V122, <<"include"/utf8>>))))))))))))))))))))), begin (V134 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(V119, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V122, <<"lib"/utf8>>)))))))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"libidris2_support.a"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-lidris2_refc "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V122, <<"refc "/utf8>>)), ('nested--16416-7494--in--un--clibdirs'(V0, V1, V2, V3, V4, case V122 of {'Idris.Core.Options.MkDirs', E32, E33, E34, E35, E36, E37, E38, E39, E40, E41} -> (fun (V124, V125, V126, V127, V128, V129, V130, V131, V132, V133) -> V132 end(E32, E33, E34, E35, E36, E37, E38, E39, E40, E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))), begin (V163 = begin (V162 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V135) -> fun (V136) -> fun (V137) -> fun (V138) -> fun (V139) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V137, V138, V139)) end end end end end, fun (V140) -> fun (V141) -> fun (V142) -> V141 end end end, fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> begin (V148 = (V145(V147))), begin (V149 = (V146(V147))), (V148(V149)) end end end end end end end}, fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> begin (V155 = (V152(V154))), ((V153(V155))(V154)) end end end end end end, fun (V156) -> fun (V157) -> fun (V158) -> begin (V159 = (V157(V158))), (V159(V158)) end end end end}, fun (V160) -> fun (V161) -> V161 end end}, V123))(V11))), {'Idris.Prelude.Types.Right', V162} end), case V163 of {'Idris.Prelude.Types.Left', E42} -> (fun (V164) -> {'Idris.Prelude.Types.Left', V164} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V165) -> begin (V194 = begin (V193 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V166) -> fun (V167) -> fun (V168) -> fun (V169) -> fun (V170) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V168, V169, V170)) end end end end end, fun (V171) -> fun (V172) -> fun (V173) -> V172 end end end, fun (V174) -> fun (V175) -> fun (V176) -> fun (V177) -> fun (V178) -> begin (V179 = (V176(V178))), begin (V180 = (V177(V178))), (V179(V180)) end end end end end end end}, fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> begin (V186 = (V183(V185))), ((V184(V186))(V185)) end end end end end end, fun (V187) -> fun (V188) -> fun (V189) -> begin (V190 = (V188(V189))), (V190(V189)) end end end end}, fun (V191) -> fun (V192) -> V192 end end}, V123))(V11))), {'Idris.Prelude.Types.Right', V193} end), case V194 of {'Idris.Prelude.Types.Left', E44} -> (fun (V195) -> {'Idris.Prelude.Types.Left', V195} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V196) -> case V196 of 0 -> begin (V225 = begin (V224 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V197) -> fun (V198) -> fun (V199) -> fun (V200) -> fun (V201) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V199, V200, V201)) end end end end end, fun (V202) -> fun (V203) -> fun (V204) -> V203 end end end, fun (V205) -> fun (V206) -> fun (V207) -> fun (V208) -> fun (V209) -> begin (V210 = (V207(V209))), begin (V211 = (V208(V209))), (V210(V211)) end end end end end end end}, fun (V212) -> fun (V213) -> fun (V214) -> fun (V215) -> fun (V216) -> begin (V217 = (V214(V216))), ((V215(V217))(V216)) end end end end end end, fun (V218) -> fun (V219) -> fun (V220) -> begin (V221 = (V219(V220))), (V221(V220)) end end end end}, fun (V222) -> fun (V223) -> V223 end end}, V134))(V11))), {'Idris.Prelude.Types.Right', V224} end), case V225 of {'Idris.Prelude.Types.Left', E46} -> (fun (V226) -> {'Idris.Prelude.Types.Left', V226} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V227) -> begin (V256 = begin (V255 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V230, V231, V232)) end end end end end, fun (V233) -> fun (V234) -> fun (V235) -> V234 end end end, fun (V236) -> fun (V237) -> fun (V238) -> fun (V239) -> fun (V240) -> begin (V241 = (V238(V240))), begin (V242 = (V239(V240))), (V241(V242)) end end end end end end end}, fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> fun (V247) -> begin (V248 = (V245(V247))), ((V246(V248))(V247)) end end end end end end, fun (V249) -> fun (V250) -> fun (V251) -> begin (V252 = (V250(V251))), (V252(V251)) end end end end}, fun (V253) -> fun (V254) -> V254 end end}, V134))(V11))), {'Idris.Prelude.Types.Right', V255} end), case V256 of {'Idris.Prelude.Types.Left', E48} -> (fun (V257) -> {'Idris.Prelude.Types.Left', V257} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V258) -> case V258 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V7}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'case--case block in case block in createCFunctions-7183'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19) -> case V19 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V22, V23) -> ('un--extractValue'(V23, V22)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in createCFunctions-7048'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18) -> case V18 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V19, V20) -> case V20 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V21, V22) -> ('un--extractValue'(V22, V21)) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in createCFunctions-6977'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> fun (V18) -> begin (V24 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E12, E13} -> (fun (V20, V21) -> case V21 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V22, V23) -> ('un--extractValue'(V23, V22)) end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E12, E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'('erased', V16)))))), <<");"/utf8>>))))))))(V18))), case V24 of {'Idris.Prelude.Types.Left', E16} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V26) -> begin (V27 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"return NULL;"/utf8>>))(V18))), case V27 of {'Idris.Prelude.Types.Left', E18} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V29) -> begin (V30 = ('un--decreaseIndentation'(V5, V18))), case V30 of {'Idris.Prelude.Types.Left', E20} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V32) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V18)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> fun (V33) -> begin (V42 = begin (V34 = (('un--cTypeOfCFType'(V0))(V33))), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V36, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" retVal = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V37) -> case V37 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V38, V39) -> case V39 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V40, V41) -> ('un--extractValue'(V41, V40)) end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'('erased', V16)))))), <<");"/utf8>>))))))))))))(V33)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V42 of {'Idris.Prelude.Types.Left', E6} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V44) -> begin (V45 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return (Value*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--packCFType'(V0, <<"retVal"/utf8>>)), <<";"/utf8>>))))))(V33))), case V45 of {'Idris.Prelude.Types.Left', E8} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V47) -> begin (V48 = ('un--decreaseIndentation'(V5, V33))), case V48 of {'Idris.Prelude.Types.Left', E10} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V50) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V33)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'case--case block in createCFunctions-6757'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V13) -> case V13 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V14, V15) -> ('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// call ffi to a scheme substitute for "/utf8>>, V14)))) end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--createCFunctions-6727'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11) -> case V11 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('case--case block in createCFunctions-6757'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, ('un--extractFFILocation'(<<"scheme"/utf8>>, V2)))) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V12) -> case V12 of {'Idris.Builtin.MkPair', E1, E2} -> (fun (V13, V14) -> fun (V15) -> begin (V16 = ('un--addExternalLib'(V4, V14, V15))), case V16 of {'Idris.Prelude.Types.Left', E3} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V18) -> begin (V20 = begin (V19 = ('erlang':'get'(V8))), {'Idris.Prelude.Types.Right', V19} end), case V20 of {'Idris.Prelude.Types.Left', E5} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Data.List':'un--replicate'('erased', ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)), <<"Value *"/utf8>>)))), <<");"/utf8>>))))))))), begin (V24 = ('un--functionDefSignatureArglist'(V10, V3, V15))), case V24 of {'Idris.Prelude.Types.Left', E7} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V26) -> begin (V28 = begin (V27 = ('erlang':'put'(V8, [('Idris.Idris2.Prelude.Types.String':'un--++'(V23, <<"\x{a}"/utf8>>)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(V26, <<";\x{a}"/utf8>>)) | V22]]))), {'Idris.Prelude.Types.Right', V27} end), case V28 of {'Idris.Prelude.Types.Left', E9} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V30) -> begin (V31 = ('un--createFFIArgList'(V1, V15))), case V31 of {'Idris.Prelude.Types.Left', E11} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V33) -> begin (V34 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, V26))(V15))), case V34 of {'Idris.Prelude.Types.Left', E13} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V36) -> begin (V37 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V15))), case V37 of {'Idris.Prelude.Types.Left', E15} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V39) -> begin (V40 = ('un--increaseIndentation'(V5, V15))), case V40 of {'Idris.Prelude.Types.Left', E17} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V42) -> begin (V43 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return "/utf8>>, ('un--cName'(V3))))))(V15))), case V43 of {'Idris.Prelude.Types.Left', E19} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V45) -> begin (V46 = ('un--increaseIndentation'(V5, V15))), case V46 of {'Idris.Prelude.Types.Left', E21} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V48) -> begin (V49 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V15))), case V49 of {'Idris.Prelude.Types.Left', E23} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V51) -> begin (V52 = ('un--increaseIndentation'(V5, V15))), case V52 of {'Idris.Prelude.Types.Left', E25} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V54) -> begin (V56 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V55) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"arglist->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V55)), <<"]"/utf8>>)))) end, ('un--getArgsNrList'('erased', V1, 0))))))), begin (V58 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V57) -> ('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, V57)) end, V56))(V15))), case V58 of {'Idris.Prelude.Types.Left', E27} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V60) -> begin (V61 = ('un--decreaseIndentation'(V5, V15))), case V61 of {'Idris.Prelude.Types.Left', E29} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V63) -> begin (V64 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<");"/utf8>>))(V15))), case V64 of {'Idris.Prelude.Types.Left', E31} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V66) -> begin (V67 = ('un--decreaseIndentation'(V5, V15))), case V67 of {'Idris.Prelude.Types.Left', E33} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V69) -> begin (V70 = ('un--decreaseIndentation'(V5, V15))), case V70 of {'Idris.Prelude.Types.Left', E35} -> (fun (V71) -> {'Idris.Prelude.Types.Left', V71} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V72) -> begin (V73 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V15))), case V73 of {'Idris.Prelude.Types.Left', E37} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V75) -> begin (V76 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V15))), case V76 of {'Idris.Prelude.Types.Left', E39} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V78) -> begin (V79 = (('un--emitFDef'(V6, V5, V3, V33))(V15))), case V79 of {'Idris.Prelude.Types.Left', E41} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V81) -> begin (V82 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V15))), case V82 of {'Idris.Prelude.Types.Left', E43} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V84) -> begin (V85 = ('un--increaseIndentation'(V5, V15))), case V85 of {'Idris.Prelude.Types.Left', E45} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V87) -> begin (V88 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" // ffi call to "/utf8>>, V13))))(V15))), case V88 of {'Idris.Prelude.Types.Left', E47} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E47)); {'Idris.Prelude.Types.Right', E48} -> (fun (V90) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> begin (V96 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V91) -> case V91 of {'Idris.Builtin.MkPair', E61, E62} -> (fun (V92, V93) -> case V93 of {'Idris.Builtin.MkPair', E63, E64} -> (fun (V94, V95) -> ('un--extractValue'(V95, V94)) end(E63, E64)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E61, E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'('erased', V33)))))), <<");"/utf8>>))))))))(V15))), case V96 of {'Idris.Prelude.Types.Left', E65} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E65)); {'Idris.Prelude.Types.Right', E66} -> (fun (V98) -> begin (V99 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"return NULL;"/utf8>>))(V15))), case V99 of {'Idris.Prelude.Types.Left', E67} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E67)); {'Idris.Prelude.Types.Right', E68} -> (fun (V101) -> begin (V102 = ('un--decreaseIndentation'(V5, V15))), case V102 of {'Idris.Prelude.Types.Left', E69} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E69)); {'Idris.Prelude.Types.Right', E70} -> (fun (V104) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V15)) end(E70)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E68)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E66)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); _ -> begin (V113 = begin (V105 = (('un--cTypeOfCFType'(V0))(V15))), case V105 of {'Idris.Prelude.Types.Left', E49} -> (fun (V106) -> {'Idris.Prelude.Types.Left', V106} end(E49)); {'Idris.Prelude.Types.Right', E50} -> (fun (V107) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V107, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" retVal = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V13, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V108) -> case V108 of {'Idris.Builtin.MkPair', E51, E52} -> (fun (V109, V110) -> case V110 of {'Idris.Builtin.MkPair', E53, E54} -> (fun (V111, V112) -> ('un--extractValue'(V112, V111)) end(E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, ('un--discardLastArgument'('erased', V33)))))), <<");"/utf8>>))))))))))))(V15)) end(E50)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V113 of {'Idris.Prelude.Types.Left', E55} -> (fun (V114) -> {'Idris.Prelude.Types.Left', V114} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V115) -> begin (V116 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return (Value*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--packCFType'(V0, <<"retVal"/utf8>>)), <<";"/utf8>>))))))(V15))), case V116 of {'Idris.Prelude.Types.Left', E57} -> (fun (V117) -> {'Idris.Prelude.Types.Left', V117} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V118) -> begin (V119 = ('un--decreaseIndentation'(V5, V15))), case V119 of {'Idris.Prelude.Types.Left', E59} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V121) -> (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V15)) end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E48)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1, E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emitFDef-6273'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> case V9 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V10, V11) -> ('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", Value *"/utf8>>, V10)))) end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in extractFFILocation-5952'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> {'Idris.Prelude.Types.Just', ('un--readCCPart'($,, V4))}; 1 -> ('un--extractFFILocation'(V2, V1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--extractFFILocation-5934'(V0, V1, V2, V3) -> case V3 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V4, V5) -> ('case--case block in extractFFILocation-5952'(V0, V1, V2, V4, V5, ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V2, V4)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--readCCPart-5907'(V0, V1, V2) -> case V2 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V3, V4) -> {'Idris.Builtin.MkPair', V3, ('nested--14662-5888--in--un--drop'(V0, V1, 1, V4))} end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in cStatementsFromANF-5774'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V11, V12) -> fun (V13) -> begin (V14 = (('un--emit'(V5, V4, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"switch("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, <<")){"/utf8>>))))))))))))))))))(V13))), case V14 of {'Idris.Prelude.Types.Left', E2} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V16) -> begin (V17 = (('un--constBlockSwitch'(V7, V6, V5, V4, V1, V8, 0))(V13))), case V17 of {'Idris.Prelude.Types.Left', E4} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V19) -> begin (V20 = (('un--constDefaultBlock'(V7, V6, V5, V4, V0, V8))(V13))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V13))), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, <<");"/utf8>>))))))(V13))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V8, V8}} end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cStatementsFromANF-5679'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10) -> case V10 of 0 -> fun (V11) -> begin (V12 = (('un--emit'(V5, V4, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"switch(extractInt("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V2)), <<")){"/utf8>>))))))(V11))), case V12 of {'Idris.Prelude.Types.Left', E0} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V14) -> begin (V15 = (('un--constBlockSwitch'(V7, V6, V5, V4, V1, V8, 0))(V11))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = (('un--constDefaultBlock'(V7, V6, V5, V4, V0, V8))(V11))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V21 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V11))), case V21 of {'Idris.Prelude.Types.Left', E6} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V23) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V8, V8}} end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; 1 -> fun (V24) -> begin (V25 = (('un--makeNonIntSwitchStatementConst'(V7, V6, V5, V4, V1, 0, <<""/utf8>>, <<""/utf8>>))(V24))), case V25 of {'Idris.Prelude.Types.Left', E8} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V27) -> case V27 of {'Idris.Builtin.MkPair', E10, E11} -> (fun (V28, V29) -> begin (V30 = (('un--emit'(V5, V4, V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"switch("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V29, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V2)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V28, <<")){"/utf8>>))))))))))))))))))(V24))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V33 = (('un--constBlockSwitch'(V7, V6, V5, V4, V1, V8, 0))(V24))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V36 = (('un--constDefaultBlock'(V7, V6, V5, V4, V0, V8))(V24))), case V36 of {'Idris.Prelude.Types.Left', E16} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V38) -> begin (V39 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V24))), case V39 of {'Idris.Prelude.Types.Left', E18} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V41) -> begin (V42 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V28, <<");"/utf8>>))))))(V24))), case V42 of {'Idris.Prelude.Types.Left', E20} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V44) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V8, V8}} end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10, E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cStatementsFromANF-5488'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V14) -> begin (V15 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V14))), case V15 of {'Idris.Prelude.Types.Left', E0} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V17) -> begin (V18 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, <<");"/utf8>>))))))(V14))), case V18 of {'Idris.Prelude.Types.Left', E2} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V20) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V9, V9}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E4} -> (fun (V21) -> fun (V22) -> begin (V23 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"  default : {"/utf8>>))(V22))), case V23 of {'Idris.Prelude.Types.Left', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V25) -> begin (V26 = ('un--increaseIndentation'(V4, V22))), case V26 of {'Idris.Prelude.Types.Left', E7} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V28) -> begin (V29 = ('un--newTemporaryVariableLevel'(V6, V22))), case V29 of {'Idris.Prelude.Types.Left', E9} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V31) -> begin (V32 = (('un--cStatementsFromANF'(V7, V6, V5, V4, V21))(V22))), case V32 of {'Idris.Prelude.Types.Left', E11} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V34) -> begin (V37 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V34 of {'Idris.Compiler.RefC.RefC.MkRS', E13, E14} -> (fun (V35, V36) -> V35 end(E13, E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V22))), case V37 of {'Idris.Prelude.Types.Left', E15} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V39) -> begin (V40 = ('un--freeTmpVars'(V6, V5, V4, V22))), case V40 of {'Idris.Prelude.Types.Left', E17} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V42) -> begin (V43 = ('un--decreaseIndentation'(V4, V22))), case V43 of {'Idris.Prelude.Types.Left', E19} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V45) -> begin (V46 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V22))), case V46 of {'Idris.Prelude.Types.Left', E21} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V48) -> begin (V49 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V22))), case V49 of {'Idris.Prelude.Types.Left', E23} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E23)); {'Idris.Prelude.Types.Right', E24} -> (fun (V51) -> begin (V52 = (('un--emit'(V5, V4, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V11, <<");"/utf8>>))))))(V22))), case V52 of {'Idris.Prelude.Types.Left', E25} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V9, V9}} end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--makeNonIntSwitchStatementConst-4875'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V3 of {'Idris.Core.TT.Str', E0} -> (fun (V9) -> fun (V10) -> begin (V11 = ('un--getNextCounter'(V8, V10))), case V11 of {'Idris.Prelude.Types.Left', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V13) -> begin (V14 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V13))))), begin (V15 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"char **"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = (char**)malloc(sizeof(char*) * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V4)))))), <<");"/utf8>>))))))))))(V10))), case V15 of {'Idris.Prelude.Types.Left', E3} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V17) -> (('un--makeNonIntSwitchStatementConst'(V8, V7, V6, V5, [{'Idris.Compiler.ANF.MkAConstAlt', V3, V2} | V4], 1, V14, <<"multiStringCompare"/utf8>>))(V10)) end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); {'Idris.Core.TT.Db', E5} -> (fun (V18) -> fun (V19) -> begin (V20 = ('un--getNextCounter'(V8, V19))), case V20 of {'Idris.Prelude.Types.Left', E6} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V22) -> begin (V23 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V22))))), begin (V24 = (('un--emit'(V6, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"double *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V23, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = (double*)malloc(sizeof(double) * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V4)))))), <<");"/utf8>>))))))))))(V19))), case V24 of {'Idris.Prelude.Types.Left', E8} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V26) -> (('un--makeNonIntSwitchStatementConst'(V8, V7, V6, V5, [{'Idris.Compiler.ANF.MkAConstAlt', V3, V2} | V4], 1, V23, <<"multiDoubleCompare"/utf8>>))(V19)) end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> fun (V27) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>, <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>}} end end.
'case--copyConstructors-4513'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13) -> case V13 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V14, V15) -> fun (V16) -> begin (V17 = (('un--emit'(V10, V9, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"].tag = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V14, <<";"/utf8>>))))))))))))(V16))), case V17 of {'Idris.Prelude.Types.Left', E2} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V19) -> begin (V20 = (('un--emit'(V10, V9, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V5)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"].name = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V15, <<";"/utf8>>))))))))))))(V16))), case V20 of {'Idris.Prelude.Types.Left', E4} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V22) -> (('un--copyConstructors'(V12, V11, V10, V9, V8, V4, V7, V6, (1 + V5)))(V16)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--const2Integer-4375'(V0, V1) -> case V1 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V2)) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V3) -> V3 end(E1)); {'Idris.Core.TT.Ch', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Integer'(V4)) end(E2)); {'Idris.Core.TT.B8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V5)) end(E3)); {'Idris.Core.TT.B16', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V6)) end(E4)); {'Idris.Core.TT.B32', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V7)) end(E5)); {'Idris.Core.TT.B64', E6} -> (fun (V8) -> V8 end(E6)); _ -> V0 end.
'case--integer_switch-4352'(V0, V1, V2) -> case V2 of {'Idris.Core.TT.I', E0} -> (fun (V3) -> 0 end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V4) -> 0 end(E1)); {'Idris.Core.TT.Ch', E2} -> (fun (V5) -> 0 end(E2)); _ -> 1 end.
'case--addExternalLib-4136'(V0, V1, V2, V3) -> case V3 of 0 -> fun (V4) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; 1 -> fun (V5) -> begin (V6 = ('erlang':'put'(V1, [V0 | V2]))), {'Idris.Prelude.Types.Right', V6} end end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--freeTmpVars-4083'(V0, V1, V2, V3) -> case V3 of [E0 | E1] -> (fun (V4, V5) -> fun (V6) -> begin (V8 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V7) -> ('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"removeReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, <<");"/utf8>>)))))) end, V4))(V6))), case V8 of {'Idris.Prelude.Types.Left', E2} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V10) -> begin (V11 = ('erlang':'put'(V2, V5))), {'Idris.Prelude.Types.Right', V11} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); [] -> fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--emit-3991'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V7 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V8) -> fun (V9) -> ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Libraries.Data.DList':'un--snoc'('erased', V10, V11, V12)) end end end, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--lJust'(V6, ('un--maxLineLengthForComment'()), $ )), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, V4)))), V9)) end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V13) -> fun (V14) -> ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V15) -> fun (V16) -> fun (V17) -> ('Idris.Idris2.Libraries.Data.DList':'un--appendR'('erased', V15, V16, V17)) end end end, [V6 | [('Idris.Idris2.Prelude.Types.String':'un--++'(('un--lJust'(<<""/utf8>>, ('un--maxLineLengthForComment'()), $ )), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, V4)))) | []]], V14)) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--lJust-3886'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Prelude.Types.Yes', E0} -> (fun (V5) -> begin (V6 = ('Idris.Idris2.Prelude.Types':'un--minus'(V1, V3))), begin (V7 = ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', V6, V0))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, V7)) end end end(E0)); {'Idris.Prelude.Types.No', E1} -> (fun (V8) -> V2 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--registerVariableForAutomaticFreeing-3813'(V0, V1, V2) -> case V2 of [] -> [[V0 | []] | []]; [E0 | E1] -> (fun (V3, V4) -> [[V0 | V3] | V4] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in case block in cStringQuoted,showCChar-2541'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}u"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + (1 + (1 + 0)))), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))))), <<"\x{22}\x{22}"/utf8>>)), V3)) end; 1 -> fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}U"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))))), <<"\x{22}\x{22}"/utf8>>)), V4)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in cStringQuoted,showCChar-2519'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--strCons'(V1, V3)) end; 1 -> ('case--case block in case block in cStringQuoted,showCChar-2541'(V0, V1, ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(65536)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--cStringQuoted,showCChar-2484'(V0, V1, V2) -> case V2 of 0 -> fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}x"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + 0)), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V1)))))))), <<"\x{22}\x{22}"/utf8>>)), V3)) end; 1 -> ('case--case block in cStringQuoted,showCChar-2519'(V0, V1, ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(127)))))); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--showcCleanStringChar-2245'(V0, V1) -> case V1 of 0 -> fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"u"/utf8>>, ('Idris.Idris2.Libraries.Utils.Hex':'un--leftPad'($0, (1 + (1 + (1 + (1 + 0)))), ('Idris.Idris2.Libraries.Utils.Hex':'un--asHex'(('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Int'(V0)))))))), V2)) end; 1 -> fun (V3) -> ('Idris.Idris2.Prelude.Types':'un--strCons'(V0, V3)) end; _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--case block in findCC-2108'(V0, V1) -> case V1 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V2) -> <<"cc"/utf8>> end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V3) -> fun (V4) -> V3 end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'case--findCC-2088'(V0) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V1) -> begin (V29 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> fun (V6) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V4, V5, V6)) end end end end end, fun (V7) -> fun (V8) -> fun (V9) -> V8 end end end, fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> begin (V15 = (V12(V14))), begin (V16 = (V13(V14))), (V15(V16)) end end end end end end end}, fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> begin (V22 = (V19(V21))), ((V20(V22))(V21)) end end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V24(V25))), (V26(V25)) end end end end}, fun (V27) -> fun (V28) -> V28 end end}, <<"CC"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V1))), case V29 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"cc"/utf8>> end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V30) -> V30 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V31) -> fun (V32) -> V31 end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13067-4597--in--un--varBindLines'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14) -> case V13 of [] -> fun (V15) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V16, V17) -> fun (V18) -> begin (V19 = (('un--emit'(V9, V8, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V16)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = ((Value_Constructor*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V14)), <<"];"/utf8>>))))))))))))))(V18))), case V19 of {'Idris.Prelude.Types.Left', E2} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V21) -> begin (V22 = (('nested--13067-4597--in--un--varBindLines'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V17, (1 + V14)))(V18))), case V22 of {'Idris.Prelude.Types.Left', E4} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V24) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11002-2467--in--un--showCString'(V0, V1) -> case V1 of [] -> fun (V2) -> V2 end; [E0 | E1] -> (fun (V3, V4) -> case V3 of $\x{22} -> fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{5c}\x{22}"/utf8>>, (('nested--11002-2467--in--un--showCString'(V0, V4))(V5)))) end; _ -> fun (V6) -> (('nested--11002-2466--in--un--showCChar'(V0, V3))((('nested--11002-2467--in--un--showCString'(V0, V4))(V6)))) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--11002-2466--in--un--showCChar'(V0, V1) -> case V1 of $\x{5c} -> fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"bkslash"/utf8>>, V2)) end; _ -> ('case--cStringQuoted,showCChar-2484'(V0, V1, ('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V1, ('Idris.Idris2.Prelude.Types':'un--chr'(32)))))) end.
'nested--12776-4167--in--un--pushArgToArglist'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V7 of [] -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V10, V11) -> fun (V12) -> begin (V13 = (('un--emit'(V3, V2, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V10)), <<");"/utf8>>))))))))))))))(V12))), case V13 of {'Idris.Prelude.Types.Left', E2} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V15) -> (('nested--12776-4167--in--un--pushArgToArglist'(V0, V1, V2, V3, V4, V5, V6, V11, (1 + V8)))(V12)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--13062-4465--in--un--getNameTag'(V0, V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15) -> case V14 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V16) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<"-1"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V15)), <<"\x{22}"/utf8>>))))}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V17)), <<"NULL"/utf8>>}} end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'nested--16416-7493--in--un--fullprefix_dir'(V0, V1, V2, V3, V4, V5, V6) -> ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(case V5 of {'Idris.Core.Options.MkDirs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9} -> (fun (V7, V8, V9, V10, V11, V12, V13, V14, V15, V16) -> V12 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2-"/utf8>>, ('Idris.Idris2.Idris.Version':'un--showVersion'(1, ('Idris.Idris2.Idris.Version':'un--version'()))))), V6)))).
'nested--14662-5888--in--un--drop'(V0, V1, V2, V3) -> begin (V4 = ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Nat_Int'(('Idris.Idris2.Prelude.Types.String':'un--length'(V3))))), begin (V5 = ('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V4, V2))), ('Idris.Idris2.Data.String':'un--strSubstr'(V2, V5, V3)) end end.
'nested--16416-7494--in--un--clibdirs'(V0, V1, V2, V3, V4, V5) -> (('Idris.Idris2.Prelude.Interfaces':'un--concat'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldr_Foldable_List'('erased', 'erased', V9, V10, V11)) end end end end end, fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> fun (V16) -> ('Idris.Idris2.Prelude.Types':'dn--un--foldl_Foldable_List'('erased', 'erased', V14, V15, V16)) end end end end end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Types':'dn--un--null_Foldable_List'('erased', V18)) end end}, {'Idris.Prelude.Interfaces.dn--un--__mkMonoid', fun (V19) -> fun (V20) -> ('Idris.Idris2.Prelude.Types':'dn--un--<+>_Semigroup_String'(V19, V20)) end end, ('Idris.Idris2.Prelude.Types':'dn--un--neutral_Monoid_String'())}}))(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, <<" "/utf8>>)))) end, V5)))).
'dn--un--show_Show_ExtPrim'(V0) -> case V0 of {'Idris.Compiler.RefC.RefC.NewIORef'} -> (fun () -> <<"newIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ReadIORef'} -> (fun () -> <<"readIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.WriteIORef'} -> (fun () -> <<"writeIORef"/utf8>> end()); {'Idris.Compiler.RefC.RefC.NewArray'} -> (fun () -> <<"newArray"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ArrayGet'} -> (fun () -> <<"arrayGet"/utf8>> end()); {'Idris.Compiler.RefC.RefC.ArraySet'} -> (fun () -> <<"arraySet"/utf8>> end()); {'Idris.Compiler.RefC.RefC.GetField'} -> (fun () -> <<"getField"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SetField'} -> (fun () -> <<"setField"/utf8>> end()); {'Idris.Compiler.RefC.RefC.VoidElim'} -> (fun () -> <<"voidElim"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SysOS'} -> (fun () -> <<"sysOS"/utf8>> end()); {'Idris.Compiler.RefC.RefC.SysCodegen'} -> (fun () -> <<"sysCodegen"/utf8>> end()); {'Idris.Compiler.RefC.RefC.OnCollect'} -> (fun () -> <<"onCollect"/utf8>> end()); {'Idris.Compiler.RefC.RefC.OnCollectAny'} -> (fun () -> <<"onCollectAny"/utf8>> end()); {'Idris.Compiler.RefC.RefC.Unknown', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Unknown "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V1)))) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--showPrec_Show_ExtPrim'(V0, V1) -> ('dn--un--show_Show_ExtPrim'(V1)).
'dn--un--__Impl_Show_ExtPrim'() -> {'Idris.Prelude.Show.dn--un--__mkShow', fun (V0) -> ('dn--un--show_Show_ExtPrim'(V0)) end, fun (V1) -> fun (V2) -> ('dn--un--showPrec_Show_ExtPrim'(V1, V2)) end end}.
'un--varNamesFromList'(V0, V1, V2) -> ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V3)))) end, ('un--getArgsNrList'('erased', V1, V2)))).
'un--varName'(V0) -> case V0 of {'Idris.Compiler.ANF.ALocal', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)))) end(E0)); {'Idris.Compiler.ANF.ANull'} -> (fun () -> <<"NULL"/utf8>> end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--toPrim'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Core.Core':'un--cond'('erased', [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__newIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.NewIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__readIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ReadIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__writeIORef"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.WriteIORef'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__newArray"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.NewArray'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__arrayGet"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ArrayGet'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__arraySet"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.ArraySet'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__getField"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.GetField'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__setField"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SetField'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"void"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.VoidElim'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__void"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.VoidElim'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__os"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SysOS'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__codegen"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.SysCodegen'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__onCollect"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.OnCollect'} end} | [{'Idris.Builtin.MkPair', fun () -> ('Idris.Idris2.Core.Name':'dn--un--==_Eq_Name'(V2, {'Idris.Core.Name.UN', <<"prim__onCollectAny"/utf8>>})) end, fun () -> {'Idris.Compiler.RefC.RefC.OnCollectAny'} end} | []]]]]]]]]]]]]]], {'Idris.Compiler.RefC.RefC.Unknown', V0})) end(E0, E1)); _ -> {'Idris.Compiler.RefC.RefC.Unknown', V0} end.
'un--showcCleanStringChar'(V0) -> case V0 of $+ -> fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_plus"/utf8>>, V1)) end; $- -> fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"__"/utf8>>, V2)) end; $* -> fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_star"/utf8>>, V3)) end; $/ -> fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_slash"/utf8>>, V4)) end; $\x{5c} -> fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_backslash"/utf8>>, V5)) end; $< -> fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_lt"/utf8>>, V6)) end; $> -> fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_gt"/utf8>>, V7)) end; $= -> fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_eq"/utf8>>, V8)) end; $& -> fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_and"/utf8>>, V9)) end; $| -> fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_or"/utf8>>, V10)) end; $\x{27} -> fun (V11) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_tick"/utf8>>, V11)) end; $\x{22} -> fun (V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_quotation"/utf8>>, V12)) end; $( -> fun (V13) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_parenOpen"/utf8>>, V13)) end; $) -> fun (V14) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_parenClose"/utf8>>, V14)) end; ${ -> fun (V15) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_braceOpen"/utf8>>, V15)) end; $} -> fun (V16) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_braceClose"/utf8>>, V16)) end; $  -> fun (V17) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, V17)) end; $: -> fun (V18) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_colon"/utf8>>, V18)) end; $. -> fun (V19) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_dot"/utf8>>, V19)) end; $$ -> fun (V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_dollar"/utf8>>, V20)) end; $, -> fun (V21) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_comma"/utf8>>, V21)) end; $# -> fun (V22) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_number"/utf8>>, V22)) end; $% -> fun (V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_percent"/utf8>>, V23)) end; $~ -> fun (V24) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_tilde"/utf8>>, V24)) end; _ -> ('case--showcCleanStringChar-2245'(V0, ('Idris.Idris2.Prelude.Basics':'un--||'(('Idris.Idris2.Prelude.EqOrd':'dn--un--<_Ord_Char'(V0, ('Idris.Idris2.Prelude.Types':'un--chr'(32)))), fun () -> ('Idris.Idris2.Prelude.EqOrd':'dn--un-->_Ord_Char'(V0, ('Idris.Idris2.Prelude.Types':'un--chr'(126)))) end)))) end.
'un--showcCleanString'(V0) -> case V0 of [] -> fun (V1) -> V1 end; [E0 | E1] -> (fun (V2, V3) -> fun (V4) -> (('un--showcCleanStringChar'(V2))((('un--showcCleanString'(V3))(V4)))) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--showTag'(V0) -> case V0 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"-1"/utf8>> end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--registerVariableForAutomaticFreeing'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> begin (V9 = ('erlang':'put'(V0, case V6 of [] -> [[V1 | []] | []]; [E2 | E3] -> (fun (V7, V8) -> [[V1 | V7] | V8] end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))), {'Idris.Prelude.Types.Right', V9} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--readCCPart'(V0, V1) -> ('case--readCCPart-5907'(V1, V0, ('Idris.Idris2.Data.String':'un--break'(fun (V2) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_Char'(V2, V0)) end, V1)))).
'un--plainOp'(V0, V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, V1)), <<")"/utf8>>)))))).
'un--packCFType'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> <<"NULL"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt16("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeInt8("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeString("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeChar("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makePointer("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makePointer("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeBuffer("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeWorld("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeFunction("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V4) -> ('un--packCFType'(V4, V1)) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeStruct("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"makeCustomUser("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")"/utf8>>)))) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--newTemporaryVariableLevel'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('erlang':'put'(V0, [[] | V5]))), {'Idris.Prelude.Types.Right', V6} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--maxLineLengthForComment'() -> (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + (1 + 0)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))).
'un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V4 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V6, V7}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V11, V12) -> case V5 of 0 -> case V11 of {'Idris.Core.TT.Str', E6} -> (fun (V13) -> fun (V14) -> begin (V15 = ('un--getNextCounter'(V0, V14))), case V15 of {'Idris.Prelude.Types.Left', E7} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V17))))), begin (V19 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"char **"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V18, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = (char**)malloc(sizeof(char*) * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V10)))))), <<");"/utf8>>))))))))))(V14))), case V19 of {'Idris.Prelude.Types.Left', E9} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V21) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, [{'Idris.Compiler.ANF.MkAConstAlt', V11, V12} | V10], 1, V18, <<"multiStringCompare"/utf8>>))(V14)) end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E6)); {'Idris.Core.TT.Db', E11} -> (fun (V22) -> fun (V23) -> begin (V24 = ('un--getNextCounter'(V0, V23))), case V24 of {'Idris.Prelude.Types.Left', E12} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V26) -> begin (V27 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constantArray_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V26))))), begin (V28 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"double *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V27, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = (double*)malloc(sizeof(double) * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'((1 + 0), ('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V10)))))), <<");"/utf8>>))))))))))(V23))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, [{'Idris.Compiler.ANF.MkAConstAlt', V11, V12} | V10], 1, V27, <<"multiDoubleCompare"/utf8>>))(V23)) end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> fun (V31) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>, <<"ERROR_NOT_DOUBLE_OR_STRING"/utf8>>}} end end; _ -> fun (V32) -> begin (V33 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(('Idris.Idris2.Prelude.Num':'dn--un---_Neg_Int'(V5, 1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--extractConstant'(V11)), <<";"/utf8>>))))))))))))(V32))), case V33 of {'Idris.Prelude.Types.Left', E4} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V35) -> (('un--makeNonIntSwitchStatementConst'(V0, V1, V2, V3, V10, ((V5 + 1) rem 9223372036854775808), V6, V7))(V32)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--makeArglist'(V0, V1, V2, V3, V4, V5, V6) -> begin (V7 = ('un--getNextCounter'(V0, V6))), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V10 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"arglist_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V9))))), begin (V11 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value_Arglist *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = newArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<","/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types':'dn--un--+_Num_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V5)), V4)))), <<");"/utf8>>))))))))))))))(V6))), case V11 of {'Idris.Prelude.Types.Left', E2} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V13) -> begin (V14 = (('nested--12776-4167--in--un--pushArgToArglist'(V5, V4, V3, V2, V1, V0, V10, V5, 0))(V6))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Right', V10} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--lJust'(V0, V1, V2) -> begin (V3 = ('Idris.Idris2.Prelude.Types.String':'un--length'(V0))), ('case--lJust-3886'(V2, V1, V0, V3, ('Idris.Idris2.Data.Nat':'un--isLTE'(V3, V1)))) end.
'un--integer_switch'(V0) -> case V0 of [] -> 0; [E0 | E1] -> (fun (V1, V2) -> case V1 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V3, V4) -> case V3 of {'Idris.Core.TT.I', E4} -> (fun (V5) -> 0 end(E4)); {'Idris.Core.TT.BI', E5} -> (fun (V6) -> 0 end(E5)); {'Idris.Core.TT.Ch', E6} -> (fun (V7) -> 0 end(E6)); _ -> 1 end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--indentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types':'un--pack'(('Idris.Idris2.Data.List':'un--replicate'('erased', ('Idris.Idris2.Prelude.Types':'dn--un--*_Num_Nat'((1 + (1 + (1 + (1 + 0)))), V5)), $ ))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--increaseIndentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('erlang':'put'(V0, (1 + V5)))), {'Idris.Prelude.Types.Right', V6} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--header'(V0, V1, V2, V3) -> begin (V4 = [<<"#include <runtime.h>"/utf8>> | [<<"/* automatically generated using the Idris2 C Backend */"/utf8>> | [<<"#include <idris_support.h> // for libidris2_support"/utf8>> | []]]]), fun (V5) -> begin (V7 = begin (V6 = ('erlang':'get'(V3))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E0} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V9) -> begin (V11 = ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// add header(s) for library: "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, <<"\x{a}"/utf8>>)))) end, V9))), begin (V42 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V12) -> fun (V13) -> begin (V41 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V16, V17, V18)) end end end end end, fun (V19) -> fun (V20) -> fun (V21) -> V20 end end end, fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> begin (V27 = (V24(V26))), begin (V28 = (V25(V26))), (V27(V28)) end end end end end end end}, fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> begin (V34 = (V31(V33))), ((V32(V34))(V33)) end end end end end end, fun (V35) -> fun (V36) -> fun (V37) -> begin (V38 = (V36(V37))), (V38(V37)) end end end end}, fun (V39) -> fun (V40) -> V40 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" header for "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V12, <<" needed"/utf8>>))))))(V13))), {'Idris.Prelude.Types.Right', V41} end end end, V9))(V5))), case V42 of {'Idris.Prelude.Types.Left', E2} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V44) -> begin (V46 = begin (V45 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V45} end), case V46 of {'Idris.Prelude.Types.Left', E4} -> (fun (V47) -> {'Idris.Prelude.Types.Left', V47} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V48) -> begin (V50 = begin (V49 = ('erlang':'get'(V1))), {'Idris.Prelude.Types.Right', V49} end), case V50 of {'Idris.Prelude.Types.Left', E6} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V52) -> begin (V54 = ('erlang':'put'(V1, fun (V53) -> ('Idris.Idris2.Libraries.Data.DList':'un--appendL'('erased', ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V4, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', V11, ('Idris.Idris2.Prelude.Types.List':'un--++'('erased', [<<"\x{a}// function definitions"/utf8>> | []], V48)))))), V52, V53)) end))), {'Idris.Prelude.Types.Right', V54} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end.
'un--getNextCounter'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V7 = begin (V6 = ('erlang':'put'(V0, (1 + V5)))), {'Idris.Prelude.Types.Right', V6} end), case V7 of {'Idris.Prelude.Types.Left', E2} -> (fun (V8) -> {'Idris.Prelude.Types.Left', V8} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V9) -> {'Idris.Prelude.Types.Right', V5} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V1) -> begin (V2 = ('un--getNextCounter'(V0, V1))), case V2 of {'Idris.Prelude.Types.Left', E0} -> (fun (V3) -> {'Idris.Prelude.Types.Left', V3} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V4) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"tmp_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--getArgsNrList'(V0, V1, V2) -> case V1 of [] -> []; [E0 | E1] -> (fun (V3, V4) -> [V2 | ('un--getArgsNrList'('erased', V4, (1 + V2)))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--functionDefSignatureArglist'(V0, V1, V2) -> begin (V3 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V5)), <<"_arglist(Value_Arglist* arglist)"/utf8>>))))} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--functionDefSignature'(V0, V1, V2) -> case V2 of [] -> fun (V3) -> begin (V4 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))(V3))), case V4 of {'Idris.Prelude.Types.Left', E2} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V6) -> begin (V7 = ('un--cName'(V6))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{a}Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, <<"(void)"/utf8>>))))} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end; _ -> begin (V9 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)))) end, V2))))), fun (V10) -> begin (V11 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V1))(V10))), case V11 of {'Idris.Prelude.Types.Left', E0} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V13) -> begin (V14 = ('un--cName'(V13))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}\x{a}Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V14, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}(\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<"\x{a}"/utf8>>, V9)), <<"\x{a})"/utf8>>))))))))} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--freeTmpVars'(V0, V1, V2, V3) -> begin (V5 = begin (V4 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V4} end), case V5 of {'Idris.Prelude.Types.Left', E0} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V7) -> case V7 of [E2 | E3] -> (fun (V8, V9) -> begin (V11 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V10) -> ('un--emit'(V1, V2, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"removeReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V10, <<");"/utf8>>)))))) end, V8))(V3))), case V11 of {'Idris.Prelude.Types.Left', E4} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V13) -> begin (V14 = ('erlang':'put'(V0, V9))), {'Idris.Prelude.Types.Right', V14} end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2, E3)); [] -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}}; _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--footer'(V0, V1, V2) -> begin (V3 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V2))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<" // main function"/utf8>>))(V2))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> begin (V9 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"int main()"/utf8>>))(V2))), case V9 of {'Idris.Prelude.Types.Left', E4} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V11) -> begin (V12 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V2))), case V12 of {'Idris.Prelude.Types.Left', E6} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V14) -> begin (V15 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   Value *mainExprVal = __mainExpression_0();"/utf8>>))(V2))), case V15 of {'Idris.Prelude.Types.Left', E8} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V17) -> begin (V18 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   trampoline(mainExprVal);"/utf8>>))(V2))), case V18 of {'Idris.Prelude.Types.Left', E10} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V20) -> begin (V21 = (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"   return 0; // bye bye"/utf8>>))(V2))), case V21 of {'Idris.Prelude.Types.Left', E12} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V23) -> (('un--emit'(V1, V0, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V2)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--findCC'(V0) -> begin (V28 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> fun (V5) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V3, V4, V5)) end end end end end, fun (V6) -> fun (V7) -> fun (V8) -> V7 end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> begin (V14 = (V11(V13))), begin (V15 = (V12(V13))), (V14(V15)) end end end end end end end}, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), ((V19(V21))(V20)) end end end end end end, fun (V22) -> fun (V23) -> fun (V24) -> begin (V25 = (V23(V24))), (V25(V24)) end end end end}, fun (V26) -> fun (V27) -> V27 end end}, <<"IDRIS2_CC"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V0))), case V28 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V56 = (('Idris.Idris2.Idris.Env':'un--idrisGetEnv'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V29) -> fun (V30) -> fun (V31) -> fun (V32) -> fun (V33) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V31, V32, V33)) end end end end end, fun (V34) -> fun (V35) -> fun (V36) -> V35 end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> begin (V42 = (V39(V41))), begin (V43 = (V40(V41))), (V42(V43)) end end end end end end end}, fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> begin (V49 = (V46(V48))), ((V47(V49))(V48)) end end end end end end, fun (V50) -> fun (V51) -> fun (V52) -> begin (V53 = (V51(V52))), (V53(V52)) end end end end}, fun (V54) -> fun (V55) -> V55 end end}, <<"CC"/utf8>>, {'Idris.Data.Maybe.ItIsJust'}))(V0))), case V56 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> <<"cc"/utf8>> end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V57) -> V57 end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E1} -> (fun (V58) -> V58 end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--fillConstructorArgs'(V0, V1, V2, V3, V4) -> case V3 of [] -> fun (V5) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V6, V7) -> fun (V8) -> begin (V9 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V2, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"] = newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V6)), <<");"/utf8>>))))))))))))(V8))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> (('un--fillConstructorArgs'(V0, V1, V2, V7, (1 + V4)))(V8)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extractValue'(V0, V1) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> <<"void"/utf8>> end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int32*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i32"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int8*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i8"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int16*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i16"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int32*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i32"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Int64*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->i64"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_String*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->str"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Double*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->d"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Char*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->c"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Pointer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->p"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_GCPointer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->p->p"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"((Value_Buffer*)"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<")->buffer"/utf8>>)))) end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value_World*)"/utf8>>, V1)) end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V2, V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value* "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"/* function pointer not implemented */"/utf8>>)))) end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V4) -> ('un--extractValue'(V4, V1)) end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V5, V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value* "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1, <<"/* struct access not implemented */"/utf8>>)))) end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V7, V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value* "/utf8>>, V1)) end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extractFFILocation'(V0, V1) -> case V1 of [] -> {'Idris.Prelude.Types.Nothing'}; [E0 | E1] -> (fun (V2, V3) -> ('case--extractFFILocation-5934'(V2, V3, V0, ('un--readCCPart'($:, V2)))) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--extractConstant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2)) end(E1)); {'Idris.Core.TT.Db', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V3)) end(E2)); {'Idris.Core.TT.Ch', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V4)) end(E3)); {'Idris.Core.TT.Str', E4} -> (fun (V5) -> ('un--cStringQuoted'(V5)) end(E4)); {'Idris.Core.TT.B8', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)) end(E5)); {'Idris.Core.TT.B16', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)) end(E6)); {'Idris.Core.TT.B32', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)) end(E7)); {'Idris.Core.TT.B64', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V9)) end(E8)); _ -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"unable_to_extract constant >>"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V0)), <<"<<"/utf8>>)))) end.
'un--executeExpr'(V0, V1, V2, V3) -> begin (V36 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V4) -> case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V7) -> begin (V35 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V10, V11, V12)) end end end end end, fun (V13) -> fun (V14) -> fun (V15) -> V14 end end end, fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> begin (V21 = (V18(V20))), begin (V22 = (V19(V20))), (V21(V22)) end end end end end end end}, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> begin (V28 = (V25(V27))), ((V26(V28))(V27)) end end end end end end, fun (V29) -> fun (V30) -> fun (V31) -> begin (V32 = (V30(V31))), (V32(V31)) end end end end}, fun (V33) -> fun (V34) -> V34 end end}, <<"Execute expression not yet implemented for refc"/utf8>>))(V7))), {'Idris.Prelude.Types.Right', V35} end end, V3))), case V36 of {'Idris.Prelude.Types.Left', E2} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V38) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V39) -> case V39 of {'Idris.Prelude.Types.Left', E4} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V41) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V42) -> begin (V70 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V43) -> fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V45, V46, V47)) end end end end end, fun (V48) -> fun (V49) -> fun (V50) -> V49 end end end, fun (V51) -> fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> begin (V56 = (V53(V55))), begin (V57 = (V54(V55))), (V56(V57)) end end end end end end end}, fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> begin (V63 = (V60(V62))), ((V61(V63))(V62)) end end end end end end, fun (V64) -> fun (V65) -> fun (V66) -> begin (V67 = (V65(V66))), (V67(V66)) end end end end}, fun (V68) -> fun (V69) -> V69 end end}, <<"false"/utf8>>))(V42))), {'Idris.Prelude.Types.Right', V70} end end, V3)) end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--escapeChar'(V0) -> case V0 of $\x{7f} -> <<"127"/utf8>>; $\x{0} -> <<"0"/utf8>>; $\x{1} -> <<"1"/utf8>>; $\x{2} -> <<"2"/utf8>>; $\x{3} -> <<"3"/utf8>>; $\x{4} -> <<"4"/utf8>>; $\x{5} -> <<"5"/utf8>>; $\x{6} -> <<"6"/utf8>>; $\x{7} -> <<"7"/utf8>>; $\x{8} -> <<"8"/utf8>>; $\x{9} -> <<"9"/utf8>>; $\x{a} -> <<"10"/utf8>>; $\x{b} -> <<"11"/utf8>>; $\x{c} -> <<"12"/utf8>>; $\x{d} -> <<"13"/utf8>>; $\x{e} -> <<"14"/utf8>>; $\x{f} -> <<"15"/utf8>>; $\x{10} -> <<"16"/utf8>>; $\x{11} -> <<"17"/utf8>>; $\x{12} -> <<"18"/utf8>>; $\x{13} -> <<"19"/utf8>>; $\x{14} -> <<"20"/utf8>>; $\x{15} -> <<"21"/utf8>>; $\x{16} -> <<"22"/utf8>>; $\x{17} -> <<"23"/utf8>>; $\x{18} -> <<"24"/utf8>>; $\x{19} -> <<"25"/utf8>>; $\x{1a} -> <<"26"/utf8>>; $\x{1b} -> <<"27"/utf8>>; $\x{1c} -> <<"28"/utf8>>; $\x{1d} -> <<"29"/utf8>>; $\x{1e} -> <<"30"/utf8>>; $\x{1f} -> <<"31"/utf8>>; _ -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Char'(V0)) end.
'un--emitFDef'(V0, V1, V2, V3) -> case V3 of [] -> ('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V2)), <<"(void)"/utf8>>)))); [E0 | E1] -> (fun (V4, V5) -> case V4 of {'Idris.Builtin.MkPair', E2, E3} -> (fun (V6, V7) -> case V7 of {'Idris.Builtin.MkPair', E4, E5} -> (fun (V8, V9) -> fun (V10) -> begin (V11 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('un--cName'(V2))))))(V10))), case V11 of {'Idris.Prelude.Types.Left', E6} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V13) -> begin (V14 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V10))), case V14 of {'Idris.Prelude.Types.Left', E8} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V16) -> begin (V17 = ('un--increaseIndentation'(V1, V10))), case V17 of {'Idris.Prelude.Types.Left', E10} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V19) -> begin (V20 = (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  Value *"/utf8>>, V8))))(V10))), case V20 of {'Idris.Prelude.Types.Left', E12} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V22) -> begin (V28 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V23) -> case V23 of {'Idris.Builtin.MkPair', E14, E15} -> (fun (V24, V25) -> case V25 of {'Idris.Builtin.MkPair', E16, E17} -> (fun (V26, V27) -> ('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", Value *"/utf8>>, V26)))) end(E16, E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V5))(V10))), case V28 of {'Idris.Prelude.Types.Left', E18} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V30) -> begin (V31 = ('un--decreaseIndentation'(V1, V10))), case V31 of {'Idris.Prelude.Types.Left', E20} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V33) -> (('un--emit'(V0, V1, {'Idris.Core.FC.EmptyFC'}, <<")"/utf8>>))(V10)) end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--emit'(V0, V1, V2, V3) -> case V2 of {'Idris.Core.FC.EmptyFC'} -> (fun () -> fun (V4) -> begin (V5 = ('un--indentation'(V1, V4))), case V5 of {'Idris.Prelude.Types.Left', E4} -> (fun (V6) -> {'Idris.Prelude.Types.Left', V6} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V7) -> begin (V9 = begin (V8 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V8} end), case V9 of {'Idris.Prelude.Types.Left', E6} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V11) -> begin (V15 = ('erlang':'put'(V0, ('Idris.Idris2.Prelude.Basics':'un--flip'('erased', 'erased', 'erased', fun (V12) -> fun (V13) -> fun (V14) -> ('Idris.Idris2.Libraries.Data.DList':'un--snoc'('erased', V12, V13, V14)) end end end, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, V3)), V11))))), {'Idris.Prelude.Types.Right', V15} end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end()); _ -> begin (V16 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// "/utf8>>, ('Idris.Idris2.Core.FC':'dn--un--show_Show_FC'(V2))))), fun (V17) -> begin (V18 = ('un--indentation'(V1, V17))), case V18 of {'Idris.Prelude.Types.Left', E0} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V20) -> begin (V21 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V20, V3))), begin (V23 = begin (V22 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E2} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V25) -> begin (V26 = ('erlang':'put'(V0, (('case--emit-3991'(V3, V2, V1, V0, V16, V20, V21, ('Idris.Idris2.Data.Nat':'un--isLTE'(('Idris.Idris2.Prelude.Types.String':'un--length'(V21)), ('un--maxLineLengthForComment'())))))(V25))))), {'Idris.Prelude.Types.Right', V26} end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'un--discardLastArgument'(V0, V1) -> case V1 of [] -> []; [E0 | E1] -> (fun (V2, V3) -> ('Idris.Idris2.Data.List':'un--init'('erased', V1, 'erased')) end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--decreaseIndentation'(V0, V1) -> begin (V3 = begin (V2 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V2} end), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('erlang':'put'(V0, ('Idris.Idris2.Data.Nat':'un--pred'(V5))))), {'Idris.Prelude.Types.Right', V6} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--createFFIArgList'(V0, V1) -> begin (V3 = (('Idris.Idris2.Core.Core':'un--traverse\x{27}'('erased', 'erased', fun (V2) -> ('un--cTypeOfCFType'(V2)) end, V0, []))(V1))), case V3 of {'Idris.Prelude.Types.Left', E0} -> (fun (V4) -> {'Idris.Prelude.Types.Left', V4} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V5) -> begin (V6 = ('un--varNamesFromList'('erased', V0, (1 + 0)))), {'Idris.Prelude.Types.Right', ('Idris.Idris2.Data.List':'dn--un--zip3_Zippable_List'('erased', 'erased', 'erased', V5, V6, V0))} end end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--createCFunctions'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V8 of {'Idris.Compiler.ANF.MkAFun', E0, E1} -> (fun (V9, V10) -> fun (V11) -> begin (V12 = (('un--functionDefSignature'(V0, V7, V9))(V11))), case V12 of {'Idris.Prelude.Types.Left', E2} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V14) -> begin (V15 = ('un--functionDefSignatureArglist'(V0, V7, V11))), case V15 of {'Idris.Prelude.Types.Left', E4} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V17) -> begin (V19 = begin (V18 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V18} end), case V19 of {'Idris.Prelude.Types.Left', E6} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V21) -> begin (V23 = begin (V22 = ('erlang':'put'(V2, [('Idris.Idris2.Prelude.Types.String':'un--++'(V14, <<";\x{a}"/utf8>>)) | [('Idris.Idris2.Prelude.Types.String':'un--++'(V17, <<";\x{a}"/utf8>>)) | V21]]))), {'Idris.Prelude.Types.Right', V22} end), case V23 of {'Idris.Prelude.Types.Left', E8} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V25) -> begin (V26 = ('un--newTemporaryVariableLevel'(V3, V11))), case V26 of {'Idris.Prelude.Types.Left', E10} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V28) -> begin (V29 = ('un--getArgsNrList'('erased', V9, 0))), begin (V30 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V14))(V11))), case V30 of {'Idris.Prelude.Types.Left', E12} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V32) -> begin (V33 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V11))), case V33 of {'Idris.Prelude.Types.Left', E14} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V35) -> begin (V36 = ('un--increaseIndentation'(V5, V11))), case V36 of {'Idris.Prelude.Types.Left', E16} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V38) -> begin (V39 = (('un--cStatementsFromANF'(V1, V3, V4, V5, V10))(V11))), case V39 of {'Idris.Prelude.Types.Left', E18} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V41) -> begin (V44 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *returnValue = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V41 of {'Idris.Compiler.RefC.RefC.MkRS', E20, E21} -> (fun (V42, V43) -> V43 end(E20, E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))(V11))), case V44 of {'Idris.Prelude.Types.Left', E22} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V46) -> begin (V47 = ('un--freeTmpVars'(V3, V4, V5, V11))), case V47 of {'Idris.Prelude.Types.Left', E24} -> (fun (V48) -> {'Idris.Prelude.Types.Left', V48} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V49) -> begin (V50 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"return returnValue;"/utf8>>))(V11))), case V50 of {'Idris.Prelude.Types.Left', E26} -> (fun (V51) -> {'Idris.Prelude.Types.Left', V51} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V52) -> begin (V53 = ('un--decreaseIndentation'(V5, V11))), case V53 of {'Idris.Prelude.Types.Left', E28} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V55) -> begin (V56 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V11))), case V56 of {'Idris.Prelude.Types.Left', E30} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E30)); {'Idris.Prelude.Types.Right', E31} -> (fun (V58) -> begin (V59 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V11))), case V59 of {'Idris.Prelude.Types.Left', E32} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E32)); {'Idris.Prelude.Types.Right', E33} -> (fun (V61) -> begin (V62 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V17))(V11))), case V62 of {'Idris.Prelude.Types.Left', E34} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V64) -> begin (V65 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"{"/utf8>>))(V11))), case V65 of {'Idris.Prelude.Types.Left', E36} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V67) -> begin (V68 = ('un--increaseIndentation'(V5, V11))), case V68 of {'Idris.Prelude.Types.Left', E38} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E38)); {'Idris.Prelude.Types.Right', E39} -> (fun (V70) -> begin (V74 = begin (V71 = (('Idris.Idris2.Core.Context':'un--getFullName'(V0, V7))(V11))), case V71 of {'Idris.Prelude.Types.Left', E40} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V73) -> (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return "/utf8>>, ('un--cName'(V73))))))(V11)) end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V74 of {'Idris.Prelude.Types.Left', E42} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V76) -> begin (V77 = ('un--increaseIndentation'(V5, V11))), case V77 of {'Idris.Prelude.Types.Left', E44} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V79) -> begin (V80 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"("/utf8>>))(V11))), case V80 of {'Idris.Prelude.Types.Left', E46} -> (fun (V81) -> {'Idris.Prelude.Types.Left', V81} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V82) -> begin (V83 = ('un--increaseIndentation'(V5, V11))), case V83 of {'Idris.Prelude.Types.Left', E48} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V85) -> begin (V87 = ('un--addCommaToList'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V86) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"arglist->args["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V86)), <<"]"/utf8>>)))) end, V29))))), begin (V89 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V88) -> ('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, V88)) end, V87))(V11))), case V89 of {'Idris.Prelude.Types.Left', E50} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V91) -> begin (V92 = ('un--decreaseIndentation'(V5, V11))), case V92 of {'Idris.Prelude.Types.Left', E52} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V94) -> begin (V95 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<");"/utf8>>))(V11))), case V95 of {'Idris.Prelude.Types.Left', E54} -> (fun (V96) -> {'Idris.Prelude.Types.Left', V96} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V97) -> begin (V98 = ('un--decreaseIndentation'(V5, V11))), case V98 of {'Idris.Prelude.Types.Left', E56} -> (fun (V99) -> {'Idris.Prelude.Types.Left', V99} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V100) -> begin (V101 = ('un--decreaseIndentation'(V5, V11))), case V101 of {'Idris.Prelude.Types.Left', E58} -> (fun (V102) -> {'Idris.Prelude.Types.Left', V102} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V103) -> begin (V104 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<"}\x{a}"/utf8>>))(V11))), case V104 of {'Idris.Prelude.Types.Left', E60} -> (fun (V105) -> {'Idris.Prelude.Types.Left', V105} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V106) -> begin (V107 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, <<""/utf8>>))(V11))), case V107 of {'Idris.Prelude.Types.Left', E62} -> (fun (V108) -> {'Idris.Prelude.Types.Left', V108} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V109) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E31)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); {'Idris.Compiler.ANF.MkACon', E64, E65, E66} -> (fun (V110, V111, V112) -> ('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// Constructor tag "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(Maybe $a)'('erased', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V113) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V113)) end, fun (V114) -> fun (V115) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V114, V115)) end end}, V110)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" arity "/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V111)))))))))) end(E64, E65, E66)); {'Idris.Compiler.ANF.MkAForeign', E67, E68, E69} -> (fun (V116, V117, V118) -> case V118 of {'Idris.Core.CompileExpr.CFIORes', E70} -> (fun (V119) -> ('case--createCFunctions-6727'(V119, V117, V116, V7, V6, V5, V4, V3, V2, V1, V0, ('un--extractFFILocation'(<<"C"/utf8>>, V116)))) end(E70)); _ -> fun (V120) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end end(E67, E68, E69)); {'Idris.Compiler.ANF.MkAError', E71} -> (fun (V121) -> fun (V122) -> begin (V123 = (('un--functionDefSignature'(V0, V7, []))(V122))), case V123 of {'Idris.Prelude.Types.Left', E72} -> (fun (V124) -> {'Idris.Prelude.Types.Left', V124} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V125) -> begin (V126 = ('un--functionDefSignatureArglist'(V0, V7, V122))), case V126 of {'Idris.Prelude.Types.Left', E74} -> (fun (V127) -> {'Idris.Prelude.Types.Left', V127} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V128) -> begin (V130 = begin (V129 = ('erlang':'get'(V2))), {'Idris.Prelude.Types.Right', V129} end), case V130 of {'Idris.Prelude.Types.Left', E76} -> (fun (V131) -> {'Idris.Prelude.Types.Left', V131} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V132) -> begin (V134 = begin (V133 = ('erlang':'put'(V2, [V125 | [V128 | V132]]))), {'Idris.Prelude.Types.Right', V133} end), case V134 of {'Idris.Prelude.Types.Left', E78} -> (fun (V135) -> {'Idris.Prelude.Types.Left', V135} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V136) -> begin (V137 = (('un--emit'(V4, V5, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V125, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{a}{"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fprintf(stderr, \x{22}Error in "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V7)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22});\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"exit(-1);\x{a}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"return NULL;"/utf8>>, <<"\x{a}}"/utf8>>))))))))))))))))(V122))), case V137 of {'Idris.Prelude.Types.Left', E80} -> (fun (V138) -> {'Idris.Prelude.Types.Left', V138} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V139) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--copyConstructors'(V0, V1, V2, V3, V4, V5, V6, V7, V8) -> case V5 of [] -> fun (V9) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V10, V11) -> case V10 of {'Idris.Compiler.ANF.MkAConAlt', E2, E3, E4, E5} -> (fun (V12, V13, V14, V15) -> fun (V16) -> begin (V17 = (('nested--13062-4465--in--un--getNameTag'(V15, V14, V13, V12, V11, V8, V7, V6, V4, V3, V2, V1, V0, V0, V13, V12))(V16))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> case V19 of {'Idris.Builtin.MkPair', E8, E9} -> (fun (V20, V21) -> begin (V22 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"].tag = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V20, <<";"/utf8>>))))))))))))(V16))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"["/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V8)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"].name = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V21, <<";"/utf8>>))))))))))))(V16))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> (('un--copyConstructors'(V0, V1, V2, V3, V4, V11, V6, V7, (1 + V8)))(V16)) end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8, E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--constDefaultBlock'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V7) -> fun (V8) -> begin (V9 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  default :"/utf8>>))(V8))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> begin (V12 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V8))), case V12 of {'Idris.Prelude.Types.Left', E3} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V14) -> begin (V15 = ('un--increaseIndentation'(V3, V8))), case V15 of {'Idris.Prelude.Types.Left', E5} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V17) -> begin (V18 = ('un--newTemporaryVariableLevel'(V1, V8))), case V18 of {'Idris.Prelude.Types.Left', E7} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V20) -> begin (V21 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V7))(V8))), case V21 of {'Idris.Prelude.Types.Left', E9} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E9)); {'Idris.Prelude.Types.Right', E10} -> (fun (V23) -> begin (V26 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V23 of {'Idris.Compiler.RefC.RefC.MkRS', E11, E12} -> (fun (V24, V25) -> V24 end(E11, E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V8))), case V26 of {'Idris.Prelude.Types.Left', E13} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V28) -> begin (V29 = ('un--freeTmpVars'(V1, V2, V3, V8))), case V29 of {'Idris.Prelude.Types.Left', E15} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V31) -> begin (V32 = ('un--decreaseIndentation'(V3, V8))), case V32 of {'Idris.Prelude.Types.Left', E17} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V34) -> (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V8)) end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--constBlockSwitch'(V0, V1, V2, V3, V4, V5, V6) -> case V4 of [] -> fun (V7) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V8, V9) -> case V8 of {'Idris.Compiler.ANF.MkAConstAlt', E2, E3} -> (fun (V10, V11) -> begin (V12 = ('un--const2Integer'(V10, V6))), fun (V13) -> begin (V14 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V12)), <<" :"/utf8>>))))))(V13))), case V14 of {'Idris.Prelude.Types.Left', E4} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V16) -> begin (V17 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V13))), case V17 of {'Idris.Prelude.Types.Left', E6} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V19) -> begin (V20 = ('un--increaseIndentation'(V3, V13))), case V20 of {'Idris.Prelude.Types.Left', E8} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V22) -> begin (V23 = ('un--newTemporaryVariableLevel'(V1, V13))), case V23 of {'Idris.Prelude.Types.Left', E10} -> (fun (V24) -> {'Idris.Prelude.Types.Left', V24} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V25) -> begin (V26 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V11))(V13))), case V26 of {'Idris.Prelude.Types.Left', E12} -> (fun (V27) -> {'Idris.Prelude.Types.Left', V27} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V28) -> begin (V31 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V28 of {'Idris.Compiler.RefC.RefC.MkRS', E14, E15} -> (fun (V29, V30) -> V29 end(E14, E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V13))), case V31 of {'Idris.Prelude.Types.Left', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V33) -> begin (V34 = ('un--freeTmpVars'(V1, V2, V3, V13))), case V34 of {'Idris.Prelude.Types.Left', E18} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E18)); {'Idris.Prelude.Types.Right', E19} -> (fun (V36) -> begin (V37 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"break;"/utf8>>))(V13))), case V37 of {'Idris.Prelude.Types.Left', E20} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V39) -> begin (V40 = ('un--decreaseIndentation'(V3, V13))), case V40 of {'Idris.Prelude.Types.Left', E22} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V42) -> begin (V43 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V13))), case V43 of {'Idris.Prelude.Types.Left', E24} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V45) -> (('un--constBlockSwitch'(V0, V1, V2, V3, V9, V5, (V6 + 1)))(V13)) end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E2, E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--const2Integer'(V0, V1) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V2) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V2)) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V3) -> V3 end(E1)); {'Idris.Core.TT.Ch', E2} -> (fun (V4) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Char_Integer'(V4)) end(E2)); {'Idris.Core.TT.B8', E3} -> (fun (V5) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V5)) end(E3)); {'Idris.Core.TT.B16', E4} -> (fun (V6) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V6)) end(E4)); {'Idris.Core.TT.B32', E5} -> (fun (V7) -> ('Idris.Idris2.Prelude.Cast':'dn--un--cast_Cast_Int_Integer'(V7)) end(E5)); {'Idris.Core.TT.B64', E6} -> (fun (V8) -> V8 end(E6)); _ -> V1 end.
'un--conBlocks'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V5 of [] -> fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end; [E0 | E1] -> (fun (V9, V10) -> case V9 of {'Idris.Compiler.ANF.MkAConAlt', E2, E3, E4, E5} -> (fun (V11, V12, V13, V14) -> fun (V15) -> begin (V16 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  case "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V7)), <<":"/utf8>>))))))(V15))), case V16 of {'Idris.Prelude.Types.Left', E6} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V18) -> begin (V19 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  {"/utf8>>))(V15))), case V19 of {'Idris.Prelude.Types.Left', E8} -> (fun (V20) -> {'Idris.Prelude.Types.Left', V20} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V21) -> begin (V22 = ('un--increaseIndentation'(V3, V15))), case V22 of {'Idris.Prelude.Types.Left', E10} -> (fun (V23) -> {'Idris.Prelude.Types.Left', V23} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V24) -> begin (V25 = ('un--newTemporaryVariableLevel'(V1, V15))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = (('nested--13067-4597--in--un--varBindLines'(V14, V13, V12, V11, V10, V7, V6, V4, V3, V2, V1, V0, V4, V13, 0))(V15))), case V28 of {'Idris.Prelude.Types.Left', E14} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V30) -> begin (V31 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V14))(V15))), case V31 of {'Idris.Prelude.Types.Left', E16} -> (fun (V32) -> {'Idris.Prelude.Types.Left', V32} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V33) -> begin (V36 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V33 of {'Idris.Compiler.RefC.RefC.MkRS', E18, E19} -> (fun (V34, V35) -> V34 end(E18, E19)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V15))), case V36 of {'Idris.Prelude.Types.Left', E20} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E20)); {'Idris.Prelude.Types.Right', E21} -> (fun (V38) -> begin (V39 = ('un--freeTmpVars'(V1, V2, V3, V15))), case V39 of {'Idris.Prelude.Types.Left', E22} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V41) -> begin (V42 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"break;"/utf8>>))(V15))), case V42 of {'Idris.Prelude.Types.Left', E24} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V44) -> begin (V45 = ('un--decreaseIndentation'(V3, V15))), case V45 of {'Idris.Prelude.Types.Left', E26} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V47) -> begin (V48 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V15))), case V48 of {'Idris.Prelude.Types.Left', E28} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V50) -> (('un--conBlocks'(V0, V1, V2, V3, V4, V10, V6, (1 + V7)))(V15)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--compileLibrary'(V0, V1, V2, V3, V4, V5) -> begin (V34 = begin (V33 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> V12 end end end, fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> begin (V19 = (V16(V18))), begin (V20 = (V17(V18))), (V19(V20)) end end end end end end end}, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> begin (V26 = (V23(V25))), ((V24(V26))(V25)) end end end end end end, fun (V27) -> fun (V28) -> fun (V29) -> begin (V30 = (V28(V29))), (V30(V29)) end end end end}, fun (V31) -> fun (V32) -> V32 end end}, <<"Compiling to library is not supported."/utf8>>))(V5))), {'Idris.Prelude.Types.Right', V33} end), case V34 of {'Idris.Prelude.Types.Left', E0} -> (fun (V35) -> {'Idris.Prelude.Types.Left', V35} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V36) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--compileExpr'(V0, V1, V2, V3, V4, V5) -> case V0 of {'Idris.Compiler.Common.ANF'} -> (fun () -> begin (V6 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<".c"/utf8>>))))), begin (V7 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, ('Idris.Idris2.Prelude.Types.String':'un--++'(V5, <<".o"/utf8>>))))), begin (V8 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(V3, V5))), fun (V9) -> begin (V15 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V10) -> case V10 of {'Idris.Prelude.Types.Left', E0} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V12) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V13) -> begin (V14 = (('Idris.Idris2.Core.Directory':'un--mkdirAll'(V3))(V13))), {'Idris.Prelude.Types.Right', V14} end end, V9))), case V15 of {'Idris.Prelude.Types.Left', E2} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V17) -> begin (V18 = ('Idris.Idris2.Compiler.Common':'un--getCompileData'(V1, 1, {'Idris.Compiler.Common.ANF'}, V4, V9))), case V18 of {'Idris.Prelude.Types.Left', E4} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V20) -> begin (V26 = case V20 of {'Idris.Compiler.Common.MkCompileData', E6, E7, E8, E9, E10} -> (fun (V21, V22, V23, V24, V25) -> V24 end(E6, E7, E8, E9, E10)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end), begin (V27 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.ArgCounter'}, 0, V9))), case V27 of {'Idris.Prelude.Types.Left', E11} -> (fun (V28) -> {'Idris.Prelude.Types.Left', V28} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V29) -> begin (V30 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.FunctionDefinitions'}, [], V9))), case V30 of {'Idris.Prelude.Types.Left', E13} -> (fun (V31) -> {'Idris.Prelude.Types.Left', V31} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V32) -> begin (V33 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.TemporaryVariableTracker'}, [], V9))), case V33 of {'Idris.Prelude.Types.Left', E15} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E15)); {'Idris.Prelude.Types.Right', E16} -> (fun (V35) -> begin (V37 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.OutfileText'}, fun (V36) -> ('Idris.Idris2.Libraries.Data.DList':'un--Nil'('erased', V36)) end, V9))), case V37 of {'Idris.Prelude.Types.Left', E17} -> (fun (V38) -> {'Idris.Prelude.Types.Left', V38} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V39) -> begin (V40 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.ExternalLibs'}, [], V9))), case V40 of {'Idris.Prelude.Types.Left', E19} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V42) -> begin (V43 = ('Idris.Idris2.Core.Core':'un--newRef'('erased', 'erased', {'Idris.Compiler.RefC.RefC.IndentLevel'}, 0, V9))), case V43 of {'Idris.Prelude.Types.Left', E21} -> (fun (V44) -> {'Idris.Prelude.Types.Left', V44} end(E21)); {'Idris.Prelude.Types.Right', E22} -> (fun (V45) -> begin (V49 = (('Idris.Idris2.Core.Core':'un--traverse_'('erased', 'erased', fun (V46) -> case V46 of {'Idris.Builtin.MkPair', E23, E24} -> (fun (V47, V48) -> ('un--createCFunctions'(V1, V29, V32, V35, V39, V45, V42, V47, V48)) end(E23, E24)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, V26))(V9))), case V49 of {'Idris.Prelude.Types.Left', E25} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V51) -> begin (V52 = (('un--header'(V32, V39, V45, V42))(V9))), case V52 of {'Idris.Prelude.Types.Left', E27} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E27)); {'Idris.Prelude.Types.Right', E28} -> (fun (V54) -> begin (V55 = ('un--footer'(V45, V39, V9))), case V55 of {'Idris.Prelude.Types.Left', E29} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E29)); {'Idris.Prelude.Types.Right', E30} -> (fun (V57) -> begin (V59 = begin (V58 = ('erlang':'get'(V39))), {'Idris.Prelude.Types.Right', V58} end), case V59 of {'Idris.Prelude.Types.Left', E31} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V61) -> begin (V63 = ('Idris.Idris2.Data.String':'un--fastAppend'(('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V62) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(V62, <<"\x{a}"/utf8>>)) end, ('Idris.Idris2.Libraries.Data.DList':'un--reify'('erased', V61))))))), begin (V96 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V64) -> case V64 of {'Idris.Prelude.Types.Left', E33} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V66) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V67) -> begin (V95 = (('Idris.Idris2.System.File':'un--writeFile'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V68) -> fun (V69) -> fun (V70) -> fun (V71) -> fun (V72) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V70, V71, V72)) end end end end end, fun (V73) -> fun (V74) -> fun (V75) -> V74 end end end, fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> fun (V80) -> begin (V81 = (V78(V80))), begin (V82 = (V79(V80))), (V81(V82)) end end end end end end end}, fun (V83) -> fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> begin (V88 = (V85(V87))), ((V86(V88))(V87)) end end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> begin (V92 = (V90(V91))), (V92(V91)) end end end end}, fun (V93) -> fun (V94) -> V94 end end}, V6, V63))(V67))), {'Idris.Prelude.Types.Right', V95} end end, V9))), case V96 of {'Idris.Prelude.Types.Left', E35} -> (fun (V97) -> {'Idris.Prelude.Types.Left', V97} end(E35)); {'Idris.Prelude.Types.Right', E36} -> (fun (V98) -> begin (V131 = ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', fun (V99) -> case V99 of {'Idris.Prelude.Types.Left', E37} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V101) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkUnit'}} end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end, fun (V102) -> begin (V130 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V103) -> fun (V104) -> fun (V105) -> fun (V106) -> fun (V107) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V105, V106, V107)) end end end end end, fun (V108) -> fun (V109) -> fun (V110) -> V109 end end end, fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> fun (V115) -> begin (V116 = (V113(V115))), begin (V117 = (V114(V115))), (V116(V117)) end end end end end end end}, fun (V118) -> fun (V119) -> fun (V120) -> fun (V121) -> fun (V122) -> begin (V123 = (V120(V122))), ((V121(V123))(V122)) end end end end end end, fun (V124) -> fun (V125) -> fun (V126) -> begin (V127 = (V125(V126))), (V127(V126)) end end end end}, fun (V128) -> fun (V129) -> V129 end end}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Generated C file "/utf8>>, V6))))(V102))), {'Idris.Prelude.Types.Right', V130} end end, V9))), case V131 of {'Idris.Prelude.Types.Left', E39} -> (fun (V132) -> {'Idris.Prelude.Types.Left', V132} end(E39)); {'Idris.Prelude.Types.Right', E40} -> (fun (V133) -> begin (V135 = begin (V134 = ('un--findCC'(V9))), {'Idris.Prelude.Types.Right', V134} end), case V135 of {'Idris.Prelude.Types.Left', E41} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E41)); {'Idris.Prelude.Types.Right', E42} -> (fun (V137) -> begin (V138 = ('Idris.Idris2.Core.Context':'un--getDirs'(V1, V9))), case V138 of {'Idris.Prelude.Types.Left', E43} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V140) -> begin (V141 = ('Idris.Idris2.Prelude.Types.String':'un--++'(V137, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -c "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V6, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V2, V5, V4, V3, V1, V140, <<"refc "/utf8>>)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-I"/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V2, V5, V4, V3, V1, V140, <<"include"/utf8>>))))))))))))))))))))), begin (V152 = ('Idris.Idris2.Libraries.Utils.Path':'un--</>'(('Idris.Idris2.Prelude.Types.String':'un--++'(V137, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V7, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" -o "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V8, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('nested--16416-7493--in--un--fullprefix_dir'(V2, V5, V4, V3, V1, V140, <<"lib"/utf8>>)))))))))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"libidris2_support.a"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-lidris2_refc "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"-L"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('nested--16416-7493--in--un--fullprefix_dir'(V2, V5, V4, V3, V1, V140, <<"refc "/utf8>>)), ('nested--16416-7494--in--un--clibdirs'(V2, V5, V4, V3, V1, case V140 of {'Idris.Core.Options.MkDirs', E45, E46, E47, E48, E49, E50, E51, E52, E53, E54} -> (fun (V142, V143, V144, V145, V146, V147, V148, V149, V150, V151) -> V150 end(E45, E46, E47, E48, E49, E50, E51, E52, E53, E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))))))))))))))), begin (V181 = begin (V180 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V153) -> fun (V154) -> fun (V155) -> fun (V156) -> fun (V157) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V155, V156, V157)) end end end end end, fun (V158) -> fun (V159) -> fun (V160) -> V159 end end end, fun (V161) -> fun (V162) -> fun (V163) -> fun (V164) -> fun (V165) -> begin (V166 = (V163(V165))), begin (V167 = (V164(V165))), (V166(V167)) end end end end end end end}, fun (V168) -> fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> begin (V173 = (V170(V172))), ((V171(V173))(V172)) end end end end end end, fun (V174) -> fun (V175) -> fun (V176) -> begin (V177 = (V175(V176))), (V177(V176)) end end end end}, fun (V178) -> fun (V179) -> V179 end end}, V141))(V9))), {'Idris.Prelude.Types.Right', V180} end), case V181 of {'Idris.Prelude.Types.Left', E55} -> (fun (V182) -> {'Idris.Prelude.Types.Left', V182} end(E55)); {'Idris.Prelude.Types.Right', E56} -> (fun (V183) -> begin (V212 = begin (V211 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V184) -> fun (V185) -> fun (V186) -> fun (V187) -> fun (V188) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V186, V187, V188)) end end end end end, fun (V189) -> fun (V190) -> fun (V191) -> V190 end end end, fun (V192) -> fun (V193) -> fun (V194) -> fun (V195) -> fun (V196) -> begin (V197 = (V194(V196))), begin (V198 = (V195(V196))), (V197(V198)) end end end end end end end}, fun (V199) -> fun (V200) -> fun (V201) -> fun (V202) -> fun (V203) -> begin (V204 = (V201(V203))), ((V202(V204))(V203)) end end end end end end, fun (V205) -> fun (V206) -> fun (V207) -> begin (V208 = (V206(V207))), (V208(V207)) end end end end}, fun (V209) -> fun (V210) -> V210 end end}, V141))(V9))), {'Idris.Prelude.Types.Right', V211} end), case V212 of {'Idris.Prelude.Types.Left', E57} -> (fun (V213) -> {'Idris.Prelude.Types.Left', V213} end(E57)); {'Idris.Prelude.Types.Right', E58} -> (fun (V214) -> case V214 of 0 -> begin (V243 = begin (V242 = (('Idris.Idris2.Prelude.IO':'un--putStrLn'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V215) -> fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V217, V218, V219)) end end end end end, fun (V220) -> fun (V221) -> fun (V222) -> V221 end end end, fun (V223) -> fun (V224) -> fun (V225) -> fun (V226) -> fun (V227) -> begin (V228 = (V225(V227))), begin (V229 = (V226(V227))), (V228(V229)) end end end end end end end}, fun (V230) -> fun (V231) -> fun (V232) -> fun (V233) -> fun (V234) -> begin (V235 = (V232(V234))), ((V233(V235))(V234)) end end end end end end, fun (V236) -> fun (V237) -> fun (V238) -> begin (V239 = (V237(V238))), (V239(V238)) end end end end}, fun (V240) -> fun (V241) -> V241 end end}, V152))(V9))), {'Idris.Prelude.Types.Right', V242} end), case V243 of {'Idris.Prelude.Types.Left', E59} -> (fun (V244) -> {'Idris.Prelude.Types.Left', V244} end(E59)); {'Idris.Prelude.Types.Right', E60} -> (fun (V245) -> begin (V274 = begin (V273 = (('Idris.Idris2.System':'un--system'('erased', {'Idris.Prelude.IO.dn--un--__mkHasIO', {'Idris.Prelude.Interfaces.dn--un--__mkMonad', {'Idris.Prelude.Interfaces.dn--un--__mkApplicative', fun (V246) -> fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> ('Idris.Idris2.Prelude.IO':'dn--un--map_Functor_IO'('erased', 'erased', V248, V249, V250)) end end end end end, fun (V251) -> fun (V252) -> fun (V253) -> V252 end end end, fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> begin (V259 = (V256(V258))), begin (V260 = (V257(V258))), (V259(V260)) end end end end end end end}, fun (V261) -> fun (V262) -> fun (V263) -> fun (V264) -> fun (V265) -> begin (V266 = (V263(V265))), ((V264(V266))(V265)) end end end end end end, fun (V267) -> fun (V268) -> fun (V269) -> begin (V270 = (V268(V269))), (V270(V269)) end end end end}, fun (V271) -> fun (V272) -> V272 end end}, V152))(V9))), {'Idris.Prelude.Types.Right', V273} end), case V274 of {'Idris.Prelude.Types.Left', E61} -> (fun (V275) -> {'Idris.Prelude.Types.Left', V275} end(E61)); {'Idris.Prelude.Types.Right', E62} -> (fun (V276) -> case V276 of 0 -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V8}}; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E62)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E60)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end(E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E56)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E40)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E28)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E22)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E16)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end()); _ -> fun (V277) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}} end end.
'un--codegenRefC'() -> {'Idris.Compiler.Common.MkCG', fun (V0) -> fun (V1) -> fun (V2) -> fun (V3) -> fun (V4) -> ('un--compileExpr'({'Idris.Compiler.Common.ANF'}, V0, V1, V2, V3, V4)) end end end end end, fun (V5) -> fun (V6) -> fun (V7) -> fun (V8) -> ('un--executeExpr'(V5, V6, V7, V8)) end end end end, fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> ('un--compileLibrary'(V9, V10, V11, V12, V13, V14)) end end end end end end}.
'un--cTypeOfCFType'(V0) -> case V0 of {'Idris.Core.CompileExpr.CFUnit'} -> (fun () -> fun (V1) -> {'Idris.Prelude.Types.Right', <<"void"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFInt'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', <<"int"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned8'} -> (fun () -> fun (V3) -> {'Idris.Prelude.Types.Right', <<"uint8_t"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned16'} -> (fun () -> fun (V4) -> {'Idris.Prelude.Types.Right', <<"uint16_t"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned32'} -> (fun () -> fun (V5) -> {'Idris.Prelude.Types.Right', <<"uint32_t"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFUnsigned64'} -> (fun () -> fun (V6) -> {'Idris.Prelude.Types.Right', <<"uint64_t"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFString'} -> (fun () -> fun (V7) -> {'Idris.Prelude.Types.Right', <<"char *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFDouble'} -> (fun () -> fun (V8) -> {'Idris.Prelude.Types.Right', <<"double"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFChar'} -> (fun () -> fun (V9) -> {'Idris.Prelude.Types.Right', <<"char"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFPtr'} -> (fun () -> fun (V10) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFGCPtr'} -> (fun () -> fun (V11) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFBuffer'} -> (fun () -> fun (V12) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFWorld'} -> (fun () -> fun (V13) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end()); {'Idris.Core.CompileExpr.CFFun', E0, E1} -> (fun (V14, V15) -> fun (V16) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end(E0, E1)); {'Idris.Core.CompileExpr.CFIORes', E2} -> (fun (V17) -> fun (V18) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end(E2)); {'Idris.Core.CompileExpr.CFStruct', E3, E4} -> (fun (V19, V20) -> fun (V21) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end(E3, E4)); {'Idris.Core.CompileExpr.CFUser', E5, E6} -> (fun (V22, V23) -> fun (V24) -> {'Idris.Prelude.Types.Right', <<"void *"/utf8>>} end end(E5, E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cStringQuoted'(V0) -> ('Idris.Idris2.Prelude.Types':'un--strCons'($\x{22}, (('nested--11002-2467--in--un--showCString'(V0, ('Idris.Idris2.Prelude.Types':'un--unpack'(V0))))(<<"\x{22}"/utf8>>)))).
'un--cStatementsFromANF'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Compiler.ANF.AV', E0, E1} -> (fun (V5, V6) -> begin (V7 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"newReference("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V6)), <<")"/utf8>>))))), fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V7, V7}} end end end(E0, E1)); {'Idris.Compiler.ANF.AAppName', E2, E3, E4, E5} -> (fun (V9, V10, V11, V12) -> fun (V13) -> begin (V15 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// start "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V14) -> ('un--varName'(V14)) end, V12)))), <<")"/utf8>>))))))))))(V13))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> begin (V18 = ('un--makeArglist'(V0, V1, V2, V3, 0, V12, V13))), case V18 of {'Idris.Prelude.Types.Left', E8} -> (fun (V19) -> {'Idris.Prelude.Types.Left', V19} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V20) -> begin (V21 = ('un--getNextCounter'(V0, V13))), case V21 of {'Idris.Prelude.Types.Left', E10} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V23) -> begin (V24 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fPtr_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V23))))), begin (V25 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *(*"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V24, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")(Value_Arglist*) = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V11)), <<"_arglist;"/utf8>>))))))))))(V13))), case V25 of {'Idris.Prelude.Types.Left', E12} -> (fun (V26) -> {'Idris.Prelude.Types.Left', V26} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V27) -> begin (V28 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"closure_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V23))))), begin (V29 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V28, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = (Value*)makeClosureFromArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V24, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V20, <<");"/utf8>>))))))))))))))(V13))), case V29 of {'Idris.Prelude.Types.Left', E14} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V31) -> begin (V33 = (('un--emit'(V2, V3, V9, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// end   "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V11)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V32) -> ('un--varName'(V32)) end, V12)))), <<")"/utf8>>))))))))))(V13))), case V33 of {'Idris.Prelude.Types.Left', E16} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V35) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"trampoline("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V28, <<")"/utf8>>)))), V28}} end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E2, E3, E4, E5)); {'Idris.Compiler.ANF.AUnderApp', E18, E19, E20, E21} -> (fun (V36, V37, V38, V39) -> fun (V40) -> begin (V41 = ('un--makeArglist'(V0, V1, V2, V3, V38, V39, V40))), case V41 of {'Idris.Prelude.Types.Left', E22} -> (fun (V42) -> {'Idris.Prelude.Types.Left', V42} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V43) -> begin (V44 = ('un--getNextCounter'(V0, V40))), case V44 of {'Idris.Prelude.Types.Left', E24} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E24)); {'Idris.Prelude.Types.Right', E25} -> (fun (V46) -> begin (V47 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"closure_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V46))))), begin (V48 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value *(*"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V47, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<")(Value_Arglist*) = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V37)), <<"_arglist;"/utf8>>))))))))), begin (V49 = (('un--emit'(V2, V3, V36, V48))(V40))), case V49 of {'Idris.Prelude.Types.Left', E26} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E26)); {'Idris.Prelude.Types.Right', E27} -> (fun (V51) -> begin (V52 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeClosureFromArglist("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V47, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V43, <<")"/utf8>>))))))))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V52, V52}} end end(E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end(E25)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E18, E19, E20, E21)); {'Idris.Compiler.ANF.AApp', E28, E29, E30, E31} -> (fun (V53, V54, V55, V56) -> fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"apply_closure("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V55)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V56)), <<")"/utf8>>)))))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"tailcall_apply_closure("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V55)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V56)), <<")"/utf8>>))))))))}} end end(E28, E29, E30, E31)); {'Idris.Compiler.ANF.ALet', E32, E33, E34, E35} -> (fun (V58, V59, V60, V61) -> fun (V62) -> begin (V63 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V60))(V62))), case V63 of {'Idris.Prelude.Types.Left', E36} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E36)); {'Idris.Prelude.Types.Right', E37} -> (fun (V65) -> begin (V68 = (('un--emit'(V2, V3, V58, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value * var_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V59)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V65 of {'Idris.Compiler.RefC.RefC.MkRS', E38, E39} -> (fun (V66, V67) -> V66 end(E38, E39)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))))(V62))), case V68 of {'Idris.Prelude.Types.Left', E40} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E40)); {'Idris.Prelude.Types.Right', E41} -> (fun (V70) -> begin (V71 = ('un--registerVariableForAutomaticFreeing'(V1, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"var_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V59)))), V62))), case V71 of {'Idris.Prelude.Types.Left', E42} -> (fun (V72) -> {'Idris.Prelude.Types.Left', V72} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V73) -> begin (V74 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V61))(V62))), case V74 of {'Idris.Prelude.Types.Left', E44} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V76) -> {'Idris.Prelude.Types.Right', V76} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E41)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E37)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E32, E33, E34, E35)); {'Idris.Compiler.ANF.ACon', E46, E47, E48, E49} -> (fun (V77, V78, V79, V80) -> fun (V81) -> begin (V82 = ('un--getNextCounter'(V0, V81))), case V82 of {'Idris.Prelude.Types.Left', E50} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V84) -> begin (V85 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constructor_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V84))))), begin (V86 = (('un--emit'(V2, V3, V77, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value_Constructor* "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V85, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = newConstructor("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V80)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--showTag'(V79)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cName'(V78)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"\x{22}"/utf8>>, <<");"/utf8>>))))))))))))))))))))))(V81))), case V86 of {'Idris.Prelude.Types.Left', E52} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V88) -> begin (V89 = (('un--emit'(V2, V3, V77, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" // constructor "/utf8>>, ('un--cName'(V78))))))(V81))), case V89 of {'Idris.Prelude.Types.Left', E54} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V91) -> begin (V92 = (('un--fillConstructorArgs'(V2, V3, V85, V80, 0))(V81))), case V92 of {'Idris.Prelude.Types.Left', E56} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)"/utf8>>, V85)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)"/utf8>>, V85))}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E46, E47, E48, E49)); {'Idris.Compiler.ANF.AOp', E58, E59, E60, E61} -> (fun (V95, V96, V97, V98) -> fun (V99) -> begin (V100 = (('un--cArgsVectANF'('erased', V98))(V99))), case V100 of {'Idris.Prelude.Types.Left', E62} -> (fun (V101) -> {'Idris.Prelude.Types.Left', V101} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V102) -> begin (V103 = ('un--cOp'('erased', V97, V102))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V103, V103}} end end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E58, E59, E60, E61)); {'Idris.Compiler.ANF.AExtPrim', E64, E65, E66, E67} -> (fun (V104, V105, V106, V107) -> fun (V108) -> begin (V109 = (('un--emit'(V2, V3, V104, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"// call to external primitive "/utf8>>, ('un--cName'(V106))))))(V108))), case V109 of {'Idris.Prelude.Types.Left', E68} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V111) -> begin (V113 = ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('dn--un--show_Show_ExtPrim'(('un--toPrim'(V106)))))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Core.Name.Namespace':'un--showSep'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V112) -> ('un--varName'(V112)) end, V107)))), <<")"/utf8>>))))))), {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V113, V113}} end end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E64, E65, E66, E67)); {'Idris.Compiler.ANF.AConCase', E70, E71, E72, E73} -> (fun (V114, V115, V116, V117) -> fun (V118) -> begin (V119 = ('un--getNextCounter'(V0, V118))), case V119 of {'Idris.Prelude.Types.Left', E74} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V121) -> begin (V122 = ('un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V118))), case V122 of {'Idris.Prelude.Types.Left', E76} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V124) -> begin (V125 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V124, <<" = NULL;"/utf8>>))))), begin (V126 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"constructorField_"/utf8>>, ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(V121))))), begin (V127 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"AConAlt * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V126, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"= newConstructorField("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V116)))), <<");"/utf8>>))))))))), begin (V128 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"switch(compareConstructors("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--varName'(V115)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V126, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Nat'(('Idris.Idris2.Prelude.Types.List':'un--length'('erased', V116)))), <<")){"/utf8>>))))))))))))), begin (V129 = (('un--emit'(V2, V3, V114, V125))(V118))), case V129 of {'Idris.Prelude.Types.Left', E78} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E78)); {'Idris.Prelude.Types.Right', E79} -> (fun (V131) -> begin (V132 = (('un--emit'(V2, V3, V114, V127))(V118))), case V132 of {'Idris.Prelude.Types.Left', E80} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E80)); {'Idris.Prelude.Types.Right', E81} -> (fun (V134) -> begin (V135 = (('un--copyConstructors'(V0, V1, V2, V3, ('un--varName'(V115)), V116, V126, V124, 0))(V118))), case V135 of {'Idris.Prelude.Types.Left', E82} -> (fun (V136) -> {'Idris.Prelude.Types.Left', V136} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V137) -> begin (V138 = (('un--emit'(V2, V3, V114, V128))(V118))), case V138 of {'Idris.Prelude.Types.Left', E84} -> (fun (V139) -> {'Idris.Prelude.Types.Left', V139} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V140) -> begin (V141 = (('un--conBlocks'(V0, V1, V2, V3, ('un--varName'(V115)), V116, V124, 0))(V118))), case V141 of {'Idris.Prelude.Types.Left', E86} -> (fun (V142) -> {'Idris.Prelude.Types.Left', V142} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V143) -> case V117 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> begin (V144 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V118))), case V144 of {'Idris.Prelude.Types.Left', E88} -> (fun (V145) -> {'Idris.Prelude.Types.Left', V145} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V146) -> begin (V147 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V126, <<");"/utf8>>))))))(V118))), case V147 of {'Idris.Prelude.Types.Left', E90} -> (fun (V148) -> {'Idris.Prelude.Types.Left', V148} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V149) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V124, V124}} end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end()); {'Idris.Prelude.Types.Just', E92} -> (fun (V150) -> begin (V151 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  default : {"/utf8>>))(V118))), case V151 of {'Idris.Prelude.Types.Left', E93} -> (fun (V152) -> {'Idris.Prelude.Types.Left', V152} end(E93)); {'Idris.Prelude.Types.Right', E94} -> (fun (V153) -> begin (V154 = ('un--increaseIndentation'(V3, V118))), case V154 of {'Idris.Prelude.Types.Left', E95} -> (fun (V155) -> {'Idris.Prelude.Types.Left', V155} end(E95)); {'Idris.Prelude.Types.Right', E96} -> (fun (V156) -> begin (V157 = ('un--newTemporaryVariableLevel'(V1, V118))), case V157 of {'Idris.Prelude.Types.Left', E97} -> (fun (V158) -> {'Idris.Prelude.Types.Left', V158} end(E97)); {'Idris.Prelude.Types.Right', E98} -> (fun (V159) -> begin (V160 = (('un--cStatementsFromANF'(V0, V1, V2, V3, V150))(V118))), case V160 of {'Idris.Prelude.Types.Left', E99} -> (fun (V161) -> {'Idris.Prelude.Types.Left', V161} end(E99)); {'Idris.Prelude.Types.Right', E100} -> (fun (V162) -> begin (V165 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(V124, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<" = "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(case V162 of {'Idris.Compiler.RefC.RefC.MkRS', E101, E102} -> (fun (V163, V164) -> V163 end(E101, E102)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, <<";"/utf8>>))))))))(V118))), case V165 of {'Idris.Prelude.Types.Left', E103} -> (fun (V166) -> {'Idris.Prelude.Types.Left', V166} end(E103)); {'Idris.Prelude.Types.Right', E104} -> (fun (V167) -> begin (V168 = ('un--freeTmpVars'(V1, V2, V3, V118))), case V168 of {'Idris.Prelude.Types.Left', E105} -> (fun (V169) -> {'Idris.Prelude.Types.Left', V169} end(E105)); {'Idris.Prelude.Types.Right', E106} -> (fun (V170) -> begin (V171 = ('un--decreaseIndentation'(V3, V118))), case V171 of {'Idris.Prelude.Types.Left', E107} -> (fun (V172) -> {'Idris.Prelude.Types.Left', V172} end(E107)); {'Idris.Prelude.Types.Right', E108} -> (fun (V173) -> begin (V174 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"  }"/utf8>>))(V118))), case V174 of {'Idris.Prelude.Types.Left', E109} -> (fun (V175) -> {'Idris.Prelude.Types.Left', V175} end(E109)); {'Idris.Prelude.Types.Right', E110} -> (fun (V176) -> begin (V177 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, <<"}"/utf8>>))(V118))), case V177 of {'Idris.Prelude.Types.Left', E111} -> (fun (V178) -> {'Idris.Prelude.Types.Left', V178} end(E111)); {'Idris.Prelude.Types.Right', E112} -> (fun (V179) -> begin (V180 = (('un--emit'(V2, V3, {'Idris.Core.FC.EmptyFC'}, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"free("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V126, <<");"/utf8>>))))))(V118))), case V180 of {'Idris.Prelude.Types.Left', E113} -> (fun (V181) -> {'Idris.Prelude.Types.Left', V181} end(E113)); {'Idris.Prelude.Types.Right', E114} -> (fun (V182) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', V124, V124}} end(E114)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E112)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E110)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E108)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E106)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E104)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E100)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E98)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E96)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E94)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E92)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E81)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E79)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end end end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E70, E71, E72, E73)); {'Idris.Compiler.ANF.AConstCase', E115, E116, E117, E118} -> (fun (V183, V184, V185, V186) -> fun (V187) -> begin (V188 = ('un--getNewVarThatWillNotBeFreedAtEndOfBlock'(V0, V187))), case V188 of {'Idris.Prelude.Types.Left', E119} -> (fun (V189) -> {'Idris.Prelude.Types.Left', V189} end(E119)); {'Idris.Prelude.Types.Right', E120} -> (fun (V190) -> begin (V191 = ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Value * "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V190, <<" = NULL;"/utf8>>))))), begin (V192 = (('un--emit'(V2, V3, V183, V191))(V187))), case V192 of {'Idris.Prelude.Types.Left', E121} -> (fun (V193) -> {'Idris.Prelude.Types.Left', V193} end(E121)); {'Idris.Prelude.Types.Right', E122} -> (fun (V194) -> (('case--cStatementsFromANF-5679'(V186, V185, V184, V183, V3, V2, V1, V0, V190, V191, ('un--integer_switch'(V185))))(V187)) end(E122)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E120)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E115, E116, E117, E118)); {'Idris.Compiler.ANF.APrimVal', E123, E124} -> (fun (V195, V196) -> fun (V197) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', ('un--cConstant'(V196)), ('un--cConstant'(V196))}} end end(E123, E124)); {'Idris.Compiler.ANF.AErased', E125} -> (fun (V198) -> fun (V199) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', <<"NULL"/utf8>>, <<"NULL"/utf8>>}} end end(E125)); {'Idris.Compiler.ANF.ACrash', E126, E127} -> (fun (V200, V201) -> fun (V202) -> begin (V203 = (('un--emit'(V2, V3, V200, <<"// CRASH"/utf8>>))(V202))), case V203 of {'Idris.Prelude.Types.Left', E128} -> (fun (V204) -> {'Idris.Prelude.Types.Left', V204} end(E128)); {'Idris.Prelude.Types.Right', E129} -> (fun (V205) -> {'Idris.Prelude.Types.Right', {'Idris.Compiler.RefC.RefC.MkRS', <<"NULL"/utf8>>, <<"NULL"/utf8>>}} end(E129)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E126, E127)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--cOp'(V0, V1, V2) -> case V1 of {'Idris.Core.TT.Neg', E0} -> (fun (V3) -> case V2 of {'Idris.Data.Vect.::', E1, E2} -> (fun (V4, V5) -> case V5 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"negate_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V3)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V4, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V6) -> fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V8, V9, V10)) end end end end end, fun (V11) -> fun (V12) -> fun (V13) -> fun (V14) -> fun (V15) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V13, V14, V15)) end end end end end, fun (V16) -> fun (V17) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V17)) end end}))(V2)))) end end(E1, E2)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V18) -> fun (V19) -> fun (V20) -> fun (V21) -> fun (V22) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V20, V21, V22)) end end end end end, fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V25, V26, V27)) end end end end end, fun (V28) -> fun (V29) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V29)) end end}))(V2)))) end end(E0)); {'Idris.Core.TT.StrLength'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E3, E4} -> (fun (V30, V31) -> case V31 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"stringLength("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V30, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V34, V35, V36)) end end end end end, fun (V37) -> fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V39, V40, V41)) end end end end end, fun (V42) -> fun (V43) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V43)) end end}))(V2)))) end end(E3, E4)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V44) -> fun (V45) -> fun (V46) -> fun (V47) -> fun (V48) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V46, V47, V48)) end end end end end, fun (V49) -> fun (V50) -> fun (V51) -> fun (V52) -> fun (V53) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V51, V52, V53)) end end end end end, fun (V54) -> fun (V55) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V55)) end end}))(V2)))) end end()); {'Idris.Core.TT.StrHead'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E5, E6} -> (fun (V56, V57) -> case V57 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"head("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V56, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V58) -> fun (V59) -> fun (V60) -> fun (V61) -> fun (V62) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V60, V61, V62)) end end end end end, fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V65, V66, V67)) end end end end end, fun (V68) -> fun (V69) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V69)) end end}))(V2)))) end end(E5, E6)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V72, V73, V74)) end end end end end, fun (V75) -> fun (V76) -> fun (V77) -> fun (V78) -> fun (V79) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V77, V78, V79)) end end end end end, fun (V80) -> fun (V81) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V81)) end end}))(V2)))) end end()); {'Idris.Core.TT.StrTail'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E7, E8} -> (fun (V82, V83) -> case V83 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"tail("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V82, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> fun (V88) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V86, V87, V88)) end end end end end, fun (V89) -> fun (V90) -> fun (V91) -> fun (V92) -> fun (V93) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V91, V92, V93)) end end end end end, fun (V94) -> fun (V95) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V95)) end end}))(V2)))) end end(E7, E8)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V96) -> fun (V97) -> fun (V98) -> fun (V99) -> fun (V100) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V98, V99, V100)) end end end end end, fun (V101) -> fun (V102) -> fun (V103) -> fun (V104) -> fun (V105) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V103, V104, V105)) end end end end end, fun (V106) -> fun (V107) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V107)) end end}))(V2)))) end end()); {'Idris.Core.TT.StrReverse'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E9, E10} -> (fun (V108, V109) -> case V109 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"reverse("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V108, <<")"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V110) -> fun (V111) -> fun (V112) -> fun (V113) -> fun (V114) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V112, V113, V114)) end end end end end, fun (V115) -> fun (V116) -> fun (V117) -> fun (V118) -> fun (V119) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V117, V118, V119)) end end end end end, fun (V120) -> fun (V121) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V121)) end end}))(V2)))) end end(E9, E10)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V122) -> fun (V123) -> fun (V124) -> fun (V125) -> fun (V126) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V124, V125, V126)) end end end end end, fun (V127) -> fun (V128) -> fun (V129) -> fun (V130) -> fun (V131) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V129, V130, V131)) end end end end end, fun (V132) -> fun (V133) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V133)) end end}))(V2)))) end end()); {'Idris.Core.TT.Cast', E11, E12} -> (fun (V134, V135) -> case V2 of {'Idris.Data.Vect.::', E13, E14} -> (fun (V136, V137) -> case V137 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"cast_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V134)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_to_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V135)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V136, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V138) -> fun (V139) -> fun (V140) -> fun (V141) -> fun (V142) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V140, V141, V142)) end end end end end, fun (V143) -> fun (V144) -> fun (V145) -> fun (V146) -> fun (V147) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V145, V146, V147)) end end end end end, fun (V148) -> fun (V149) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V149)) end end}))(V2)))) end end(E13, E14)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V150) -> fun (V151) -> fun (V152) -> fun (V153) -> fun (V154) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V152, V153, V154)) end end end end end, fun (V155) -> fun (V156) -> fun (V157) -> fun (V158) -> fun (V159) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V157, V158, V159)) end end end end end, fun (V160) -> fun (V161) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V161)) end end}))(V2)))) end end(E11, E12)); {'Idris.Core.TT.DoubleExp'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E15, E16} -> (fun (V162, V163) -> case V163 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(exp(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V162, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V164) -> fun (V165) -> fun (V166) -> fun (V167) -> fun (V168) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V166, V167, V168)) end end end end end, fun (V169) -> fun (V170) -> fun (V171) -> fun (V172) -> fun (V173) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V171, V172, V173)) end end end end end, fun (V174) -> fun (V175) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V175)) end end}))(V2)))) end end(E15, E16)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V176) -> fun (V177) -> fun (V178) -> fun (V179) -> fun (V180) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V178, V179, V180)) end end end end end, fun (V181) -> fun (V182) -> fun (V183) -> fun (V184) -> fun (V185) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V183, V184, V185)) end end end end end, fun (V186) -> fun (V187) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V187)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleLog'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E17, E18} -> (fun (V188, V189) -> case V189 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(log(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V188, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V190) -> fun (V191) -> fun (V192) -> fun (V193) -> fun (V194) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V192, V193, V194)) end end end end end, fun (V195) -> fun (V196) -> fun (V197) -> fun (V198) -> fun (V199) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V197, V198, V199)) end end end end end, fun (V200) -> fun (V201) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V201)) end end}))(V2)))) end end(E17, E18)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V202) -> fun (V203) -> fun (V204) -> fun (V205) -> fun (V206) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V204, V205, V206)) end end end end end, fun (V207) -> fun (V208) -> fun (V209) -> fun (V210) -> fun (V211) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V209, V210, V211)) end end end end end, fun (V212) -> fun (V213) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V213)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleSin'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E19, E20} -> (fun (V214, V215) -> case V215 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(sin(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V214, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V216) -> fun (V217) -> fun (V218) -> fun (V219) -> fun (V220) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V218, V219, V220)) end end end end end, fun (V221) -> fun (V222) -> fun (V223) -> fun (V224) -> fun (V225) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V223, V224, V225)) end end end end end, fun (V226) -> fun (V227) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V227)) end end}))(V2)))) end end(E19, E20)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V228) -> fun (V229) -> fun (V230) -> fun (V231) -> fun (V232) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V230, V231, V232)) end end end end end, fun (V233) -> fun (V234) -> fun (V235) -> fun (V236) -> fun (V237) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V235, V236, V237)) end end end end end, fun (V238) -> fun (V239) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V239)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleCos'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E21, E22} -> (fun (V240, V241) -> case V241 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(cos(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V240, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V242) -> fun (V243) -> fun (V244) -> fun (V245) -> fun (V246) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V244, V245, V246)) end end end end end, fun (V247) -> fun (V248) -> fun (V249) -> fun (V250) -> fun (V251) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V249, V250, V251)) end end end end end, fun (V252) -> fun (V253) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V253)) end end}))(V2)))) end end(E21, E22)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V254) -> fun (V255) -> fun (V256) -> fun (V257) -> fun (V258) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V256, V257, V258)) end end end end end, fun (V259) -> fun (V260) -> fun (V261) -> fun (V262) -> fun (V263) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V261, V262, V263)) end end end end end, fun (V264) -> fun (V265) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V265)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleTan'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E23, E24} -> (fun (V266, V267) -> case V267 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(tan(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V266, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V268) -> fun (V269) -> fun (V270) -> fun (V271) -> fun (V272) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V270, V271, V272)) end end end end end, fun (V273) -> fun (V274) -> fun (V275) -> fun (V276) -> fun (V277) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V275, V276, V277)) end end end end end, fun (V278) -> fun (V279) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V279)) end end}))(V2)))) end end(E23, E24)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V280) -> fun (V281) -> fun (V282) -> fun (V283) -> fun (V284) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V282, V283, V284)) end end end end end, fun (V285) -> fun (V286) -> fun (V287) -> fun (V288) -> fun (V289) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V287, V288, V289)) end end end end end, fun (V290) -> fun (V291) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V291)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleASin'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E25, E26} -> (fun (V292, V293) -> case V293 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(asin(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V292, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V294) -> fun (V295) -> fun (V296) -> fun (V297) -> fun (V298) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V296, V297, V298)) end end end end end, fun (V299) -> fun (V300) -> fun (V301) -> fun (V302) -> fun (V303) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V301, V302, V303)) end end end end end, fun (V304) -> fun (V305) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V305)) end end}))(V2)))) end end(E25, E26)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V306) -> fun (V307) -> fun (V308) -> fun (V309) -> fun (V310) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V308, V309, V310)) end end end end end, fun (V311) -> fun (V312) -> fun (V313) -> fun (V314) -> fun (V315) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V313, V314, V315)) end end end end end, fun (V316) -> fun (V317) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V317)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleACos'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E27, E28} -> (fun (V318, V319) -> case V319 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(acos(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V318, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V320) -> fun (V321) -> fun (V322) -> fun (V323) -> fun (V324) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V322, V323, V324)) end end end end end, fun (V325) -> fun (V326) -> fun (V327) -> fun (V328) -> fun (V329) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V327, V328, V329)) end end end end end, fun (V330) -> fun (V331) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V331)) end end}))(V2)))) end end(E27, E28)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V332) -> fun (V333) -> fun (V334) -> fun (V335) -> fun (V336) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V334, V335, V336)) end end end end end, fun (V337) -> fun (V338) -> fun (V339) -> fun (V340) -> fun (V341) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V339, V340, V341)) end end end end end, fun (V342) -> fun (V343) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V343)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleATan'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E29, E30} -> (fun (V344, V345) -> case V345 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(atan(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V344, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V346) -> fun (V347) -> fun (V348) -> fun (V349) -> fun (V350) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V348, V349, V350)) end end end end end, fun (V351) -> fun (V352) -> fun (V353) -> fun (V354) -> fun (V355) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V353, V354, V355)) end end end end end, fun (V356) -> fun (V357) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V357)) end end}))(V2)))) end end(E29, E30)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V358) -> fun (V359) -> fun (V360) -> fun (V361) -> fun (V362) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V360, V361, V362)) end end end end end, fun (V363) -> fun (V364) -> fun (V365) -> fun (V366) -> fun (V367) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V365, V366, V367)) end end end end end, fun (V368) -> fun (V369) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V369)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleSqrt'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E31, E32} -> (fun (V370, V371) -> case V371 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(sqrt(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V370, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V372) -> fun (V373) -> fun (V374) -> fun (V375) -> fun (V376) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V374, V375, V376)) end end end end end, fun (V377) -> fun (V378) -> fun (V379) -> fun (V380) -> fun (V381) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V379, V380, V381)) end end end end end, fun (V382) -> fun (V383) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V383)) end end}))(V2)))) end end(E31, E32)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V384) -> fun (V385) -> fun (V386) -> fun (V387) -> fun (V388) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V386, V387, V388)) end end end end end, fun (V389) -> fun (V390) -> fun (V391) -> fun (V392) -> fun (V393) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V391, V392, V393)) end end end end end, fun (V394) -> fun (V395) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V395)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleFloor'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E33, E34} -> (fun (V396, V397) -> case V397 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(floor(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V396, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V398) -> fun (V399) -> fun (V400) -> fun (V401) -> fun (V402) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V400, V401, V402)) end end end end end, fun (V403) -> fun (V404) -> fun (V405) -> fun (V406) -> fun (V407) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V405, V406, V407)) end end end end end, fun (V408) -> fun (V409) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V409)) end end}))(V2)))) end end(E33, E34)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V410) -> fun (V411) -> fun (V412) -> fun (V413) -> fun (V414) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V412, V413, V414)) end end end end end, fun (V415) -> fun (V416) -> fun (V417) -> fun (V418) -> fun (V419) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V417, V418, V419)) end end end end end, fun (V420) -> fun (V421) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V421)) end end}))(V2)))) end end()); {'Idris.Core.TT.DoubleCeiling'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E35, E36} -> (fun (V422, V423) -> case V423 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble(ceil(unpackDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V422, <<")))"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V424) -> fun (V425) -> fun (V426) -> fun (V427) -> fun (V428) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V426, V427, V428)) end end end end end, fun (V429) -> fun (V430) -> fun (V431) -> fun (V432) -> fun (V433) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V431, V432, V433)) end end end end end, fun (V434) -> fun (V435) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V435)) end end}))(V2)))) end end(E35, E36)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V436) -> fun (V437) -> fun (V438) -> fun (V439) -> fun (V440) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V438, V439, V440)) end end end end end, fun (V441) -> fun (V442) -> fun (V443) -> fun (V444) -> fun (V445) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V443, V444, V445)) end end end end end, fun (V446) -> fun (V447) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V447)) end end}))(V2)))) end end()); {'Idris.Core.TT.Add', E37} -> (fun (V448) -> case V2 of {'Idris.Data.Vect.::', E38, E39} -> (fun (V449, V450) -> case V450 of {'Idris.Data.Vect.::', E40, E41} -> (fun (V451, V452) -> case V452 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"add_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V448)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V449, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V451, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V453) -> fun (V454) -> fun (V455) -> fun (V456) -> fun (V457) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V455, V456, V457)) end end end end end, fun (V458) -> fun (V459) -> fun (V460) -> fun (V461) -> fun (V462) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V460, V461, V462)) end end end end end, fun (V463) -> fun (V464) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V464)) end end}))(V2)))) end end(E40, E41)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V465) -> fun (V466) -> fun (V467) -> fun (V468) -> fun (V469) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V467, V468, V469)) end end end end end, fun (V470) -> fun (V471) -> fun (V472) -> fun (V473) -> fun (V474) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V472, V473, V474)) end end end end end, fun (V475) -> fun (V476) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V476)) end end}))(V2)))) end end(E38, E39)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V477) -> fun (V478) -> fun (V479) -> fun (V480) -> fun (V481) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V479, V480, V481)) end end end end end, fun (V482) -> fun (V483) -> fun (V484) -> fun (V485) -> fun (V486) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V484, V485, V486)) end end end end end, fun (V487) -> fun (V488) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V488)) end end}))(V2)))) end end(E37)); {'Idris.Core.TT.Sub', E42} -> (fun (V489) -> case V2 of {'Idris.Data.Vect.::', E43, E44} -> (fun (V490, V491) -> case V491 of {'Idris.Data.Vect.::', E45, E46} -> (fun (V492, V493) -> case V493 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"sub_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V489)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V490, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V492, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V494) -> fun (V495) -> fun (V496) -> fun (V497) -> fun (V498) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V496, V497, V498)) end end end end end, fun (V499) -> fun (V500) -> fun (V501) -> fun (V502) -> fun (V503) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V501, V502, V503)) end end end end end, fun (V504) -> fun (V505) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V505)) end end}))(V2)))) end end(E45, E46)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V506) -> fun (V507) -> fun (V508) -> fun (V509) -> fun (V510) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V508, V509, V510)) end end end end end, fun (V511) -> fun (V512) -> fun (V513) -> fun (V514) -> fun (V515) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V513, V514, V515)) end end end end end, fun (V516) -> fun (V517) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V517)) end end}))(V2)))) end end(E43, E44)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V518) -> fun (V519) -> fun (V520) -> fun (V521) -> fun (V522) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V520, V521, V522)) end end end end end, fun (V523) -> fun (V524) -> fun (V525) -> fun (V526) -> fun (V527) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V525, V526, V527)) end end end end end, fun (V528) -> fun (V529) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V529)) end end}))(V2)))) end end(E42)); {'Idris.Core.TT.Mul', E47} -> (fun (V530) -> case V2 of {'Idris.Data.Vect.::', E48, E49} -> (fun (V531, V532) -> case V532 of {'Idris.Data.Vect.::', E50, E51} -> (fun (V533, V534) -> case V534 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"mul_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V530)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V531, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V533, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V535) -> fun (V536) -> fun (V537) -> fun (V538) -> fun (V539) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V537, V538, V539)) end end end end end, fun (V540) -> fun (V541) -> fun (V542) -> fun (V543) -> fun (V544) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V542, V543, V544)) end end end end end, fun (V545) -> fun (V546) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V546)) end end}))(V2)))) end end(E50, E51)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V547) -> fun (V548) -> fun (V549) -> fun (V550) -> fun (V551) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V549, V550, V551)) end end end end end, fun (V552) -> fun (V553) -> fun (V554) -> fun (V555) -> fun (V556) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V554, V555, V556)) end end end end end, fun (V557) -> fun (V558) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V558)) end end}))(V2)))) end end(E48, E49)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V559) -> fun (V560) -> fun (V561) -> fun (V562) -> fun (V563) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V561, V562, V563)) end end end end end, fun (V564) -> fun (V565) -> fun (V566) -> fun (V567) -> fun (V568) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V566, V567, V568)) end end end end end, fun (V569) -> fun (V570) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V570)) end end}))(V2)))) end end(E47)); {'Idris.Core.TT.Div', E52} -> (fun (V571) -> case V2 of {'Idris.Data.Vect.::', E53, E54} -> (fun (V572, V573) -> case V573 of {'Idris.Data.Vect.::', E55, E56} -> (fun (V574, V575) -> case V575 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"div_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V571)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V572, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V574, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V576) -> fun (V577) -> fun (V578) -> fun (V579) -> fun (V580) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V578, V579, V580)) end end end end end, fun (V581) -> fun (V582) -> fun (V583) -> fun (V584) -> fun (V585) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V583, V584, V585)) end end end end end, fun (V586) -> fun (V587) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V587)) end end}))(V2)))) end end(E55, E56)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V588) -> fun (V589) -> fun (V590) -> fun (V591) -> fun (V592) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V590, V591, V592)) end end end end end, fun (V593) -> fun (V594) -> fun (V595) -> fun (V596) -> fun (V597) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V595, V596, V597)) end end end end end, fun (V598) -> fun (V599) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V599)) end end}))(V2)))) end end(E53, E54)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V600) -> fun (V601) -> fun (V602) -> fun (V603) -> fun (V604) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V602, V603, V604)) end end end end end, fun (V605) -> fun (V606) -> fun (V607) -> fun (V608) -> fun (V609) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V607, V608, V609)) end end end end end, fun (V610) -> fun (V611) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V611)) end end}))(V2)))) end end(E52)); {'Idris.Core.TT.Mod', E57} -> (fun (V612) -> case V2 of {'Idris.Data.Vect.::', E58, E59} -> (fun (V613, V614) -> case V614 of {'Idris.Data.Vect.::', E60, E61} -> (fun (V615, V616) -> case V616 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"mod_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V612)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V613, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V615, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V617) -> fun (V618) -> fun (V619) -> fun (V620) -> fun (V621) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V619, V620, V621)) end end end end end, fun (V622) -> fun (V623) -> fun (V624) -> fun (V625) -> fun (V626) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V624, V625, V626)) end end end end end, fun (V627) -> fun (V628) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V628)) end end}))(V2)))) end end(E60, E61)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V629) -> fun (V630) -> fun (V631) -> fun (V632) -> fun (V633) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V631, V632, V633)) end end end end end, fun (V634) -> fun (V635) -> fun (V636) -> fun (V637) -> fun (V638) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V636, V637, V638)) end end end end end, fun (V639) -> fun (V640) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V640)) end end}))(V2)))) end end(E58, E59)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V641) -> fun (V642) -> fun (V643) -> fun (V644) -> fun (V645) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V643, V644, V645)) end end end end end, fun (V646) -> fun (V647) -> fun (V648) -> fun (V649) -> fun (V650) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V648, V649, V650)) end end end end end, fun (V651) -> fun (V652) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V652)) end end}))(V2)))) end end(E57)); {'Idris.Core.TT.ShiftL', E62} -> (fun (V653) -> case V2 of {'Idris.Data.Vect.::', E63, E64} -> (fun (V654, V655) -> case V655 of {'Idris.Data.Vect.::', E65, E66} -> (fun (V656, V657) -> case V657 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shiftl_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V653)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V654, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V656, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V658) -> fun (V659) -> fun (V660) -> fun (V661) -> fun (V662) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V660, V661, V662)) end end end end end, fun (V663) -> fun (V664) -> fun (V665) -> fun (V666) -> fun (V667) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V665, V666, V667)) end end end end end, fun (V668) -> fun (V669) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V669)) end end}))(V2)))) end end(E65, E66)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V670) -> fun (V671) -> fun (V672) -> fun (V673) -> fun (V674) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V672, V673, V674)) end end end end end, fun (V675) -> fun (V676) -> fun (V677) -> fun (V678) -> fun (V679) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V677, V678, V679)) end end end end end, fun (V680) -> fun (V681) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V681)) end end}))(V2)))) end end(E63, E64)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V682) -> fun (V683) -> fun (V684) -> fun (V685) -> fun (V686) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V684, V685, V686)) end end end end end, fun (V687) -> fun (V688) -> fun (V689) -> fun (V690) -> fun (V691) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V689, V690, V691)) end end end end end, fun (V692) -> fun (V693) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V693)) end end}))(V2)))) end end(E62)); {'Idris.Core.TT.ShiftR', E67} -> (fun (V694) -> case V2 of {'Idris.Data.Vect.::', E68, E69} -> (fun (V695, V696) -> case V696 of {'Idris.Data.Vect.::', E70, E71} -> (fun (V697, V698) -> case V698 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"shiftr_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V694)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V695, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V697, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V699) -> fun (V700) -> fun (V701) -> fun (V702) -> fun (V703) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V701, V702, V703)) end end end end end, fun (V704) -> fun (V705) -> fun (V706) -> fun (V707) -> fun (V708) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V706, V707, V708)) end end end end end, fun (V709) -> fun (V710) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V710)) end end}))(V2)))) end end(E70, E71)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V711) -> fun (V712) -> fun (V713) -> fun (V714) -> fun (V715) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V713, V714, V715)) end end end end end, fun (V716) -> fun (V717) -> fun (V718) -> fun (V719) -> fun (V720) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V718, V719, V720)) end end end end end, fun (V721) -> fun (V722) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V722)) end end}))(V2)))) end end(E68, E69)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V723) -> fun (V724) -> fun (V725) -> fun (V726) -> fun (V727) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V725, V726, V727)) end end end end end, fun (V728) -> fun (V729) -> fun (V730) -> fun (V731) -> fun (V732) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V730, V731, V732)) end end end end end, fun (V733) -> fun (V734) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V734)) end end}))(V2)))) end end(E67)); {'Idris.Core.TT.BAnd', E72} -> (fun (V735) -> case V2 of {'Idris.Data.Vect.::', E73, E74} -> (fun (V736, V737) -> case V737 of {'Idris.Data.Vect.::', E75, E76} -> (fun (V738, V739) -> case V739 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"and_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V735)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V736, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V738, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V740) -> fun (V741) -> fun (V742) -> fun (V743) -> fun (V744) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V742, V743, V744)) end end end end end, fun (V745) -> fun (V746) -> fun (V747) -> fun (V748) -> fun (V749) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V747, V748, V749)) end end end end end, fun (V750) -> fun (V751) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V751)) end end}))(V2)))) end end(E75, E76)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V752) -> fun (V753) -> fun (V754) -> fun (V755) -> fun (V756) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V754, V755, V756)) end end end end end, fun (V757) -> fun (V758) -> fun (V759) -> fun (V760) -> fun (V761) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V759, V760, V761)) end end end end end, fun (V762) -> fun (V763) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V763)) end end}))(V2)))) end end(E73, E74)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V764) -> fun (V765) -> fun (V766) -> fun (V767) -> fun (V768) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V766, V767, V768)) end end end end end, fun (V769) -> fun (V770) -> fun (V771) -> fun (V772) -> fun (V773) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V771, V772, V773)) end end end end end, fun (V774) -> fun (V775) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V775)) end end}))(V2)))) end end(E72)); {'Idris.Core.TT.BOr', E77} -> (fun (V776) -> case V2 of {'Idris.Data.Vect.::', E78, E79} -> (fun (V777, V778) -> case V778 of {'Idris.Data.Vect.::', E80, E81} -> (fun (V779, V780) -> case V780 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"or_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V776)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V777, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V779, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V781) -> fun (V782) -> fun (V783) -> fun (V784) -> fun (V785) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V783, V784, V785)) end end end end end, fun (V786) -> fun (V787) -> fun (V788) -> fun (V789) -> fun (V790) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V788, V789, V790)) end end end end end, fun (V791) -> fun (V792) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V792)) end end}))(V2)))) end end(E80, E81)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V793) -> fun (V794) -> fun (V795) -> fun (V796) -> fun (V797) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V795, V796, V797)) end end end end end, fun (V798) -> fun (V799) -> fun (V800) -> fun (V801) -> fun (V802) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V800, V801, V802)) end end end end end, fun (V803) -> fun (V804) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V804)) end end}))(V2)))) end end(E78, E79)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V805) -> fun (V806) -> fun (V807) -> fun (V808) -> fun (V809) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V807, V808, V809)) end end end end end, fun (V810) -> fun (V811) -> fun (V812) -> fun (V813) -> fun (V814) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V812, V813, V814)) end end end end end, fun (V815) -> fun (V816) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V816)) end end}))(V2)))) end end(E77)); {'Idris.Core.TT.BXOr', E82} -> (fun (V817) -> case V2 of {'Idris.Data.Vect.::', E83, E84} -> (fun (V818, V819) -> case V819 of {'Idris.Data.Vect.::', E85, E86} -> (fun (V820, V821) -> case V821 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"xor_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V817)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V818, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V820, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V822) -> fun (V823) -> fun (V824) -> fun (V825) -> fun (V826) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V824, V825, V826)) end end end end end, fun (V827) -> fun (V828) -> fun (V829) -> fun (V830) -> fun (V831) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V829, V830, V831)) end end end end end, fun (V832) -> fun (V833) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V833)) end end}))(V2)))) end end(E85, E86)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V834) -> fun (V835) -> fun (V836) -> fun (V837) -> fun (V838) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V836, V837, V838)) end end end end end, fun (V839) -> fun (V840) -> fun (V841) -> fun (V842) -> fun (V843) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V841, V842, V843)) end end end end end, fun (V844) -> fun (V845) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V845)) end end}))(V2)))) end end(E83, E84)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V846) -> fun (V847) -> fun (V848) -> fun (V849) -> fun (V850) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V848, V849, V850)) end end end end end, fun (V851) -> fun (V852) -> fun (V853) -> fun (V854) -> fun (V855) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V853, V854, V855)) end end end end end, fun (V856) -> fun (V857) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V857)) end end}))(V2)))) end end(E82)); {'Idris.Core.TT.LT', E87} -> (fun (V858) -> case V2 of {'Idris.Data.Vect.::', E88, E89} -> (fun (V859, V860) -> case V860 of {'Idris.Data.Vect.::', E90, E91} -> (fun (V861, V862) -> case V862 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"lt_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V858)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V859, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V861, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V863) -> fun (V864) -> fun (V865) -> fun (V866) -> fun (V867) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V865, V866, V867)) end end end end end, fun (V868) -> fun (V869) -> fun (V870) -> fun (V871) -> fun (V872) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V870, V871, V872)) end end end end end, fun (V873) -> fun (V874) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V874)) end end}))(V2)))) end end(E90, E91)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V875) -> fun (V876) -> fun (V877) -> fun (V878) -> fun (V879) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V877, V878, V879)) end end end end end, fun (V880) -> fun (V881) -> fun (V882) -> fun (V883) -> fun (V884) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V882, V883, V884)) end end end end end, fun (V885) -> fun (V886) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V886)) end end}))(V2)))) end end(E88, E89)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V887) -> fun (V888) -> fun (V889) -> fun (V890) -> fun (V891) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V889, V890, V891)) end end end end end, fun (V892) -> fun (V893) -> fun (V894) -> fun (V895) -> fun (V896) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V894, V895, V896)) end end end end end, fun (V897) -> fun (V898) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V898)) end end}))(V2)))) end end(E87)); {'Idris.Core.TT.GT', E92} -> (fun (V899) -> case V2 of {'Idris.Data.Vect.::', E93, E94} -> (fun (V900, V901) -> case V901 of {'Idris.Data.Vect.::', E95, E96} -> (fun (V902, V903) -> case V903 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"gt_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V899)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V900, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V902, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V904) -> fun (V905) -> fun (V906) -> fun (V907) -> fun (V908) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V906, V907, V908)) end end end end end, fun (V909) -> fun (V910) -> fun (V911) -> fun (V912) -> fun (V913) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V911, V912, V913)) end end end end end, fun (V914) -> fun (V915) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V915)) end end}))(V2)))) end end(E95, E96)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V916) -> fun (V917) -> fun (V918) -> fun (V919) -> fun (V920) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V918, V919, V920)) end end end end end, fun (V921) -> fun (V922) -> fun (V923) -> fun (V924) -> fun (V925) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V923, V924, V925)) end end end end end, fun (V926) -> fun (V927) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V927)) end end}))(V2)))) end end(E93, E94)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V928) -> fun (V929) -> fun (V930) -> fun (V931) -> fun (V932) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V930, V931, V932)) end end end end end, fun (V933) -> fun (V934) -> fun (V935) -> fun (V936) -> fun (V937) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V935, V936, V937)) end end end end end, fun (V938) -> fun (V939) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V939)) end end}))(V2)))) end end(E92)); {'Idris.Core.TT.EQ', E97} -> (fun (V940) -> case V2 of {'Idris.Data.Vect.::', E98, E99} -> (fun (V941, V942) -> case V942 of {'Idris.Data.Vect.::', E100, E101} -> (fun (V943, V944) -> case V944 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"eq_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V940)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V941, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V943, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V945) -> fun (V946) -> fun (V947) -> fun (V948) -> fun (V949) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V947, V948, V949)) end end end end end, fun (V950) -> fun (V951) -> fun (V952) -> fun (V953) -> fun (V954) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V952, V953, V954)) end end end end end, fun (V955) -> fun (V956) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V956)) end end}))(V2)))) end end(E100, E101)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V957) -> fun (V958) -> fun (V959) -> fun (V960) -> fun (V961) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V959, V960, V961)) end end end end end, fun (V962) -> fun (V963) -> fun (V964) -> fun (V965) -> fun (V966) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V964, V965, V966)) end end end end end, fun (V967) -> fun (V968) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V968)) end end}))(V2)))) end end(E98, E99)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V969) -> fun (V970) -> fun (V971) -> fun (V972) -> fun (V973) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V971, V972, V973)) end end end end end, fun (V974) -> fun (V975) -> fun (V976) -> fun (V977) -> fun (V978) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V976, V977, V978)) end end end end end, fun (V979) -> fun (V980) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V980)) end end}))(V2)))) end end(E97)); {'Idris.Core.TT.LTE', E102} -> (fun (V981) -> case V2 of {'Idris.Data.Vect.::', E103, E104} -> (fun (V982, V983) -> case V983 of {'Idris.Data.Vect.::', E105, E106} -> (fun (V984, V985) -> case V985 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"lte_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V981)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V982, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V984, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V986) -> fun (V987) -> fun (V988) -> fun (V989) -> fun (V990) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V988, V989, V990)) end end end end end, fun (V991) -> fun (V992) -> fun (V993) -> fun (V994) -> fun (V995) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V993, V994, V995)) end end end end end, fun (V996) -> fun (V997) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V997)) end end}))(V2)))) end end(E105, E106)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V998) -> fun (V999) -> fun (V1000) -> fun (V1001) -> fun (V1002) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1000, V1001, V1002)) end end end end end, fun (V1003) -> fun (V1004) -> fun (V1005) -> fun (V1006) -> fun (V1007) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1005, V1006, V1007)) end end end end end, fun (V1008) -> fun (V1009) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1009)) end end}))(V2)))) end end(E103, E104)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1010) -> fun (V1011) -> fun (V1012) -> fun (V1013) -> fun (V1014) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1012, V1013, V1014)) end end end end end, fun (V1015) -> fun (V1016) -> fun (V1017) -> fun (V1018) -> fun (V1019) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1017, V1018, V1019)) end end end end end, fun (V1020) -> fun (V1021) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1021)) end end}))(V2)))) end end(E102)); {'Idris.Core.TT.GTE', E107} -> (fun (V1022) -> case V2 of {'Idris.Data.Vect.::', E108, E109} -> (fun (V1023, V1024) -> case V1024 of {'Idris.Data.Vect.::', E110, E111} -> (fun (V1025, V1026) -> case V1026 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"gte_"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cConstant'(V1022)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1023, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1025, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1027) -> fun (V1028) -> fun (V1029) -> fun (V1030) -> fun (V1031) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1029, V1030, V1031)) end end end end end, fun (V1032) -> fun (V1033) -> fun (V1034) -> fun (V1035) -> fun (V1036) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1034, V1035, V1036)) end end end end end, fun (V1037) -> fun (V1038) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1038)) end end}))(V2)))) end end(E110, E111)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1039) -> fun (V1040) -> fun (V1041) -> fun (V1042) -> fun (V1043) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1041, V1042, V1043)) end end end end end, fun (V1044) -> fun (V1045) -> fun (V1046) -> fun (V1047) -> fun (V1048) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1046, V1047, V1048)) end end end end end, fun (V1049) -> fun (V1050) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1050)) end end}))(V2)))) end end(E108, E109)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1051) -> fun (V1052) -> fun (V1053) -> fun (V1054) -> fun (V1055) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1053, V1054, V1055)) end end end end end, fun (V1056) -> fun (V1057) -> fun (V1058) -> fun (V1059) -> fun (V1060) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1058, V1059, V1060)) end end end end end, fun (V1061) -> fun (V1062) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1062)) end end}))(V2)))) end end(E107)); {'Idris.Core.TT.StrIndex'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E112, E113} -> (fun (V1063, V1064) -> case V1064 of {'Idris.Data.Vect.::', E114, E115} -> (fun (V1065, V1066) -> case V1066 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"strIndex("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1063, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1065, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1067) -> fun (V1068) -> fun (V1069) -> fun (V1070) -> fun (V1071) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1069, V1070, V1071)) end end end end end, fun (V1072) -> fun (V1073) -> fun (V1074) -> fun (V1075) -> fun (V1076) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1074, V1075, V1076)) end end end end end, fun (V1077) -> fun (V1078) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1078)) end end}))(V2)))) end end(E114, E115)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1079) -> fun (V1080) -> fun (V1081) -> fun (V1082) -> fun (V1083) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1081, V1082, V1083)) end end end end end, fun (V1084) -> fun (V1085) -> fun (V1086) -> fun (V1087) -> fun (V1088) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1086, V1087, V1088)) end end end end end, fun (V1089) -> fun (V1090) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1090)) end end}))(V2)))) end end(E112, E113)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1091) -> fun (V1092) -> fun (V1093) -> fun (V1094) -> fun (V1095) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1093, V1094, V1095)) end end end end end, fun (V1096) -> fun (V1097) -> fun (V1098) -> fun (V1099) -> fun (V1100) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1098, V1099, V1100)) end end end end end, fun (V1101) -> fun (V1102) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1102)) end end}))(V2)))) end end()); {'Idris.Core.TT.StrCons'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E116, E117} -> (fun (V1103, V1104) -> case V1104 of {'Idris.Data.Vect.::', E118, E119} -> (fun (V1105, V1106) -> case V1106 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"strCons("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1103, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1105, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1107) -> fun (V1108) -> fun (V1109) -> fun (V1110) -> fun (V1111) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1109, V1110, V1111)) end end end end end, fun (V1112) -> fun (V1113) -> fun (V1114) -> fun (V1115) -> fun (V1116) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1114, V1115, V1116)) end end end end end, fun (V1117) -> fun (V1118) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1118)) end end}))(V2)))) end end(E118, E119)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1119) -> fun (V1120) -> fun (V1121) -> fun (V1122) -> fun (V1123) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1121, V1122, V1123)) end end end end end, fun (V1124) -> fun (V1125) -> fun (V1126) -> fun (V1127) -> fun (V1128) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1126, V1127, V1128)) end end end end end, fun (V1129) -> fun (V1130) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1130)) end end}))(V2)))) end end(E116, E117)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1131) -> fun (V1132) -> fun (V1133) -> fun (V1134) -> fun (V1135) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1133, V1134, V1135)) end end end end end, fun (V1136) -> fun (V1137) -> fun (V1138) -> fun (V1139) -> fun (V1140) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1138, V1139, V1140)) end end end end end, fun (V1141) -> fun (V1142) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1142)) end end}))(V2)))) end end()); {'Idris.Core.TT.StrAppend'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E120, E121} -> (fun (V1143, V1144) -> case V1144 of {'Idris.Data.Vect.::', E122, E123} -> (fun (V1145, V1146) -> case V1146 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"strAppend("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1143, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1145, <<")"/utf8>>)))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1147) -> fun (V1148) -> fun (V1149) -> fun (V1150) -> fun (V1151) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1149, V1150, V1151)) end end end end end, fun (V1152) -> fun (V1153) -> fun (V1154) -> fun (V1155) -> fun (V1156) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1154, V1155, V1156)) end end end end end, fun (V1157) -> fun (V1158) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1158)) end end}))(V2)))) end end(E122, E123)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1159) -> fun (V1160) -> fun (V1161) -> fun (V1162) -> fun (V1163) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1161, V1162, V1163)) end end end end end, fun (V1164) -> fun (V1165) -> fun (V1166) -> fun (V1167) -> fun (V1168) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1166, V1167, V1168)) end end end end end, fun (V1169) -> fun (V1170) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1170)) end end}))(V2)))) end end(E120, E121)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1171) -> fun (V1172) -> fun (V1173) -> fun (V1174) -> fun (V1175) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1173, V1174, V1175)) end end end end end, fun (V1176) -> fun (V1177) -> fun (V1178) -> fun (V1179) -> fun (V1180) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1178, V1179, V1180)) end end end end end, fun (V1181) -> fun (V1182) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1182)) end end}))(V2)))) end end()); {'Idris.Core.TT.StrSubstr'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E124, E125} -> (fun (V1183, V1184) -> case V1184 of {'Idris.Data.Vect.::', E126, E127} -> (fun (V1185, V1186) -> case V1186 of {'Idris.Data.Vect.::', E128, E129} -> (fun (V1187, V1188) -> case V1188 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"strSubstr("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1183, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1185, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1187, <<")"/utf8>>)))))))))))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1189) -> fun (V1190) -> fun (V1191) -> fun (V1192) -> fun (V1193) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1191, V1192, V1193)) end end end end end, fun (V1194) -> fun (V1195) -> fun (V1196) -> fun (V1197) -> fun (V1198) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1196, V1197, V1198)) end end end end end, fun (V1199) -> fun (V1200) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1200)) end end}))(V2)))) end end(E128, E129)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1201) -> fun (V1202) -> fun (V1203) -> fun (V1204) -> fun (V1205) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1203, V1204, V1205)) end end end end end, fun (V1206) -> fun (V1207) -> fun (V1208) -> fun (V1209) -> fun (V1210) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1208, V1209, V1210)) end end end end end, fun (V1211) -> fun (V1212) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1212)) end end}))(V2)))) end end(E126, E127)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1213) -> fun (V1214) -> fun (V1215) -> fun (V1216) -> fun (V1217) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1215, V1216, V1217)) end end end end end, fun (V1218) -> fun (V1219) -> fun (V1220) -> fun (V1221) -> fun (V1222) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1220, V1221, V1222)) end end end end end, fun (V1223) -> fun (V1224) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1224)) end end}))(V2)))) end end(E124, E125)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1225) -> fun (V1226) -> fun (V1227) -> fun (V1228) -> fun (V1229) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1227, V1228, V1229)) end end end end end, fun (V1230) -> fun (V1231) -> fun (V1232) -> fun (V1233) -> fun (V1234) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1232, V1233, V1234)) end end end end end, fun (V1235) -> fun (V1236) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1236)) end end}))(V2)))) end end()); {'Idris.Core.TT.BelieveMe'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E130, E131} -> (fun (V1237, V1238) -> case V1238 of {'Idris.Data.Vect.::', E132, E133} -> (fun (V1239, V1240) -> case V1240 of {'Idris.Data.Vect.::', E134, E135} -> (fun (V1241, V1242) -> case V1242 of {'Idris.Data.Vect.Nil'} -> (fun () -> V1241 end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1243) -> fun (V1244) -> fun (V1245) -> fun (V1246) -> fun (V1247) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1245, V1246, V1247)) end end end end end, fun (V1248) -> fun (V1249) -> fun (V1250) -> fun (V1251) -> fun (V1252) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1250, V1251, V1252)) end end end end end, fun (V1253) -> fun (V1254) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1254)) end end}))(V2)))) end end(E134, E135)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1255) -> fun (V1256) -> fun (V1257) -> fun (V1258) -> fun (V1259) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1257, V1258, V1259)) end end end end end, fun (V1260) -> fun (V1261) -> fun (V1262) -> fun (V1263) -> fun (V1264) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1262, V1263, V1264)) end end end end end, fun (V1265) -> fun (V1266) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1266)) end end}))(V2)))) end end(E132, E133)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1267) -> fun (V1268) -> fun (V1269) -> fun (V1270) -> fun (V1271) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1269, V1270, V1271)) end end end end end, fun (V1272) -> fun (V1273) -> fun (V1274) -> fun (V1275) -> fun (V1276) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1274, V1275, V1276)) end end end end end, fun (V1277) -> fun (V1278) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1278)) end end}))(V2)))) end end(E130, E131)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1279) -> fun (V1280) -> fun (V1281) -> fun (V1282) -> fun (V1283) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1281, V1282, V1283)) end end end end end, fun (V1284) -> fun (V1285) -> fun (V1286) -> fun (V1287) -> fun (V1288) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1286, V1287, V1288)) end end end end end, fun (V1289) -> fun (V1290) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1290)) end end}))(V2)))) end end()); {'Idris.Core.TT.Crash'} -> (fun () -> case V2 of {'Idris.Data.Vect.::', E136, E137} -> (fun (V1291, V1292) -> case V1292 of {'Idris.Data.Vect.::', E138, E139} -> (fun (V1293, V1294) -> case V1294 of {'Idris.Data.Vect.Nil'} -> (fun () -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"idris2_crash("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(V1293, <<");"/utf8>>)))) end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1295) -> fun (V1296) -> fun (V1297) -> fun (V1298) -> fun (V1299) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1297, V1298, V1299)) end end end end end, fun (V1300) -> fun (V1301) -> fun (V1302) -> fun (V1303) -> fun (V1304) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1302, V1303, V1304)) end end end end end, fun (V1305) -> fun (V1306) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1306)) end end}))(V2)))) end end(E138, E139)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1307) -> fun (V1308) -> fun (V1309) -> fun (V1310) -> fun (V1311) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1309, V1310, V1311)) end end end end end, fun (V1312) -> fun (V1313) -> fun (V1314) -> fun (V1315) -> fun (V1316) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1314, V1315, V1316)) end end end end end, fun (V1317) -> fun (V1318) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1318)) end end}))(V2)))) end end(E136, E137)); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1319) -> fun (V1320) -> fun (V1321) -> fun (V1322) -> fun (V1323) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1321, V1322, V1323)) end end end end end, fun (V1324) -> fun (V1325) -> fun (V1326) -> fun (V1327) -> fun (V1328) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1326, V1327, V1328)) end end end end end, fun (V1329) -> fun (V1330) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1330)) end end}))(V2)))) end end()); _ -> ('un--plainOp'(('Idris.Idris2.Core.TT':'dn--un--show_Show_(PrimFn $arity)'('erased', V1)), (('Idris.Idris2.Data.List':'un--toList'('erased', 'erased', {'Idris.Prelude.Interfaces.dn--un--__mkFoldable', fun (V1331) -> fun (V1332) -> fun (V1333) -> fun (V1334) -> fun (V1335) -> ('Idris.Idris2.Data.Vect':'dn--un--foldr_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1333, V1334, V1335)) end end end end end, fun (V1336) -> fun (V1337) -> fun (V1338) -> fun (V1339) -> fun (V1340) -> ('Idris.Idris2.Data.Vect':'dn--un--foldl_Foldable_(Vect $n)'('erased', 'erased', 'erased', V1338, V1339, V1340)) end end end end end, fun (V1341) -> fun (V1342) -> ('Idris.Idris2.Data.Vect':'dn--un--null_Foldable_(Vect $n)'('erased', 'erased', V1342)) end end}))(V2)))) end.
'un--cName'(V0) -> case V0 of {'Idris.Core.Name.NS', E0, E1} -> (fun (V1, V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('Idris.Idris2.Core.Name.Namespace':'un--showNSWithSep'(<<"_"/utf8>>, V1)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cName'(V2)))))) end(E0, E1)); {'Idris.Core.Name.UN', E2} -> (fun (V3) -> ('un--cCleanString'(V3)) end(E2)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V4, V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(V4)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V5)))))))) end(E3, E4)); {'Idris.Core.Name.PV', E5, E6} -> (fun (V6, V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"pat__"/utf8>>, ('un--cName'(V6)))) end(E5, E6)); {'Idris.Core.Name.DN', E7, E8} -> (fun (V8, V9) -> ('un--cName'(V9)) end(E7, E8)); {'Idris.Core.Name.RF', E9} -> (fun (V10) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"rec__"/utf8>>, ('un--cCleanString'(V10)))) end(E9)); {'Idris.Core.Name.Nested', E10, E11} -> (fun (V11, V12) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"n__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'('erased', 'erased', {'Idris.Builtin.MkPair', {'Idris.Prelude.Show.dn--un--__mkShow', fun (V13) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V13)) end, fun (V14) -> fun (V15) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V14, V15)) end end}, {'Idris.Prelude.Show.dn--un--__mkShow', fun (V16) -> ('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V16)) end, fun (V17) -> fun (V18) -> ('Idris.Idris2.Prelude.Show':'dn--un--showPrec_Show_Int'(V17, V18)) end end}}, V11)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cName'(V12)))))))) end(E10, E11)); {'Idris.Core.Name.CaseBlock', E12, E13} -> (fun (V19, V20) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"case__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V19)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V20)))))))))) end(E12, E13)); {'Idris.Core.Name.WithBlock', E14, E15} -> (fun (V21, V22) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"with__"/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_String'(V21)))), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"_"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V22)))))))))) end(E14, E15)); {'Idris.Core.Name.Resolved', E16} -> (fun (V23) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"fn__"/utf8>>, ('un--cCleanString'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V23)))))) end(E16)); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'('erased', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unsupported name in C backend "/utf8>>, ('Idris.Idris2.Core.Name':'dn--un--show_Show_Name'(V0)))))) end.
'un--cConstant'(V0) -> case V0 of {'Idris.Core.TT.I', E0} -> (fun (V1) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V1)), <<")"/utf8>>)))) end(E0)); {'Idris.Core.TT.BI', E1} -> (fun (V2) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V2)), <<")"/utf8>>)))) end(E1)); {'Idris.Core.TT.Db', E2} -> (fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeDouble("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Double'(V3)), <<")"/utf8>>)))) end(E2)); {'Idris.Core.TT.Ch', E3} -> (fun (V4) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeChar("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--escapeChar'(V4)), <<")"/utf8>>)))) end(E3)); {'Idris.Core.TT.Str', E4} -> (fun (V5) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeString("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('un--cStringQuoted'(V5)), <<")"/utf8>>)))) end(E4)); {'Idris.Core.TT.WorldVal'} -> (fun () -> <<"(Value*)makeWorld()"/utf8>> end()); {'Idris.Core.TT.IntType'} -> (fun () -> <<"i32"/utf8>> end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> <<"i64"/utf8>> end()); {'Idris.Core.TT.StringType'} -> (fun () -> <<"string"/utf8>> end()); {'Idris.Core.TT.CharType'} -> (fun () -> <<"char"/utf8>> end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> <<"double"/utf8>> end()); {'Idris.Core.TT.WorldType'} -> (fun () -> <<"f32"/utf8>> end()); {'Idris.Core.TT.B8', E5} -> (fun (V6) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt8("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V6)), <<")"/utf8>>)))) end(E5)); {'Idris.Core.TT.B16', E6} -> (fun (V7) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt16("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V7)), <<")"/utf8>>)))) end(E6)); {'Idris.Core.TT.B32', E7} -> (fun (V8) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt32("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Int'(V8)), <<")"/utf8>>)))) end(E7)); {'Idris.Core.TT.B64', E8} -> (fun (V9) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"(Value*)makeInt64("/utf8>>, ('Idris.Idris2.Prelude.Types.String':'un--++'(('Idris.Idris2.Prelude.Show':'dn--un--show_Show_Integer'(V9)), <<")"/utf8>>)))) end(E8)); {'Idris.Core.TT.Bits8Type'} -> (fun () -> <<"Bits8"/utf8>> end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> <<"Bits16"/utf8>> end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> <<"Bits32"/utf8>> end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> <<"Bits64"/utf8>> end()); _ -> ('Idris.Idris2.Builtin':'un--idris_crash'('erased', ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"INTERNAL ERROR: Unknonw constant in C backend: "/utf8>>, ('Idris.Idris2.Core.TT':'dn--un--show_Show_Constant'(V0)))))) end.
'un--cCleanString'(V0) -> (('un--showcCleanString'(('Idris.Idris2.Prelude.Types':'un--unpack'(V0))))(<<""/utf8>>)).
'un--cArgsVectANF'(V0, V1) -> case V1 of {'Idris.Data.Vect.Nil'} -> (fun () -> fun (V2) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.Nil'}} end end()); {'Idris.Data.Vect.::', E0, E1} -> (fun (V3, V4) -> fun (V5) -> begin (V6 = (('un--cArgsVectANF'('erased', V4))(V5))), case V6 of {'Idris.Prelude.Types.Left', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V8) -> {'Idris.Prelude.Types.Right', {'Idris.Data.Vect.::', ('un--varName'(V3)), V8}} end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'un--addExternalLib'(V0, V1, V2) -> begin (V4 = begin (V3 = ('erlang':'get'(V0))), {'Idris.Prelude.Types.Right', V3} end), case V4 of {'Idris.Prelude.Types.Left', E0} -> (fun (V5) -> {'Idris.Prelude.Types.Left', V5} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V6) -> (('case--addExternalLib-4136'(V1, V0, V6, ('Idris.Idris2.Prelude.Types':'un--elem'('erased', {'Idris.Prelude.EqOrd.dn--un--__mkEq', fun (V7) -> fun (V8) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--==_Eq_String'(V7, V8)) end end, fun (V9) -> fun (V10) -> ('Idris.Idris2.Prelude.EqOrd':'dn--un--/=_Eq_String'(V9, V10)) end end}, V1, V6))))(V2)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--addCommaToList'(V0) -> case V0 of [] -> []; [E0 | E1] -> (fun (V1, V2) -> [('Idris.Idris2.Prelude.Types.String':'un--++'(<<"  "/utf8>>, V1)) | ('Idris.Idris2.Prelude.Types':'dn--un--map_Functor_List'('erased', 'erased', fun (V3) -> ('Idris.Idris2.Prelude.Types.String':'un--++'(<<", "/utf8>>, V3)) end, V2))] end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
