-module('Idris.Idris2.Core.Reflect').
-compile('no_auto_import').
-compile('inline').
-compile({'inline_size',24}).
-export([
  'dn--un--reify_Reify_Visibility'/5,
  'dn--un--reify_Reify_VirtualIdent'/5,
  'dn--un--reify_Reify_TotalReq'/5,
  'dn--un--reify_Reify_String'/4,
  'dn--un--reify_Reify_RigCount'/5,
  'dn--un--reify_Reify_OriginDesc'/5,
  'dn--un--reify_Reify_Nat'/5,
  'dn--un--reify_Reify_Namespace'/4,
  'dn--un--reify_Reify_NameType'/5,
  'dn--un--reify_Reify_Name'/5,
  'dn--un--reify_Reify_ModuleIdent'/4,
  'dn--un--reify_Reify_LazyReason'/5,
  'dn--un--reify_Reify_Integer'/4,
  'dn--un--reify_Reify_Int'/4,
  'dn--un--reify_Reify_FC'/5,
  'dn--un--reify_Reify_Double'/4,
  'dn--un--reify_Reify_Constant'/5,
  'dn--un--reify_Reify_Char'/4,
  'dn--un--reify_Reify_Bool'/5,
  'dn--un--reify_Reify_(|Unit,MkUnit|)'/5,
  'dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/5,
  'dn--un--reify_Reify_(PiInfo $t)'/6,
  'dn--un--reify_Reify_(Maybe $a)'/6,
  'dn--un--reify_Reify_(List1 $a)'/5,
  'dn--un--reify_Reify_(List $a)'/6,
  'dn--un--reflect_Reflect_Visibility'/7,
  'dn--un--reflect_Reflect_VirtualIdent'/7,
  'dn--un--reflect_Reflect_TotalReq'/7,
  'dn--un--reflect_Reflect_String'/7,
  'dn--un--reflect_Reflect_RigCount'/6,
  'dn--un--reflect_Reflect_OriginDesc'/7,
  'dn--un--reflect_Reflect_Nat'/6,
  'dn--un--reflect_Reflect_Namespace'/7,
  'dn--un--reflect_Reflect_NameType'/7,
  'dn--un--reflect_Reflect_Name'/7,
  'dn--un--reflect_Reflect_ModuleIdent'/7,
  'dn--un--reflect_Reflect_LazyReason'/7,
  'dn--un--reflect_Reflect_Integer'/7,
  'dn--un--reflect_Reflect_Int'/7,
  'dn--un--reflect_Reflect_FC'/6,
  'dn--un--reflect_Reflect_Double'/7,
  'dn--un--reflect_Reflect_Constant'/7,
  'dn--un--reflect_Reflect_Char'/7,
  'dn--un--reflect_Reflect_Bool'/7,
  'dn--un--reflect_Reflect_(|Unit,MkUnit|)'/7,
  'dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/8,
  'dn--un--reflect_Reflect_(PiInfo $t)'/8,
  'dn--un--reflect_Reflect_(Maybe $a)'/8,
  'dn--un--reflect_Reflect_(List1 $a)'/8,
  'dn--un--reflect_Reflect_(List $a)'/8,
  'dn--un--__Impl_Reify_Visibility'/4,
  'dn--un--__Impl_Reify_VirtualIdent'/4,
  'dn--un--__Impl_Reify_TotalReq'/4,
  'dn--un--__Impl_Reify_String'/4,
  'dn--un--__Impl_Reify_RigCount'/4,
  'dn--un--__Impl_Reify_OriginDesc'/4,
  'dn--un--__Impl_Reify_Nat'/4,
  'dn--un--__Impl_Reify_Namespace'/4,
  'dn--un--__Impl_Reify_NameType'/4,
  'dn--un--__Impl_Reify_Name'/4,
  'dn--un--__Impl_Reify_ModuleIdent'/4,
  'dn--un--__Impl_Reify_LazyReason'/4,
  'dn--un--__Impl_Reify_Integer'/4,
  'dn--un--__Impl_Reify_Int'/4,
  'dn--un--__Impl_Reify_FC'/4,
  'dn--un--__Impl_Reify_Double'/4,
  'dn--un--__Impl_Reify_Constant'/4,
  'dn--un--__Impl_Reify_Char'/4,
  'dn--un--__Impl_Reify_Bool'/4,
  'dn--un--__Impl_Reify_(|Unit,MkUnit|)'/5,
  'dn--un--__Impl_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/5,
  'dn--un--__Impl_Reify_(PiInfo $t)'/5,
  'dn--un--__Impl_Reify_(Maybe $a)'/5,
  'dn--un--__Impl_Reify_(List1 $a)'/5,
  'dn--un--__Impl_Reify_(List $a)'/5,
  'dn--un--__Impl_Reflect_Visibility'/6,
  'dn--un--__Impl_Reflect_VirtualIdent'/6,
  'dn--un--__Impl_Reflect_TotalReq'/6,
  'dn--un--__Impl_Reflect_String'/7,
  'dn--un--__Impl_Reflect_RigCount'/6,
  'dn--un--__Impl_Reflect_OriginDesc'/7,
  'dn--un--__Impl_Reflect_Nat'/6,
  'dn--un--__Impl_Reflect_Namespace'/7,
  'dn--un--__Impl_Reflect_NameType'/6,
  'dn--un--__Impl_Reflect_Name'/6,
  'dn--un--__Impl_Reflect_ModuleIdent'/7,
  'dn--un--__Impl_Reflect_LazyReason'/6,
  'dn--un--__Impl_Reflect_Integer'/7,
  'dn--un--__Impl_Reflect_Int'/7,
  'dn--un--__Impl_Reflect_FC'/6,
  'dn--un--__Impl_Reflect_Double'/7,
  'dn--un--__Impl_Reflect_Constant'/6,
  'dn--un--__Impl_Reflect_Char'/7,
  'dn--un--__Impl_Reflect_Bool'/6,
  'dn--un--__Impl_Reflect_(|Unit,MkUnit|)'/7,
  'dn--un--__Impl_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'/8,
  'dn--un--__Impl_Reflect_(PiInfo $t)'/7,
  'dn--un--__Impl_Reflect_(Maybe $a)'/7,
  'dn--un--__Impl_Reflect_(List1 $a)'/8,
  'dn--un--__Impl_Reflect_(List $a)'/7,
  'un--reify'/5,
  'un--reflectionttimp'/1,
  'un--reflectiontt'/1,
  'un--reflection'/1,
  'un--reflect'/7,
  'un--primio'/1,
  'un--preludetypes'/1,
  'un--getCon'/5,
  'un--cantReify'/3,
  'un--cantReflect'/3,
  'un--builtin'/1,
  'un--basics'/1,
  'un--appCon'/6
]).
'dn--un--reify_Reify_Visibility'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"Private"/utf8>> -> {'Idris.Prelude.Types.Right', 0}; <<"Export"/utf8>> -> {'Idris.Prelude.Types.Right', 1}; <<"Public"/utf8>> -> {'Idris.Prelude.Types.Right', 2}; _ -> ('un--cantReify'(V41, <<"Visibility"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"Visibility"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"Visibility"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"Visibility"/utf8>>, V4)) end.
'dn--un--reify_Reify_VirtualIdent'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"Interactive"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', 0}; _ -> ('un--cantReify'(V41, <<"VirtualIdent"/utf8>>, V4)) end; _ -> ('un--cantReify'(V41, <<"VirtualIdent"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"VirtualIdent"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"VirtualIdent"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"VirtualIdent"/utf8>>, V4)) end.
'dn--un--reify_Reify_TotalReq'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"Total"/utf8>> -> {'Idris.Prelude.Types.Right', 0}; <<"CoveringOnly"/utf8>> -> {'Idris.Prelude.Types.Right', 1}; <<"PartialOK"/utf8>> -> {'Idris.Prelude.Types.Right', 2}; _ -> ('un--cantReify'(V41, <<"TotalReq"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"TotalReq"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"TotalReq"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"TotalReq"/utf8>>, V4)) end.
'dn--un--reify_Reify_String'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NPrimVal', E0, E1} -> (fun (V4, V5) -> fun (V6) -> case V5 of {'Idris.Core.TT.Str', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E2)); _ -> ('un--cantReify'(V3, <<"String"/utf8>>, V6)) end end end(E0, E1)); _ -> fun (V8) -> ('un--cantReify'(V3, <<"String"/utf8>>, V8)) end end.
'dn--un--reify_Reify_RigCount'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"M0"/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.Semiring':'un--erased'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V45) -> fun (V46) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V45, V46)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V47) -> fun (V48) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V47, V48)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}; <<"M1"/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.Semiring':'un--linear'({'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V49) -> fun (V50) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V49, V50)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V51) -> fun (V52) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V51, V52)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}))}; <<"MW"/utf8>> -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--top_Top_ZeroOneOmega'())}; _ -> ('un--cantReify'(V41, <<"Count"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"Count"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"Count"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"Count"/utf8>>, V4)) end.
'dn--un--reify_Reify_OriginDesc'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"PhysicalIdrSrc"/utf8>> -> case V9 of [E38 | E39] -> (fun (V45, V46) -> case V45 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V47, V48) -> case V46 of [] -> begin (V52 = begin (V49 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V48))(V4))), case V49 of {'Idris.Prelude.Types.Left', E42} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V51) -> (('dn--un--reify_Reify_ModuleIdent'(V0, V1, V2, V51))(V4)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V52 of {'Idris.Prelude.Types.Left', E44} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.PhysicalIdrSrc', V54}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end(E40, E41)); _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end(E38, E39)); _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end; <<"PhysicalPkgSrc"/utf8>> -> case V9 of [E46 | E47] -> (fun (V55, V56) -> case V55 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V57, V58) -> case V56 of [] -> begin (V62 = begin (V59 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V58))(V4))), case V59 of {'Idris.Prelude.Types.Left', E50} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V61) -> (('dn--un--reify_Reify_String'(V0, V1, V2, V61))(V4)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V62 of {'Idris.Prelude.Types.Left', E52} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.PhysicalPkgSrc', V64}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end(E48, E49)); _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end(E46, E47)); _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end; <<"Virtual"/utf8>> -> case V9 of [E54 | E55] -> (fun (V65, V66) -> case V65 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V67, V68) -> case V66 of [] -> begin (V72 = begin (V69 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V68))(V4))), case V69 of {'Idris.Prelude.Types.Left', E58} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V71) -> ('dn--un--reify_Reify_VirtualIdent'(V0, V1, V2, V71, V4)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V72 of {'Idris.Prelude.Types.Left', E60} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.Virtual', V74}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end(E56, E57)); _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end(E54, E55)); _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end; _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"OriginDesc"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"OriginDesc"/utf8>>, V4)) end.
'dn--un--reify_Reify_Nat'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"Z"/utf8>> -> {'Idris.Prelude.Types.Right', 0}; <<"S"/utf8>> -> case V9 of [E38 | E39] -> (fun (V45, V46) -> case V45 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V47, V48) -> case V46 of [] -> begin (V52 = begin (V49 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V48))(V4))), case V49 of {'Idris.Prelude.Types.Left', E42} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V51) -> ('dn--un--reify_Reify_Nat'(V0, V1, V2, V51, V4)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V52 of {'Idris.Prelude.Types.Left', E44} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V54) -> {'Idris.Prelude.Types.Right', (1 + V54)} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Nat"/utf8>>, V4)) end end(E40, E41)); _ -> ('un--cantReify'(V41, <<"Nat"/utf8>>, V4)) end end(E38, E39)); _ -> ('un--cantReify'(V41, <<"Nat"/utf8>>, V4)) end; _ -> ('un--cantReify'(V41, <<"Nat"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"Nat"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"Nat"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"Nat"/utf8>>, V4)) end.
'dn--un--reify_Reify_Namespace'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> case V8 of [E5 | E6] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V11, V12) -> fun (V13) -> case V10 of [] -> begin (V42 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V14 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V13))), case V42 of {'Idris.Prelude.Types.Left', E37} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V44) -> begin (V45 = {'Idris.Core.Value.NDCon', V4, V5, V6, V7, [{'Idris.Builtin.MkPair', V11, V12} | []]}), case V44 of {'Idris.Core.Name.NS', E39, E40} -> (fun (V46, V47) -> case V47 of {'Idris.Core.Name.UN', E41} -> (fun (V48) -> case V48 of <<"MkNS"/utf8>> -> begin (V56 = begin (V49 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V12))(V13))), case V49 of {'Idris.Prelude.Types.Left', E42} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V51) -> ('dn--un--reify_Reify_(List $a)'(fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('dn--un--reify_Reify_String'(V52, V53, V54, V55)) end end end end, V0, V1, V2, V51, V13)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V56 of {'Idris.Prelude.Types.Left', E44} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V58) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name.Namespace':'un--unsafeFoldNamespace'(V58))} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V45, <<"Namespace"/utf8>>, V13)) end end(E41)); _ -> ('un--cantReify'(V45, <<"Namespace"/utf8>>, V13)) end end(E39, E40)); _ -> ('un--cantReify'(V45, <<"Namespace"/utf8>>, V13)) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V3, <<"Namespace"/utf8>>, V13)) end end end(E7, E8)); _ -> fun (V59) -> ('un--cantReify'(V3, <<"Namespace"/utf8>>, V59)) end end end(E5, E6)); _ -> fun (V60) -> ('un--cantReify'(V3, <<"Namespace"/utf8>>, V60)) end end end(E0, E1, E2, E3, E4)); _ -> fun (V61) -> ('un--cantReify'(V3, <<"Namespace"/utf8>>, V61)) end end.
'dn--un--reify_Reify_NameType'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"Bound"/utf8>> -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bound'}}; <<"Func"/utf8>> -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Func'}}; <<"DataCon"/utf8>> -> case V9 of [E38 | E39] -> (fun (V45, V46) -> case V45 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V47, V48) -> case V46 of [E42 | E43] -> (fun (V49, V50) -> case V49 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V51, V52) -> case V50 of [] -> begin (V56 = begin (V53 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V48))(V4))), case V53 of {'Idris.Prelude.Types.Left', E46} -> (fun (V54) -> {'Idris.Prelude.Types.Left', V54} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V55) -> (('dn--un--reify_Reify_Int'(V0, V1, V2, V55))(V4)) end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V56 of {'Idris.Prelude.Types.Left', E48} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V58) -> begin (V62 = begin (V59 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V52))(V4))), case V59 of {'Idris.Prelude.Types.Left', E50} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V61) -> ('dn--un--reify_Reify_Nat'(V0, V1, V2, V61, V4)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V62 of {'Idris.Prelude.Types.Left', E52} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DataCon', V58, V64}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E44, E45)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E42, E43)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E40, E41)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E38, E39)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end; <<"TyCon"/utf8>> -> case V9 of [E54 | E55] -> (fun (V65, V66) -> case V65 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V67, V68) -> case V66 of [E58 | E59] -> (fun (V69, V70) -> case V69 of {'Idris.Builtin.MkPair', E60, E61} -> (fun (V71, V72) -> case V70 of [] -> begin (V76 = begin (V73 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V68))(V4))), case V73 of {'Idris.Prelude.Types.Left', E62} -> (fun (V74) -> {'Idris.Prelude.Types.Left', V74} end(E62)); {'Idris.Prelude.Types.Right', E63} -> (fun (V75) -> (('dn--un--reify_Reify_Int'(V0, V1, V2, V75))(V4)) end(E63)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V76 of {'Idris.Prelude.Types.Left', E64} -> (fun (V77) -> {'Idris.Prelude.Types.Left', V77} end(E64)); {'Idris.Prelude.Types.Right', E65} -> (fun (V78) -> begin (V82 = begin (V79 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V72))(V4))), case V79 of {'Idris.Prelude.Types.Left', E66} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V81) -> ('dn--un--reify_Reify_Nat'(V0, V1, V2, V81, V4)) end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V82 of {'Idris.Prelude.Types.Left', E68} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V84) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.TyCon', V78, V84}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E65)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E60, E61)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E58, E59)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E56, E57)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E54, E55)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end; _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"NameType"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"NameType"/utf8>>, V4)) end.
'dn--un--reify_Reify_Name'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"UN"/utf8>> -> case V9 of [E38 | E39] -> (fun (V45, V46) -> case V45 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V47, V48) -> case V46 of [] -> begin (V52 = begin (V49 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V48))(V4))), case V49 of {'Idris.Prelude.Types.Left', E42} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V51) -> (('dn--un--reify_Reify_String'(V0, V1, V2, V51))(V4)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V52 of {'Idris.Prelude.Types.Left', E44} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.UN', V54}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E40, E41)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E38, E39)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end; <<"MN"/utf8>> -> case V9 of [E46 | E47] -> (fun (V55, V56) -> case V55 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V57, V58) -> case V56 of [E50 | E51] -> (fun (V59, V60) -> case V59 of {'Idris.Builtin.MkPair', E52, E53} -> (fun (V61, V62) -> case V60 of [] -> begin (V66 = begin (V63 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V58))(V4))), case V63 of {'Idris.Prelude.Types.Left', E54} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V65) -> (('dn--un--reify_Reify_String'(V0, V1, V2, V65))(V4)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V66 of {'Idris.Prelude.Types.Left', E56} -> (fun (V67) -> {'Idris.Prelude.Types.Left', V67} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V68) -> begin (V72 = begin (V69 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V62))(V4))), case V69 of {'Idris.Prelude.Types.Left', E58} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V71) -> (('dn--un--reify_Reify_Int'(V0, V1, V2, V71))(V4)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V72 of {'Idris.Prelude.Types.Left', E60} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.MN', V68, V74}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E52, E53)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E50, E51)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E48, E49)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E46, E47)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end; <<"NS"/utf8>> -> case V9 of [E62 | E63] -> (fun (V75, V76) -> case V75 of {'Idris.Builtin.MkPair', E64, E65} -> (fun (V77, V78) -> case V76 of [E66 | E67] -> (fun (V79, V80) -> case V79 of {'Idris.Builtin.MkPair', E68, E69} -> (fun (V81, V82) -> case V80 of [] -> begin (V86 = begin (V83 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V78))(V4))), case V83 of {'Idris.Prelude.Types.Left', E70} -> (fun (V84) -> {'Idris.Prelude.Types.Left', V84} end(E70)); {'Idris.Prelude.Types.Right', E71} -> (fun (V85) -> (('dn--un--reify_Reify_Namespace'(V0, V1, V2, V85))(V4)) end(E71)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V86 of {'Idris.Prelude.Types.Left', E72} -> (fun (V87) -> {'Idris.Prelude.Types.Left', V87} end(E72)); {'Idris.Prelude.Types.Right', E73} -> (fun (V88) -> begin (V92 = begin (V89 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V82))(V4))), case V89 of {'Idris.Prelude.Types.Left', E74} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V91) -> ('dn--un--reify_Reify_Name'(V0, V1, V2, V91, V4)) end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V92 of {'Idris.Prelude.Types.Left', E76} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.NS', V88, V94}} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E73)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E68, E69)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E66, E67)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E64, E65)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E62, E63)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end; <<"DN"/utf8>> -> case V9 of [E78 | E79] -> (fun (V95, V96) -> case V95 of {'Idris.Builtin.MkPair', E80, E81} -> (fun (V97, V98) -> case V96 of [E82 | E83] -> (fun (V99, V100) -> case V99 of {'Idris.Builtin.MkPair', E84, E85} -> (fun (V101, V102) -> case V100 of [] -> begin (V106 = begin (V103 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V98))(V4))), case V103 of {'Idris.Prelude.Types.Left', E86} -> (fun (V104) -> {'Idris.Prelude.Types.Left', V104} end(E86)); {'Idris.Prelude.Types.Right', E87} -> (fun (V105) -> (('dn--un--reify_Reify_String'(V0, V1, V2, V105))(V4)) end(E87)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V106 of {'Idris.Prelude.Types.Left', E88} -> (fun (V107) -> {'Idris.Prelude.Types.Left', V107} end(E88)); {'Idris.Prelude.Types.Right', E89} -> (fun (V108) -> begin (V112 = begin (V109 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V102))(V4))), case V109 of {'Idris.Prelude.Types.Left', E90} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V111) -> ('dn--un--reify_Reify_Name'(V0, V1, V2, V111, V4)) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V112 of {'Idris.Prelude.Types.Left', E92} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.DN', V108, V114}} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E84, E85)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E82, E83)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E80, E81)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E78, E79)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end; <<"RF"/utf8>> -> case V9 of [E94 | E95] -> (fun (V115, V116) -> case V115 of {'Idris.Builtin.MkPair', E96, E97} -> (fun (V117, V118) -> case V116 of [] -> begin (V122 = begin (V119 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V118))(V4))), case V119 of {'Idris.Prelude.Types.Left', E98} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V121) -> (('dn--un--reify_Reify_String'(V0, V1, V2, V121))(V4)) end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V122 of {'Idris.Prelude.Types.Left', E100} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V124) -> {'Idris.Prelude.Types.Right', {'Idris.Core.Name.RF', V124}} end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E96, E97)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E94, E95)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end; _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"Name"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"Name"/utf8>>, V4)) end.
'dn--un--reify_Reify_ModuleIdent'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V4, V5, V6, V7, V8) -> case V8 of [E5 | E6] -> (fun (V9, V10) -> case V9 of {'Idris.Builtin.MkPair', E7, E8} -> (fun (V11, V12) -> fun (V13) -> case V10 of [] -> begin (V42 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36} -> (fun (V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41) -> V14 end(E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V5, V13))), case V42 of {'Idris.Prelude.Types.Left', E37} -> (fun (V43) -> {'Idris.Prelude.Types.Left', V43} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V44) -> begin (V45 = {'Idris.Core.Value.NDCon', V4, V5, V6, V7, [{'Idris.Builtin.MkPair', V11, V12} | []]}), case V44 of {'Idris.Core.Name.NS', E39, E40} -> (fun (V46, V47) -> case V47 of {'Idris.Core.Name.UN', E41} -> (fun (V48) -> case V48 of <<"MkMI"/utf8>> -> begin (V56 = begin (V49 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V12))(V13))), case V49 of {'Idris.Prelude.Types.Left', E42} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V51) -> ('dn--un--reify_Reify_(List $a)'(fun (V52) -> fun (V53) -> fun (V54) -> fun (V55) -> ('dn--un--reify_Reify_String'(V52, V53, V54, V55)) end end end end, V0, V1, V2, V51, V13)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V56 of {'Idris.Prelude.Types.Left', E44} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V58) -> {'Idris.Prelude.Types.Right', ('Idris.Idris2.Core.Name.Namespace':'un--unsafeFoldModuleIdent'(V58))} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V45, <<"ModuleIdent"/utf8>>, V13)) end end(E41)); _ -> ('un--cantReify'(V45, <<"ModuleIdent"/utf8>>, V13)) end end(E39, E40)); _ -> ('un--cantReify'(V45, <<"ModuleIdent"/utf8>>, V13)) end end end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V3, <<"ModuleIdent"/utf8>>, V13)) end end end(E7, E8)); _ -> fun (V59) -> ('un--cantReify'(V3, <<"ModuleIdent"/utf8>>, V59)) end end end(E5, E6)); _ -> fun (V60) -> ('un--cantReify'(V3, <<"ModuleIdent"/utf8>>, V60)) end end end(E0, E1, E2, E3, E4)); _ -> fun (V61) -> ('un--cantReify'(V3, <<"ModuleIdent"/utf8>>, V61)) end end.
'dn--un--reify_Reify_LazyReason'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"LInf"/utf8>> -> {'Idris.Prelude.Types.Right', 0}; <<"LLazy"/utf8>> -> {'Idris.Prelude.Types.Right', 1}; <<"LUnknown"/utf8>> -> {'Idris.Prelude.Types.Right', 2}; _ -> ('un--cantReify'(V41, <<"LazyReason"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"LazyReason"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"LazyReason"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"LazyReason"/utf8>>, V4)) end.
'dn--un--reify_Reify_Integer'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NPrimVal', E0, E1} -> (fun (V4, V5) -> fun (V6) -> case V5 of {'Idris.Core.TT.BI', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E2)); _ -> ('un--cantReify'(V3, <<"Integer"/utf8>>, V6)) end end end(E0, E1)); _ -> fun (V8) -> ('un--cantReify'(V3, <<"Integer"/utf8>>, V8)) end end.
'dn--un--reify_Reify_Int'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NPrimVal', E0, E1} -> (fun (V4, V5) -> fun (V6) -> case V5 of {'Idris.Core.TT.I', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E2)); _ -> ('un--cantReify'(V3, <<"Int"/utf8>>, V6)) end end end(E0, E1)); _ -> fun (V8) -> ('un--cantReify'(V3, <<"Int"/utf8>>, V8)) end end.
'dn--un--reify_Reify_FC'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"MkFC"/utf8>> -> case V9 of [E38 | E39] -> (fun (V45, V46) -> case V45 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V47, V48) -> case V46 of [E42 | E43] -> (fun (V49, V50) -> case V49 of {'Idris.Builtin.MkPair', E44, E45} -> (fun (V51, V52) -> case V50 of [E46 | E47] -> (fun (V53, V54) -> case V53 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V55, V56) -> case V54 of [] -> begin (V60 = begin (V57 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V48))(V4))), case V57 of {'Idris.Prelude.Types.Left', E50} -> (fun (V58) -> {'Idris.Prelude.Types.Left', V58} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V59) -> ('dn--un--reify_Reify_OriginDesc'(V0, V1, V2, V59, V4)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V60 of {'Idris.Prelude.Types.Left', E52} -> (fun (V61) -> {'Idris.Prelude.Types.Left', V61} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V62) -> begin (V74 = begin (V63 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V52))(V4))), case V63 of {'Idris.Prelude.Types.Left', E54} -> (fun (V64) -> {'Idris.Prelude.Types.Left', V64} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V65) -> (('dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V66) -> fun (V67) -> fun (V68) -> fun (V69) -> ('dn--un--reify_Reify_Int'(V66, V67, V68, V69)) end end end end, fun (V70) -> fun (V71) -> fun (V72) -> fun (V73) -> ('dn--un--reify_Reify_Int'(V70, V71, V72, V73)) end end end end}, V0, V1, V2, V65))(V4)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V74 of {'Idris.Prelude.Types.Left', E56} -> (fun (V75) -> {'Idris.Prelude.Types.Left', V75} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V76) -> begin (V88 = begin (V77 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V56))(V4))), case V77 of {'Idris.Prelude.Types.Left', E58} -> (fun (V78) -> {'Idris.Prelude.Types.Left', V78} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V79) -> (('dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> ('dn--un--reify_Reify_Int'(V80, V81, V82, V83)) end end end end, fun (V84) -> fun (V85) -> fun (V86) -> fun (V87) -> ('dn--un--reify_Reify_Int'(V84, V85, V86, V87)) end end end end}, V0, V1, V2, V79))(V4)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V88 of {'Idris.Prelude.Types.Left', E60} -> (fun (V89) -> {'Idris.Prelude.Types.Left', V89} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V90) -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.MkFC', V62, V76, V90}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end(E48, E49)); _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end(E46, E47)); _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end(E44, E45)); _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end(E42, E43)); _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end(E40, E41)); _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end(E38, E39)); _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end; <<"EmptyFC"/utf8>> -> {'Idris.Prelude.Types.Right', {'Idris.Core.FC.EmptyFC'}}; _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"FC"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"FC"/utf8>>, V4)) end.
'dn--un--reify_Reify_Double'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NPrimVal', E0, E1} -> (fun (V4, V5) -> fun (V6) -> case V5 of {'Idris.Core.TT.Db', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E2)); _ -> ('un--cantReify'(V3, <<"Double"/utf8>>, V6)) end end end(E0, E1)); _ -> fun (V8) -> ('un--cantReify'(V3, <<"Double"/utf8>>, V8)) end end.
'dn--un--reify_Reify_Constant'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"I"/utf8>> -> case V9 of [E38 | E39] -> (fun (V45, V46) -> case V45 of {'Idris.Builtin.MkPair', E40, E41} -> (fun (V47, V48) -> case V46 of [] -> begin (V52 = begin (V49 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V48))(V4))), case V49 of {'Idris.Prelude.Types.Left', E42} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E42)); {'Idris.Prelude.Types.Right', E43} -> (fun (V51) -> (('dn--un--reify_Reify_Int'(V0, V1, V2, V51))(V4)) end(E43)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V52 of {'Idris.Prelude.Types.Left', E44} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V54) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I', V54}} end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E40, E41)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E38, E39)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"I8"/utf8>> -> case V9 of [E46 | E47] -> (fun (V55, V56) -> case V55 of {'Idris.Builtin.MkPair', E48, E49} -> (fun (V57, V58) -> case V56 of [] -> begin (V62 = begin (V59 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V58))(V4))), case V59 of {'Idris.Prelude.Types.Left', E50} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V61) -> (('dn--un--reify_Reify_Integer'(V0, V1, V2, V61))(V4)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V62 of {'Idris.Prelude.Types.Left', E52} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V64) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I8', V64}} end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E48, E49)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E46, E47)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"I16"/utf8>> -> case V9 of [E54 | E55] -> (fun (V65, V66) -> case V65 of {'Idris.Builtin.MkPair', E56, E57} -> (fun (V67, V68) -> case V66 of [] -> begin (V72 = begin (V69 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V68))(V4))), case V69 of {'Idris.Prelude.Types.Left', E58} -> (fun (V70) -> {'Idris.Prelude.Types.Left', V70} end(E58)); {'Idris.Prelude.Types.Right', E59} -> (fun (V71) -> (('dn--un--reify_Reify_Integer'(V0, V1, V2, V71))(V4)) end(E59)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V72 of {'Idris.Prelude.Types.Left', E60} -> (fun (V73) -> {'Idris.Prelude.Types.Left', V73} end(E60)); {'Idris.Prelude.Types.Right', E61} -> (fun (V74) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I16', V74}} end(E61)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E56, E57)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E54, E55)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"I32"/utf8>> -> case V9 of [E62 | E63] -> (fun (V75, V76) -> case V75 of {'Idris.Builtin.MkPair', E64, E65} -> (fun (V77, V78) -> case V76 of [] -> begin (V82 = begin (V79 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V78))(V4))), case V79 of {'Idris.Prelude.Types.Left', E66} -> (fun (V80) -> {'Idris.Prelude.Types.Left', V80} end(E66)); {'Idris.Prelude.Types.Right', E67} -> (fun (V81) -> (('dn--un--reify_Reify_Integer'(V0, V1, V2, V81))(V4)) end(E67)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V82 of {'Idris.Prelude.Types.Left', E68} -> (fun (V83) -> {'Idris.Prelude.Types.Left', V83} end(E68)); {'Idris.Prelude.Types.Right', E69} -> (fun (V84) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I32', V84}} end(E69)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E64, E65)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E62, E63)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"I64"/utf8>> -> case V9 of [E70 | E71] -> (fun (V85, V86) -> case V85 of {'Idris.Builtin.MkPair', E72, E73} -> (fun (V87, V88) -> case V86 of [] -> begin (V92 = begin (V89 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V88))(V4))), case V89 of {'Idris.Prelude.Types.Left', E74} -> (fun (V90) -> {'Idris.Prelude.Types.Left', V90} end(E74)); {'Idris.Prelude.Types.Right', E75} -> (fun (V91) -> (('dn--un--reify_Reify_Integer'(V0, V1, V2, V91))(V4)) end(E75)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V92 of {'Idris.Prelude.Types.Left', E76} -> (fun (V93) -> {'Idris.Prelude.Types.Left', V93} end(E76)); {'Idris.Prelude.Types.Right', E77} -> (fun (V94) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.I64', V94}} end(E77)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E72, E73)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E70, E71)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"BI"/utf8>> -> case V9 of [E78 | E79] -> (fun (V95, V96) -> case V95 of {'Idris.Builtin.MkPair', E80, E81} -> (fun (V97, V98) -> case V96 of [] -> begin (V102 = begin (V99 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V98))(V4))), case V99 of {'Idris.Prelude.Types.Left', E82} -> (fun (V100) -> {'Idris.Prelude.Types.Left', V100} end(E82)); {'Idris.Prelude.Types.Right', E83} -> (fun (V101) -> (('dn--un--reify_Reify_Integer'(V0, V1, V2, V101))(V4)) end(E83)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V102 of {'Idris.Prelude.Types.Left', E84} -> (fun (V103) -> {'Idris.Prelude.Types.Left', V103} end(E84)); {'Idris.Prelude.Types.Right', E85} -> (fun (V104) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.BI', V104}} end(E85)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E80, E81)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E78, E79)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"B8"/utf8>> -> case V9 of [E86 | E87] -> (fun (V105, V106) -> case V105 of {'Idris.Builtin.MkPair', E88, E89} -> (fun (V107, V108) -> case V106 of [] -> begin (V112 = begin (V109 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V108))(V4))), case V109 of {'Idris.Prelude.Types.Left', E90} -> (fun (V110) -> {'Idris.Prelude.Types.Left', V110} end(E90)); {'Idris.Prelude.Types.Right', E91} -> (fun (V111) -> (('dn--un--reify_Reify_Int'(V0, V1, V2, V111))(V4)) end(E91)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V112 of {'Idris.Prelude.Types.Left', E92} -> (fun (V113) -> {'Idris.Prelude.Types.Left', V113} end(E92)); {'Idris.Prelude.Types.Right', E93} -> (fun (V114) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.B8', V114}} end(E93)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E88, E89)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E86, E87)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"B16"/utf8>> -> case V9 of [E94 | E95] -> (fun (V115, V116) -> case V115 of {'Idris.Builtin.MkPair', E96, E97} -> (fun (V117, V118) -> case V116 of [] -> begin (V122 = begin (V119 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V118))(V4))), case V119 of {'Idris.Prelude.Types.Left', E98} -> (fun (V120) -> {'Idris.Prelude.Types.Left', V120} end(E98)); {'Idris.Prelude.Types.Right', E99} -> (fun (V121) -> (('dn--un--reify_Reify_Int'(V0, V1, V2, V121))(V4)) end(E99)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V122 of {'Idris.Prelude.Types.Left', E100} -> (fun (V123) -> {'Idris.Prelude.Types.Left', V123} end(E100)); {'Idris.Prelude.Types.Right', E101} -> (fun (V124) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.B16', V124}} end(E101)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E96, E97)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E94, E95)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"B32"/utf8>> -> case V9 of [E102 | E103] -> (fun (V125, V126) -> case V125 of {'Idris.Builtin.MkPair', E104, E105} -> (fun (V127, V128) -> case V126 of [] -> begin (V132 = begin (V129 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V128))(V4))), case V129 of {'Idris.Prelude.Types.Left', E106} -> (fun (V130) -> {'Idris.Prelude.Types.Left', V130} end(E106)); {'Idris.Prelude.Types.Right', E107} -> (fun (V131) -> (('dn--un--reify_Reify_Int'(V0, V1, V2, V131))(V4)) end(E107)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V132 of {'Idris.Prelude.Types.Left', E108} -> (fun (V133) -> {'Idris.Prelude.Types.Left', V133} end(E108)); {'Idris.Prelude.Types.Right', E109} -> (fun (V134) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.B32', V134}} end(E109)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E104, E105)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E102, E103)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"B64"/utf8>> -> case V9 of [E110 | E111] -> (fun (V135, V136) -> case V135 of {'Idris.Builtin.MkPair', E112, E113} -> (fun (V137, V138) -> case V136 of [] -> begin (V142 = begin (V139 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V138))(V4))), case V139 of {'Idris.Prelude.Types.Left', E114} -> (fun (V140) -> {'Idris.Prelude.Types.Left', V140} end(E114)); {'Idris.Prelude.Types.Right', E115} -> (fun (V141) -> (('dn--un--reify_Reify_Integer'(V0, V1, V2, V141))(V4)) end(E115)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V142 of {'Idris.Prelude.Types.Left', E116} -> (fun (V143) -> {'Idris.Prelude.Types.Left', V143} end(E116)); {'Idris.Prelude.Types.Right', E117} -> (fun (V144) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.B64', V144}} end(E117)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E112, E113)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E110, E111)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Str"/utf8>> -> case V9 of [E118 | E119] -> (fun (V145, V146) -> case V145 of {'Idris.Builtin.MkPair', E120, E121} -> (fun (V147, V148) -> case V146 of [] -> begin (V152 = begin (V149 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V148))(V4))), case V149 of {'Idris.Prelude.Types.Left', E122} -> (fun (V150) -> {'Idris.Prelude.Types.Left', V150} end(E122)); {'Idris.Prelude.Types.Right', E123} -> (fun (V151) -> (('dn--un--reify_Reify_String'(V0, V1, V2, V151))(V4)) end(E123)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V152 of {'Idris.Prelude.Types.Left', E124} -> (fun (V153) -> {'Idris.Prelude.Types.Left', V153} end(E124)); {'Idris.Prelude.Types.Right', E125} -> (fun (V154) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Str', V154}} end(E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E120, E121)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E118, E119)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Ch"/utf8>> -> case V9 of [E126 | E127] -> (fun (V155, V156) -> case V155 of {'Idris.Builtin.MkPair', E128, E129} -> (fun (V157, V158) -> case V156 of [] -> begin (V162 = begin (V159 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V158))(V4))), case V159 of {'Idris.Prelude.Types.Left', E130} -> (fun (V160) -> {'Idris.Prelude.Types.Left', V160} end(E130)); {'Idris.Prelude.Types.Right', E131} -> (fun (V161) -> (('dn--un--reify_Reify_Char'(V0, V1, V2, V161))(V4)) end(E131)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V162 of {'Idris.Prelude.Types.Left', E132} -> (fun (V163) -> {'Idris.Prelude.Types.Left', V163} end(E132)); {'Idris.Prelude.Types.Right', E133} -> (fun (V164) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Ch', V164}} end(E133)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E128, E129)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E126, E127)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Db"/utf8>> -> case V9 of [E134 | E135] -> (fun (V165, V166) -> case V165 of {'Idris.Builtin.MkPair', E136, E137} -> (fun (V167, V168) -> case V166 of [] -> begin (V172 = begin (V169 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V0, V1, V2, V168))(V4))), case V169 of {'Idris.Prelude.Types.Left', E138} -> (fun (V170) -> {'Idris.Prelude.Types.Left', V170} end(E138)); {'Idris.Prelude.Types.Right', E139} -> (fun (V171) -> (('dn--un--reify_Reify_Double'(V0, V1, V2, V171))(V4)) end(E139)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V172 of {'Idris.Prelude.Types.Left', E140} -> (fun (V173) -> {'Idris.Prelude.Types.Left', V173} end(E140)); {'Idris.Prelude.Types.Right', E141} -> (fun (V174) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Db', V174}} end(E141)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E136, E137)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E134, E135)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"WorldVal"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.WorldVal'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"IntType"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IntType'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Int8Type"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Int8Type'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Int16Type"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Int16Type'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Int32Type"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Int32Type'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Int64Type"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Int64Type'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"IntegerType"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.IntegerType'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Bits8Type"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bits8Type'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Bits16Type"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bits16Type'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Bits32Type"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bits32Type'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"Bits64Type"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Bits64Type'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"StringType"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.StringType'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"CharType"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.CharType'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"DoubleType"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DoubleType'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; <<"WorldType"/utf8>> -> case V9 of [] -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.WorldType'}}; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end; _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"Constant"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"Constant"/utf8>>, V4)) end.
'dn--un--reify_Reify_Char'(V0, V1, V2, V3) -> case V3 of {'Idris.Core.Value.NPrimVal', E0, E1} -> (fun (V4, V5) -> fun (V6) -> case V5 of {'Idris.Core.TT.Ch', E2} -> (fun (V7) -> {'Idris.Prelude.Types.Right', V7} end(E2)); _ -> ('un--cantReify'(V3, <<"Char"/utf8>>, V6)) end end end(E0, E1)); _ -> fun (V8) -> ('un--cantReify'(V3, <<"Char"/utf8>>, V8)) end end.
'dn--un--reify_Reify_Bool'(V0, V1, V2, V3, V4) -> case V3 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> begin (V38 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37) -> V10 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V4))), case V38 of {'Idris.Prelude.Types.Left', E33} -> (fun (V39) -> {'Idris.Prelude.Types.Left', V39} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V40) -> begin (V41 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, V9}), case V40 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V42, V43) -> case V43 of {'Idris.Core.Name.UN', E37} -> (fun (V44) -> case V44 of <<"True"/utf8>> -> {'Idris.Prelude.Types.Right', 1}; <<"False"/utf8>> -> {'Idris.Prelude.Types.Right', 0}; _ -> ('un--cantReify'(V41, <<"Bool"/utf8>>, V4)) end end(E37)); _ -> ('un--cantReify'(V41, <<"Bool"/utf8>>, V4)) end end(E35, E36)); _ -> ('un--cantReify'(V41, <<"Bool"/utf8>>, V4)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V3, <<"Bool"/utf8>>, V4)) end.
'dn--un--reify_Reify_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4) -> {'Idris.Prelude.Types.Right', 0}.
'dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> case V9 of [E5 | E6] -> (fun (V10, V11) -> case V11 of [E7 | E8] -> (fun (V12, V13) -> case V13 of [E9 | E10] -> (fun (V14, V15) -> case V14 of {'Idris.Builtin.MkPair', E11, E12} -> (fun (V16, V17) -> case V15 of [E13 | E14] -> (fun (V18, V19) -> case V18 of {'Idris.Builtin.MkPair', E15, E16} -> (fun (V20, V21) -> fun (V22) -> case V19 of [] -> begin (V51 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Idris.Core.Context.MkDefs', E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44} -> (fun (V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50) -> V23 end(E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V22))), case V51 of {'Idris.Prelude.Types.Left', E45} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E45)); {'Idris.Prelude.Types.Right', E46} -> (fun (V53) -> begin (V54 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, [V10 | [V12 | [{'Idris.Builtin.MkPair', V16, V17} | [{'Idris.Builtin.MkPair', V20, V21} | []]]]]}), case V53 of {'Idris.Core.Name.NS', E47, E48} -> (fun (V55, V56) -> case V56 of {'Idris.Core.Name.UN', E49} -> (fun (V57) -> case V57 of <<"MkPair"/utf8>> -> begin (V61 = begin (V58 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V2, V3, V17))(V22))), case V58 of {'Idris.Prelude.Types.Left', E50} -> (fun (V59) -> {'Idris.Prelude.Types.Left', V59} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V60) -> (((((('Idris.Idris2.Builtin':'un--fst'(V0))(V1))(V2))(V3))(V60))(V22)) end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V61 of {'Idris.Prelude.Types.Left', E52} -> (fun (V62) -> {'Idris.Prelude.Types.Left', V62} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V63) -> begin (V67 = begin (V64 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V2, V3, V21))(V22))), case V64 of {'Idris.Prelude.Types.Left', E54} -> (fun (V65) -> {'Idris.Prelude.Types.Left', V65} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V66) -> (((((('Idris.Idris2.Builtin':'un--snd'(V0))(V1))(V2))(V3))(V66))(V22)) end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V67 of {'Idris.Prelude.Types.Left', E56} -> (fun (V68) -> {'Idris.Prelude.Types.Left', V68} end(E56)); {'Idris.Prelude.Types.Right', E57} -> (fun (V69) -> {'Idris.Prelude.Types.Right', {'Idris.Builtin.MkPair', V63, V69}} end(E57)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V54, <<"Pair"/utf8>>, V22)) end end(E49)); _ -> ('un--cantReify'(V54, <<"Pair"/utf8>>, V22)) end end(E47, E48)); _ -> ('un--cantReify'(V54, <<"Pair"/utf8>>, V22)) end end end(E46)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V4, <<"Pair"/utf8>>, V22)) end end end(E15, E16)); _ -> fun (V70) -> ('un--cantReify'(V4, <<"Pair"/utf8>>, V70)) end end end(E13, E14)); _ -> fun (V71) -> ('un--cantReify'(V4, <<"Pair"/utf8>>, V71)) end end end(E11, E12)); _ -> fun (V72) -> ('un--cantReify'(V4, <<"Pair"/utf8>>, V72)) end end end(E9, E10)); _ -> fun (V73) -> ('un--cantReify'(V4, <<"Pair"/utf8>>, V73)) end end end(E7, E8)); _ -> fun (V74) -> ('un--cantReify'(V4, <<"Pair"/utf8>>, V74)) end end end(E5, E6)); _ -> fun (V75) -> ('un--cantReify'(V4, <<"Pair"/utf8>>, V75)) end end end(E0, E1, E2, E3, E4)); _ -> fun (V76) -> ('un--cantReify'(V4, <<"Pair"/utf8>>, V76)) end end.
'dn--un--reify_Reify_(PiInfo $t)'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> begin (V39 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V11 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V5))), case V39 of {'Idris.Prelude.Types.Left', E33} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V41) -> begin (V42 = {'Idris.Core.Value.NDCon', V6, V7, V8, V9, V10}), case V41 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V43, V44) -> case V44 of {'Idris.Core.Name.UN', E37} -> (fun (V45) -> case V45 of <<"ImplicitArg"/utf8>> -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Implicit'}}; <<"ExplicitArg"/utf8>> -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Explicit'}}; <<"AutoImplicit"/utf8>> -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.AutoImplicit'}}; <<"DefImplicit"/utf8>> -> case V10 of [E38 | E39] -> (fun (V46, V47) -> case V47 of [E40 | E41] -> (fun (V48, V49) -> case V48 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V50, V51) -> case V49 of [] -> begin (V55 = begin (V52 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V2, V3, V51))(V5))), case V52 of {'Idris.Prelude.Types.Left', E44} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V54) -> (((((V0(V1))(V2))(V3))(V54))(V5)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V55 of {'Idris.Prelude.Types.Left', E46} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.DefImplicit', V57}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V42, <<"PiInfo"/utf8>>, V5)) end end(E42, E43)); _ -> ('un--cantReify'(V42, <<"PiInfo"/utf8>>, V5)) end end(E40, E41)); _ -> ('un--cantReify'(V42, <<"PiInfo"/utf8>>, V5)) end end(E38, E39)); _ -> ('un--cantReify'(V42, <<"PiInfo"/utf8>>, V5)) end; _ -> ('un--cantReify'(V42, <<"PiInfo"/utf8>>, V5)) end end(E37)); _ -> ('un--cantReify'(V42, <<"PiInfo"/utf8>>, V5)) end end(E35, E36)); _ -> ('un--cantReify'(V42, <<"PiInfo"/utf8>>, V5)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V4, <<"PiInfo"/utf8>>, V5)) end.
'dn--un--reify_Reify_(Maybe $a)'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> begin (V39 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V11 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V5))), case V39 of {'Idris.Prelude.Types.Left', E33} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V41) -> begin (V42 = {'Idris.Core.Value.NDCon', V6, V7, V8, V9, V10}), case V41 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V43, V44) -> case V44 of {'Idris.Core.Name.UN', E37} -> (fun (V45) -> case V45 of <<"Nothing"/utf8>> -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Nothing'}}; <<"Just"/utf8>> -> case V10 of [E38 | E39] -> (fun (V46, V47) -> case V47 of [E40 | E41] -> (fun (V48, V49) -> case V48 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V50, V51) -> case V49 of [] -> begin (V55 = begin (V52 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V2, V3, V51))(V5))), case V52 of {'Idris.Prelude.Types.Left', E44} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E44)); {'Idris.Prelude.Types.Right', E45} -> (fun (V54) -> (((((V0(V1))(V2))(V3))(V54))(V5)) end(E45)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V55 of {'Idris.Prelude.Types.Left', E46} -> (fun (V56) -> {'Idris.Prelude.Types.Left', V56} end(E46)); {'Idris.Prelude.Types.Right', E47} -> (fun (V57) -> {'Idris.Prelude.Types.Right', {'Idris.Prelude.Types.Just', V57}} end(E47)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V42, <<"Maybe"/utf8>>, V5)) end end(E42, E43)); _ -> ('un--cantReify'(V42, <<"Maybe"/utf8>>, V5)) end end(E40, E41)); _ -> ('un--cantReify'(V42, <<"Maybe"/utf8>>, V5)) end end(E38, E39)); _ -> ('un--cantReify'(V42, <<"Maybe"/utf8>>, V5)) end; _ -> ('un--cantReify'(V42, <<"Maybe"/utf8>>, V5)) end end(E37)); _ -> ('un--cantReify'(V42, <<"Maybe"/utf8>>, V5)) end end(E35, E36)); _ -> ('un--cantReify'(V42, <<"Maybe"/utf8>>, V5)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V4, <<"Maybe"/utf8>>, V5)) end.
'dn--un--reify_Reify_(List1 $a)'(V0, V1, V2, V3, V4) -> case V4 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V5, V6, V7, V8, V9) -> case V9 of [E5 | E6] -> (fun (V10, V11) -> case V11 of [E7 | E8] -> (fun (V12, V13) -> case V12 of {'Idris.Builtin.MkPair', E9, E10} -> (fun (V14, V15) -> case V13 of [E11 | E12] -> (fun (V16, V17) -> case V16 of {'Idris.Builtin.MkPair', E13, E14} -> (fun (V18, V19) -> fun (V20) -> case V17 of [] -> begin (V49 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Idris.Core.Context.MkDefs', E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42} -> (fun (V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38, V39, V40, V41, V42, V43, V44, V45, V46, V47, V48) -> V21 end(E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V6, V20))), case V49 of {'Idris.Prelude.Types.Left', E43} -> (fun (V50) -> {'Idris.Prelude.Types.Left', V50} end(E43)); {'Idris.Prelude.Types.Right', E44} -> (fun (V51) -> begin (V52 = {'Idris.Core.Value.NDCon', V5, V6, V7, V8, [V10 | [{'Idris.Builtin.MkPair', V14, V15} | [{'Idris.Builtin.MkPair', V18, V19} | []]]]}), case V51 of {'Idris.Core.Name.NS', E45, E46} -> (fun (V53, V54) -> case V54 of {'Idris.Core.Name.UN', E47} -> (fun (V55) -> case V55 of <<":::"/utf8>> -> begin (V59 = begin (V56 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V2, V3, V15))(V20))), case V56 of {'Idris.Prelude.Types.Left', E48} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V58) -> (((((V0(V1))(V2))(V3))(V58))(V20)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V59 of {'Idris.Prelude.Types.Left', E50} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V61) -> begin (V65 = begin (V62 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V2, V3, V19))(V20))), case V62 of {'Idris.Prelude.Types.Left', E52} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V64) -> ('dn--un--reify_Reify_(List $a)'(V0, V1, V2, V3, V64, V20)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V65 of {'Idris.Prelude.Types.Left', E54} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V67) -> {'Idris.Prelude.Types.Right', {'Idris.Data.List1.:::', V61, V67}} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V52, <<"List1"/utf8>>, V20)) end end(E47)); _ -> ('un--cantReify'(V52, <<"List1"/utf8>>, V20)) end end(E45, E46)); _ -> ('un--cantReify'(V52, <<"List1"/utf8>>, V20)) end end end(E44)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V4, <<"List1"/utf8>>, V20)) end end end(E13, E14)); _ -> fun (V68) -> ('un--cantReify'(V4, <<"List1"/utf8>>, V68)) end end end(E11, E12)); _ -> fun (V69) -> ('un--cantReify'(V4, <<"List1"/utf8>>, V69)) end end end(E9, E10)); _ -> fun (V70) -> ('un--cantReify'(V4, <<"List1"/utf8>>, V70)) end end end(E7, E8)); _ -> fun (V71) -> ('un--cantReify'(V4, <<"List1"/utf8>>, V71)) end end end(E5, E6)); _ -> fun (V72) -> ('un--cantReify'(V4, <<"List1"/utf8>>, V72)) end end end(E0, E1, E2, E3, E4)); _ -> fun (V73) -> ('un--cantReify'(V4, <<"List1"/utf8>>, V73)) end end.
'dn--un--reify_Reify_(List $a)'(V0, V1, V2, V3, V4, V5) -> case V4 of {'Idris.Core.Value.NDCon', E0, E1, E2, E3, E4} -> (fun (V6, V7, V8, V9, V10) -> begin (V39 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V3 of {'Idris.Core.Context.MkDefs', E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32} -> (fun (V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36, V37, V38) -> V11 end(E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29, E30, E31, E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7, V5))), case V39 of {'Idris.Prelude.Types.Left', E33} -> (fun (V40) -> {'Idris.Prelude.Types.Left', V40} end(E33)); {'Idris.Prelude.Types.Right', E34} -> (fun (V41) -> begin (V42 = {'Idris.Core.Value.NDCon', V6, V7, V8, V9, V10}), case V41 of {'Idris.Core.Name.NS', E35, E36} -> (fun (V43, V44) -> case V44 of {'Idris.Core.Name.UN', E37} -> (fun (V45) -> case V45 of <<"Nil"/utf8>> -> {'Idris.Prelude.Types.Right', []}; <<"::"/utf8>> -> case V10 of [E38 | E39] -> (fun (V46, V47) -> case V47 of [E40 | E41] -> (fun (V48, V49) -> case V48 of {'Idris.Builtin.MkPair', E42, E43} -> (fun (V50, V51) -> case V49 of [E44 | E45] -> (fun (V52, V53) -> case V52 of {'Idris.Builtin.MkPair', E46, E47} -> (fun (V54, V55) -> case V53 of [] -> begin (V59 = begin (V56 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V2, V3, V51))(V5))), case V56 of {'Idris.Prelude.Types.Left', E48} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E48)); {'Idris.Prelude.Types.Right', E49} -> (fun (V58) -> (((((V0(V1))(V2))(V3))(V58))(V5)) end(E49)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V59 of {'Idris.Prelude.Types.Left', E50} -> (fun (V60) -> {'Idris.Prelude.Types.Left', V60} end(E50)); {'Idris.Prelude.Types.Right', E51} -> (fun (V61) -> begin (V65 = begin (V62 = (('Idris.Idris2.Core.Normalise':'un--evalClosure'(V1, V2, V3, V55))(V5))), case V62 of {'Idris.Prelude.Types.Left', E52} -> (fun (V63) -> {'Idris.Prelude.Types.Left', V63} end(E52)); {'Idris.Prelude.Types.Right', E53} -> (fun (V64) -> ('dn--un--reify_Reify_(List $a)'(V0, V1, V2, V3, V64, V5)) end(E53)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end), case V65 of {'Idris.Prelude.Types.Left', E54} -> (fun (V66) -> {'Idris.Prelude.Types.Left', V66} end(E54)); {'Idris.Prelude.Types.Right', E55} -> (fun (V67) -> {'Idris.Prelude.Types.Right', [V61 | V67]} end(E55)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E51)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end; _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end end(E46, E47)); _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end end(E44, E45)); _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end end(E42, E43)); _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end end(E40, E41)); _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end end(E38, E39)); _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end; _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end end(E37)); _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end end(E35, E36)); _ -> ('un--cantReify'(V42, <<"List"/utf8>>, V5)) end end end(E34)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2, E3, E4)); _ -> ('un--cantReify'(V4, <<"List"/utf8>>, V5)) end.
'dn--un--reflect_Reflect_Visibility'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Private"/utf8>>)), V6)); 1 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Export"/utf8>>)), V6)); 2 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Public"/utf8>>)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_VirtualIdent'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Interactive"/utf8>>)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_TotalReq'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Total"/utf8>>)), V6)); 1 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"CoveringOnly"/utf8>>)), V6)); 2 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"PartialOK"/utf8>>)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Str', V5}}}.
'dn--un--reflect_Reflect_RigCount'(V0, V1, V2, V3, V4, V5) -> ('Idris.Idris2.Algebra.Semiring':'un--elimSemi'({'Idris.Builtin.MkPair', {'Idris.Algebra.Semiring.dn--un--__mkSemiring', fun (V6) -> fun (V7) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|+|_Semiring_ZeroOneOmega'(V6, V7)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--plusNeutral_Semiring_ZeroOneOmega'()), fun (V8) -> fun (V9) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--|*|_Semiring_ZeroOneOmega'(V8, V9)) end end, ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--timesNeutral_Semiring_ZeroOneOmega'())}, {'Idris.Prelude.EqOrd.MkEq', fun (V10) -> fun (V11) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--==_Eq_ZeroOneOmega'(V10, V11)) end end, fun (V12) -> fun (V13) -> ('Idris.Idris2.Algebra.ZeroOneOmega':'dn--un--/=_Eq_ZeroOneOmega'(V12, V13)) end end}}, fun (V14) -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"M0"/utf8>>)), V14)) end, fun (V15) -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"M1"/utf8>>)), V15)) end, fun (V16) -> fun (V17) -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"MW"/utf8>>)), V17)) end end, V5)).
'dn--un--reflect_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.FC.PhysicalIdrSrc', E0} -> (fun (V7) -> begin (V8 = ('dn--un--reflect_Reflect_ModuleIdent'(V0, V1, V2, V3, V4, V7, V6))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"PhysicalIdrSrc"/utf8>>)), [V10 | []], V6)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.FC.PhysicalPkgSrc', E3} -> (fun (V11) -> begin (V12 = ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V11, V6))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"PhysicalPkgSrc"/utf8>>)), [V14 | []], V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Core.FC.Virtual', E6} -> (fun (V15) -> begin (V16 = ('dn--un--reflect_Reflect_VirtualIdent'(V0, V1, V2, V3, V4, V15, V6))), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Virtual"/utf8>>)), [V18 | []], V6)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V5) -> case V5 of 0 -> fun (V6) -> ('un--getCon'(V0, V1, V2, ('un--preludetypes'(<<"Z"/utf8>>)), V6)) end; _ -> begin (V7 = (V5 - 1)), fun (V8) -> begin (V9 = (('dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V7))(V8))), case V9 of {'Idris.Prelude.Types.Left', E0} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V11) -> ('un--appCon'(V0, V1, V2, ('un--preludetypes'(<<"S"/utf8>>)), [V11 | []], V8)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end end end.
'dn--un--reflect_Reflect_Namespace'(V0, V1, V2, V3, V4, V5, V6) -> begin (V14 = ('dn--un--reflect_Reflect_(List $a)'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--reflect_Reflect_String'(V7, V8, V9, V10, V11, V12, V13)) end end end end end end end, V0, V1, V2, V3, V4, ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldNamespace'(V5)), V6))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MkNS"/utf8>>)), [V16 | []], V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--reflect_Reflect_NameType'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.Bound'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bound"/utf8>>)), V6)) end()); {'Idris.Core.TT.Func'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Func"/utf8>>)), V6)) end()); {'Idris.Core.TT.DataCon', E0, E1} -> (fun (V7, V8) -> begin (V9 = ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V7, V6))), case V9 of {'Idris.Prelude.Types.Left', E2} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V11) -> begin (V12 = (('dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V8))(V6))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"DataCon"/utf8>>)), [V11 | [V14 | []]], V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); {'Idris.Core.TT.TyCon', E6, E7} -> (fun (V15, V16) -> begin (V17 = ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V15, V6))), case V17 of {'Idris.Prelude.Types.Left', E8} -> (fun (V18) -> {'Idris.Prelude.Types.Left', V18} end(E8)); {'Idris.Prelude.Types.Right', E9} -> (fun (V19) -> begin (V20 = (('dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V16))(V6))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"TyCon"/utf8>>)), [V19 | [V22 | []]], V6)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6, E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_Name'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.Name.UN', E0} -> (fun (V7) -> begin (V8 = ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V7, V6))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"UN"/utf8>>)), [V10 | []], V6)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.Name.MN', E3, E4} -> (fun (V11, V12) -> begin (V13 = ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V11, V6))), case V13 of {'Idris.Prelude.Types.Left', E5} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V15) -> begin (V16 = ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V12, V6))), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MN"/utf8>>)), [V15 | [V18 | []]], V6)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3, E4)); {'Idris.Core.Name.NS', E9, E10} -> (fun (V19, V20) -> begin (V21 = ('dn--un--reflect_Reflect_Namespace'(V0, V1, V2, V3, V4, V19, V6))), case V21 of {'Idris.Prelude.Types.Left', E11} -> (fun (V22) -> {'Idris.Prelude.Types.Left', V22} end(E11)); {'Idris.Prelude.Types.Right', E12} -> (fun (V23) -> begin (V24 = ('dn--un--reflect_Reflect_Name'(V0, V1, V2, V3, V4, V20, V6))), case V24 of {'Idris.Prelude.Types.Left', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V26) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"NS"/utf8>>)), [V23 | [V26 | []]], V6)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10)); {'Idris.Core.Name.DN', E15, E16} -> (fun (V27, V28) -> begin (V29 = ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V27, V6))), case V29 of {'Idris.Prelude.Types.Left', E17} -> (fun (V30) -> {'Idris.Prelude.Types.Left', V30} end(E17)); {'Idris.Prelude.Types.Right', E18} -> (fun (V31) -> begin (V32 = ('dn--un--reflect_Reflect_Name'(V0, V1, V2, V3, V4, V28, V6))), case V32 of {'Idris.Prelude.Types.Left', E19} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V34) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"DN"/utf8>>)), [V31 | [V34 | []]], V6)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15, E16)); {'Idris.Core.Name.RF', E21} -> (fun (V35) -> begin (V36 = ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V35, V6))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"RF"/utf8>>)), [V38 | []], V6)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); {'Idris.Core.Name.Resolved', E24} -> (fun (V39) -> begin (V68 = ('Idris.Idris2.Core.Context':'dn--un--full_HasNames_Name'(case V2 of {'Idris.Core.Context.MkDefs', E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> V40 end(E25, E26, E27, E28, E29, E30, E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.Name.Resolved', V39}, V6))), case V68 of {'Idris.Prelude.Types.Left', E53} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E53)); {'Idris.Prelude.Types.Right', E54} -> (fun (V70) -> case V70 of {'Idris.Core.Name.Resolved', E55} -> (fun (V71) -> ('un--cantReflect'(V1, <<"Name"/utf8>>, V6)) end(E55)); _ -> ('dn--un--reflect_Reflect_Name'(V0, V1, V2, V3, V4, V70, V6)) end end(E54)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); _ -> ('un--cantReflect'(V1, <<"Name"/utf8>>, V6)) end.
'dn--un--reflect_Reflect_ModuleIdent'(V0, V1, V2, V3, V4, V5, V6) -> begin (V14 = ('dn--un--reflect_Reflect_(List $a)'(fun (V7) -> fun (V8) -> fun (V9) -> fun (V10) -> fun (V11) -> fun (V12) -> fun (V13) -> ('dn--un--reflect_Reflect_String'(V7, V8, V9, V10, V11, V12, V13)) end end end end end end end, V0, V1, V2, V3, V4, ('Idris.Idris2.Core.Name.Namespace':'un--unsafeUnfoldModuleIdent'(V5)), V6))), case V14 of {'Idris.Prelude.Types.Left', E0} -> (fun (V15) -> {'Idris.Prelude.Types.Left', V15} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V16) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MkMI"/utf8>>)), [V16 | []], V6)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--reflect_Reflect_LazyReason'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of 0 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"LInf"/utf8>>)), V6)); 1 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"LLazy"/utf8>>)), V6)); 2 -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"LUnknown"/utf8>>)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.BI', V5}}}.
'dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.I', V5}}}.
'dn--un--reflect_Reflect_FC'(V0, V1, V2, V3, V4, V5) -> case V3 of 1 -> fun (V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.Erased', V1, 0}} end; _ -> fun (V7) -> case V5 of {'Idris.Core.FC.MkFC', E0, E1, E2} -> (fun (V8, V9, V10) -> begin (V11 = ('dn--un--reflect_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V8, V7))), case V11 of {'Idris.Prelude.Types.Left', E3} -> (fun (V12) -> {'Idris.Prelude.Types.Left', V12} end(E3)); {'Idris.Prelude.Types.Right', E4} -> (fun (V13) -> begin (V28 = ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V14) -> fun (V15) -> fun (V16) -> fun (V17) -> fun (V18) -> fun (V19) -> fun (V20) -> ('dn--un--reflect_Reflect_Int'(V14, V15, V16, V17, V18, V19, V20)) end end end end end end end, fun (V21) -> fun (V22) -> fun (V23) -> fun (V24) -> fun (V25) -> fun (V26) -> fun (V27) -> ('dn--un--reflect_Reflect_Int'(V21, V22, V23, V24, V25, V26, V27)) end end end end end end end}, V0, V1, V2, V3, V4, V9, V7))), case V28 of {'Idris.Prelude.Types.Left', E5} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E5)); {'Idris.Prelude.Types.Right', E6} -> (fun (V30) -> begin (V45 = ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V31) -> fun (V32) -> fun (V33) -> fun (V34) -> fun (V35) -> fun (V36) -> fun (V37) -> ('dn--un--reflect_Reflect_Int'(V31, V32, V33, V34, V35, V36, V37)) end end end end end end end, fun (V38) -> fun (V39) -> fun (V40) -> fun (V41) -> fun (V42) -> fun (V43) -> fun (V44) -> ('dn--un--reflect_Reflect_Int'(V38, V39, V40, V41, V42, V43, V44)) end end end end end end end}, V0, V1, V2, V3, V4, V10, V7))), case V45 of {'Idris.Prelude.Types.Left', E7} -> (fun (V46) -> {'Idris.Prelude.Types.Left', V46} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V47) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MkFC"/utf8>>)), [V13 | [V30 | [V47 | []]]], V7)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E4)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1, E2)); {'Idris.Core.FC.MkVirtualFC', E9, E10, E11} -> (fun (V48, V49, V50) -> begin (V51 = ('dn--un--reflect_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V48, V7))), case V51 of {'Idris.Prelude.Types.Left', E12} -> (fun (V52) -> {'Idris.Prelude.Types.Left', V52} end(E12)); {'Idris.Prelude.Types.Right', E13} -> (fun (V53) -> begin (V68 = ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V54) -> fun (V55) -> fun (V56) -> fun (V57) -> fun (V58) -> fun (V59) -> fun (V60) -> ('dn--un--reflect_Reflect_Int'(V54, V55, V56, V57, V58, V59, V60)) end end end end end end end, fun (V61) -> fun (V62) -> fun (V63) -> fun (V64) -> fun (V65) -> fun (V66) -> fun (V67) -> ('dn--un--reflect_Reflect_Int'(V61, V62, V63, V64, V65, V66, V67)) end end end end end end end}, V0, V1, V2, V3, V4, V49, V7))), case V68 of {'Idris.Prelude.Types.Left', E14} -> (fun (V69) -> {'Idris.Prelude.Types.Left', V69} end(E14)); {'Idris.Prelude.Types.Right', E15} -> (fun (V70) -> begin (V85 = ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'({'Idris.Builtin.MkPair', fun (V71) -> fun (V72) -> fun (V73) -> fun (V74) -> fun (V75) -> fun (V76) -> fun (V77) -> ('dn--un--reflect_Reflect_Int'(V71, V72, V73, V74, V75, V76, V77)) end end end end end end end, fun (V78) -> fun (V79) -> fun (V80) -> fun (V81) -> fun (V82) -> fun (V83) -> fun (V84) -> ('dn--un--reflect_Reflect_Int'(V78, V79, V80, V81, V82, V83, V84)) end end end end end end end}, V0, V1, V2, V3, V4, V50, V7))), case V85 of {'Idris.Prelude.Types.Left', E16} -> (fun (V86) -> {'Idris.Prelude.Types.Left', V86} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V87) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"MkFC"/utf8>>)), [V53 | [V70 | [V87 | []]]], V7)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E13)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9, E10, E11)); {'Idris.Core.FC.EmptyFC'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"EmptyFC"/utf8>>)), V7)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end.
'dn--un--reflect_Reflect_Double'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Db', V5}}}.
'dn--un--reflect_Reflect_Constant'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of {'Idris.Core.TT.I', E0} -> (fun (V7) -> begin (V8 = ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V7, V6))), case V8 of {'Idris.Prelude.Types.Left', E1} -> (fun (V9) -> {'Idris.Prelude.Types.Left', V9} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V10) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I"/utf8>>)), [V10 | []], V6)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); {'Idris.Core.TT.I8', E3} -> (fun (V11) -> begin (V12 = ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V11, V6))), case V12 of {'Idris.Prelude.Types.Left', E4} -> (fun (V13) -> {'Idris.Prelude.Types.Left', V13} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V14) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I8"/utf8>>)), [V14 | []], V6)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); {'Idris.Core.TT.I16', E6} -> (fun (V15) -> begin (V16 = ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V15, V6))), case V16 of {'Idris.Prelude.Types.Left', E7} -> (fun (V17) -> {'Idris.Prelude.Types.Left', V17} end(E7)); {'Idris.Prelude.Types.Right', E8} -> (fun (V18) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I16"/utf8>>)), [V18 | []], V6)) end(E8)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E6)); {'Idris.Core.TT.I32', E9} -> (fun (V19) -> begin (V20 = ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V19, V6))), case V20 of {'Idris.Prelude.Types.Left', E10} -> (fun (V21) -> {'Idris.Prelude.Types.Left', V21} end(E10)); {'Idris.Prelude.Types.Right', E11} -> (fun (V22) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I32"/utf8>>)), [V22 | []], V6)) end(E11)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E9)); {'Idris.Core.TT.I64', E12} -> (fun (V23) -> begin (V24 = ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V23, V6))), case V24 of {'Idris.Prelude.Types.Left', E13} -> (fun (V25) -> {'Idris.Prelude.Types.Left', V25} end(E13)); {'Idris.Prelude.Types.Right', E14} -> (fun (V26) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"I64"/utf8>>)), [V26 | []], V6)) end(E14)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E12)); {'Idris.Core.TT.BI', E15} -> (fun (V27) -> begin (V28 = ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V27, V6))), case V28 of {'Idris.Prelude.Types.Left', E16} -> (fun (V29) -> {'Idris.Prelude.Types.Left', V29} end(E16)); {'Idris.Prelude.Types.Right', E17} -> (fun (V30) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"BI"/utf8>>)), [V30 | []], V6)) end(E17)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E15)); {'Idris.Core.TT.B8', E18} -> (fun (V31) -> begin (V32 = ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V31, V6))), case V32 of {'Idris.Prelude.Types.Left', E19} -> (fun (V33) -> {'Idris.Prelude.Types.Left', V33} end(E19)); {'Idris.Prelude.Types.Right', E20} -> (fun (V34) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"B8"/utf8>>)), [V34 | []], V6)) end(E20)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E18)); {'Idris.Core.TT.B16', E21} -> (fun (V35) -> begin (V36 = ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V35, V6))), case V36 of {'Idris.Prelude.Types.Left', E22} -> (fun (V37) -> {'Idris.Prelude.Types.Left', V37} end(E22)); {'Idris.Prelude.Types.Right', E23} -> (fun (V38) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"B16"/utf8>>)), [V38 | []], V6)) end(E23)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E21)); {'Idris.Core.TT.B32', E24} -> (fun (V39) -> begin (V40 = ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V39, V6))), case V40 of {'Idris.Prelude.Types.Left', E25} -> (fun (V41) -> {'Idris.Prelude.Types.Left', V41} end(E25)); {'Idris.Prelude.Types.Right', E26} -> (fun (V42) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"B32"/utf8>>)), [V42 | []], V6)) end(E26)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E24)); {'Idris.Core.TT.B64', E27} -> (fun (V43) -> begin (V44 = ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V43, V6))), case V44 of {'Idris.Prelude.Types.Left', E28} -> (fun (V45) -> {'Idris.Prelude.Types.Left', V45} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V46) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"B64"/utf8>>)), [V46 | []], V6)) end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E27)); {'Idris.Core.TT.Str', E30} -> (fun (V47) -> begin (V48 = ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V47, V6))), case V48 of {'Idris.Prelude.Types.Left', E31} -> (fun (V49) -> {'Idris.Prelude.Types.Left', V49} end(E31)); {'Idris.Prelude.Types.Right', E32} -> (fun (V50) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Str"/utf8>>)), [V50 | []], V6)) end(E32)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E30)); {'Idris.Core.TT.Ch', E33} -> (fun (V51) -> begin (V52 = ('dn--un--reflect_Reflect_Char'(V0, V1, V2, V3, V4, V51, V6))), case V52 of {'Idris.Prelude.Types.Left', E34} -> (fun (V53) -> {'Idris.Prelude.Types.Left', V53} end(E34)); {'Idris.Prelude.Types.Right', E35} -> (fun (V54) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Ch"/utf8>>)), [V54 | []], V6)) end(E35)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E33)); {'Idris.Core.TT.Db', E36} -> (fun (V55) -> begin (V56 = ('dn--un--reflect_Reflect_Double'(V0, V1, V2, V3, V4, V55, V6))), case V56 of {'Idris.Prelude.Types.Left', E37} -> (fun (V57) -> {'Idris.Prelude.Types.Left', V57} end(E37)); {'Idris.Prelude.Types.Right', E38} -> (fun (V58) -> ('un--appCon'(V0, V1, V2, ('un--reflectiontt'(<<"Db"/utf8>>)), [V58 | []], V6)) end(E38)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E36)); {'Idris.Core.TT.WorldVal'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"WorldVal"/utf8>>)), V6)) end()); {'Idris.Core.TT.IntType'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"IntType"/utf8>>)), V6)) end()); {'Idris.Core.TT.Int8Type'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Int8Type"/utf8>>)), V6)) end()); {'Idris.Core.TT.Int16Type'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Int16Type"/utf8>>)), V6)) end()); {'Idris.Core.TT.Int32Type'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Int32Type"/utf8>>)), V6)) end()); {'Idris.Core.TT.Int64Type'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Int64Type"/utf8>>)), V6)) end()); {'Idris.Core.TT.IntegerType'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"IntegerType"/utf8>>)), V6)) end()); {'Idris.Core.TT.Bits8Type'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bits8Type"/utf8>>)), V6)) end()); {'Idris.Core.TT.Bits16Type'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bits16Type"/utf8>>)), V6)) end()); {'Idris.Core.TT.Bits32Type'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bits32Type"/utf8>>)), V6)) end()); {'Idris.Core.TT.Bits64Type'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"Bits64Type"/utf8>>)), V6)) end()); {'Idris.Core.TT.StringType'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"StringType"/utf8>>)), V6)) end()); {'Idris.Core.TT.CharType'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"CharType"/utf8>>)), V6)) end()); {'Idris.Core.TT.DoubleType'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"DoubleType"/utf8>>)), V6)) end()); {'Idris.Core.TT.WorldType'} -> (fun () -> ('un--getCon'(V0, V1, V2, ('un--reflectiontt'(<<"WorldType"/utf8>>)), V6)) end()); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_Char'(V0, V1, V2, V3, V4, V5, V6) -> {'Idris.Prelude.Types.Right', {'Idris.Core.TT.PrimVal', V1, {'Idris.Core.TT.Ch', V5}}}.
'dn--un--reflect_Reflect_Bool'(V0, V1, V2, V3, V4, V5, V6) -> case V5 of 1 -> ('un--getCon'(V0, V1, V2, ('un--basics'(<<"True"/utf8>>)), V6)); 0 -> ('un--getCon'(V0, V1, V2, ('un--basics'(<<"False"/utf8>>)), V6)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4, V5, V6) -> ('un--getCon'(V0, V1, V2, ('un--builtin'(<<"MkUnit"/utf8>>)), V6)).
'dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Builtin.MkPair', E0, E1} -> (fun (V8, V9) -> begin (V10 = (((((((('Idris.Idris2.Builtin':'un--fst'(V0))(V1))(V2))(V3))(V4))(V5))(V8))(V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = (((((((('Idris.Idris2.Builtin':'un--snd'(V0))(V1))(V2))(V3))(V4))(V5))(V9))(V7))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('un--appCon'(V1, V2, V3, ('un--builtin'(<<"MkPair"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | [{'Idris.Core.TT.Erased', V2, 0} | [V12 | [V15 | []]]]], V7)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_(PiInfo $t)'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Core.TT.Implicit'} -> (fun () -> ('un--appCon'(V1, V2, V3, ('un--reflectiontt'(<<"ImplicitArg"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | []], V7)) end()); {'Idris.Core.TT.Explicit'} -> (fun () -> ('un--appCon'(V1, V2, V3, ('un--reflectiontt'(<<"ExplicitArg"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | []], V7)) end()); {'Idris.Core.TT.AutoImplicit'} -> (fun () -> ('un--appCon'(V1, V2, V3, ('un--reflectiontt'(<<"AutoImplicit"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | []], V7)) end()); {'Idris.Core.TT.DefImplicit', E0} -> (fun (V8) -> begin (V9 = (((((((V0(V1))(V2))(V3))(V4))(V5))(V8))(V7))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> ('un--appCon'(V1, V2, V3, ('un--reflectiontt'(<<"DefImplicit"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | [V11 | []]], V7)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_(Maybe $a)'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of {'Idris.Prelude.Types.Nothing'} -> (fun () -> ('un--appCon'(V1, V2, V3, ('un--preludetypes'(<<"Nothing"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | []], V7)) end()); {'Idris.Prelude.Types.Just', E0} -> (fun (V8) -> begin (V9 = (((((((V0(V1))(V2))(V3))(V4))(V5))(V8))(V7))), case V9 of {'Idris.Prelude.Types.Left', E1} -> (fun (V10) -> {'Idris.Prelude.Types.Left', V10} end(E1)); {'Idris.Prelude.Types.Right', E2} -> (fun (V11) -> ('un--appCon'(V1, V2, V3, ('un--preludetypes'(<<"Just"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | [V11 | []]], V7)) end(E2)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--reflect_Reflect_(List1 $a)'(V0, V1, V2, V3, V4, V5, V6, V7) -> begin (V10 = (((((((V0(V1))(V2))(V3))(V4))(V5))(case V6 of {'Idris.Data.List1.:::', E0, E1} -> (fun (V8, V9) -> V8 end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end))(V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V15 = ('dn--un--reflect_Reflect_(List $a)'(V0, V1, V2, V3, V4, V5, case V6 of {'Idris.Data.List1.:::', E4, E5} -> (fun (V13, V14) -> V14 end(E4, E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V7))), case V15 of {'Idris.Prelude.Types.Left', E6} -> (fun (V16) -> {'Idris.Prelude.Types.Left', V16} end(E6)); {'Idris.Prelude.Types.Right', E7} -> (fun (V17) -> ('un--appCon'(V1, V2, V3, {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--mkNamespace'(<<"Data.List1"/utf8>>)), {'Idris.Core.Name.UN', <<":::"/utf8>>}}, [{'Idris.Core.TT.Erased', V2, 0} | [V12 | [V17 | []]]], V7)) end(E7)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'dn--un--reflect_Reflect_(List $a)'(V0, V1, V2, V3, V4, V5, V6, V7) -> case V6 of [] -> ('un--appCon'(V1, V2, V3, ('un--basics'(<<"Nil"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | []], V7)); [E0 | E1] -> (fun (V8, V9) -> begin (V10 = (((((((V0(V1))(V2))(V3))(V4))(V5))(V8))(V7))), case V10 of {'Idris.Prelude.Types.Left', E2} -> (fun (V11) -> {'Idris.Prelude.Types.Left', V11} end(E2)); {'Idris.Prelude.Types.Right', E3} -> (fun (V12) -> begin (V13 = ('dn--un--reflect_Reflect_(List $a)'(V0, V1, V2, V3, V4, V5, V9, V7))), case V13 of {'Idris.Prelude.Types.Left', E4} -> (fun (V14) -> {'Idris.Prelude.Types.Left', V14} end(E4)); {'Idris.Prelude.Types.Right', E5} -> (fun (V15) -> ('un--appCon'(V1, V2, V3, ('un--basics'(<<"::"/utf8>>)), [{'Idris.Core.TT.Erased', V2, 0} | [V12 | [V15 | []]]], V7)) end(E5)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E3)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end end(E0, E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end.
'dn--un--__Impl_Reify_Visibility'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_Visibility'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_VirtualIdent'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_VirtualIdent'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_TotalReq'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_TotalReq'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_String'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_String'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_RigCount'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_RigCount'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_OriginDesc'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_OriginDesc'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_Nat'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_Nat'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_Namespace'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Namespace'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_NameType'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_NameType'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_Name'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_Name'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_ModuleIdent'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_ModuleIdent'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_LazyReason'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_LazyReason'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_Integer'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Integer'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Int'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Int'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_FC'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_FC'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_Double'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Double'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Constant'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_Constant'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_Char'(V0, V1, V2, V3) -> ('dn--un--reify_Reify_Char'(V0, V1, V2, V3)).
'dn--un--__Impl_Reify_Bool'(V0, V1, V2, V3) -> fun (V4) -> ('dn--un--reify_Reify_Bool'(V0, V1, V2, V3, V4)) end.
'dn--un--__Impl_Reify_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reify_(PiInfo $t)'(V0, V1, V2, V3, V4) -> fun (V5) -> ('dn--un--reify_Reify_(PiInfo $t)'(V0, V1, V2, V3, V4, V5)) end.
'dn--un--__Impl_Reify_(Maybe $a)'(V0, V1, V2, V3, V4) -> fun (V5) -> ('dn--un--reify_Reify_(Maybe $a)'(V0, V1, V2, V3, V4, V5)) end.
'dn--un--__Impl_Reify_(List1 $a)'(V0, V1, V2, V3, V4) -> ('dn--un--reify_Reify_(List1 $a)'(V0, V1, V2, V3, V4)).
'dn--un--__Impl_Reify_(List $a)'(V0, V1, V2, V3, V4) -> fun (V5) -> ('dn--un--reify_Reify_(List $a)'(V0, V1, V2, V3, V4, V5)) end.
'dn--un--__Impl_Reflect_Visibility'(V0, V1, V2, V3, V4, V5) -> fun (V6) -> ('dn--un--reflect_Reflect_Visibility'(V0, V1, V2, V3, V4, V5, V6)) end.
'dn--un--__Impl_Reflect_VirtualIdent'(V0, V1, V2, V3, V4, V5) -> fun (V6) -> ('dn--un--reflect_Reflect_VirtualIdent'(V0, V1, V2, V3, V4, V5, V6)) end.
'dn--un--__Impl_Reflect_TotalReq'(V0, V1, V2, V3, V4, V5) -> fun (V6) -> ('dn--un--reflect_Reflect_TotalReq'(V0, V1, V2, V3, V4, V5, V6)) end.
'dn--un--__Impl_Reflect_String'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_String'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_RigCount'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_RigCount'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_OriginDesc'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Nat'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_Nat'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Namespace'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Namespace'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_NameType'(V0, V1, V2, V3, V4, V5) -> fun (V6) -> ('dn--un--reflect_Reflect_NameType'(V0, V1, V2, V3, V4, V5, V6)) end.
'dn--un--__Impl_Reflect_Name'(V0, V1, V2, V3, V4, V5) -> fun (V6) -> ('dn--un--reflect_Reflect_Name'(V0, V1, V2, V3, V4, V5, V6)) end.
'dn--un--__Impl_Reflect_ModuleIdent'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_ModuleIdent'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_LazyReason'(V0, V1, V2, V3, V4, V5) -> fun (V6) -> ('dn--un--reflect_Reflect_LazyReason'(V0, V1, V2, V3, V4, V5, V6)) end.
'dn--un--__Impl_Reflect_Integer'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Integer'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Int'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Int'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_FC'(V0, V1, V2, V3, V4, V5) -> ('dn--un--reflect_Reflect_FC'(V0, V1, V2, V3, V4, V5)).
'dn--un--__Impl_Reflect_Double'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Double'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Constant'(V0, V1, V2, V3, V4, V5) -> fun (V6) -> ('dn--un--reflect_Reflect_Constant'(V0, V1, V2, V3, V4, V5, V6)) end.
'dn--un--__Impl_Reflect_Char'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_Char'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_Bool'(V0, V1, V2, V3, V4, V5) -> fun (V6) -> ('dn--un--reflect_Reflect_Bool'(V0, V1, V2, V3, V4, V5, V6)) end.
'dn--un--__Impl_Reflect_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4, V5, V6) -> ('dn--un--reflect_Reflect_(|Unit,MkUnit|)'(V0, V1, V2, V3, V4, V5, V6)).
'dn--un--__Impl_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('dn--un--reflect_Reflect_(|((Builtin.Pair $a) $b),((Builtin.MkPair $a) $b)|)'(V0, V1, V2, V3, V4, V5, V6, V7)).
'dn--un--__Impl_Reflect_(PiInfo $t)'(V0, V1, V2, V3, V4, V5, V6) -> fun (V7) -> ('dn--un--reflect_Reflect_(PiInfo $t)'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'dn--un--__Impl_Reflect_(Maybe $a)'(V0, V1, V2, V3, V4, V5, V6) -> fun (V7) -> ('dn--un--reflect_Reflect_(Maybe $a)'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'dn--un--__Impl_Reflect_(List1 $a)'(V0, V1, V2, V3, V4, V5, V6, V7) -> ('dn--un--reflect_Reflect_(List1 $a)'(V0, V1, V2, V3, V4, V5, V6, V7)).
'dn--un--__Impl_Reflect_(List $a)'(V0, V1, V2, V3, V4, V5, V6) -> fun (V7) -> ('dn--un--reflect_Reflect_(List $a)'(V0, V1, V2, V3, V4, V5, V6, V7)) end.
'un--reify'(V0, V1, V2, V3, V4) -> ((((V0(V1))(V2))(V3))(V4)).
'un--reflectionttimp'(V0) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionTTImpNS'()), {'Idris.Core.Name.UN', V0}}.
'un--reflectiontt'(V0) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionTTNS'()), {'Idris.Core.Name.UN', V0}}.
'un--reflection'(V0) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--reflectionNS'()), {'Idris.Core.Name.UN', V0}}.
'un--reflect'(V0, V1, V2, V3, V4, V5, V6) -> ((((((V0(V1))(V2))(V3))(V4))(V5))(V6)).
'un--primio'(V0) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--primIONS'()), {'Idris.Core.Name.UN', V0}}.
'un--preludetypes'(V0) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--typesNS'()), {'Idris.Core.Name.UN', V0}}.
'un--getCon'(V0, V1, V2, V3, V4) -> begin (V33 = ('Idris.Idris2.Core.Context':'un--lookupDefExact'(V3, case V2 of {'Idris.Core.Context.MkDefs', E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27} -> (fun (V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32) -> V5 end(E0, E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, V4))), case V33 of {'Idris.Prelude.Types.Left', E28} -> (fun (V34) -> {'Idris.Prelude.Types.Left', V34} end(E28)); {'Idris.Prelude.Types.Right', E29} -> (fun (V35) -> case V35 of {'Idris.Prelude.Types.Just', E30} -> (fun (V36) -> case V36 of {'Idris.Core.Context.DCon', E59, E60, E61} -> (fun (V37, V38, V39) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(case V2 of {'Idris.Core.Context.MkDefs', E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89} -> (fun (V40, V41, V42, V43, V44, V45, V46, V47, V48, V49, V50, V51, V52, V53, V54, V55, V56, V57, V58, V59, V60, V61, V62, V63, V64, V65, V66, V67) -> V40 end(E62, E63, E64, E65, E66, E67, E68, E69, E70, E71, E72, E73, E74, E75, E76, E77, E78, E79, E80, E81, E82, E83, E84, E85, E86, E87, E88, E89)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.DataCon', V37, V38}, V3}, V4)) end(E59, E60, E61)); {'Idris.Core.Context.TCon', E90, E91, E92, E93, E94, E95, E96, E97} -> (fun (V68, V69, V70, V71, V72, V73, V74, V75) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(case V2 of {'Idris.Core.Context.MkDefs', E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125} -> (fun (V76, V77, V78, V79, V80, V81, V82, V83, V84, V85, V86, V87, V88, V89, V90, V91, V92, V93, V94, V95, V96, V97, V98, V99, V100, V101, V102, V103) -> V76 end(E98, E99, E100, E101, E102, E103, E104, E105, E106, E107, E108, E109, E110, E111, E112, E113, E114, E115, E116, E117, E118, E119, E120, E121, E122, E123, E124, E125)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.TyCon', V68, V69}, V3}, V4)) end(E90, E91, E92, E93, E94, E95, E96, E97)); _ -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(case V2 of {'Idris.Core.Context.MkDefs', E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58} -> (fun (V104, V105, V106, V107, V108, V109, V110, V111, V112, V113, V114, V115, V116, V117, V118, V119, V120, V121, V122, V123, V124, V125, V126, V127, V128, V129, V130, V131) -> V104 end(E31, E32, E33, E34, E35, E36, E37, E38, E39, E40, E41, E42, E43, E44, E45, E46, E47, E48, E49, E50, E51, E52, E53, E54, E55, E56, E57, E58)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, {'Idris.Core.TT.Ref', V1, {'Idris.Core.TT.Func'}, V3}, V4)) end end(E30)); _ -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.UndefinedName', V1, V3}, V4)) end end(E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
'un--cantReify'(V0, V1, V2) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', ('Idris.Idris2.Core.Value':'un--getLoc'(V0)), ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t reify as "/utf8>>, V1))}, V2)).
'un--cantReflect'(V0, V1, V2) -> ('Idris.Idris2.Core.Core':'dn--un--throw_Catchable_Core_Error'({'Idris.Core.Core.GenericMsg', V0, ('Idris.Idris2.Prelude.Types.String':'un--++'(<<"Can\x{27}t reflect as "/utf8>>, V1))}, V2)).
'un--builtin'(V0) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--builtinNS'()), {'Idris.Core.Name.UN', V0}}.
'un--basics'(V0) -> {'Idris.Core.Name.NS', ('Idris.Idris2.Core.Name.Namespace':'un--basicsNS'()), {'Idris.Core.Name.UN', V0}}.
'un--appCon'(V0, V1, V2, V3, V4, V5) -> begin (V6 = ('un--getCon'(V0, V1, V2, V3, V5))), case V6 of {'Idris.Prelude.Types.Left', E0} -> (fun (V7) -> {'Idris.Prelude.Types.Left', V7} end(E0)); {'Idris.Prelude.Types.Right', E1} -> (fun (V8) -> ('Idris.Idris2.Core.Context':'dn--un--resolved_HasNames_(Term $vars)'(case V2 of {'Idris.Core.Context.MkDefs', E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29} -> (fun (V9, V10, V11, V12, V13, V14, V15, V16, V17, V18, V19, V20, V21, V22, V23, V24, V25, V26, V27, V28, V29, V30, V31, V32, V33, V34, V35, V36) -> V9 end(E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22, E23, E24, E25, E26, E27, E28, E29)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end, ('Idris.Idris2.Core.TT':'un--apply'(V1, V8, V4)), V5)) end(E1)); _ -> ('erlang':'throw'("Error: Unreachable branch")) end end.
